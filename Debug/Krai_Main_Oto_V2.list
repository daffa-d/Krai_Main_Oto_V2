
Krai_Main_Oto_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014bc8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000da4  08014d78  08014d78  00024d78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015b1c  08015b1c  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  08015b1c  08015b1c  00025b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015b24  08015b24  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08015b24  08015b24  00025b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015b2c  08015b2c  00025b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08015b30  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301f8  2**0
                  CONTENTS
 10 .bss          00007f2c  200001f8  200001f8  000301f8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20008124  20008124  000301f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002980e  00000000  00000000  0003026b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004f0b  00000000  00000000  00059a79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001e10  00000000  00000000  0005e988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000177f  00000000  00000000  00060798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000a840  00000000  00000000  00061f17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000234ae  00000000  00000000  0006c757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f2f4c  00000000  00000000  0008fc05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000097d4  00000000  00000000  00182b54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  0018c328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08014d60 	.word	0x08014d60

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	08014d60 	.word	0x08014d60

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b970 	b.w	8000f60 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	460d      	mov	r5, r1
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	460f      	mov	r7, r1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d14a      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4694      	mov	ip, r2
 8000cac:	d965      	bls.n	8000d7a <__udivmoddi4+0xe2>
 8000cae:	fab2 f382 	clz	r3, r2
 8000cb2:	b143      	cbz	r3, 8000cc6 <__udivmoddi4+0x2e>
 8000cb4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cb8:	f1c3 0220 	rsb	r2, r3, #32
 8000cbc:	409f      	lsls	r7, r3
 8000cbe:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc2:	4317      	orrs	r7, r2
 8000cc4:	409c      	lsls	r4, r3
 8000cc6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cca:	fa1f f58c 	uxth.w	r5, ip
 8000cce:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cd2:	0c22      	lsrs	r2, r4, #16
 8000cd4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cd8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cdc:	fb01 f005 	mul.w	r0, r1, r5
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	d90a      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ce8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cec:	f080 811c 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	f240 8119 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4462      	add	r2, ip
 8000cfa:	1a12      	subs	r2, r2, r0
 8000cfc:	b2a4      	uxth	r4, r4
 8000cfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0a:	fb00 f505 	mul.w	r5, r0, r5
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	d90a      	bls.n	8000d28 <__udivmoddi4+0x90>
 8000d12:	eb1c 0404 	adds.w	r4, ip, r4
 8000d16:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1a:	f080 8107 	bcs.w	8000f2c <__udivmoddi4+0x294>
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	f240 8104 	bls.w	8000f2c <__udivmoddi4+0x294>
 8000d24:	4464      	add	r4, ip
 8000d26:	3802      	subs	r0, #2
 8000d28:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2c:	1b64      	subs	r4, r4, r5
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b11e      	cbz	r6, 8000d3a <__udivmoddi4+0xa2>
 8000d32:	40dc      	lsrs	r4, r3
 8000d34:	2300      	movs	r3, #0
 8000d36:	e9c6 4300 	strd	r4, r3, [r6]
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0xbc>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80ed 	beq.w	8000f22 <__udivmoddi4+0x28a>
 8000d48:	2100      	movs	r1, #0
 8000d4a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d54:	fab3 f183 	clz	r1, r3
 8000d58:	2900      	cmp	r1, #0
 8000d5a:	d149      	bne.n	8000df0 <__udivmoddi4+0x158>
 8000d5c:	42ab      	cmp	r3, r5
 8000d5e:	d302      	bcc.n	8000d66 <__udivmoddi4+0xce>
 8000d60:	4282      	cmp	r2, r0
 8000d62:	f200 80f8 	bhi.w	8000f56 <__udivmoddi4+0x2be>
 8000d66:	1a84      	subs	r4, r0, r2
 8000d68:	eb65 0203 	sbc.w	r2, r5, r3
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	4617      	mov	r7, r2
 8000d70:	2e00      	cmp	r6, #0
 8000d72:	d0e2      	beq.n	8000d3a <__udivmoddi4+0xa2>
 8000d74:	e9c6 4700 	strd	r4, r7, [r6]
 8000d78:	e7df      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d7a:	b902      	cbnz	r2, 8000d7e <__udivmoddi4+0xe6>
 8000d7c:	deff      	udf	#255	; 0xff
 8000d7e:	fab2 f382 	clz	r3, r2
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f040 8090 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d88:	1a8a      	subs	r2, r1, r2
 8000d8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8e:	fa1f fe8c 	uxth.w	lr, ip
 8000d92:	2101      	movs	r1, #1
 8000d94:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d98:	fb07 2015 	mls	r0, r7, r5, r2
 8000d9c:	0c22      	lsrs	r2, r4, #16
 8000d9e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000da2:	fb0e f005 	mul.w	r0, lr, r5
 8000da6:	4290      	cmp	r0, r2
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000daa:	eb1c 0202 	adds.w	r2, ip, r2
 8000dae:	f105 38ff 	add.w	r8, r5, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4290      	cmp	r0, r2
 8000db6:	f200 80cb 	bhi.w	8000f50 <__udivmoddi4+0x2b8>
 8000dba:	4645      	mov	r5, r8
 8000dbc:	1a12      	subs	r2, r2, r0
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dc4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dc8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dcc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd0:	45a6      	cmp	lr, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x14e>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ddc:	d202      	bcs.n	8000de4 <__udivmoddi4+0x14c>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	f200 80bb 	bhi.w	8000f5a <__udivmoddi4+0x2c2>
 8000de4:	4610      	mov	r0, r2
 8000de6:	eba4 040e 	sub.w	r4, r4, lr
 8000dea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dee:	e79f      	b.n	8000d30 <__udivmoddi4+0x98>
 8000df0:	f1c1 0720 	rsb	r7, r1, #32
 8000df4:	408b      	lsls	r3, r1
 8000df6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dfa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dfe:	fa05 f401 	lsl.w	r4, r5, r1
 8000e02:	fa20 f307 	lsr.w	r3, r0, r7
 8000e06:	40fd      	lsrs	r5, r7
 8000e08:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e0c:	4323      	orrs	r3, r4
 8000e0e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e12:	fa1f fe8c 	uxth.w	lr, ip
 8000e16:	fb09 5518 	mls	r5, r9, r8, r5
 8000e1a:	0c1c      	lsrs	r4, r3, #16
 8000e1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e20:	fb08 f50e 	mul.w	r5, r8, lr
 8000e24:	42a5      	cmp	r5, r4
 8000e26:	fa02 f201 	lsl.w	r2, r2, r1
 8000e2a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e38:	f080 8088 	bcs.w	8000f4c <__udivmoddi4+0x2b4>
 8000e3c:	42a5      	cmp	r5, r4
 8000e3e:	f240 8085 	bls.w	8000f4c <__udivmoddi4+0x2b4>
 8000e42:	f1a8 0802 	sub.w	r8, r8, #2
 8000e46:	4464      	add	r4, ip
 8000e48:	1b64      	subs	r4, r4, r5
 8000e4a:	b29d      	uxth	r5, r3
 8000e4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e50:	fb09 4413 	mls	r4, r9, r3, r4
 8000e54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e68:	d26c      	bcs.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	d96a      	bls.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6e:	3b02      	subs	r3, #2
 8000e70:	4464      	add	r4, ip
 8000e72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e76:	fba3 9502 	umull	r9, r5, r3, r2
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	42ac      	cmp	r4, r5
 8000e80:	46c8      	mov	r8, r9
 8000e82:	46ae      	mov	lr, r5
 8000e84:	d356      	bcc.n	8000f34 <__udivmoddi4+0x29c>
 8000e86:	d053      	beq.n	8000f30 <__udivmoddi4+0x298>
 8000e88:	b156      	cbz	r6, 8000ea0 <__udivmoddi4+0x208>
 8000e8a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e8e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e92:	fa04 f707 	lsl.w	r7, r4, r7
 8000e96:	40ca      	lsrs	r2, r1
 8000e98:	40cc      	lsrs	r4, r1
 8000e9a:	4317      	orrs	r7, r2
 8000e9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea8:	f1c3 0120 	rsb	r1, r3, #32
 8000eac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eb0:	fa20 f201 	lsr.w	r2, r0, r1
 8000eb4:	fa25 f101 	lsr.w	r1, r5, r1
 8000eb8:	409d      	lsls	r5, r3
 8000eba:	432a      	orrs	r2, r5
 8000ebc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec0:	fa1f fe8c 	uxth.w	lr, ip
 8000ec4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ec8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ed2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ed6:	428d      	cmp	r5, r1
 8000ed8:	fa04 f403 	lsl.w	r4, r4, r3
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x258>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ee6:	d22f      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000ee8:	428d      	cmp	r5, r1
 8000eea:	d92d      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000eec:	3802      	subs	r0, #2
 8000eee:	4461      	add	r1, ip
 8000ef0:	1b49      	subs	r1, r1, r5
 8000ef2:	b292      	uxth	r2, r2
 8000ef4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ef8:	fb07 1115 	mls	r1, r7, r5, r1
 8000efc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f00:	fb05 f10e 	mul.w	r1, r5, lr
 8000f04:	4291      	cmp	r1, r2
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x282>
 8000f08:	eb1c 0202 	adds.w	r2, ip, r2
 8000f0c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f10:	d216      	bcs.n	8000f40 <__udivmoddi4+0x2a8>
 8000f12:	4291      	cmp	r1, r2
 8000f14:	d914      	bls.n	8000f40 <__udivmoddi4+0x2a8>
 8000f16:	3d02      	subs	r5, #2
 8000f18:	4462      	add	r2, ip
 8000f1a:	1a52      	subs	r2, r2, r1
 8000f1c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f20:	e738      	b.n	8000d94 <__udivmoddi4+0xfc>
 8000f22:	4631      	mov	r1, r6
 8000f24:	4630      	mov	r0, r6
 8000f26:	e708      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000f28:	4639      	mov	r1, r7
 8000f2a:	e6e6      	b.n	8000cfa <__udivmoddi4+0x62>
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	e6fb      	b.n	8000d28 <__udivmoddi4+0x90>
 8000f30:	4548      	cmp	r0, r9
 8000f32:	d2a9      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f34:	ebb9 0802 	subs.w	r8, r9, r2
 8000f38:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	e7a3      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f40:	4645      	mov	r5, r8
 8000f42:	e7ea      	b.n	8000f1a <__udivmoddi4+0x282>
 8000f44:	462b      	mov	r3, r5
 8000f46:	e794      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f48:	4640      	mov	r0, r8
 8000f4a:	e7d1      	b.n	8000ef0 <__udivmoddi4+0x258>
 8000f4c:	46d0      	mov	r8, sl
 8000f4e:	e77b      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f50:	3d02      	subs	r5, #2
 8000f52:	4462      	add	r2, ip
 8000f54:	e732      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e70a      	b.n	8000d70 <__udivmoddi4+0xd8>
 8000f5a:	4464      	add	r4, ip
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	e742      	b.n	8000de6 <__udivmoddi4+0x14e>

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	4619      	mov	r1, r3
 8000f72:	2007      	movs	r0, #7
 8000f74:	f001 fbbc 	bl	80026f0 <bno055_writeData>
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	203d      	movs	r0, #61	; 0x3d
 8000f90:	f001 fbae 	bl	80026f0 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d103      	bne.n	8000fa2 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8000f9a:	2013      	movs	r0, #19
 8000f9c:	f001 fb9c 	bl	80026d8 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8000fa0:	e002      	b.n	8000fa8 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8000fa2:	2007      	movs	r0, #7
 8000fa4:	f001 fb98 	bl	80026d8 <bno055_delay>
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	f7ff ffe3 	bl	8000f80 <bno055_setOperationMode>
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8000fc2:	200c      	movs	r0, #12
 8000fc4:	f7ff ffdc 	bl	8000f80 <bno055_setOperationMode>
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8000fd0:	2120      	movs	r1, #32
 8000fd2:	203f      	movs	r0, #63	; 0x3f
 8000fd4:	f001 fb8c 	bl	80026f0 <bno055_writeData>
  bno055_delay(700);
 8000fd8:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000fdc:	f001 fb7c 	bl	80026d8 <bno055_delay>
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
  bno055_reset();
 8000fea:	f7ff ffef 	bl	8000fcc <bno055_reset>

  uint8_t id = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8000ff2:	1dfb      	adds	r3, r7, #7
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f001 fc65 	bl	80028c8 <bno055_readData>
  if (id != BNO055_ID) {
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2ba0      	cmp	r3, #160	; 0xa0
 8001002:	d004      	beq.n	800100e <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	4619      	mov	r1, r3
 8001008:	4809      	ldr	r0, [pc, #36]	; (8001030 <bno055_setup+0x4c>)
 800100a:	f011 fcb5 	bl	8012978 <iprintf>
  }
  bno055_setPage(0);
 800100e:	2000      	movs	r0, #0
 8001010:	f7ff ffa8 	bl	8000f64 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8001014:	2100      	movs	r1, #0
 8001016:	203f      	movs	r0, #63	; 0x3f
 8001018:	f001 fb6a 	bl	80026f0 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 800101c:	f7ff ffc8 	bl	8000fb0 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8001020:	200a      	movs	r0, #10
 8001022:	f001 fb59 	bl	80026d8 <bno055_delay>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	08014d78 	.word	0x08014d78

08001034 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8001034:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001038:	b09e      	sub	sp, #120	; 0x78
 800103a:	af00      	add	r7, sp, #0
 800103c:	4603      	mov	r3, r0
 800103e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 8001042:	2000      	movs	r0, #0
 8001044:	f7ff ff8e 	bl	8000f64 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8001048:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800104c:	2b20      	cmp	r3, #32
 800104e:	d108      	bne.n	8001062 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8001050:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001054:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001058:	2208      	movs	r2, #8
 800105a:	4618      	mov	r0, r3
 800105c:	f001 fc34 	bl	80028c8 <bno055_readData>
 8001060:	e007      	b.n	8001072 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8001062:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001066:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800106a:	2206      	movs	r2, #6
 800106c:	4618      	mov	r0, r3
 800106e:	f001 fc2b 	bl	80028c8 <bno055_readData>

  double scale = 1;
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	4b8b      	ldr	r3, [pc, #556]	; (80012a4 <bno055_getVector+0x270>)
 8001078:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 800107c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001080:	2b0e      	cmp	r3, #14
 8001082:	d109      	bne.n	8001098 <bno055_getVector+0x64>
    scale = magScale;
 8001084:	4b88      	ldr	r3, [pc, #544]	; (80012a8 <bno055_getVector+0x274>)
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fa4b 	bl	8000524 <__aeabi_ui2d>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8001096:	e03e      	b.n	8001116 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8001098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800109c:	2b08      	cmp	r3, #8
 800109e:	d007      	beq.n	80010b0 <bno055_getVector+0x7c>
 80010a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010a4:	2b28      	cmp	r3, #40	; 0x28
 80010a6:	d003      	beq.n	80010b0 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 80010a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010ac:	2b2e      	cmp	r3, #46	; 0x2e
 80010ae:	d109      	bne.n	80010c4 <bno055_getVector+0x90>
    scale = accelScale;
 80010b0:	4b7e      	ldr	r3, [pc, #504]	; (80012ac <bno055_getVector+0x278>)
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff fa35 	bl	8000524 <__aeabi_ui2d>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80010c2:	e028      	b.n	8001116 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 80010c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010c8:	2b14      	cmp	r3, #20
 80010ca:	d109      	bne.n	80010e0 <bno055_getVector+0xac>
    scale = angularRateScale;
 80010cc:	4b78      	ldr	r3, [pc, #480]	; (80012b0 <bno055_getVector+0x27c>)
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff fa27 	bl	8000524 <__aeabi_ui2d>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80010de:	e01a      	b.n	8001116 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 80010e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010e4:	2b1a      	cmp	r3, #26
 80010e6:	d109      	bne.n	80010fc <bno055_getVector+0xc8>
    scale = eulerScale;
 80010e8:	4b72      	ldr	r3, [pc, #456]	; (80012b4 <bno055_getVector+0x280>)
 80010ea:	881b      	ldrh	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fa19 	bl	8000524 <__aeabi_ui2d>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80010fa:	e00c      	b.n	8001116 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 80010fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001100:	2b20      	cmp	r3, #32
 8001102:	d108      	bne.n	8001116 <bno055_getVector+0xe2>
    scale = quaScale;
 8001104:	4b6c      	ldr	r3, [pc, #432]	; (80012b8 <bno055_getVector+0x284>)
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fa0b 	bl	8000524 <__aeabi_ui2d>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8001116:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800111a:	2220      	movs	r2, #32
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f011 fd90 	bl	8012c44 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8001124:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001128:	2b20      	cmp	r3, #32
 800112a:	d150      	bne.n	80011ce <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 800112c:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	b21a      	sxth	r2, r3
 8001134:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001138:	b21b      	sxth	r3, r3
 800113a:	4313      	orrs	r3, r2
 800113c:	b21b      	sxth	r3, r3
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fa00 	bl	8000544 <__aeabi_i2d>
 8001144:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001148:	f7ff fb90 	bl	800086c <__aeabi_ddiv>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001154:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	b21a      	sxth	r2, r3
 800115c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001160:	b21b      	sxth	r3, r3
 8001162:	4313      	orrs	r3, r2
 8001164:	b21b      	sxth	r3, r3
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff f9ec 	bl	8000544 <__aeabi_i2d>
 800116c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001170:	f7ff fb7c 	bl	800086c <__aeabi_ddiv>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 800117c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001180:	021b      	lsls	r3, r3, #8
 8001182:	b21a      	sxth	r2, r3
 8001184:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001188:	b21b      	sxth	r3, r3
 800118a:	4313      	orrs	r3, r2
 800118c:	b21b      	sxth	r3, r3
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff f9d8 	bl	8000544 <__aeabi_i2d>
 8001194:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001198:	f7ff fb68 	bl	800086c <__aeabi_ddiv>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 80011a4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	b21a      	sxth	r2, r3
 80011ac:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80011b0:	b21b      	sxth	r3, r3
 80011b2:	4313      	orrs	r3, r2
 80011b4:	b21b      	sxth	r3, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f9c4 	bl	8000544 <__aeabi_i2d>
 80011bc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80011c0:	f7ff fb54 	bl	800086c <__aeabi_ddiv>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80011cc:	e03b      	b.n	8001246 <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80011ce:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80011d2:	021b      	lsls	r3, r3, #8
 80011d4:	b21a      	sxth	r2, r3
 80011d6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80011da:	b21b      	sxth	r3, r3
 80011dc:	4313      	orrs	r3, r2
 80011de:	b21b      	sxth	r3, r3
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff f9af 	bl	8000544 <__aeabi_i2d>
 80011e6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80011ea:	f7ff fb3f 	bl	800086c <__aeabi_ddiv>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80011f6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80011fa:	021b      	lsls	r3, r3, #8
 80011fc:	b21a      	sxth	r2, r3
 80011fe:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001202:	b21b      	sxth	r3, r3
 8001204:	4313      	orrs	r3, r2
 8001206:	b21b      	sxth	r3, r3
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f99b 	bl	8000544 <__aeabi_i2d>
 800120e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001212:	f7ff fb2b 	bl	800086c <__aeabi_ddiv>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 800121e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001222:	021b      	lsls	r3, r3, #8
 8001224:	b21a      	sxth	r2, r3
 8001226:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800122a:	b21b      	sxth	r3, r3
 800122c:	4313      	orrs	r3, r2
 800122e:	b21b      	sxth	r3, r3
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f987 	bl	8000544 <__aeabi_i2d>
 8001236:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800123a:	f7ff fb17 	bl	800086c <__aeabi_ddiv>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 8001246:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800124a:	f107 0528 	add.w	r5, r7, #40	; 0x28
 800124e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001250:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001252:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001256:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800125a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800125e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001262:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001266:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800126a:	ec49 8b14 	vmov	d4, r8, r9
 800126e:	ec45 4b15 	vmov	d5, r4, r5
 8001272:	ec41 0b16 	vmov	d6, r0, r1
 8001276:	ec43 2b17 	vmov	d7, r2, r3
}
 800127a:	eeb0 0a44 	vmov.f32	s0, s8
 800127e:	eef0 0a64 	vmov.f32	s1, s9
 8001282:	eeb0 1a45 	vmov.f32	s2, s10
 8001286:	eef0 1a65 	vmov.f32	s3, s11
 800128a:	eeb0 2a46 	vmov.f32	s4, s12
 800128e:	eef0 2a66 	vmov.f32	s5, s13
 8001292:	eeb0 3a47 	vmov.f32	s6, s14
 8001296:	eef0 3a67 	vmov.f32	s7, s15
 800129a:	3778      	adds	r7, #120	; 0x78
 800129c:	46bd      	mov	sp, r7
 800129e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80012a2:	bf00      	nop
 80012a4:	3ff00000 	.word	0x3ff00000
 80012a8:	20000006 	.word	0x20000006
 80012ac:	20000000 	.word	0x20000000
 80012b0:	20000002 	.word	0x20000002
 80012b4:	20000004 	.word	0x20000004
 80012b8:	20000008 	.word	0x20000008

080012bc <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 80012bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012c0:	b090      	sub	sp, #64	; 0x40
 80012c2:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 80012c4:	201a      	movs	r0, #26
 80012c6:	f7ff feb5 	bl	8001034 <bno055_getVector>
 80012ca:	eeb0 4a40 	vmov.f32	s8, s0
 80012ce:	eef0 4a60 	vmov.f32	s9, s1
 80012d2:	eeb0 5a41 	vmov.f32	s10, s2
 80012d6:	eef0 5a61 	vmov.f32	s11, s3
 80012da:	eeb0 6a42 	vmov.f32	s12, s4
 80012de:	eef0 6a62 	vmov.f32	s13, s5
 80012e2:	eeb0 7a43 	vmov.f32	s14, s6
 80012e6:	eef0 7a63 	vmov.f32	s15, s7
 80012ea:	ed87 4b08 	vstr	d4, [r7, #32]
 80012ee:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 80012f2:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 80012f6:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 80012fa:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80012fe:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001302:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001306:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800130a:	ec49 8b14 	vmov	d4, r8, r9
 800130e:	ec45 4b15 	vmov	d5, r4, r5
 8001312:	ec41 0b16 	vmov	d6, r0, r1
 8001316:	ec43 2b17 	vmov	d7, r2, r3
}
 800131a:	eeb0 0a44 	vmov.f32	s0, s8
 800131e:	eef0 0a64 	vmov.f32	s1, s9
 8001322:	eeb0 1a45 	vmov.f32	s2, s10
 8001326:	eef0 1a65 	vmov.f32	s3, s11
 800132a:	eeb0 2a46 	vmov.f32	s4, s12
 800132e:	eef0 2a66 	vmov.f32	s5, s13
 8001332:	eeb0 3a47 	vmov.f32	s6, s14
 8001336:	eef0 3a67 	vmov.f32	s7, s15
 800133a:	3740      	adds	r7, #64	; 0x40
 800133c:	46bd      	mov	sp, r7
 800133e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001344 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af02      	add	r7, sp, #8
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	f023 030f 	bic.w	r3, r3, #15
 8001354:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	011b      	lsls	r3, r3, #4
 800135a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800135c:	7bfb      	ldrb	r3, [r7, #15]
 800135e:	f043 030c 	orr.w	r3, r3, #12
 8001362:	b2db      	uxtb	r3, r3
 8001364:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001366:	7bfb      	ldrb	r3, [r7, #15]
 8001368:	f043 0308 	orr.w	r3, r3, #8
 800136c:	b2db      	uxtb	r3, r3
 800136e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001370:	7bbb      	ldrb	r3, [r7, #14]
 8001372:	f043 030c 	orr.w	r3, r3, #12
 8001376:	b2db      	uxtb	r3, r3
 8001378:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800137a:	7bbb      	ldrb	r3, [r7, #14]
 800137c:	f043 0308 	orr.w	r3, r3, #8
 8001380:	b2db      	uxtb	r3, r3
 8001382:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001384:	f107 0208 	add.w	r2, r7, #8
 8001388:	2364      	movs	r3, #100	; 0x64
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	2304      	movs	r3, #4
 800138e:	214e      	movs	r1, #78	; 0x4e
 8001390:	4803      	ldr	r0, [pc, #12]	; (80013a0 <lcd_send_cmd+0x5c>)
 8001392:	f008 fa33 	bl	80097fc <HAL_I2C_Master_Transmit>
}
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	200002b0 	.word	0x200002b0

080013a4 <lcd_send_data>:

void lcd_send_data (char data)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af02      	add	r7, sp, #8
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	f023 030f 	bic.w	r3, r3, #15
 80013b4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	011b      	lsls	r3, r3, #4
 80013ba:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	f043 030d 	orr.w	r3, r3, #13
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	f043 0309 	orr.w	r3, r3, #9
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80013d0:	7bbb      	ldrb	r3, [r7, #14]
 80013d2:	f043 030d 	orr.w	r3, r3, #13
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80013da:	7bbb      	ldrb	r3, [r7, #14]
 80013dc:	f043 0309 	orr.w	r3, r3, #9
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80013e4:	f107 0208 	add.w	r2, r7, #8
 80013e8:	2364      	movs	r3, #100	; 0x64
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	2304      	movs	r3, #4
 80013ee:	214e      	movs	r1, #78	; 0x4e
 80013f0:	4803      	ldr	r0, [pc, #12]	; (8001400 <lcd_send_data+0x5c>)
 80013f2:	f008 fa03 	bl	80097fc <HAL_I2C_Master_Transmit>
}
 80013f6:	bf00      	nop
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200002b0 	.word	0x200002b0

08001404 <lcd_clear>:

void lcd_clear (void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x00);
 800140a:	2000      	movs	r0, #0
 800140c:	f7ff ff9a 	bl	8001344 <lcd_send_cmd>
	for (int i=0; i<100; i++)
 8001410:	2300      	movs	r3, #0
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	e005      	b.n	8001422 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8001416:	2020      	movs	r0, #32
 8001418:	f7ff ffc4 	bl	80013a4 <lcd_send_data>
	for (int i=0; i<100; i++)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3301      	adds	r3, #1
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b63      	cmp	r3, #99	; 0x63
 8001426:	ddf6      	ble.n	8001416 <lcd_clear+0x12>
	}
}
 8001428:	bf00      	nop
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <lcd_init>:

void lcd_init (void)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	af00      	add	r7, sp, #0
	// 4 bit initialisation
//	HAL_Delay(50);  // wait for >40ms
	vTaskDelay(50);
 8001436:	2032      	movs	r0, #50	; 0x32
 8001438:	f00d f8d0 	bl	800e5dc <vTaskDelay>
	lcd_send_cmd (0x30);
 800143c:	2030      	movs	r0, #48	; 0x30
 800143e:	f7ff ff81 	bl	8001344 <lcd_send_cmd>
//	HAL_Delay(5);  // wait for >4.1ms
	vTaskDelay(5);
 8001442:	2005      	movs	r0, #5
 8001444:	f00d f8ca 	bl	800e5dc <vTaskDelay>
	lcd_send_cmd (0x30);
 8001448:	2030      	movs	r0, #48	; 0x30
 800144a:	f7ff ff7b 	bl	8001344 <lcd_send_cmd>
//	HAL_Delay(1);  // wait for >100us
	vTaskDelay(1);
 800144e:	2001      	movs	r0, #1
 8001450:	f00d f8c4 	bl	800e5dc <vTaskDelay>
	lcd_send_cmd (0x30);
 8001454:	2030      	movs	r0, #48	; 0x30
 8001456:	f7ff ff75 	bl	8001344 <lcd_send_cmd>
//	HAL_Delay(10);
	vTaskDelay(10);
 800145a:	200a      	movs	r0, #10
 800145c:	f00d f8be 	bl	800e5dc <vTaskDelay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001460:	2020      	movs	r0, #32
 8001462:	f7ff ff6f 	bl	8001344 <lcd_send_cmd>
//	HAL_Delay(10);
	vTaskDelay(10);
 8001466:	200a      	movs	r0, #10
 8001468:	f00d f8b8 	bl	800e5dc <vTaskDelay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800146c:	2028      	movs	r0, #40	; 0x28
 800146e:	f7ff ff69 	bl	8001344 <lcd_send_cmd>
//	HAL_Delay(1);
	vTaskDelay(1);
 8001472:	2001      	movs	r0, #1
 8001474:	f00d f8b2 	bl	800e5dc <vTaskDelay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001478:	2008      	movs	r0, #8
 800147a:	f7ff ff63 	bl	8001344 <lcd_send_cmd>
//	HAL_Delay(1);
	vTaskDelay(1);
 800147e:	2001      	movs	r0, #1
 8001480:	f00d f8ac 	bl	800e5dc <vTaskDelay>
	lcd_send_cmd (0x01);  // clear display
 8001484:	2001      	movs	r0, #1
 8001486:	f7ff ff5d 	bl	8001344 <lcd_send_cmd>
//	HAL_Delay(1);
	vTaskDelay(1);
 800148a:	2001      	movs	r0, #1
 800148c:	f00d f8a6 	bl	800e5dc <vTaskDelay>
//	HAL_Delay(1);
	vTaskDelay(1);
 8001490:	2001      	movs	r0, #1
 8001492:	f00d f8a3 	bl	800e5dc <vTaskDelay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001496:	2006      	movs	r0, #6
 8001498:	f7ff ff54 	bl	8001344 <lcd_send_cmd>
//	HAL_Delay(1);
	vTaskDelay(1);
 800149c:	2001      	movs	r0, #1
 800149e:	f00d f89d 	bl	800e5dc <vTaskDelay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80014a2:	200c      	movs	r0, #12
 80014a4:	f7ff ff4e 	bl	8001344 <lcd_send_cmd>
}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}

080014ac <lcd_send_string>:

void lcd_send_string (char *str)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80014b4:	e006      	b.n	80014c4 <lcd_send_string+0x18>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	1c5a      	adds	r2, r3, #1
 80014ba:	607a      	str	r2, [r7, #4]
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff ff70 	bl	80013a4 <lcd_send_data>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1f4      	bne.n	80014b6 <lcd_send_string+0xa>
}
 80014cc:	bf00      	nop
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <Lcd_send_int>:

void Lcd_send_int(int number) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
	char buffer[11];
	sprintf(buffer, "%d", number);
 80014e0:	f107 030c 	add.w	r3, r7, #12
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	4906      	ldr	r1, [pc, #24]	; (8001500 <Lcd_send_int+0x28>)
 80014e8:	4618      	mov	r0, r3
 80014ea:	f011 fab3 	bl	8012a54 <siprintf>
	lcd_send_string(buffer);
 80014ee:	f107 030c 	add.w	r3, r7, #12
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff ffda 	bl	80014ac <lcd_send_string>
}
 80014f8:	bf00      	nop
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	08014db4 	.word	0x08014db4

08001504 <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	ed87 0b00 	vstr	d0, [r7]
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8001516:	ec43 2b17 	vmov	d7, r2, r3
 800151a:	eeb0 0a47 	vmov.f32	s0, s14
 800151e:	eef0 0a67 	vmov.f32	s1, s15
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <_ZSt3absf>:

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	ed87 0a01 	vstr	s0, [r7, #4]
 8001536:	edd7 7a01 	vldr	s15, [r7, #4]
 800153a:	eef0 7ae7 	vabs.f32	s15, s15
 800153e:	eeb0 0a67 	vmov.f32	s0, s15
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	0000      	movs	r0, r0
	...

08001550 <ForwardKin>:
unsigned long prevTime;
double last_outDot[3];
float error_arrived; // Variable only kin.cpp


vector3Kin ForwardKin(float xStar, float yStar, float thStar){
 8001550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001554:	b08e      	sub	sp, #56	; 0x38
 8001556:	af00      	add	r7, sp, #0
 8001558:	ed87 0a07 	vstr	s0, [r7, #28]
 800155c:	edc7 0a06 	vstr	s1, [r7, #24]
 8001560:	ed87 1a05 	vstr	s2, [r7, #20]
	vector3Kin calOut = {
 8001564:	f04f 0300 	mov.w	r3, #0
 8001568:	623b      	str	r3, [r7, #32]
 800156a:	f04f 0300 	mov.w	r3, #0
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
 8001570:	f04f 0300 	mov.w	r3, #0
 8001574:	62bb      	str	r3, [r7, #40]	; 0x28
			.x = 0, .y = 0, .th = 0
	};

	outDot[0] = cos(d2r(yawVal)) * (cos(d2r(ENC_1)) * rpmExt[0] + cos(d2r(ENC_2)) * rpmExt[1] + cos(d2r(ENC_3)) * rpmExt[2]) +
 8001576:	4be4      	ldr	r3, [pc, #912]	; (8001908 <ForwardKin+0x3b8>)
 8001578:	f9b3 3000 	ldrsh.w	r3, [r3]
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe ffe1 	bl	8000544 <__aeabi_i2d>
 8001582:	a3d5      	add	r3, pc, #852	; (adr r3, 80018d8 <ForwardKin+0x388>)
 8001584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001588:	f7ff f846 	bl	8000618 <__aeabi_dmul>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	ec43 2b17 	vmov	d7, r2, r3
 8001594:	eeb0 0a47 	vmov.f32	s0, s14
 8001598:	eef0 0a67 	vmov.f32	s1, s15
 800159c:	f00e fdb4 	bl	8010108 <cos>
 80015a0:	ec5b ab10 	vmov	sl, fp, d0
 80015a4:	4bd9      	ldr	r3, [pc, #868]	; (800190c <ForwardKin+0x3bc>)
 80015a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7fe ffca 	bl	8000544 <__aeabi_i2d>
 80015b0:	a3cb      	add	r3, pc, #812	; (adr r3, 80018e0 <ForwardKin+0x390>)
 80015b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b6:	f7ff f82f 	bl	8000618 <__aeabi_dmul>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4690      	mov	r8, r2
 80015c0:	4699      	mov	r9, r3
 80015c2:	4bd2      	ldr	r3, [pc, #840]	; (800190c <ForwardKin+0x3bc>)
 80015c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7fe ffbb 	bl	8000544 <__aeabi_i2d>
 80015ce:	a3c6      	add	r3, pc, #792	; (adr r3, 80018e8 <ForwardKin+0x398>)
 80015d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d4:	f7ff f820 	bl	8000618 <__aeabi_dmul>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4640      	mov	r0, r8
 80015de:	4649      	mov	r1, r9
 80015e0:	f7fe fe64 	bl	80002ac <__adddf3>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4690      	mov	r8, r2
 80015ea:	4699      	mov	r9, r3
 80015ec:	4bc7      	ldr	r3, [pc, #796]	; (800190c <ForwardKin+0x3bc>)
 80015ee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7fe ffa6 	bl	8000544 <__aeabi_i2d>
 80015f8:	a3bd      	add	r3, pc, #756	; (adr r3, 80018f0 <ForwardKin+0x3a0>)
 80015fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fe:	f7ff f80b 	bl	8000618 <__aeabi_dmul>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4640      	mov	r0, r8
 8001608:	4649      	mov	r1, r9
 800160a:	f7fe fe4f 	bl	80002ac <__adddf3>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	4650      	mov	r0, sl
 8001614:	4659      	mov	r1, fp
 8001616:	f7fe ffff 	bl	8000618 <__aeabi_dmul>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4690      	mov	r8, r2
 8001620:	4699      	mov	r9, r3
				-sin(d2r(yawVal)) * (sin(d2r(ENC_1)) * rpmExt[0] + sin(d2r(ENC_2)) * rpmExt[1] + sin(d2r(ENC_3)) * rpmExt[2]); // X
 8001622:	4bb9      	ldr	r3, [pc, #740]	; (8001908 <ForwardKin+0x3b8>)
 8001624:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe ff8b 	bl	8000544 <__aeabi_i2d>
 800162e:	a3aa      	add	r3, pc, #680	; (adr r3, 80018d8 <ForwardKin+0x388>)
 8001630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001634:	f7fe fff0 	bl	8000618 <__aeabi_dmul>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	ec43 2b17 	vmov	d7, r2, r3
 8001640:	eeb0 0a47 	vmov.f32	s0, s14
 8001644:	eef0 0a67 	vmov.f32	s1, s15
 8001648:	f00e fdb2 	bl	80101b0 <sin>
 800164c:	ec53 2b10 	vmov	r2, r3, d0
 8001650:	4614      	mov	r4, r2
 8001652:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001656:	4bad      	ldr	r3, [pc, #692]	; (800190c <ForwardKin+0x3bc>)
 8001658:	f9b3 3000 	ldrsh.w	r3, [r3]
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe ff71 	bl	8000544 <__aeabi_i2d>
 8001662:	a3a1      	add	r3, pc, #644	; (adr r3, 80018e8 <ForwardKin+0x398>)
 8001664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001668:	f7fe ffd6 	bl	8000618 <__aeabi_dmul>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4692      	mov	sl, r2
 8001672:	469b      	mov	fp, r3
 8001674:	4ba5      	ldr	r3, [pc, #660]	; (800190c <ForwardKin+0x3bc>)
 8001676:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800167a:	4618      	mov	r0, r3
 800167c:	f7fe ff62 	bl	8000544 <__aeabi_i2d>
 8001680:	a39d      	add	r3, pc, #628	; (adr r3, 80018f8 <ForwardKin+0x3a8>)
 8001682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001686:	f7fe ffc7 	bl	8000618 <__aeabi_dmul>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	4650      	mov	r0, sl
 8001690:	4659      	mov	r1, fp
 8001692:	f7fe fe0b 	bl	80002ac <__adddf3>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	4692      	mov	sl, r2
 800169c:	469b      	mov	fp, r3
 800169e:	4b9b      	ldr	r3, [pc, #620]	; (800190c <ForwardKin+0x3bc>)
 80016a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7fe ff4d 	bl	8000544 <__aeabi_i2d>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4650      	mov	r0, sl
 80016b0:	4659      	mov	r1, fp
 80016b2:	f7fe fdf9 	bl	80002a8 <__aeabi_dsub>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4620      	mov	r0, r4
 80016bc:	4629      	mov	r1, r5
 80016be:	f7fe ffab 	bl	8000618 <__aeabi_dmul>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
	outDot[0] = cos(d2r(yawVal)) * (cos(d2r(ENC_1)) * rpmExt[0] + cos(d2r(ENC_2)) * rpmExt[1] + cos(d2r(ENC_3)) * rpmExt[2]) +
 80016c6:	4640      	mov	r0, r8
 80016c8:	4649      	mov	r1, r9
 80016ca:	f7fe fdef 	bl	80002ac <__adddf3>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4610      	mov	r0, r2
 80016d4:	4619      	mov	r1, r3
 80016d6:	f7ff fa77 	bl	8000bc8 <__aeabi_d2f>
 80016da:	4603      	mov	r3, r0
 80016dc:	4a8c      	ldr	r2, [pc, #560]	; (8001910 <ForwardKin+0x3c0>)
 80016de:	6013      	str	r3, [r2, #0]
	outDot[1] = sin(d2r(yawVal)) * (cos(d2r(ENC_1)) * rpmExt[0] + cos(d2r(ENC_2)) * rpmExt[1] + cos(d2r(ENC_3)) * rpmExt[2]) +
 80016e0:	4b89      	ldr	r3, [pc, #548]	; (8001908 <ForwardKin+0x3b8>)
 80016e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7fe ff2c 	bl	8000544 <__aeabi_i2d>
 80016ec:	a37a      	add	r3, pc, #488	; (adr r3, 80018d8 <ForwardKin+0x388>)
 80016ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f2:	f7fe ff91 	bl	8000618 <__aeabi_dmul>
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	ec43 2b17 	vmov	d7, r2, r3
 80016fe:	eeb0 0a47 	vmov.f32	s0, s14
 8001702:	eef0 0a67 	vmov.f32	s1, s15
 8001706:	f00e fd53 	bl	80101b0 <sin>
 800170a:	ec59 8b10 	vmov	r8, r9, d0
 800170e:	4b7f      	ldr	r3, [pc, #508]	; (800190c <ForwardKin+0x3bc>)
 8001710:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe ff15 	bl	8000544 <__aeabi_i2d>
 800171a:	a371      	add	r3, pc, #452	; (adr r3, 80018e0 <ForwardKin+0x390>)
 800171c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001720:	f7fe ff7a 	bl	8000618 <__aeabi_dmul>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	4614      	mov	r4, r2
 800172a:	461d      	mov	r5, r3
 800172c:	4b77      	ldr	r3, [pc, #476]	; (800190c <ForwardKin+0x3bc>)
 800172e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe ff06 	bl	8000544 <__aeabi_i2d>
 8001738:	a36b      	add	r3, pc, #428	; (adr r3, 80018e8 <ForwardKin+0x398>)
 800173a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173e:	f7fe ff6b 	bl	8000618 <__aeabi_dmul>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4620      	mov	r0, r4
 8001748:	4629      	mov	r1, r5
 800174a:	f7fe fdaf 	bl	80002ac <__adddf3>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4614      	mov	r4, r2
 8001754:	461d      	mov	r5, r3
 8001756:	4b6d      	ldr	r3, [pc, #436]	; (800190c <ForwardKin+0x3bc>)
 8001758:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800175c:	4618      	mov	r0, r3
 800175e:	f7fe fef1 	bl	8000544 <__aeabi_i2d>
 8001762:	a363      	add	r3, pc, #396	; (adr r3, 80018f0 <ForwardKin+0x3a0>)
 8001764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001768:	f7fe ff56 	bl	8000618 <__aeabi_dmul>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4620      	mov	r0, r4
 8001772:	4629      	mov	r1, r5
 8001774:	f7fe fd9a 	bl	80002ac <__adddf3>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4640      	mov	r0, r8
 800177e:	4649      	mov	r1, r9
 8001780:	f7fe ff4a 	bl	8000618 <__aeabi_dmul>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4614      	mov	r4, r2
 800178a:	461d      	mov	r5, r3
				cos(d2r(yawVal)) * (sin(d2r(ENC_1)) * rpmExt[0] + sin(d2r(ENC_2)) * rpmExt[1] + sin(d2r(ENC_3)) * rpmExt[2]); // Y
 800178c:	4b5e      	ldr	r3, [pc, #376]	; (8001908 <ForwardKin+0x3b8>)
 800178e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe fed6 	bl	8000544 <__aeabi_i2d>
 8001798:	a34f      	add	r3, pc, #316	; (adr r3, 80018d8 <ForwardKin+0x388>)
 800179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179e:	f7fe ff3b 	bl	8000618 <__aeabi_dmul>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	ec43 2b17 	vmov	d7, r2, r3
 80017aa:	eeb0 0a47 	vmov.f32	s0, s14
 80017ae:	eef0 0a67 	vmov.f32	s1, s15
 80017b2:	f00e fca9 	bl	8010108 <cos>
 80017b6:	ec5b ab10 	vmov	sl, fp, d0
 80017ba:	4b54      	ldr	r3, [pc, #336]	; (800190c <ForwardKin+0x3bc>)
 80017bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7fe febf 	bl	8000544 <__aeabi_i2d>
 80017c6:	a348      	add	r3, pc, #288	; (adr r3, 80018e8 <ForwardKin+0x398>)
 80017c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017cc:	f7fe ff24 	bl	8000618 <__aeabi_dmul>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4690      	mov	r8, r2
 80017d6:	4699      	mov	r9, r3
 80017d8:	4b4c      	ldr	r3, [pc, #304]	; (800190c <ForwardKin+0x3bc>)
 80017da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7fe feb0 	bl	8000544 <__aeabi_i2d>
 80017e4:	a344      	add	r3, pc, #272	; (adr r3, 80018f8 <ForwardKin+0x3a8>)
 80017e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ea:	f7fe ff15 	bl	8000618 <__aeabi_dmul>
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	4640      	mov	r0, r8
 80017f4:	4649      	mov	r1, r9
 80017f6:	f7fe fd59 	bl	80002ac <__adddf3>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	4690      	mov	r8, r2
 8001800:	4699      	mov	r9, r3
 8001802:	4b42      	ldr	r3, [pc, #264]	; (800190c <ForwardKin+0x3bc>)
 8001804:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001808:	4618      	mov	r0, r3
 800180a:	f7fe fe9b 	bl	8000544 <__aeabi_i2d>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4640      	mov	r0, r8
 8001814:	4649      	mov	r1, r9
 8001816:	f7fe fd47 	bl	80002a8 <__aeabi_dsub>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4650      	mov	r0, sl
 8001820:	4659      	mov	r1, fp
 8001822:	f7fe fef9 	bl	8000618 <__aeabi_dmul>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
	outDot[1] = sin(d2r(yawVal)) * (cos(d2r(ENC_1)) * rpmExt[0] + cos(d2r(ENC_2)) * rpmExt[1] + cos(d2r(ENC_3)) * rpmExt[2]) +
 800182a:	4620      	mov	r0, r4
 800182c:	4629      	mov	r1, r5
 800182e:	f7fe fd3d 	bl	80002ac <__adddf3>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4610      	mov	r0, r2
 8001838:	4619      	mov	r1, r3
 800183a:	f7ff f9c5 	bl	8000bc8 <__aeabi_d2f>
 800183e:	4603      	mov	r3, r0
 8001840:	4a33      	ldr	r2, [pc, #204]	; (8001910 <ForwardKin+0x3c0>)
 8001842:	6053      	str	r3, [r2, #4]
	outDot[2] = lengthAlpha * rpmExt[0] + lengthAlpha * rpmExt[1] + lengthAlpha * rpmExt[2]; // TH
 8001844:	4b31      	ldr	r3, [pc, #196]	; (800190c <ForwardKin+0x3bc>)
 8001846:	f9b3 3000 	ldrsh.w	r3, [r3]
 800184a:	4618      	mov	r0, r3
 800184c:	f7fe fe7a 	bl	8000544 <__aeabi_i2d>
 8001850:	a32b      	add	r3, pc, #172	; (adr r3, 8001900 <ForwardKin+0x3b0>)
 8001852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001856:	f7fe fedf 	bl	8000618 <__aeabi_dmul>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4614      	mov	r4, r2
 8001860:	461d      	mov	r5, r3
 8001862:	4b2a      	ldr	r3, [pc, #168]	; (800190c <ForwardKin+0x3bc>)
 8001864:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fe6b 	bl	8000544 <__aeabi_i2d>
 800186e:	a324      	add	r3, pc, #144	; (adr r3, 8001900 <ForwardKin+0x3b0>)
 8001870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001874:	f7fe fed0 	bl	8000618 <__aeabi_dmul>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4620      	mov	r0, r4
 800187e:	4629      	mov	r1, r5
 8001880:	f7fe fd14 	bl	80002ac <__adddf3>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4614      	mov	r4, r2
 800188a:	461d      	mov	r5, r3
 800188c:	4b1f      	ldr	r3, [pc, #124]	; (800190c <ForwardKin+0x3bc>)
 800188e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe fe56 	bl	8000544 <__aeabi_i2d>
 8001898:	a319      	add	r3, pc, #100	; (adr r3, 8001900 <ForwardKin+0x3b0>)
 800189a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189e:	f7fe febb 	bl	8000618 <__aeabi_dmul>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4620      	mov	r0, r4
 80018a8:	4629      	mov	r1, r5
 80018aa:	f7fe fcff 	bl	80002ac <__adddf3>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	4610      	mov	r0, r2
 80018b4:	4619      	mov	r1, r3
 80018b6:	f7ff f987 	bl	8000bc8 <__aeabi_d2f>
 80018ba:	4603      	mov	r3, r0
 80018bc:	4a14      	ldr	r2, [pc, #80]	; (8001910 <ForwardKin+0x3c0>)
 80018be:	6093      	str	r3, [r2, #8]

	if(HAL_GetTick() - prevTime >= 100){
 80018c0:	f006 ff4e 	bl	8008760 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	4b13      	ldr	r3, [pc, #76]	; (8001914 <ForwardKin+0x3c4>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b63      	cmp	r3, #99	; 0x63
 80018ce:	bf8c      	ite	hi
 80018d0:	2301      	movhi	r3, #1
 80018d2:	2300      	movls	r3, #0
 80018d4:	e020      	b.n	8001918 <ForwardKin+0x3c8>
 80018d6:	bf00      	nop
 80018d8:	a2529d39 	.word	0xa2529d39
 80018dc:	3f91df46 	.word	0x3f91df46
 80018e0:	667f3bcc 	.word	0x667f3bcc
 80018e4:	bfe6a09e 	.word	0xbfe6a09e
 80018e8:	667f3bcd 	.word	0x667f3bcd
 80018ec:	3fe6a09e 	.word	0x3fe6a09e
 80018f0:	33145c07 	.word	0x33145c07
 80018f4:	3c91a626 	.word	0x3c91a626
 80018f8:	667f3bcc 	.word	0x667f3bcc
 80018fc:	3fe6a09e 	.word	0x3fe6a09e
 8001900:	70a3d70a 	.word	0x70a3d70a
 8001904:	3fc70a3d 	.word	0x3fc70a3d
 8001908:	20000214 	.word	0x20000214
 800190c:	20000218 	.word	0x20000218
 8001910:	20000220 	.word	0x20000220
 8001914:	20000250 	.word	0x20000250
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 8088 	beq.w	8001a30 <ForwardKin+0x4e0>
		Aksen[0] = Aksen[0] + outDot[0] * 100 * scale1; // X
 8001920:	4b63      	ldr	r3, [pc, #396]	; (8001ab0 <ForwardKin+0x560>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f7fe fe1f 	bl	8000568 <__aeabi_f2d>
 800192a:	4604      	mov	r4, r0
 800192c:	460d      	mov	r5, r1
 800192e:	4b61      	ldr	r3, [pc, #388]	; (8001ab4 <ForwardKin+0x564>)
 8001930:	edd3 7a00 	vldr	s15, [r3]
 8001934:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8001ab8 <ForwardKin+0x568>
 8001938:	ee67 7a87 	vmul.f32	s15, s15, s14
 800193c:	ee17 0a90 	vmov	r0, s15
 8001940:	f7fe fe12 	bl	8000568 <__aeabi_f2d>
 8001944:	a356      	add	r3, pc, #344	; (adr r3, 8001aa0 <ForwardKin+0x550>)
 8001946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194a:	f7fe fe65 	bl	8000618 <__aeabi_dmul>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4620      	mov	r0, r4
 8001954:	4629      	mov	r1, r5
 8001956:	f7fe fca9 	bl	80002ac <__adddf3>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	4610      	mov	r0, r2
 8001960:	4619      	mov	r1, r3
 8001962:	f7ff f931 	bl	8000bc8 <__aeabi_d2f>
 8001966:	4603      	mov	r3, r0
 8001968:	4a51      	ldr	r2, [pc, #324]	; (8001ab0 <ForwardKin+0x560>)
 800196a:	6013      	str	r3, [r2, #0]
		Aksen[1] = Aksen[1] + outDot[1] * 100 * scale2; // Y
 800196c:	4b50      	ldr	r3, [pc, #320]	; (8001ab0 <ForwardKin+0x560>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	4618      	mov	r0, r3
 8001972:	f7fe fdf9 	bl	8000568 <__aeabi_f2d>
 8001976:	4604      	mov	r4, r0
 8001978:	460d      	mov	r5, r1
 800197a:	4b4e      	ldr	r3, [pc, #312]	; (8001ab4 <ForwardKin+0x564>)
 800197c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001980:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001ab8 <ForwardKin+0x568>
 8001984:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001988:	ee17 0a90 	vmov	r0, s15
 800198c:	f7fe fdec 	bl	8000568 <__aeabi_f2d>
 8001990:	a345      	add	r3, pc, #276	; (adr r3, 8001aa8 <ForwardKin+0x558>)
 8001992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001996:	f7fe fe3f 	bl	8000618 <__aeabi_dmul>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	4620      	mov	r0, r4
 80019a0:	4629      	mov	r1, r5
 80019a2:	f7fe fc83 	bl	80002ac <__adddf3>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	4610      	mov	r0, r2
 80019ac:	4619      	mov	r1, r3
 80019ae:	f7ff f90b 	bl	8000bc8 <__aeabi_d2f>
 80019b2:	4603      	mov	r3, r0
 80019b4:	4a3e      	ldr	r2, [pc, #248]	; (8001ab0 <ForwardKin+0x560>)
 80019b6:	6053      	str	r3, [r2, #4]
	//	Aksen[2] = (Aksen[2] + outDot[2] * 100) * scale3; // theta
		Aksen[2] = yawVal; // theta diambil dari heading imu
 80019b8:	4b40      	ldr	r3, [pc, #256]	; (8001abc <ForwardKin+0x56c>)
 80019ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019be:	ee07 3a90 	vmov	s15, r3
 80019c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019c6:	4b3a      	ldr	r3, [pc, #232]	; (8001ab0 <ForwardKin+0x560>)
 80019c8:	edc3 7a02 	vstr	s15, [r3, #8]

		velo[0] = Aksen[0] - prevAksen[0];
 80019cc:	4b38      	ldr	r3, [pc, #224]	; (8001ab0 <ForwardKin+0x560>)
 80019ce:	ed93 7a00 	vldr	s14, [r3]
 80019d2:	4b3b      	ldr	r3, [pc, #236]	; (8001ac0 <ForwardKin+0x570>)
 80019d4:	edd3 7a00 	vldr	s15, [r3]
 80019d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019dc:	4b39      	ldr	r3, [pc, #228]	; (8001ac4 <ForwardKin+0x574>)
 80019de:	edc3 7a00 	vstr	s15, [r3]
		velo[1] = Aksen[1] - prevAksen[1];
 80019e2:	4b33      	ldr	r3, [pc, #204]	; (8001ab0 <ForwardKin+0x560>)
 80019e4:	ed93 7a01 	vldr	s14, [r3, #4]
 80019e8:	4b35      	ldr	r3, [pc, #212]	; (8001ac0 <ForwardKin+0x570>)
 80019ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80019ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019f2:	4b34      	ldr	r3, [pc, #208]	; (8001ac4 <ForwardKin+0x574>)
 80019f4:	edc3 7a01 	vstr	s15, [r3, #4]
		velo[2] = Aksen[2] - prevAksen[2];
 80019f8:	4b2d      	ldr	r3, [pc, #180]	; (8001ab0 <ForwardKin+0x560>)
 80019fa:	ed93 7a02 	vldr	s14, [r3, #8]
 80019fe:	4b30      	ldr	r3, [pc, #192]	; (8001ac0 <ForwardKin+0x570>)
 8001a00:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a08:	4b2e      	ldr	r3, [pc, #184]	; (8001ac4 <ForwardKin+0x574>)
 8001a0a:	edc3 7a02 	vstr	s15, [r3, #8]

		prevAksen[0] = Aksen[0];
 8001a0e:	4b28      	ldr	r3, [pc, #160]	; (8001ab0 <ForwardKin+0x560>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a2b      	ldr	r2, [pc, #172]	; (8001ac0 <ForwardKin+0x570>)
 8001a14:	6013      	str	r3, [r2, #0]
		prevAksen[1] = Aksen[1];
 8001a16:	4b26      	ldr	r3, [pc, #152]	; (8001ab0 <ForwardKin+0x560>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	4a29      	ldr	r2, [pc, #164]	; (8001ac0 <ForwardKin+0x570>)
 8001a1c:	6053      	str	r3, [r2, #4]
		prevAksen[2] = Aksen[2];
 8001a1e:	4b24      	ldr	r3, [pc, #144]	; (8001ab0 <ForwardKin+0x560>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	4a27      	ldr	r2, [pc, #156]	; (8001ac0 <ForwardKin+0x570>)
 8001a24:	6093      	str	r3, [r2, #8]

		prevTime = HAL_GetTick();
 8001a26:	f006 fe9b 	bl	8008760 <HAL_GetTick>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	4a26      	ldr	r2, [pc, #152]	; (8001ac8 <ForwardKin+0x578>)
 8001a2e:	6013      	str	r3, [r2, #0]
	}

	calOut.x = xStar - Aksen[0];
 8001a30:	4b1f      	ldr	r3, [pc, #124]	; (8001ab0 <ForwardKin+0x560>)
 8001a32:	edd3 7a00 	vldr	s15, [r3]
 8001a36:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a3e:	edc7 7a08 	vstr	s15, [r7, #32]
	calOut.y = yStar - Aksen[1];
 8001a42:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <ForwardKin+0x560>)
 8001a44:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a48:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a50:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	calOut.th = thStar - Aksen[2];
 8001a54:	4b16      	ldr	r3, [pc, #88]	; (8001ab0 <ForwardKin+0x560>)
 8001a56:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a5a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a62:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	return calOut;
 8001a66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a6a:	f107 0220 	add.w	r2, r7, #32
 8001a6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a70:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001a76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a7a:	ee06 1a90 	vmov	s13, r1
 8001a7e:	ee07 2a10 	vmov	s14, r2
 8001a82:	ee07 3a90 	vmov	s15, r3
}
 8001a86:	eeb0 0a66 	vmov.f32	s0, s13
 8001a8a:	eef0 0a47 	vmov.f32	s1, s14
 8001a8e:	eeb0 1a67 	vmov.f32	s2, s15
 8001a92:	3738      	adds	r7, #56	; 0x38
 8001a94:	46bd      	mov	sp, r7
 8001a96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a9a:	bf00      	nop
 8001a9c:	f3af 8000 	nop.w
 8001aa0:	88dfb80c 	.word	0x88dfb80c
 8001aa4:	3ecc2f8b 	.word	0x3ecc2f8b
 8001aa8:	416f8bff 	.word	0x416f8bff
 8001aac:	3eba5719 	.word	0x3eba5719
 8001ab0:	2000022c 	.word	0x2000022c
 8001ab4:	20000220 	.word	0x20000220
 8001ab8:	42c80000 	.word	0x42c80000
 8001abc:	20000214 	.word	0x20000214
 8001ac0:	20000238 	.word	0x20000238
 8001ac4:	20000244 	.word	0x20000244
 8001ac8:	20000250 	.word	0x20000250

08001acc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8001acc:	b5b0      	push	{r4, r5, r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	ed87 0a01 	vstr	s0, [r7, #4]
 8001ad6:	6038      	str	r0, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7fe fd45 	bl	8000568 <__aeabi_f2d>
 8001ade:	4604      	mov	r4, r0
 8001ae0:	460d      	mov	r5, r1
 8001ae2:	6838      	ldr	r0, [r7, #0]
 8001ae4:	f7fe fd2e 	bl	8000544 <__aeabi_i2d>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	ec43 2b11 	vmov	d1, r2, r3
 8001af0:	ec45 4b10 	vmov	d0, r4, r5
 8001af4:	f00e fa6a 	bl	800ffcc <pow>
 8001af8:	eeb0 7a40 	vmov.f32	s14, s0
 8001afc:	eef0 7a60 	vmov.f32	s15, s1
    }
 8001b00:	eeb0 0a47 	vmov.f32	s0, s14
 8001b04:	eef0 0a67 	vmov.f32	s1, s15
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bdb0      	pop	{r4, r5, r7, pc}

08001b0e <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b084      	sub	sp, #16
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	ed87 0b02 	vstr	d0, [r7, #8]
 8001b18:	6078      	str	r0, [r7, #4]
      return pow(__type(__x), __type(__y));
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7fe fd12 	bl	8000544 <__aeabi_i2d>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	ec43 2b11 	vmov	d1, r2, r3
 8001b28:	ed97 0b02 	vldr	d0, [r7, #8]
 8001b2c:	f00e fa4e 	bl	800ffcc <pow>
 8001b30:	eeb0 7a40 	vmov.f32	s14, s0
 8001b34:	eef0 7a60 	vmov.f32	s15, s1
    }
 8001b38:	eeb0 0a47 	vmov.f32	s0, s14
 8001b3c:	eef0 0a67 	vmov.f32	s1, s15
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <InverseKin>:

MotorKin InverseKin(vector3Kin *calOut){
 8001b48:	b5b0      	push	{r4, r5, r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
	MotorKin mtr = {
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	461a      	mov	r2, r3
 8001b56:	2300      	movs	r3, #0
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	6053      	str	r3, [r2, #4]
 8001b5c:	6093      	str	r3, [r2, #8]
 8001b5e:	60d3      	str	r3, [r2, #12]
			.w1=0, .w2=0, .w3=0, .w4=0
	};

	errorPub = error_arrived = sqrt(pow(abs(calOut->x), 2) + pow(abs(calOut->y), 2) + pow(abs(d2r(calOut->th)), 2));
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	edd3 7a00 	vldr	s15, [r3]
 8001b66:	eeb0 0a67 	vmov.f32	s0, s15
 8001b6a:	f7ff fcdf 	bl	800152c <_ZSt3absf>
 8001b6e:	eef0 7a40 	vmov.f32	s15, s0
 8001b72:	2002      	movs	r0, #2
 8001b74:	eeb0 0a67 	vmov.f32	s0, s15
 8001b78:	f7ff ffa8 	bl	8001acc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001b7c:	ec55 4b10 	vmov	r4, r5, d0
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b86:	eeb0 0a67 	vmov.f32	s0, s15
 8001b8a:	f7ff fccf 	bl	800152c <_ZSt3absf>
 8001b8e:	eef0 7a40 	vmov.f32	s15, s0
 8001b92:	2002      	movs	r0, #2
 8001b94:	eeb0 0a67 	vmov.f32	s0, s15
 8001b98:	f7ff ff98 	bl	8001acc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001b9c:	ec53 2b10 	vmov	r2, r3, d0
 8001ba0:	4620      	mov	r0, r4
 8001ba2:	4629      	mov	r1, r5
 8001ba4:	f7fe fb82 	bl	80002ac <__adddf3>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4614      	mov	r4, r2
 8001bae:	461d      	mov	r5, r3
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe fcd7 	bl	8000568 <__aeabi_f2d>
 8001bba:	a339      	add	r3, pc, #228	; (adr r3, 8001ca0 <InverseKin+0x158>)
 8001bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc0:	f7fe fd2a 	bl	8000618 <__aeabi_dmul>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	ec43 2b17 	vmov	d7, r2, r3
 8001bcc:	eeb0 0a47 	vmov.f32	s0, s14
 8001bd0:	eef0 0a67 	vmov.f32	s1, s15
 8001bd4:	f7ff fc96 	bl	8001504 <_ZSt3absd>
 8001bd8:	eeb0 7a40 	vmov.f32	s14, s0
 8001bdc:	eef0 7a60 	vmov.f32	s15, s1
 8001be0:	2002      	movs	r0, #2
 8001be2:	eeb0 0a47 	vmov.f32	s0, s14
 8001be6:	eef0 0a67 	vmov.f32	s1, s15
 8001bea:	f7ff ff90 	bl	8001b0e <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001bee:	ec53 2b10 	vmov	r2, r3, d0
 8001bf2:	4620      	mov	r0, r4
 8001bf4:	4629      	mov	r1, r5
 8001bf6:	f7fe fb59 	bl	80002ac <__adddf3>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	ec43 2b17 	vmov	d7, r2, r3
 8001c02:	eeb0 0a47 	vmov.f32	s0, s14
 8001c06:	eef0 0a67 	vmov.f32	s1, s15
 8001c0a:	f00e fa4f 	bl	80100ac <sqrt>
 8001c0e:	ec53 2b10 	vmov	r2, r3, d0
 8001c12:	4610      	mov	r0, r2
 8001c14:	4619      	mov	r1, r3
 8001c16:	f7fe ffd7 	bl	8000bc8 <__aeabi_d2f>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	4a1e      	ldr	r2, [pc, #120]	; (8001c98 <InverseKin+0x150>)
 8001c1e:	6013      	str	r3, [r2, #0]
 8001c20:	4b1d      	ldr	r3, [pc, #116]	; (8001c98 <InverseKin+0x150>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a1d      	ldr	r2, [pc, #116]	; (8001c9c <InverseKin+0x154>)
 8001c26:	6013      	str	r3, [r2, #0]

	if(error_arrived < 0.2)
 8001c28:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <InverseKin+0x150>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7fe fc9b 	bl	8000568 <__aeabi_f2d>
 8001c32:	a317      	add	r3, pc, #92	; (adr r3, 8001c90 <InverseKin+0x148>)
 8001c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c38:	f7fe ff60 	bl	8000afc <__aeabi_dcmplt>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00c      	beq.n	8001c5c <InverseKin+0x114>
	{
		calOut->x = 0;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	f04f 0200 	mov.w	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
		calOut->y = 0;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	605a      	str	r2, [r3, #4]
		calOut->th = 0; // klo pake ini jgn lupa tambahin yg theta juga di normnya
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	609a      	str	r2, [r3, #8]
	else
	{
		kinMotor_V3(&mtr, calOut->x, calOut->y, calOut->th);
	}

	return mtr;
 8001c5a:	e011      	b.n	8001c80 <InverseKin+0x138>
		kinMotor_V3(&mtr, calOut->x, calOut->y, calOut->th);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	edd3 7a00 	vldr	s15, [r3]
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	edd3 6a02 	vldr	s13, [r3, #8]
 8001c6e:	eeb0 1a66 	vmov.f32	s2, s13
 8001c72:	eef0 0a47 	vmov.f32	s1, s14
 8001c76:	eeb0 0a67 	vmov.f32	s0, s15
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f814 	bl	8001ca8 <kinMotor_V3>
	return mtr;
 8001c80:	bf00      	nop
}
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bdb0      	pop	{r4, r5, r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	f3af 8000 	nop.w
 8001c90:	9999999a 	.word	0x9999999a
 8001c94:	3fc99999 	.word	0x3fc99999
 8001c98:	20000254 	.word	0x20000254
 8001c9c:	20000ab8 	.word	0x20000ab8
 8001ca0:	a2529d39 	.word	0xa2529d39
 8001ca4:	3f91df46 	.word	0x3f91df46

08001ca8 <kinMotor_V3>:

void kinMotor_V3(MotorKin *mtrKin, float Ex, float Ey, float Eth)
{
 8001ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cac:	b08a      	sub	sp, #40	; 0x28
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6278      	str	r0, [r7, #36]	; 0x24
 8001cb2:	ed87 0a08 	vstr	s0, [r7, #32]
 8001cb6:	edc7 0a07 	vstr	s1, [r7, #28]
 8001cba:	ed87 1a06 	vstr	s2, [r7, #24]
	mtrKin->w1 = (lambdaX * cos(d2r(135)) * (cos(d2r(yawVal)) * Ex + sin(d2r(yawVal)) * Ey)) +
 8001cbe:	4be8      	ldr	r3, [pc, #928]	; (8002060 <kinMotor_V3+0x3b8>)
 8001cc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7fe fc3d 	bl	8000544 <__aeabi_i2d>
 8001cca:	a3db      	add	r3, pc, #876	; (adr r3, 8002038 <kinMotor_V3+0x390>)
 8001ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd0:	f7fe fca2 	bl	8000618 <__aeabi_dmul>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	ec43 2b17 	vmov	d7, r2, r3
 8001cdc:	eeb0 0a47 	vmov.f32	s0, s14
 8001ce0:	eef0 0a67 	vmov.f32	s1, s15
 8001ce4:	f00e fa10 	bl	8010108 <cos>
 8001ce8:	ec55 4b10 	vmov	r4, r5, d0
 8001cec:	6a38      	ldr	r0, [r7, #32]
 8001cee:	f7fe fc3b 	bl	8000568 <__aeabi_f2d>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	4620      	mov	r0, r4
 8001cf8:	4629      	mov	r1, r5
 8001cfa:	f7fe fc8d 	bl	8000618 <__aeabi_dmul>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4614      	mov	r4, r2
 8001d04:	461d      	mov	r5, r3
 8001d06:	4bd6      	ldr	r3, [pc, #856]	; (8002060 <kinMotor_V3+0x3b8>)
 8001d08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7fe fc19 	bl	8000544 <__aeabi_i2d>
 8001d12:	a3c9      	add	r3, pc, #804	; (adr r3, 8002038 <kinMotor_V3+0x390>)
 8001d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d18:	f7fe fc7e 	bl	8000618 <__aeabi_dmul>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	ec43 2b17 	vmov	d7, r2, r3
 8001d24:	eeb0 0a47 	vmov.f32	s0, s14
 8001d28:	eef0 0a67 	vmov.f32	s1, s15
 8001d2c:	f00e fa40 	bl	80101b0 <sin>
 8001d30:	ec5b ab10 	vmov	sl, fp, d0
 8001d34:	69f8      	ldr	r0, [r7, #28]
 8001d36:	f7fe fc17 	bl	8000568 <__aeabi_f2d>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	4650      	mov	r0, sl
 8001d40:	4659      	mov	r1, fp
 8001d42:	f7fe fc69 	bl	8000618 <__aeabi_dmul>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4620      	mov	r0, r4
 8001d4c:	4629      	mov	r1, r5
 8001d4e:	f7fe faad 	bl	80002ac <__adddf3>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	4610      	mov	r0, r2
 8001d58:	4619      	mov	r1, r3
 8001d5a:	a3b9      	add	r3, pc, #740	; (adr r3, 8002040 <kinMotor_V3+0x398>)
 8001d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d60:	f7fe fc5a 	bl	8000618 <__aeabi_dmul>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4692      	mov	sl, r2
 8001d6a:	469b      	mov	fp, r3
				 (lambdaY * sin(d2r(135)) * (-sin(d2r(yawVal)) * Ex + cos(d2r(yawVal)) * Ey)) +
 8001d6c:	4bbc      	ldr	r3, [pc, #752]	; (8002060 <kinMotor_V3+0x3b8>)
 8001d6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7fe fbe6 	bl	8000544 <__aeabi_i2d>
 8001d78:	a3af      	add	r3, pc, #700	; (adr r3, 8002038 <kinMotor_V3+0x390>)
 8001d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7e:	f7fe fc4b 	bl	8000618 <__aeabi_dmul>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	ec43 2b17 	vmov	d7, r2, r3
 8001d8a:	eeb0 0a47 	vmov.f32	s0, s14
 8001d8e:	eef0 0a67 	vmov.f32	s1, s15
 8001d92:	f00e fa0d 	bl	80101b0 <sin>
 8001d96:	ec53 2b10 	vmov	r2, r3, d0
 8001d9a:	4690      	mov	r8, r2
 8001d9c:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001da0:	6a38      	ldr	r0, [r7, #32]
 8001da2:	f7fe fbe1 	bl	8000568 <__aeabi_f2d>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	4640      	mov	r0, r8
 8001dac:	4649      	mov	r1, r9
 8001dae:	f7fe fc33 	bl	8000618 <__aeabi_dmul>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	4614      	mov	r4, r2
 8001db8:	461d      	mov	r5, r3
 8001dba:	4ba9      	ldr	r3, [pc, #676]	; (8002060 <kinMotor_V3+0x3b8>)
 8001dbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fbbf 	bl	8000544 <__aeabi_i2d>
 8001dc6:	a39c      	add	r3, pc, #624	; (adr r3, 8002038 <kinMotor_V3+0x390>)
 8001dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dcc:	f7fe fc24 	bl	8000618 <__aeabi_dmul>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	ec43 2b17 	vmov	d7, r2, r3
 8001dd8:	eeb0 0a47 	vmov.f32	s0, s14
 8001ddc:	eef0 0a67 	vmov.f32	s1, s15
 8001de0:	f00e f992 	bl	8010108 <cos>
 8001de4:	ec59 8b10 	vmov	r8, r9, d0
 8001de8:	69f8      	ldr	r0, [r7, #28]
 8001dea:	f7fe fbbd 	bl	8000568 <__aeabi_f2d>
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	4640      	mov	r0, r8
 8001df4:	4649      	mov	r1, r9
 8001df6:	f7fe fc0f 	bl	8000618 <__aeabi_dmul>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	4620      	mov	r0, r4
 8001e00:	4629      	mov	r1, r5
 8001e02:	f7fe fa53 	bl	80002ac <__adddf3>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	a38e      	add	r3, pc, #568	; (adr r3, 8002048 <kinMotor_V3+0x3a0>)
 8001e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e14:	f7fe fc00 	bl	8000618 <__aeabi_dmul>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
	mtrKin->w1 = (lambdaX * cos(d2r(135)) * (cos(d2r(yawVal)) * Ex + sin(d2r(yawVal)) * Ey)) +
 8001e1c:	4650      	mov	r0, sl
 8001e1e:	4659      	mov	r1, fp
 8001e20:	f7fe fa44 	bl	80002ac <__adddf3>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4614      	mov	r4, r2
 8001e2a:	461d      	mov	r5, r3
				 (lambdaTH * alphaLengthMotor * Eth);
 8001e2c:	69b8      	ldr	r0, [r7, #24]
 8001e2e:	f7fe fb9b 	bl	8000568 <__aeabi_f2d>
 8001e32:	a387      	add	r3, pc, #540	; (adr r3, 8002050 <kinMotor_V3+0x3a8>)
 8001e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e38:	f7fe fbee 	bl	8000618 <__aeabi_dmul>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
				 (lambdaY * sin(d2r(135)) * (-sin(d2r(yawVal)) * Ex + cos(d2r(yawVal)) * Ey)) +
 8001e40:	4620      	mov	r0, r4
 8001e42:	4629      	mov	r1, r5
 8001e44:	f7fe fa32 	bl	80002ac <__adddf3>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
	mtrKin->w1 = (lambdaX * cos(d2r(135)) * (cos(d2r(yawVal)) * Ex + sin(d2r(yawVal)) * Ey)) +
 8001e4c:	4610      	mov	r0, r2
 8001e4e:	4619      	mov	r1, r3
 8001e50:	f7fe fe92 	bl	8000b78 <__aeabi_d2iz>
 8001e54:	4602      	mov	r2, r0
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	601a      	str	r2, [r3, #0]
	mtrKin->w2 = (lambdaX * cos(d2r(-135)) * (cos(d2r(yawVal)) * Ex + sin(d2r(yawVal)) * Ey)) +
 8001e5a:	4b81      	ldr	r3, [pc, #516]	; (8002060 <kinMotor_V3+0x3b8>)
 8001e5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7fe fb6f 	bl	8000544 <__aeabi_i2d>
 8001e66:	a374      	add	r3, pc, #464	; (adr r3, 8002038 <kinMotor_V3+0x390>)
 8001e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e6c:	f7fe fbd4 	bl	8000618 <__aeabi_dmul>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	ec43 2b17 	vmov	d7, r2, r3
 8001e78:	eeb0 0a47 	vmov.f32	s0, s14
 8001e7c:	eef0 0a67 	vmov.f32	s1, s15
 8001e80:	f00e f942 	bl	8010108 <cos>
 8001e84:	ec55 4b10 	vmov	r4, r5, d0
 8001e88:	6a38      	ldr	r0, [r7, #32]
 8001e8a:	f7fe fb6d 	bl	8000568 <__aeabi_f2d>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	4620      	mov	r0, r4
 8001e94:	4629      	mov	r1, r5
 8001e96:	f7fe fbbf 	bl	8000618 <__aeabi_dmul>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4614      	mov	r4, r2
 8001ea0:	461d      	mov	r5, r3
 8001ea2:	4b6f      	ldr	r3, [pc, #444]	; (8002060 <kinMotor_V3+0x3b8>)
 8001ea4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7fe fb4b 	bl	8000544 <__aeabi_i2d>
 8001eae:	a362      	add	r3, pc, #392	; (adr r3, 8002038 <kinMotor_V3+0x390>)
 8001eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb4:	f7fe fbb0 	bl	8000618 <__aeabi_dmul>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	ec43 2b17 	vmov	d7, r2, r3
 8001ec0:	eeb0 0a47 	vmov.f32	s0, s14
 8001ec4:	eef0 0a67 	vmov.f32	s1, s15
 8001ec8:	f00e f972 	bl	80101b0 <sin>
 8001ecc:	ec59 8b10 	vmov	r8, r9, d0
 8001ed0:	69f8      	ldr	r0, [r7, #28]
 8001ed2:	f7fe fb49 	bl	8000568 <__aeabi_f2d>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	4640      	mov	r0, r8
 8001edc:	4649      	mov	r1, r9
 8001ede:	f7fe fb9b 	bl	8000618 <__aeabi_dmul>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4620      	mov	r0, r4
 8001ee8:	4629      	mov	r1, r5
 8001eea:	f7fe f9df 	bl	80002ac <__adddf3>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	a352      	add	r3, pc, #328	; (adr r3, 8002040 <kinMotor_V3+0x398>)
 8001ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efc:	f7fe fb8c 	bl	8000618 <__aeabi_dmul>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	4692      	mov	sl, r2
 8001f06:	469b      	mov	fp, r3
				 (lambdaY * sin(d2r(-135)) * (-sin(d2r(yawVal)) * Ex + cos(d2r(yawVal)) * Ey)) +
 8001f08:	4b55      	ldr	r3, [pc, #340]	; (8002060 <kinMotor_V3+0x3b8>)
 8001f0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7fe fb18 	bl	8000544 <__aeabi_i2d>
 8001f14:	a348      	add	r3, pc, #288	; (adr r3, 8002038 <kinMotor_V3+0x390>)
 8001f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1a:	f7fe fb7d 	bl	8000618 <__aeabi_dmul>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	460b      	mov	r3, r1
 8001f22:	ec43 2b17 	vmov	d7, r2, r3
 8001f26:	eeb0 0a47 	vmov.f32	s0, s14
 8001f2a:	eef0 0a67 	vmov.f32	s1, s15
 8001f2e:	f00e f93f 	bl	80101b0 <sin>
 8001f32:	ec53 2b10 	vmov	r2, r3, d0
 8001f36:	613a      	str	r2, [r7, #16]
 8001f38:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001f3c:	617b      	str	r3, [r7, #20]
 8001f3e:	6a38      	ldr	r0, [r7, #32]
 8001f40:	f7fe fb12 	bl	8000568 <__aeabi_f2d>
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f4c:	f7fe fb64 	bl	8000618 <__aeabi_dmul>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4614      	mov	r4, r2
 8001f56:	461d      	mov	r5, r3
 8001f58:	4b41      	ldr	r3, [pc, #260]	; (8002060 <kinMotor_V3+0x3b8>)
 8001f5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe faf0 	bl	8000544 <__aeabi_i2d>
 8001f64:	a334      	add	r3, pc, #208	; (adr r3, 8002038 <kinMotor_V3+0x390>)
 8001f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6a:	f7fe fb55 	bl	8000618 <__aeabi_dmul>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	ec43 2b17 	vmov	d7, r2, r3
 8001f76:	eeb0 0a47 	vmov.f32	s0, s14
 8001f7a:	eef0 0a67 	vmov.f32	s1, s15
 8001f7e:	f00e f8c3 	bl	8010108 <cos>
 8001f82:	ec59 8b10 	vmov	r8, r9, d0
 8001f86:	69f8      	ldr	r0, [r7, #28]
 8001f88:	f7fe faee 	bl	8000568 <__aeabi_f2d>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4640      	mov	r0, r8
 8001f92:	4649      	mov	r1, r9
 8001f94:	f7fe fb40 	bl	8000618 <__aeabi_dmul>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	4620      	mov	r0, r4
 8001f9e:	4629      	mov	r1, r5
 8001fa0:	f7fe f984 	bl	80002ac <__adddf3>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	4610      	mov	r0, r2
 8001faa:	4619      	mov	r1, r3
 8001fac:	a32a      	add	r3, pc, #168	; (adr r3, 8002058 <kinMotor_V3+0x3b0>)
 8001fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb2:	f7fe fb31 	bl	8000618 <__aeabi_dmul>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
	mtrKin->w2 = (lambdaX * cos(d2r(-135)) * (cos(d2r(yawVal)) * Ex + sin(d2r(yawVal)) * Ey)) +
 8001fba:	4650      	mov	r0, sl
 8001fbc:	4659      	mov	r1, fp
 8001fbe:	f7fe f975 	bl	80002ac <__adddf3>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4614      	mov	r4, r2
 8001fc8:	461d      	mov	r5, r3
				 (lambdaTH * alphaLengthMotor * Eth);
 8001fca:	69b8      	ldr	r0, [r7, #24]
 8001fcc:	f7fe facc 	bl	8000568 <__aeabi_f2d>
 8001fd0:	a31f      	add	r3, pc, #124	; (adr r3, 8002050 <kinMotor_V3+0x3a8>)
 8001fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd6:	f7fe fb1f 	bl	8000618 <__aeabi_dmul>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
				 (lambdaY * sin(d2r(-135)) * (-sin(d2r(yawVal)) * Ex + cos(d2r(yawVal)) * Ey)) +
 8001fde:	4620      	mov	r0, r4
 8001fe0:	4629      	mov	r1, r5
 8001fe2:	f7fe f963 	bl	80002ac <__adddf3>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
	mtrKin->w2 = (lambdaX * cos(d2r(-135)) * (cos(d2r(yawVal)) * Ex + sin(d2r(yawVal)) * Ey)) +
 8001fea:	4610      	mov	r0, r2
 8001fec:	4619      	mov	r1, r3
 8001fee:	f7fe fdc3 	bl	8000b78 <__aeabi_d2iz>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff6:	605a      	str	r2, [r3, #4]
	mtrKin->w3 = (lambdaX * cos(d2r(-45)) * (cos(d2r(yawVal)) * Ex + sin(d2r(yawVal)) * Ey)) +
 8001ff8:	4b19      	ldr	r3, [pc, #100]	; (8002060 <kinMotor_V3+0x3b8>)
 8001ffa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe faa0 	bl	8000544 <__aeabi_i2d>
 8002004:	a30c      	add	r3, pc, #48	; (adr r3, 8002038 <kinMotor_V3+0x390>)
 8002006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200a:	f7fe fb05 	bl	8000618 <__aeabi_dmul>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	ec43 2b17 	vmov	d7, r2, r3
 8002016:	eeb0 0a47 	vmov.f32	s0, s14
 800201a:	eef0 0a67 	vmov.f32	s1, s15
 800201e:	f00e f873 	bl	8010108 <cos>
 8002022:	ec55 4b10 	vmov	r4, r5, d0
 8002026:	6a38      	ldr	r0, [r7, #32]
 8002028:	f7fe fa9e 	bl	8000568 <__aeabi_f2d>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	4620      	mov	r0, r4
 8002032:	4629      	mov	r1, r5
 8002034:	e016      	b.n	8002064 <kinMotor_V3+0x3bc>
 8002036:	bf00      	nop
 8002038:	a2529d39 	.word	0xa2529d39
 800203c:	3f91df46 	.word	0x3f91df46
 8002040:	a01d1a13 	.word	0xa01d1a13
 8002044:	c08a8439 	.word	0xc08a8439
 8002048:	a01d1a14 	.word	0xa01d1a14
 800204c:	408a8439 	.word	0x408a8439
 8002050:	33333334 	.word	0x33333334
 8002054:	402f3333 	.word	0x402f3333
 8002058:	a01d1a14 	.word	0xa01d1a14
 800205c:	c08a8439 	.word	0xc08a8439
 8002060:	20000214 	.word	0x20000214
 8002064:	f7fe fad8 	bl	8000618 <__aeabi_dmul>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	4614      	mov	r4, r2
 800206e:	461d      	mov	r5, r3
 8002070:	4bd5      	ldr	r3, [pc, #852]	; (80023c8 <kinMotor_V3+0x720>)
 8002072:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe fa64 	bl	8000544 <__aeabi_i2d>
 800207c:	a3c8      	add	r3, pc, #800	; (adr r3, 80023a0 <kinMotor_V3+0x6f8>)
 800207e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002082:	f7fe fac9 	bl	8000618 <__aeabi_dmul>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	ec43 2b17 	vmov	d7, r2, r3
 800208e:	eeb0 0a47 	vmov.f32	s0, s14
 8002092:	eef0 0a67 	vmov.f32	s1, s15
 8002096:	f00e f88b 	bl	80101b0 <sin>
 800209a:	ec59 8b10 	vmov	r8, r9, d0
 800209e:	69f8      	ldr	r0, [r7, #28]
 80020a0:	f7fe fa62 	bl	8000568 <__aeabi_f2d>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4640      	mov	r0, r8
 80020aa:	4649      	mov	r1, r9
 80020ac:	f7fe fab4 	bl	8000618 <__aeabi_dmul>
 80020b0:	4602      	mov	r2, r0
 80020b2:	460b      	mov	r3, r1
 80020b4:	4620      	mov	r0, r4
 80020b6:	4629      	mov	r1, r5
 80020b8:	f7fe f8f8 	bl	80002ac <__adddf3>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	4610      	mov	r0, r2
 80020c2:	4619      	mov	r1, r3
 80020c4:	a3b8      	add	r3, pc, #736	; (adr r3, 80023a8 <kinMotor_V3+0x700>)
 80020c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ca:	f7fe faa5 	bl	8000618 <__aeabi_dmul>
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	4614      	mov	r4, r2
 80020d4:	461d      	mov	r5, r3
			     (lambdaY * sin(d2r(-45)) * (-sin(d2r(yawVal)) * Ex + cos(d2r(yawVal)) * Ey)) +
 80020d6:	4bbc      	ldr	r3, [pc, #752]	; (80023c8 <kinMotor_V3+0x720>)
 80020d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7fe fa31 	bl	8000544 <__aeabi_i2d>
 80020e2:	a3af      	add	r3, pc, #700	; (adr r3, 80023a0 <kinMotor_V3+0x6f8>)
 80020e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e8:	f7fe fa96 	bl	8000618 <__aeabi_dmul>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	ec43 2b17 	vmov	d7, r2, r3
 80020f4:	eeb0 0a47 	vmov.f32	s0, s14
 80020f8:	eef0 0a67 	vmov.f32	s1, s15
 80020fc:	f00e f858 	bl	80101b0 <sin>
 8002100:	ec53 2b10 	vmov	r2, r3, d0
 8002104:	60ba      	str	r2, [r7, #8]
 8002106:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	6a38      	ldr	r0, [r7, #32]
 800210e:	f7fe fa2b 	bl	8000568 <__aeabi_f2d>
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800211a:	f7fe fa7d 	bl	8000618 <__aeabi_dmul>
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	4690      	mov	r8, r2
 8002124:	4699      	mov	r9, r3
 8002126:	4ba8      	ldr	r3, [pc, #672]	; (80023c8 <kinMotor_V3+0x720>)
 8002128:	f9b3 3000 	ldrsh.w	r3, [r3]
 800212c:	4618      	mov	r0, r3
 800212e:	f7fe fa09 	bl	8000544 <__aeabi_i2d>
 8002132:	a39b      	add	r3, pc, #620	; (adr r3, 80023a0 <kinMotor_V3+0x6f8>)
 8002134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002138:	f7fe fa6e 	bl	8000618 <__aeabi_dmul>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	ec43 2b17 	vmov	d7, r2, r3
 8002144:	eeb0 0a47 	vmov.f32	s0, s14
 8002148:	eef0 0a67 	vmov.f32	s1, s15
 800214c:	f00d ffdc 	bl	8010108 <cos>
 8002150:	ec5b ab10 	vmov	sl, fp, d0
 8002154:	69f8      	ldr	r0, [r7, #28]
 8002156:	f7fe fa07 	bl	8000568 <__aeabi_f2d>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	4650      	mov	r0, sl
 8002160:	4659      	mov	r1, fp
 8002162:	f7fe fa59 	bl	8000618 <__aeabi_dmul>
 8002166:	4602      	mov	r2, r0
 8002168:	460b      	mov	r3, r1
 800216a:	4640      	mov	r0, r8
 800216c:	4649      	mov	r1, r9
 800216e:	f7fe f89d 	bl	80002ac <__adddf3>
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	4610      	mov	r0, r2
 8002178:	4619      	mov	r1, r3
 800217a:	a38d      	add	r3, pc, #564	; (adr r3, 80023b0 <kinMotor_V3+0x708>)
 800217c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002180:	f7fe fa4a 	bl	8000618 <__aeabi_dmul>
 8002184:	4602      	mov	r2, r0
 8002186:	460b      	mov	r3, r1
	mtrKin->w3 = (lambdaX * cos(d2r(-45)) * (cos(d2r(yawVal)) * Ex + sin(d2r(yawVal)) * Ey)) +
 8002188:	4620      	mov	r0, r4
 800218a:	4629      	mov	r1, r5
 800218c:	f7fe f88e 	bl	80002ac <__adddf3>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4614      	mov	r4, r2
 8002196:	461d      	mov	r5, r3
				 (lambdaTH * alphaLengthMotor * Eth);
 8002198:	69b8      	ldr	r0, [r7, #24]
 800219a:	f7fe f9e5 	bl	8000568 <__aeabi_f2d>
 800219e:	a386      	add	r3, pc, #536	; (adr r3, 80023b8 <kinMotor_V3+0x710>)
 80021a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a4:	f7fe fa38 	bl	8000618 <__aeabi_dmul>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
			     (lambdaY * sin(d2r(-45)) * (-sin(d2r(yawVal)) * Ex + cos(d2r(yawVal)) * Ey)) +
 80021ac:	4620      	mov	r0, r4
 80021ae:	4629      	mov	r1, r5
 80021b0:	f7fe f87c 	bl	80002ac <__adddf3>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
	mtrKin->w3 = (lambdaX * cos(d2r(-45)) * (cos(d2r(yawVal)) * Ex + sin(d2r(yawVal)) * Ey)) +
 80021b8:	4610      	mov	r0, r2
 80021ba:	4619      	mov	r1, r3
 80021bc:	f7fe fcdc 	bl	8000b78 <__aeabi_d2iz>
 80021c0:	4602      	mov	r2, r0
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	609a      	str	r2, [r3, #8]
	mtrKin->w4 = (lambdaX * cos(d2r(45)) * (cos(d2r(yawVal)) * Ex + sin(d2r(yawVal)) * Ey)) +
 80021c6:	4b80      	ldr	r3, [pc, #512]	; (80023c8 <kinMotor_V3+0x720>)
 80021c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7fe f9b9 	bl	8000544 <__aeabi_i2d>
 80021d2:	a373      	add	r3, pc, #460	; (adr r3, 80023a0 <kinMotor_V3+0x6f8>)
 80021d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d8:	f7fe fa1e 	bl	8000618 <__aeabi_dmul>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	ec43 2b17 	vmov	d7, r2, r3
 80021e4:	eeb0 0a47 	vmov.f32	s0, s14
 80021e8:	eef0 0a67 	vmov.f32	s1, s15
 80021ec:	f00d ff8c 	bl	8010108 <cos>
 80021f0:	ec55 4b10 	vmov	r4, r5, d0
 80021f4:	6a38      	ldr	r0, [r7, #32]
 80021f6:	f7fe f9b7 	bl	8000568 <__aeabi_f2d>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	4620      	mov	r0, r4
 8002200:	4629      	mov	r1, r5
 8002202:	f7fe fa09 	bl	8000618 <__aeabi_dmul>
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	4614      	mov	r4, r2
 800220c:	461d      	mov	r5, r3
 800220e:	4b6e      	ldr	r3, [pc, #440]	; (80023c8 <kinMotor_V3+0x720>)
 8002210:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002214:	4618      	mov	r0, r3
 8002216:	f7fe f995 	bl	8000544 <__aeabi_i2d>
 800221a:	a361      	add	r3, pc, #388	; (adr r3, 80023a0 <kinMotor_V3+0x6f8>)
 800221c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002220:	f7fe f9fa 	bl	8000618 <__aeabi_dmul>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	ec43 2b17 	vmov	d7, r2, r3
 800222c:	eeb0 0a47 	vmov.f32	s0, s14
 8002230:	eef0 0a67 	vmov.f32	s1, s15
 8002234:	f00d ffbc 	bl	80101b0 <sin>
 8002238:	ec59 8b10 	vmov	r8, r9, d0
 800223c:	69f8      	ldr	r0, [r7, #28]
 800223e:	f7fe f993 	bl	8000568 <__aeabi_f2d>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4640      	mov	r0, r8
 8002248:	4649      	mov	r1, r9
 800224a:	f7fe f9e5 	bl	8000618 <__aeabi_dmul>
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	4620      	mov	r0, r4
 8002254:	4629      	mov	r1, r5
 8002256:	f7fe f829 	bl	80002ac <__adddf3>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	4610      	mov	r0, r2
 8002260:	4619      	mov	r1, r3
 8002262:	a351      	add	r3, pc, #324	; (adr r3, 80023a8 <kinMotor_V3+0x700>)
 8002264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002268:	f7fe f9d6 	bl	8000618 <__aeabi_dmul>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4614      	mov	r4, r2
 8002272:	461d      	mov	r5, r3
			     (lambdaY * sin(d2r(45)) * (-sin(d2r(yawVal)) * Ex + cos(d2r(yawVal)) * Ey)) +
 8002274:	4b54      	ldr	r3, [pc, #336]	; (80023c8 <kinMotor_V3+0x720>)
 8002276:	f9b3 3000 	ldrsh.w	r3, [r3]
 800227a:	4618      	mov	r0, r3
 800227c:	f7fe f962 	bl	8000544 <__aeabi_i2d>
 8002280:	a347      	add	r3, pc, #284	; (adr r3, 80023a0 <kinMotor_V3+0x6f8>)
 8002282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002286:	f7fe f9c7 	bl	8000618 <__aeabi_dmul>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	ec43 2b17 	vmov	d7, r2, r3
 8002292:	eeb0 0a47 	vmov.f32	s0, s14
 8002296:	eef0 0a67 	vmov.f32	s1, s15
 800229a:	f00d ff89 	bl	80101b0 <sin>
 800229e:	ec53 2b10 	vmov	r2, r3, d0
 80022a2:	603a      	str	r2, [r7, #0]
 80022a4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80022a8:	607b      	str	r3, [r7, #4]
 80022aa:	6a38      	ldr	r0, [r7, #32]
 80022ac:	f7fe f95c 	bl	8000568 <__aeabi_f2d>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022b8:	f7fe f9ae 	bl	8000618 <__aeabi_dmul>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	4690      	mov	r8, r2
 80022c2:	4699      	mov	r9, r3
 80022c4:	4b40      	ldr	r3, [pc, #256]	; (80023c8 <kinMotor_V3+0x720>)
 80022c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fe f93a 	bl	8000544 <__aeabi_i2d>
 80022d0:	a333      	add	r3, pc, #204	; (adr r3, 80023a0 <kinMotor_V3+0x6f8>)
 80022d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d6:	f7fe f99f 	bl	8000618 <__aeabi_dmul>
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	ec43 2b17 	vmov	d7, r2, r3
 80022e2:	eeb0 0a47 	vmov.f32	s0, s14
 80022e6:	eef0 0a67 	vmov.f32	s1, s15
 80022ea:	f00d ff0d 	bl	8010108 <cos>
 80022ee:	ec5b ab10 	vmov	sl, fp, d0
 80022f2:	69f8      	ldr	r0, [r7, #28]
 80022f4:	f7fe f938 	bl	8000568 <__aeabi_f2d>
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	4650      	mov	r0, sl
 80022fe:	4659      	mov	r1, fp
 8002300:	f7fe f98a 	bl	8000618 <__aeabi_dmul>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4640      	mov	r0, r8
 800230a:	4649      	mov	r1, r9
 800230c:	f7fd ffce 	bl	80002ac <__adddf3>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	4610      	mov	r0, r2
 8002316:	4619      	mov	r1, r3
 8002318:	a329      	add	r3, pc, #164	; (adr r3, 80023c0 <kinMotor_V3+0x718>)
 800231a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231e:	f7fe f97b 	bl	8000618 <__aeabi_dmul>
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
	mtrKin->w4 = (lambdaX * cos(d2r(45)) * (cos(d2r(yawVal)) * Ex + sin(d2r(yawVal)) * Ey)) +
 8002326:	4620      	mov	r0, r4
 8002328:	4629      	mov	r1, r5
 800232a:	f7fd ffbf 	bl	80002ac <__adddf3>
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	4614      	mov	r4, r2
 8002334:	461d      	mov	r5, r3
			     (lambdaTH * alphaLengthMotor * Eth);
 8002336:	69b8      	ldr	r0, [r7, #24]
 8002338:	f7fe f916 	bl	8000568 <__aeabi_f2d>
 800233c:	a31e      	add	r3, pc, #120	; (adr r3, 80023b8 <kinMotor_V3+0x710>)
 800233e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002342:	f7fe f969 	bl	8000618 <__aeabi_dmul>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
			     (lambdaY * sin(d2r(45)) * (-sin(d2r(yawVal)) * Ex + cos(d2r(yawVal)) * Ey)) +
 800234a:	4620      	mov	r0, r4
 800234c:	4629      	mov	r1, r5
 800234e:	f7fd ffad 	bl	80002ac <__adddf3>
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
	mtrKin->w4 = (lambdaX * cos(d2r(45)) * (cos(d2r(yawVal)) * Ex + sin(d2r(yawVal)) * Ey)) +
 8002356:	4610      	mov	r0, r2
 8002358:	4619      	mov	r1, r3
 800235a:	f7fe fc0d 	bl	8000b78 <__aeabi_d2iz>
 800235e:	4602      	mov	r2, r0
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	60da      	str	r2, [r3, #12]

	if(mtrKin->w1 > Max_Cutoff_Mtr) mtrKin->w1 = Max_Cutoff_Mtr;
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800236c:	dd04      	ble.n	8002378 <kinMotor_V3+0x6d0>
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	e007      	b.n	8002388 <kinMotor_V3+0x6e0>
	else if(mtrKin->w1 < Min_Cutoff_Mtr) mtrKin->w1 = Min_Cutoff_Mtr;
 8002378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f513 7f48 	cmn.w	r3, #800	; 0x320
 8002380:	da02      	bge.n	8002388 <kinMotor_V3+0x6e0>
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	4a11      	ldr	r2, [pc, #68]	; (80023cc <kinMotor_V3+0x724>)
 8002386:	601a      	str	r2, [r3, #0]

	if(mtrKin->w2 > Max_Cutoff_Mtr) mtrKin->w2 = Max_Cutoff_Mtr;
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002390:	dd1e      	ble.n	80023d0 <kinMotor_V3+0x728>
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	e021      	b.n	80023e0 <kinMotor_V3+0x738>
 800239c:	f3af 8000 	nop.w
 80023a0:	a2529d39 	.word	0xa2529d39
 80023a4:	3f91df46 	.word	0x3f91df46
 80023a8:	a01d1a14 	.word	0xa01d1a14
 80023ac:	408a8439 	.word	0x408a8439
 80023b0:	a01d1a13 	.word	0xa01d1a13
 80023b4:	c08a8439 	.word	0xc08a8439
 80023b8:	33333334 	.word	0x33333334
 80023bc:	402f3333 	.word	0x402f3333
 80023c0:	a01d1a13 	.word	0xa01d1a13
 80023c4:	408a8439 	.word	0x408a8439
 80023c8:	20000214 	.word	0x20000214
 80023cc:	fffffce0 	.word	0xfffffce0
	else if(mtrKin->w2 < Min_Cutoff_Mtr) mtrKin->w2 = Min_Cutoff_Mtr;
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f513 7f48 	cmn.w	r3, #800	; 0x320
 80023d8:	da02      	bge.n	80023e0 <kinMotor_V3+0x738>
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	4a15      	ldr	r2, [pc, #84]	; (8002434 <kinMotor_V3+0x78c>)
 80023de:	605a      	str	r2, [r3, #4]

	if(mtrKin->w3 > Max_Cutoff_Mtr) mtrKin->w3 = Max_Cutoff_Mtr;
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80023e8:	dd04      	ble.n	80023f4 <kinMotor_V3+0x74c>
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	f44f 7248 	mov.w	r2, #800	; 0x320
 80023f0:	609a      	str	r2, [r3, #8]
 80023f2:	e007      	b.n	8002404 <kinMotor_V3+0x75c>
	else if(mtrKin->w3 < Min_Cutoff_Mtr) mtrKin->w3 = Min_Cutoff_Mtr;
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f513 7f48 	cmn.w	r3, #800	; 0x320
 80023fc:	da02      	bge.n	8002404 <kinMotor_V3+0x75c>
 80023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002400:	4a0c      	ldr	r2, [pc, #48]	; (8002434 <kinMotor_V3+0x78c>)
 8002402:	609a      	str	r2, [r3, #8]

	if(mtrKin->w4 > Max_Cutoff_Mtr) mtrKin->w4 = Max_Cutoff_Mtr;
 8002404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800240c:	dd04      	ble.n	8002418 <kinMotor_V3+0x770>
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002414:	60da      	str	r2, [r3, #12]
	else if(mtrKin->w4 < Min_Cutoff_Mtr) mtrKin->w4 = Min_Cutoff_Mtr;
}
 8002416:	e007      	b.n	8002428 <kinMotor_V3+0x780>
	else if(mtrKin->w4 < Min_Cutoff_Mtr) mtrKin->w4 = Min_Cutoff_Mtr;
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f513 7f48 	cmn.w	r3, #800	; 0x320
 8002420:	da02      	bge.n	8002428 <kinMotor_V3+0x780>
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	4a03      	ldr	r2, [pc, #12]	; (8002434 <kinMotor_V3+0x78c>)
 8002426:	60da      	str	r2, [r3, #12]
}
 8002428:	bf00      	nop
 800242a:	3728      	adds	r7, #40	; 0x28
 800242c:	46bd      	mov	sp, r7
 800242e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002432:	bf00      	nop
 8002434:	fffffce0 	.word	0xfffffce0

08002438 <kinMotor>:

	if(mtrKin->w4 > Max_Cutoff_Mtr) mtrKin->w4 = Max_Cutoff_Mtr;
	else if(mtrKin->w4 < Min_Cutoff_Mtr) mtrKin->w4 = Min_Cutoff_Mtr;
}

void kinMotor(MotorKin *mtrKin, float x, float y, float th) {
 8002438:	b5b0      	push	{r4, r5, r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	ed87 0a02 	vstr	s0, [r7, #8]
 8002444:	edc7 0a01 	vstr	s1, [r7, #4]
 8002448:	ed87 1a00 	vstr	s2, [r7]
	mtrKin->w1 = (lambdaInv_X * cos(d2r(135)) * x) +
 800244c:	68b8      	ldr	r0, [r7, #8]
 800244e:	f7fe f88b 	bl	8000568 <__aeabi_f2d>
 8002452:	a38f      	add	r3, pc, #572	; (adr r3, 8002690 <kinMotor+0x258>)
 8002454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002458:	f7fe f8de 	bl	8000618 <__aeabi_dmul>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4614      	mov	r4, r2
 8002462:	461d      	mov	r5, r3
				 (lambdaInv_Y * sin(d2r(135)) * y) +
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f7fe f87f 	bl	8000568 <__aeabi_f2d>
 800246a:	a38d      	add	r3, pc, #564	; (adr r3, 80026a0 <kinMotor+0x268>)
 800246c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002470:	f7fe f8d2 	bl	8000618 <__aeabi_dmul>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
	mtrKin->w1 = (lambdaInv_X * cos(d2r(135)) * x) +
 8002478:	4620      	mov	r0, r4
 800247a:	4629      	mov	r1, r5
 800247c:	f7fd ff16 	bl	80002ac <__adddf3>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	4614      	mov	r4, r2
 8002486:	461d      	mov	r5, r3
				 (lambdaInv_TH * lengthAlpha * th);
 8002488:	6838      	ldr	r0, [r7, #0]
 800248a:	f7fe f86d 	bl	8000568 <__aeabi_f2d>
 800248e:	f04f 0200 	mov.w	r2, #0
 8002492:	4b87      	ldr	r3, [pc, #540]	; (80026b0 <kinMotor+0x278>)
 8002494:	f7fe f8c0 	bl	8000618 <__aeabi_dmul>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
				 (lambdaInv_Y * sin(d2r(135)) * y) +
 800249c:	4620      	mov	r0, r4
 800249e:	4629      	mov	r1, r5
 80024a0:	f7fd ff04 	bl	80002ac <__adddf3>
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
	mtrKin->w1 = (lambdaInv_X * cos(d2r(135)) * x) +
 80024a8:	4610      	mov	r0, r2
 80024aa:	4619      	mov	r1, r3
 80024ac:	f7fe fb64 	bl	8000b78 <__aeabi_d2iz>
 80024b0:	4602      	mov	r2, r0
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	601a      	str	r2, [r3, #0]
	mtrKin->w2 = (lambdaInv_X * cos(d2r(-135)) * x) +
 80024b6:	68b8      	ldr	r0, [r7, #8]
 80024b8:	f7fe f856 	bl	8000568 <__aeabi_f2d>
 80024bc:	a374      	add	r3, pc, #464	; (adr r3, 8002690 <kinMotor+0x258>)
 80024be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c2:	f7fe f8a9 	bl	8000618 <__aeabi_dmul>
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	4614      	mov	r4, r2
 80024cc:	461d      	mov	r5, r3
				 (lambdaInv_Y * sin(d2r(-135)) * y) +
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7fe f84a 	bl	8000568 <__aeabi_f2d>
 80024d4:	a370      	add	r3, pc, #448	; (adr r3, 8002698 <kinMotor+0x260>)
 80024d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024da:	f7fe f89d 	bl	8000618 <__aeabi_dmul>
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
	mtrKin->w2 = (lambdaInv_X * cos(d2r(-135)) * x) +
 80024e2:	4620      	mov	r0, r4
 80024e4:	4629      	mov	r1, r5
 80024e6:	f7fd fee1 	bl	80002ac <__adddf3>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	4614      	mov	r4, r2
 80024f0:	461d      	mov	r5, r3
				 (lambdaInv_TH * lengthAlpha * th);
 80024f2:	6838      	ldr	r0, [r7, #0]
 80024f4:	f7fe f838 	bl	8000568 <__aeabi_f2d>
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	4b6c      	ldr	r3, [pc, #432]	; (80026b0 <kinMotor+0x278>)
 80024fe:	f7fe f88b 	bl	8000618 <__aeabi_dmul>
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
				 (lambdaInv_Y * sin(d2r(-135)) * y) +
 8002506:	4620      	mov	r0, r4
 8002508:	4629      	mov	r1, r5
 800250a:	f7fd fecf 	bl	80002ac <__adddf3>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
	mtrKin->w2 = (lambdaInv_X * cos(d2r(-135)) * x) +
 8002512:	4610      	mov	r0, r2
 8002514:	4619      	mov	r1, r3
 8002516:	f7fe fb2f 	bl	8000b78 <__aeabi_d2iz>
 800251a:	4602      	mov	r2, r0
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	605a      	str	r2, [r3, #4]
	mtrKin->w3 = (lambdaInv_X * cos(d2r(-45)) * x) +
 8002520:	68b8      	ldr	r0, [r7, #8]
 8002522:	f7fe f821 	bl	8000568 <__aeabi_f2d>
 8002526:	a35e      	add	r3, pc, #376	; (adr r3, 80026a0 <kinMotor+0x268>)
 8002528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252c:	f7fe f874 	bl	8000618 <__aeabi_dmul>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	4614      	mov	r4, r2
 8002536:	461d      	mov	r5, r3
			     (lambdaInv_Y * sin(d2r(-45)) * y) +
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f7fe f815 	bl	8000568 <__aeabi_f2d>
 800253e:	a354      	add	r3, pc, #336	; (adr r3, 8002690 <kinMotor+0x258>)
 8002540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002544:	f7fe f868 	bl	8000618 <__aeabi_dmul>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
	mtrKin->w3 = (lambdaInv_X * cos(d2r(-45)) * x) +
 800254c:	4620      	mov	r0, r4
 800254e:	4629      	mov	r1, r5
 8002550:	f7fd feac 	bl	80002ac <__adddf3>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4614      	mov	r4, r2
 800255a:	461d      	mov	r5, r3
				 (lambdaInv_TH * lengthAlpha * th);
 800255c:	6838      	ldr	r0, [r7, #0]
 800255e:	f7fe f803 	bl	8000568 <__aeabi_f2d>
 8002562:	f04f 0200 	mov.w	r2, #0
 8002566:	4b52      	ldr	r3, [pc, #328]	; (80026b0 <kinMotor+0x278>)
 8002568:	f7fe f856 	bl	8000618 <__aeabi_dmul>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
			     (lambdaInv_Y * sin(d2r(-45)) * y) +
 8002570:	4620      	mov	r0, r4
 8002572:	4629      	mov	r1, r5
 8002574:	f7fd fe9a 	bl	80002ac <__adddf3>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
	mtrKin->w3 = (lambdaInv_X * cos(d2r(-45)) * x) +
 800257c:	4610      	mov	r0, r2
 800257e:	4619      	mov	r1, r3
 8002580:	f7fe fafa 	bl	8000b78 <__aeabi_d2iz>
 8002584:	4602      	mov	r2, r0
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	609a      	str	r2, [r3, #8]
	mtrKin->w4 = (lambdaInv_X * cos(d2r(45)) * x) +
 800258a:	68b8      	ldr	r0, [r7, #8]
 800258c:	f7fd ffec 	bl	8000568 <__aeabi_f2d>
 8002590:	a343      	add	r3, pc, #268	; (adr r3, 80026a0 <kinMotor+0x268>)
 8002592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002596:	f7fe f83f 	bl	8000618 <__aeabi_dmul>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	4614      	mov	r4, r2
 80025a0:	461d      	mov	r5, r3
				 (lambdaInv_Y * sin(d2r(45)) * y) +
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7fd ffe0 	bl	8000568 <__aeabi_f2d>
 80025a8:	a33f      	add	r3, pc, #252	; (adr r3, 80026a8 <kinMotor+0x270>)
 80025aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ae:	f7fe f833 	bl	8000618 <__aeabi_dmul>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
	mtrKin->w4 = (lambdaInv_X * cos(d2r(45)) * x) +
 80025b6:	4620      	mov	r0, r4
 80025b8:	4629      	mov	r1, r5
 80025ba:	f7fd fe77 	bl	80002ac <__adddf3>
 80025be:	4602      	mov	r2, r0
 80025c0:	460b      	mov	r3, r1
 80025c2:	4614      	mov	r4, r2
 80025c4:	461d      	mov	r5, r3
				 (lambdaInv_TH * lengthAlpha * th);
 80025c6:	6838      	ldr	r0, [r7, #0]
 80025c8:	f7fd ffce 	bl	8000568 <__aeabi_f2d>
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	4b37      	ldr	r3, [pc, #220]	; (80026b0 <kinMotor+0x278>)
 80025d2:	f7fe f821 	bl	8000618 <__aeabi_dmul>
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
				 (lambdaInv_Y * sin(d2r(45)) * y) +
 80025da:	4620      	mov	r0, r4
 80025dc:	4629      	mov	r1, r5
 80025de:	f7fd fe65 	bl	80002ac <__adddf3>
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
	mtrKin->w4 = (lambdaInv_X * cos(d2r(45)) * x) +
 80025e6:	4610      	mov	r0, r2
 80025e8:	4619      	mov	r1, r3
 80025ea:	f7fe fac5 	bl	8000b78 <__aeabi_d2iz>
 80025ee:	4602      	mov	r2, r0
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	60da      	str	r2, [r3, #12]

	if(mtrKin->w1 > Max_Cutoff_Mtr_Inv) mtrKin->w1 = Max_Cutoff_Mtr_Inv;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80025fc:	dd04      	ble.n	8002608 <kinMotor+0x1d0>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	e007      	b.n	8002618 <kinMotor+0x1e0>
	else if(mtrKin->w1 < Min_Cutoff_Mtr_Inv) mtrKin->w1 = Min_Cutoff_Mtr_Inv;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f513 7fc8 	cmn.w	r3, #400	; 0x190
 8002610:	da02      	bge.n	8002618 <kinMotor+0x1e0>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	4a27      	ldr	r2, [pc, #156]	; (80026b4 <kinMotor+0x27c>)
 8002616:	601a      	str	r2, [r3, #0]

	if(mtrKin->w2 > Max_Cutoff_Mtr_Inv) mtrKin->w2 = Max_Cutoff_Mtr_Inv;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002620:	dd04      	ble.n	800262c <kinMotor+0x1f4>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	e007      	b.n	800263c <kinMotor+0x204>
	else if(mtrKin->w2 < Min_Cutoff_Mtr_Inv) mtrKin->w2 = Min_Cutoff_Mtr_Inv;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f513 7fc8 	cmn.w	r3, #400	; 0x190
 8002634:	da02      	bge.n	800263c <kinMotor+0x204>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	4a1e      	ldr	r2, [pc, #120]	; (80026b4 <kinMotor+0x27c>)
 800263a:	605a      	str	r2, [r3, #4]

	if(mtrKin->w3 > Max_Cutoff_Mtr_Inv) mtrKin->w3 = Max_Cutoff_Mtr_Inv;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002644:	dd04      	ble.n	8002650 <kinMotor+0x218>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800264c:	609a      	str	r2, [r3, #8]
 800264e:	e007      	b.n	8002660 <kinMotor+0x228>
	else if(mtrKin->w3 < Min_Cutoff_Mtr_Inv) mtrKin->w3 = Min_Cutoff_Mtr_Inv;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f513 7fc8 	cmn.w	r3, #400	; 0x190
 8002658:	da02      	bge.n	8002660 <kinMotor+0x228>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	4a15      	ldr	r2, [pc, #84]	; (80026b4 <kinMotor+0x27c>)
 800265e:	609a      	str	r2, [r3, #8]

	if(mtrKin->w4 > Max_Cutoff_Mtr_Inv) mtrKin->w4 = Max_Cutoff_Mtr_Inv;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002668:	dd04      	ble.n	8002674 <kinMotor+0x23c>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002670:	60da      	str	r2, [r3, #12]
	else if(mtrKin->w4 < Min_Cutoff_Mtr_Inv) mtrKin->w4 = Min_Cutoff_Mtr_Inv;
}
 8002672:	e007      	b.n	8002684 <kinMotor+0x24c>
	else if(mtrKin->w4 < Min_Cutoff_Mtr_Inv) mtrKin->w4 = Min_Cutoff_Mtr_Inv;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	f513 7fc8 	cmn.w	r3, #400	; 0x190
 800267c:	da02      	bge.n	8002684 <kinMotor+0x24c>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	4a0c      	ldr	r2, [pc, #48]	; (80026b4 <kinMotor+0x27c>)
 8002682:	60da      	str	r2, [r3, #12]
}
 8002684:	bf00      	nop
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bdb0      	pop	{r4, r5, r7, pc}
 800268c:	f3af 8000 	nop.w
 8002690:	b0184065 	.word	0xb0184065
 8002694:	c08618da 	.word	0xc08618da
 8002698:	b0184066 	.word	0xb0184066
 800269c:	c08618da 	.word	0xc08618da
 80026a0:	b0184066 	.word	0xb0184066
 80026a4:	408618da 	.word	0x408618da
 80026a8:	b0184065 	.word	0xb0184065
 80026ac:	408618da 	.word	0x408618da
 80026b0:	40568000 	.word	0x40568000
 80026b4:	fffffe70 	.word	0xfffffe70

080026b8 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 80026c0:	4a04      	ldr	r2, [pc, #16]	; (80026d4 <bno055_assignI2C+0x1c>)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6013      	str	r3, [r2, #0]
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	20000258 	.word	0x20000258

080026d8 <bno055_delay>:

void bno055_delay(int time) {
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f00a ffd2 	bl	800d68c <osDelay>
#else
  HAL_Delay(time);
#endif
}
 80026e8:	bf00      	nop
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b088      	sub	sp, #32
 80026f4:	af02      	add	r7, sp, #8
 80026f6:	4603      	mov	r3, r0
 80026f8:	460a      	mov	r2, r1
 80026fa:	71fb      	strb	r3, [r7, #7]
 80026fc:	4613      	mov	r3, r2
 80026fe:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	733b      	strb	r3, [r7, #12]
 8002704:	79bb      	ldrb	r3, [r7, #6]
 8002706:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8002708:	4b5a      	ldr	r3, [pc, #360]	; (8002874 <bno055_writeData+0x184>)
 800270a:	6818      	ldr	r0, [r3, #0]
 800270c:	f107 020c 	add.w	r2, r7, #12
 8002710:	230a      	movs	r3, #10
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	2302      	movs	r3, #2
 8002716:	2150      	movs	r1, #80	; 0x50
 8002718:	f007 f870 	bl	80097fc <HAL_I2C_Master_Transmit>
 800271c:	4603      	mov	r3, r0
 800271e:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8002720:	7dfb      	ldrb	r3, [r7, #23]
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 80a0 	beq.w	8002868 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8002728:	7dfb      	ldrb	r3, [r7, #23]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d103      	bne.n	8002736 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 800272e:	4852      	ldr	r0, [pc, #328]	; (8002878 <bno055_writeData+0x188>)
 8002730:	f010 f988 	bl	8012a44 <puts>
 8002734:	e012      	b.n	800275c <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8002736:	7dfb      	ldrb	r3, [r7, #23]
 8002738:	2b03      	cmp	r3, #3
 800273a:	d103      	bne.n	8002744 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 800273c:	484f      	ldr	r0, [pc, #316]	; (800287c <bno055_writeData+0x18c>)
 800273e:	f010 f981 	bl	8012a44 <puts>
 8002742:	e00b      	b.n	800275c <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8002744:	7dfb      	ldrb	r3, [r7, #23]
 8002746:	2b02      	cmp	r3, #2
 8002748:	d103      	bne.n	8002752 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 800274a:	484d      	ldr	r0, [pc, #308]	; (8002880 <bno055_writeData+0x190>)
 800274c:	f010 f97a 	bl	8012a44 <puts>
 8002750:	e004      	b.n	800275c <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8002752:	7dfb      	ldrb	r3, [r7, #23]
 8002754:	4619      	mov	r1, r3
 8002756:	484b      	ldr	r0, [pc, #300]	; (8002884 <bno055_writeData+0x194>)
 8002758:	f010 f90e 	bl	8012978 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 800275c:	4b45      	ldr	r3, [pc, #276]	; (8002874 <bno055_writeData+0x184>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f007 fb89 	bl	8009e78 <HAL_I2C_GetError>
 8002766:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d07e      	beq.n	800286c <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d103      	bne.n	800277c <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8002774:	4844      	ldr	r0, [pc, #272]	; (8002888 <bno055_writeData+0x198>)
 8002776:	f010 f965 	bl	8012a44 <puts>
 800277a:	e021      	b.n	80027c0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d103      	bne.n	800278a <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8002782:	4842      	ldr	r0, [pc, #264]	; (800288c <bno055_writeData+0x19c>)
 8002784:	f010 f95e 	bl	8012a44 <puts>
 8002788:	e01a      	b.n	80027c0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	2b04      	cmp	r3, #4
 800278e:	d103      	bne.n	8002798 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8002790:	483f      	ldr	r0, [pc, #252]	; (8002890 <bno055_writeData+0x1a0>)
 8002792:	f010 f957 	bl	8012a44 <puts>
 8002796:	e013      	b.n	80027c0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	2b08      	cmp	r3, #8
 800279c:	d103      	bne.n	80027a6 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 800279e:	483d      	ldr	r0, [pc, #244]	; (8002894 <bno055_writeData+0x1a4>)
 80027a0:	f010 f950 	bl	8012a44 <puts>
 80027a4:	e00c      	b.n	80027c0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	2b10      	cmp	r3, #16
 80027aa:	d103      	bne.n	80027b4 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 80027ac:	483a      	ldr	r0, [pc, #232]	; (8002898 <bno055_writeData+0x1a8>)
 80027ae:	f010 f949 	bl	8012a44 <puts>
 80027b2:	e005      	b.n	80027c0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	2b20      	cmp	r3, #32
 80027b8:	d102      	bne.n	80027c0 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 80027ba:	4838      	ldr	r0, [pc, #224]	; (800289c <bno055_writeData+0x1ac>)
 80027bc:	f010 f942 	bl	8012a44 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 80027c0:	4b2c      	ldr	r3, [pc, #176]	; (8002874 <bno055_writeData+0x184>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f007 fb49 	bl	8009e5c <HAL_I2C_GetState>
 80027ca:	4603      	mov	r3, r0
 80027cc:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 80027ce:	7bfb      	ldrb	r3, [r7, #15]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d103      	bne.n	80027dc <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 80027d4:	4832      	ldr	r0, [pc, #200]	; (80028a0 <bno055_writeData+0x1b0>)
 80027d6:	f010 f935 	bl	8012a44 <puts>
 80027da:	e048      	b.n	800286e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
 80027de:	2b20      	cmp	r3, #32
 80027e0:	d103      	bne.n	80027ea <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 80027e2:	482f      	ldr	r0, [pc, #188]	; (80028a0 <bno055_writeData+0x1b0>)
 80027e4:	f010 f92e 	bl	8012a44 <puts>
 80027e8:	e041      	b.n	800286e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
 80027ec:	2b24      	cmp	r3, #36	; 0x24
 80027ee:	d103      	bne.n	80027f8 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 80027f0:	482c      	ldr	r0, [pc, #176]	; (80028a4 <bno055_writeData+0x1b4>)
 80027f2:	f010 f927 	bl	8012a44 <puts>
 80027f6:	e03a      	b.n	800286e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
 80027fa:	2b21      	cmp	r3, #33	; 0x21
 80027fc:	d103      	bne.n	8002806 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 80027fe:	482a      	ldr	r0, [pc, #168]	; (80028a8 <bno055_writeData+0x1b8>)
 8002800:	f010 f920 	bl	8012a44 <puts>
 8002804:	e033      	b.n	800286e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8002806:	7bfb      	ldrb	r3, [r7, #15]
 8002808:	2b22      	cmp	r3, #34	; 0x22
 800280a:	d103      	bne.n	8002814 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 800280c:	4827      	ldr	r0, [pc, #156]	; (80028ac <bno055_writeData+0x1bc>)
 800280e:	f010 f919 	bl	8012a44 <puts>
 8002812:	e02c      	b.n	800286e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8002814:	7bfb      	ldrb	r3, [r7, #15]
 8002816:	2b28      	cmp	r3, #40	; 0x28
 8002818:	d103      	bne.n	8002822 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 800281a:	4825      	ldr	r0, [pc, #148]	; (80028b0 <bno055_writeData+0x1c0>)
 800281c:	f010 f912 	bl	8012a44 <puts>
 8002820:	e025      	b.n	800286e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8002822:	7bfb      	ldrb	r3, [r7, #15]
 8002824:	2b29      	cmp	r3, #41	; 0x29
 8002826:	d103      	bne.n	8002830 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8002828:	4822      	ldr	r0, [pc, #136]	; (80028b4 <bno055_writeData+0x1c4>)
 800282a:	f010 f90b 	bl	8012a44 <puts>
 800282e:	e01e      	b.n	800286e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8002830:	7bfb      	ldrb	r3, [r7, #15]
 8002832:	2b2a      	cmp	r3, #42	; 0x2a
 8002834:	d103      	bne.n	800283e <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8002836:	4820      	ldr	r0, [pc, #128]	; (80028b8 <bno055_writeData+0x1c8>)
 8002838:	f010 f904 	bl	8012a44 <puts>
 800283c:	e017      	b.n	800286e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 800283e:	7bfb      	ldrb	r3, [r7, #15]
 8002840:	2b60      	cmp	r3, #96	; 0x60
 8002842:	d103      	bne.n	800284c <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8002844:	481d      	ldr	r0, [pc, #116]	; (80028bc <bno055_writeData+0x1cc>)
 8002846:	f010 f8fd 	bl	8012a44 <puts>
 800284a:	e010      	b.n	800286e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	2ba0      	cmp	r3, #160	; 0xa0
 8002850:	d103      	bne.n	800285a <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8002852:	481b      	ldr	r0, [pc, #108]	; (80028c0 <bno055_writeData+0x1d0>)
 8002854:	f010 f8f6 	bl	8012a44 <puts>
 8002858:	e009      	b.n	800286e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 800285a:	7bfb      	ldrb	r3, [r7, #15]
 800285c:	2be0      	cmp	r3, #224	; 0xe0
 800285e:	d106      	bne.n	800286e <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8002860:	4818      	ldr	r0, [pc, #96]	; (80028c4 <bno055_writeData+0x1d4>)
 8002862:	f010 f8ef 	bl	8012a44 <puts>
 8002866:	e002      	b.n	800286e <bno055_writeData+0x17e>
    return;
 8002868:	bf00      	nop
 800286a:	e000      	b.n	800286e <bno055_writeData+0x17e>
    return;
 800286c:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	20000258 	.word	0x20000258
 8002878:	08014db8 	.word	0x08014db8
 800287c:	08014ddc 	.word	0x08014ddc
 8002880:	08014e04 	.word	0x08014e04
 8002884:	08014e28 	.word	0x08014e28
 8002888:	08014e40 	.word	0x08014e40
 800288c:	08014e54 	.word	0x08014e54
 8002890:	08014e68 	.word	0x08014e68
 8002894:	08014e7c 	.word	0x08014e7c
 8002898:	08014e90 	.word	0x08014e90
 800289c:	08014ea4 	.word	0x08014ea4
 80028a0:	08014ebc 	.word	0x08014ebc
 80028a4:	08014ed4 	.word	0x08014ed4
 80028a8:	08014ee8 	.word	0x08014ee8
 80028ac:	08014f00 	.word	0x08014f00
 80028b0:	08014f18 	.word	0x08014f18
 80028b4:	08014f30 	.word	0x08014f30
 80028b8:	08014f50 	.word	0x08014f50
 80028bc:	08014f70 	.word	0x08014f70
 80028c0:	08014f88 	.word	0x08014f88
 80028c4:	08014fa0 	.word	0x08014fa0

080028c8 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af02      	add	r7, sp, #8
 80028ce:	4603      	mov	r3, r0
 80028d0:	6039      	str	r1, [r7, #0]
 80028d2:	71fb      	strb	r3, [r7, #7]
 80028d4:	4613      	mov	r3, r2
 80028d6:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 80028d8:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <bno055_readData+0x40>)
 80028da:	6818      	ldr	r0, [r3, #0]
 80028dc:	1dfa      	adds	r2, r7, #7
 80028de:	2364      	movs	r3, #100	; 0x64
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	2301      	movs	r3, #1
 80028e4:	2150      	movs	r1, #80	; 0x50
 80028e6:	f006 ff89 	bl	80097fc <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 80028ea:	4b07      	ldr	r3, [pc, #28]	; (8002908 <bno055_readData+0x40>)
 80028ec:	6818      	ldr	r0, [r3, #0]
 80028ee:	79bb      	ldrb	r3, [r7, #6]
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	2264      	movs	r2, #100	; 0x64
 80028f4:	9200      	str	r2, [sp, #0]
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	2150      	movs	r1, #80	; 0x50
 80028fa:	f007 f87d 	bl	80099f8 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 80028fe:	bf00      	nop
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20000258 	.word	0x20000258

0800290c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002910:	f005 fef0 	bl	80086f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002914:	f000 f852 	bl	80029bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002918:	f000 fb1c 	bl	8002f54 <MX_GPIO_Init>
  MX_DMA_Init();
 800291c:	f000 fae2 	bl	8002ee4 <MX_DMA_Init>
  MX_I2C1_Init();
 8002920:	f000 f8b6 	bl	8002a90 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8002924:	f000 fab4 	bl	8002e90 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8002928:	f000 f932 	bl	8002b90 <MX_TIM1_Init>
  MX_TIM3_Init();
 800292c:	f000 f9f4 	bl	8002d18 <MX_TIM3_Init>
  MX_TIM13_Init();
 8002930:	f000 fa8a 	bl	8002e48 <MX_TIM13_Init>
  MX_I2C2_Init();
 8002934:	f000 f8ec 	bl	8002b10 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim13);
 8002938:	4813      	ldr	r0, [pc, #76]	; (8002988 <main+0x7c>)
 800293a:	f008 fb85 	bl	800b048 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800293e:	f00a fdc9 	bl	800d4d4 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of myTask01 */
  myTask01Handle = osThreadNew(StartDefaultTask, NULL, &myTask01_attributes);
 8002942:	4a12      	ldr	r2, [pc, #72]	; (800298c <main+0x80>)
 8002944:	2100      	movs	r1, #0
 8002946:	4812      	ldr	r0, [pc, #72]	; (8002990 <main+0x84>)
 8002948:	f00a fe0e 	bl	800d568 <osThreadNew>
 800294c:	4603      	mov	r3, r0
 800294e:	4a11      	ldr	r2, [pc, #68]	; (8002994 <main+0x88>)
 8002950:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(commTask, NULL, &myTask02_attributes);
 8002952:	4a11      	ldr	r2, [pc, #68]	; (8002998 <main+0x8c>)
 8002954:	2100      	movs	r1, #0
 8002956:	4811      	ldr	r0, [pc, #68]	; (800299c <main+0x90>)
 8002958:	f00a fe06 	bl	800d568 <osThreadNew>
 800295c:	4603      	mov	r3, r0
 800295e:	4a10      	ldr	r2, [pc, #64]	; (80029a0 <main+0x94>)
 8002960:	6013      	str	r3, [r2, #0]

  /* creation of ImuTask */
  ImuTaskHandle = osThreadNew(ImuTask_Function, NULL, &ImuTask_attributes);
 8002962:	4a10      	ldr	r2, [pc, #64]	; (80029a4 <main+0x98>)
 8002964:	2100      	movs	r1, #0
 8002966:	4810      	ldr	r0, [pc, #64]	; (80029a8 <main+0x9c>)
 8002968:	f00a fdfe 	bl	800d568 <osThreadNew>
 800296c:	4603      	mov	r3, r0
 800296e:	4a0f      	ldr	r2, [pc, #60]	; (80029ac <main+0xa0>)
 8002970:	6013      	str	r3, [r2, #0]

  /* creation of myTask04 */
  myTask04Handle = osThreadNew(GUI_Task, NULL, &myTask04_attributes);
 8002972:	4a0f      	ldr	r2, [pc, #60]	; (80029b0 <main+0xa4>)
 8002974:	2100      	movs	r1, #0
 8002976:	480f      	ldr	r0, [pc, #60]	; (80029b4 <main+0xa8>)
 8002978:	f00a fdf6 	bl	800d568 <osThreadNew>
 800297c:	4603      	mov	r3, r0
 800297e:	4a0e      	ldr	r2, [pc, #56]	; (80029b8 <main+0xac>)
 8002980:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002982:	f00a fdcb 	bl	800d51c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8002986:	e7fe      	b.n	8002986 <main+0x7a>
 8002988:	20000454 	.word	0x20000454
 800298c:	08015340 	.word	0x08015340
 8002990:	080037c1 	.word	0x080037c1
 8002994:	200005a4 	.word	0x200005a4
 8002998:	08015364 	.word	0x08015364
 800299c:	080038ad 	.word	0x080038ad
 80029a0:	200005a8 	.word	0x200005a8
 80029a4:	08015388 	.word	0x08015388
 80029a8:	080038c5 	.word	0x080038c5
 80029ac:	200005ac 	.word	0x200005ac
 80029b0:	080153ac 	.word	0x080153ac
 80029b4:	08003961 	.word	0x08003961
 80029b8:	200005b0 	.word	0x200005b0

080029bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b094      	sub	sp, #80	; 0x50
 80029c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029c2:	f107 0320 	add.w	r3, r7, #32
 80029c6:	2230      	movs	r2, #48	; 0x30
 80029c8:	2100      	movs	r1, #0
 80029ca:	4618      	mov	r0, r3
 80029cc:	f010 f93a 	bl	8012c44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029d0:	f107 030c 	add.w	r3, r7, #12
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	605a      	str	r2, [r3, #4]
 80029da:	609a      	str	r2, [r3, #8]
 80029dc:	60da      	str	r2, [r3, #12]
 80029de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80029e0:	2300      	movs	r3, #0
 80029e2:	60bb      	str	r3, [r7, #8]
 80029e4:	4b28      	ldr	r3, [pc, #160]	; (8002a88 <SystemClock_Config+0xcc>)
 80029e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e8:	4a27      	ldr	r2, [pc, #156]	; (8002a88 <SystemClock_Config+0xcc>)
 80029ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ee:	6413      	str	r3, [r2, #64]	; 0x40
 80029f0:	4b25      	ldr	r3, [pc, #148]	; (8002a88 <SystemClock_Config+0xcc>)
 80029f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f8:	60bb      	str	r3, [r7, #8]
 80029fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029fc:	2300      	movs	r3, #0
 80029fe:	607b      	str	r3, [r7, #4]
 8002a00:	4b22      	ldr	r3, [pc, #136]	; (8002a8c <SystemClock_Config+0xd0>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a21      	ldr	r2, [pc, #132]	; (8002a8c <SystemClock_Config+0xd0>)
 8002a06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a0a:	6013      	str	r3, [r2, #0]
 8002a0c:	4b1f      	ldr	r3, [pc, #124]	; (8002a8c <SystemClock_Config+0xd0>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a14:	607b      	str	r3, [r7, #4]
 8002a16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a20:	2310      	movs	r3, #16
 8002a22:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a24:	2302      	movs	r3, #2
 8002a26:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002a2c:	2308      	movs	r3, #8
 8002a2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002a30:	23a8      	movs	r3, #168	; 0xa8
 8002a32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a34:	2302      	movs	r3, #2
 8002a36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002a38:	2304      	movs	r3, #4
 8002a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a3c:	f107 0320 	add.w	r3, r7, #32
 8002a40:	4618      	mov	r0, r3
 8002a42:	f007 fe27 	bl	800a694 <HAL_RCC_OscConfig>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002a4c:	f001 f872 	bl	8003b34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a50:	230f      	movs	r3, #15
 8002a52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a54:	2302      	movs	r3, #2
 8002a56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002a5c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002a60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002a62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a66:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002a68:	f107 030c 	add.w	r3, r7, #12
 8002a6c:	2105      	movs	r1, #5
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f008 f888 	bl	800ab84 <HAL_RCC_ClockConfig>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002a7a:	f001 f85b 	bl	8003b34 <Error_Handler>
  }
}
 8002a7e:	bf00      	nop
 8002a80:	3750      	adds	r7, #80	; 0x50
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	40007000 	.word	0x40007000

08002a90 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a94:	4b1b      	ldr	r3, [pc, #108]	; (8002b04 <MX_I2C1_Init+0x74>)
 8002a96:	4a1c      	ldr	r2, [pc, #112]	; (8002b08 <MX_I2C1_Init+0x78>)
 8002a98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002a9a:	4b1a      	ldr	r3, [pc, #104]	; (8002b04 <MX_I2C1_Init+0x74>)
 8002a9c:	4a1b      	ldr	r2, [pc, #108]	; (8002b0c <MX_I2C1_Init+0x7c>)
 8002a9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002aa0:	4b18      	ldr	r3, [pc, #96]	; (8002b04 <MX_I2C1_Init+0x74>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002aa6:	4b17      	ldr	r3, [pc, #92]	; (8002b04 <MX_I2C1_Init+0x74>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002aac:	4b15      	ldr	r3, [pc, #84]	; (8002b04 <MX_I2C1_Init+0x74>)
 8002aae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ab2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ab4:	4b13      	ldr	r3, [pc, #76]	; (8002b04 <MX_I2C1_Init+0x74>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002aba:	4b12      	ldr	r3, [pc, #72]	; (8002b04 <MX_I2C1_Init+0x74>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ac0:	4b10      	ldr	r3, [pc, #64]	; (8002b04 <MX_I2C1_Init+0x74>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ac6:	4b0f      	ldr	r3, [pc, #60]	; (8002b04 <MX_I2C1_Init+0x74>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002acc:	480d      	ldr	r0, [pc, #52]	; (8002b04 <MX_I2C1_Init+0x74>)
 8002ace:	f006 fd51 	bl	8009574 <HAL_I2C_Init>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002ad8:	f001 f82c 	bl	8003b34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002adc:	2100      	movs	r1, #0
 8002ade:	4809      	ldr	r0, [pc, #36]	; (8002b04 <MX_I2C1_Init+0x74>)
 8002ae0:	f007 fd5c 	bl	800a59c <HAL_I2CEx_ConfigAnalogFilter>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002aea:	f001 f823 	bl	8003b34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002aee:	2100      	movs	r1, #0
 8002af0:	4804      	ldr	r0, [pc, #16]	; (8002b04 <MX_I2C1_Init+0x74>)
 8002af2:	f007 fd8f 	bl	800a614 <HAL_I2CEx_ConfigDigitalFilter>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002afc:	f001 f81a 	bl	8003b34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b00:	bf00      	nop
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	2000025c 	.word	0x2000025c
 8002b08:	40005400 	.word	0x40005400
 8002b0c:	000186a0 	.word	0x000186a0

08002b10 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002b14:	4b1b      	ldr	r3, [pc, #108]	; (8002b84 <MX_I2C2_Init+0x74>)
 8002b16:	4a1c      	ldr	r2, [pc, #112]	; (8002b88 <MX_I2C2_Init+0x78>)
 8002b18:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002b1a:	4b1a      	ldr	r3, [pc, #104]	; (8002b84 <MX_I2C2_Init+0x74>)
 8002b1c:	4a1b      	ldr	r2, [pc, #108]	; (8002b8c <MX_I2C2_Init+0x7c>)
 8002b1e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b20:	4b18      	ldr	r3, [pc, #96]	; (8002b84 <MX_I2C2_Init+0x74>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002b26:	4b17      	ldr	r3, [pc, #92]	; (8002b84 <MX_I2C2_Init+0x74>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b2c:	4b15      	ldr	r3, [pc, #84]	; (8002b84 <MX_I2C2_Init+0x74>)
 8002b2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b32:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b34:	4b13      	ldr	r3, [pc, #76]	; (8002b84 <MX_I2C2_Init+0x74>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002b3a:	4b12      	ldr	r3, [pc, #72]	; (8002b84 <MX_I2C2_Init+0x74>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b40:	4b10      	ldr	r3, [pc, #64]	; (8002b84 <MX_I2C2_Init+0x74>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b46:	4b0f      	ldr	r3, [pc, #60]	; (8002b84 <MX_I2C2_Init+0x74>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002b4c:	480d      	ldr	r0, [pc, #52]	; (8002b84 <MX_I2C2_Init+0x74>)
 8002b4e:	f006 fd11 	bl	8009574 <HAL_I2C_Init>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002b58:	f000 ffec 	bl	8003b34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	4809      	ldr	r0, [pc, #36]	; (8002b84 <MX_I2C2_Init+0x74>)
 8002b60:	f007 fd1c 	bl	800a59c <HAL_I2CEx_ConfigAnalogFilter>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8002b6a:	f000 ffe3 	bl	8003b34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002b6e:	2100      	movs	r1, #0
 8002b70:	4804      	ldr	r0, [pc, #16]	; (8002b84 <MX_I2C2_Init+0x74>)
 8002b72:	f007 fd4f 	bl	800a614 <HAL_I2CEx_ConfigDigitalFilter>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8002b7c:	f000 ffda 	bl	8003b34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002b80:	bf00      	nop
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	200002b0 	.word	0x200002b0
 8002b88:	40005800 	.word	0x40005800
 8002b8c:	000186a0 	.word	0x000186a0

08002b90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b096      	sub	sp, #88	; 0x58
 8002b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	605a      	str	r2, [r3, #4]
 8002ba0:	609a      	str	r2, [r3, #8]
 8002ba2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ba4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	605a      	str	r2, [r3, #4]
 8002bb8:	609a      	str	r2, [r3, #8]
 8002bba:	60da      	str	r2, [r3, #12]
 8002bbc:	611a      	str	r2, [r3, #16]
 8002bbe:	615a      	str	r2, [r3, #20]
 8002bc0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002bc2:	1d3b      	adds	r3, r7, #4
 8002bc4:	2220      	movs	r2, #32
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f010 f83b 	bl	8012c44 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002bce:	4b50      	ldr	r3, [pc, #320]	; (8002d10 <MX_TIM1_Init+0x180>)
 8002bd0:	4a50      	ldr	r2, [pc, #320]	; (8002d14 <MX_TIM1_Init+0x184>)
 8002bd2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7-1;
 8002bd4:	4b4e      	ldr	r3, [pc, #312]	; (8002d10 <MX_TIM1_Init+0x180>)
 8002bd6:	2206      	movs	r2, #6
 8002bd8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bda:	4b4d      	ldr	r3, [pc, #308]	; (8002d10 <MX_TIM1_Init+0x180>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002be0:	4b4b      	ldr	r3, [pc, #300]	; (8002d10 <MX_TIM1_Init+0x180>)
 8002be2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002be6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002be8:	4b49      	ldr	r3, [pc, #292]	; (8002d10 <MX_TIM1_Init+0x180>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002bee:	4b48      	ldr	r3, [pc, #288]	; (8002d10 <MX_TIM1_Init+0x180>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002bf4:	4b46      	ldr	r3, [pc, #280]	; (8002d10 <MX_TIM1_Init+0x180>)
 8002bf6:	2280      	movs	r2, #128	; 0x80
 8002bf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002bfa:	4845      	ldr	r0, [pc, #276]	; (8002d10 <MX_TIM1_Init+0x180>)
 8002bfc:	f008 f9d4 	bl	800afa8 <HAL_TIM_Base_Init>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002c06:	f000 ff95 	bl	8003b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c0e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002c10:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c14:	4619      	mov	r1, r3
 8002c16:	483e      	ldr	r0, [pc, #248]	; (8002d10 <MX_TIM1_Init+0x180>)
 8002c18:	f008 fd5a 	bl	800b6d0 <HAL_TIM_ConfigClockSource>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002c22:	f000 ff87 	bl	8003b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002c26:	483a      	ldr	r0, [pc, #232]	; (8002d10 <MX_TIM1_Init+0x180>)
 8002c28:	f008 fa7e 	bl	800b128 <HAL_TIM_PWM_Init>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002c32:	f000 ff7f 	bl	8003b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c36:	2300      	movs	r3, #0
 8002c38:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002c3e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002c42:	4619      	mov	r1, r3
 8002c44:	4832      	ldr	r0, [pc, #200]	; (8002d10 <MX_TIM1_Init+0x180>)
 8002c46:	f009 f94f 	bl	800bee8 <HAL_TIMEx_MasterConfigSynchronization>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002c50:	f000 ff70 	bl	8003b34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c54:	2360      	movs	r3, #96	; 0x60
 8002c56:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002c60:	2300      	movs	r3, #0
 8002c62:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c64:	2300      	movs	r3, #0
 8002c66:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c74:	2200      	movs	r2, #0
 8002c76:	4619      	mov	r1, r3
 8002c78:	4825      	ldr	r0, [pc, #148]	; (8002d10 <MX_TIM1_Init+0x180>)
 8002c7a:	f008 fc67 	bl	800b54c <HAL_TIM_PWM_ConfigChannel>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002c84:	f000 ff56 	bl	8003b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c8c:	2204      	movs	r2, #4
 8002c8e:	4619      	mov	r1, r3
 8002c90:	481f      	ldr	r0, [pc, #124]	; (8002d10 <MX_TIM1_Init+0x180>)
 8002c92:	f008 fc5b 	bl	800b54c <HAL_TIM_PWM_ConfigChannel>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002c9c:	f000 ff4a 	bl	8003b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ca4:	2208      	movs	r2, #8
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4819      	ldr	r0, [pc, #100]	; (8002d10 <MX_TIM1_Init+0x180>)
 8002caa:	f008 fc4f 	bl	800b54c <HAL_TIM_PWM_ConfigChannel>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002cb4:	f000 ff3e 	bl	8003b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cbc:	220c      	movs	r2, #12
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4813      	ldr	r0, [pc, #76]	; (8002d10 <MX_TIM1_Init+0x180>)
 8002cc2:	f008 fc43 	bl	800b54c <HAL_TIM_PWM_ConfigChannel>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002ccc:	f000 ff32 	bl	8003b34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ce4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ce8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002cea:	2300      	movs	r3, #0
 8002cec:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002cee:	1d3b      	adds	r3, r7, #4
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4807      	ldr	r0, [pc, #28]	; (8002d10 <MX_TIM1_Init+0x180>)
 8002cf4:	f009 f974 	bl	800bfe0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8002cfe:	f000 ff19 	bl	8003b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002d02:	4803      	ldr	r0, [pc, #12]	; (8002d10 <MX_TIM1_Init+0x180>)
 8002d04:	f005 f974 	bl	8007ff0 <HAL_TIM_MspPostInit>

}
 8002d08:	bf00      	nop
 8002d0a:	3758      	adds	r7, #88	; 0x58
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	200003c4 	.word	0x200003c4
 8002d14:	40010000 	.word	0x40010000

08002d18 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b08e      	sub	sp, #56	; 0x38
 8002d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	605a      	str	r2, [r3, #4]
 8002d28:	609a      	str	r2, [r3, #8]
 8002d2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d2c:	f107 0320 	add.w	r3, r7, #32
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d36:	1d3b      	adds	r3, r7, #4
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	605a      	str	r2, [r3, #4]
 8002d3e:	609a      	str	r2, [r3, #8]
 8002d40:	60da      	str	r2, [r3, #12]
 8002d42:	611a      	str	r2, [r3, #16]
 8002d44:	615a      	str	r2, [r3, #20]
 8002d46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d48:	4b3d      	ldr	r3, [pc, #244]	; (8002e40 <MX_TIM3_Init+0x128>)
 8002d4a:	4a3e      	ldr	r2, [pc, #248]	; (8002e44 <MX_TIM3_Init+0x12c>)
 8002d4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4-1;
 8002d4e:	4b3c      	ldr	r3, [pc, #240]	; (8002e40 <MX_TIM3_Init+0x128>)
 8002d50:	2203      	movs	r2, #3
 8002d52:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d54:	4b3a      	ldr	r3, [pc, #232]	; (8002e40 <MX_TIM3_Init+0x128>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8002d5a:	4b39      	ldr	r3, [pc, #228]	; (8002e40 <MX_TIM3_Init+0x128>)
 8002d5c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d60:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d62:	4b37      	ldr	r3, [pc, #220]	; (8002e40 <MX_TIM3_Init+0x128>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d68:	4b35      	ldr	r3, [pc, #212]	; (8002e40 <MX_TIM3_Init+0x128>)
 8002d6a:	2280      	movs	r2, #128	; 0x80
 8002d6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d6e:	4834      	ldr	r0, [pc, #208]	; (8002e40 <MX_TIM3_Init+0x128>)
 8002d70:	f008 f91a 	bl	800afa8 <HAL_TIM_Base_Init>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002d7a:	f000 fedb 	bl	8003b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d82:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d88:	4619      	mov	r1, r3
 8002d8a:	482d      	ldr	r0, [pc, #180]	; (8002e40 <MX_TIM3_Init+0x128>)
 8002d8c:	f008 fca0 	bl	800b6d0 <HAL_TIM_ConfigClockSource>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002d96:	f000 fecd 	bl	8003b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002d9a:	4829      	ldr	r0, [pc, #164]	; (8002e40 <MX_TIM3_Init+0x128>)
 8002d9c:	f008 f9c4 	bl	800b128 <HAL_TIM_PWM_Init>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002da6:	f000 fec5 	bl	8003b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002daa:	2300      	movs	r3, #0
 8002dac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dae:	2300      	movs	r3, #0
 8002db0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002db2:	f107 0320 	add.w	r3, r7, #32
 8002db6:	4619      	mov	r1, r3
 8002db8:	4821      	ldr	r0, [pc, #132]	; (8002e40 <MX_TIM3_Init+0x128>)
 8002dba:	f009 f895 	bl	800bee8 <HAL_TIMEx_MasterConfigSynchronization>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002dc4:	f000 feb6 	bl	8003b34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002dc8:	2360      	movs	r3, #96	; 0x60
 8002dca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002dd8:	1d3b      	adds	r3, r7, #4
 8002dda:	2200      	movs	r2, #0
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4818      	ldr	r0, [pc, #96]	; (8002e40 <MX_TIM3_Init+0x128>)
 8002de0:	f008 fbb4 	bl	800b54c <HAL_TIM_PWM_ConfigChannel>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002dea:	f000 fea3 	bl	8003b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002dee:	1d3b      	adds	r3, r7, #4
 8002df0:	2204      	movs	r2, #4
 8002df2:	4619      	mov	r1, r3
 8002df4:	4812      	ldr	r0, [pc, #72]	; (8002e40 <MX_TIM3_Init+0x128>)
 8002df6:	f008 fba9 	bl	800b54c <HAL_TIM_PWM_ConfigChannel>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002e00:	f000 fe98 	bl	8003b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e04:	1d3b      	adds	r3, r7, #4
 8002e06:	2208      	movs	r2, #8
 8002e08:	4619      	mov	r1, r3
 8002e0a:	480d      	ldr	r0, [pc, #52]	; (8002e40 <MX_TIM3_Init+0x128>)
 8002e0c:	f008 fb9e 	bl	800b54c <HAL_TIM_PWM_ConfigChannel>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8002e16:	f000 fe8d 	bl	8003b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002e1a:	1d3b      	adds	r3, r7, #4
 8002e1c:	220c      	movs	r2, #12
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4807      	ldr	r0, [pc, #28]	; (8002e40 <MX_TIM3_Init+0x128>)
 8002e22:	f008 fb93 	bl	800b54c <HAL_TIM_PWM_ConfigChannel>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8002e2c:	f000 fe82 	bl	8003b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002e30:	4803      	ldr	r0, [pc, #12]	; (8002e40 <MX_TIM3_Init+0x128>)
 8002e32:	f005 f8dd 	bl	8007ff0 <HAL_TIM_MspPostInit>

}
 8002e36:	bf00      	nop
 8002e38:	3738      	adds	r7, #56	; 0x38
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	2000040c 	.word	0x2000040c
 8002e44:	40000400 	.word	0x40000400

08002e48 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002e4c:	4b0e      	ldr	r3, [pc, #56]	; (8002e88 <MX_TIM13_Init+0x40>)
 8002e4e:	4a0f      	ldr	r2, [pc, #60]	; (8002e8c <MX_TIM13_Init+0x44>)
 8002e50:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 13;
 8002e52:	4b0d      	ldr	r3, [pc, #52]	; (8002e88 <MX_TIM13_Init+0x40>)
 8002e54:	220d      	movs	r2, #13
 8002e56:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e58:	4b0b      	ldr	r3, [pc, #44]	; (8002e88 <MX_TIM13_Init+0x40>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 59999;
 8002e5e:	4b0a      	ldr	r3, [pc, #40]	; (8002e88 <MX_TIM13_Init+0x40>)
 8002e60:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8002e64:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e66:	4b08      	ldr	r3, [pc, #32]	; (8002e88 <MX_TIM13_Init+0x40>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e6c:	4b06      	ldr	r3, [pc, #24]	; (8002e88 <MX_TIM13_Init+0x40>)
 8002e6e:	2280      	movs	r2, #128	; 0x80
 8002e70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002e72:	4805      	ldr	r0, [pc, #20]	; (8002e88 <MX_TIM13_Init+0x40>)
 8002e74:	f008 f898 	bl	800afa8 <HAL_TIM_Base_Init>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8002e7e:	f000 fe59 	bl	8003b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002e82:	bf00      	nop
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	20000454 	.word	0x20000454
 8002e8c:	40001c00 	.word	0x40001c00

08002e90 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002e94:	4b11      	ldr	r3, [pc, #68]	; (8002edc <MX_USART3_UART_Init+0x4c>)
 8002e96:	4a12      	ldr	r2, [pc, #72]	; (8002ee0 <MX_USART3_UART_Init+0x50>)
 8002e98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002e9a:	4b10      	ldr	r3, [pc, #64]	; (8002edc <MX_USART3_UART_Init+0x4c>)
 8002e9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ea0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002ea2:	4b0e      	ldr	r3, [pc, #56]	; (8002edc <MX_USART3_UART_Init+0x4c>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002ea8:	4b0c      	ldr	r3, [pc, #48]	; (8002edc <MX_USART3_UART_Init+0x4c>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002eae:	4b0b      	ldr	r3, [pc, #44]	; (8002edc <MX_USART3_UART_Init+0x4c>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002eb4:	4b09      	ldr	r3, [pc, #36]	; (8002edc <MX_USART3_UART_Init+0x4c>)
 8002eb6:	220c      	movs	r2, #12
 8002eb8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eba:	4b08      	ldr	r3, [pc, #32]	; (8002edc <MX_USART3_UART_Init+0x4c>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ec0:	4b06      	ldr	r3, [pc, #24]	; (8002edc <MX_USART3_UART_Init+0x4c>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002ec6:	4805      	ldr	r0, [pc, #20]	; (8002edc <MX_USART3_UART_Init+0x4c>)
 8002ec8:	f009 f8f0 	bl	800c0ac <HAL_UART_Init>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002ed2:	f000 fe2f 	bl	8003b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ed6:	bf00      	nop
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	2000049c 	.word	0x2000049c
 8002ee0:	40004800 	.word	0x40004800

08002ee4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002eea:	2300      	movs	r3, #0
 8002eec:	607b      	str	r3, [r7, #4]
 8002eee:	4b18      	ldr	r3, [pc, #96]	; (8002f50 <MX_DMA_Init+0x6c>)
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	4a17      	ldr	r2, [pc, #92]	; (8002f50 <MX_DMA_Init+0x6c>)
 8002ef4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8002efa:	4b15      	ldr	r3, [pc, #84]	; (8002f50 <MX_DMA_Init+0x6c>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f02:	607b      	str	r3, [r7, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002f06:	2200      	movs	r2, #0
 8002f08:	2105      	movs	r1, #5
 8002f0a:	200b      	movs	r0, #11
 8002f0c:	f005 fd10 	bl	8008930 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002f10:	200b      	movs	r0, #11
 8002f12:	f005 fd29 	bl	8008968 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002f16:	2200      	movs	r2, #0
 8002f18:	2105      	movs	r1, #5
 8002f1a:	200c      	movs	r0, #12
 8002f1c:	f005 fd08 	bl	8008930 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002f20:	200c      	movs	r0, #12
 8002f22:	f005 fd21 	bl	8008968 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8002f26:	2200      	movs	r2, #0
 8002f28:	2105      	movs	r1, #5
 8002f2a:	200e      	movs	r0, #14
 8002f2c:	f005 fd00 	bl	8008930 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002f30:	200e      	movs	r0, #14
 8002f32:	f005 fd19 	bl	8008968 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8002f36:	2200      	movs	r2, #0
 8002f38:	2105      	movs	r1, #5
 8002f3a:	2011      	movs	r0, #17
 8002f3c:	f005 fcf8 	bl	8008930 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002f40:	2011      	movs	r0, #17
 8002f42:	f005 fd11 	bl	8008968 <HAL_NVIC_EnableIRQ>

}
 8002f46:	bf00      	nop
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	40023800 	.word	0x40023800

08002f54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b08e      	sub	sp, #56	; 0x38
 8002f58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f5e:	2200      	movs	r2, #0
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	605a      	str	r2, [r3, #4]
 8002f64:	609a      	str	r2, [r3, #8]
 8002f66:	60da      	str	r2, [r3, #12]
 8002f68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	623b      	str	r3, [r7, #32]
 8002f6e:	4b6d      	ldr	r3, [pc, #436]	; (8003124 <MX_GPIO_Init+0x1d0>)
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	4a6c      	ldr	r2, [pc, #432]	; (8003124 <MX_GPIO_Init+0x1d0>)
 8002f74:	f043 0304 	orr.w	r3, r3, #4
 8002f78:	6313      	str	r3, [r2, #48]	; 0x30
 8002f7a:	4b6a      	ldr	r3, [pc, #424]	; (8003124 <MX_GPIO_Init+0x1d0>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7e:	f003 0304 	and.w	r3, r3, #4
 8002f82:	623b      	str	r3, [r7, #32]
 8002f84:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	61fb      	str	r3, [r7, #28]
 8002f8a:	4b66      	ldr	r3, [pc, #408]	; (8003124 <MX_GPIO_Init+0x1d0>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	4a65      	ldr	r2, [pc, #404]	; (8003124 <MX_GPIO_Init+0x1d0>)
 8002f90:	f043 0320 	orr.w	r3, r3, #32
 8002f94:	6313      	str	r3, [r2, #48]	; 0x30
 8002f96:	4b63      	ldr	r3, [pc, #396]	; (8003124 <MX_GPIO_Init+0x1d0>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	f003 0320 	and.w	r3, r3, #32
 8002f9e:	61fb      	str	r3, [r7, #28]
 8002fa0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	61bb      	str	r3, [r7, #24]
 8002fa6:	4b5f      	ldr	r3, [pc, #380]	; (8003124 <MX_GPIO_Init+0x1d0>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	4a5e      	ldr	r2, [pc, #376]	; (8003124 <MX_GPIO_Init+0x1d0>)
 8002fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb2:	4b5c      	ldr	r3, [pc, #368]	; (8003124 <MX_GPIO_Init+0x1d0>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fba:	61bb      	str	r3, [r7, #24]
 8002fbc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	617b      	str	r3, [r7, #20]
 8002fc2:	4b58      	ldr	r3, [pc, #352]	; (8003124 <MX_GPIO_Init+0x1d0>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	4a57      	ldr	r2, [pc, #348]	; (8003124 <MX_GPIO_Init+0x1d0>)
 8002fc8:	f043 0301 	orr.w	r3, r3, #1
 8002fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002fce:	4b55      	ldr	r3, [pc, #340]	; (8003124 <MX_GPIO_Init+0x1d0>)
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	617b      	str	r3, [r7, #20]
 8002fd8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fda:	2300      	movs	r3, #0
 8002fdc:	613b      	str	r3, [r7, #16]
 8002fde:	4b51      	ldr	r3, [pc, #324]	; (8003124 <MX_GPIO_Init+0x1d0>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	4a50      	ldr	r2, [pc, #320]	; (8003124 <MX_GPIO_Init+0x1d0>)
 8002fe4:	f043 0302 	orr.w	r3, r3, #2
 8002fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fea:	4b4e      	ldr	r3, [pc, #312]	; (8003124 <MX_GPIO_Init+0x1d0>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	613b      	str	r3, [r7, #16]
 8002ff4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60fb      	str	r3, [r7, #12]
 8002ffa:	4b4a      	ldr	r3, [pc, #296]	; (8003124 <MX_GPIO_Init+0x1d0>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	4a49      	ldr	r2, [pc, #292]	; (8003124 <MX_GPIO_Init+0x1d0>)
 8003000:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003004:	6313      	str	r3, [r2, #48]	; 0x30
 8003006:	4b47      	ldr	r3, [pc, #284]	; (8003124 <MX_GPIO_Init+0x1d0>)
 8003008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300e:	60fb      	str	r3, [r7, #12]
 8003010:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003012:	2300      	movs	r3, #0
 8003014:	60bb      	str	r3, [r7, #8]
 8003016:	4b43      	ldr	r3, [pc, #268]	; (8003124 <MX_GPIO_Init+0x1d0>)
 8003018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301a:	4a42      	ldr	r2, [pc, #264]	; (8003124 <MX_GPIO_Init+0x1d0>)
 800301c:	f043 0310 	orr.w	r3, r3, #16
 8003020:	6313      	str	r3, [r2, #48]	; 0x30
 8003022:	4b40      	ldr	r3, [pc, #256]	; (8003124 <MX_GPIO_Init+0x1d0>)
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	f003 0310 	and.w	r3, r3, #16
 800302a:	60bb      	str	r3, [r7, #8]
 800302c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800302e:	2300      	movs	r3, #0
 8003030:	607b      	str	r3, [r7, #4]
 8003032:	4b3c      	ldr	r3, [pc, #240]	; (8003124 <MX_GPIO_Init+0x1d0>)
 8003034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003036:	4a3b      	ldr	r2, [pc, #236]	; (8003124 <MX_GPIO_Init+0x1d0>)
 8003038:	f043 0308 	orr.w	r3, r3, #8
 800303c:	6313      	str	r3, [r2, #48]	; 0x30
 800303e:	4b39      	ldr	r3, [pc, #228]	; (8003124 <MX_GPIO_Init+0x1d0>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	f003 0308 	and.w	r3, r3, #8
 8003046:	607b      	str	r3, [r7, #4]
 8003048:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ENB2_Pin|ENB3_Pin|ENB4_Pin, GPIO_PIN_RESET);
 800304a:	2200      	movs	r2, #0
 800304c:	f241 4102 	movw	r1, #5122	; 0x1402
 8003050:	4835      	ldr	r0, [pc, #212]	; (8003128 <MX_GPIO_Init+0x1d4>)
 8003052:	f006 fa5d 	bl	8009510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_RED_GPIO_Port, LD_RED_Pin, GPIO_PIN_RESET);
 8003056:	2200      	movs	r2, #0
 8003058:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800305c:	4833      	ldr	r0, [pc, #204]	; (800312c <MX_GPIO_Init+0x1d8>)
 800305e:	f006 fa57 	bl	8009510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENB1_GPIO_Port, ENB1_Pin, GPIO_PIN_RESET);
 8003062:	2200      	movs	r2, #0
 8003064:	2101      	movs	r1, #1
 8003066:	4832      	ldr	r0, [pc, #200]	; (8003130 <MX_GPIO_Init+0x1dc>)
 8003068:	f006 fa52 	bl	8009510 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENC_EXT3_B_Pin ENC_EXT1_A_Pin ENC_EXT2_A_Pin ENC_EXT3_A_Pin
                           ENC_EXT2_B_Pin */
  GPIO_InitStruct.Pin = ENC_EXT3_B_Pin|ENC_EXT1_A_Pin|ENC_EXT2_A_Pin|ENC_EXT3_A_Pin
 800306c:	f64b 0308 	movw	r3, #47112	; 0xb808
 8003070:	627b      	str	r3, [r7, #36]	; 0x24
                          |ENC_EXT2_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003072:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003076:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003078:	2301      	movs	r3, #1
 800307a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800307c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003080:	4619      	mov	r1, r3
 8003082:	482c      	ldr	r0, [pc, #176]	; (8003134 <MX_GPIO_Init+0x1e0>)
 8003084:	f006 f880 	bl	8009188 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENB2_Pin ENB3_Pin ENB4_Pin */
  GPIO_InitStruct.Pin = ENB2_Pin|ENB3_Pin|ENB4_Pin;
 8003088:	f241 4302 	movw	r3, #5122	; 0x1402
 800308c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800308e:	2301      	movs	r3, #1
 8003090:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003092:	2300      	movs	r3, #0
 8003094:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003096:	2300      	movs	r3, #0
 8003098:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800309a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800309e:	4619      	mov	r1, r3
 80030a0:	4821      	ldr	r0, [pc, #132]	; (8003128 <MX_GPIO_Init+0x1d4>)
 80030a2:	f006 f871 	bl	8009188 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_RED_Pin */
  GPIO_InitStruct.Pin = LD_RED_Pin;
 80030a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80030aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030ac:	2301      	movs	r3, #1
 80030ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b0:	2300      	movs	r3, #0
 80030b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b4:	2300      	movs	r3, #0
 80030b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD_RED_GPIO_Port, &GPIO_InitStruct);
 80030b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030bc:	4619      	mov	r1, r3
 80030be:	481b      	ldr	r0, [pc, #108]	; (800312c <MX_GPIO_Init+0x1d8>)
 80030c0:	f006 f862 	bl	8009188 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENB1_Pin */
  GPIO_InitStruct.Pin = ENB1_Pin;
 80030c4:	2301      	movs	r3, #1
 80030c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030c8:	2301      	movs	r3, #1
 80030ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030cc:	2300      	movs	r3, #0
 80030ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d0:	2300      	movs	r3, #0
 80030d2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ENB1_GPIO_Port, &GPIO_InitStruct);
 80030d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030d8:	4619      	mov	r1, r3
 80030da:	4815      	ldr	r0, [pc, #84]	; (8003130 <MX_GPIO_Init+0x1dc>)
 80030dc:	f006 f854 	bl	8009188 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_EXT1_B_Pin */
  GPIO_InitStruct.Pin = ENC_EXT1_B_Pin;
 80030e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80030e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80030e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80030ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030ec:	2301      	movs	r3, #1
 80030ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENC_EXT1_B_GPIO_Port, &GPIO_InitStruct);
 80030f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030f4:	4619      	mov	r1, r3
 80030f6:	480c      	ldr	r0, [pc, #48]	; (8003128 <MX_GPIO_Init+0x1d4>)
 80030f8:	f006 f846 	bl	8009188 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80030fc:	2200      	movs	r2, #0
 80030fe:	2105      	movs	r1, #5
 8003100:	2009      	movs	r0, #9
 8003102:	f005 fc15 	bl	8008930 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003106:	2009      	movs	r0, #9
 8003108:	f005 fc2e 	bl	8008968 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800310c:	2200      	movs	r2, #0
 800310e:	2105      	movs	r1, #5
 8003110:	2028      	movs	r0, #40	; 0x28
 8003112:	f005 fc0d 	bl	8008930 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003116:	2028      	movs	r0, #40	; 0x28
 8003118:	f005 fc26 	bl	8008968 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800311c:	bf00      	nop
 800311e:	3738      	adds	r7, #56	; 0x38
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40023800 	.word	0x40023800
 8003128:	40021800 	.word	0x40021800
 800312c:	40020400 	.word	0x40020400
 8003130:	40020c00 	.word	0x40020c00
 8003134:	40021400 	.word	0x40021400

08003138 <imuCallback>:

/* USER CODE BEGIN 4 */

int imuCallback(int degree) {
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
	int theta = 0;
 8003140:	2300      	movs	r3, #0
 8003142:	60fb      	str	r3, [r7, #12]
	int z = degree;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	60bb      	str	r3, [r7, #8]
	if (z > 180)
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2bb4      	cmp	r3, #180	; 0xb4
 800314c:	dd03      	ble.n	8003156 <imuCallback+0x1e>
		z -= 360;
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003154:	60bb      	str	r3, [r7, #8]
	if (yawRef > 180)
 8003156:	4b13      	ldr	r3, [pc, #76]	; (80031a4 <imuCallback+0x6c>)
 8003158:	f9b3 3000 	ldrsh.w	r3, [r3]
 800315c:	2bb4      	cmp	r3, #180	; 0xb4
 800315e:	dd02      	ble.n	8003166 <imuCallback+0x2e>
		yawRef -= yawRef;
 8003160:	4b10      	ldr	r3, [pc, #64]	; (80031a4 <imuCallback+0x6c>)
 8003162:	2200      	movs	r2, #0
 8003164:	801a      	strh	r2, [r3, #0]
	theta = -z + yawRef;
 8003166:	4b0f      	ldr	r3, [pc, #60]	; (80031a4 <imuCallback+0x6c>)
 8003168:	f9b3 3000 	ldrsh.w	r3, [r3]
 800316c:	461a      	mov	r2, r3
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	60fb      	str	r3, [r7, #12]
	if (theta < -180)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 800317a:	da04      	bge.n	8003186 <imuCallback+0x4e>
		theta += 360;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	e006      	b.n	8003194 <imuCallback+0x5c>
	else if (theta > 180)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2bb4      	cmp	r3, #180	; 0xb4
 800318a:	dd03      	ble.n	8003194 <imuCallback+0x5c>
		theta -= 360;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003192:	60fb      	str	r3, [r7, #12]

	return theta;
 8003194:	68fb      	ldr	r3, [r7, #12]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	20000a5c 	.word	0x20000a5c

080031a8 <initializeMotor>:

void initializeMotor() {
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80031ac:	2100      	movs	r1, #0
 80031ae:	481b      	ldr	r0, [pc, #108]	; (800321c <initializeMotor+0x74>)
 80031b0:	f008 f814 	bl	800b1dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80031b4:	2104      	movs	r1, #4
 80031b6:	4819      	ldr	r0, [pc, #100]	; (800321c <initializeMotor+0x74>)
 80031b8:	f008 f810 	bl	800b1dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80031bc:	2108      	movs	r1, #8
 80031be:	4817      	ldr	r0, [pc, #92]	; (800321c <initializeMotor+0x74>)
 80031c0:	f008 f80c 	bl	800b1dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80031c4:	210c      	movs	r1, #12
 80031c6:	4815      	ldr	r0, [pc, #84]	; (800321c <initializeMotor+0x74>)
 80031c8:	f008 f808 	bl	800b1dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80031cc:	2100      	movs	r1, #0
 80031ce:	4814      	ldr	r0, [pc, #80]	; (8003220 <initializeMotor+0x78>)
 80031d0:	f008 f804 	bl	800b1dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80031d4:	2104      	movs	r1, #4
 80031d6:	4812      	ldr	r0, [pc, #72]	; (8003220 <initializeMotor+0x78>)
 80031d8:	f008 f800 	bl	800b1dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80031dc:	2108      	movs	r1, #8
 80031de:	4810      	ldr	r0, [pc, #64]	; (8003220 <initializeMotor+0x78>)
 80031e0:	f007 fffc 	bl	800b1dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80031e4:	210c      	movs	r1, #12
 80031e6:	480e      	ldr	r0, [pc, #56]	; (8003220 <initializeMotor+0x78>)
 80031e8:	f007 fff8 	bl	800b1dc <HAL_TIM_PWM_Start>

	HAL_GPIO_WritePin(ENB1_GPIO_Port, ENB1_Pin, GPIO_PIN_SET);
 80031ec:	2201      	movs	r2, #1
 80031ee:	2101      	movs	r1, #1
 80031f0:	480c      	ldr	r0, [pc, #48]	; (8003224 <initializeMotor+0x7c>)
 80031f2:	f006 f98d 	bl	8009510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENB2_GPIO_Port, ENB2_Pin, GPIO_PIN_SET);
 80031f6:	2201      	movs	r2, #1
 80031f8:	2102      	movs	r1, #2
 80031fa:	480b      	ldr	r0, [pc, #44]	; (8003228 <initializeMotor+0x80>)
 80031fc:	f006 f988 	bl	8009510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENB3_GPIO_Port, ENB3_Pin, GPIO_PIN_SET);
 8003200:	2201      	movs	r2, #1
 8003202:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003206:	4808      	ldr	r0, [pc, #32]	; (8003228 <initializeMotor+0x80>)
 8003208:	f006 f982 	bl	8009510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENB4_GPIO_Port, ENB4_Pin, GPIO_PIN_SET);
 800320c:	2201      	movs	r2, #1
 800320e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003212:	4805      	ldr	r0, [pc, #20]	; (8003228 <initializeMotor+0x80>)
 8003214:	f006 f97c 	bl	8009510 <HAL_GPIO_WritePin>
}
 8003218:	bf00      	nop
 800321a:	bd80      	pop	{r7, pc}
 800321c:	200003c4 	.word	0x200003c4
 8003220:	2000040c 	.word	0x2000040c
 8003224:	40020c00 	.word	0x40020c00
 8003228:	40021800 	.word	0x40021800

0800322c <setPwm>:

void setPwm(uint8_t Motor, int pwm) {
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	4603      	mov	r3, r0
 8003234:	6039      	str	r1, [r7, #0]
 8003236:	71fb      	strb	r3, [r7, #7]
	switch (Motor) {
 8003238:	79fb      	ldrb	r3, [r7, #7]
 800323a:	2b03      	cmp	r3, #3
 800323c:	f200 8088 	bhi.w	8003350 <setPwm+0x124>
 8003240:	a201      	add	r2, pc, #4	; (adr r2, 8003248 <setPwm+0x1c>)
 8003242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003246:	bf00      	nop
 8003248:	08003259 	.word	0x08003259
 800324c:	08003297 	.word	0x08003297
 8003250:	080032d5 	.word	0x080032d5
 8003254:	08003313 	.word	0x08003313
	case 0: // LEFT FRONT
		if (pwm > 0) {
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	dd06      	ble.n	800326c <setPwm+0x40>
			TIM3->CCR1 = pwm;
 800325e:	4a4c      	ldr	r2, [pc, #304]	; (8003390 <setPwm+0x164>)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	6353      	str	r3, [r2, #52]	; 0x34
			TIM3->CCR4 = 0;
 8003264:	4b4a      	ldr	r3, [pc, #296]	; (8003390 <setPwm+0x164>)
 8003266:	2200      	movs	r2, #0
 8003268:	641a      	str	r2, [r3, #64]	; 0x40
			TIM3->CCR4 = abs(pwm);
		} else {
			TIM3->CCR1 = 0;
			TIM3->CCR4 = 0;
		}
		break;
 800326a:	e08a      	b.n	8003382 <setPwm+0x156>
		} else if (pwm < 0) {
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	da0a      	bge.n	8003288 <setPwm+0x5c>
			TIM3->CCR1 = 0;
 8003272:	4b47      	ldr	r3, [pc, #284]	; (8003390 <setPwm+0x164>)
 8003274:	2200      	movs	r2, #0
 8003276:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR4 = abs(pwm);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800327e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003282:	4b43      	ldr	r3, [pc, #268]	; (8003390 <setPwm+0x164>)
 8003284:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8003286:	e07c      	b.n	8003382 <setPwm+0x156>
			TIM3->CCR1 = 0;
 8003288:	4b41      	ldr	r3, [pc, #260]	; (8003390 <setPwm+0x164>)
 800328a:	2200      	movs	r2, #0
 800328c:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR4 = 0;
 800328e:	4b40      	ldr	r3, [pc, #256]	; (8003390 <setPwm+0x164>)
 8003290:	2200      	movs	r2, #0
 8003292:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8003294:	e075      	b.n	8003382 <setPwm+0x156>
	case 1: // LEFT BACK
		if (pwm > 0) {
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	dd06      	ble.n	80032aa <setPwm+0x7e>
			TIM1->CCR1 = pwm;
 800329c:	4a3d      	ldr	r2, [pc, #244]	; (8003394 <setPwm+0x168>)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	6353      	str	r3, [r2, #52]	; 0x34
			TIM1->CCR2 = 0;
 80032a2:	4b3c      	ldr	r3, [pc, #240]	; (8003394 <setPwm+0x168>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	639a      	str	r2, [r3, #56]	; 0x38
		} else {
			TIM1->CCR1 = 0;
			TIM1->CCR2 = 0;
		}

		break;
 80032a8:	e06b      	b.n	8003382 <setPwm+0x156>
		} else if (pwm < 0) {
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	da0a      	bge.n	80032c6 <setPwm+0x9a>
			TIM1->CCR1 = 0;
 80032b0:	4b38      	ldr	r3, [pc, #224]	; (8003394 <setPwm+0x168>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = abs(pwm);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80032bc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80032c0:	4b34      	ldr	r3, [pc, #208]	; (8003394 <setPwm+0x168>)
 80032c2:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 80032c4:	e05d      	b.n	8003382 <setPwm+0x156>
			TIM1->CCR1 = 0;
 80032c6:	4b33      	ldr	r3, [pc, #204]	; (8003394 <setPwm+0x168>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = 0;
 80032cc:	4b31      	ldr	r3, [pc, #196]	; (8003394 <setPwm+0x168>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 80032d2:	e056      	b.n	8003382 <setPwm+0x156>
	case 2: // RIGHT BACK
		if (pwm > 0) {
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	dd06      	ble.n	80032e8 <setPwm+0xbc>
			TIM1->CCR3 = 0;
 80032da:	4b2e      	ldr	r3, [pc, #184]	; (8003394 <setPwm+0x168>)
 80032dc:	2200      	movs	r2, #0
 80032de:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM1->CCR4 = pwm;
 80032e0:	4a2c      	ldr	r2, [pc, #176]	; (8003394 <setPwm+0x168>)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	6413      	str	r3, [r2, #64]	; 0x40
		} else {
			TIM1->CCR3 = 0;
			TIM1->CCR4 = 0;
		}

		break;
 80032e6:	e04c      	b.n	8003382 <setPwm+0x156>
		} else if (pwm < 0) {
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	da0a      	bge.n	8003304 <setPwm+0xd8>
			TIM1->CCR3 = abs(pwm);
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80032f4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80032f8:	4b26      	ldr	r3, [pc, #152]	; (8003394 <setPwm+0x168>)
 80032fa:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM1->CCR4 = 0;
 80032fc:	4b25      	ldr	r3, [pc, #148]	; (8003394 <setPwm+0x168>)
 80032fe:	2200      	movs	r2, #0
 8003300:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8003302:	e03e      	b.n	8003382 <setPwm+0x156>
			TIM1->CCR3 = 0;
 8003304:	4b23      	ldr	r3, [pc, #140]	; (8003394 <setPwm+0x168>)
 8003306:	2200      	movs	r2, #0
 8003308:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM1->CCR4 = 0;
 800330a:	4b22      	ldr	r3, [pc, #136]	; (8003394 <setPwm+0x168>)
 800330c:	2200      	movs	r2, #0
 800330e:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8003310:	e037      	b.n	8003382 <setPwm+0x156>
	case 3: // RIGHT FRONT
		if (pwm > 0) {
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	dd06      	ble.n	8003326 <setPwm+0xfa>
			TIM3->CCR2 = pwm;
 8003318:	4a1d      	ldr	r2, [pc, #116]	; (8003390 <setPwm+0x164>)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	6393      	str	r3, [r2, #56]	; 0x38
			TIM3->CCR3 = 0;
 800331e:	4b1c      	ldr	r3, [pc, #112]	; (8003390 <setPwm+0x164>)
 8003320:	2200      	movs	r2, #0
 8003322:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM3->CCR3 = abs(pwm);
		} else {
			TIM3->CCR2 = 0;
			TIM3->CCR3 = 0;
		}
		break;
 8003324:	e02d      	b.n	8003382 <setPwm+0x156>
		} else if (pwm < 0) {
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	da0a      	bge.n	8003342 <setPwm+0x116>
			TIM3->CCR2 = 0;
 800332c:	4b18      	ldr	r3, [pc, #96]	; (8003390 <setPwm+0x164>)
 800332e:	2200      	movs	r2, #0
 8003330:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3->CCR3 = abs(pwm);
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003338:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800333c:	4b14      	ldr	r3, [pc, #80]	; (8003390 <setPwm+0x164>)
 800333e:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8003340:	e01f      	b.n	8003382 <setPwm+0x156>
			TIM3->CCR2 = 0;
 8003342:	4b13      	ldr	r3, [pc, #76]	; (8003390 <setPwm+0x164>)
 8003344:	2200      	movs	r2, #0
 8003346:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3->CCR3 = 0;
 8003348:	4b11      	ldr	r3, [pc, #68]	; (8003390 <setPwm+0x164>)
 800334a:	2200      	movs	r2, #0
 800334c:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 800334e:	e018      	b.n	8003382 <setPwm+0x156>

	default:
		TIM1->CCR1 = 0;
 8003350:	4b10      	ldr	r3, [pc, #64]	; (8003394 <setPwm+0x168>)
 8003352:	2200      	movs	r2, #0
 8003354:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8003356:	4b0f      	ldr	r3, [pc, #60]	; (8003394 <setPwm+0x168>)
 8003358:	2200      	movs	r2, #0
 800335a:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 800335c:	4b0d      	ldr	r3, [pc, #52]	; (8003394 <setPwm+0x168>)
 800335e:	2200      	movs	r2, #0
 8003360:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR4 = 0;
 8003362:	4b0c      	ldr	r3, [pc, #48]	; (8003394 <setPwm+0x168>)
 8003364:	2200      	movs	r2, #0
 8003366:	641a      	str	r2, [r3, #64]	; 0x40
		TIM3->CCR1 = 0;
 8003368:	4b09      	ldr	r3, [pc, #36]	; (8003390 <setPwm+0x164>)
 800336a:	2200      	movs	r2, #0
 800336c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = 0;
 800336e:	4b08      	ldr	r3, [pc, #32]	; (8003390 <setPwm+0x164>)
 8003370:	2200      	movs	r2, #0
 8003372:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = 0;
 8003374:	4b06      	ldr	r3, [pc, #24]	; (8003390 <setPwm+0x164>)
 8003376:	2200      	movs	r2, #0
 8003378:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM3->CCR4 = 0;
 800337a:	4b05      	ldr	r3, [pc, #20]	; (8003390 <setPwm+0x164>)
 800337c:	2200      	movs	r2, #0
 800337e:	641a      	str	r2, [r3, #64]	; 0x40
	}
}
 8003380:	bf00      	nop
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	40000400 	.word	0x40000400
 8003394:	40010000 	.word	0x40010000

08003398 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	80fb      	strh	r3, [r7, #6]
	//Encoder External 1
	if (GPIO_Pin == ENC_EXT1_A_Pin) {
 80033a2:	88fb      	ldrh	r3, [r7, #6]
 80033a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033a8:	d152      	bne.n	8003450 <HAL_GPIO_EXTI_Callback+0xb8>
		if ((ENC1B_HIGH && ENC1A_LOW) || (ENC1B_LOW && ENC1A_HIGH)) {
 80033aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80033ae:	4896      	ldr	r0, [pc, #600]	; (8003608 <HAL_GPIO_EXTI_Callback+0x270>)
 80033b0:	f006 f896 	bl	80094e0 <HAL_GPIO_ReadPin>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d107      	bne.n	80033ca <HAL_GPIO_EXTI_Callback+0x32>
 80033ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80033be:	4893      	ldr	r0, [pc, #588]	; (800360c <HAL_GPIO_EXTI_Callback+0x274>)
 80033c0:	f006 f88e 	bl	80094e0 <HAL_GPIO_ReadPin>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00f      	beq.n	80033ea <HAL_GPIO_EXTI_Callback+0x52>
 80033ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80033ce:	488e      	ldr	r0, [pc, #568]	; (8003608 <HAL_GPIO_EXTI_Callback+0x270>)
 80033d0:	f006 f886 	bl	80094e0 <HAL_GPIO_ReadPin>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d111      	bne.n	80033fe <HAL_GPIO_EXTI_Callback+0x66>
 80033da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80033de:	488b      	ldr	r0, [pc, #556]	; (800360c <HAL_GPIO_EXTI_Callback+0x274>)
 80033e0:	f006 f87e 	bl	80094e0 <HAL_GPIO_ReadPin>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d109      	bne.n	80033fe <HAL_GPIO_EXTI_Callback+0x66>
			valueENC_EXT[0]--;
 80033ea:	4b89      	ldr	r3, [pc, #548]	; (8003610 <HAL_GPIO_EXTI_Callback+0x278>)
 80033ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	3b01      	subs	r3, #1
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	b21a      	sxth	r2, r3
 80033f8:	4b85      	ldr	r3, [pc, #532]	; (8003610 <HAL_GPIO_EXTI_Callback+0x278>)
 80033fa:	801a      	strh	r2, [r3, #0]
 80033fc:	e028      	b.n	8003450 <HAL_GPIO_EXTI_Callback+0xb8>
		} else if ((ENC1B_HIGH && ENC1A_HIGH) || (ENC1B_LOW && ENC1A_LOW)) {
 80033fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003402:	4881      	ldr	r0, [pc, #516]	; (8003608 <HAL_GPIO_EXTI_Callback+0x270>)
 8003404:	f006 f86c 	bl	80094e0 <HAL_GPIO_ReadPin>
 8003408:	4603      	mov	r3, r0
 800340a:	2b01      	cmp	r3, #1
 800340c:	d107      	bne.n	800341e <HAL_GPIO_EXTI_Callback+0x86>
 800340e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003412:	487e      	ldr	r0, [pc, #504]	; (800360c <HAL_GPIO_EXTI_Callback+0x274>)
 8003414:	f006 f864 	bl	80094e0 <HAL_GPIO_ReadPin>
 8003418:	4603      	mov	r3, r0
 800341a:	2b01      	cmp	r3, #1
 800341c:	d00f      	beq.n	800343e <HAL_GPIO_EXTI_Callback+0xa6>
 800341e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003422:	4879      	ldr	r0, [pc, #484]	; (8003608 <HAL_GPIO_EXTI_Callback+0x270>)
 8003424:	f006 f85c 	bl	80094e0 <HAL_GPIO_ReadPin>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d110      	bne.n	8003450 <HAL_GPIO_EXTI_Callback+0xb8>
 800342e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003432:	4876      	ldr	r0, [pc, #472]	; (800360c <HAL_GPIO_EXTI_Callback+0x274>)
 8003434:	f006 f854 	bl	80094e0 <HAL_GPIO_ReadPin>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d108      	bne.n	8003450 <HAL_GPIO_EXTI_Callback+0xb8>
			valueENC_EXT[0]++;
 800343e:	4b74      	ldr	r3, [pc, #464]	; (8003610 <HAL_GPIO_EXTI_Callback+0x278>)
 8003440:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003444:	b29b      	uxth	r3, r3
 8003446:	3301      	adds	r3, #1
 8003448:	b29b      	uxth	r3, r3
 800344a:	b21a      	sxth	r2, r3
 800344c:	4b70      	ldr	r3, [pc, #448]	; (8003610 <HAL_GPIO_EXTI_Callback+0x278>)
 800344e:	801a      	strh	r2, [r3, #0]
		}
	}

	if (GPIO_Pin == ENC_EXT1_B_Pin) {
 8003450:	88fb      	ldrh	r3, [r7, #6]
 8003452:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003456:	d152      	bne.n	80034fe <HAL_GPIO_EXTI_Callback+0x166>
		if ((ENC1B_HIGH && ENC1A_HIGH) || (ENC1B_LOW && ENC1A_LOW)) {
 8003458:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800345c:	486a      	ldr	r0, [pc, #424]	; (8003608 <HAL_GPIO_EXTI_Callback+0x270>)
 800345e:	f006 f83f 	bl	80094e0 <HAL_GPIO_ReadPin>
 8003462:	4603      	mov	r3, r0
 8003464:	2b01      	cmp	r3, #1
 8003466:	d107      	bne.n	8003478 <HAL_GPIO_EXTI_Callback+0xe0>
 8003468:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800346c:	4867      	ldr	r0, [pc, #412]	; (800360c <HAL_GPIO_EXTI_Callback+0x274>)
 800346e:	f006 f837 	bl	80094e0 <HAL_GPIO_ReadPin>
 8003472:	4603      	mov	r3, r0
 8003474:	2b01      	cmp	r3, #1
 8003476:	d00f      	beq.n	8003498 <HAL_GPIO_EXTI_Callback+0x100>
 8003478:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800347c:	4862      	ldr	r0, [pc, #392]	; (8003608 <HAL_GPIO_EXTI_Callback+0x270>)
 800347e:	f006 f82f 	bl	80094e0 <HAL_GPIO_ReadPin>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d111      	bne.n	80034ac <HAL_GPIO_EXTI_Callback+0x114>
 8003488:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800348c:	485f      	ldr	r0, [pc, #380]	; (800360c <HAL_GPIO_EXTI_Callback+0x274>)
 800348e:	f006 f827 	bl	80094e0 <HAL_GPIO_ReadPin>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d109      	bne.n	80034ac <HAL_GPIO_EXTI_Callback+0x114>
			valueENC_EXT[0]--;
 8003498:	4b5d      	ldr	r3, [pc, #372]	; (8003610 <HAL_GPIO_EXTI_Callback+0x278>)
 800349a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800349e:	b29b      	uxth	r3, r3
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	b21a      	sxth	r2, r3
 80034a6:	4b5a      	ldr	r3, [pc, #360]	; (8003610 <HAL_GPIO_EXTI_Callback+0x278>)
 80034a8:	801a      	strh	r2, [r3, #0]
 80034aa:	e028      	b.n	80034fe <HAL_GPIO_EXTI_Callback+0x166>
		} else if ((ENC1B_LOW && ENC1A_HIGH) || (ENC1B_HIGH && ENC1A_LOW)) {
 80034ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034b0:	4855      	ldr	r0, [pc, #340]	; (8003608 <HAL_GPIO_EXTI_Callback+0x270>)
 80034b2:	f006 f815 	bl	80094e0 <HAL_GPIO_ReadPin>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d107      	bne.n	80034cc <HAL_GPIO_EXTI_Callback+0x134>
 80034bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80034c0:	4852      	ldr	r0, [pc, #328]	; (800360c <HAL_GPIO_EXTI_Callback+0x274>)
 80034c2:	f006 f80d 	bl	80094e0 <HAL_GPIO_ReadPin>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d00f      	beq.n	80034ec <HAL_GPIO_EXTI_Callback+0x154>
 80034cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034d0:	484d      	ldr	r0, [pc, #308]	; (8003608 <HAL_GPIO_EXTI_Callback+0x270>)
 80034d2:	f006 f805 	bl	80094e0 <HAL_GPIO_ReadPin>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d110      	bne.n	80034fe <HAL_GPIO_EXTI_Callback+0x166>
 80034dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80034e0:	484a      	ldr	r0, [pc, #296]	; (800360c <HAL_GPIO_EXTI_Callback+0x274>)
 80034e2:	f005 fffd 	bl	80094e0 <HAL_GPIO_ReadPin>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d108      	bne.n	80034fe <HAL_GPIO_EXTI_Callback+0x166>
			valueENC_EXT[0]++;
 80034ec:	4b48      	ldr	r3, [pc, #288]	; (8003610 <HAL_GPIO_EXTI_Callback+0x278>)
 80034ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	3301      	adds	r3, #1
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	b21a      	sxth	r2, r3
 80034fa:	4b45      	ldr	r3, [pc, #276]	; (8003610 <HAL_GPIO_EXTI_Callback+0x278>)
 80034fc:	801a      	strh	r2, [r3, #0]
		}
	}
	//Encoder External 2
	if (GPIO_Pin == ENC_EXT2_A_Pin) {
 80034fe:	88fb      	ldrh	r3, [r7, #6]
 8003500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003504:	d152      	bne.n	80035ac <HAL_GPIO_EXTI_Callback+0x214>
		if ((ENC2B_HIGH && ENC2A_LOW) || (ENC2B_LOW && ENC2A_HIGH)) {
 8003506:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800350a:	4840      	ldr	r0, [pc, #256]	; (800360c <HAL_GPIO_EXTI_Callback+0x274>)
 800350c:	f005 ffe8 	bl	80094e0 <HAL_GPIO_ReadPin>
 8003510:	4603      	mov	r3, r0
 8003512:	2b01      	cmp	r3, #1
 8003514:	d107      	bne.n	8003526 <HAL_GPIO_EXTI_Callback+0x18e>
 8003516:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800351a:	483c      	ldr	r0, [pc, #240]	; (800360c <HAL_GPIO_EXTI_Callback+0x274>)
 800351c:	f005 ffe0 	bl	80094e0 <HAL_GPIO_ReadPin>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00f      	beq.n	8003546 <HAL_GPIO_EXTI_Callback+0x1ae>
 8003526:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800352a:	4838      	ldr	r0, [pc, #224]	; (800360c <HAL_GPIO_EXTI_Callback+0x274>)
 800352c:	f005 ffd8 	bl	80094e0 <HAL_GPIO_ReadPin>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d111      	bne.n	800355a <HAL_GPIO_EXTI_Callback+0x1c2>
 8003536:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800353a:	4834      	ldr	r0, [pc, #208]	; (800360c <HAL_GPIO_EXTI_Callback+0x274>)
 800353c:	f005 ffd0 	bl	80094e0 <HAL_GPIO_ReadPin>
 8003540:	4603      	mov	r3, r0
 8003542:	2b01      	cmp	r3, #1
 8003544:	d109      	bne.n	800355a <HAL_GPIO_EXTI_Callback+0x1c2>
			valueENC_EXT[1]--;
 8003546:	4b32      	ldr	r3, [pc, #200]	; (8003610 <HAL_GPIO_EXTI_Callback+0x278>)
 8003548:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800354c:	b29b      	uxth	r3, r3
 800354e:	3b01      	subs	r3, #1
 8003550:	b29b      	uxth	r3, r3
 8003552:	b21a      	sxth	r2, r3
 8003554:	4b2e      	ldr	r3, [pc, #184]	; (8003610 <HAL_GPIO_EXTI_Callback+0x278>)
 8003556:	805a      	strh	r2, [r3, #2]
 8003558:	e028      	b.n	80035ac <HAL_GPIO_EXTI_Callback+0x214>
		} else if ((ENC2B_HIGH && ENC2A_HIGH) || (ENC2B_LOW && ENC2A_LOW)) {
 800355a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800355e:	482b      	ldr	r0, [pc, #172]	; (800360c <HAL_GPIO_EXTI_Callback+0x274>)
 8003560:	f005 ffbe 	bl	80094e0 <HAL_GPIO_ReadPin>
 8003564:	4603      	mov	r3, r0
 8003566:	2b01      	cmp	r3, #1
 8003568:	d107      	bne.n	800357a <HAL_GPIO_EXTI_Callback+0x1e2>
 800356a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800356e:	4827      	ldr	r0, [pc, #156]	; (800360c <HAL_GPIO_EXTI_Callback+0x274>)
 8003570:	f005 ffb6 	bl	80094e0 <HAL_GPIO_ReadPin>
 8003574:	4603      	mov	r3, r0
 8003576:	2b01      	cmp	r3, #1
 8003578:	d00f      	beq.n	800359a <HAL_GPIO_EXTI_Callback+0x202>
 800357a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800357e:	4823      	ldr	r0, [pc, #140]	; (800360c <HAL_GPIO_EXTI_Callback+0x274>)
 8003580:	f005 ffae 	bl	80094e0 <HAL_GPIO_ReadPin>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d110      	bne.n	80035ac <HAL_GPIO_EXTI_Callback+0x214>
 800358a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800358e:	481f      	ldr	r0, [pc, #124]	; (800360c <HAL_GPIO_EXTI_Callback+0x274>)
 8003590:	f005 ffa6 	bl	80094e0 <HAL_GPIO_ReadPin>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d108      	bne.n	80035ac <HAL_GPIO_EXTI_Callback+0x214>
			valueENC_EXT[1]++;
 800359a:	4b1d      	ldr	r3, [pc, #116]	; (8003610 <HAL_GPIO_EXTI_Callback+0x278>)
 800359c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	3301      	adds	r3, #1
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	b21a      	sxth	r2, r3
 80035a8:	4b19      	ldr	r3, [pc, #100]	; (8003610 <HAL_GPIO_EXTI_Callback+0x278>)
 80035aa:	805a      	strh	r2, [r3, #2]
		}
	}

	if (GPIO_Pin == ENC_EXT2_B_Pin) {
 80035ac:	88fb      	ldrh	r3, [r7, #6]
 80035ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035b2:	d158      	bne.n	8003666 <HAL_GPIO_EXTI_Callback+0x2ce>
		if ((ENC2B_HIGH && ENC2A_HIGH) || (ENC2B_LOW && ENC2A_LOW)) {
 80035b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035b8:	4814      	ldr	r0, [pc, #80]	; (800360c <HAL_GPIO_EXTI_Callback+0x274>)
 80035ba:	f005 ff91 	bl	80094e0 <HAL_GPIO_ReadPin>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d107      	bne.n	80035d4 <HAL_GPIO_EXTI_Callback+0x23c>
 80035c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035c8:	4810      	ldr	r0, [pc, #64]	; (800360c <HAL_GPIO_EXTI_Callback+0x274>)
 80035ca:	f005 ff89 	bl	80094e0 <HAL_GPIO_ReadPin>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d00f      	beq.n	80035f4 <HAL_GPIO_EXTI_Callback+0x25c>
 80035d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035d8:	480c      	ldr	r0, [pc, #48]	; (800360c <HAL_GPIO_EXTI_Callback+0x274>)
 80035da:	f005 ff81 	bl	80094e0 <HAL_GPIO_ReadPin>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d117      	bne.n	8003614 <HAL_GPIO_EXTI_Callback+0x27c>
 80035e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035e8:	4808      	ldr	r0, [pc, #32]	; (800360c <HAL_GPIO_EXTI_Callback+0x274>)
 80035ea:	f005 ff79 	bl	80094e0 <HAL_GPIO_ReadPin>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d10f      	bne.n	8003614 <HAL_GPIO_EXTI_Callback+0x27c>
			valueENC_EXT[1]--;
 80035f4:	4b06      	ldr	r3, [pc, #24]	; (8003610 <HAL_GPIO_EXTI_Callback+0x278>)
 80035f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	3b01      	subs	r3, #1
 80035fe:	b29b      	uxth	r3, r3
 8003600:	b21a      	sxth	r2, r3
 8003602:	4b03      	ldr	r3, [pc, #12]	; (8003610 <HAL_GPIO_EXTI_Callback+0x278>)
 8003604:	805a      	strh	r2, [r3, #2]
 8003606:	e02e      	b.n	8003666 <HAL_GPIO_EXTI_Callback+0x2ce>
 8003608:	40021800 	.word	0x40021800
 800360c:	40021400 	.word	0x40021400
 8003610:	20000a60 	.word	0x20000a60
		} else if ((ENC2B_LOW && ENC2A_HIGH) || (ENC2B_HIGH && ENC2A_LOW)) {
 8003614:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003618:	4867      	ldr	r0, [pc, #412]	; (80037b8 <HAL_GPIO_EXTI_Callback+0x420>)
 800361a:	f005 ff61 	bl	80094e0 <HAL_GPIO_ReadPin>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d107      	bne.n	8003634 <HAL_GPIO_EXTI_Callback+0x29c>
 8003624:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003628:	4863      	ldr	r0, [pc, #396]	; (80037b8 <HAL_GPIO_EXTI_Callback+0x420>)
 800362a:	f005 ff59 	bl	80094e0 <HAL_GPIO_ReadPin>
 800362e:	4603      	mov	r3, r0
 8003630:	2b01      	cmp	r3, #1
 8003632:	d00f      	beq.n	8003654 <HAL_GPIO_EXTI_Callback+0x2bc>
 8003634:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003638:	485f      	ldr	r0, [pc, #380]	; (80037b8 <HAL_GPIO_EXTI_Callback+0x420>)
 800363a:	f005 ff51 	bl	80094e0 <HAL_GPIO_ReadPin>
 800363e:	4603      	mov	r3, r0
 8003640:	2b01      	cmp	r3, #1
 8003642:	d110      	bne.n	8003666 <HAL_GPIO_EXTI_Callback+0x2ce>
 8003644:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003648:	485b      	ldr	r0, [pc, #364]	; (80037b8 <HAL_GPIO_EXTI_Callback+0x420>)
 800364a:	f005 ff49 	bl	80094e0 <HAL_GPIO_ReadPin>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d108      	bne.n	8003666 <HAL_GPIO_EXTI_Callback+0x2ce>
			valueENC_EXT[1]++;
 8003654:	4b59      	ldr	r3, [pc, #356]	; (80037bc <HAL_GPIO_EXTI_Callback+0x424>)
 8003656:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800365a:	b29b      	uxth	r3, r3
 800365c:	3301      	adds	r3, #1
 800365e:	b29b      	uxth	r3, r3
 8003660:	b21a      	sxth	r2, r3
 8003662:	4b56      	ldr	r3, [pc, #344]	; (80037bc <HAL_GPIO_EXTI_Callback+0x424>)
 8003664:	805a      	strh	r2, [r3, #2]
		}
	}
	//Encoder External 3
	if (GPIO_Pin == ENC_EXT3_A_Pin) {
 8003666:	88fb      	ldrh	r3, [r7, #6]
 8003668:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800366c:	d14e      	bne.n	800370c <HAL_GPIO_EXTI_Callback+0x374>
		if ((ENC3B_HIGH && ENC3A_LOW) || (ENC3B_LOW && ENC3A_HIGH)) {
 800366e:	2108      	movs	r1, #8
 8003670:	4851      	ldr	r0, [pc, #324]	; (80037b8 <HAL_GPIO_EXTI_Callback+0x420>)
 8003672:	f005 ff35 	bl	80094e0 <HAL_GPIO_ReadPin>
 8003676:	4603      	mov	r3, r0
 8003678:	2b01      	cmp	r3, #1
 800367a:	d107      	bne.n	800368c <HAL_GPIO_EXTI_Callback+0x2f4>
 800367c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003680:	484d      	ldr	r0, [pc, #308]	; (80037b8 <HAL_GPIO_EXTI_Callback+0x420>)
 8003682:	f005 ff2d 	bl	80094e0 <HAL_GPIO_ReadPin>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00e      	beq.n	80036aa <HAL_GPIO_EXTI_Callback+0x312>
 800368c:	2108      	movs	r1, #8
 800368e:	484a      	ldr	r0, [pc, #296]	; (80037b8 <HAL_GPIO_EXTI_Callback+0x420>)
 8003690:	f005 ff26 	bl	80094e0 <HAL_GPIO_ReadPin>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d111      	bne.n	80036be <HAL_GPIO_EXTI_Callback+0x326>
 800369a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800369e:	4846      	ldr	r0, [pc, #280]	; (80037b8 <HAL_GPIO_EXTI_Callback+0x420>)
 80036a0:	f005 ff1e 	bl	80094e0 <HAL_GPIO_ReadPin>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d109      	bne.n	80036be <HAL_GPIO_EXTI_Callback+0x326>
			valueENC_EXT[2]--;
 80036aa:	4b44      	ldr	r3, [pc, #272]	; (80037bc <HAL_GPIO_EXTI_Callback+0x424>)
 80036ac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	3b01      	subs	r3, #1
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	b21a      	sxth	r2, r3
 80036b8:	4b40      	ldr	r3, [pc, #256]	; (80037bc <HAL_GPIO_EXTI_Callback+0x424>)
 80036ba:	809a      	strh	r2, [r3, #4]
 80036bc:	e026      	b.n	800370c <HAL_GPIO_EXTI_Callback+0x374>
		} else if ((ENC3B_HIGH && ENC3A_HIGH) || (ENC3B_LOW && ENC3A_LOW)) {
 80036be:	2108      	movs	r1, #8
 80036c0:	483d      	ldr	r0, [pc, #244]	; (80037b8 <HAL_GPIO_EXTI_Callback+0x420>)
 80036c2:	f005 ff0d 	bl	80094e0 <HAL_GPIO_ReadPin>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d107      	bne.n	80036dc <HAL_GPIO_EXTI_Callback+0x344>
 80036cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036d0:	4839      	ldr	r0, [pc, #228]	; (80037b8 <HAL_GPIO_EXTI_Callback+0x420>)
 80036d2:	f005 ff05 	bl	80094e0 <HAL_GPIO_ReadPin>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d00e      	beq.n	80036fa <HAL_GPIO_EXTI_Callback+0x362>
 80036dc:	2108      	movs	r1, #8
 80036de:	4836      	ldr	r0, [pc, #216]	; (80037b8 <HAL_GPIO_EXTI_Callback+0x420>)
 80036e0:	f005 fefe 	bl	80094e0 <HAL_GPIO_ReadPin>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d110      	bne.n	800370c <HAL_GPIO_EXTI_Callback+0x374>
 80036ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036ee:	4832      	ldr	r0, [pc, #200]	; (80037b8 <HAL_GPIO_EXTI_Callback+0x420>)
 80036f0:	f005 fef6 	bl	80094e0 <HAL_GPIO_ReadPin>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d108      	bne.n	800370c <HAL_GPIO_EXTI_Callback+0x374>
			valueENC_EXT[2]++;
 80036fa:	4b30      	ldr	r3, [pc, #192]	; (80037bc <HAL_GPIO_EXTI_Callback+0x424>)
 80036fc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003700:	b29b      	uxth	r3, r3
 8003702:	3301      	adds	r3, #1
 8003704:	b29b      	uxth	r3, r3
 8003706:	b21a      	sxth	r2, r3
 8003708:	4b2c      	ldr	r3, [pc, #176]	; (80037bc <HAL_GPIO_EXTI_Callback+0x424>)
 800370a:	809a      	strh	r2, [r3, #4]
		}
	}

	if (GPIO_Pin == ENC_EXT3_B_Pin) {
 800370c:	88fb      	ldrh	r3, [r7, #6]
 800370e:	2b08      	cmp	r3, #8
 8003710:	d14e      	bne.n	80037b0 <HAL_GPIO_EXTI_Callback+0x418>
		if ((ENC3B_HIGH && ENC3A_HIGH) || (ENC3B_LOW && ENC3A_LOW)) {
 8003712:	2108      	movs	r1, #8
 8003714:	4828      	ldr	r0, [pc, #160]	; (80037b8 <HAL_GPIO_EXTI_Callback+0x420>)
 8003716:	f005 fee3 	bl	80094e0 <HAL_GPIO_ReadPin>
 800371a:	4603      	mov	r3, r0
 800371c:	2b01      	cmp	r3, #1
 800371e:	d107      	bne.n	8003730 <HAL_GPIO_EXTI_Callback+0x398>
 8003720:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003724:	4824      	ldr	r0, [pc, #144]	; (80037b8 <HAL_GPIO_EXTI_Callback+0x420>)
 8003726:	f005 fedb 	bl	80094e0 <HAL_GPIO_ReadPin>
 800372a:	4603      	mov	r3, r0
 800372c:	2b01      	cmp	r3, #1
 800372e:	d00e      	beq.n	800374e <HAL_GPIO_EXTI_Callback+0x3b6>
 8003730:	2108      	movs	r1, #8
 8003732:	4821      	ldr	r0, [pc, #132]	; (80037b8 <HAL_GPIO_EXTI_Callback+0x420>)
 8003734:	f005 fed4 	bl	80094e0 <HAL_GPIO_ReadPin>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d111      	bne.n	8003762 <HAL_GPIO_EXTI_Callback+0x3ca>
 800373e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003742:	481d      	ldr	r0, [pc, #116]	; (80037b8 <HAL_GPIO_EXTI_Callback+0x420>)
 8003744:	f005 fecc 	bl	80094e0 <HAL_GPIO_ReadPin>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d109      	bne.n	8003762 <HAL_GPIO_EXTI_Callback+0x3ca>
			valueENC_EXT[2]--;
 800374e:	4b1b      	ldr	r3, [pc, #108]	; (80037bc <HAL_GPIO_EXTI_Callback+0x424>)
 8003750:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003754:	b29b      	uxth	r3, r3
 8003756:	3b01      	subs	r3, #1
 8003758:	b29b      	uxth	r3, r3
 800375a:	b21a      	sxth	r2, r3
 800375c:	4b17      	ldr	r3, [pc, #92]	; (80037bc <HAL_GPIO_EXTI_Callback+0x424>)
 800375e:	809a      	strh	r2, [r3, #4]
		} else if ((ENC3B_LOW && ENC3A_HIGH) || (ENC3B_HIGH && ENC3A_LOW)) {
			valueENC_EXT[2]++;
		}
	}
}
 8003760:	e026      	b.n	80037b0 <HAL_GPIO_EXTI_Callback+0x418>
		} else if ((ENC3B_LOW && ENC3A_HIGH) || (ENC3B_HIGH && ENC3A_LOW)) {
 8003762:	2108      	movs	r1, #8
 8003764:	4814      	ldr	r0, [pc, #80]	; (80037b8 <HAL_GPIO_EXTI_Callback+0x420>)
 8003766:	f005 febb 	bl	80094e0 <HAL_GPIO_ReadPin>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d107      	bne.n	8003780 <HAL_GPIO_EXTI_Callback+0x3e8>
 8003770:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003774:	4810      	ldr	r0, [pc, #64]	; (80037b8 <HAL_GPIO_EXTI_Callback+0x420>)
 8003776:	f005 feb3 	bl	80094e0 <HAL_GPIO_ReadPin>
 800377a:	4603      	mov	r3, r0
 800377c:	2b01      	cmp	r3, #1
 800377e:	d00e      	beq.n	800379e <HAL_GPIO_EXTI_Callback+0x406>
 8003780:	2108      	movs	r1, #8
 8003782:	480d      	ldr	r0, [pc, #52]	; (80037b8 <HAL_GPIO_EXTI_Callback+0x420>)
 8003784:	f005 feac 	bl	80094e0 <HAL_GPIO_ReadPin>
 8003788:	4603      	mov	r3, r0
 800378a:	2b01      	cmp	r3, #1
 800378c:	d110      	bne.n	80037b0 <HAL_GPIO_EXTI_Callback+0x418>
 800378e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003792:	4809      	ldr	r0, [pc, #36]	; (80037b8 <HAL_GPIO_EXTI_Callback+0x420>)
 8003794:	f005 fea4 	bl	80094e0 <HAL_GPIO_ReadPin>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d108      	bne.n	80037b0 <HAL_GPIO_EXTI_Callback+0x418>
			valueENC_EXT[2]++;
 800379e:	4b07      	ldr	r3, [pc, #28]	; (80037bc <HAL_GPIO_EXTI_Callback+0x424>)
 80037a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	3301      	adds	r3, #1
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	b21a      	sxth	r2, r3
 80037ac:	4b03      	ldr	r3, [pc, #12]	; (80037bc <HAL_GPIO_EXTI_Callback+0x424>)
 80037ae:	809a      	strh	r2, [r3, #4]
}
 80037b0:	bf00      	nop
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40021400 	.word	0x40021400
 80037bc:	20000a60 	.word	0x20000a60

080037c0 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80037c0:	b590      	push	{r4, r7, lr}
 80037c2:	b087      	sub	sp, #28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN 5 */
	initializeMotor();
 80037c8:	f7ff fcee 	bl	80031a8 <initializeMotor>
	vTaskDelay(10);
 80037cc:	200a      	movs	r0, #10
 80037ce:	f00a ff05 	bl	800e5dc <vTaskDelay>
	stateInv = false;
 80037d2:	4b2f      	ldr	r3, [pc, #188]	; (8003890 <StartDefaultTask+0xd0>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	701a      	strb	r2, [r3, #0]
	/* Infinite loop */
	for (;;) {
		if (stateInv == true) {
 80037d8:	4b2d      	ldr	r3, [pc, #180]	; (8003890 <StartDefaultTask+0xd0>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d012      	beq.n	8003806 <StartDefaultTask+0x46>
			kinMotor(&MotorOut, InvTarget[0], InvTarget[1], InvTarget[2]);
 80037e0:	4b2c      	ldr	r3, [pc, #176]	; (8003894 <StartDefaultTask+0xd4>)
 80037e2:	edd3 7a00 	vldr	s15, [r3]
 80037e6:	4b2b      	ldr	r3, [pc, #172]	; (8003894 <StartDefaultTask+0xd4>)
 80037e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80037ec:	4b29      	ldr	r3, [pc, #164]	; (8003894 <StartDefaultTask+0xd4>)
 80037ee:	edd3 6a02 	vldr	s13, [r3, #8]
 80037f2:	eeb0 1a66 	vmov.f32	s2, s13
 80037f6:	eef0 0a47 	vmov.f32	s1, s14
 80037fa:	eeb0 0a67 	vmov.f32	s0, s15
 80037fe:	4826      	ldr	r0, [pc, #152]	; (8003898 <StartDefaultTask+0xd8>)
 8003800:	f7fe fe1a 	bl	8002438 <kinMotor>
 8003804:	e027      	b.n	8003856 <StartDefaultTask+0x96>
		} else {
			vect3_Kin = ForwardKin(xtarget, ytarget, thtarget);
 8003806:	4b25      	ldr	r3, [pc, #148]	; (800389c <StartDefaultTask+0xdc>)
 8003808:	edd3 7a00 	vldr	s15, [r3]
 800380c:	4b24      	ldr	r3, [pc, #144]	; (80038a0 <StartDefaultTask+0xe0>)
 800380e:	ed93 7a00 	vldr	s14, [r3]
 8003812:	4b24      	ldr	r3, [pc, #144]	; (80038a4 <StartDefaultTask+0xe4>)
 8003814:	edd3 6a00 	vldr	s13, [r3]
 8003818:	eeb0 1a66 	vmov.f32	s2, s13
 800381c:	eef0 0a47 	vmov.f32	s1, s14
 8003820:	eeb0 0a67 	vmov.f32	s0, s15
 8003824:	f7fd fe94 	bl	8001550 <ForwardKin>
 8003828:	eef0 6a40 	vmov.f32	s13, s0
 800382c:	eeb0 7a60 	vmov.f32	s14, s1
 8003830:	eef0 7a41 	vmov.f32	s15, s2
 8003834:	4b1c      	ldr	r3, [pc, #112]	; (80038a8 <StartDefaultTask+0xe8>)
 8003836:	edc3 6a00 	vstr	s13, [r3]
 800383a:	ed83 7a01 	vstr	s14, [r3, #4]
 800383e:	edc3 7a02 	vstr	s15, [r3, #8]
			MotorOut = InverseKin(&vect3_Kin);
 8003842:	4c15      	ldr	r4, [pc, #84]	; (8003898 <StartDefaultTask+0xd8>)
 8003844:	463b      	mov	r3, r7
 8003846:	4918      	ldr	r1, [pc, #96]	; (80038a8 <StartDefaultTask+0xe8>)
 8003848:	4618      	mov	r0, r3
 800384a:	f7fe f97d 	bl	8001b48 <InverseKin>
 800384e:	463b      	mov	r3, r7
 8003850:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003852:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}
		setPwm(0, MotorOut.w1); setPwm(1, MotorOut.w2);
 8003856:	4b10      	ldr	r3, [pc, #64]	; (8003898 <StartDefaultTask+0xd8>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4619      	mov	r1, r3
 800385c:	2000      	movs	r0, #0
 800385e:	f7ff fce5 	bl	800322c <setPwm>
 8003862:	4b0d      	ldr	r3, [pc, #52]	; (8003898 <StartDefaultTask+0xd8>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	4619      	mov	r1, r3
 8003868:	2001      	movs	r0, #1
 800386a:	f7ff fcdf 	bl	800322c <setPwm>
		setPwm(2, MotorOut.w3); setPwm(3, MotorOut.w4);
 800386e:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <StartDefaultTask+0xd8>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	4619      	mov	r1, r3
 8003874:	2002      	movs	r0, #2
 8003876:	f7ff fcd9 	bl	800322c <setPwm>
 800387a:	4b07      	ldr	r3, [pc, #28]	; (8003898 <StartDefaultTask+0xd8>)
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	4619      	mov	r1, r3
 8003880:	2003      	movs	r0, #3
 8003882:	f7ff fcd3 	bl	800322c <setPwm>
		osDelay(1);
 8003886:	2001      	movs	r0, #1
 8003888:	f009 ff00 	bl	800d68c <osDelay>
		if (stateInv == true) {
 800388c:	e7a4      	b.n	80037d8 <StartDefaultTask+0x18>
 800388e:	bf00      	nop
 8003890:	20000ac8 	.word	0x20000ac8
 8003894:	20000abc 	.word	0x20000abc
 8003898:	20000a74 	.word	0x20000a74
 800389c:	20000aac 	.word	0x20000aac
 80038a0:	20000ab0 	.word	0x20000ab0
 80038a4:	20000ab4 	.word	0x20000ab4
 80038a8:	20000a68 	.word	0x20000a68

080038ac <commTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_commTask */
void commTask(void *argument)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN commTask */
	setup();
 80038b4:	f003 fabe 	bl	8006e34 <setup>
	/* Infinite loop */
	for (;;) {
		loop();
 80038b8:	f003 fae0 	bl	8006e7c <loop>
		osDelay(1);
 80038bc:	2001      	movs	r0, #1
 80038be:	f009 fee5 	bl	800d68c <osDelay>
		loop();
 80038c2:	e7f9      	b.n	80038b8 <commTask+0xc>

080038c4 <ImuTask_Function>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ImuTask_Function */
void ImuTask_Function(void *argument)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ImuTask_Function */
	bno055_assignI2C(&hi2c1);
 80038cc:	4820      	ldr	r0, [pc, #128]	; (8003950 <ImuTask_Function+0x8c>)
 80038ce:	f7fe fef3 	bl	80026b8 <bno055_assignI2C>
	bno055_setup();
 80038d2:	f7fd fb87 	bl	8000fe4 <bno055_setup>
	bno055_setOperationModeNDOF();
 80038d6:	f7fd fb72 	bl	8000fbe <bno055_setOperationModeNDOF>
	vTaskDelay(100);
 80038da:	2064      	movs	r0, #100	; 0x64
 80038dc:	f00a fe7e 	bl	800e5dc <vTaskDelay>
	/* Infinite loop */
	for (;;) {
		vector = bno055_getVectorEuler();
 80038e0:	f7fd fcec 	bl	80012bc <bno055_getVectorEuler>
 80038e4:	eeb0 4a40 	vmov.f32	s8, s0
 80038e8:	eef0 4a60 	vmov.f32	s9, s1
 80038ec:	eeb0 5a41 	vmov.f32	s10, s2
 80038f0:	eef0 5a61 	vmov.f32	s11, s3
 80038f4:	eeb0 6a42 	vmov.f32	s12, s4
 80038f8:	eef0 6a62 	vmov.f32	s13, s5
 80038fc:	eeb0 7a43 	vmov.f32	s14, s6
 8003900:	eef0 7a63 	vmov.f32	s15, s7
 8003904:	4b13      	ldr	r3, [pc, #76]	; (8003954 <ImuTask_Function+0x90>)
 8003906:	ed83 4b00 	vstr	d4, [r3]
 800390a:	ed83 5b02 	vstr	d5, [r3, #8]
 800390e:	ed83 6b04 	vstr	d6, [r3, #16]
 8003912:	ed83 7b06 	vstr	d7, [r3, #24]
//		gyro = bno055_getVectorGyroscope();
//		line = bno055_getVectorLinearAccel();
//		quat = bno055_getVectorQuaternion();
//		imuPublish(&quat, &line, &gyro);
		vTaskDelay(1);
 8003916:	2001      	movs	r0, #1
 8003918:	f00a fe60 	bl	800e5dc <vTaskDelay>
		rawYaw = vector.x;
 800391c:	4b0d      	ldr	r3, [pc, #52]	; (8003954 <ImuTask_Function+0x90>)
 800391e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003922:	4610      	mov	r0, r2
 8003924:	4619      	mov	r1, r3
 8003926:	f7fd f927 	bl	8000b78 <__aeabi_d2iz>
 800392a:	4603      	mov	r3, r0
 800392c:	b21a      	sxth	r2, r3
 800392e:	4b0a      	ldr	r3, [pc, #40]	; (8003958 <ImuTask_Function+0x94>)
 8003930:	801a      	strh	r2, [r3, #0]
		yawVal = imuCallback(rawYaw);
 8003932:	4b09      	ldr	r3, [pc, #36]	; (8003958 <ImuTask_Function+0x94>)
 8003934:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff fbfd 	bl	8003138 <imuCallback>
 800393e:	4603      	mov	r3, r0
 8003940:	b21a      	sxth	r2, r3
 8003942:	4b06      	ldr	r3, [pc, #24]	; (800395c <ImuTask_Function+0x98>)
 8003944:	801a      	strh	r2, [r3, #0]
		osDelay(1);
 8003946:	2001      	movs	r0, #1
 8003948:	f009 fea0 	bl	800d68c <osDelay>
		vector = bno055_getVectorEuler();
 800394c:	e7c8      	b.n	80038e0 <ImuTask_Function+0x1c>
 800394e:	bf00      	nop
 8003950:	2000025c 	.word	0x2000025c
 8003954:	20000a88 	.word	0x20000a88
 8003958:	20000aca 	.word	0x20000aca
 800395c:	20000214 	.word	0x20000214

08003960 <GUI_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GUI_Task */
void GUI_Task(void *argument)
{
 8003960:	b5b0      	push	{r4, r5, r7, lr}
 8003962:	b092      	sub	sp, #72	; 0x48
 8003964:	af02      	add	r7, sp, #8
 8003966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GUI_Task */
	lcd_init();
 8003968:	f7fd fd63 	bl	8001432 <lcd_init>
	char buff[50];
	/* Infinite loop */
	for (;;) {
		lcd_send_cmd(0x80 | 0x04);
 800396c:	2084      	movs	r0, #132	; 0x84
 800396e:	f7fd fce9 	bl	8001344 <lcd_send_cmd>
		lcd_send_string("ABUROBONEMA");
 8003972:	4849      	ldr	r0, [pc, #292]	; (8003a98 <GUI_Task+0x138>)
 8003974:	f7fd fd9a 	bl	80014ac <lcd_send_string>

		lcd_send_cmd(0x80 | 0x40);
 8003978:	20c0      	movs	r0, #192	; 0xc0
 800397a:	f7fd fce3 	bl	8001344 <lcd_send_cmd>
		lcd_send_string("Head:");
 800397e:	4847      	ldr	r0, [pc, #284]	; (8003a9c <GUI_Task+0x13c>)
 8003980:	f7fd fd94 	bl	80014ac <lcd_send_string>
		lcd_send_cmd(0x80 | 0x45);
 8003984:	20c5      	movs	r0, #197	; 0xc5
 8003986:	f7fd fcdd 	bl	8001344 <lcd_send_cmd>
		Lcd_send_int(yawVal);
 800398a:	4b45      	ldr	r3, [pc, #276]	; (8003aa0 <GUI_Task+0x140>)
 800398c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003990:	4618      	mov	r0, r3
 8003992:	f7fd fda1 	bl	80014d8 <Lcd_send_int>
		lcd_send_cmd(0x80 | 0x14);
 8003996:	2094      	movs	r0, #148	; 0x94
 8003998:	f7fd fcd4 	bl	8001344 <lcd_send_cmd>
		sprintf(buff, "X:%.2f  Y:%.2f", Aksen[0], Aksen[1]);
 800399c:	4b41      	ldr	r3, [pc, #260]	; (8003aa4 <GUI_Task+0x144>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7fc fde1 	bl	8000568 <__aeabi_f2d>
 80039a6:	4604      	mov	r4, r0
 80039a8:	460d      	mov	r5, r1
 80039aa:	4b3e      	ldr	r3, [pc, #248]	; (8003aa4 <GUI_Task+0x144>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fc fdda 	bl	8000568 <__aeabi_f2d>
 80039b4:	4602      	mov	r2, r0
 80039b6:	460b      	mov	r3, r1
 80039b8:	f107 000c 	add.w	r0, r7, #12
 80039bc:	e9cd 2300 	strd	r2, r3, [sp]
 80039c0:	4622      	mov	r2, r4
 80039c2:	462b      	mov	r3, r5
 80039c4:	4938      	ldr	r1, [pc, #224]	; (8003aa8 <GUI_Task+0x148>)
 80039c6:	f00f f845 	bl	8012a54 <siprintf>
		lcd_send_string(buff);
 80039ca:	f107 030c 	add.w	r3, r7, #12
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7fd fd6c 	bl	80014ac <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 80039d4:	20d4      	movs	r0, #212	; 0xd4
 80039d6:	f7fd fcb5 	bl	8001344 <lcd_send_cmd>
		sprintf(buff, "err:%.3f", sqrt(pow(vect3_Kin.x, 2) + pow(vect3_Kin.y, 2) + pow(vect3_Kin.th, 2)));
 80039da:	4b34      	ldr	r3, [pc, #208]	; (8003aac <GUI_Task+0x14c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fc fdc2 	bl	8000568 <__aeabi_f2d>
 80039e4:	4602      	mov	r2, r0
 80039e6:	460b      	mov	r3, r1
 80039e8:	ed9f 1b29 	vldr	d1, [pc, #164]	; 8003a90 <GUI_Task+0x130>
 80039ec:	ec43 2b10 	vmov	d0, r2, r3
 80039f0:	f00c faec 	bl	800ffcc <pow>
 80039f4:	ec55 4b10 	vmov	r4, r5, d0
 80039f8:	4b2c      	ldr	r3, [pc, #176]	; (8003aac <GUI_Task+0x14c>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7fc fdb3 	bl	8000568 <__aeabi_f2d>
 8003a02:	4602      	mov	r2, r0
 8003a04:	460b      	mov	r3, r1
 8003a06:	ed9f 1b22 	vldr	d1, [pc, #136]	; 8003a90 <GUI_Task+0x130>
 8003a0a:	ec43 2b10 	vmov	d0, r2, r3
 8003a0e:	f00c fadd 	bl	800ffcc <pow>
 8003a12:	ec53 2b10 	vmov	r2, r3, d0
 8003a16:	4620      	mov	r0, r4
 8003a18:	4629      	mov	r1, r5
 8003a1a:	f7fc fc47 	bl	80002ac <__adddf3>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	460b      	mov	r3, r1
 8003a22:	4614      	mov	r4, r2
 8003a24:	461d      	mov	r5, r3
 8003a26:	4b21      	ldr	r3, [pc, #132]	; (8003aac <GUI_Task+0x14c>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fc fd9c 	bl	8000568 <__aeabi_f2d>
 8003a30:	4602      	mov	r2, r0
 8003a32:	460b      	mov	r3, r1
 8003a34:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8003a90 <GUI_Task+0x130>
 8003a38:	ec43 2b10 	vmov	d0, r2, r3
 8003a3c:	f00c fac6 	bl	800ffcc <pow>
 8003a40:	ec53 2b10 	vmov	r2, r3, d0
 8003a44:	4620      	mov	r0, r4
 8003a46:	4629      	mov	r1, r5
 8003a48:	f7fc fc30 	bl	80002ac <__adddf3>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	460b      	mov	r3, r1
 8003a50:	ec43 2b17 	vmov	d7, r2, r3
 8003a54:	eeb0 0a47 	vmov.f32	s0, s14
 8003a58:	eef0 0a67 	vmov.f32	s1, s15
 8003a5c:	f00c fb26 	bl	80100ac <sqrt>
 8003a60:	ec53 2b10 	vmov	r2, r3, d0
 8003a64:	f107 000c 	add.w	r0, r7, #12
 8003a68:	4911      	ldr	r1, [pc, #68]	; (8003ab0 <GUI_Task+0x150>)
 8003a6a:	f00e fff3 	bl	8012a54 <siprintf>
		lcd_send_string(buff);
 8003a6e:	f107 030c 	add.w	r3, r7, #12
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fd fd1a 	bl	80014ac <lcd_send_string>
		lcd_clear();
 8003a78:	f7fd fcc4 	bl	8001404 <lcd_clear>
		vTaskDelay(10);
 8003a7c:	200a      	movs	r0, #10
 8003a7e:	f00a fdad 	bl	800e5dc <vTaskDelay>
		osDelay(1);
 8003a82:	2001      	movs	r0, #1
 8003a84:	f009 fe02 	bl	800d68c <osDelay>
		lcd_send_cmd(0x80 | 0x04);
 8003a88:	e770      	b.n	800396c <GUI_Task+0xc>
 8003a8a:	bf00      	nop
 8003a8c:	f3af 8000 	nop.w
 8003a90:	00000000 	.word	0x00000000
 8003a94:	40000000 	.word	0x40000000
 8003a98:	08014fe4 	.word	0x08014fe4
 8003a9c:	08014ff0 	.word	0x08014ff0
 8003aa0:	20000214 	.word	0x20000214
 8003aa4:	2000022c 	.word	0x2000022c
 8003aa8:	08014ff8 	.word	0x08014ff8
 8003aac:	20000a68 	.word	0x20000a68
 8003ab0:	08015008 	.word	0x08015008

08003ab4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a17      	ldr	r2, [pc, #92]	; (8003b20 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d101      	bne.n	8003aca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003ac6:	f004 fe37 	bl	8008738 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM13) {
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a15      	ldr	r2, [pc, #84]	; (8003b24 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d121      	bne.n	8003b18 <HAL_TIM_PeriodElapsedCallback+0x64>
		for (uint8_t i = 0; i < 3; i++) {
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	73fb      	strb	r3, [r7, #15]
 8003ad8:	e01b      	b.n	8003b12 <HAL_TIM_PeriodElapsedCallback+0x5e>
			rpmExt[i] = valueENC_EXT[i] * 6000 / 715;
 8003ada:	7bfb      	ldrb	r3, [r7, #15]
 8003adc:	4a12      	ldr	r2, [pc, #72]	; (8003b28 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003ade:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	f241 7370 	movw	r3, #6000	; 0x1770
 8003ae8:	fb02 f303 	mul.w	r3, r2, r3
 8003aec:	4a0f      	ldr	r2, [pc, #60]	; (8003b2c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003aee:	fb82 1203 	smull	r1, r2, r2, r3
 8003af2:	1212      	asrs	r2, r2, #8
 8003af4:	17db      	asrs	r3, r3, #31
 8003af6:	1ad2      	subs	r2, r2, r3
 8003af8:	7bfb      	ldrb	r3, [r7, #15]
 8003afa:	b211      	sxth	r1, r2
 8003afc:	4a0c      	ldr	r2, [pc, #48]	; (8003b30 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003afe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			valueENC_EXT[i] = 0;
 8003b02:	7bfb      	ldrb	r3, [r7, #15]
 8003b04:	4a08      	ldr	r2, [pc, #32]	; (8003b28 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003b06:	2100      	movs	r1, #0
 8003b08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint8_t i = 0; i < 3; i++) {
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	73fb      	strb	r3, [r7, #15]
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d9e0      	bls.n	8003ada <HAL_TIM_PeriodElapsedCallback+0x26>
		}
	}

  /* USER CODE END Callback 1 */
}
 8003b18:	bf00      	nop
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40002000 	.word	0x40002000
 8003b24:	40001c00 	.word	0x40001c00
 8003b28:	20000a60 	.word	0x20000a60
 8003b2c:	5ba8a345 	.word	0x5ba8a345
 8003b30:	20000218 	.word	0x20000218

08003b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b38:	b672      	cpsid	i
}
 8003b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003b3c:	e7fe      	b.n	8003b3c <Error_Handler+0x8>

08003b3e <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8003b3e:	b480      	push	{r7}
 8003b40:	b083      	sub	sp, #12
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	605a      	str	r2, [r3, #4]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4618      	mov	r0, r3
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	4a04      	ldr	r2, [pc, #16]	; (8003b7c <_ZN3ros3MsgC1Ev+0x1c>)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4618      	mov	r0, r3
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	0801556c 	.word	0x0801556c

08003b80 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
      data()
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7ff ffe8 	bl	8003b60 <_ZN3ros3MsgC1Ev>
 8003b90:	4a06      	ldr	r2, [pc, #24]	; (8003bac <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	3304      	adds	r3, #4
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7ff ffcf 	bl	8003b3e <_ZN3ros4TimeC1Ev>
    {
    }
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	08015554 	.word	0x08015554

08003bb0 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6859      	ldr	r1, [r3, #4]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	b2ca      	uxtb	r2, r1
 8003bca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	0a19      	lsrs	r1, r3, #8
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	4413      	add	r3, r2
 8003bda:	b2ca      	uxtb	r2, r1
 8003bdc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	0c19      	lsrs	r1, r3, #16
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	3302      	adds	r3, #2
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	4413      	add	r3, r2
 8003bec:	b2ca      	uxtb	r2, r1
 8003bee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	0e19      	lsrs	r1, r3, #24
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	3303      	adds	r3, #3
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	b2ca      	uxtb	r2, r1
 8003c00:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	3304      	adds	r3, #4
 8003c06:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6899      	ldr	r1, [r3, #8]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	4413      	add	r3, r2
 8003c12:	b2ca      	uxtb	r2, r1
 8003c14:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	0a19      	lsrs	r1, r3, #8
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	4413      	add	r3, r2
 8003c24:	b2ca      	uxtb	r2, r1
 8003c26:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	0c19      	lsrs	r1, r3, #16
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	3302      	adds	r3, #2
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	4413      	add	r3, r2
 8003c36:	b2ca      	uxtb	r2, r1
 8003c38:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	0e19      	lsrs	r1, r3, #24
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	3303      	adds	r3, #3
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	4413      	add	r3, r2
 8003c48:	b2ca      	uxtb	r2, r1
 8003c4a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	3304      	adds	r3, #4
 8003c50:	60fb      	str	r3, [r7, #12]
      return offset;
 8003c52:	68fb      	ldr	r3, [r7, #12]
    }
 8003c54:	4618      	mov	r0, r3
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	4413      	add	r3, r2
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	461a      	mov	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	3301      	adds	r3, #1
 8003c84:	6839      	ldr	r1, [r7, #0]
 8003c86:	440b      	add	r3, r1
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	021b      	lsls	r3, r3, #8
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	3302      	adds	r3, #2
 8003c9a:	6839      	ldr	r1, [r7, #0]
 8003c9c:	440b      	add	r3, r1
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	041b      	lsls	r3, r3, #16
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	3303      	adds	r3, #3
 8003cb0:	6839      	ldr	r1, [r7, #0]
 8003cb2:	440b      	add	r3, r1
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	061b      	lsls	r3, r3, #24
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	4413      	add	r3, r2
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	689a      	ldr	r2, [r3, #8]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	6839      	ldr	r1, [r7, #0]
 8003cdc:	440b      	add	r3, r1
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	021b      	lsls	r3, r3, #8
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	3302      	adds	r3, #2
 8003cf0:	6839      	ldr	r1, [r7, #0]
 8003cf2:	440b      	add	r3, r1
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	041b      	lsls	r3, r3, #16
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689a      	ldr	r2, [r3, #8]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	3303      	adds	r3, #3
 8003d06:	6839      	ldr	r1, [r7, #0]
 8003d08:	440b      	add	r3, r1
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	061b      	lsls	r3, r3, #24
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	3304      	adds	r3, #4
 8003d18:	60fb      	str	r3, [r7, #12]
     return offset;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
    }
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3714      	adds	r7, #20
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	4b03      	ldr	r3, [pc, #12]	; (8003d40 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8003d32:	4618      	mov	r0, r3
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	08015014 	.word	0x08015014

08003d44 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	4b03      	ldr	r3, [pc, #12]	; (8003d5c <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8003d4e:	4618      	mov	r0, r3
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	08015024 	.word	0x08015024

08003d60 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7ff fef8 	bl	8003b60 <_ZN3ros3MsgC1Ev>
 8003d70:	4a0b      	ldr	r2, [pc, #44]	; (8003da0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a09      	ldr	r2, [pc, #36]	; (8003da4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003d80:	609a      	str	r2, [r3, #8]
      message_type(""),
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a07      	ldr	r2, [pc, #28]	; (8003da4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003d86:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a06      	ldr	r2, [pc, #24]	; (8003da4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003d8c:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	615a      	str	r2, [r3, #20]
    {
    }
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4618      	mov	r0, r3
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	0801553c 	.word	0x0801553c
 8003da4:	08015048 	.word	0x08015048

08003da8 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b088      	sub	sp, #32
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003db2:	2300      	movs	r3, #0
 8003db4:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	8899      	ldrh	r1, [r3, #4]
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	b2ca      	uxtb	r2, r1
 8003dc2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	889b      	ldrh	r3, [r3, #4]
 8003dc8:	0a1b      	lsrs	r3, r3, #8
 8003dca:	b299      	uxth	r1, r3
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	b2ca      	uxtb	r2, r1
 8003dd6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	3302      	adds	r3, #2
 8003ddc:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fc fa54 	bl	8000290 <strlen>
 8003de8:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	4413      	add	r3, r2
 8003df0:	69b9      	ldr	r1, [r7, #24]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f003 f862 	bl	8006ebc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	3304      	adds	r3, #4
 8003dfc:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	18d0      	adds	r0, r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	f00e ffef 	bl	8012dee <memcpy>
      offset += length_topic_name;
 8003e10:	69fa      	ldr	r2, [r7, #28]
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	4413      	add	r3, r2
 8003e16:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7fc fa37 	bl	8000290 <strlen>
 8003e22:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	4413      	add	r3, r2
 8003e2a:	6979      	ldr	r1, [r7, #20]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f003 f845 	bl	8006ebc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	3304      	adds	r3, #4
 8003e36:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	18d0      	adds	r0, r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	4619      	mov	r1, r3
 8003e46:	f00e ffd2 	bl	8012dee <memcpy>
      offset += length_message_type;
 8003e4a:	69fa      	ldr	r2, [r7, #28]
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	4413      	add	r3, r2
 8003e50:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fc fa1a 	bl	8000290 <strlen>
 8003e5c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	4413      	add	r3, r2
 8003e64:	6939      	ldr	r1, [r7, #16]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f003 f828 	bl	8006ebc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	3304      	adds	r3, #4
 8003e70:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	18d0      	adds	r0, r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	4619      	mov	r1, r3
 8003e80:	f00e ffb5 	bl	8012dee <memcpy>
      offset += length_md5sum;
 8003e84:	69fa      	ldr	r2, [r7, #28]
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	4413      	add	r3, r2
 8003e8a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8003e92:	68f9      	ldr	r1, [r7, #12]
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	4413      	add	r3, r2
 8003e9a:	b2ca      	uxtb	r2, r1
 8003e9c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	0a19      	lsrs	r1, r3, #8
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	b2ca      	uxtb	r2, r1
 8003eac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	0c19      	lsrs	r1, r3, #16
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	3302      	adds	r3, #2
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	4413      	add	r3, r2
 8003eba:	b2ca      	uxtb	r2, r1
 8003ebc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	0e19      	lsrs	r1, r3, #24
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	3303      	adds	r3, #3
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	4413      	add	r3, r2
 8003eca:	b2ca      	uxtb	r2, r1
 8003ecc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	61fb      	str	r3, [r7, #28]
      return offset;
 8003ed4:	69fb      	ldr	r3, [r7, #28]
    }
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3720      	adds	r7, #32
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b08a      	sub	sp, #40	; 0x28
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
 8003ee6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	889b      	ldrh	r3, [r3, #4]
 8003efe:	b21a      	sxth	r2, r3
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	3301      	adds	r3, #1
 8003f04:	6839      	ldr	r1, [r7, #0]
 8003f06:	440b      	add	r3, r1
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	021b      	lsls	r3, r3, #8
 8003f0c:	b21b      	sxth	r3, r3
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	b21b      	sxth	r3, r3
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	3302      	adds	r3, #2
 8003f1c:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	441a      	add	r2, r3
 8003f24:	f107 0314 	add.w	r3, r7, #20
 8003f28:	4611      	mov	r1, r2
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f002 ffe5 	bl	8006efa <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	3304      	adds	r3, #4
 8003f34:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	627b      	str	r3, [r7, #36]	; 0x24
 8003f3a:	e00b      	b.n	8003f54 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f40:	441a      	add	r2, r3
 8003f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f44:	3b01      	subs	r3, #1
 8003f46:	6839      	ldr	r1, [r7, #0]
 8003f48:	440b      	add	r3, r1
 8003f4a:	7812      	ldrb	r2, [r2, #0]
 8003f4c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	3301      	adds	r3, #1
 8003f52:	627b      	str	r3, [r7, #36]	; 0x24
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	4413      	add	r3, r2
 8003f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d3ed      	bcc.n	8003f3c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	4413      	add	r3, r2
 8003f66:	3b01      	subs	r3, #1
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	3b01      	subs	r3, #1
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	441a      	add	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	4413      	add	r3, r2
 8003f82:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	441a      	add	r2, r3
 8003f8a:	f107 0310 	add.w	r3, r7, #16
 8003f8e:	4611      	mov	r1, r2
 8003f90:	4618      	mov	r0, r3
 8003f92:	f002 ffb2 	bl	8006efa <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	3304      	adds	r3, #4
 8003f9a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	623b      	str	r3, [r7, #32]
 8003fa0:	e00b      	b.n	8003fba <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	441a      	add	r2, r3
 8003fa8:	6a3b      	ldr	r3, [r7, #32]
 8003faa:	3b01      	subs	r3, #1
 8003fac:	6839      	ldr	r1, [r7, #0]
 8003fae:	440b      	add	r3, r1
 8003fb0:	7812      	ldrb	r2, [r2, #0]
 8003fb2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	623b      	str	r3, [r7, #32]
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	6a3a      	ldr	r2, [r7, #32]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d3ed      	bcc.n	8003fa2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	4413      	add	r3, r2
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	441a      	add	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	441a      	add	r2, r3
 8003ff0:	f107 030c 	add.w	r3, r7, #12
 8003ff4:	4611      	mov	r1, r2
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f002 ff7f 	bl	8006efa <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	3304      	adds	r3, #4
 8004000:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	61fb      	str	r3, [r7, #28]
 8004006:	e00b      	b.n	8004020 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	441a      	add	r2, r3
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	3b01      	subs	r3, #1
 8004012:	6839      	ldr	r1, [r7, #0]
 8004014:	440b      	add	r3, r1
 8004016:	7812      	ldrb	r2, [r2, #0]
 8004018:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	3301      	adds	r3, #1
 800401e:	61fb      	str	r3, [r7, #28]
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	4413      	add	r3, r2
 8004026:	69fa      	ldr	r2, [r7, #28]
 8004028:	429a      	cmp	r2, r3
 800402a:	d3ed      	bcc.n	8004008 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	4413      	add	r3, r2
 8004032:	3b01      	subs	r3, #1
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	4413      	add	r3, r2
 8004038:	2200      	movs	r2, #0
 800403a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	3b01      	subs	r3, #1
 8004040:	683a      	ldr	r2, [r7, #0]
 8004042:	441a      	add	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	4413      	add	r3, r2
 800404e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8004050:	2300      	movs	r3, #0
 8004052:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	6839      	ldr	r1, [r7, #0]
 800405a:	440a      	add	r2, r1
 800405c:	7812      	ldrb	r2, [r2, #0]
 800405e:	4313      	orrs	r3, r2
 8004060:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	3301      	adds	r3, #1
 8004068:	6839      	ldr	r1, [r7, #0]
 800406a:	440b      	add	r3, r1
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	021b      	lsls	r3, r3, #8
 8004070:	4313      	orrs	r3, r2
 8004072:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004074:	68ba      	ldr	r2, [r7, #8]
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	3302      	adds	r3, #2
 800407a:	6839      	ldr	r1, [r7, #0]
 800407c:	440b      	add	r3, r1
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	041b      	lsls	r3, r3, #16
 8004082:	4313      	orrs	r3, r2
 8004084:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	3303      	adds	r3, #3
 800408c:	6839      	ldr	r1, [r7, #0]
 800408e:	440b      	add	r3, r1
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	061b      	lsls	r3, r3, #24
 8004094:	4313      	orrs	r3, r2
 8004096:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	3304      	adds	r3, #4
 80040a2:	61bb      	str	r3, [r7, #24]
     return offset;
 80040a4:	69bb      	ldr	r3, [r7, #24]
    }
 80040a6:	4618      	mov	r0, r3
 80040a8:	3728      	adds	r7, #40	; 0x28
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
	...

080040b0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	4b03      	ldr	r3, [pc, #12]	; (80040c8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80040ba:	4618      	mov	r0, r3
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	0801504c 	.word	0x0801504c

080040cc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	4b03      	ldr	r3, [pc, #12]	; (80040e4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80040d6:	4618      	mov	r0, r3
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	08015068 	.word	0x08015068

080040e8 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7ff fd34 	bl	8003b60 <_ZN3ros3MsgC1Ev>
 80040f8:	4a06      	ldr	r2, [pc, #24]	; (8004114 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	601a      	str	r2, [r3, #0]
      level(0),
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	711a      	strb	r2, [r3, #4]
      msg("")
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a04      	ldr	r2, [pc, #16]	; (8004118 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8004108:	609a      	str	r2, [r3, #8]
    {
    }
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4618      	mov	r0, r3
 800410e:	3708      	adds	r7, #8
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	08015524 	.word	0x08015524
 8004118:	08015048 	.word	0x08015048

0800411c <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004126:	2300      	movs	r3, #0
 8004128:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	4413      	add	r3, r2
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	7912      	ldrb	r2, [r2, #4]
 8004134:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	3301      	adds	r3, #1
 800413a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	4618      	mov	r0, r3
 8004142:	f7fc f8a5 	bl	8000290 <strlen>
 8004146:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	4413      	add	r3, r2
 800414e:	68b9      	ldr	r1, [r7, #8]
 8004150:	4618      	mov	r0, r3
 8004152:	f002 feb3 	bl	8006ebc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	3304      	adds	r3, #4
 800415a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	18d0      	adds	r0, r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	68ba      	ldr	r2, [r7, #8]
 8004168:	4619      	mov	r1, r3
 800416a:	f00e fe40 	bl	8012dee <memcpy>
      offset += length_msg;
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	4413      	add	r3, r2
 8004174:	60fb      	str	r3, [r7, #12]
      return offset;
 8004176:	68fb      	ldr	r3, [r7, #12]
    }
 8004178:	4618      	mov	r0, r3
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800418a:	2300      	movs	r3, #0
 800418c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	4413      	add	r3, r2
 8004194:	781a      	ldrb	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	3301      	adds	r3, #1
 800419e:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	441a      	add	r2, r3
 80041a6:	f107 030c 	add.w	r3, r7, #12
 80041aa:	4611      	mov	r1, r2
 80041ac:	4618      	mov	r0, r3
 80041ae:	f002 fea4 	bl	8006efa <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	3304      	adds	r3, #4
 80041b6:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	617b      	str	r3, [r7, #20]
 80041bc:	e00b      	b.n	80041d6 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	441a      	add	r2, r3
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	3b01      	subs	r3, #1
 80041c8:	6839      	ldr	r1, [r7, #0]
 80041ca:	440b      	add	r3, r1
 80041cc:	7812      	ldrb	r2, [r2, #0]
 80041ce:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	3301      	adds	r3, #1
 80041d4:	617b      	str	r3, [r7, #20]
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4413      	add	r3, r2
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d3ed      	bcc.n	80041be <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4413      	add	r3, r2
 80041e8:	3b01      	subs	r3, #1
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	4413      	add	r3, r2
 80041ee:	2200      	movs	r2, #0
 80041f0:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	3b01      	subs	r3, #1
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	441a      	add	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4413      	add	r3, r2
 8004204:	613b      	str	r3, [r7, #16]
     return offset;
 8004206:	693b      	ldr	r3, [r7, #16]
    }
 8004208:	4618      	mov	r0, r3
 800420a:	3718      	adds	r7, #24
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	4b03      	ldr	r3, [pc, #12]	; (8004228 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800421a:	4618      	mov	r0, r3
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	0801508c 	.word	0x0801508c

0800422c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	4b03      	ldr	r3, [pc, #12]	; (8004244 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8004236:	4618      	mov	r0, r3
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	080150a0 	.word	0x080150a0

08004248 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4618      	mov	r0, r3
 8004254:	f7ff fc84 	bl	8003b60 <_ZN3ros3MsgC1Ev>
 8004258:	4a11      	ldr	r2, [pc, #68]	; (80042a0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	605a      	str	r2, [r3, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	609a      	str	r2, [r3, #8]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	611a      	str	r2, [r3, #16]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f04f 0200 	mov.w	r2, #0
 800427c:	615a      	str	r2, [r3, #20]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	61da      	str	r2, [r3, #28]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	621a      	str	r2, [r3, #32]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4618      	mov	r0, r3
 800429a:	3708      	adds	r7, #8
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	0801550c 	.word	0x0801550c

080042a4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b08a      	sub	sp, #40	; 0x28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80042ae:	2300      	movs	r3, #0
 80042b0:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6859      	ldr	r1, [r3, #4]
 80042b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	4413      	add	r3, r2
 80042bc:	b2ca      	uxtb	r2, r1
 80042be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	0a19      	lsrs	r1, r3, #8
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	3301      	adds	r3, #1
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	4413      	add	r3, r2
 80042ce:	b2ca      	uxtb	r2, r1
 80042d0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	0c19      	lsrs	r1, r3, #16
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042da:	3302      	adds	r3, #2
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	4413      	add	r3, r2
 80042e0:	b2ca      	uxtb	r2, r1
 80042e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	0e19      	lsrs	r1, r3, #24
 80042ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ec:	3303      	adds	r3, #3
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	4413      	add	r3, r2
 80042f2:	b2ca      	uxtb	r2, r1
 80042f4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	3304      	adds	r3, #4
 80042fa:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80042fc:	2300      	movs	r3, #0
 80042fe:	623b      	str	r3, [r7, #32]
 8004300:	e02a      	b.n	8004358 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68da      	ldr	r2, [r3, #12]
 8004306:	6a3b      	ldr	r3, [r7, #32]
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4413      	add	r3, r2
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8004310:	6939      	ldr	r1, [r7, #16]
 8004312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	4413      	add	r3, r2
 8004318:	b2ca      	uxtb	r2, r1
 800431a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	0a19      	lsrs	r1, r3, #8
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	3301      	adds	r3, #1
 8004324:	683a      	ldr	r2, [r7, #0]
 8004326:	4413      	add	r3, r2
 8004328:	b2ca      	uxtb	r2, r1
 800432a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	0c19      	lsrs	r1, r3, #16
 8004330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004332:	3302      	adds	r3, #2
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	4413      	add	r3, r2
 8004338:	b2ca      	uxtb	r2, r1
 800433a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	0e19      	lsrs	r1, r3, #24
 8004340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004342:	3303      	adds	r3, #3
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	4413      	add	r3, r2
 8004348:	b2ca      	uxtb	r2, r1
 800434a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434e:	3304      	adds	r3, #4
 8004350:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8004352:	6a3b      	ldr	r3, [r7, #32]
 8004354:	3301      	adds	r3, #1
 8004356:	623b      	str	r3, [r7, #32]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	6a3a      	ldr	r2, [r7, #32]
 800435e:	429a      	cmp	r2, r3
 8004360:	d3cf      	bcc.n	8004302 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6919      	ldr	r1, [r3, #16]
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	4413      	add	r3, r2
 800436c:	b2ca      	uxtb	r2, r1
 800436e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	0a19      	lsrs	r1, r3, #8
 8004376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004378:	3301      	adds	r3, #1
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	4413      	add	r3, r2
 800437e:	b2ca      	uxtb	r2, r1
 8004380:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	0c19      	lsrs	r1, r3, #16
 8004388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438a:	3302      	adds	r3, #2
 800438c:	683a      	ldr	r2, [r7, #0]
 800438e:	4413      	add	r3, r2
 8004390:	b2ca      	uxtb	r2, r1
 8004392:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	0e19      	lsrs	r1, r3, #24
 800439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439c:	3303      	adds	r3, #3
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	4413      	add	r3, r2
 80043a2:	b2ca      	uxtb	r2, r1
 80043a4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	3304      	adds	r3, #4
 80043aa:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80043ac:	2300      	movs	r3, #0
 80043ae:	61fb      	str	r3, [r7, #28]
 80043b0:	e02a      	b.n	8004408 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	699a      	ldr	r2, [r3, #24]
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4413      	add	r3, r2
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80043c0:	68f9      	ldr	r1, [r7, #12]
 80043c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	4413      	add	r3, r2
 80043c8:	b2ca      	uxtb	r2, r1
 80043ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	0a19      	lsrs	r1, r3, #8
 80043d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d2:	3301      	adds	r3, #1
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	4413      	add	r3, r2
 80043d8:	b2ca      	uxtb	r2, r1
 80043da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	0c19      	lsrs	r1, r3, #16
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	3302      	adds	r3, #2
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	4413      	add	r3, r2
 80043e8:	b2ca      	uxtb	r2, r1
 80043ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	0e19      	lsrs	r1, r3, #24
 80043f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f2:	3303      	adds	r3, #3
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	4413      	add	r3, r2
 80043f8:	b2ca      	uxtb	r2, r1
 80043fa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fe:	3304      	adds	r3, #4
 8004400:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	3301      	adds	r3, #1
 8004406:	61fb      	str	r3, [r7, #28]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	69fa      	ldr	r2, [r7, #28]
 800440e:	429a      	cmp	r2, r3
 8004410:	d3cf      	bcc.n	80043b2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	69d9      	ldr	r1, [r3, #28]
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	4413      	add	r3, r2
 800441c:	b2ca      	uxtb	r2, r1
 800441e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	69db      	ldr	r3, [r3, #28]
 8004424:	0a19      	lsrs	r1, r3, #8
 8004426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004428:	3301      	adds	r3, #1
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	4413      	add	r3, r2
 800442e:	b2ca      	uxtb	r2, r1
 8004430:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	0c19      	lsrs	r1, r3, #16
 8004438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443a:	3302      	adds	r3, #2
 800443c:	683a      	ldr	r2, [r7, #0]
 800443e:	4413      	add	r3, r2
 8004440:	b2ca      	uxtb	r2, r1
 8004442:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	69db      	ldr	r3, [r3, #28]
 8004448:	0e19      	lsrs	r1, r3, #24
 800444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444c:	3303      	adds	r3, #3
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	4413      	add	r3, r2
 8004452:	b2ca      	uxtb	r2, r1
 8004454:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8004456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004458:	3304      	adds	r3, #4
 800445a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800445c:	2300      	movs	r3, #0
 800445e:	61bb      	str	r3, [r7, #24]
 8004460:	e027      	b.n	80044b2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4413      	add	r3, r2
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4618      	mov	r0, r3
 8004470:	f7fb ff0e 	bl	8000290 <strlen>
 8004474:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8004476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	4413      	add	r3, r2
 800447c:	6979      	ldr	r1, [r7, #20]
 800447e:	4618      	mov	r0, r3
 8004480:	f002 fd1c 	bl	8006ebc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8004484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004486:	3304      	adds	r3, #4
 8004488:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	18d0      	adds	r0, r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	4619      	mov	r1, r3
 80044a0:	f00e fca5 	bl	8012dee <memcpy>
      offset += length_stringsi;
 80044a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	4413      	add	r3, r2
 80044aa:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	3301      	adds	r3, #1
 80044b0:	61bb      	str	r3, [r7, #24]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d3d2      	bcc.n	8004462 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 80044bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80044be:	4618      	mov	r0, r3
 80044c0:	3728      	adds	r7, #40	; 0x28
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b08e      	sub	sp, #56	; 0x38
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
 80044ce:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80044d0:	2300      	movs	r3, #0
 80044d2:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80044d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	4413      	add	r3, r2
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80044de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e0:	3301      	adds	r3, #1
 80044e2:	683a      	ldr	r2, [r7, #0]
 80044e4:	4413      	add	r3, r2
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	021b      	lsls	r3, r3, #8
 80044ea:	6a3a      	ldr	r2, [r7, #32]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80044f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044f2:	3302      	adds	r3, #2
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	4413      	add	r3, r2
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	041b      	lsls	r3, r3, #16
 80044fc:	6a3a      	ldr	r2, [r7, #32]
 80044fe:	4313      	orrs	r3, r2
 8004500:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8004502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004504:	3303      	adds	r3, #3
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	4413      	add	r3, r2
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	061b      	lsls	r3, r3, #24
 800450e:	6a3a      	ldr	r2, [r7, #32]
 8004510:	4313      	orrs	r3, r2
 8004512:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8004514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004516:	3304      	adds	r3, #4
 8004518:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	6a3a      	ldr	r2, [r7, #32]
 8004520:	429a      	cmp	r2, r3
 8004522:	d90a      	bls.n	800453a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	68da      	ldr	r2, [r3, #12]
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4619      	mov	r1, r3
 800452e:	4610      	mov	r0, r2
 8004530:	f00d fcc2 	bl	8011eb8 <realloc>
 8004534:	4602      	mov	r2, r0
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a3a      	ldr	r2, [r7, #32]
 800453e:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8004540:	2300      	movs	r3, #0
 8004542:	633b      	str	r3, [r7, #48]	; 0x30
 8004544:	e035      	b.n	80045b2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8004546:	2300      	movs	r3, #0
 8004548:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800454e:	6839      	ldr	r1, [r7, #0]
 8004550:	440a      	add	r2, r1
 8004552:	7812      	ldrb	r2, [r2, #0]
 8004554:	4313      	orrs	r3, r2
 8004556:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800455c:	3301      	adds	r3, #1
 800455e:	6839      	ldr	r1, [r7, #0]
 8004560:	440b      	add	r3, r1
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	021b      	lsls	r3, r3, #8
 8004566:	4313      	orrs	r3, r2
 8004568:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800456e:	3302      	adds	r3, #2
 8004570:	6839      	ldr	r1, [r7, #0]
 8004572:	440b      	add	r3, r1
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	041b      	lsls	r3, r3, #16
 8004578:	4313      	orrs	r3, r2
 800457a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004580:	3303      	adds	r3, #3
 8004582:	6839      	ldr	r1, [r7, #0]
 8004584:	440b      	add	r3, r1
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	061b      	lsls	r3, r3, #24
 800458a:	4313      	orrs	r3, r2
 800458c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8004594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004596:	3304      	adds	r3, #4
 8004598:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68da      	ldr	r2, [r3, #12]
 800459e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4413      	add	r3, r2
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	3208      	adds	r2, #8
 80045a8:	6812      	ldr	r2, [r2, #0]
 80045aa:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80045ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ae:	3301      	adds	r3, #1
 80045b0:	633b      	str	r3, [r7, #48]	; 0x30
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d3c4      	bcc.n	8004546 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80045bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045be:	683a      	ldr	r2, [r7, #0]
 80045c0:	4413      	add	r3, r2
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80045c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045c8:	3301      	adds	r3, #1
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	4413      	add	r3, r2
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	021b      	lsls	r3, r3, #8
 80045d2:	69fa      	ldr	r2, [r7, #28]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80045d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045da:	3302      	adds	r3, #2
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	4413      	add	r3, r2
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	041b      	lsls	r3, r3, #16
 80045e4:	69fa      	ldr	r2, [r7, #28]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80045ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ec:	3303      	adds	r3, #3
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	4413      	add	r3, r2
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	061b      	lsls	r3, r3, #24
 80045f6:	69fa      	ldr	r2, [r7, #28]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80045fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045fe:	3304      	adds	r3, #4
 8004600:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	69fa      	ldr	r2, [r7, #28]
 8004608:	429a      	cmp	r2, r3
 800460a:	d90a      	bls.n	8004622 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	699a      	ldr	r2, [r3, #24]
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4619      	mov	r1, r3
 8004616:	4610      	mov	r0, r2
 8004618:	f00d fc4e 	bl	8011eb8 <realloc>
 800461c:	4602      	mov	r2, r0
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	69fa      	ldr	r2, [r7, #28]
 8004626:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8004628:	2300      	movs	r3, #0
 800462a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800462c:	e035      	b.n	800469a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800462e:	2300      	movs	r3, #0
 8004630:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004636:	6839      	ldr	r1, [r7, #0]
 8004638:	440a      	add	r2, r1
 800463a:	7812      	ldrb	r2, [r2, #0]
 800463c:	4313      	orrs	r3, r2
 800463e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004644:	3301      	adds	r3, #1
 8004646:	6839      	ldr	r1, [r7, #0]
 8004648:	440b      	add	r3, r1
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	021b      	lsls	r3, r3, #8
 800464e:	4313      	orrs	r3, r2
 8004650:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004656:	3302      	adds	r3, #2
 8004658:	6839      	ldr	r1, [r7, #0]
 800465a:	440b      	add	r3, r1
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	041b      	lsls	r3, r3, #16
 8004660:	4313      	orrs	r3, r2
 8004662:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004668:	3303      	adds	r3, #3
 800466a:	6839      	ldr	r1, [r7, #0]
 800466c:	440b      	add	r3, r1
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	061b      	lsls	r3, r3, #24
 8004672:	4313      	orrs	r3, r2
 8004674:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 800467c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800467e:	3304      	adds	r3, #4
 8004680:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	699a      	ldr	r2, [r3, #24]
 8004686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	4413      	add	r3, r2
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	3214      	adds	r2, #20
 8004690:	6812      	ldr	r2, [r2, #0]
 8004692:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8004694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004696:	3301      	adds	r3, #1
 8004698:	62fb      	str	r3, [r7, #44]	; 0x2c
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d3c4      	bcc.n	800462e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80046a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	4413      	add	r3, r2
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80046ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b0:	3301      	adds	r3, #1
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	4413      	add	r3, r2
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	021b      	lsls	r3, r3, #8
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	4313      	orrs	r3, r2
 80046be:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80046c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046c2:	3302      	adds	r3, #2
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	4413      	add	r3, r2
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	041b      	lsls	r3, r3, #16
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80046d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046d4:	3303      	adds	r3, #3
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	4413      	add	r3, r2
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	061b      	lsls	r3, r3, #24
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80046e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e6:	3304      	adds	r3, #4
 80046e8:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d90a      	bls.n	800470a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4619      	mov	r1, r3
 80046fe:	4610      	mov	r0, r2
 8004700:	f00d fbda 	bl	8011eb8 <realloc>
 8004704:	4602      	mov	r2, r0
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8004710:	2300      	movs	r3, #0
 8004712:	62bb      	str	r3, [r7, #40]	; 0x28
 8004714:	e03e      	b.n	8004794 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8004716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	441a      	add	r2, r3
 800471c:	f107 030c 	add.w	r3, r7, #12
 8004720:	4611      	mov	r1, r2
 8004722:	4618      	mov	r0, r3
 8004724:	f002 fbe9 	bl	8006efa <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8004728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800472a:	3304      	adds	r3, #4
 800472c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800472e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004730:	627b      	str	r3, [r7, #36]	; 0x24
 8004732:	e00b      	b.n	800474c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004738:	441a      	add	r2, r3
 800473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473c:	3b01      	subs	r3, #1
 800473e:	6839      	ldr	r1, [r7, #0]
 8004740:	440b      	add	r3, r1
 8004742:	7812      	ldrb	r2, [r2, #0]
 8004744:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8004746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004748:	3301      	adds	r3, #1
 800474a:	627b      	str	r3, [r7, #36]	; 0x24
 800474c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	4413      	add	r3, r2
 8004752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004754:	429a      	cmp	r2, r3
 8004756:	d3ed      	bcc.n	8004734 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8004758:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	4413      	add	r3, r2
 800475e:	3b01      	subs	r3, #1
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	4413      	add	r3, r2
 8004764:	2200      	movs	r2, #0
 8004766:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8004768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800476a:	3b01      	subs	r3, #1
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	441a      	add	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8004774:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	4413      	add	r3, r2
 800477a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4413      	add	r3, r2
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	3220      	adds	r2, #32
 800478a:	6812      	ldr	r2, [r2, #0]
 800478c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800478e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004790:	3301      	adds	r3, #1
 8004792:	62bb      	str	r3, [r7, #40]	; 0x28
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	69db      	ldr	r3, [r3, #28]
 8004798:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800479a:	429a      	cmp	r2, r3
 800479c:	d3bb      	bcc.n	8004716 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 800479e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80047a0:	4618      	mov	r0, r3
 80047a2:	3738      	adds	r7, #56	; 0x38
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	4b03      	ldr	r3, [pc, #12]	; (80047c0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80047b2:	4618      	mov	r0, r3
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	080153d0 	.word	0x080153d0

080047c4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	4b03      	ldr	r3, [pc, #12]	; (80047dc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80047ce:	4618      	mov	r0, r3
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	080150c4 	.word	0x080150c4

080047e0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
 80047ec:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	601a      	str	r2, [r3, #0]
    msg_(msg),
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	611a      	str	r2, [r3, #16]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4618      	mov	r0, r3
 8004804:	3714      	adds	r7, #20
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800480e:	b580      	push	{r7, lr}
 8004810:	b082      	sub	sp, #8
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
 8004816:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68d8      	ldr	r0, [r3, #12]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	6891      	ldr	r1, [r2, #8]
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	4798      	blx	r3
 800482c:	4603      	mov	r3, r0
  };
 800482e:	4618      	mov	r0, r3
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	691b      	ldr	r3, [r3, #16]
  }
 8004842:	4618      	mov	r0, r3
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 1024;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8004864:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004868:	4618      	mov	r0, r3
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 1024;//512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a0a      	ldr	r2, [pc, #40]	; (80048a8 <_ZN13STM32HardwareC1Ev+0x34>)
 8004880:	601a      	str	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
    }
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4618      	mov	r0, r3
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr
 80048a8:	2000049c 	.word	0x2000049c

080048ac <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 f804 	bl	80048c2 <_ZN13STM32Hardware10reset_rbufEv>
    }
 80048ba:	bf00      	nop
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b082      	sub	sp, #8
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6818      	ldr	r0, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	3304      	adds	r3, #4
 80048d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048d6:	4619      	mov	r1, r3
 80048d8:	f007 fca8 	bl	800c22c <HAL_UART_Receive_DMA>
    }
 80048dc:	bf00      	nop
 80048de:	3708      	adds	r7, #8
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <_ZN13STM32Hardware4readEv>:

    int read(){
 80048e4:	b590      	push	{r4, r7, lr}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
      int c = -1;
 80048ec:	f04f 33ff 	mov.w	r3, #4294967295
 80048f0:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f8d3 4404 	ldr.w	r4, [r3, #1028]	; 0x404
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f7ff ffa8 	bl	800484e <_ZN13STM32Hardware10getRdmaIndEv>
 80048fe:	4603      	mov	r3, r0
 8004900:	429c      	cmp	r4, r3
 8004902:	bf14      	ite	ne
 8004904:	2301      	movne	r3, #1
 8004906:	2300      	moveq	r3, #0
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d012      	beq.n	8004934 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004914:	1c59      	adds	r1, r3, #1
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	4413      	add	r3, r2
 8004920:	791b      	ldrb	r3, [r3, #4]
 8004922:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800492a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      }
      return c;
 8004934:	68fb      	ldr	r3, [r7, #12]
    }
 8004936:	4618      	mov	r0, r3
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	bd90      	pop	{r4, r7, pc}
	...

08004940 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b20      	cmp	r3, #32
 8004954:	d108      	bne.n	8004968 <_ZN13STM32Hardware5flushEv+0x28>
 8004956:	4b28      	ldr	r3, [pc, #160]	; (80049f8 <_ZN13STM32Hardware5flushEv+0xb8>)
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	f083 0301 	eor.w	r3, r3, #1
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b00      	cmp	r3, #0
 8004962:	d001      	beq.n	8004968 <_ZN13STM32Hardware5flushEv+0x28>
 8004964:	2301      	movs	r3, #1
 8004966:	e000      	b.n	800496a <_ZN13STM32Hardware5flushEv+0x2a>
 8004968:	2300      	movs	r3, #0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d03f      	beq.n	80049ee <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 800496e:	4b22      	ldr	r3, [pc, #136]	; (80049f8 <_ZN13STM32Hardware5flushEv+0xb8>)
 8004970:	2201      	movs	r2, #1
 8004972:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8004980:	429a      	cmp	r2, r3
 8004982:	d031      	beq.n	80049e8 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8004990:	429a      	cmp	r2, r3
 8004992:	d20a      	bcs.n	80049aa <_ZN13STM32Hardware5flushEv+0x6a>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800499a:	b29a      	uxth	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	e006      	b.n	80049b8 <_ZN13STM32Hardware5flushEv+0x78>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6818      	ldr	r0, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 80049c4:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	4413      	add	r3, r2
 80049cc:	89fa      	ldrh	r2, [r7, #14]
 80049ce:	4619      	mov	r1, r3
 80049d0:	f007 fbbc 	bl	800c14c <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 80049da:	89fb      	ldrh	r3, [r7, #14]
 80049dc:	4413      	add	r3, r2
 80049de:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
        }
        mutex = false;
 80049e8:	4b03      	ldr	r3, [pc, #12]	; (80049f8 <_ZN13STM32Hardware5flushEv+0xb8>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	701a      	strb	r2, [r3, #0]
      }
    }
 80049ee:	bf00      	nop
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	20000aa8 	.word	0x20000aa8

080049fc <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
          long n = length;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	617b      	str	r3, [r7, #20]
          n = n <= tbuflen ? n : tbuflen;
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a12:	bfa8      	it	ge
 8004a14:	f44f 6380 	movge.w	r3, #1024	; 0x400
 8004a18:	617b      	str	r3, [r7, #20]

          long n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8004a20:	f5c3 6280 	rsb	r2, r3, #1024	; 0x400
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	4293      	cmp	r3, r2
 8004a28:	bf28      	it	cs
 8004a2a:	4613      	movcs	r3, r2
 8004a2c:	613b      	str	r3, [r7, #16]
          memcpy(&(tbuf[twind]), data, n_tail);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8004a34:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	68b9      	ldr	r1, [r7, #8]
 8004a40:	4618      	mov	r0, r3
 8004a42:	f00e f9d4 	bl	8012dee <memcpy>
          twind = (twind + n) & (tbuflen - 1);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	4413      	add	r3, r2
 8004a50:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808

          if(n != n_tail){
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d00b      	beq.n	8004a7a <_ZN13STM32Hardware5writeEPhi+0x7e>
            memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f503 6081 	add.w	r0, r3, #1032	; 0x408
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	18d1      	adds	r1, r2, r3
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	461a      	mov	r2, r3
 8004a76:	f00e f9ba 	bl	8012dee <memcpy>
          }

          flush();
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f7ff ff60 	bl	8004940 <_ZN13STM32Hardware5flushEv>
        }
 8004a80:	bf00      	nop
 8004a82:	3718      	adds	r7, #24
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	f003 fe66 	bl	8008760 <HAL_GetTick>
 8004a94:	4603      	mov	r3, r0
 8004a96:	4618      	mov	r0, r3
 8004a98:	3708      	adds	r7, #8
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
	...

08004aa0 <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef double _z_type;
      _z_type z;
      typedef double _w_type;
      _w_type w;

    Quaternion():
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7ff f858 	bl	8003b60 <_ZN3ros3MsgC1Ev>
 8004ab0:	4a11      	ldr	r2, [pc, #68]	; (8004af8 <_ZN13geometry_msgs10QuaternionC1Ev+0x58>)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	601a      	str	r2, [r3, #0]
      x(0),
 8004ab6:	6879      	ldr	r1, [r7, #4]
 8004ab8:	f04f 0200 	mov.w	r2, #0
 8004abc:	f04f 0300 	mov.w	r3, #0
 8004ac0:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 8004ac4:	6879      	ldr	r1, [r7, #4]
 8004ac6:	f04f 0200 	mov.w	r2, #0
 8004aca:	f04f 0300 	mov.w	r3, #0
 8004ace:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0),
 8004ad2:	6879      	ldr	r1, [r7, #4]
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	f04f 0300 	mov.w	r3, #0
 8004adc:	e9c1 2306 	strd	r2, r3, [r1, #24]
      w(0)
 8004ae0:	6879      	ldr	r1, [r7, #4]
 8004ae2:	f04f 0200 	mov.w	r2, #0
 8004ae6:	f04f 0300 	mov.w	r3, #0
 8004aea:	e9c1 2308 	strd	r2, r3, [r1, #32]
    {
    }
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4618      	mov	r0, r3
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	080154c8 	.word	0x080154c8

08004afc <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004afc:	b480      	push	{r7}
 8004afe:	b08d      	sub	sp, #52	; 0x34
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004b06:	2300      	movs	r3, #0
 8004b08:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004b10:	e9c7 2308 	strd	r2, r3, [r7, #32]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8004b14:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b1a:	6838      	ldr	r0, [r7, #0]
 8004b1c:	4401      	add	r1, r0
 8004b1e:	b2d3      	uxtb	r3, r2
 8004b20:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8004b22:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004b26:	f04f 0200 	mov.w	r2, #0
 8004b2a:	f04f 0300 	mov.w	r3, #0
 8004b2e:	0a02      	lsrs	r2, r0, #8
 8004b30:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004b34:	0a0b      	lsrs	r3, r1, #8
 8004b36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b38:	3101      	adds	r1, #1
 8004b3a:	6838      	ldr	r0, [r7, #0]
 8004b3c:	4401      	add	r1, r0
 8004b3e:	b2d3      	uxtb	r3, r2
 8004b40:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8004b42:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004b46:	f04f 0200 	mov.w	r2, #0
 8004b4a:	f04f 0300 	mov.w	r3, #0
 8004b4e:	0c02      	lsrs	r2, r0, #16
 8004b50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004b54:	0c0b      	lsrs	r3, r1, #16
 8004b56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b58:	3102      	adds	r1, #2
 8004b5a:	6838      	ldr	r0, [r7, #0]
 8004b5c:	4401      	add	r1, r0
 8004b5e:	b2d3      	uxtb	r3, r2
 8004b60:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8004b62:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004b66:	f04f 0200 	mov.w	r2, #0
 8004b6a:	f04f 0300 	mov.w	r3, #0
 8004b6e:	0e02      	lsrs	r2, r0, #24
 8004b70:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004b74:	0e0b      	lsrs	r3, r1, #24
 8004b76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b78:	3103      	adds	r1, #3
 8004b7a:	6838      	ldr	r0, [r7, #0]
 8004b7c:	4401      	add	r1, r0
 8004b7e:	b2d3      	uxtb	r3, r2
 8004b80:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8004b82:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004b86:	f04f 0200 	mov.w	r2, #0
 8004b8a:	f04f 0300 	mov.w	r3, #0
 8004b8e:	000a      	movs	r2, r1
 8004b90:	2300      	movs	r3, #0
 8004b92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b94:	3104      	adds	r1, #4
 8004b96:	6838      	ldr	r0, [r7, #0]
 8004b98:	4401      	add	r1, r0
 8004b9a:	b2d3      	uxtb	r3, r2
 8004b9c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8004b9e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004ba2:	f04f 0200 	mov.w	r2, #0
 8004ba6:	f04f 0300 	mov.w	r3, #0
 8004baa:	0a0a      	lsrs	r2, r1, #8
 8004bac:	2300      	movs	r3, #0
 8004bae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bb0:	3105      	adds	r1, #5
 8004bb2:	6838      	ldr	r0, [r7, #0]
 8004bb4:	4401      	add	r1, r0
 8004bb6:	b2d3      	uxtb	r3, r2
 8004bb8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8004bba:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004bbe:	f04f 0200 	mov.w	r2, #0
 8004bc2:	f04f 0300 	mov.w	r3, #0
 8004bc6:	0c0a      	lsrs	r2, r1, #16
 8004bc8:	2300      	movs	r3, #0
 8004bca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bcc:	3106      	adds	r1, #6
 8004bce:	6838      	ldr	r0, [r7, #0]
 8004bd0:	4401      	add	r1, r0
 8004bd2:	b2d3      	uxtb	r3, r2
 8004bd4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8004bd6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004bda:	f04f 0200 	mov.w	r2, #0
 8004bde:	f04f 0300 	mov.w	r3, #0
 8004be2:	0e0a      	lsrs	r2, r1, #24
 8004be4:	2300      	movs	r3, #0
 8004be6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004be8:	3107      	adds	r1, #7
 8004bea:	6838      	ldr	r0, [r7, #0]
 8004bec:	4401      	add	r1, r0
 8004bee:	b2d3      	uxtb	r3, r2
 8004bf0:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8004bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf4:	3308      	adds	r3, #8
 8004bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004bfe:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8004c02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c08:	6838      	ldr	r0, [r7, #0]
 8004c0a:	4401      	add	r1, r0
 8004c0c:	b2d3      	uxtb	r3, r2
 8004c0e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8004c10:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004c14:	f04f 0200 	mov.w	r2, #0
 8004c18:	f04f 0300 	mov.w	r3, #0
 8004c1c:	0a02      	lsrs	r2, r0, #8
 8004c1e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004c22:	0a0b      	lsrs	r3, r1, #8
 8004c24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c26:	3101      	adds	r1, #1
 8004c28:	6838      	ldr	r0, [r7, #0]
 8004c2a:	4401      	add	r1, r0
 8004c2c:	b2d3      	uxtb	r3, r2
 8004c2e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8004c30:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004c34:	f04f 0200 	mov.w	r2, #0
 8004c38:	f04f 0300 	mov.w	r3, #0
 8004c3c:	0c02      	lsrs	r2, r0, #16
 8004c3e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004c42:	0c0b      	lsrs	r3, r1, #16
 8004c44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c46:	3102      	adds	r1, #2
 8004c48:	6838      	ldr	r0, [r7, #0]
 8004c4a:	4401      	add	r1, r0
 8004c4c:	b2d3      	uxtb	r3, r2
 8004c4e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8004c50:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004c54:	f04f 0200 	mov.w	r2, #0
 8004c58:	f04f 0300 	mov.w	r3, #0
 8004c5c:	0e02      	lsrs	r2, r0, #24
 8004c5e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004c62:	0e0b      	lsrs	r3, r1, #24
 8004c64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c66:	3103      	adds	r1, #3
 8004c68:	6838      	ldr	r0, [r7, #0]
 8004c6a:	4401      	add	r1, r0
 8004c6c:	b2d3      	uxtb	r3, r2
 8004c6e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8004c70:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004c74:	f04f 0200 	mov.w	r2, #0
 8004c78:	f04f 0300 	mov.w	r3, #0
 8004c7c:	000a      	movs	r2, r1
 8004c7e:	2300      	movs	r3, #0
 8004c80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c82:	3104      	adds	r1, #4
 8004c84:	6838      	ldr	r0, [r7, #0]
 8004c86:	4401      	add	r1, r0
 8004c88:	b2d3      	uxtb	r3, r2
 8004c8a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8004c8c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004c90:	f04f 0200 	mov.w	r2, #0
 8004c94:	f04f 0300 	mov.w	r3, #0
 8004c98:	0a0a      	lsrs	r2, r1, #8
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c9e:	3105      	adds	r1, #5
 8004ca0:	6838      	ldr	r0, [r7, #0]
 8004ca2:	4401      	add	r1, r0
 8004ca4:	b2d3      	uxtb	r3, r2
 8004ca6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8004ca8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004cac:	f04f 0200 	mov.w	r2, #0
 8004cb0:	f04f 0300 	mov.w	r3, #0
 8004cb4:	0c0a      	lsrs	r2, r1, #16
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cba:	3106      	adds	r1, #6
 8004cbc:	6838      	ldr	r0, [r7, #0]
 8004cbe:	4401      	add	r1, r0
 8004cc0:	b2d3      	uxtb	r3, r2
 8004cc2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8004cc4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004cc8:	f04f 0200 	mov.w	r2, #0
 8004ccc:	f04f 0300 	mov.w	r3, #0
 8004cd0:	0e0a      	lsrs	r2, r1, #24
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cd6:	3107      	adds	r1, #7
 8004cd8:	6838      	ldr	r0, [r7, #0]
 8004cda:	4401      	add	r1, r0
 8004cdc:	b2d3      	uxtb	r3, r2
 8004cde:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8004ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce2:	3308      	adds	r3, #8
 8004ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004cec:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8004cf0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004cf4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cf6:	6838      	ldr	r0, [r7, #0]
 8004cf8:	4401      	add	r1, r0
 8004cfa:	b2d3      	uxtb	r3, r2
 8004cfc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8004cfe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004d02:	f04f 0200 	mov.w	r2, #0
 8004d06:	f04f 0300 	mov.w	r3, #0
 8004d0a:	0a02      	lsrs	r2, r0, #8
 8004d0c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004d10:	0a0b      	lsrs	r3, r1, #8
 8004d12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d14:	3101      	adds	r1, #1
 8004d16:	6838      	ldr	r0, [r7, #0]
 8004d18:	4401      	add	r1, r0
 8004d1a:	b2d3      	uxtb	r3, r2
 8004d1c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8004d1e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004d22:	f04f 0200 	mov.w	r2, #0
 8004d26:	f04f 0300 	mov.w	r3, #0
 8004d2a:	0c02      	lsrs	r2, r0, #16
 8004d2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004d30:	0c0b      	lsrs	r3, r1, #16
 8004d32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d34:	3102      	adds	r1, #2
 8004d36:	6838      	ldr	r0, [r7, #0]
 8004d38:	4401      	add	r1, r0
 8004d3a:	b2d3      	uxtb	r3, r2
 8004d3c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8004d3e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004d42:	f04f 0200 	mov.w	r2, #0
 8004d46:	f04f 0300 	mov.w	r3, #0
 8004d4a:	0e02      	lsrs	r2, r0, #24
 8004d4c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004d50:	0e0b      	lsrs	r3, r1, #24
 8004d52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d54:	3103      	adds	r1, #3
 8004d56:	6838      	ldr	r0, [r7, #0]
 8004d58:	4401      	add	r1, r0
 8004d5a:	b2d3      	uxtb	r3, r2
 8004d5c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8004d5e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004d62:	f04f 0200 	mov.w	r2, #0
 8004d66:	f04f 0300 	mov.w	r3, #0
 8004d6a:	000a      	movs	r2, r1
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d70:	3104      	adds	r1, #4
 8004d72:	6838      	ldr	r0, [r7, #0]
 8004d74:	4401      	add	r1, r0
 8004d76:	b2d3      	uxtb	r3, r2
 8004d78:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8004d7a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004d7e:	f04f 0200 	mov.w	r2, #0
 8004d82:	f04f 0300 	mov.w	r3, #0
 8004d86:	0a0a      	lsrs	r2, r1, #8
 8004d88:	2300      	movs	r3, #0
 8004d8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d8c:	3105      	adds	r1, #5
 8004d8e:	6838      	ldr	r0, [r7, #0]
 8004d90:	4401      	add	r1, r0
 8004d92:	b2d3      	uxtb	r3, r2
 8004d94:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8004d96:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004d9a:	f04f 0200 	mov.w	r2, #0
 8004d9e:	f04f 0300 	mov.w	r3, #0
 8004da2:	0c0a      	lsrs	r2, r1, #16
 8004da4:	2300      	movs	r3, #0
 8004da6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004da8:	3106      	adds	r1, #6
 8004daa:	6838      	ldr	r0, [r7, #0]
 8004dac:	4401      	add	r1, r0
 8004dae:	b2d3      	uxtb	r3, r2
 8004db0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8004db2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004db6:	f04f 0200 	mov.w	r2, #0
 8004dba:	f04f 0300 	mov.w	r3, #0
 8004dbe:	0e0a      	lsrs	r2, r1, #24
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dc4:	3107      	adds	r1, #7
 8004dc6:	6838      	ldr	r0, [r7, #0]
 8004dc8:	4401      	add	r1, r0
 8004dca:	b2d3      	uxtb	r3, r2
 8004dcc:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8004dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd0:	3308      	adds	r3, #8
 8004dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.real = this->w;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004dda:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_w.base >> (8 * 0)) & 0xFF;
 8004dde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004de2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004de4:	6838      	ldr	r0, [r7, #0]
 8004de6:	4401      	add	r1, r0
 8004de8:	b2d3      	uxtb	r3, r2
 8004dea:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_w.base >> (8 * 1)) & 0xFF;
 8004dec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004df0:	f04f 0200 	mov.w	r2, #0
 8004df4:	f04f 0300 	mov.w	r3, #0
 8004df8:	0a02      	lsrs	r2, r0, #8
 8004dfa:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004dfe:	0a0b      	lsrs	r3, r1, #8
 8004e00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e02:	3101      	adds	r1, #1
 8004e04:	6838      	ldr	r0, [r7, #0]
 8004e06:	4401      	add	r1, r0
 8004e08:	b2d3      	uxtb	r3, r2
 8004e0a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_w.base >> (8 * 2)) & 0xFF;
 8004e0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e10:	f04f 0200 	mov.w	r2, #0
 8004e14:	f04f 0300 	mov.w	r3, #0
 8004e18:	0c02      	lsrs	r2, r0, #16
 8004e1a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004e1e:	0c0b      	lsrs	r3, r1, #16
 8004e20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e22:	3102      	adds	r1, #2
 8004e24:	6838      	ldr	r0, [r7, #0]
 8004e26:	4401      	add	r1, r0
 8004e28:	b2d3      	uxtb	r3, r2
 8004e2a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_w.base >> (8 * 3)) & 0xFF;
 8004e2c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e30:	f04f 0200 	mov.w	r2, #0
 8004e34:	f04f 0300 	mov.w	r3, #0
 8004e38:	0e02      	lsrs	r2, r0, #24
 8004e3a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004e3e:	0e0b      	lsrs	r3, r1, #24
 8004e40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e42:	3103      	adds	r1, #3
 8004e44:	6838      	ldr	r0, [r7, #0]
 8004e46:	4401      	add	r1, r0
 8004e48:	b2d3      	uxtb	r3, r2
 8004e4a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_w.base >> (8 * 4)) & 0xFF;
 8004e4c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e50:	f04f 0200 	mov.w	r2, #0
 8004e54:	f04f 0300 	mov.w	r3, #0
 8004e58:	000a      	movs	r2, r1
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e5e:	3104      	adds	r1, #4
 8004e60:	6838      	ldr	r0, [r7, #0]
 8004e62:	4401      	add	r1, r0
 8004e64:	b2d3      	uxtb	r3, r2
 8004e66:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_w.base >> (8 * 5)) & 0xFF;
 8004e68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e6c:	f04f 0200 	mov.w	r2, #0
 8004e70:	f04f 0300 	mov.w	r3, #0
 8004e74:	0a0a      	lsrs	r2, r1, #8
 8004e76:	2300      	movs	r3, #0
 8004e78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e7a:	3105      	adds	r1, #5
 8004e7c:	6838      	ldr	r0, [r7, #0]
 8004e7e:	4401      	add	r1, r0
 8004e80:	b2d3      	uxtb	r3, r2
 8004e82:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_w.base >> (8 * 6)) & 0xFF;
 8004e84:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e88:	f04f 0200 	mov.w	r2, #0
 8004e8c:	f04f 0300 	mov.w	r3, #0
 8004e90:	0c0a      	lsrs	r2, r1, #16
 8004e92:	2300      	movs	r3, #0
 8004e94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e96:	3106      	adds	r1, #6
 8004e98:	6838      	ldr	r0, [r7, #0]
 8004e9a:	4401      	add	r1, r0
 8004e9c:	b2d3      	uxtb	r3, r2
 8004e9e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_w.base >> (8 * 7)) & 0xFF;
 8004ea0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004ea4:	f04f 0200 	mov.w	r2, #0
 8004ea8:	f04f 0300 	mov.w	r3, #0
 8004eac:	0e0a      	lsrs	r2, r1, #24
 8004eae:	2300      	movs	r3, #0
 8004eb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004eb2:	3107      	adds	r1, #7
 8004eb4:	6838      	ldr	r0, [r7, #0]
 8004eb6:	4401      	add	r1, r0
 8004eb8:	b2d3      	uxtb	r3, r2
 8004eba:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->w);
 8004ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ebe:	3308      	adds	r3, #8
 8004ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
      return offset;
 8004ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3734      	adds	r7, #52	; 0x34
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004ed0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004ed4:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
 8004ede:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
    {
      int offset = 0;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8004ee8:	f04f 0200 	mov.w	r2, #0
 8004eec:	f04f 0300 	mov.w	r3, #0
 8004ef0:	e9c7 238a 	strd	r2, r3, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004ef4:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8004ef8:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8004efc:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004f00:	4413      	add	r3, r2
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2200      	movs	r2, #0
 8004f08:	461c      	mov	r4, r3
 8004f0a:	4615      	mov	r5, r2
 8004f0c:	ea40 0804 	orr.w	r8, r0, r4
 8004f10:	ea41 0905 	orr.w	r9, r1, r5
 8004f14:	e9c7 898a 	strd	r8, r9, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004f18:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8004f1c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004f20:	1c5a      	adds	r2, r3, #1
 8004f22:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004f26:	4413      	add	r3, r2
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	469a      	mov	sl, r3
 8004f30:	4693      	mov	fp, r2
 8004f32:	f04f 0200 	mov.w	r2, #0
 8004f36:	f04f 0300 	mov.w	r3, #0
 8004f3a:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8004f3e:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8004f42:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8004f46:	ea40 0402 	orr.w	r4, r0, r2
 8004f4a:	f8c7 4200 	str.w	r4, [r7, #512]	; 0x200
 8004f4e:	430b      	orrs	r3, r1
 8004f50:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8004f54:	e9d7 3480 	ldrd	r3, r4, [r7, #512]	; 0x200
 8004f58:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004f5c:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8004f60:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004f64:	1c9a      	adds	r2, r3, #2
 8004f66:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004f6a:	4413      	add	r3, r2
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2200      	movs	r2, #0
 8004f72:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8004f76:	f8c7 21fc 	str.w	r2, [r7, #508]	; 0x1fc
 8004f7a:	f04f 0200 	mov.w	r2, #0
 8004f7e:	f04f 0300 	mov.w	r3, #0
 8004f82:	e9d7 897e 	ldrd	r8, r9, [r7, #504]	; 0x1f8
 8004f86:	464c      	mov	r4, r9
 8004f88:	0423      	lsls	r3, r4, #16
 8004f8a:	4644      	mov	r4, r8
 8004f8c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8004f90:	4644      	mov	r4, r8
 8004f92:	0422      	lsls	r2, r4, #16
 8004f94:	ea40 0402 	orr.w	r4, r0, r2
 8004f98:	f8c7 41f0 	str.w	r4, [r7, #496]	; 0x1f0
 8004f9c:	430b      	orrs	r3, r1
 8004f9e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8004fa2:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8004fa6:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004faa:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8004fae:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004fb2:	1cda      	adds	r2, r3, #3
 8004fb4:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004fb8:	4413      	add	r3, r2
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004fc4:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
 8004fc8:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	; 0x1e8
 8004fcc:	4623      	mov	r3, r4
 8004fce:	0a1b      	lsrs	r3, r3, #8
 8004fd0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004fd4:	4623      	mov	r3, r4
 8004fd6:	061b      	lsls	r3, r3, #24
 8004fd8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004fdc:	e9d7 4578 	ldrd	r4, r5, [r7, #480]	; 0x1e0
 8004fe0:	4623      	mov	r3, r4
 8004fe2:	4303      	orrs	r3, r0
 8004fe4:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8004fe8:	462b      	mov	r3, r5
 8004fea:	430b      	orrs	r3, r1
 8004fec:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004ff0:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8004ff4:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004ff8:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8004ffc:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005000:	1d1a      	adds	r2, r3, #4
 8005002:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8005006:	4413      	add	r3, r2
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2200      	movs	r2, #0
 800500e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8005012:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
 8005016:	f04f 0200 	mov.w	r2, #0
 800501a:	f04f 0300 	mov.w	r3, #0
 800501e:	f8d7 41d0 	ldr.w	r4, [r7, #464]	; 0x1d0
 8005022:	0023      	movs	r3, r4
 8005024:	2200      	movs	r2, #0
 8005026:	ea40 0402 	orr.w	r4, r0, r2
 800502a:	f8c7 41c8 	str.w	r4, [r7, #456]	; 0x1c8
 800502e:	430b      	orrs	r3, r1
 8005030:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8005034:	e9d7 3472 	ldrd	r3, r4, [r7, #456]	; 0x1c8
 8005038:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800503c:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8005040:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005044:	1d5a      	adds	r2, r3, #5
 8005046:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800504a:	4413      	add	r3, r2
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2200      	movs	r2, #0
 8005052:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005056:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 800505a:	f04f 0200 	mov.w	r2, #0
 800505e:	f04f 0300 	mov.w	r3, #0
 8005062:	f8d7 41c0 	ldr.w	r4, [r7, #448]	; 0x1c0
 8005066:	0223      	lsls	r3, r4, #8
 8005068:	2200      	movs	r2, #0
 800506a:	ea40 0402 	orr.w	r4, r0, r2
 800506e:	f8c7 41b8 	str.w	r4, [r7, #440]	; 0x1b8
 8005072:	430b      	orrs	r3, r1
 8005074:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8005078:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	; 0x1b8
 800507c:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005080:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8005084:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005088:	1d9a      	adds	r2, r3, #6
 800508a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800508e:	4413      	add	r3, r2
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2200      	movs	r2, #0
 8005096:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 800509a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 800509e:	f04f 0200 	mov.w	r2, #0
 80050a2:	f04f 0300 	mov.w	r3, #0
 80050a6:	f8d7 41b0 	ldr.w	r4, [r7, #432]	; 0x1b0
 80050aa:	0423      	lsls	r3, r4, #16
 80050ac:	2200      	movs	r2, #0
 80050ae:	ea40 0402 	orr.w	r4, r0, r2
 80050b2:	f8c7 41a8 	str.w	r4, [r7, #424]	; 0x1a8
 80050b6:	430b      	orrs	r3, r1
 80050b8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 80050bc:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 80050c0:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80050c4:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 80050c8:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80050cc:	1dda      	adds	r2, r3, #7
 80050ce:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80050d2:	4413      	add	r3, r2
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	2200      	movs	r2, #0
 80050da:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80050de:	f8c7 21a4 	str.w	r2, [r7, #420]	; 0x1a4
 80050e2:	f04f 0200 	mov.w	r2, #0
 80050e6:	f04f 0300 	mov.w	r3, #0
 80050ea:	f8d7 41a0 	ldr.w	r4, [r7, #416]	; 0x1a0
 80050ee:	0623      	lsls	r3, r4, #24
 80050f0:	2200      	movs	r2, #0
 80050f2:	ea40 0402 	orr.w	r4, r0, r2
 80050f6:	f8c7 4198 	str.w	r4, [r7, #408]	; 0x198
 80050fa:	430b      	orrs	r3, r1
 80050fc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8005100:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	; 0x198
 8005104:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      this->x = u_x.real;
 8005108:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 800510c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005110:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8005114:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005118:	3308      	adds	r3, #8
 800511a:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 800511e:	f04f 0200 	mov.w	r2, #0
 8005122:	f04f 0300 	mov.w	r3, #0
 8005126:	e9c7 2388 	strd	r2, r3, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800512a:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 800512e:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8005132:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8005136:	4413      	add	r3, r2
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	b2db      	uxtb	r3, r3
 800513c:	2200      	movs	r2, #0
 800513e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8005142:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8005146:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	; 0x190
 800514a:	4623      	mov	r3, r4
 800514c:	4303      	orrs	r3, r0
 800514e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8005152:	462b      	mov	r3, r5
 8005154:	430b      	orrs	r3, r1
 8005156:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800515a:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 800515e:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005162:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8005166:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800516a:	1c5a      	adds	r2, r3, #1
 800516c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8005170:	4413      	add	r3, r2
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2200      	movs	r2, #0
 8005178:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800517c:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8005180:	f04f 0200 	mov.w	r2, #0
 8005184:	f04f 0300 	mov.w	r3, #0
 8005188:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	; 0x180
 800518c:	464c      	mov	r4, r9
 800518e:	0223      	lsls	r3, r4, #8
 8005190:	4644      	mov	r4, r8
 8005192:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005196:	4644      	mov	r4, r8
 8005198:	0222      	lsls	r2, r4, #8
 800519a:	ea40 0402 	orr.w	r4, r0, r2
 800519e:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 80051a2:	430b      	orrs	r3, r1
 80051a4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80051a8:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 80051ac:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80051b0:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 80051b4:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80051b8:	1c9a      	adds	r2, r3, #2
 80051ba:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80051be:	4413      	add	r3, r2
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2200      	movs	r2, #0
 80051c6:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80051ca:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 80051ce:	f04f 0200 	mov.w	r2, #0
 80051d2:	f04f 0300 	mov.w	r3, #0
 80051d6:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 80051da:	464c      	mov	r4, r9
 80051dc:	0423      	lsls	r3, r4, #16
 80051de:	4644      	mov	r4, r8
 80051e0:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80051e4:	4644      	mov	r4, r8
 80051e6:	0422      	lsls	r2, r4, #16
 80051e8:	ea40 0402 	orr.w	r4, r0, r2
 80051ec:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 80051f0:	430b      	orrs	r3, r1
 80051f2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80051f6:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 80051fa:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80051fe:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8005202:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005206:	1cda      	adds	r2, r3, #3
 8005208:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800520c:	4413      	add	r3, r2
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2200      	movs	r2, #0
 8005214:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8005218:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 800521c:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8005220:	4623      	mov	r3, r4
 8005222:	0a1b      	lsrs	r3, r3, #8
 8005224:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8005228:	4623      	mov	r3, r4
 800522a:	061b      	lsls	r3, r3, #24
 800522c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8005230:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8005234:	4623      	mov	r3, r4
 8005236:	4303      	orrs	r3, r0
 8005238:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800523c:	462b      	mov	r3, r5
 800523e:	430b      	orrs	r3, r1
 8005240:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005244:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8005248:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800524c:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8005250:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005254:	1d1a      	adds	r2, r3, #4
 8005256:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800525a:	4413      	add	r3, r2
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	b2db      	uxtb	r3, r3
 8005260:	2200      	movs	r2, #0
 8005262:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8005266:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800526a:	f04f 0200 	mov.w	r2, #0
 800526e:	f04f 0300 	mov.w	r3, #0
 8005272:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8005276:	0023      	movs	r3, r4
 8005278:	2200      	movs	r2, #0
 800527a:	ea40 0402 	orr.w	r4, r0, r2
 800527e:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8005282:	430b      	orrs	r3, r1
 8005284:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8005288:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 800528c:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005290:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8005294:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005298:	1d5a      	adds	r2, r3, #5
 800529a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800529e:	4413      	add	r3, r2
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2200      	movs	r2, #0
 80052a6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80052aa:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80052ae:	f04f 0200 	mov.w	r2, #0
 80052b2:	f04f 0300 	mov.w	r3, #0
 80052b6:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 80052ba:	0223      	lsls	r3, r4, #8
 80052bc:	2200      	movs	r2, #0
 80052be:	ea40 0402 	orr.w	r4, r0, r2
 80052c2:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 80052c6:	430b      	orrs	r3, r1
 80052c8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80052cc:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 80052d0:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80052d4:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 80052d8:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80052dc:	1d9a      	adds	r2, r3, #6
 80052de:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80052e2:	4413      	add	r3, r2
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2200      	movs	r2, #0
 80052ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80052ee:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80052f2:	f04f 0200 	mov.w	r2, #0
 80052f6:	f04f 0300 	mov.w	r3, #0
 80052fa:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 80052fe:	0423      	lsls	r3, r4, #16
 8005300:	2200      	movs	r2, #0
 8005302:	ea40 0402 	orr.w	r4, r0, r2
 8005306:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 800530a:	430b      	orrs	r3, r1
 800530c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005310:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8005314:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005318:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 800531c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005320:	1dda      	adds	r2, r3, #7
 8005322:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8005326:	4413      	add	r3, r2
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2200      	movs	r2, #0
 800532e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005332:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8005336:	f04f 0200 	mov.w	r2, #0
 800533a:	f04f 0300 	mov.w	r3, #0
 800533e:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8005342:	0623      	lsls	r3, r4, #24
 8005344:	2200      	movs	r2, #0
 8005346:	ea40 0402 	orr.w	r4, r0, r2
 800534a:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 800534e:	430b      	orrs	r3, r1
 8005350:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005354:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8005358:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      this->y = u_y.real;
 800535c:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8005360:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005364:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8005368:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800536c:	3308      	adds	r3, #8
 800536e:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8005372:	f04f 0200 	mov.w	r2, #0
 8005376:	f04f 0300 	mov.w	r3, #0
 800537a:	e9c7 2386 	strd	r2, r3, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800537e:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8005382:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8005386:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800538a:	4413      	add	r3, r2
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	b2db      	uxtb	r3, r3
 8005390:	2200      	movs	r2, #0
 8005392:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005396:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800539a:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800539e:	4623      	mov	r3, r4
 80053a0:	4303      	orrs	r3, r0
 80053a2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80053a6:	462b      	mov	r3, r5
 80053a8:	430b      	orrs	r3, r1
 80053aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80053ae:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 80053b2:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80053b6:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 80053ba:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80053be:	1c5a      	adds	r2, r3, #1
 80053c0:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80053c4:	4413      	add	r3, r2
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2200      	movs	r2, #0
 80053cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80053d0:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80053d4:	f04f 0200 	mov.w	r2, #0
 80053d8:	f04f 0300 	mov.w	r3, #0
 80053dc:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 80053e0:	464c      	mov	r4, r9
 80053e2:	0223      	lsls	r3, r4, #8
 80053e4:	4644      	mov	r4, r8
 80053e6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80053ea:	4644      	mov	r4, r8
 80053ec:	0222      	lsls	r2, r4, #8
 80053ee:	ea40 0402 	orr.w	r4, r0, r2
 80053f2:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 80053f6:	430b      	orrs	r3, r1
 80053f8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80053fc:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8005400:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005404:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8005408:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800540c:	1c9a      	adds	r2, r3, #2
 800540e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8005412:	4413      	add	r3, r2
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	b2db      	uxtb	r3, r3
 8005418:	2200      	movs	r2, #0
 800541a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800541e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005422:	f04f 0200 	mov.w	r2, #0
 8005426:	f04f 0300 	mov.w	r3, #0
 800542a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800542e:	464c      	mov	r4, r9
 8005430:	0423      	lsls	r3, r4, #16
 8005432:	4644      	mov	r4, r8
 8005434:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8005438:	4644      	mov	r4, r8
 800543a:	0422      	lsls	r2, r4, #16
 800543c:	ea40 0402 	orr.w	r4, r0, r2
 8005440:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8005444:	430b      	orrs	r3, r1
 8005446:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800544a:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800544e:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005452:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8005456:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800545a:	1cda      	adds	r2, r3, #3
 800545c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8005460:	4413      	add	r3, r2
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2200      	movs	r2, #0
 8005468:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800546c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005470:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8005474:	4623      	mov	r3, r4
 8005476:	0a1b      	lsrs	r3, r3, #8
 8005478:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800547c:	4623      	mov	r3, r4
 800547e:	061b      	lsls	r3, r3, #24
 8005480:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005484:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8005488:	4623      	mov	r3, r4
 800548a:	4303      	orrs	r3, r0
 800548c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005490:	462b      	mov	r3, r5
 8005492:	430b      	orrs	r3, r1
 8005494:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005498:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800549c:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80054a0:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 80054a4:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80054a8:	1d1a      	adds	r2, r3, #4
 80054aa:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80054ae:	4413      	add	r3, r2
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2200      	movs	r2, #0
 80054b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054ba:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80054be:	f04f 0200 	mov.w	r2, #0
 80054c2:	f04f 0300 	mov.w	r3, #0
 80054c6:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 80054ca:	0023      	movs	r3, r4
 80054cc:	2200      	movs	r2, #0
 80054ce:	ea40 0402 	orr.w	r4, r0, r2
 80054d2:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 80054d6:	430b      	orrs	r3, r1
 80054d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80054dc:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80054e0:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80054e4:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 80054e8:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80054ec:	1d5a      	adds	r2, r3, #5
 80054ee:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80054f2:	4413      	add	r3, r2
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	2200      	movs	r2, #0
 80054fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054fe:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8005502:	f04f 0200 	mov.w	r2, #0
 8005506:	f04f 0300 	mov.w	r3, #0
 800550a:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 800550e:	0223      	lsls	r3, r4, #8
 8005510:	2200      	movs	r2, #0
 8005512:	ea40 0402 	orr.w	r4, r0, r2
 8005516:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800551a:	430b      	orrs	r3, r1
 800551c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005520:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8005524:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005528:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 800552c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005530:	1d9a      	adds	r2, r3, #6
 8005532:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8005536:	4413      	add	r3, r2
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2200      	movs	r2, #0
 800553e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005542:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005546:	f04f 0200 	mov.w	r2, #0
 800554a:	f04f 0300 	mov.w	r3, #0
 800554e:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8005552:	0423      	lsls	r3, r4, #16
 8005554:	2200      	movs	r2, #0
 8005556:	ea40 0402 	orr.w	r4, r0, r2
 800555a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800555e:	430b      	orrs	r3, r1
 8005560:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005564:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8005568:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800556c:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8005570:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005574:	1dda      	adds	r2, r3, #7
 8005576:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800557a:	4413      	add	r3, r2
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	b2db      	uxtb	r3, r3
 8005580:	2200      	movs	r2, #0
 8005582:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005586:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800558a:	f04f 0200 	mov.w	r2, #0
 800558e:	f04f 0300 	mov.w	r3, #0
 8005592:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8005596:	0623      	lsls	r3, r4, #24
 8005598:	2200      	movs	r2, #0
 800559a:	ea40 0402 	orr.w	r4, r0, r2
 800559e:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 80055a2:	430b      	orrs	r3, r1
 80055a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80055a8:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80055ac:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      this->z = u_z.real;
 80055b0:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 80055b4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80055b8:	e9c3 0106 	strd	r0, r1, [r3, #24]
      offset += sizeof(this->z);
 80055bc:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80055c0:	3308      	adds	r3, #8
 80055c2:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.base = 0;
 80055c6:	f04f 0200 	mov.w	r2, #0
 80055ca:	f04f 0300 	mov.w	r3, #0
 80055ce:	e9c7 2384 	strd	r2, r3, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80055d2:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 80055d6:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 80055da:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80055de:	4413      	add	r3, r2
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2200      	movs	r2, #0
 80055e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055ea:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80055ee:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80055f2:	4623      	mov	r3, r4
 80055f4:	4303      	orrs	r3, r0
 80055f6:	67bb      	str	r3, [r7, #120]	; 0x78
 80055f8:	462b      	mov	r3, r5
 80055fa:	430b      	orrs	r3, r1
 80055fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80055fe:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8005602:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005606:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 800560a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800560e:	1c5a      	adds	r2, r3, #1
 8005610:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8005614:	4413      	add	r3, r2
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2200      	movs	r2, #0
 800561c:	673b      	str	r3, [r7, #112]	; 0x70
 800561e:	677a      	str	r2, [r7, #116]	; 0x74
 8005620:	f04f 0200 	mov.w	r2, #0
 8005624:	f04f 0300 	mov.w	r3, #0
 8005628:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800562c:	464c      	mov	r4, r9
 800562e:	0223      	lsls	r3, r4, #8
 8005630:	4644      	mov	r4, r8
 8005632:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005636:	4644      	mov	r4, r8
 8005638:	0222      	lsls	r2, r4, #8
 800563a:	ea40 0402 	orr.w	r4, r0, r2
 800563e:	66bc      	str	r4, [r7, #104]	; 0x68
 8005640:	430b      	orrs	r3, r1
 8005642:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005644:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8005648:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800564c:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8005650:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005654:	1c9a      	adds	r2, r3, #2
 8005656:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800565a:	4413      	add	r3, r2
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	b2db      	uxtb	r3, r3
 8005660:	2200      	movs	r2, #0
 8005662:	663b      	str	r3, [r7, #96]	; 0x60
 8005664:	667a      	str	r2, [r7, #100]	; 0x64
 8005666:	f04f 0200 	mov.w	r2, #0
 800566a:	f04f 0300 	mov.w	r3, #0
 800566e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005672:	464c      	mov	r4, r9
 8005674:	0423      	lsls	r3, r4, #16
 8005676:	4644      	mov	r4, r8
 8005678:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800567c:	4644      	mov	r4, r8
 800567e:	0422      	lsls	r2, r4, #16
 8005680:	ea40 0402 	orr.w	r4, r0, r2
 8005684:	65bc      	str	r4, [r7, #88]	; 0x58
 8005686:	430b      	orrs	r3, r1
 8005688:	65fb      	str	r3, [r7, #92]	; 0x5c
 800568a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800568e:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005692:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8005696:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800569a:	1cda      	adds	r2, r3, #3
 800569c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80056a0:	4413      	add	r3, r2
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2200      	movs	r2, #0
 80056a8:	653b      	str	r3, [r7, #80]	; 0x50
 80056aa:	657a      	str	r2, [r7, #84]	; 0x54
 80056ac:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80056b0:	4623      	mov	r3, r4
 80056b2:	0a1b      	lsrs	r3, r3, #8
 80056b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056b6:	4623      	mov	r3, r4
 80056b8:	061b      	lsls	r3, r3, #24
 80056ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80056bc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80056c0:	4623      	mov	r3, r4
 80056c2:	4303      	orrs	r3, r0
 80056c4:	643b      	str	r3, [r7, #64]	; 0x40
 80056c6:	462b      	mov	r3, r5
 80056c8:	430b      	orrs	r3, r1
 80056ca:	647b      	str	r3, [r7, #68]	; 0x44
 80056cc:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80056d0:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80056d4:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 80056d8:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80056dc:	1d1a      	adds	r2, r3, #4
 80056de:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80056e2:	4413      	add	r3, r2
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	2200      	movs	r2, #0
 80056ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80056ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80056ee:	f04f 0200 	mov.w	r2, #0
 80056f2:	f04f 0300 	mov.w	r3, #0
 80056f6:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80056f8:	0023      	movs	r3, r4
 80056fa:	2200      	movs	r2, #0
 80056fc:	ea40 0402 	orr.w	r4, r0, r2
 8005700:	633c      	str	r4, [r7, #48]	; 0x30
 8005702:	430b      	orrs	r3, r1
 8005704:	637b      	str	r3, [r7, #52]	; 0x34
 8005706:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800570a:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800570e:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8005712:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005716:	1d5a      	adds	r2, r3, #5
 8005718:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800571c:	4413      	add	r3, r2
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2200      	movs	r2, #0
 8005724:	62bb      	str	r3, [r7, #40]	; 0x28
 8005726:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005728:	f04f 0200 	mov.w	r2, #0
 800572c:	f04f 0300 	mov.w	r3, #0
 8005730:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8005732:	0223      	lsls	r3, r4, #8
 8005734:	2200      	movs	r2, #0
 8005736:	ea40 0402 	orr.w	r4, r0, r2
 800573a:	623c      	str	r4, [r7, #32]
 800573c:	430b      	orrs	r3, r1
 800573e:	627b      	str	r3, [r7, #36]	; 0x24
 8005740:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005744:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005748:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 800574c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005750:	3306      	adds	r3, #6
 8005752:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8005756:	4413      	add	r3, r2
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2200      	movs	r2, #0
 800575e:	61bb      	str	r3, [r7, #24]
 8005760:	61fa      	str	r2, [r7, #28]
 8005762:	f04f 0200 	mov.w	r2, #0
 8005766:	f04f 0300 	mov.w	r3, #0
 800576a:	69bc      	ldr	r4, [r7, #24]
 800576c:	0423      	lsls	r3, r4, #16
 800576e:	2200      	movs	r2, #0
 8005770:	ea40 0402 	orr.w	r4, r0, r2
 8005774:	613c      	str	r4, [r7, #16]
 8005776:	430b      	orrs	r3, r1
 8005778:	617b      	str	r3, [r7, #20]
 800577a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800577e:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005782:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8005786:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800578a:	3307      	adds	r3, #7
 800578c:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8005790:	4413      	add	r3, r2
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2200      	movs	r2, #0
 8005798:	60bb      	str	r3, [r7, #8]
 800579a:	60fa      	str	r2, [r7, #12]
 800579c:	f04f 0200 	mov.w	r2, #0
 80057a0:	f04f 0300 	mov.w	r3, #0
 80057a4:	68bc      	ldr	r4, [r7, #8]
 80057a6:	0623      	lsls	r3, r4, #24
 80057a8:	2200      	movs	r2, #0
 80057aa:	ea40 0402 	orr.w	r4, r0, r2
 80057ae:	603c      	str	r4, [r7, #0]
 80057b0:	430b      	orrs	r3, r1
 80057b2:	607b      	str	r3, [r7, #4]
 80057b4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80057b8:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      this->w = u_w.real;
 80057bc:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	; 0x210
 80057c0:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 80057c4:	e9c1 2308 	strd	r2, r3, [r1, #32]
      offset += sizeof(this->w);
 80057c8:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80057cc:	3308      	adds	r3, #8
 80057ce:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
     return offset;
 80057d2:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
    }
 80057d6:	4618      	mov	r0, r3
 80057d8:	f507 770f 	add.w	r7, r7, #572	; 0x23c
 80057dc:	46bd      	mov	sp, r7
 80057de:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80057e2:	4770      	bx	lr

080057e4 <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Quaternion"; };
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	4b03      	ldr	r3, [pc, #12]	; (80057fc <_ZN13geometry_msgs10Quaternion7getTypeEv+0x18>)
 80057ee:	4618      	mov	r0, r3
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	080150e8 	.word	0x080150e8

08005800 <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    virtual const char * getMD5() override { return "a779879fadf0160734f906b8c19c7004"; };
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	4b03      	ldr	r3, [pc, #12]	; (8005818 <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x18>)
 800580a:	4618      	mov	r0, r3
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	08015104 	.word	0x08015104

0800581c <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4618      	mov	r0, r3
 8005828:	f7fe f99a 	bl	8003b60 <_ZN3ros3MsgC1Ev>
 800582c:	4a0e      	ldr	r2, [pc, #56]	; (8005868 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	601a      	str	r2, [r3, #0]
      x(0),
 8005832:	6879      	ldr	r1, [r7, #4]
 8005834:	f04f 0200 	mov.w	r2, #0
 8005838:	f04f 0300 	mov.w	r3, #0
 800583c:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 8005840:	6879      	ldr	r1, [r7, #4]
 8005842:	f04f 0200 	mov.w	r2, #0
 8005846:	f04f 0300 	mov.w	r3, #0
 800584a:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0)
 800584e:	6879      	ldr	r1, [r7, #4]
 8005850:	f04f 0200 	mov.w	r2, #0
 8005854:	f04f 0300 	mov.w	r3, #0
 8005858:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4618      	mov	r0, r3
 8005860:	3708      	adds	r7, #8
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	080154b0 	.word	0x080154b0

0800586c <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800586c:	b480      	push	{r7}
 800586e:	b08b      	sub	sp, #44	; 0x2c
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005876:	2300      	movs	r3, #0
 8005878:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005880:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8005884:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005888:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800588a:	6838      	ldr	r0, [r7, #0]
 800588c:	4401      	add	r1, r0
 800588e:	b2d3      	uxtb	r3, r2
 8005890:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8005892:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005896:	f04f 0200 	mov.w	r2, #0
 800589a:	f04f 0300 	mov.w	r3, #0
 800589e:	0a02      	lsrs	r2, r0, #8
 80058a0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80058a4:	0a0b      	lsrs	r3, r1, #8
 80058a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058a8:	3101      	adds	r1, #1
 80058aa:	6838      	ldr	r0, [r7, #0]
 80058ac:	4401      	add	r1, r0
 80058ae:	b2d3      	uxtb	r3, r2
 80058b0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80058b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80058b6:	f04f 0200 	mov.w	r2, #0
 80058ba:	f04f 0300 	mov.w	r3, #0
 80058be:	0c02      	lsrs	r2, r0, #16
 80058c0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80058c4:	0c0b      	lsrs	r3, r1, #16
 80058c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058c8:	3102      	adds	r1, #2
 80058ca:	6838      	ldr	r0, [r7, #0]
 80058cc:	4401      	add	r1, r0
 80058ce:	b2d3      	uxtb	r3, r2
 80058d0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80058d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80058d6:	f04f 0200 	mov.w	r2, #0
 80058da:	f04f 0300 	mov.w	r3, #0
 80058de:	0e02      	lsrs	r2, r0, #24
 80058e0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80058e4:	0e0b      	lsrs	r3, r1, #24
 80058e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058e8:	3103      	adds	r1, #3
 80058ea:	6838      	ldr	r0, [r7, #0]
 80058ec:	4401      	add	r1, r0
 80058ee:	b2d3      	uxtb	r3, r2
 80058f0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80058f2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80058f6:	f04f 0200 	mov.w	r2, #0
 80058fa:	f04f 0300 	mov.w	r3, #0
 80058fe:	000a      	movs	r2, r1
 8005900:	2300      	movs	r3, #0
 8005902:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005904:	3104      	adds	r1, #4
 8005906:	6838      	ldr	r0, [r7, #0]
 8005908:	4401      	add	r1, r0
 800590a:	b2d3      	uxtb	r3, r2
 800590c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800590e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005912:	f04f 0200 	mov.w	r2, #0
 8005916:	f04f 0300 	mov.w	r3, #0
 800591a:	0a0a      	lsrs	r2, r1, #8
 800591c:	2300      	movs	r3, #0
 800591e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005920:	3105      	adds	r1, #5
 8005922:	6838      	ldr	r0, [r7, #0]
 8005924:	4401      	add	r1, r0
 8005926:	b2d3      	uxtb	r3, r2
 8005928:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 800592a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800592e:	f04f 0200 	mov.w	r2, #0
 8005932:	f04f 0300 	mov.w	r3, #0
 8005936:	0c0a      	lsrs	r2, r1, #16
 8005938:	2300      	movs	r3, #0
 800593a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800593c:	3106      	adds	r1, #6
 800593e:	6838      	ldr	r0, [r7, #0]
 8005940:	4401      	add	r1, r0
 8005942:	b2d3      	uxtb	r3, r2
 8005944:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8005946:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800594a:	f04f 0200 	mov.w	r2, #0
 800594e:	f04f 0300 	mov.w	r3, #0
 8005952:	0e0a      	lsrs	r2, r1, #24
 8005954:	2300      	movs	r3, #0
 8005956:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005958:	3107      	adds	r1, #7
 800595a:	6838      	ldr	r0, [r7, #0]
 800595c:	4401      	add	r1, r0
 800595e:	b2d3      	uxtb	r3, r2
 8005960:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8005962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005964:	3308      	adds	r3, #8
 8005966:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800596e:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8005972:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005976:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005978:	6838      	ldr	r0, [r7, #0]
 800597a:	4401      	add	r1, r0
 800597c:	b2d3      	uxtb	r3, r2
 800597e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8005980:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005984:	f04f 0200 	mov.w	r2, #0
 8005988:	f04f 0300 	mov.w	r3, #0
 800598c:	0a02      	lsrs	r2, r0, #8
 800598e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005992:	0a0b      	lsrs	r3, r1, #8
 8005994:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005996:	3101      	adds	r1, #1
 8005998:	6838      	ldr	r0, [r7, #0]
 800599a:	4401      	add	r1, r0
 800599c:	b2d3      	uxtb	r3, r2
 800599e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80059a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80059a4:	f04f 0200 	mov.w	r2, #0
 80059a8:	f04f 0300 	mov.w	r3, #0
 80059ac:	0c02      	lsrs	r2, r0, #16
 80059ae:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80059b2:	0c0b      	lsrs	r3, r1, #16
 80059b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059b6:	3102      	adds	r1, #2
 80059b8:	6838      	ldr	r0, [r7, #0]
 80059ba:	4401      	add	r1, r0
 80059bc:	b2d3      	uxtb	r3, r2
 80059be:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80059c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80059c4:	f04f 0200 	mov.w	r2, #0
 80059c8:	f04f 0300 	mov.w	r3, #0
 80059cc:	0e02      	lsrs	r2, r0, #24
 80059ce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80059d2:	0e0b      	lsrs	r3, r1, #24
 80059d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059d6:	3103      	adds	r1, #3
 80059d8:	6838      	ldr	r0, [r7, #0]
 80059da:	4401      	add	r1, r0
 80059dc:	b2d3      	uxtb	r3, r2
 80059de:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80059e0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80059e4:	f04f 0200 	mov.w	r2, #0
 80059e8:	f04f 0300 	mov.w	r3, #0
 80059ec:	000a      	movs	r2, r1
 80059ee:	2300      	movs	r3, #0
 80059f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059f2:	3104      	adds	r1, #4
 80059f4:	6838      	ldr	r0, [r7, #0]
 80059f6:	4401      	add	r1, r0
 80059f8:	b2d3      	uxtb	r3, r2
 80059fa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80059fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005a00:	f04f 0200 	mov.w	r2, #0
 8005a04:	f04f 0300 	mov.w	r3, #0
 8005a08:	0a0a      	lsrs	r2, r1, #8
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a0e:	3105      	adds	r1, #5
 8005a10:	6838      	ldr	r0, [r7, #0]
 8005a12:	4401      	add	r1, r0
 8005a14:	b2d3      	uxtb	r3, r2
 8005a16:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8005a18:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005a1c:	f04f 0200 	mov.w	r2, #0
 8005a20:	f04f 0300 	mov.w	r3, #0
 8005a24:	0c0a      	lsrs	r2, r1, #16
 8005a26:	2300      	movs	r3, #0
 8005a28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a2a:	3106      	adds	r1, #6
 8005a2c:	6838      	ldr	r0, [r7, #0]
 8005a2e:	4401      	add	r1, r0
 8005a30:	b2d3      	uxtb	r3, r2
 8005a32:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8005a34:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005a38:	f04f 0200 	mov.w	r2, #0
 8005a3c:	f04f 0300 	mov.w	r3, #0
 8005a40:	0e0a      	lsrs	r2, r1, #24
 8005a42:	2300      	movs	r3, #0
 8005a44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a46:	3107      	adds	r1, #7
 8005a48:	6838      	ldr	r0, [r7, #0]
 8005a4a:	4401      	add	r1, r0
 8005a4c:	b2d3      	uxtb	r3, r2
 8005a4e:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8005a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a52:	3308      	adds	r3, #8
 8005a54:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005a5c:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8005a60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a66:	6838      	ldr	r0, [r7, #0]
 8005a68:	4401      	add	r1, r0
 8005a6a:	b2d3      	uxtb	r3, r2
 8005a6c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8005a6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a72:	f04f 0200 	mov.w	r2, #0
 8005a76:	f04f 0300 	mov.w	r3, #0
 8005a7a:	0a02      	lsrs	r2, r0, #8
 8005a7c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005a80:	0a0b      	lsrs	r3, r1, #8
 8005a82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a84:	3101      	adds	r1, #1
 8005a86:	6838      	ldr	r0, [r7, #0]
 8005a88:	4401      	add	r1, r0
 8005a8a:	b2d3      	uxtb	r3, r2
 8005a8c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8005a8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a92:	f04f 0200 	mov.w	r2, #0
 8005a96:	f04f 0300 	mov.w	r3, #0
 8005a9a:	0c02      	lsrs	r2, r0, #16
 8005a9c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005aa0:	0c0b      	lsrs	r3, r1, #16
 8005aa2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005aa4:	3102      	adds	r1, #2
 8005aa6:	6838      	ldr	r0, [r7, #0]
 8005aa8:	4401      	add	r1, r0
 8005aaa:	b2d3      	uxtb	r3, r2
 8005aac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8005aae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005ab2:	f04f 0200 	mov.w	r2, #0
 8005ab6:	f04f 0300 	mov.w	r3, #0
 8005aba:	0e02      	lsrs	r2, r0, #24
 8005abc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005ac0:	0e0b      	lsrs	r3, r1, #24
 8005ac2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ac4:	3103      	adds	r1, #3
 8005ac6:	6838      	ldr	r0, [r7, #0]
 8005ac8:	4401      	add	r1, r0
 8005aca:	b2d3      	uxtb	r3, r2
 8005acc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8005ace:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005ad2:	f04f 0200 	mov.w	r2, #0
 8005ad6:	f04f 0300 	mov.w	r3, #0
 8005ada:	000a      	movs	r2, r1
 8005adc:	2300      	movs	r3, #0
 8005ade:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ae0:	3104      	adds	r1, #4
 8005ae2:	6838      	ldr	r0, [r7, #0]
 8005ae4:	4401      	add	r1, r0
 8005ae6:	b2d3      	uxtb	r3, r2
 8005ae8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8005aea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005aee:	f04f 0200 	mov.w	r2, #0
 8005af2:	f04f 0300 	mov.w	r3, #0
 8005af6:	0a0a      	lsrs	r2, r1, #8
 8005af8:	2300      	movs	r3, #0
 8005afa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005afc:	3105      	adds	r1, #5
 8005afe:	6838      	ldr	r0, [r7, #0]
 8005b00:	4401      	add	r1, r0
 8005b02:	b2d3      	uxtb	r3, r2
 8005b04:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8005b06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b0a:	f04f 0200 	mov.w	r2, #0
 8005b0e:	f04f 0300 	mov.w	r3, #0
 8005b12:	0c0a      	lsrs	r2, r1, #16
 8005b14:	2300      	movs	r3, #0
 8005b16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b18:	3106      	adds	r1, #6
 8005b1a:	6838      	ldr	r0, [r7, #0]
 8005b1c:	4401      	add	r1, r0
 8005b1e:	b2d3      	uxtb	r3, r2
 8005b20:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8005b22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b26:	f04f 0200 	mov.w	r2, #0
 8005b2a:	f04f 0300 	mov.w	r3, #0
 8005b2e:	0e0a      	lsrs	r2, r1, #24
 8005b30:	2300      	movs	r3, #0
 8005b32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b34:	3107      	adds	r1, #7
 8005b36:	6838      	ldr	r0, [r7, #0]
 8005b38:	4401      	add	r1, r0
 8005b3a:	b2d3      	uxtb	r3, r2
 8005b3c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b40:	3308      	adds	r3, #8
 8005b42:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8005b46:	4618      	mov	r0, r3
 8005b48:	372c      	adds	r7, #44	; 0x2c
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr

08005b52 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8005b52:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8005b56:	b0eb      	sub	sp, #428	; 0x1ac
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8005b5e:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8005b62:	2300      	movs	r3, #0
 8005b64:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8005b68:	f04f 0200 	mov.w	r2, #0
 8005b6c:	f04f 0300 	mov.w	r3, #0
 8005b70:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005b74:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8005b78:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8005b7c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005b80:	4413      	add	r3, r2
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	2200      	movs	r2, #0
 8005b88:	461c      	mov	r4, r3
 8005b8a:	4615      	mov	r5, r2
 8005b8c:	ea40 0804 	orr.w	r8, r0, r4
 8005b90:	ea41 0905 	orr.w	r9, r1, r5
 8005b94:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005b98:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8005b9c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005ba0:	1c5a      	adds	r2, r3, #1
 8005ba2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005ba6:	4413      	add	r3, r2
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	2200      	movs	r2, #0
 8005bae:	469a      	mov	sl, r3
 8005bb0:	4693      	mov	fp, r2
 8005bb2:	f04f 0200 	mov.w	r2, #0
 8005bb6:	f04f 0300 	mov.w	r3, #0
 8005bba:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8005bbe:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8005bc2:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8005bc6:	ea40 0402 	orr.w	r4, r0, r2
 8005bca:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8005bce:	430b      	orrs	r3, r1
 8005bd0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8005bd4:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8005bd8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005bdc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8005be0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005be4:	1c9a      	adds	r2, r3, #2
 8005be6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005bea:	4413      	add	r3, r2
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8005bf6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8005bfa:	f04f 0200 	mov.w	r2, #0
 8005bfe:	f04f 0300 	mov.w	r3, #0
 8005c02:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8005c06:	464c      	mov	r4, r9
 8005c08:	0423      	lsls	r3, r4, #16
 8005c0a:	4644      	mov	r4, r8
 8005c0c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8005c10:	4644      	mov	r4, r8
 8005c12:	0422      	lsls	r2, r4, #16
 8005c14:	ea40 0402 	orr.w	r4, r0, r2
 8005c18:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8005c1c:	430b      	orrs	r3, r1
 8005c1e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005c22:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8005c26:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005c2a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8005c2e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005c32:	1cda      	adds	r2, r3, #3
 8005c34:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005c38:	4413      	add	r3, r2
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8005c44:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8005c48:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8005c4c:	4623      	mov	r3, r4
 8005c4e:	0a1b      	lsrs	r3, r3, #8
 8005c50:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8005c54:	4623      	mov	r3, r4
 8005c56:	061b      	lsls	r3, r3, #24
 8005c58:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8005c5c:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8005c60:	4623      	mov	r3, r4
 8005c62:	4303      	orrs	r3, r0
 8005c64:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005c68:	462b      	mov	r3, r5
 8005c6a:	430b      	orrs	r3, r1
 8005c6c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005c70:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8005c74:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005c78:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8005c7c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005c80:	1d1a      	adds	r2, r3, #4
 8005c82:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005c86:	4413      	add	r3, r2
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8005c92:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8005c96:	f04f 0200 	mov.w	r2, #0
 8005c9a:	f04f 0300 	mov.w	r3, #0
 8005c9e:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8005ca2:	0023      	movs	r3, r4
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	ea40 0402 	orr.w	r4, r0, r2
 8005caa:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8005cae:	430b      	orrs	r3, r1
 8005cb0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8005cb4:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8005cb8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005cbc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8005cc0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005cc4:	1d5a      	adds	r2, r3, #5
 8005cc6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005cca:	4413      	add	r3, r2
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8005cd6:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8005cda:	f04f 0200 	mov.w	r2, #0
 8005cde:	f04f 0300 	mov.w	r3, #0
 8005ce2:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8005ce6:	0223      	lsls	r3, r4, #8
 8005ce8:	2200      	movs	r2, #0
 8005cea:	ea40 0402 	orr.w	r4, r0, r2
 8005cee:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8005cf2:	430b      	orrs	r3, r1
 8005cf4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8005cf8:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8005cfc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005d00:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8005d04:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005d08:	1d9a      	adds	r2, r3, #6
 8005d0a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005d0e:	4413      	add	r3, r2
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	2200      	movs	r2, #0
 8005d16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005d1a:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8005d1e:	f04f 0200 	mov.w	r2, #0
 8005d22:	f04f 0300 	mov.w	r3, #0
 8005d26:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8005d2a:	0423      	lsls	r3, r4, #16
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	ea40 0402 	orr.w	r4, r0, r2
 8005d32:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8005d36:	430b      	orrs	r3, r1
 8005d38:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005d3c:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8005d40:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005d44:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8005d48:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005d4c:	1dda      	adds	r2, r3, #7
 8005d4e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005d52:	4413      	add	r3, r2
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005d5e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8005d62:	f04f 0200 	mov.w	r2, #0
 8005d66:	f04f 0300 	mov.w	r3, #0
 8005d6a:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8005d6e:	0623      	lsls	r3, r4, #24
 8005d70:	2200      	movs	r2, #0
 8005d72:	ea40 0402 	orr.w	r4, r0, r2
 8005d76:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8005d7a:	430b      	orrs	r3, r1
 8005d7c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005d80:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8005d84:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8005d88:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8005d8c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8005d90:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8005d94:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005d98:	3308      	adds	r3, #8
 8005d9a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8005d9e:	f04f 0200 	mov.w	r2, #0
 8005da2:	f04f 0300 	mov.w	r3, #0
 8005da6:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005daa:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005dae:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8005db2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005db6:	4413      	add	r3, r2
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005dc2:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8005dc6:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8005dca:	4623      	mov	r3, r4
 8005dcc:	4303      	orrs	r3, r0
 8005dce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005dd2:	462b      	mov	r3, r5
 8005dd4:	430b      	orrs	r3, r1
 8005dd6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005dda:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8005dde:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005de2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005de6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005dea:	1c5a      	adds	r2, r3, #1
 8005dec:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005df0:	4413      	add	r3, r2
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2200      	movs	r2, #0
 8005df8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005dfc:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8005e00:	f04f 0200 	mov.w	r2, #0
 8005e04:	f04f 0300 	mov.w	r3, #0
 8005e08:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8005e0c:	464c      	mov	r4, r9
 8005e0e:	0223      	lsls	r3, r4, #8
 8005e10:	4644      	mov	r4, r8
 8005e12:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005e16:	4644      	mov	r4, r8
 8005e18:	0222      	lsls	r2, r4, #8
 8005e1a:	ea40 0402 	orr.w	r4, r0, r2
 8005e1e:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8005e22:	430b      	orrs	r3, r1
 8005e24:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005e28:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8005e2c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005e30:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005e34:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005e38:	1c9a      	adds	r2, r3, #2
 8005e3a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005e3e:	4413      	add	r3, r2
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	2200      	movs	r2, #0
 8005e46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005e4a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005e4e:	f04f 0200 	mov.w	r2, #0
 8005e52:	f04f 0300 	mov.w	r3, #0
 8005e56:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8005e5a:	464c      	mov	r4, r9
 8005e5c:	0423      	lsls	r3, r4, #16
 8005e5e:	4644      	mov	r4, r8
 8005e60:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8005e64:	4644      	mov	r4, r8
 8005e66:	0422      	lsls	r2, r4, #16
 8005e68:	ea40 0402 	orr.w	r4, r0, r2
 8005e6c:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8005e70:	430b      	orrs	r3, r1
 8005e72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e76:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8005e7a:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005e7e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005e82:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005e86:	1cda      	adds	r2, r3, #3
 8005e88:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005e8c:	4413      	add	r3, r2
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2200      	movs	r2, #0
 8005e94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e98:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005e9c:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8005ea0:	4623      	mov	r3, r4
 8005ea2:	0a1b      	lsrs	r3, r3, #8
 8005ea4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005ea8:	4623      	mov	r3, r4
 8005eaa:	061b      	lsls	r3, r3, #24
 8005eac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005eb0:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8005eb4:	4623      	mov	r3, r4
 8005eb6:	4303      	orrs	r3, r0
 8005eb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ebc:	462b      	mov	r3, r5
 8005ebe:	430b      	orrs	r3, r1
 8005ec0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ec4:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8005ec8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005ecc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005ed0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005ed4:	1d1a      	adds	r2, r3, #4
 8005ed6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005eda:	4413      	add	r3, r2
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ee6:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005eea:	f04f 0200 	mov.w	r2, #0
 8005eee:	f04f 0300 	mov.w	r3, #0
 8005ef2:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8005ef6:	0023      	movs	r3, r4
 8005ef8:	2200      	movs	r2, #0
 8005efa:	ea40 0402 	orr.w	r4, r0, r2
 8005efe:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8005f02:	430b      	orrs	r3, r1
 8005f04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005f08:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8005f0c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005f10:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005f14:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005f18:	1d5a      	adds	r2, r3, #5
 8005f1a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005f1e:	4413      	add	r3, r2
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	2200      	movs	r2, #0
 8005f26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f2a:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8005f2e:	f04f 0200 	mov.w	r2, #0
 8005f32:	f04f 0300 	mov.w	r3, #0
 8005f36:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8005f3a:	0223      	lsls	r3, r4, #8
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	ea40 0402 	orr.w	r4, r0, r2
 8005f42:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8005f46:	430b      	orrs	r3, r1
 8005f48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f4c:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8005f50:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005f54:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005f58:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005f5c:	1d9a      	adds	r2, r3, #6
 8005f5e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005f62:	4413      	add	r3, r2
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005f6e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005f72:	f04f 0200 	mov.w	r2, #0
 8005f76:	f04f 0300 	mov.w	r3, #0
 8005f7a:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8005f7e:	0423      	lsls	r3, r4, #16
 8005f80:	2200      	movs	r2, #0
 8005f82:	ea40 0402 	orr.w	r4, r0, r2
 8005f86:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8005f8a:	430b      	orrs	r3, r1
 8005f8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f90:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8005f94:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005f98:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005f9c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005fa0:	1dda      	adds	r2, r3, #7
 8005fa2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005fa6:	4413      	add	r3, r2
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	2200      	movs	r2, #0
 8005fae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005fb2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005fb6:	f04f 0200 	mov.w	r2, #0
 8005fba:	f04f 0300 	mov.w	r3, #0
 8005fbe:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8005fc2:	0623      	lsls	r3, r4, #24
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	ea40 0402 	orr.w	r4, r0, r2
 8005fca:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8005fce:	430b      	orrs	r3, r1
 8005fd0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005fd4:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8005fd8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8005fdc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005fe0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8005fe4:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8005fe8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005fec:	3308      	adds	r3, #8
 8005fee:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8005ff2:	f04f 0200 	mov.w	r2, #0
 8005ff6:	f04f 0300 	mov.w	r3, #0
 8005ffa:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005ffe:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8006002:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8006006:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800600a:	4413      	add	r3, r2
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2200      	movs	r2, #0
 8006012:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006016:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800601a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800601e:	4623      	mov	r3, r4
 8006020:	4303      	orrs	r3, r0
 8006022:	67bb      	str	r3, [r7, #120]	; 0x78
 8006024:	462b      	mov	r3, r5
 8006026:	430b      	orrs	r3, r1
 8006028:	67fb      	str	r3, [r7, #124]	; 0x7c
 800602a:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800602e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006032:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8006036:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800603a:	1c5a      	adds	r2, r3, #1
 800603c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8006040:	4413      	add	r3, r2
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2200      	movs	r2, #0
 8006048:	673b      	str	r3, [r7, #112]	; 0x70
 800604a:	677a      	str	r2, [r7, #116]	; 0x74
 800604c:	f04f 0200 	mov.w	r2, #0
 8006050:	f04f 0300 	mov.w	r3, #0
 8006054:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006058:	464c      	mov	r4, r9
 800605a:	0223      	lsls	r3, r4, #8
 800605c:	4644      	mov	r4, r8
 800605e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006062:	4644      	mov	r4, r8
 8006064:	0222      	lsls	r2, r4, #8
 8006066:	ea40 0402 	orr.w	r4, r0, r2
 800606a:	66bc      	str	r4, [r7, #104]	; 0x68
 800606c:	430b      	orrs	r3, r1
 800606e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006070:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8006074:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006078:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800607c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8006080:	1c9a      	adds	r2, r3, #2
 8006082:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8006086:	4413      	add	r3, r2
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	b2db      	uxtb	r3, r3
 800608c:	2200      	movs	r2, #0
 800608e:	663b      	str	r3, [r7, #96]	; 0x60
 8006090:	667a      	str	r2, [r7, #100]	; 0x64
 8006092:	f04f 0200 	mov.w	r2, #0
 8006096:	f04f 0300 	mov.w	r3, #0
 800609a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800609e:	464c      	mov	r4, r9
 80060a0:	0423      	lsls	r3, r4, #16
 80060a2:	4644      	mov	r4, r8
 80060a4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80060a8:	4644      	mov	r4, r8
 80060aa:	0422      	lsls	r2, r4, #16
 80060ac:	ea40 0402 	orr.w	r4, r0, r2
 80060b0:	65bc      	str	r4, [r7, #88]	; 0x58
 80060b2:	430b      	orrs	r3, r1
 80060b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060b6:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80060ba:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80060be:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80060c2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80060c6:	1cda      	adds	r2, r3, #3
 80060c8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80060cc:	4413      	add	r3, r2
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2200      	movs	r2, #0
 80060d4:	653b      	str	r3, [r7, #80]	; 0x50
 80060d6:	657a      	str	r2, [r7, #84]	; 0x54
 80060d8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80060dc:	4623      	mov	r3, r4
 80060de:	0a1b      	lsrs	r3, r3, #8
 80060e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060e2:	4623      	mov	r3, r4
 80060e4:	061b      	lsls	r3, r3, #24
 80060e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80060e8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80060ec:	4623      	mov	r3, r4
 80060ee:	4303      	orrs	r3, r0
 80060f0:	643b      	str	r3, [r7, #64]	; 0x40
 80060f2:	462b      	mov	r3, r5
 80060f4:	430b      	orrs	r3, r1
 80060f6:	647b      	str	r3, [r7, #68]	; 0x44
 80060f8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80060fc:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8006100:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8006104:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8006108:	1d1a      	adds	r2, r3, #4
 800610a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800610e:	4413      	add	r3, r2
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2200      	movs	r2, #0
 8006116:	63bb      	str	r3, [r7, #56]	; 0x38
 8006118:	63fa      	str	r2, [r7, #60]	; 0x3c
 800611a:	f04f 0200 	mov.w	r2, #0
 800611e:	f04f 0300 	mov.w	r3, #0
 8006122:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8006124:	0023      	movs	r3, r4
 8006126:	2200      	movs	r2, #0
 8006128:	ea40 0402 	orr.w	r4, r0, r2
 800612c:	633c      	str	r4, [r7, #48]	; 0x30
 800612e:	430b      	orrs	r3, r1
 8006130:	637b      	str	r3, [r7, #52]	; 0x34
 8006132:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8006136:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800613a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800613e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8006142:	1d5a      	adds	r2, r3, #5
 8006144:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8006148:	4413      	add	r3, r2
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2200      	movs	r2, #0
 8006150:	62bb      	str	r3, [r7, #40]	; 0x28
 8006152:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006154:	f04f 0200 	mov.w	r2, #0
 8006158:	f04f 0300 	mov.w	r3, #0
 800615c:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800615e:	0223      	lsls	r3, r4, #8
 8006160:	2200      	movs	r2, #0
 8006162:	ea40 0402 	orr.w	r4, r0, r2
 8006166:	623c      	str	r4, [r7, #32]
 8006168:	430b      	orrs	r3, r1
 800616a:	627b      	str	r3, [r7, #36]	; 0x24
 800616c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8006170:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8006174:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8006178:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800617c:	3306      	adds	r3, #6
 800617e:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8006182:	4413      	add	r3, r2
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	b2db      	uxtb	r3, r3
 8006188:	2200      	movs	r2, #0
 800618a:	61bb      	str	r3, [r7, #24]
 800618c:	61fa      	str	r2, [r7, #28]
 800618e:	f04f 0200 	mov.w	r2, #0
 8006192:	f04f 0300 	mov.w	r3, #0
 8006196:	69bc      	ldr	r4, [r7, #24]
 8006198:	0423      	lsls	r3, r4, #16
 800619a:	2200      	movs	r2, #0
 800619c:	ea40 0402 	orr.w	r4, r0, r2
 80061a0:	613c      	str	r4, [r7, #16]
 80061a2:	430b      	orrs	r3, r1
 80061a4:	617b      	str	r3, [r7, #20]
 80061a6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80061aa:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80061ae:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80061b2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80061b6:	3307      	adds	r3, #7
 80061b8:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80061bc:	4413      	add	r3, r2
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2200      	movs	r2, #0
 80061c4:	60bb      	str	r3, [r7, #8]
 80061c6:	60fa      	str	r2, [r7, #12]
 80061c8:	f04f 0200 	mov.w	r2, #0
 80061cc:	f04f 0300 	mov.w	r3, #0
 80061d0:	68bc      	ldr	r4, [r7, #8]
 80061d2:	0623      	lsls	r3, r4, #24
 80061d4:	2200      	movs	r2, #0
 80061d6:	ea40 0402 	orr.w	r4, r0, r2
 80061da:	603c      	str	r4, [r7, #0]
 80061dc:	430b      	orrs	r3, r1
 80061de:	607b      	str	r3, [r7, #4]
 80061e0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80061e4:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 80061e8:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80061ec:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 80061f0:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 80061f4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80061f8:	3308      	adds	r3, #8
 80061fa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 80061fe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8006202:	4618      	mov	r0, r3
 8006204:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8006208:	46bd      	mov	sp, r7
 800620a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800620e:	4770      	bx	lr

08006210 <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	4b03      	ldr	r3, [pc, #12]	; (8006228 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 800621a:	4618      	mov	r0, r3
 800621c:	370c      	adds	r7, #12
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	08015128 	.word	0x08015128

0800622c <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	4b03      	ldr	r3, [pc, #12]	; (8006244 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8006236:	4618      	mov	r0, r3
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	08015140 	.word	0x08015140

08006248 <_ZN8std_msgs7Float32C1Ev>:
  {
    public:
      typedef float _data_type;
      _data_type data;

    Float32():
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
      data(0)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4618      	mov	r0, r3
 8006254:	f7fd fc84 	bl	8003b60 <_ZN3ros3MsgC1Ev>
 8006258:	4a05      	ldr	r2, [pc, #20]	; (8006270 <_ZN8std_msgs7Float32C1Ev+0x28>)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	601a      	str	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f04f 0200 	mov.w	r2, #0
 8006264:	605a      	str	r2, [r3, #4]
    {
    }
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4618      	mov	r0, r3
 800626a:	3708      	adds	r7, #8
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	08015498 	.word	0x08015498

08006274 <_ZNK8std_msgs7Float329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800627e:	2300      	movs	r3, #0
 8006280:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8006288:	68b9      	ldr	r1, [r7, #8]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	683a      	ldr	r2, [r7, #0]
 800628e:	4413      	add	r3, r2
 8006290:	b2ca      	uxtb	r2, r1
 8006292:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	0a19      	lsrs	r1, r3, #8
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	3301      	adds	r3, #1
 800629c:	683a      	ldr	r2, [r7, #0]
 800629e:	4413      	add	r3, r2
 80062a0:	b2ca      	uxtb	r2, r1
 80062a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	0c19      	lsrs	r1, r3, #16
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	3302      	adds	r3, #2
 80062ac:	683a      	ldr	r2, [r7, #0]
 80062ae:	4413      	add	r3, r2
 80062b0:	b2ca      	uxtb	r2, r1
 80062b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	0e19      	lsrs	r1, r3, #24
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	3303      	adds	r3, #3
 80062bc:	683a      	ldr	r2, [r7, #0]
 80062be:	4413      	add	r3, r2
 80062c0:	b2ca      	uxtb	r2, r1
 80062c2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	3304      	adds	r3, #4
 80062c8:	60fb      	str	r3, [r7, #12]
      return offset;
 80062ca:	68fb      	ldr	r3, [r7, #12]
    }
 80062cc:	4618      	mov	r0, r3
 80062ce:	3714      	adds	r7, #20
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <_ZN8std_msgs7Float3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80062e2:	2300      	movs	r3, #0
 80062e4:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 80062e6:	2300      	movs	r3, #0
 80062e8:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	6839      	ldr	r1, [r7, #0]
 80062f0:	440a      	add	r2, r1
 80062f2:	7812      	ldrb	r2, [r2, #0]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	3301      	adds	r3, #1
 80062fe:	6839      	ldr	r1, [r7, #0]
 8006300:	440b      	add	r3, r1
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	021b      	lsls	r3, r3, #8
 8006306:	4313      	orrs	r3, r2
 8006308:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800630a:	68ba      	ldr	r2, [r7, #8]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	3302      	adds	r3, #2
 8006310:	6839      	ldr	r1, [r7, #0]
 8006312:	440b      	add	r3, r1
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	041b      	lsls	r3, r3, #16
 8006318:	4313      	orrs	r3, r2
 800631a:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	3303      	adds	r3, #3
 8006322:	6839      	ldr	r1, [r7, #0]
 8006324:	440b      	add	r3, r1
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	061b      	lsls	r3, r3, #24
 800632a:	4313      	orrs	r3, r2
 800632c:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 800632e:	68ba      	ldr	r2, [r7, #8]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	3304      	adds	r3, #4
 8006338:	60fb      	str	r3, [r7, #12]
     return offset;
 800633a:	68fb      	ldr	r3, [r7, #12]
    }
 800633c:	4618      	mov	r0, r3
 800633e:	3714      	adds	r7, #20
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <_ZN8std_msgs7Float327getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float32"; };
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	4b03      	ldr	r3, [pc, #12]	; (8006360 <_ZN8std_msgs7Float327getTypeEv+0x18>)
 8006352:	4618      	mov	r0, r3
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	08015164 	.word	0x08015164

08006364 <_ZN8std_msgs7Float326getMD5Ev>:
    virtual const char * getMD5() override { return "73fcbf46b49191e672908e50842a83d4"; };
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	4b03      	ldr	r3, [pc, #12]	; (800637c <_ZN8std_msgs7Float326getMD5Ev+0x18>)
 800636e:	4618      	mov	r0, r3
 8006370:	370c      	adds	r7, #12
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	08015178 	.word	0x08015178

08006380 <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4618      	mov	r0, r3
 800638c:	f7fd fbe8 	bl	8003b60 <_ZN3ros3MsgC1Ev>
 8006390:	4a08      	ldr	r2, [pc, #32]	; (80063b4 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	601a      	str	r2, [r3, #0]
      label(""),
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a07      	ldr	r2, [pc, #28]	; (80063b8 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 800639a:	605a      	str	r2, [r3, #4]
      size(0),
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	609a      	str	r2, [r3, #8]
      stride(0)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	60da      	str	r2, [r3, #12]
    {
    }
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4618      	mov	r0, r3
 80063ac:	3708      	adds	r7, #8
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	08015480 	.word	0x08015480
 80063b8:	08015048 	.word	0x08015048

080063bc <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80063c6:	2300      	movs	r3, #0
 80063c8:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	4618      	mov	r0, r3
 80063d0:	f7f9 ff5e 	bl	8000290 <strlen>
 80063d4:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	683a      	ldr	r2, [r7, #0]
 80063da:	4413      	add	r3, r2
 80063dc:	68b9      	ldr	r1, [r7, #8]
 80063de:	4618      	mov	r0, r3
 80063e0:	f000 fd6c 	bl	8006ebc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	3304      	adds	r3, #4
 80063e8:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	683a      	ldr	r2, [r7, #0]
 80063ee:	18d0      	adds	r0, r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	4619      	mov	r1, r3
 80063f8:	f00c fcf9 	bl	8012dee <memcpy>
      offset += length_label;
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	4413      	add	r3, r2
 8006402:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6899      	ldr	r1, [r3, #8]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	683a      	ldr	r2, [r7, #0]
 800640c:	4413      	add	r3, r2
 800640e:	b2ca      	uxtb	r2, r1
 8006410:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	0a19      	lsrs	r1, r3, #8
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	3301      	adds	r3, #1
 800641c:	683a      	ldr	r2, [r7, #0]
 800641e:	4413      	add	r3, r2
 8006420:	b2ca      	uxtb	r2, r1
 8006422:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	0c19      	lsrs	r1, r3, #16
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	3302      	adds	r3, #2
 800642e:	683a      	ldr	r2, [r7, #0]
 8006430:	4413      	add	r3, r2
 8006432:	b2ca      	uxtb	r2, r1
 8006434:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	0e19      	lsrs	r1, r3, #24
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	3303      	adds	r3, #3
 8006440:	683a      	ldr	r2, [r7, #0]
 8006442:	4413      	add	r3, r2
 8006444:	b2ca      	uxtb	r2, r1
 8006446:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	3304      	adds	r3, #4
 800644c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	68d9      	ldr	r1, [r3, #12]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	683a      	ldr	r2, [r7, #0]
 8006456:	4413      	add	r3, r2
 8006458:	b2ca      	uxtb	r2, r1
 800645a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	0a19      	lsrs	r1, r3, #8
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	3301      	adds	r3, #1
 8006466:	683a      	ldr	r2, [r7, #0]
 8006468:	4413      	add	r3, r2
 800646a:	b2ca      	uxtb	r2, r1
 800646c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	0c19      	lsrs	r1, r3, #16
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	3302      	adds	r3, #2
 8006478:	683a      	ldr	r2, [r7, #0]
 800647a:	4413      	add	r3, r2
 800647c:	b2ca      	uxtb	r2, r1
 800647e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	0e19      	lsrs	r1, r3, #24
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	3303      	adds	r3, #3
 800648a:	683a      	ldr	r2, [r7, #0]
 800648c:	4413      	add	r3, r2
 800648e:	b2ca      	uxtb	r2, r1
 8006490:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	3304      	adds	r3, #4
 8006496:	60fb      	str	r3, [r7, #12]
      return offset;
 8006498:	68fb      	ldr	r3, [r7, #12]
    }
 800649a:	4618      	mov	r0, r3
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b086      	sub	sp, #24
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
 80064aa:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80064ac:	2300      	movs	r3, #0
 80064ae:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	683a      	ldr	r2, [r7, #0]
 80064b4:	441a      	add	r2, r3
 80064b6:	f107 030c 	add.w	r3, r7, #12
 80064ba:	4611      	mov	r1, r2
 80064bc:	4618      	mov	r0, r3
 80064be:	f000 fd1c 	bl	8006efa <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	3304      	adds	r3, #4
 80064c6:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	617b      	str	r3, [r7, #20]
 80064cc:	e00b      	b.n	80064e6 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 80064ce:	683a      	ldr	r2, [r7, #0]
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	441a      	add	r2, r3
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	3b01      	subs	r3, #1
 80064d8:	6839      	ldr	r1, [r7, #0]
 80064da:	440b      	add	r3, r1
 80064dc:	7812      	ldrb	r2, [r2, #0]
 80064de:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	3301      	adds	r3, #1
 80064e4:	617b      	str	r3, [r7, #20]
 80064e6:	693a      	ldr	r2, [r7, #16]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	4413      	add	r3, r2
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d3ed      	bcc.n	80064ce <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_label-1]=0;
 80064f2:	693a      	ldr	r2, [r7, #16]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	4413      	add	r3, r2
 80064f8:	3b01      	subs	r3, #1
 80064fa:	683a      	ldr	r2, [r7, #0]
 80064fc:	4413      	add	r3, r2
 80064fe:	2200      	movs	r2, #0
 8006500:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	3b01      	subs	r3, #1
 8006506:	683a      	ldr	r2, [r7, #0]
 8006508:	441a      	add	r2, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	605a      	str	r2, [r3, #4]
      offset += length_label;
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	4413      	add	r3, r2
 8006514:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	4413      	add	r3, r2
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	461a      	mov	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	689a      	ldr	r2, [r3, #8]
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	3301      	adds	r3, #1
 800652c:	6839      	ldr	r1, [r7, #0]
 800652e:	440b      	add	r3, r1
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	021b      	lsls	r3, r3, #8
 8006534:	431a      	orrs	r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	689a      	ldr	r2, [r3, #8]
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	3302      	adds	r3, #2
 8006542:	6839      	ldr	r1, [r7, #0]
 8006544:	440b      	add	r3, r1
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	041b      	lsls	r3, r3, #16
 800654a:	431a      	orrs	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	689a      	ldr	r2, [r3, #8]
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	3303      	adds	r3, #3
 8006558:	6839      	ldr	r1, [r7, #0]
 800655a:	440b      	add	r3, r1
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	061b      	lsls	r3, r3, #24
 8006560:	431a      	orrs	r2, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	3304      	adds	r3, #4
 800656a:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	683a      	ldr	r2, [r7, #0]
 8006570:	4413      	add	r3, r2
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	461a      	mov	r2, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	68da      	ldr	r2, [r3, #12]
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	3301      	adds	r3, #1
 8006582:	6839      	ldr	r1, [r7, #0]
 8006584:	440b      	add	r3, r1
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	021b      	lsls	r3, r3, #8
 800658a:	431a      	orrs	r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	68da      	ldr	r2, [r3, #12]
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	3302      	adds	r3, #2
 8006598:	6839      	ldr	r1, [r7, #0]
 800659a:	440b      	add	r3, r1
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	041b      	lsls	r3, r3, #16
 80065a0:	431a      	orrs	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	68da      	ldr	r2, [r3, #12]
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	3303      	adds	r3, #3
 80065ae:	6839      	ldr	r1, [r7, #0]
 80065b0:	440b      	add	r3, r1
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	061b      	lsls	r3, r3, #24
 80065b6:	431a      	orrs	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	3304      	adds	r3, #4
 80065c0:	613b      	str	r3, [r7, #16]
     return offset;
 80065c2:	693b      	ldr	r3, [r7, #16]
    }
 80065c4:	4618      	mov	r0, r3
 80065c6:	3718      	adds	r7, #24
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayDimension"; };
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	4b03      	ldr	r3, [pc, #12]	; (80065e4 <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 80065d6:	4618      	mov	r0, r3
 80065d8:	370c      	adds	r7, #12
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	0801519c 	.word	0x0801519c

080065e8 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    virtual const char * getMD5() override { return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	4b03      	ldr	r3, [pc, #12]	; (8006600 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 80065f2:	4618      	mov	r0, r3
 80065f4:	370c      	adds	r7, #12
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	080151bc 	.word	0x080151bc

08006604 <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
      dim_length(0), st_dim(), dim(nullptr),
      data_offset(0)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4618      	mov	r0, r3
 8006610:	f7fd faa6 	bl	8003b60 <_ZN3ros3MsgC1Ev>
 8006614:	4a0a      	ldr	r2, [pc, #40]	; (8006640 <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	601a      	str	r2, [r3, #0]
      dim_length(0), st_dim(), dim(nullptr),
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	605a      	str	r2, [r3, #4]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	3308      	adds	r3, #8
 8006624:	4618      	mov	r0, r3
 8006626:	f7ff feab 	bl	8006380 <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	619a      	str	r2, [r3, #24]
      data_offset(0)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	61da      	str	r2, [r3, #28]
    {
    }
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4618      	mov	r0, r3
 800663a:	3708      	adds	r7, #8
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}
 8006640:	08015468 	.word	0x08015468

08006644 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800664e:	2300      	movs	r3, #0
 8006650:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6859      	ldr	r1, [r3, #4]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	683a      	ldr	r2, [r7, #0]
 800665a:	4413      	add	r3, r2
 800665c:	b2ca      	uxtb	r2, r1
 800665e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	0a19      	lsrs	r1, r3, #8
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	3301      	adds	r3, #1
 800666a:	683a      	ldr	r2, [r7, #0]
 800666c:	4413      	add	r3, r2
 800666e:	b2ca      	uxtb	r2, r1
 8006670:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	0c19      	lsrs	r1, r3, #16
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	3302      	adds	r3, #2
 800667c:	683a      	ldr	r2, [r7, #0]
 800667e:	4413      	add	r3, r2
 8006680:	b2ca      	uxtb	r2, r1
 8006682:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	0e19      	lsrs	r1, r3, #24
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	3303      	adds	r3, #3
 800668e:	683a      	ldr	r2, [r7, #0]
 8006690:	4413      	add	r3, r2
 8006692:	b2ca      	uxtb	r2, r1
 8006694:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	3304      	adds	r3, #4
 800669a:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 800669c:	2300      	movs	r3, #0
 800669e:	60bb      	str	r3, [r7, #8]
 80066a0:	e017      	b.n	80066d2 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x8e>
      offset += this->dim[i].serialize(outbuffer + offset);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	699a      	ldr	r2, [r3, #24]
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	011b      	lsls	r3, r3, #4
 80066aa:	18d0      	adds	r0, r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	699a      	ldr	r2, [r3, #24]
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	011b      	lsls	r3, r3, #4
 80066b4:	4413      	add	r3, r2
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	6839      	ldr	r1, [r7, #0]
 80066be:	440a      	add	r2, r1
 80066c0:	4611      	mov	r1, r2
 80066c2:	4798      	blx	r3
 80066c4:	4602      	mov	r2, r0
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	4413      	add	r3, r2
 80066ca:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	3301      	adds	r3, #1
 80066d0:	60bb      	str	r3, [r7, #8]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	429a      	cmp	r2, r3
 80066da:	d3e2      	bcc.n	80066a2 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	69d9      	ldr	r1, [r3, #28]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	683a      	ldr	r2, [r7, #0]
 80066e4:	4413      	add	r3, r2
 80066e6:	b2ca      	uxtb	r2, r1
 80066e8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	0a19      	lsrs	r1, r3, #8
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	3301      	adds	r3, #1
 80066f4:	683a      	ldr	r2, [r7, #0]
 80066f6:	4413      	add	r3, r2
 80066f8:	b2ca      	uxtb	r2, r1
 80066fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	69db      	ldr	r3, [r3, #28]
 8006700:	0c19      	lsrs	r1, r3, #16
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	3302      	adds	r3, #2
 8006706:	683a      	ldr	r2, [r7, #0]
 8006708:	4413      	add	r3, r2
 800670a:	b2ca      	uxtb	r2, r1
 800670c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	69db      	ldr	r3, [r3, #28]
 8006712:	0e19      	lsrs	r1, r3, #24
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	3303      	adds	r3, #3
 8006718:	683a      	ldr	r2, [r7, #0]
 800671a:	4413      	add	r3, r2
 800671c:	b2ca      	uxtb	r2, r1
 800671e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	3304      	adds	r3, #4
 8006724:	60fb      	str	r3, [r7, #12]
      return offset;
 8006726:	68fb      	ldr	r3, [r7, #12]
    }
 8006728:	4618      	mov	r0, r3
 800672a:	3710      	adds	r7, #16
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8006730:	b580      	push	{r7, lr}
 8006732:	b086      	sub	sp, #24
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800673a:	2300      	movs	r3, #0
 800673c:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	683a      	ldr	r2, [r7, #0]
 8006742:	4413      	add	r3, r2
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	3301      	adds	r3, #1
 800674c:	683a      	ldr	r2, [r7, #0]
 800674e:	4413      	add	r3, r2
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	021b      	lsls	r3, r3, #8
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	4313      	orrs	r3, r2
 8006758:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	3302      	adds	r3, #2
 800675e:	683a      	ldr	r2, [r7, #0]
 8006760:	4413      	add	r3, r2
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	041b      	lsls	r3, r3, #16
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	4313      	orrs	r3, r2
 800676a:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	3303      	adds	r3, #3
 8006770:	683a      	ldr	r2, [r7, #0]
 8006772:	4413      	add	r3, r2
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	061b      	lsls	r3, r3, #24
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	4313      	orrs	r3, r2
 800677c:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	3304      	adds	r3, #4
 8006782:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	429a      	cmp	r2, r3
 800678c:	d90a      	bls.n	80067a4 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	699a      	ldr	r2, [r3, #24]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	011b      	lsls	r3, r3, #4
 8006796:	4619      	mov	r1, r3
 8006798:	4610      	mov	r0, r2
 800679a:	f00b fb8d 	bl	8011eb8 <realloc>
 800679e:	4602      	mov	r2, r0
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 80067aa:	2300      	movs	r3, #0
 80067ac:	613b      	str	r3, [r7, #16]
 80067ae:	e01a      	b.n	80067e6 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xb6>
      offset += this->st_dim.deserialize(inbuffer + offset);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f103 0008 	add.w	r0, r3, #8
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	683a      	ldr	r2, [r7, #0]
 80067ba:	4413      	add	r3, r2
 80067bc:	4619      	mov	r1, r3
 80067be:	f7ff fe70 	bl	80064a2 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 80067c2:	4602      	mov	r2, r0
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	4413      	add	r3, r2
 80067c8:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	699a      	ldr	r2, [r3, #24]
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	011b      	lsls	r3, r3, #4
 80067d2:	18d0      	adds	r0, r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	3308      	adds	r3, #8
 80067d8:	2210      	movs	r2, #16
 80067da:	4619      	mov	r1, r3
 80067dc:	f00c fb07 	bl	8012dee <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	3301      	adds	r3, #1
 80067e4:	613b      	str	r3, [r7, #16]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	693a      	ldr	r2, [r7, #16]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d3df      	bcc.n	80067b0 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x80>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	683a      	ldr	r2, [r7, #0]
 80067f4:	4413      	add	r3, r2
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	461a      	mov	r2, r3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	69da      	ldr	r2, [r3, #28]
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	3301      	adds	r3, #1
 8006806:	6839      	ldr	r1, [r7, #0]
 8006808:	440b      	add	r3, r1
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	021b      	lsls	r3, r3, #8
 800680e:	431a      	orrs	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	69da      	ldr	r2, [r3, #28]
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	3302      	adds	r3, #2
 800681c:	6839      	ldr	r1, [r7, #0]
 800681e:	440b      	add	r3, r1
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	041b      	lsls	r3, r3, #16
 8006824:	431a      	orrs	r2, r3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	69da      	ldr	r2, [r3, #28]
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	3303      	adds	r3, #3
 8006832:	6839      	ldr	r1, [r7, #0]
 8006834:	440b      	add	r3, r1
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	061b      	lsls	r3, r3, #24
 800683a:	431a      	orrs	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	3304      	adds	r3, #4
 8006844:	617b      	str	r3, [r7, #20]
     return offset;
 8006846:	697b      	ldr	r3, [r7, #20]
    }
 8006848:	4618      	mov	r0, r3
 800684a:	3718      	adds	r7, #24
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayLayout"; };
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	4b03      	ldr	r3, [pc, #12]	; (8006868 <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 800685a:	4618      	mov	r0, r3
 800685c:	370c      	adds	r7, #12
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	080151e0 	.word	0x080151e0

0800686c <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    virtual const char * getMD5() override { return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	4b03      	ldr	r3, [pc, #12]	; (8006884 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 8006876:	4618      	mov	r0, r3
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	080151fc 	.word	0x080151fc

08006888 <_ZN8std_msgs17Float32MultiArrayC1Ev>:
      uint32_t data_length;
      typedef float _data_type;
      _data_type st_data;
      _data_type * data;

    Float32MultiArray():
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), st_data(), data(nullptr)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4618      	mov	r0, r3
 8006894:	f7fd f964 	bl	8003b60 <_ZN3ros3MsgC1Ev>
 8006898:	4a0b      	ldr	r2, [pc, #44]	; (80068c8 <_ZN8std_msgs17Float32MultiArrayC1Ev+0x40>)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	601a      	str	r2, [r3, #0]
      layout(),
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	3304      	adds	r3, #4
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7ff feae 	bl	8006604 <_ZN8std_msgs16MultiArrayLayoutC1Ev>
      data_length(0), st_data(), data(nullptr)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	625a      	str	r2, [r3, #36]	; 0x24
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f04f 0200 	mov.w	r2, #0
 80068b4:	629a      	str	r2, [r3, #40]	; 0x28
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	62da      	str	r2, [r3, #44]	; 0x2c
    {
    }
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4618      	mov	r0, r3
 80068c0:	3708      	adds	r7, #8
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	08015450 	.word	0x08015450

080068cc <_ZNK8std_msgs17Float32MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b086      	sub	sp, #24
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80068d6:	2300      	movs	r3, #0
 80068d8:	617b      	str	r3, [r7, #20]
      offset += this->layout.serialize(outbuffer + offset);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	1d18      	adds	r0, r3, #4
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	683a      	ldr	r2, [r7, #0]
 80068e2:	4413      	add	r3, r2
 80068e4:	4619      	mov	r1, r3
 80068e6:	f7ff fead 	bl	8006644 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 80068ea:	4602      	mov	r2, r0
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	4413      	add	r3, r2
 80068f0:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	683a      	ldr	r2, [r7, #0]
 80068fa:	4413      	add	r3, r2
 80068fc:	b2ca      	uxtb	r2, r1
 80068fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006904:	0a19      	lsrs	r1, r3, #8
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	3301      	adds	r3, #1
 800690a:	683a      	ldr	r2, [r7, #0]
 800690c:	4413      	add	r3, r2
 800690e:	b2ca      	uxtb	r2, r1
 8006910:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006916:	0c19      	lsrs	r1, r3, #16
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	3302      	adds	r3, #2
 800691c:	683a      	ldr	r2, [r7, #0]
 800691e:	4413      	add	r3, r2
 8006920:	b2ca      	uxtb	r2, r1
 8006922:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006928:	0e19      	lsrs	r1, r3, #24
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	3303      	adds	r3, #3
 800692e:	683a      	ldr	r2, [r7, #0]
 8006930:	4413      	add	r3, r2
 8006932:	b2ca      	uxtb	r2, r1
 8006934:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	3304      	adds	r3, #4
 800693a:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 800693c:	2300      	movs	r3, #0
 800693e:	613b      	str	r3, [r7, #16]
 8006940:	e02a      	b.n	8006998 <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0xcc>
      union {
        float real;
        uint32_t base;
      } u_datai;
      u_datai.real = this->data[i];
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	4413      	add	r3, r2
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 8006950:	68f9      	ldr	r1, [r7, #12]
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	683a      	ldr	r2, [r7, #0]
 8006956:	4413      	add	r3, r2
 8006958:	b2ca      	uxtb	r2, r1
 800695a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	0a19      	lsrs	r1, r3, #8
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	3301      	adds	r3, #1
 8006964:	683a      	ldr	r2, [r7, #0]
 8006966:	4413      	add	r3, r2
 8006968:	b2ca      	uxtb	r2, r1
 800696a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_datai.base >> (8 * 2)) & 0xFF;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	0c19      	lsrs	r1, r3, #16
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	3302      	adds	r3, #2
 8006974:	683a      	ldr	r2, [r7, #0]
 8006976:	4413      	add	r3, r2
 8006978:	b2ca      	uxtb	r2, r1
 800697a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_datai.base >> (8 * 3)) & 0xFF;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	0e19      	lsrs	r1, r3, #24
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	3303      	adds	r3, #3
 8006984:	683a      	ldr	r2, [r7, #0]
 8006986:	4413      	add	r3, r2
 8006988:	b2ca      	uxtb	r2, r1
 800698a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	3304      	adds	r3, #4
 8006990:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	3301      	adds	r3, #1
 8006996:	613b      	str	r3, [r7, #16]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699c:	693a      	ldr	r2, [r7, #16]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d3cf      	bcc.n	8006942 <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0x76>
      }
      return offset;
 80069a2:	697b      	ldr	r3, [r7, #20]
    }
 80069a4:	4618      	mov	r0, r3
 80069a6:	3718      	adds	r7, #24
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <_ZN8std_msgs17Float32MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b086      	sub	sp, #24
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80069b6:	2300      	movs	r3, #0
 80069b8:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	1d18      	adds	r0, r3, #4
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	683a      	ldr	r2, [r7, #0]
 80069c2:	4413      	add	r3, r2
 80069c4:	4619      	mov	r1, r3
 80069c6:	f7ff feb3 	bl	8006730 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 80069ca:	4602      	mov	r2, r0
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	4413      	add	r3, r2
 80069d0:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	683a      	ldr	r2, [r7, #0]
 80069d6:	4413      	add	r3, r2
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	3301      	adds	r3, #1
 80069e0:	683a      	ldr	r2, [r7, #0]
 80069e2:	4413      	add	r3, r2
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	021b      	lsls	r3, r3, #8
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	3302      	adds	r3, #2
 80069f2:	683a      	ldr	r2, [r7, #0]
 80069f4:	4413      	add	r3, r2
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	041b      	lsls	r3, r3, #16
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	3303      	adds	r3, #3
 8006a04:	683a      	ldr	r2, [r7, #0]
 8006a06:	4413      	add	r3, r2
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	061b      	lsls	r3, r3, #24
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	3304      	adds	r3, #4
 8006a16:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d90a      	bls.n	8006a38 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x8c>
        this->data = (float*)realloc(this->data, data_lengthT * sizeof(float));
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	4610      	mov	r0, r2
 8006a2e:	f00b fa43 	bl	8011eb8 <realloc>
 8006a32:	4602      	mov	r2, r0
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	62da      	str	r2, [r3, #44]	; 0x2c
      data_length = data_lengthT;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	625a      	str	r2, [r3, #36]	; 0x24
      for( uint32_t i = 0; i < data_length; i++){
 8006a3e:	2300      	movs	r3, #0
 8006a40:	613b      	str	r3, [r7, #16]
 8006a42:	e035      	b.n	8006ab0 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x104>
      union {
        float real;
        uint32_t base;
      } u_st_data;
      u_st_data.base = 0;
 8006a44:	2300      	movs	r3, #0
 8006a46:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	6839      	ldr	r1, [r7, #0]
 8006a4e:	440a      	add	r2, r1
 8006a50:	7812      	ldrb	r2, [r2, #0]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006a56:	68ba      	ldr	r2, [r7, #8]
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	6839      	ldr	r1, [r7, #0]
 8006a5e:	440b      	add	r3, r1
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	021b      	lsls	r3, r3, #8
 8006a64:	4313      	orrs	r3, r2
 8006a66:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	3302      	adds	r3, #2
 8006a6e:	6839      	ldr	r1, [r7, #0]
 8006a70:	440b      	add	r3, r1
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	041b      	lsls	r3, r3, #16
 8006a76:	4313      	orrs	r3, r2
 8006a78:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	3303      	adds	r3, #3
 8006a80:	6839      	ldr	r1, [r7, #0]
 8006a82:	440b      	add	r3, r1
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	061b      	lsls	r3, r3, #24
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	60bb      	str	r3, [r7, #8]
      this->st_data = u_st_data.real;
 8006a8c:	68ba      	ldr	r2, [r7, #8]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	629a      	str	r2, [r3, #40]	; 0x28
      offset += sizeof(this->st_data);
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	3304      	adds	r3, #4
 8006a96:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(float));
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	4413      	add	r3, r2
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	3228      	adds	r2, #40	; 0x28
 8006aa6:	6812      	ldr	r2, [r2, #0]
 8006aa8:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	3301      	adds	r3, #1
 8006aae:	613b      	str	r3, [r7, #16]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab4:	693a      	ldr	r2, [r7, #16]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d3c4      	bcc.n	8006a44 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x98>
      }
     return offset;
 8006aba:	697b      	ldr	r3, [r7, #20]
    }
 8006abc:	4618      	mov	r0, r3
 8006abe:	3718      	adds	r7, #24
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <_ZN8std_msgs17Float32MultiArray7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float32MultiArray"; };
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	4b03      	ldr	r3, [pc, #12]	; (8006adc <_ZN8std_msgs17Float32MultiArray7getTypeEv+0x18>)
 8006ace:	4618      	mov	r0, r3
 8006ad0:	370c      	adds	r7, #12
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop
 8006adc:	08015220 	.word	0x08015220

08006ae0 <_ZN8std_msgs17Float32MultiArray6getMD5Ev>:
    virtual const char * getMD5() override { return "6a40e0ffa6a17a503ac3f8616991b1f6"; };
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	4b03      	ldr	r3, [pc, #12]	; (8006af8 <_ZN8std_msgs17Float32MultiArray6getMD5Ev+0x18>)
 8006aea:	4618      	mov	r0, r3
 8006aec:	370c      	adds	r7, #12
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	0801523c 	.word	0x0801523c

08006afc <_ZN8std_msgs4BoolC1Ev>:
  {
    public:
      typedef bool _data_type;
      _data_type data;

    Bool():
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
      data(0)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7fd f82a 	bl	8003b60 <_ZN3ros3MsgC1Ev>
 8006b0c:	4a05      	ldr	r2, [pc, #20]	; (8006b24 <_ZN8std_msgs4BoolC1Ev+0x28>)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	601a      	str	r2, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	711a      	strb	r2, [r3, #4]
    {
    }
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3708      	adds	r7, #8
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	08015438 	.word	0x08015438

08006b28 <_ZNK8std_msgs4Bool9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8006b28:	b480      	push	{r7}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006b32:	2300      	movs	r3, #0
 8006b34:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	791b      	ldrb	r3, [r3, #4]
 8006b3a:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	683a      	ldr	r2, [r7, #0]
 8006b40:	4413      	add	r3, r2
 8006b42:	7a3a      	ldrb	r2, [r7, #8]
 8006b44:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	60fb      	str	r3, [r7, #12]
      return offset;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
    }
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3714      	adds	r7, #20
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <_ZN8std_msgs4Bool11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8006b5a:	b480      	push	{r7}
 8006b5c:	b085      	sub	sp, #20
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
 8006b62:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006b64:	2300      	movs	r3, #0
 8006b66:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006b6c:	7a3a      	ldrb	r2, [r7, #8]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6839      	ldr	r1, [r7, #0]
 8006b72:	440b      	add	r3, r1
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 8006b7c:	7a3a      	ldrb	r2, [r7, #8]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	3301      	adds	r3, #1
 8006b86:	60fb      	str	r3, [r7, #12]
     return offset;
 8006b88:	68fb      	ldr	r3, [r7, #12]
    }
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3714      	adds	r7, #20
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr
	...

08006b98 <_ZN8std_msgs4Bool7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Bool"; };
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	4b03      	ldr	r3, [pc, #12]	; (8006bb0 <_ZN8std_msgs4Bool7getTypeEv+0x18>)
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	370c      	adds	r7, #12
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr
 8006bae:	bf00      	nop
 8006bb0:	08015260 	.word	0x08015260

08006bb4 <_ZN8std_msgs4Bool6getMD5Ev>:
    virtual const char * getMD5() override { return "8b94c1b53db61fb6aed406028ad6332a"; };
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	4b03      	ldr	r3, [pc, #12]	; (8006bcc <_ZN8std_msgs4Bool6getMD5Ev+0x18>)
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	370c      	adds	r7, #12
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	08015270 	.word	0x08015270

08006bd0 <_Z11kinCallbackRKN13geometry_msgs7Vector3E>:
float msg_imu[10];
float msg_odom[7];
bool stateInv;
int16_t rawYaw;

void kinCallback(const geometry_msgs::Vector3 &data){
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
	xtarget = data.x;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006bde:	4610      	mov	r0, r2
 8006be0:	4619      	mov	r1, r3
 8006be2:	f7f9 fff1 	bl	8000bc8 <__aeabi_d2f>
 8006be6:	4603      	mov	r3, r0
 8006be8:	4a0c      	ldr	r2, [pc, #48]	; (8006c1c <_Z11kinCallbackRKN13geometry_msgs7Vector3E+0x4c>)
 8006bea:	6013      	str	r3, [r2, #0]
	ytarget = data.y;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006bf2:	4610      	mov	r0, r2
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	f7f9 ffe7 	bl	8000bc8 <__aeabi_d2f>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	4a08      	ldr	r2, [pc, #32]	; (8006c20 <_Z11kinCallbackRKN13geometry_msgs7Vector3E+0x50>)
 8006bfe:	6013      	str	r3, [r2, #0]
	thtarget = data.z;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006c06:	4610      	mov	r0, r2
 8006c08:	4619      	mov	r1, r3
 8006c0a:	f7f9 ffdd 	bl	8000bc8 <__aeabi_d2f>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	4a04      	ldr	r2, [pc, #16]	; (8006c24 <_Z11kinCallbackRKN13geometry_msgs7Vector3E+0x54>)
 8006c12:	6013      	str	r3, [r2, #0]
}
 8006c14:	bf00      	nop
 8006c16:	3708      	adds	r7, #8
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	20000aac 	.word	0x20000aac
 8006c20:	20000ab0 	.word	0x20000ab0
 8006c24:	20000ab4 	.word	0x20000ab4

08006c28 <_Z14invkinCallbackRKN13geometry_msgs7Vector3E>:

void invkinCallback(const geometry_msgs::Vector3 &data){
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
	InvTarget[0] = data.x;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006c36:	4610      	mov	r0, r2
 8006c38:	4619      	mov	r1, r3
 8006c3a:	f7f9 ffc5 	bl	8000bc8 <__aeabi_d2f>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	4a0c      	ldr	r2, [pc, #48]	; (8006c74 <_Z14invkinCallbackRKN13geometry_msgs7Vector3E+0x4c>)
 8006c42:	6013      	str	r3, [r2, #0]
	InvTarget[1] = data.y;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006c4a:	4610      	mov	r0, r2
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	f7f9 ffbb 	bl	8000bc8 <__aeabi_d2f>
 8006c52:	4603      	mov	r3, r0
 8006c54:	4a07      	ldr	r2, [pc, #28]	; (8006c74 <_Z14invkinCallbackRKN13geometry_msgs7Vector3E+0x4c>)
 8006c56:	6053      	str	r3, [r2, #4]
	InvTarget[2] = data.z;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006c5e:	4610      	mov	r0, r2
 8006c60:	4619      	mov	r1, r3
 8006c62:	f7f9 ffb1 	bl	8000bc8 <__aeabi_d2f>
 8006c66:	4603      	mov	r3, r0
 8006c68:	4a02      	ldr	r2, [pc, #8]	; (8006c74 <_Z14invkinCallbackRKN13geometry_msgs7Vector3E+0x4c>)
 8006c6a:	6093      	str	r3, [r2, #8]
}
 8006c6c:	bf00      	nop
 8006c6e:	3708      	adds	r7, #8
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	20000abc 	.word	0x20000abc

08006c78 <_Z15stateInverseKinRKN8std_msgs4BoolE>:

void stateInverseKin(const std_msgs::Bool &data){
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
	stateInv = data.data;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	791a      	ldrb	r2, [r3, #4]
 8006c84:	4b03      	ldr	r3, [pc, #12]	; (8006c94 <_Z15stateInverseKinRKN8std_msgs4BoolE+0x1c>)
 8006c86:	701a      	strb	r2, [r3, #0]
}
 8006c88:	bf00      	nop
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr
 8006c94:	20000ac8 	.word	0x20000ac8

08006c98 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	4a04      	ldr	r2, [pc, #16]	; (8006cb4 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	601a      	str	r2, [r3, #0]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4618      	mov	r0, r3
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr
 8006cb4:	080154f8 	.word	0x080154f8

08006cb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 4096, //512
         int OUTPUT_SIZE = 4096> //512
class NodeHandle_ : public NodeHandleBase_
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7ff ffe8 	bl	8006c98 <_ZN3ros15NodeHandleBase_C1Ev>
 8006cc8:	4a47      	ldr	r2, [pc, #284]	; (8006de8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EEC1Ev+0x130>)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	601a      	str	r2, [r3, #0]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	3304      	adds	r3, #4
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f7fd fdce 	bl	8004874 <_ZN13STM32HardwareC1Ev>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8006cfe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006d02:	2100      	movs	r1, #0
 8006d04:	4618      	mov	r0, r3
 8006d06:	f00b ff9d 	bl	8012c44 <memset>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d10:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8006d14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006d18:	2100      	movs	r1, #0
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f00b ff92 	bl	8012c44 <memset>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006d26:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8006d2a:	2264      	movs	r2, #100	; 0x64
 8006d2c:	2100      	movs	r1, #0
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f00b ff88 	bl	8012c44 <memset>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006d3a:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8006d3e:	2264      	movs	r2, #100	; 0x64
 8006d40:	2100      	movs	r1, #0
 8006d42:	4618      	mov	r0, r3
 8006d44:	f00b ff7e 	bl	8012c44 <memset>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006d4e:	461a      	mov	r2, r3
 8006d50:	2300      	movs	r3, #0
 8006d52:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	2300      	movs	r3, #0
 8006d60:	f8c2 38f0 	str.w	r3, [r2, #2288]	; 0x8f0
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	f8c2 38f4 	str.w	r3, [r2, #2292]	; 0x8f4
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006d78:	461a      	mov	r2, r3
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	f8c2 38f8 	str.w	r3, [r2, #2296]	; 0x8f8
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006d86:	461a      	mov	r2, r3
 8006d88:	2300      	movs	r3, #0
 8006d8a:	f8c2 38fc 	str.w	r3, [r2, #2300]	; 0x8fc
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006da0:	461a      	mov	r2, r3
 8006da2:	2300      	movs	r3, #0
 8006da4:	f8c2 3904 	str.w	r3, [r2, #2308]	; 0x904
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006dae:	461a      	mov	r2, r3
 8006db0:	2300      	movs	r3, #0
 8006db2:	f8c2 3908 	str.w	r3, [r2, #2312]	; 0x908
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	f8c2 390c 	str.w	r3, [r2, #2316]	; 0x90c
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8006dd6:	3314      	adds	r3, #20
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7fd fa35 	bl	8004248 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4618      	mov	r0, r3
 8006de2:	3708      	adds	r7, #8
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	08015424 	.word	0x08015424

08006dec <HAL_UART_TxCpltCallback>:
ros::Subscriber<std_msgs::Bool> stateInv_Sub("robot/stateInv", &stateInverseKin);
ros::Publisher errorArr("robot/Error_Aksen", &error_arr_msg);
//ros::Publisher imu_pub("robot/imu", &imuData);
//ros::Publisher odom_pub("robot/odom", &odomData);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b082      	sub	sp, #8
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
	nh.getHardware()->flush();
 8006df4:	4805      	ldr	r0, [pc, #20]	; (8006e0c <HAL_UART_TxCpltCallback+0x20>)
 8006df6:	f000 f8ff 	bl	8006ff8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE11getHardwareEv>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f7fd fd9f 	bl	8004940 <_ZN13STM32Hardware5flushEv>
}
 8006e02:	bf00      	nop
 8006e04:	3708      	adds	r7, #8
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	20000acc 	.word	0x20000acc

08006e10 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
	nh.getHardware()->reset_rbuf();
 8006e18:	4805      	ldr	r0, [pc, #20]	; (8006e30 <HAL_UART_RxCpltCallback+0x20>)
 8006e1a:	f000 f8ed 	bl	8006ff8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE11getHardwareEv>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7fd fd4e 	bl	80048c2 <_ZN13STM32Hardware10reset_rbufEv>
}
 8006e26:	bf00      	nop
 8006e28:	3708      	adds	r7, #8
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	20000acc 	.word	0x20000acc

08006e34 <setup>:

void errorArrPublish();
void imuPublish();
void odomPublish();

void setup(void) {
 8006e34:	b580      	push	{r7, lr}
 8006e36:	af00      	add	r7, sp, #0
	nh.initNode();
 8006e38:	480b      	ldr	r0, [pc, #44]	; (8006e68 <setup+0x34>)
 8006e3a:	f000 f8e9 	bl	8007010 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8initNodeEv>
	nh.advertise(errorArr); // error arrived
 8006e3e:	490b      	ldr	r1, [pc, #44]	; (8006e6c <setup+0x38>)
 8006e40:	4809      	ldr	r0, [pc, #36]	; (8006e68 <setup+0x34>)
 8006e42:	f000 f90e 	bl	8007062 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9advertiseERNS_9PublisherE>
//	nh.advertise(imu_pub);
//	nh.advertise(odom_pub);
	nh.subscribe(invKinematic); // inverse kinematic
 8006e46:	490a      	ldr	r1, [pc, #40]	; (8006e70 <setup+0x3c>)
 8006e48:	4807      	ldr	r0, [pc, #28]	; (8006e68 <setup+0x34>)
 8006e4a:	f000 f93a 	bl	80070c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(kinematic); // forward kinematic
 8006e4e:	4909      	ldr	r1, [pc, #36]	; (8006e74 <setup+0x40>)
 8006e50:	4805      	ldr	r0, [pc, #20]	; (8006e68 <setup+0x34>)
 8006e52:	f000 f936 	bl	80070c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(stateInv_Sub); // diaktifkan apabila menggunakan inverse kinematic
 8006e56:	4908      	ldr	r1, [pc, #32]	; (8006e78 <setup+0x44>)
 8006e58:	4803      	ldr	r0, [pc, #12]	; (8006e68 <setup+0x34>)
 8006e5a:	f000 f932 	bl	80070c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>
//	nh.negotiateTopics();
	HAL_Delay(100);
 8006e5e:	2064      	movs	r0, #100	; 0x64
 8006e60:	f001 fc8a 	bl	8008778 <HAL_Delay>
}
 8006e64:	bf00      	nop
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	20000acc 	.word	0x20000acc
 8006e6c:	2000358c 	.word	0x2000358c
 8006e70:	20003538 	.word	0x20003538
 8006e74:	20003500 	.word	0x20003500
 8006e78:	20003570 	.word	0x20003570

08006e7c <loop>:

void loop(){
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	af00      	add	r7, sp, #0
	errorArrPublish();
 8006e80:	f000 f80a 	bl	8006e98 <_Z15errorArrPublishv>
//	imuPublish();
//	odomPublish();
	nh.spinOnce();
 8006e84:	4803      	ldr	r0, [pc, #12]	; (8006e94 <loop+0x18>)
 8006e86:	f000 f947 	bl	8007118 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv>
	HAL_Delay(10);
 8006e8a:	200a      	movs	r0, #10
 8006e8c:	f001 fc74 	bl	8008778 <HAL_Delay>
}
 8006e90:	bf00      	nop
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	20000acc 	.word	0x20000acc

08006e98 <_Z15errorArrPublishv>:

void errorArrPublish(){
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	af00      	add	r7, sp, #0
	error_arr_msg.data = errorPub;
 8006e9c:	4b04      	ldr	r3, [pc, #16]	; (8006eb0 <_Z15errorArrPublishv+0x18>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a04      	ldr	r2, [pc, #16]	; (8006eb4 <_Z15errorArrPublishv+0x1c>)
 8006ea2:	6053      	str	r3, [r2, #4]
	errorArr.publish(&error_arr_msg);
 8006ea4:	4903      	ldr	r1, [pc, #12]	; (8006eb4 <_Z15errorArrPublishv+0x1c>)
 8006ea6:	4804      	ldr	r0, [pc, #16]	; (8006eb8 <_Z15errorArrPublishv+0x20>)
 8006ea8:	f7fd fcb1 	bl	800480e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8006eac:	bf00      	nop
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	20000ab8 	.word	0x20000ab8
 8006eb4:	20003498 	.word	0x20003498
 8006eb8:	2000358c 	.word	0x2000358c

08006ebc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8006ebc:	b480      	push	{r7}
 8006ebe:	b085      	sub	sp, #20
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	60fb      	str	r3, [r7, #12]
 8006eca:	e00c      	b.n	8006ee6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	00db      	lsls	r3, r3, #3
 8006ed0:	683a      	ldr	r2, [r7, #0]
 8006ed2:	fa22 f103 	lsr.w	r1, r2, r3
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	4413      	add	r3, r2
 8006edc:	b2ca      	uxtb	r2, r1
 8006ede:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	60fb      	str	r3, [r7, #12]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2b03      	cmp	r3, #3
 8006eea:	d9ef      	bls.n	8006ecc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8006eec:	bf00      	nop
 8006eee:	bf00      	nop
 8006ef0:	3714      	adds	r7, #20
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr

08006efa <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8006efa:	b480      	push	{r7}
 8006efc:	b085      	sub	sp, #20
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
 8006f02:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	60fb      	str	r3, [r7, #12]
 8006f0e:	e010      	b.n	8006f32 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	6839      	ldr	r1, [r7, #0]
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	440a      	add	r2, r1
 8006f1a:	7812      	ldrb	r2, [r2, #0]
 8006f1c:	4611      	mov	r1, r2
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	00d2      	lsls	r2, r2, #3
 8006f22:	fa01 f202 	lsl.w	r2, r1, r2
 8006f26:	431a      	orrs	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	60fb      	str	r3, [r7, #12]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2b03      	cmp	r3, #3
 8006f36:	d9eb      	bls.n	8006f10 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8006f38:	bf00      	nop
 8006f3a:	bf00      	nop
 8006f3c:	3714      	adds	r7, #20
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
	...

08006f48 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	4a04      	ldr	r2, [pc, #16]	; (8006f64 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	601a      	str	r2, [r3, #0]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4618      	mov	r0, r3
 8006f5a:	370c      	adds	r7, #12
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr
 8006f64:	080154e0 	.word	0x080154e0

08006f68 <_ZN3ros10SubscriberIN13geometry_msgs7Vector3EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	607a      	str	r2, [r7, #4]
 8006f74:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7ff ffe5 	bl	8006f48 <_ZN3ros11Subscriber_C1Ev>
 8006f7e:	4a0b      	ldr	r2, [pc, #44]	; (8006fac <_ZN3ros10SubscriberIN13geometry_msgs7Vector3EvEC1EPKcPFvRKS2_Ei+0x44>)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	601a      	str	r2, [r3, #0]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	3310      	adds	r3, #16
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7fe fc47 	bl	800581c <_ZN13geometry_msgs7Vector3C1Ev>
    cb_(cb),
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	631a      	str	r2, [r3, #48]	; 0x30
    endpoint_(endpoint)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	683a      	ldr	r2, [r7, #0]
 8006f98:	635a      	str	r2, [r3, #52]	; 0x34
  {
    topic_ = topic_name;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	68ba      	ldr	r2, [r7, #8]
 8006f9e:	609a      	str	r2, [r3, #8]
  };
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	0801540c 	.word	0x0801540c

08006fb0 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
 8006fbc:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f7ff ffc1 	bl	8006f48 <_ZN3ros11Subscriber_C1Ev>
 8006fc6:	4a0b      	ldr	r2, [pc, #44]	; (8006ff4 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei+0x44>)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	601a      	str	r2, [r3, #0]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	330c      	adds	r3, #12
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f7ff fd93 	bl	8006afc <_ZN8std_msgs4BoolC1Ev>
    cb_(cb),
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	683a      	ldr	r2, [r7, #0]
 8006fe0:	619a      	str	r2, [r3, #24]
    topic_ = topic_name;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	68ba      	ldr	r2, [r7, #8]
 8006fe6:	609a      	str	r2, [r3, #8]
  };
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	4618      	mov	r0, r3
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	080153f4 	.word	0x080153f4

08006ff8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	3304      	adds	r3, #4
  }
 8007004:	4618      	mov	r0, r3
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	3304      	adds	r3, #4
 800701c:	4618      	mov	r0, r3
 800701e:	f7fd fc45 	bl	80048ac <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007028:	461a      	mov	r2, r3
 800702a:	2300      	movs	r3, #0
 800702c:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
    bytes_ = 0;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007036:	461a      	mov	r2, r3
 8007038:	2300      	movs	r3, #0
 800703a:	f8c2 38f0 	str.w	r3, [r2, #2288]	; 0x8f0
    index_ = 0;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007044:	461a      	mov	r2, r3
 8007046:	2300      	movs	r3, #0
 8007048:	f8c2 38f8 	str.w	r3, [r2, #2296]	; 0x8f8
    topic_ = 0;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007052:	461a      	mov	r2, r3
 8007054:	2300      	movs	r3, #0
 8007056:	f8c2 38f4 	str.w	r3, [r2, #2292]	; 0x8f4
  };
 800705a:	bf00      	nop
 800705c:	3708      	adds	r7, #8
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8007062:	b480      	push	{r7}
 8007064:	b085      	sub	sp, #20
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
 800706a:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800706c:	2300      	movs	r3, #0
 800706e:	60fb      	str	r3, [r7, #12]
 8007070:	e01d      	b.n	80070ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x4c>
    {
      if (publishers[i] == 0) // empty slot
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	4413      	add	r3, r2
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d111      	bne.n	80070a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	4413      	add	r3, r2
 8007090:	683a      	ldr	r2, [r7, #0]
 8007092:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	60da      	str	r2, [r3, #12]
        return true;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e006      	b.n	80070b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	3301      	adds	r3, #1
 80070ac:	60fb      	str	r3, [r7, #12]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2b18      	cmp	r3, #24
 80070b2:	ddde      	ble.n	8007072 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 80070b4:	2300      	movs	r3, #0
  }
 80070b6:	4618      	mov	r0, r3
 80070b8:	3714      	adds	r7, #20
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr

080070c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 80070c2:	b480      	push	{r7}
 80070c4:	b085      	sub	sp, #20
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
 80070ca:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80070cc:	2300      	movs	r3, #0
 80070ce:	60fb      	str	r3, [r7, #12]
 80070d0:	e018      	b.n	8007104 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x42>
    {
      if (subscribers[i] == 0) // empty slot
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	f602 2222 	addw	r2, r2, #2594	; 0xa22
 80070da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d10d      	bne.n	80070fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x3c>
      {
        subscribers[i] = &s;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	f602 2222 	addw	r2, r2, #2594	; 0xa22
 80070ea:	6839      	ldr	r1, [r7, #0]
 80070ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	605a      	str	r2, [r3, #4]
        return true;
 80070fa:	2301      	movs	r3, #1
 80070fc:	e006      	b.n	800710c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	3301      	adds	r3, #1
 8007102:	60fb      	str	r3, [r7, #12]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2b18      	cmp	r3, #24
 8007108:	dde3      	ble.n	80070d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x10>
      }
    }
    return false;
 800710a:	2300      	movs	r3, #0
  }
 800710c:	4618      	mov	r0, r3
 800710e:	3714      	adds	r7, #20
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv>:
  virtual int spinOnce() override
 8007118:	b580      	push	{r7, lr}
 800711a:	b086      	sub	sp, #24
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	3304      	adds	r3, #4
 8007124:	4618      	mov	r0, r3
 8007126:	f7fd fcaf 	bl	8004a88 <_ZN13STM32Hardware4timeEv>
 800712a:	6138      	str	r0, [r7, #16]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007132:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8007136:	693a      	ldr	r2, [r7, #16]
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800713e:	4293      	cmp	r3, r2
 8007140:	d905      	bls.n	800714e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x36>
      configured_ = false;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007148:	2200      	movs	r2, #0
 800714a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007154:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00e      	beq.n	800717a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007162:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8007166:	693a      	ldr	r2, [r7, #16]
 8007168:	429a      	cmp	r2, r3
 800716a:	d906      	bls.n	800717a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007172:	461a      	mov	r2, r3
 8007174:	2300      	movs	r3, #0
 8007176:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
    bool tx_stop_requested = false;
 800717a:	2300      	movs	r3, #0
 800717c:	75fb      	strb	r3, [r7, #23]
    bool saw_time_msg = false;
 800717e:	2300      	movs	r3, #0
 8007180:	75bb      	strb	r3, [r7, #22]
      if (spin_timeout_ > 0)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 8007188:	2b00      	cmp	r3, #0
 800718a:	d014      	beq.n	80071b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x9e>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	3304      	adds	r3, #4
 8007190:	4618      	mov	r0, r3
 8007192:	f7fd fc79 	bl	8004a88 <_ZN13STM32Hardware4timeEv>
 8007196:	4602      	mov	r2, r0
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	1ad2      	subs	r2, r2, r3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 80071a2:	429a      	cmp	r2, r3
 80071a4:	bf8c      	ite	hi
 80071a6:	2301      	movhi	r3, #1
 80071a8:	2300      	movls	r3, #0
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d002      	beq.n	80071b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x9e>
          return SPIN_TIMEOUT;
 80071b0:	f06f 0301 	mvn.w	r3, #1
 80071b4:	e232      	b.n	800761c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x504>
      int data = hardware_.read();
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	3304      	adds	r3, #4
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7fd fb92 	bl	80048e4 <_ZN13STM32Hardware4readEv>
 80071c0:	60f8      	str	r0, [r7, #12]
      if (data < 0)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f2c0 81fe 	blt.w	80075c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x4ae>
      checksum_ += data;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80071d0:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	4413      	add	r3, r2
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80071de:	f8c2 38fc 	str.w	r3, [r2, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80071e8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80071ec:	2b07      	cmp	r3, #7
 80071ee:	d12b      	bne.n	8007248 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80071f6:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80071fa:	1c5a      	adds	r2, r3, #1
 80071fc:	6879      	ldr	r1, [r7, #4]
 80071fe:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 8007202:	f8c1 28f8 	str.w	r2, [r1, #2296]	; 0x8f8
 8007206:	68fa      	ldr	r2, [r7, #12]
 8007208:	b2d1      	uxtb	r1, r2
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	4413      	add	r3, r2
 800720e:	460a      	mov	r2, r1
 8007210:	f883 2824 	strb.w	r2, [r3, #2084]	; 0x824
        bytes_--;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800721a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800721e:	3b01      	subs	r3, #1
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8007226:	f8c2 38f0 	str.w	r3, [r2, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007230:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d1a4      	bne.n	8007182 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
          mode_ = MODE_MSG_CHECKSUM;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800723e:	461a      	mov	r2, r3
 8007240:	2308      	movs	r3, #8
 8007242:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
 8007246:	e79c      	b.n	8007182 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
      else if (mode_ == MODE_FIRST_FF)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800724e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007252:	2b00      	cmp	r3, #0
 8007254:	d130      	bne.n	80072b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2bff      	cmp	r3, #255	; 0xff
 800725a:	d112      	bne.n	8007282 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x16a>
          mode_++;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007262:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007266:	3301      	adds	r3, #1
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800726e:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	3314      	adds	r3, #20
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800727c:	f8c2 390c 	str.w	r3, [r2, #2316]	; 0x90c
 8007280:	e77f      	b.n	8007182 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	3304      	adds	r3, #4
 8007286:	4618      	mov	r0, r3
 8007288:	f7fd fbfe 	bl	8004a88 <_ZN13STM32Hardware4timeEv>
 800728c:	4602      	mov	r2, r0
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	1ad3      	subs	r3, r2, r3
 8007292:	f241 3288 	movw	r2, #5000	; 0x1388
 8007296:	4293      	cmp	r3, r2
 8007298:	bf8c      	ite	hi
 800729a:	2301      	movhi	r3, #1
 800729c:	2300      	movls	r3, #0
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	f43f af6e 	beq.w	8007182 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
          configured_ = false;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80072ac:	2200      	movs	r2, #0
 80072ae:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 80072b2:	f06f 0301 	mvn.w	r3, #1
 80072b6:	e1b1      	b.n	800761c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x504>
      else if (mode_ == MODE_PROTOCOL_VER)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80072be:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d121      	bne.n	800730a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2bfe      	cmp	r3, #254	; 0xfe
 80072ca:	d10b      	bne.n	80072e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x1cc>
          mode_++;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80072d2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80072d6:	3301      	adds	r3, #1
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80072de:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
 80072e2:	e74e      	b.n	8007182 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
          mode_ = MODE_FIRST_FF;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80072ea:	461a      	mov	r2, r3
 80072ec:	2300      	movs	r3, #0
 80072ee:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
          if (configured_ == false)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80072f8:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f47f af40 	bne.w	8007182 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 f98e 	bl	8007624 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15requestSyncTimeEv>
 8007308:	e73b      	b.n	8007182 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007310:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007314:	2b02      	cmp	r3, #2
 8007316:	d120      	bne.n	800735a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x242>
        bytes_ = data;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800731e:	461a      	mov	r2, r3
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f8c2 38f0 	str.w	r3, [r2, #2288]	; 0x8f0
        index_ = 0;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800732c:	461a      	mov	r2, r3
 800732e:	2300      	movs	r3, #0
 8007330:	f8c2 38f8 	str.w	r3, [r2, #2296]	; 0x8f8
        mode_++;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800733a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800733e:	3301      	adds	r3, #1
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8007346:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007350:	461a      	mov	r2, r3
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f8c2 38fc 	str.w	r3, [r2, #2300]	; 0x8fc
 8007358:	e713      	b.n	8007182 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007360:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007364:	2b03      	cmp	r3, #3
 8007366:	d118      	bne.n	800739a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800736e:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	021b      	lsls	r3, r3, #8
 8007376:	4413      	add	r3, r2
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800737e:	f8c2 38f0 	str.w	r3, [r2, #2288]	; 0x8f0
        mode_++;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007388:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800738c:	3301      	adds	r3, #1
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8007394:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
 8007398:	e6f3      	b.n	8007182 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80073a0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80073a4:	2b04      	cmp	r3, #4
 80073a6:	d11f      	bne.n	80073e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80073ae:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80073b2:	425a      	negs	r2, r3
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	b2d2      	uxtb	r2, r2
 80073b8:	bf58      	it	pl
 80073ba:	4253      	negpl	r3, r2
 80073bc:	2bff      	cmp	r3, #255	; 0xff
 80073be:	d10b      	bne.n	80073d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x2c0>
          mode_++;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80073c6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80073ca:	3301      	adds	r3, #1
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80073d2:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
 80073d6:	e6d4      	b.n	8007182 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80073de:	461a      	mov	r2, r3
 80073e0:	2300      	movs	r3, #0
 80073e2:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
 80073e6:	e6cc      	b.n	8007182 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80073ee:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80073f2:	2b05      	cmp	r3, #5
 80073f4:	d119      	bne.n	800742a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x312>
        topic_ = data;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80073fc:	461a      	mov	r2, r3
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f8c2 38f4 	str.w	r3, [r2, #2292]	; 0x8f4
        mode_++;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800740a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800740e:	3301      	adds	r3, #1
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8007416:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007420:	461a      	mov	r2, r3
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f8c2 38fc 	str.w	r3, [r2, #2300]	; 0x8fc
 8007428:	e6ab      	b.n	8007182 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007430:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007434:	2b06      	cmp	r3, #6
 8007436:	d123      	bne.n	8007480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x368>
        topic_ += data << 8;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800743e:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	021b      	lsls	r3, r3, #8
 8007446:	4413      	add	r3, r2
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800744e:	f8c2 38f4 	str.w	r3, [r2, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007458:	461a      	mov	r2, r3
 800745a:	2307      	movs	r3, #7
 800745c:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
        if (bytes_ == 0)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007466:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800746a:	2b00      	cmp	r3, #0
 800746c:	f47f ae89 	bne.w	8007182 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
          mode_ = MODE_MSG_CHECKSUM;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007476:	461a      	mov	r2, r3
 8007478:	2308      	movs	r3, #8
 800747a:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
 800747e:	e680      	b.n	8007182 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007486:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800748a:	2b08      	cmp	r3, #8
 800748c:	f47f ae79 	bne.w	8007182 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
        mode_ = MODE_FIRST_FF;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007496:	461a      	mov	r2, r3
 8007498:	2300      	movs	r3, #0
 800749a:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80074a4:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80074a8:	425a      	negs	r2, r3
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	b2d2      	uxtb	r2, r2
 80074ae:	bf58      	it	pl
 80074b0:	4253      	negpl	r3, r2
 80074b2:	2bff      	cmp	r3, #255	; 0xff
 80074b4:	f47f ae65 	bne.w	8007182 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80074be:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d116      	bne.n	80074f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x3dc>
            requestSyncTime();
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f8ac 	bl	8007624 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15requestSyncTimeEv>
            negotiateTopics();
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 f8c7 	bl	8007660 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80074d8:	461a      	mov	r2, r3
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	f8c2 3904 	str.w	r3, [r2, #2308]	; 0x904
            last_sync_receive_time = c_time;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80074e6:	461a      	mov	r2, r3
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	f8c2 3908 	str.w	r3, [r2, #2312]	; 0x908
            return SPIN_ERR;
 80074ee:	f04f 33ff 	mov.w	r3, #4294967295
 80074f2:	e093      	b.n	800761c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x504>
          else if (topic_ == TopicInfo::ID_TIME)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80074fa:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80074fe:	2b0a      	cmp	r3, #10
 8007500:	d109      	bne.n	8007516 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x3fe>
            saw_time_msg = true;
 8007502:	2301      	movs	r3, #1
 8007504:	75bb      	strb	r3, [r7, #22]
            syncTime(message_in);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f603 0324 	addw	r3, r3, #2084	; 0x824
 800750c:	4619      	mov	r1, r3
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 f988 	bl	8007824 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8syncTimeEPh>
 8007514:	e635      	b.n	8007182 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800751c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8007520:	2b06      	cmp	r3, #6
 8007522:	d111      	bne.n	8007548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800752a:	3314      	adds	r3, #20
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	f602 0224 	addw	r2, r2, #2084	; 0x824
 8007532:	4611      	mov	r1, r2
 8007534:	4618      	mov	r0, r3
 8007536:	f7fc ffc6 	bl	80044c6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007540:	2201      	movs	r2, #1
 8007542:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8007546:	e61c      	b.n	8007182 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800754e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8007552:	2b0b      	cmp	r3, #11
 8007554:	d108      	bne.n	8007568 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x450>
            configured_ = false;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800755c:	2200      	movs	r2, #0
 800755e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
            tx_stop_requested = true;
 8007562:	2301      	movs	r3, #1
 8007564:	75fb      	strb	r3, [r7, #23]
 8007566:	e60c      	b.n	8007182 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
            if (subscribers[topic_ - 100])
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800756e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8007572:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f602 2222 	addw	r2, r2, #2594	; 0xa22
 800757c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007580:	2b00      	cmp	r3, #0
 8007582:	f43f adfe 	beq.w	8007182 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
              subscribers[topic_ - 100]->callback(message_in);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800758c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8007590:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f602 2222 	addw	r2, r2, #2594	; 0xa22
 800759a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80075a4:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80075a8:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f602 2222 	addw	r2, r2, #2594	; 0xa22
 80075b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	f602 0224 	addw	r2, r2, #2084	; 0x824
 80075c0:	4611      	mov	r1, r2
 80075c2:	4798      	blx	r3
    while (true)
 80075c4:	e5dd      	b.n	8007182 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
        break;
 80075c6:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80075ce:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d014      	beq.n	8007600 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x4e8>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80075dc:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 80075e0:	693a      	ldr	r2, [r7, #16]
 80075e2:	1ad3      	subs	r3, r2, r3
 80075e4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d909      	bls.n	8007600 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x4e8>
      requestSyncTime();
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 f819 	bl	8007624 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80075f8:	461a      	mov	r2, r3
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	f8c2 3904 	str.w	r3, [r2, #2308]	; 0x904
    return saw_time_msg ? SPIN_TIME_RECV : (tx_stop_requested ? SPIN_TX_STOP_REQUESTED : SPIN_OK);
 8007600:	7dbb      	ldrb	r3, [r7, #22]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d002      	beq.n	800760c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x4f4>
 8007606:	f06f 0303 	mvn.w	r3, #3
 800760a:	e006      	b.n	800761a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x502>
 800760c:	7dfb      	ldrb	r3, [r7, #23]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d002      	beq.n	8007618 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x500>
 8007612:	f06f 0302 	mvn.w	r3, #2
 8007616:	e000      	b.n	800761a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x502>
 8007618:	2300      	movs	r3, #0
 800761a:	bf00      	nop
  }
 800761c:	4618      	mov	r0, r3
 800761e:	3718      	adds	r7, #24
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15requestSyncTimeEv>:
  void requestSyncTime()
 8007624:	b580      	push	{r7, lr}
 8007626:	b086      	sub	sp, #24
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800762c:	f107 030c 	add.w	r3, r7, #12
 8007630:	4618      	mov	r0, r3
 8007632:	f7fc faa5 	bl	8003b80 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f107 020c 	add.w	r2, r7, #12
 8007640:	210a      	movs	r1, #10
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	4798      	blx	r3
    rt_time = hardware_.time();
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	3304      	adds	r3, #4
 800764a:	4618      	mov	r0, r3
 800764c:	f7fd fa1c 	bl	8004a88 <_ZN13STM32Hardware4timeEv>
 8007650:	4602      	mov	r2, r0
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  }
 8007658:	bf00      	nop
 800765a:	3718      	adds	r7, #24
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8007660:	b590      	push	{r4, r7, lr}
 8007662:	b08b      	sub	sp, #44	; 0x2c
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8007668:	f107 030c 	add.w	r3, r7, #12
 800766c:	4618      	mov	r0, r3
 800766e:	f7fc fb77 	bl	8003d60 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8007672:	2300      	movs	r3, #0
 8007674:	627b      	str	r3, [r7, #36]	; 0x24
 8007676:	e062      	b.n	800773e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767c:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	4413      	add	r3, r2
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d056      	beq.n	8007738 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768e:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	4413      	add	r3, r2
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	b29b      	uxth	r3, r3
 800769c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a2:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	4413      	add	r3, r2
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b4:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	4413      	add	r3, r2
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	6859      	ldr	r1, [r3, #4]
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c4:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	4413      	add	r3, r2
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	3308      	adds	r3, #8
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4608      	mov	r0, r1
 80076d8:	4798      	blx	r3
 80076da:	4603      	mov	r3, r0
 80076dc:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e2:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	4413      	add	r3, r2
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	6859      	ldr	r1, [r3, #4]
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f2:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	4413      	add	r3, r2
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	330c      	adds	r3, #12
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4608      	mov	r0, r1
 8007706:	4798      	blx	r3
 8007708:	4603      	mov	r3, r0
 800770a:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 800770c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007710:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681c      	ldr	r4, [r3, #0]
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771c:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	4413      	add	r3, r2
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	4618      	mov	r0, r3
 8007728:	f7fd f885 	bl	8004836 <_ZN3ros9Publisher15getEndpointTypeEv>
 800772c:	4601      	mov	r1, r0
 800772e:	f107 030c 	add.w	r3, r7, #12
 8007732:	461a      	mov	r2, r3
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8007738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773a:	3301      	adds	r3, #1
 800773c:	627b      	str	r3, [r7, #36]	; 0x24
 800773e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007740:	2b18      	cmp	r3, #24
 8007742:	dd99      	ble.n	8007678 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8007744:	2300      	movs	r3, #0
 8007746:	627b      	str	r3, [r7, #36]	; 0x24
 8007748:	e05e      	b.n	8007808 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800774e:	f602 2222 	addw	r2, r2, #2594	; 0xa22
 8007752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d053      	beq.n	8007802 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800775e:	f602 2222 	addw	r2, r2, #2594	; 0xa22
 8007762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	b29b      	uxth	r3, r3
 800776a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007770:	f602 2222 	addw	r2, r2, #2594	; 0xa22
 8007774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007780:	f602 2222 	addw	r2, r2, #2594	; 0xa22
 8007784:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800778c:	f602 2222 	addw	r2, r2, #2594	; 0xa22
 8007790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	3308      	adds	r3, #8
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4608      	mov	r0, r1
 800779c:	4798      	blx	r3
 800779e:	4603      	mov	r3, r0
 80077a0:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077a6:	f602 2222 	addw	r2, r2, #2594	; 0xa22
 80077aa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077b2:	f602 2222 	addw	r2, r2, #2594	; 0xa22
 80077b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	330c      	adds	r3, #12
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4608      	mov	r0, r1
 80077c2:	4798      	blx	r3
 80077c4:	4603      	mov	r3, r0
 80077c6:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80077c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077cc:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	681c      	ldr	r4, [r3, #0]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077d8:	f602 2222 	addw	r2, r2, #2594	; 0xa22
 80077dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077e4:	f602 2222 	addw	r2, r2, #2594	; 0xa22
 80077e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	3304      	adds	r3, #4
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4608      	mov	r0, r1
 80077f4:	4798      	blx	r3
 80077f6:	4601      	mov	r1, r0
 80077f8:	f107 030c 	add.w	r3, r7, #12
 80077fc:	461a      	mov	r2, r3
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8007802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007804:	3301      	adds	r3, #1
 8007806:	627b      	str	r3, [r7, #36]	; 0x24
 8007808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780a:	2b18      	cmp	r3, #24
 800780c:	dd9d      	ble.n	800774a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007814:	2201      	movs	r2, #1
 8007816:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 800781a:	bf00      	nop
 800781c:	372c      	adds	r7, #44	; 0x2c
 800781e:	46bd      	mov	sp, r7
 8007820:	bd90      	pop	{r4, r7, pc}
	...

08007824 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8007824:	b580      	push	{r7, lr}
 8007826:	b086      	sub	sp, #24
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800782e:	f107 0308 	add.w	r3, r7, #8
 8007832:	4618      	mov	r0, r3
 8007834:	f7fc f9a4 	bl	8003b80 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	3304      	adds	r3, #4
 800783c:	4618      	mov	r0, r3
 800783e:	f7fd f923 	bl	8004a88 <_ZN13STM32Hardware4timeEv>
 8007842:	4602      	mov	r2, r0
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 800784e:	f107 0308 	add.w	r3, r7, #8
 8007852:	6839      	ldr	r1, [r7, #0]
 8007854:	4618      	mov	r0, r3
 8007856:	f7fc fa03 	bl	8003c60 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	4916      	ldr	r1, [pc, #88]	; (80078b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8syncTimeEPh+0x94>)
 8007860:	fba1 1303 	umull	r1, r3, r1, r3
 8007864:	099b      	lsrs	r3, r3, #6
 8007866:	4413      	add	r3, r2
 8007868:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800786a:	6939      	ldr	r1, [r7, #16]
 800786c:	697a      	ldr	r2, [r7, #20]
 800786e:	4b12      	ldr	r3, [pc, #72]	; (80078b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8syncTimeEPh+0x94>)
 8007870:	fba3 0302 	umull	r0, r3, r3, r2
 8007874:	099b      	lsrs	r3, r3, #6
 8007876:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800787a:	fb00 f303 	mul.w	r3, r0, r3
 800787e:	1ad3      	subs	r3, r2, r3
 8007880:	4a0e      	ldr	r2, [pc, #56]	; (80078bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8syncTimeEPh+0x98>)
 8007882:	fb02 f303 	mul.w	r3, r2, r3
 8007886:	440b      	add	r3, r1
 8007888:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800788a:	f107 0308 	add.w	r3, r7, #8
 800788e:	3304      	adds	r3, #4
 8007890:	4619      	mov	r1, r3
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f8c0 	bl	8007a18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	3304      	adds	r3, #4
 800789c:	4618      	mov	r0, r3
 800789e:	f7fd f8f3 	bl	8004a88 <_ZN13STM32Hardware4timeEv>
 80078a2:	4602      	mov	r2, r0
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80078aa:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 80078ae:	bf00      	nop
 80078b0:	3718      	adds	r7, #24
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	10624dd3 	.word	0x10624dd3
 80078bc:	000f4240 	.word	0x000f4240

080078c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b088      	sub	sp, #32
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	60b9      	str	r1, [r7, #8]
 80078ca:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	2b63      	cmp	r3, #99	; 0x63
 80078d0:	dd0b      	ble.n	80078ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x2a>
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80078d8:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80078dc:	f083 0301 	eor.w	r3, r3, #1
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d001      	beq.n	80078ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 80078e6:	2300      	movs	r3, #0
 80078e8:	e090      	b.n	8007a0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 80078f6:	3304      	adds	r3, #4
 80078f8:	3307      	adds	r3, #7
 80078fa:	4619      	mov	r1, r3
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	4790      	blx	r2
 8007900:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007908:	22ff      	movs	r2, #255	; 0xff
 800790a:	f883 2824 	strb.w	r2, [r3, #2084]	; 0x824
    message_out[1] = PROTOCOL_VER;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007914:	22fe      	movs	r2, #254	; 0xfe
 8007916:	f883 2825 	strb.w	r2, [r3, #2085]	; 0x825
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	b2da      	uxtb	r2, r3
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007924:	f883 2826 	strb.w	r2, [r3, #2086]	; 0x826
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	b29b      	uxth	r3, r3
 800792c:	0a1b      	lsrs	r3, r3, #8
 800792e:	b29b      	uxth	r3, r3
 8007930:	b2da      	uxtb	r2, r3
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007938:	f883 2827 	strb.w	r2, [r3, #2087]	; 0x827
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007942:	f893 2826 	ldrb.w	r2, [r3, #2086]	; 0x826
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800794c:	f893 3827 	ldrb.w	r3, [r3, #2087]	; 0x827
 8007950:	4413      	add	r3, r2
 8007952:	b2db      	uxtb	r3, r3
 8007954:	43db      	mvns	r3, r3
 8007956:	b2da      	uxtb	r2, r3
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800795e:	f883 2828 	strb.w	r2, [r3, #2088]	; 0x828
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	b2da      	uxtb	r2, r3
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800796c:	f883 2829 	strb.w	r2, [r3, #2089]	; 0x829
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	b21b      	sxth	r3, r3
 8007974:	121b      	asrs	r3, r3, #8
 8007976:	b21b      	sxth	r3, r3
 8007978:	b2da      	uxtb	r2, r3
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007980:	f883 282a 	strb.w	r2, [r3, #2090]	; 0x82a

    /* calculate checksum */
    int chk = 0;
 8007984:	2300      	movs	r3, #0
 8007986:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8007988:	2305      	movs	r3, #5
 800798a:	61bb      	str	r3, [r7, #24]
 800798c:	e00d      	b.n	80079aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE+0xea>
      chk += message_out[i];
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	4413      	add	r3, r2
 8007994:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007998:	3304      	adds	r3, #4
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	461a      	mov	r2, r3
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	4413      	add	r3, r2
 80079a2:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	3301      	adds	r3, #1
 80079a8:	61bb      	str	r3, [r7, #24]
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	3306      	adds	r3, #6
 80079ae:	69ba      	ldr	r2, [r7, #24]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	ddec      	ble.n	800798e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE+0xce>
    l += 7;
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	3307      	adds	r3, #7
 80079b8:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	425a      	negs	r2, r3
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	b2d2      	uxtb	r2, r2
 80079c2:	bf58      	it	pl
 80079c4:	4253      	negpl	r3, r2
 80079c6:	b2da      	uxtb	r2, r3
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	1c59      	adds	r1, r3, #1
 80079cc:	6179      	str	r1, [r7, #20]
 80079ce:	43d2      	mvns	r2, r2
 80079d0:	b2d1      	uxtb	r1, r2
 80079d2:	68fa      	ldr	r2, [r7, #12]
 80079d4:	4413      	add	r3, r2
 80079d6:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 80079da:	3304      	adds	r3, #4
 80079dc:	460a      	mov	r2, r1
 80079de:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079e6:	dc0b      	bgt.n	8007a00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	1d18      	adds	r0, r3, #4
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 80079f2:	3304      	adds	r3, #4
 80079f4:	697a      	ldr	r2, [r7, #20]
 80079f6:	4619      	mov	r1, r3
 80079f8:	f7fd f800 	bl	80049fc <_ZN13STM32Hardware5writeEPhi>
      return l;
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	e005      	b.n	8007a0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8007a00:	4904      	ldr	r1, [pc, #16]	; (8007a14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x154>)
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f000 f848 	bl	8007a98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8logerrorEPKc>
      return -1;
 8007a08:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3720      	adds	r7, #32
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	08015294 	.word	0x08015294

08007a18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	3304      	adds	r3, #4
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7fd f82e 	bl	8004a88 <_ZN13STM32Hardware4timeEv>
 8007a2c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	4915      	ldr	r1, [pc, #84]	; (8007a8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE6setNowERKNS_4TimeE+0x74>)
 8007a36:	fba1 1303 	umull	r1, r3, r1, r3
 8007a3a:	099b      	lsrs	r3, r3, #6
 8007a3c:	1ad3      	subs	r3, r2, r3
 8007a3e:	1e5a      	subs	r2, r3, #1
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	6859      	ldr	r1, [r3, #4]
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	4b0f      	ldr	r3, [pc, #60]	; (8007a8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE6setNowERKNS_4TimeE+0x74>)
 8007a4e:	fba3 0302 	umull	r0, r3, r3, r2
 8007a52:	099b      	lsrs	r3, r3, #6
 8007a54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007a58:	fb00 f303 	mul.w	r3, r0, r3
 8007a5c:	1ad3      	subs	r3, r2, r3
 8007a5e:	4a0c      	ldr	r2, [pc, #48]	; (8007a90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE6setNowERKNS_4TimeE+0x78>)
 8007a60:	fb02 f303 	mul.w	r3, r2, r3
 8007a64:	1aca      	subs	r2, r1, r3
 8007a66:	4b0b      	ldr	r3, [pc, #44]	; (8007a94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE6setNowERKNS_4TimeE+0x7c>)
 8007a68:	4413      	add	r3, r2
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	f8c2 381c 	str.w	r3, [r2, #2076]	; 0x81c
    normalizeSecNSec(sec_offset, nsec_offset);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f603 0218 	addw	r2, r3, #2072	; 0x818
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	4610      	mov	r0, r2
 8007a80:	f000 fde2 	bl	8008648 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8007a84:	bf00      	nop
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	10624dd3 	.word	0x10624dd3
 8007a90:	000f4240 	.word	0x000f4240
 8007a94:	3b9aca00 	.word	0x3b9aca00

08007a98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8007aa2:	683a      	ldr	r2, [r7, #0]
 8007aa4:	2103      	movs	r1, #3
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 f804 	bl	8007ab4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE3logEcPKc>
  }
 8007aac:	bf00      	nop
 8007aae:	3708      	adds	r7, #8
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE3logEcPKc>:
  void log(char byte, const char * msg)
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b088      	sub	sp, #32
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	460b      	mov	r3, r1
 8007abe:	607a      	str	r2, [r7, #4]
 8007ac0:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8007ac2:	f107 0314 	add.w	r3, r7, #20
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7fc fb0e 	bl	80040e8 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8007acc:	7afb      	ldrb	r3, [r7, #11]
 8007ace:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f107 0214 	add.w	r2, r7, #20
 8007ade:	2107      	movs	r1, #7
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	4798      	blx	r3
  }
 8007ae4:	bf00      	nop
 8007ae6:	3720      	adds	r7, #32
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <_Z41__static_initialization_and_destruction_0ii>:
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d137      	bne.n	8007b6c <_Z41__static_initialization_and_destruction_0ii+0x80>
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d132      	bne.n	8007b6c <_Z41__static_initialization_and_destruction_0ii+0x80>
ros::NodeHandle nh;
 8007b06:	481b      	ldr	r0, [pc, #108]	; (8007b74 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8007b08:	f7ff f8d6 	bl	8006cb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EEC1Ev>
geometry_msgs::Vector3 kinMsg;
 8007b0c:	481a      	ldr	r0, [pc, #104]	; (8007b78 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8007b0e:	f7fd fe85 	bl	800581c <_ZN13geometry_msgs7Vector3C1Ev>
geometry_msgs::Vector3 KinTarget_msg;
 8007b12:	481a      	ldr	r0, [pc, #104]	; (8007b7c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8007b14:	f7fd fe82 	bl	800581c <_ZN13geometry_msgs7Vector3C1Ev>
geometry_msgs::Vector3 aksenMsg;
 8007b18:	4819      	ldr	r0, [pc, #100]	; (8007b80 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8007b1a:	f7fd fe7f 	bl	800581c <_ZN13geometry_msgs7Vector3C1Ev>
geometry_msgs::Quaternion sensMsg;
 8007b1e:	4819      	ldr	r0, [pc, #100]	; (8007b84 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8007b20:	f7fc ffbe 	bl	8004aa0 <_ZN13geometry_msgs10QuaternionC1Ev>
std_msgs::Bool stateInv_msg;
 8007b24:	4818      	ldr	r0, [pc, #96]	; (8007b88 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8007b26:	f7fe ffe9 	bl	8006afc <_ZN8std_msgs4BoolC1Ev>
std_msgs::Float32 error_arr_msg;
 8007b2a:	4818      	ldr	r0, [pc, #96]	; (8007b8c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8007b2c:	f7fe fb8c 	bl	8006248 <_ZN8std_msgs7Float32C1Ev>
std_msgs::Float32MultiArray imuData;
 8007b30:	4817      	ldr	r0, [pc, #92]	; (8007b90 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8007b32:	f7fe fea9 	bl	8006888 <_ZN8std_msgs17Float32MultiArrayC1Ev>
std_msgs::Float32MultiArray odomData;
 8007b36:	4817      	ldr	r0, [pc, #92]	; (8007b94 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8007b38:	f7fe fea6 	bl	8006888 <_ZN8std_msgs17Float32MultiArrayC1Ev>
ros::Subscriber<geometry_msgs::Vector3> kinematic("robot/target_kinematic", &kinCallback);
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	4a16      	ldr	r2, [pc, #88]	; (8007b98 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8007b40:	4916      	ldr	r1, [pc, #88]	; (8007b9c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8007b42:	4817      	ldr	r0, [pc, #92]	; (8007ba0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8007b44:	f7ff fa10 	bl	8006f68 <_ZN3ros10SubscriberIN13geometry_msgs7Vector3EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<geometry_msgs::Vector3> invKinematic("robot/inv_target_kinematic", &invkinCallback);
 8007b48:	2301      	movs	r3, #1
 8007b4a:	4a16      	ldr	r2, [pc, #88]	; (8007ba4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8007b4c:	4916      	ldr	r1, [pc, #88]	; (8007ba8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8007b4e:	4817      	ldr	r0, [pc, #92]	; (8007bac <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8007b50:	f7ff fa0a 	bl	8006f68 <_ZN3ros10SubscriberIN13geometry_msgs7Vector3EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Bool> stateInv_Sub("robot/stateInv", &stateInverseKin);
 8007b54:	2301      	movs	r3, #1
 8007b56:	4a16      	ldr	r2, [pc, #88]	; (8007bb0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8007b58:	4916      	ldr	r1, [pc, #88]	; (8007bb4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8007b5a:	4817      	ldr	r0, [pc, #92]	; (8007bb8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8007b5c:	f7ff fa28 	bl	8006fb0 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>
ros::Publisher errorArr("robot/Error_Aksen", &error_arr_msg);
 8007b60:	2300      	movs	r3, #0
 8007b62:	4a0a      	ldr	r2, [pc, #40]	; (8007b8c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8007b64:	4915      	ldr	r1, [pc, #84]	; (8007bbc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8007b66:	4816      	ldr	r0, [pc, #88]	; (8007bc0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8007b68:	f7fc fe3a 	bl	80047e0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8007b6c:	bf00      	nop
 8007b6e:	3708      	adds	r7, #8
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	20000acc 	.word	0x20000acc
 8007b78:	20003408 	.word	0x20003408
 8007b7c:	20003428 	.word	0x20003428
 8007b80:	20003448 	.word	0x20003448
 8007b84:	20003468 	.word	0x20003468
 8007b88:	20003490 	.word	0x20003490
 8007b8c:	20003498 	.word	0x20003498
 8007b90:	200034a0 	.word	0x200034a0
 8007b94:	200034d0 	.word	0x200034d0
 8007b98:	08006bd1 	.word	0x08006bd1
 8007b9c:	080152d0 	.word	0x080152d0
 8007ba0:	20003500 	.word	0x20003500
 8007ba4:	08006c29 	.word	0x08006c29
 8007ba8:	080152e8 	.word	0x080152e8
 8007bac:	20003538 	.word	0x20003538
 8007bb0:	08006c79 	.word	0x08006c79
 8007bb4:	08015304 	.word	0x08015304
 8007bb8:	20003570 	.word	0x20003570
 8007bbc:	08015314 	.word	0x08015314
 8007bc0:	2000358c 	.word	0x2000358c

08007bc4 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	330c      	adds	r3, #12
 8007bd2:	6839      	ldr	r1, [r7, #0]
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f7fe ffc0 	bl	8006b5a <_ZN8std_msgs4Bool11deserializeEPh>
    this->cb_(msg);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	320c      	adds	r2, #12
 8007be2:	4610      	mov	r0, r2
 8007be4:	4798      	blx	r3
  }
 8007be6:	bf00      	nop
 8007be8:	3708      	adds	r7, #8
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}

08007bee <_ZN3ros10SubscriberIN8std_msgs4BoolEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8007bee:	b480      	push	{r7}
 8007bf0:	b083      	sub	sp, #12
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	699b      	ldr	r3, [r3, #24]
  }
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	370c      	adds	r7, #12
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr

08007c06 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b082      	sub	sp, #8
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	330c      	adds	r3, #12
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7fe ffc0 	bl	8006b98 <_ZN8std_msgs4Bool7getTypeEv>
 8007c18:	4603      	mov	r3, r0
  }
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3708      	adds	r7, #8
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b082      	sub	sp, #8
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	330c      	adds	r3, #12
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7fe ffc0 	bl	8006bb4 <_ZN8std_msgs4Bool6getMD5Ev>
 8007c34:	4603      	mov	r3, r0
  }
 8007c36:	4618      	mov	r0, r3
 8007c38:	3708      	adds	r7, #8
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <_ZN3ros10SubscriberIN13geometry_msgs7Vector3EvE8callbackEPh>:
  virtual void callback(unsigned char* data) override
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b082      	sub	sp, #8
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
 8007c46:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	3310      	adds	r3, #16
 8007c4c:	6839      	ldr	r1, [r7, #0]
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f7fd ff7f 	bl	8005b52 <_ZN13geometry_msgs7Vector311deserializeEPh>
    this->cb_(msg);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	3210      	adds	r2, #16
 8007c5c:	4610      	mov	r0, r2
 8007c5e:	4798      	blx	r3
  }
 8007c60:	bf00      	nop
 8007c62:	3708      	adds	r7, #8
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <_ZN3ros10SubscriberIN13geometry_msgs7Vector3EvE15getEndpointTypeEv>:
  virtual int getEndpointType() override
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  }
 8007c74:	4618      	mov	r0, r3
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <_ZN3ros10SubscriberIN13geometry_msgs7Vector3EvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	3310      	adds	r3, #16
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f7fe fabf 	bl	8006210 <_ZN13geometry_msgs7Vector37getTypeEv>
 8007c92:	4603      	mov	r3, r0
  }
 8007c94:	4618      	mov	r0, r3
 8007c96:	3708      	adds	r7, #8
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <_ZN3ros10SubscriberIN13geometry_msgs7Vector3EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	3310      	adds	r3, #16
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f7fe fabf 	bl	800622c <_ZN13geometry_msgs7Vector36getMD5Ev>
 8007cae:	4603      	mov	r3, r0
  }
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3708      	adds	r7, #8
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9connectedEv>:
  virtual bool connected() override
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
    return configured_;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007cc6:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8007cca:	4618      	mov	r0, r3
 8007ccc:	370c      	adds	r7, #12
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr

08007cd6 <_GLOBAL__sub_I_xtarget>:
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007cde:	2001      	movs	r0, #1
 8007ce0:	f7ff ff04 	bl	8007aec <_Z41__static_initialization_and_destruction_0ii>
 8007ce4:	bd80      	pop	{r7, pc}
	...

08007ce8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007cee:	2300      	movs	r3, #0
 8007cf0:	607b      	str	r3, [r7, #4]
 8007cf2:	4b12      	ldr	r3, [pc, #72]	; (8007d3c <HAL_MspInit+0x54>)
 8007cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cf6:	4a11      	ldr	r2, [pc, #68]	; (8007d3c <HAL_MspInit+0x54>)
 8007cf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8007cfe:	4b0f      	ldr	r3, [pc, #60]	; (8007d3c <HAL_MspInit+0x54>)
 8007d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d06:	607b      	str	r3, [r7, #4]
 8007d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	603b      	str	r3, [r7, #0]
 8007d0e:	4b0b      	ldr	r3, [pc, #44]	; (8007d3c <HAL_MspInit+0x54>)
 8007d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d12:	4a0a      	ldr	r2, [pc, #40]	; (8007d3c <HAL_MspInit+0x54>)
 8007d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d18:	6413      	str	r3, [r2, #64]	; 0x40
 8007d1a:	4b08      	ldr	r3, [pc, #32]	; (8007d3c <HAL_MspInit+0x54>)
 8007d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d22:	603b      	str	r3, [r7, #0]
 8007d24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007d26:	2200      	movs	r2, #0
 8007d28:	210f      	movs	r1, #15
 8007d2a:	f06f 0001 	mvn.w	r0, #1
 8007d2e:	f000 fdff 	bl	8008930 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007d32:	bf00      	nop
 8007d34:	3708      	adds	r7, #8
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	40023800 	.word	0x40023800

08007d40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b08c      	sub	sp, #48	; 0x30
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d48:	f107 031c 	add.w	r3, r7, #28
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	601a      	str	r2, [r3, #0]
 8007d50:	605a      	str	r2, [r3, #4]
 8007d52:	609a      	str	r2, [r3, #8]
 8007d54:	60da      	str	r2, [r3, #12]
 8007d56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a71      	ldr	r2, [pc, #452]	; (8007f24 <HAL_I2C_MspInit+0x1e4>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	f040 808c 	bne.w	8007e7c <HAL_I2C_MspInit+0x13c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d64:	2300      	movs	r3, #0
 8007d66:	61bb      	str	r3, [r7, #24]
 8007d68:	4b6f      	ldr	r3, [pc, #444]	; (8007f28 <HAL_I2C_MspInit+0x1e8>)
 8007d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d6c:	4a6e      	ldr	r2, [pc, #440]	; (8007f28 <HAL_I2C_MspInit+0x1e8>)
 8007d6e:	f043 0302 	orr.w	r3, r3, #2
 8007d72:	6313      	str	r3, [r2, #48]	; 0x30
 8007d74:	4b6c      	ldr	r3, [pc, #432]	; (8007f28 <HAL_I2C_MspInit+0x1e8>)
 8007d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d78:	f003 0302 	and.w	r3, r3, #2
 8007d7c:	61bb      	str	r3, [r7, #24]
 8007d7e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8007d80:	f44f 7310 	mov.w	r3, #576	; 0x240
 8007d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007d86:	2312      	movs	r3, #18
 8007d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d8e:	2303      	movs	r3, #3
 8007d90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007d92:	2304      	movs	r3, #4
 8007d94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d96:	f107 031c 	add.w	r3, r7, #28
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	4863      	ldr	r0, [pc, #396]	; (8007f2c <HAL_I2C_MspInit+0x1ec>)
 8007d9e:	f001 f9f3 	bl	8009188 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007da2:	2300      	movs	r3, #0
 8007da4:	617b      	str	r3, [r7, #20]
 8007da6:	4b60      	ldr	r3, [pc, #384]	; (8007f28 <HAL_I2C_MspInit+0x1e8>)
 8007da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007daa:	4a5f      	ldr	r2, [pc, #380]	; (8007f28 <HAL_I2C_MspInit+0x1e8>)
 8007dac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007db0:	6413      	str	r3, [r2, #64]	; 0x40
 8007db2:	4b5d      	ldr	r3, [pc, #372]	; (8007f28 <HAL_I2C_MspInit+0x1e8>)
 8007db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007dba:	617b      	str	r3, [r7, #20]
 8007dbc:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8007dbe:	4b5c      	ldr	r3, [pc, #368]	; (8007f30 <HAL_I2C_MspInit+0x1f0>)
 8007dc0:	4a5c      	ldr	r2, [pc, #368]	; (8007f34 <HAL_I2C_MspInit+0x1f4>)
 8007dc2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8007dc4:	4b5a      	ldr	r3, [pc, #360]	; (8007f30 <HAL_I2C_MspInit+0x1f0>)
 8007dc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007dca:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007dcc:	4b58      	ldr	r3, [pc, #352]	; (8007f30 <HAL_I2C_MspInit+0x1f0>)
 8007dce:	2200      	movs	r2, #0
 8007dd0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007dd2:	4b57      	ldr	r3, [pc, #348]	; (8007f30 <HAL_I2C_MspInit+0x1f0>)
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007dd8:	4b55      	ldr	r3, [pc, #340]	; (8007f30 <HAL_I2C_MspInit+0x1f0>)
 8007dda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007dde:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007de0:	4b53      	ldr	r3, [pc, #332]	; (8007f30 <HAL_I2C_MspInit+0x1f0>)
 8007de2:	2200      	movs	r2, #0
 8007de4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007de6:	4b52      	ldr	r3, [pc, #328]	; (8007f30 <HAL_I2C_MspInit+0x1f0>)
 8007de8:	2200      	movs	r2, #0
 8007dea:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8007dec:	4b50      	ldr	r3, [pc, #320]	; (8007f30 <HAL_I2C_MspInit+0x1f0>)
 8007dee:	2200      	movs	r2, #0
 8007df0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8007df2:	4b4f      	ldr	r3, [pc, #316]	; (8007f30 <HAL_I2C_MspInit+0x1f0>)
 8007df4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007df8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007dfa:	4b4d      	ldr	r3, [pc, #308]	; (8007f30 <HAL_I2C_MspInit+0x1f0>)
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8007e00:	484b      	ldr	r0, [pc, #300]	; (8007f30 <HAL_I2C_MspInit+0x1f0>)
 8007e02:	f000 fdbf 	bl	8008984 <HAL_DMA_Init>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d001      	beq.n	8007e10 <HAL_I2C_MspInit+0xd0>
    {
      Error_Handler();
 8007e0c:	f7fb fe92 	bl	8003b34 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4a47      	ldr	r2, [pc, #284]	; (8007f30 <HAL_I2C_MspInit+0x1f0>)
 8007e14:	639a      	str	r2, [r3, #56]	; 0x38
 8007e16:	4a46      	ldr	r2, [pc, #280]	; (8007f30 <HAL_I2C_MspInit+0x1f0>)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8007e1c:	4b46      	ldr	r3, [pc, #280]	; (8007f38 <HAL_I2C_MspInit+0x1f8>)
 8007e1e:	4a47      	ldr	r2, [pc, #284]	; (8007f3c <HAL_I2C_MspInit+0x1fc>)
 8007e20:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8007e22:	4b45      	ldr	r3, [pc, #276]	; (8007f38 <HAL_I2C_MspInit+0x1f8>)
 8007e24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007e28:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007e2a:	4b43      	ldr	r3, [pc, #268]	; (8007f38 <HAL_I2C_MspInit+0x1f8>)
 8007e2c:	2240      	movs	r2, #64	; 0x40
 8007e2e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007e30:	4b41      	ldr	r3, [pc, #260]	; (8007f38 <HAL_I2C_MspInit+0x1f8>)
 8007e32:	2200      	movs	r2, #0
 8007e34:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007e36:	4b40      	ldr	r3, [pc, #256]	; (8007f38 <HAL_I2C_MspInit+0x1f8>)
 8007e38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007e3c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007e3e:	4b3e      	ldr	r3, [pc, #248]	; (8007f38 <HAL_I2C_MspInit+0x1f8>)
 8007e40:	2200      	movs	r2, #0
 8007e42:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007e44:	4b3c      	ldr	r3, [pc, #240]	; (8007f38 <HAL_I2C_MspInit+0x1f8>)
 8007e46:	2200      	movs	r2, #0
 8007e48:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8007e4a:	4b3b      	ldr	r3, [pc, #236]	; (8007f38 <HAL_I2C_MspInit+0x1f8>)
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8007e50:	4b39      	ldr	r3, [pc, #228]	; (8007f38 <HAL_I2C_MspInit+0x1f8>)
 8007e52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007e56:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007e58:	4b37      	ldr	r3, [pc, #220]	; (8007f38 <HAL_I2C_MspInit+0x1f8>)
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8007e5e:	4836      	ldr	r0, [pc, #216]	; (8007f38 <HAL_I2C_MspInit+0x1f8>)
 8007e60:	f000 fd90 	bl	8008984 <HAL_DMA_Init>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d001      	beq.n	8007e6e <HAL_I2C_MspInit+0x12e>
    {
      Error_Handler();
 8007e6a:	f7fb fe63 	bl	8003b34 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4a31      	ldr	r2, [pc, #196]	; (8007f38 <HAL_I2C_MspInit+0x1f8>)
 8007e72:	635a      	str	r2, [r3, #52]	; 0x34
 8007e74:	4a30      	ldr	r2, [pc, #192]	; (8007f38 <HAL_I2C_MspInit+0x1f8>)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8007e7a:	e04f      	b.n	8007f1c <HAL_I2C_MspInit+0x1dc>
  else if(hi2c->Instance==I2C2)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a2f      	ldr	r2, [pc, #188]	; (8007f40 <HAL_I2C_MspInit+0x200>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d14a      	bne.n	8007f1c <HAL_I2C_MspInit+0x1dc>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007e86:	2300      	movs	r3, #0
 8007e88:	613b      	str	r3, [r7, #16]
 8007e8a:	4b27      	ldr	r3, [pc, #156]	; (8007f28 <HAL_I2C_MspInit+0x1e8>)
 8007e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e8e:	4a26      	ldr	r2, [pc, #152]	; (8007f28 <HAL_I2C_MspInit+0x1e8>)
 8007e90:	f043 0320 	orr.w	r3, r3, #32
 8007e94:	6313      	str	r3, [r2, #48]	; 0x30
 8007e96:	4b24      	ldr	r3, [pc, #144]	; (8007f28 <HAL_I2C_MspInit+0x1e8>)
 8007e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e9a:	f003 0320 	and.w	r3, r3, #32
 8007e9e:	613b      	str	r3, [r7, #16]
 8007ea0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	60fb      	str	r3, [r7, #12]
 8007ea6:	4b20      	ldr	r3, [pc, #128]	; (8007f28 <HAL_I2C_MspInit+0x1e8>)
 8007ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eaa:	4a1f      	ldr	r2, [pc, #124]	; (8007f28 <HAL_I2C_MspInit+0x1e8>)
 8007eac:	f043 0302 	orr.w	r3, r3, #2
 8007eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8007eb2:	4b1d      	ldr	r3, [pc, #116]	; (8007f28 <HAL_I2C_MspInit+0x1e8>)
 8007eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eb6:	f003 0302 	and.w	r3, r3, #2
 8007eba:	60fb      	str	r3, [r7, #12]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007ec2:	2312      	movs	r3, #18
 8007ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007ece:	2304      	movs	r3, #4
 8007ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007ed2:	f107 031c 	add.w	r3, r7, #28
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	481a      	ldr	r0, [pc, #104]	; (8007f44 <HAL_I2C_MspInit+0x204>)
 8007eda:	f001 f955 	bl	8009188 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007ede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007ee4:	2312      	movs	r3, #18
 8007ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007eec:	2303      	movs	r3, #3
 8007eee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007ef0:	2304      	movs	r3, #4
 8007ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ef4:	f107 031c 	add.w	r3, r7, #28
 8007ef8:	4619      	mov	r1, r3
 8007efa:	480c      	ldr	r0, [pc, #48]	; (8007f2c <HAL_I2C_MspInit+0x1ec>)
 8007efc:	f001 f944 	bl	8009188 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007f00:	2300      	movs	r3, #0
 8007f02:	60bb      	str	r3, [r7, #8]
 8007f04:	4b08      	ldr	r3, [pc, #32]	; (8007f28 <HAL_I2C_MspInit+0x1e8>)
 8007f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f08:	4a07      	ldr	r2, [pc, #28]	; (8007f28 <HAL_I2C_MspInit+0x1e8>)
 8007f0a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007f0e:	6413      	str	r3, [r2, #64]	; 0x40
 8007f10:	4b05      	ldr	r3, [pc, #20]	; (8007f28 <HAL_I2C_MspInit+0x1e8>)
 8007f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f18:	60bb      	str	r3, [r7, #8]
 8007f1a:	68bb      	ldr	r3, [r7, #8]
}
 8007f1c:	bf00      	nop
 8007f1e:	3730      	adds	r7, #48	; 0x30
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}
 8007f24:	40005400 	.word	0x40005400
 8007f28:	40023800 	.word	0x40023800
 8007f2c:	40020400 	.word	0x40020400
 8007f30:	20000304 	.word	0x20000304
 8007f34:	40026010 	.word	0x40026010
 8007f38:	20000364 	.word	0x20000364
 8007f3c:	400260a0 	.word	0x400260a0
 8007f40:	40005800 	.word	0x40005800
 8007f44:	40021400 	.word	0x40021400

08007f48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b086      	sub	sp, #24
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a22      	ldr	r2, [pc, #136]	; (8007fe0 <HAL_TIM_Base_MspInit+0x98>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d10e      	bne.n	8007f78 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	617b      	str	r3, [r7, #20]
 8007f5e:	4b21      	ldr	r3, [pc, #132]	; (8007fe4 <HAL_TIM_Base_MspInit+0x9c>)
 8007f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f62:	4a20      	ldr	r2, [pc, #128]	; (8007fe4 <HAL_TIM_Base_MspInit+0x9c>)
 8007f64:	f043 0301 	orr.w	r3, r3, #1
 8007f68:	6453      	str	r3, [r2, #68]	; 0x44
 8007f6a:	4b1e      	ldr	r3, [pc, #120]	; (8007fe4 <HAL_TIM_Base_MspInit+0x9c>)
 8007f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f6e:	f003 0301 	and.w	r3, r3, #1
 8007f72:	617b      	str	r3, [r7, #20]
 8007f74:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8007f76:	e02e      	b.n	8007fd6 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a1a      	ldr	r2, [pc, #104]	; (8007fe8 <HAL_TIM_Base_MspInit+0xa0>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d10e      	bne.n	8007fa0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007f82:	2300      	movs	r3, #0
 8007f84:	613b      	str	r3, [r7, #16]
 8007f86:	4b17      	ldr	r3, [pc, #92]	; (8007fe4 <HAL_TIM_Base_MspInit+0x9c>)
 8007f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8a:	4a16      	ldr	r2, [pc, #88]	; (8007fe4 <HAL_TIM_Base_MspInit+0x9c>)
 8007f8c:	f043 0302 	orr.w	r3, r3, #2
 8007f90:	6413      	str	r3, [r2, #64]	; 0x40
 8007f92:	4b14      	ldr	r3, [pc, #80]	; (8007fe4 <HAL_TIM_Base_MspInit+0x9c>)
 8007f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f96:	f003 0302 	and.w	r3, r3, #2
 8007f9a:	613b      	str	r3, [r7, #16]
 8007f9c:	693b      	ldr	r3, [r7, #16]
}
 8007f9e:	e01a      	b.n	8007fd6 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM13)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a11      	ldr	r2, [pc, #68]	; (8007fec <HAL_TIM_Base_MspInit+0xa4>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d115      	bne.n	8007fd6 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8007faa:	2300      	movs	r3, #0
 8007fac:	60fb      	str	r3, [r7, #12]
 8007fae:	4b0d      	ldr	r3, [pc, #52]	; (8007fe4 <HAL_TIM_Base_MspInit+0x9c>)
 8007fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb2:	4a0c      	ldr	r2, [pc, #48]	; (8007fe4 <HAL_TIM_Base_MspInit+0x9c>)
 8007fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8007fba:	4b0a      	ldr	r3, [pc, #40]	; (8007fe4 <HAL_TIM_Base_MspInit+0x9c>)
 8007fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fc2:	60fb      	str	r3, [r7, #12]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	2105      	movs	r1, #5
 8007fca:	202c      	movs	r0, #44	; 0x2c
 8007fcc:	f000 fcb0 	bl	8008930 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007fd0:	202c      	movs	r0, #44	; 0x2c
 8007fd2:	f000 fcc9 	bl	8008968 <HAL_NVIC_EnableIRQ>
}
 8007fd6:	bf00      	nop
 8007fd8:	3718      	adds	r7, #24
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	40010000 	.word	0x40010000
 8007fe4:	40023800 	.word	0x40023800
 8007fe8:	40000400 	.word	0x40000400
 8007fec:	40001c00 	.word	0x40001c00

08007ff0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b08c      	sub	sp, #48	; 0x30
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ff8:	f107 031c 	add.w	r3, r7, #28
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	601a      	str	r2, [r3, #0]
 8008000:	605a      	str	r2, [r3, #4]
 8008002:	609a      	str	r2, [r3, #8]
 8008004:	60da      	str	r2, [r3, #12]
 8008006:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a43      	ldr	r2, [pc, #268]	; (800811c <HAL_TIM_MspPostInit+0x12c>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d11f      	bne.n	8008052 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008012:	2300      	movs	r3, #0
 8008014:	61bb      	str	r3, [r7, #24]
 8008016:	4b42      	ldr	r3, [pc, #264]	; (8008120 <HAL_TIM_MspPostInit+0x130>)
 8008018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800801a:	4a41      	ldr	r2, [pc, #260]	; (8008120 <HAL_TIM_MspPostInit+0x130>)
 800801c:	f043 0310 	orr.w	r3, r3, #16
 8008020:	6313      	str	r3, [r2, #48]	; 0x30
 8008022:	4b3f      	ldr	r3, [pc, #252]	; (8008120 <HAL_TIM_MspPostInit+0x130>)
 8008024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008026:	f003 0310 	and.w	r3, r3, #16
 800802a:	61bb      	str	r3, [r7, #24]
 800802c:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800802e:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8008032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008034:	2302      	movs	r3, #2
 8008036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008038:	2300      	movs	r3, #0
 800803a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800803c:	2300      	movs	r3, #0
 800803e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8008040:	2301      	movs	r3, #1
 8008042:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008044:	f107 031c 	add.w	r3, r7, #28
 8008048:	4619      	mov	r1, r3
 800804a:	4836      	ldr	r0, [pc, #216]	; (8008124 <HAL_TIM_MspPostInit+0x134>)
 800804c:	f001 f89c 	bl	8009188 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8008050:	e05f      	b.n	8008112 <HAL_TIM_MspPostInit+0x122>
  else if(htim->Instance==TIM3)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a34      	ldr	r2, [pc, #208]	; (8008128 <HAL_TIM_MspPostInit+0x138>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d15a      	bne.n	8008112 <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800805c:	2300      	movs	r3, #0
 800805e:	617b      	str	r3, [r7, #20]
 8008060:	4b2f      	ldr	r3, [pc, #188]	; (8008120 <HAL_TIM_MspPostInit+0x130>)
 8008062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008064:	4a2e      	ldr	r2, [pc, #184]	; (8008120 <HAL_TIM_MspPostInit+0x130>)
 8008066:	f043 0301 	orr.w	r3, r3, #1
 800806a:	6313      	str	r3, [r2, #48]	; 0x30
 800806c:	4b2c      	ldr	r3, [pc, #176]	; (8008120 <HAL_TIM_MspPostInit+0x130>)
 800806e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008070:	f003 0301 	and.w	r3, r3, #1
 8008074:	617b      	str	r3, [r7, #20]
 8008076:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008078:	2300      	movs	r3, #0
 800807a:	613b      	str	r3, [r7, #16]
 800807c:	4b28      	ldr	r3, [pc, #160]	; (8008120 <HAL_TIM_MspPostInit+0x130>)
 800807e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008080:	4a27      	ldr	r2, [pc, #156]	; (8008120 <HAL_TIM_MspPostInit+0x130>)
 8008082:	f043 0302 	orr.w	r3, r3, #2
 8008086:	6313      	str	r3, [r2, #48]	; 0x30
 8008088:	4b25      	ldr	r3, [pc, #148]	; (8008120 <HAL_TIM_MspPostInit+0x130>)
 800808a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800808c:	f003 0302 	and.w	r3, r3, #2
 8008090:	613b      	str	r3, [r7, #16]
 8008092:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008094:	2300      	movs	r3, #0
 8008096:	60fb      	str	r3, [r7, #12]
 8008098:	4b21      	ldr	r3, [pc, #132]	; (8008120 <HAL_TIM_MspPostInit+0x130>)
 800809a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800809c:	4a20      	ldr	r2, [pc, #128]	; (8008120 <HAL_TIM_MspPostInit+0x130>)
 800809e:	f043 0304 	orr.w	r3, r3, #4
 80080a2:	6313      	str	r3, [r2, #48]	; 0x30
 80080a4:	4b1e      	ldr	r3, [pc, #120]	; (8008120 <HAL_TIM_MspPostInit+0x130>)
 80080a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080a8:	f003 0304 	and.w	r3, r3, #4
 80080ac:	60fb      	str	r3, [r7, #12]
 80080ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80080b0:	23c0      	movs	r3, #192	; 0xc0
 80080b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080b4:	2302      	movs	r3, #2
 80080b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080b8:	2300      	movs	r3, #0
 80080ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080bc:	2300      	movs	r3, #0
 80080be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80080c0:	2302      	movs	r3, #2
 80080c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080c4:	f107 031c 	add.w	r3, r7, #28
 80080c8:	4619      	mov	r1, r3
 80080ca:	4818      	ldr	r0, [pc, #96]	; (800812c <HAL_TIM_MspPostInit+0x13c>)
 80080cc:	f001 f85c 	bl	8009188 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80080d0:	2302      	movs	r3, #2
 80080d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080d4:	2302      	movs	r3, #2
 80080d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080d8:	2300      	movs	r3, #0
 80080da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080dc:	2300      	movs	r3, #0
 80080de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80080e0:	2302      	movs	r3, #2
 80080e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80080e4:	f107 031c 	add.w	r3, r7, #28
 80080e8:	4619      	mov	r1, r3
 80080ea:	4811      	ldr	r0, [pc, #68]	; (8008130 <HAL_TIM_MspPostInit+0x140>)
 80080ec:	f001 f84c 	bl	8009188 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80080f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080f6:	2302      	movs	r3, #2
 80080f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080fa:	2300      	movs	r3, #0
 80080fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080fe:	2300      	movs	r3, #0
 8008100:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008102:	2302      	movs	r3, #2
 8008104:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008106:	f107 031c 	add.w	r3, r7, #28
 800810a:	4619      	mov	r1, r3
 800810c:	4809      	ldr	r0, [pc, #36]	; (8008134 <HAL_TIM_MspPostInit+0x144>)
 800810e:	f001 f83b 	bl	8009188 <HAL_GPIO_Init>
}
 8008112:	bf00      	nop
 8008114:	3730      	adds	r7, #48	; 0x30
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	40010000 	.word	0x40010000
 8008120:	40023800 	.word	0x40023800
 8008124:	40021000 	.word	0x40021000
 8008128:	40000400 	.word	0x40000400
 800812c:	40020000 	.word	0x40020000
 8008130:	40020400 	.word	0x40020400
 8008134:	40020800 	.word	0x40020800

08008138 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b08a      	sub	sp, #40	; 0x28
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008140:	f107 0314 	add.w	r3, r7, #20
 8008144:	2200      	movs	r2, #0
 8008146:	601a      	str	r2, [r3, #0]
 8008148:	605a      	str	r2, [r3, #4]
 800814a:	609a      	str	r2, [r3, #8]
 800814c:	60da      	str	r2, [r3, #12]
 800814e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a4d      	ldr	r2, [pc, #308]	; (800828c <HAL_UART_MspInit+0x154>)
 8008156:	4293      	cmp	r3, r2
 8008158:	f040 8093 	bne.w	8008282 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800815c:	2300      	movs	r3, #0
 800815e:	613b      	str	r3, [r7, #16]
 8008160:	4b4b      	ldr	r3, [pc, #300]	; (8008290 <HAL_UART_MspInit+0x158>)
 8008162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008164:	4a4a      	ldr	r2, [pc, #296]	; (8008290 <HAL_UART_MspInit+0x158>)
 8008166:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800816a:	6413      	str	r3, [r2, #64]	; 0x40
 800816c:	4b48      	ldr	r3, [pc, #288]	; (8008290 <HAL_UART_MspInit+0x158>)
 800816e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008170:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008174:	613b      	str	r3, [r7, #16]
 8008176:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008178:	2300      	movs	r3, #0
 800817a:	60fb      	str	r3, [r7, #12]
 800817c:	4b44      	ldr	r3, [pc, #272]	; (8008290 <HAL_UART_MspInit+0x158>)
 800817e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008180:	4a43      	ldr	r2, [pc, #268]	; (8008290 <HAL_UART_MspInit+0x158>)
 8008182:	f043 0308 	orr.w	r3, r3, #8
 8008186:	6313      	str	r3, [r2, #48]	; 0x30
 8008188:	4b41      	ldr	r3, [pc, #260]	; (8008290 <HAL_UART_MspInit+0x158>)
 800818a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800818c:	f003 0308 	and.w	r3, r3, #8
 8008190:	60fb      	str	r3, [r7, #12]
 8008192:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8008194:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800819a:	2302      	movs	r3, #2
 800819c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800819e:	2300      	movs	r3, #0
 80081a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80081a2:	2303      	movs	r3, #3
 80081a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80081a6:	2307      	movs	r3, #7
 80081a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80081aa:	f107 0314 	add.w	r3, r7, #20
 80081ae:	4619      	mov	r1, r3
 80081b0:	4838      	ldr	r0, [pc, #224]	; (8008294 <HAL_UART_MspInit+0x15c>)
 80081b2:	f000 ffe9 	bl	8009188 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80081b6:	4b38      	ldr	r3, [pc, #224]	; (8008298 <HAL_UART_MspInit+0x160>)
 80081b8:	4a38      	ldr	r2, [pc, #224]	; (800829c <HAL_UART_MspInit+0x164>)
 80081ba:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80081bc:	4b36      	ldr	r3, [pc, #216]	; (8008298 <HAL_UART_MspInit+0x160>)
 80081be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80081c2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80081c4:	4b34      	ldr	r3, [pc, #208]	; (8008298 <HAL_UART_MspInit+0x160>)
 80081c6:	2200      	movs	r2, #0
 80081c8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80081ca:	4b33      	ldr	r3, [pc, #204]	; (8008298 <HAL_UART_MspInit+0x160>)
 80081cc:	2200      	movs	r2, #0
 80081ce:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80081d0:	4b31      	ldr	r3, [pc, #196]	; (8008298 <HAL_UART_MspInit+0x160>)
 80081d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80081d6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80081d8:	4b2f      	ldr	r3, [pc, #188]	; (8008298 <HAL_UART_MspInit+0x160>)
 80081da:	2200      	movs	r2, #0
 80081dc:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80081de:	4b2e      	ldr	r3, [pc, #184]	; (8008298 <HAL_UART_MspInit+0x160>)
 80081e0:	2200      	movs	r2, #0
 80081e2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80081e4:	4b2c      	ldr	r3, [pc, #176]	; (8008298 <HAL_UART_MspInit+0x160>)
 80081e6:	2200      	movs	r2, #0
 80081e8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80081ea:	4b2b      	ldr	r3, [pc, #172]	; (8008298 <HAL_UART_MspInit+0x160>)
 80081ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80081f0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80081f2:	4b29      	ldr	r3, [pc, #164]	; (8008298 <HAL_UART_MspInit+0x160>)
 80081f4:	2200      	movs	r2, #0
 80081f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80081f8:	4827      	ldr	r0, [pc, #156]	; (8008298 <HAL_UART_MspInit+0x160>)
 80081fa:	f000 fbc3 	bl	8008984 <HAL_DMA_Init>
 80081fe:	4603      	mov	r3, r0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d001      	beq.n	8008208 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8008204:	f7fb fc96 	bl	8003b34 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a23      	ldr	r2, [pc, #140]	; (8008298 <HAL_UART_MspInit+0x160>)
 800820c:	63da      	str	r2, [r3, #60]	; 0x3c
 800820e:	4a22      	ldr	r2, [pc, #136]	; (8008298 <HAL_UART_MspInit+0x160>)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8008214:	4b22      	ldr	r3, [pc, #136]	; (80082a0 <HAL_UART_MspInit+0x168>)
 8008216:	4a23      	ldr	r2, [pc, #140]	; (80082a4 <HAL_UART_MspInit+0x16c>)
 8008218:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800821a:	4b21      	ldr	r3, [pc, #132]	; (80082a0 <HAL_UART_MspInit+0x168>)
 800821c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008220:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008222:	4b1f      	ldr	r3, [pc, #124]	; (80082a0 <HAL_UART_MspInit+0x168>)
 8008224:	2240      	movs	r2, #64	; 0x40
 8008226:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008228:	4b1d      	ldr	r3, [pc, #116]	; (80082a0 <HAL_UART_MspInit+0x168>)
 800822a:	2200      	movs	r2, #0
 800822c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800822e:	4b1c      	ldr	r3, [pc, #112]	; (80082a0 <HAL_UART_MspInit+0x168>)
 8008230:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008234:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008236:	4b1a      	ldr	r3, [pc, #104]	; (80082a0 <HAL_UART_MspInit+0x168>)
 8008238:	2200      	movs	r2, #0
 800823a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800823c:	4b18      	ldr	r3, [pc, #96]	; (80082a0 <HAL_UART_MspInit+0x168>)
 800823e:	2200      	movs	r2, #0
 8008240:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8008242:	4b17      	ldr	r3, [pc, #92]	; (80082a0 <HAL_UART_MspInit+0x168>)
 8008244:	2200      	movs	r2, #0
 8008246:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8008248:	4b15      	ldr	r3, [pc, #84]	; (80082a0 <HAL_UART_MspInit+0x168>)
 800824a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800824e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008250:	4b13      	ldr	r3, [pc, #76]	; (80082a0 <HAL_UART_MspInit+0x168>)
 8008252:	2200      	movs	r2, #0
 8008254:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8008256:	4812      	ldr	r0, [pc, #72]	; (80082a0 <HAL_UART_MspInit+0x168>)
 8008258:	f000 fb94 	bl	8008984 <HAL_DMA_Init>
 800825c:	4603      	mov	r3, r0
 800825e:	2b00      	cmp	r3, #0
 8008260:	d001      	beq.n	8008266 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8008262:	f7fb fc67 	bl	8003b34 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	4a0d      	ldr	r2, [pc, #52]	; (80082a0 <HAL_UART_MspInit+0x168>)
 800826a:	639a      	str	r2, [r3, #56]	; 0x38
 800826c:	4a0c      	ldr	r2, [pc, #48]	; (80082a0 <HAL_UART_MspInit+0x168>)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8008272:	2200      	movs	r2, #0
 8008274:	2105      	movs	r1, #5
 8008276:	2027      	movs	r0, #39	; 0x27
 8008278:	f000 fb5a 	bl	8008930 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800827c:	2027      	movs	r0, #39	; 0x27
 800827e:	f000 fb73 	bl	8008968 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8008282:	bf00      	nop
 8008284:	3728      	adds	r7, #40	; 0x28
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	40004800 	.word	0x40004800
 8008290:	40023800 	.word	0x40023800
 8008294:	40020c00 	.word	0x40020c00
 8008298:	200004e4 	.word	0x200004e4
 800829c:	40026028 	.word	0x40026028
 80082a0:	20000544 	.word	0x20000544
 80082a4:	40026058 	.word	0x40026058

080082a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b08e      	sub	sp, #56	; 0x38
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80082b0:	2300      	movs	r3, #0
 80082b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80082b4:	2300      	movs	r3, #0
 80082b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80082b8:	2300      	movs	r3, #0
 80082ba:	60fb      	str	r3, [r7, #12]
 80082bc:	4b33      	ldr	r3, [pc, #204]	; (800838c <HAL_InitTick+0xe4>)
 80082be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c0:	4a32      	ldr	r2, [pc, #200]	; (800838c <HAL_InitTick+0xe4>)
 80082c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082c6:	6413      	str	r3, [r2, #64]	; 0x40
 80082c8:	4b30      	ldr	r3, [pc, #192]	; (800838c <HAL_InitTick+0xe4>)
 80082ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082d0:	60fb      	str	r3, [r7, #12]
 80082d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80082d4:	f107 0210 	add.w	r2, r7, #16
 80082d8:	f107 0314 	add.w	r3, r7, #20
 80082dc:	4611      	mov	r1, r2
 80082de:	4618      	mov	r0, r3
 80082e0:	f002 fe30 	bl	800af44 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80082e4:	6a3b      	ldr	r3, [r7, #32]
 80082e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80082e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d103      	bne.n	80082f6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80082ee:	f002 fe01 	bl	800aef4 <HAL_RCC_GetPCLK1Freq>
 80082f2:	6378      	str	r0, [r7, #52]	; 0x34
 80082f4:	e004      	b.n	8008300 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80082f6:	f002 fdfd 	bl	800aef4 <HAL_RCC_GetPCLK1Freq>
 80082fa:	4603      	mov	r3, r0
 80082fc:	005b      	lsls	r3, r3, #1
 80082fe:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008302:	4a23      	ldr	r2, [pc, #140]	; (8008390 <HAL_InitTick+0xe8>)
 8008304:	fba2 2303 	umull	r2, r3, r2, r3
 8008308:	0c9b      	lsrs	r3, r3, #18
 800830a:	3b01      	subs	r3, #1
 800830c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800830e:	4b21      	ldr	r3, [pc, #132]	; (8008394 <HAL_InitTick+0xec>)
 8008310:	4a21      	ldr	r2, [pc, #132]	; (8008398 <HAL_InitTick+0xf0>)
 8008312:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8008314:	4b1f      	ldr	r3, [pc, #124]	; (8008394 <HAL_InitTick+0xec>)
 8008316:	f240 32e7 	movw	r2, #999	; 0x3e7
 800831a:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 800831c:	4a1d      	ldr	r2, [pc, #116]	; (8008394 <HAL_InitTick+0xec>)
 800831e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008320:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8008322:	4b1c      	ldr	r3, [pc, #112]	; (8008394 <HAL_InitTick+0xec>)
 8008324:	2200      	movs	r2, #0
 8008326:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008328:	4b1a      	ldr	r3, [pc, #104]	; (8008394 <HAL_InitTick+0xec>)
 800832a:	2200      	movs	r2, #0
 800832c:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800832e:	4b19      	ldr	r3, [pc, #100]	; (8008394 <HAL_InitTick+0xec>)
 8008330:	2200      	movs	r2, #0
 8008332:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8008334:	4817      	ldr	r0, [pc, #92]	; (8008394 <HAL_InitTick+0xec>)
 8008336:	f002 fe37 	bl	800afa8 <HAL_TIM_Base_Init>
 800833a:	4603      	mov	r3, r0
 800833c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8008340:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008344:	2b00      	cmp	r3, #0
 8008346:	d11b      	bne.n	8008380 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8008348:	4812      	ldr	r0, [pc, #72]	; (8008394 <HAL_InitTick+0xec>)
 800834a:	f002 fe7d 	bl	800b048 <HAL_TIM_Base_Start_IT>
 800834e:	4603      	mov	r3, r0
 8008350:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8008354:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008358:	2b00      	cmp	r3, #0
 800835a:	d111      	bne.n	8008380 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800835c:	202d      	movs	r0, #45	; 0x2d
 800835e:	f000 fb03 	bl	8008968 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2b0f      	cmp	r3, #15
 8008366:	d808      	bhi.n	800837a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8008368:	2200      	movs	r2, #0
 800836a:	6879      	ldr	r1, [r7, #4]
 800836c:	202d      	movs	r0, #45	; 0x2d
 800836e:	f000 fadf 	bl	8008930 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008372:	4a0a      	ldr	r2, [pc, #40]	; (800839c <HAL_InitTick+0xf4>)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6013      	str	r3, [r2, #0]
 8008378:	e002      	b.n	8008380 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8008380:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8008384:	4618      	mov	r0, r3
 8008386:	3738      	adds	r7, #56	; 0x38
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}
 800838c:	40023800 	.word	0x40023800
 8008390:	431bde83 	.word	0x431bde83
 8008394:	200035a0 	.word	0x200035a0
 8008398:	40002000 	.word	0x40002000
 800839c:	20000010 	.word	0x20000010

080083a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80083a0:	b480      	push	{r7}
 80083a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80083a4:	e7fe      	b.n	80083a4 <NMI_Handler+0x4>

080083a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80083a6:	b480      	push	{r7}
 80083a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80083aa:	e7fe      	b.n	80083aa <HardFault_Handler+0x4>

080083ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80083ac:	b480      	push	{r7}
 80083ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80083b0:	e7fe      	b.n	80083b0 <MemManage_Handler+0x4>

080083b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80083b2:	b480      	push	{r7}
 80083b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80083b6:	e7fe      	b.n	80083b6 <BusFault_Handler+0x4>

080083b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80083b8:	b480      	push	{r7}
 80083ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80083bc:	e7fe      	b.n	80083bc <UsageFault_Handler+0x4>

080083be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80083be:	b480      	push	{r7}
 80083c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80083c2:	bf00      	nop
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_EXT3_B_Pin);
 80083d0:	2008      	movs	r0, #8
 80083d2:	f001 f8b7 	bl	8009544 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80083d6:	bf00      	nop
 80083d8:	bd80      	pop	{r7, pc}
	...

080083dc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80083e0:	4802      	ldr	r0, [pc, #8]	; (80083ec <DMA1_Stream0_IRQHandler+0x10>)
 80083e2:	f000 fc67 	bl	8008cb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80083e6:	bf00      	nop
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	20000304 	.word	0x20000304

080083f0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80083f4:	4802      	ldr	r0, [pc, #8]	; (8008400 <DMA1_Stream1_IRQHandler+0x10>)
 80083f6:	f000 fc5d 	bl	8008cb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80083fa:	bf00      	nop
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	200004e4 	.word	0x200004e4

08008404 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8008408:	4802      	ldr	r0, [pc, #8]	; (8008414 <DMA1_Stream3_IRQHandler+0x10>)
 800840a:	f000 fc53 	bl	8008cb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800840e:	bf00      	nop
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop
 8008414:	20000544 	.word	0x20000544

08008418 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800841c:	4802      	ldr	r0, [pc, #8]	; (8008428 <DMA1_Stream6_IRQHandler+0x10>)
 800841e:	f000 fc49 	bl	8008cb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8008422:	bf00      	nop
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	20000364 	.word	0x20000364

0800842c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8008430:	4802      	ldr	r0, [pc, #8]	; (800843c <USART3_IRQHandler+0x10>)
 8008432:	f003 ff21 	bl	800c278 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8008436:	bf00      	nop
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	2000049c 	.word	0x2000049c

08008440 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_EXT1_A_Pin);
 8008444:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008448:	f001 f87c 	bl	8009544 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_EXT2_A_Pin);
 800844c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008450:	f001 f878 	bl	8009544 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_EXT3_A_Pin);
 8008454:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8008458:	f001 f874 	bl	8009544 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_EXT1_B_Pin);
 800845c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8008460:	f001 f870 	bl	8009544 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_EXT2_B_Pin);
 8008464:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008468:	f001 f86c 	bl	8009544 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800846c:	bf00      	nop
 800846e:	bd80      	pop	{r7, pc}

08008470 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8008474:	4802      	ldr	r0, [pc, #8]	; (8008480 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8008476:	f002 ff79 	bl	800b36c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800847a:	bf00      	nop
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	20000454 	.word	0x20000454

08008484 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8008488:	4802      	ldr	r0, [pc, #8]	; (8008494 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800848a:	f002 ff6f 	bl	800b36c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800848e:	bf00      	nop
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	200035a0 	.word	0x200035a0

08008498 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008498:	b480      	push	{r7}
 800849a:	af00      	add	r7, sp, #0
  return 1;
 800849c:	2301      	movs	r3, #1
}
 800849e:	4618      	mov	r0, r3
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr

080084a8 <_kill>:

int _kill(int pid, int sig)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80084b2:	f00a fc6f 	bl	8012d94 <__errno>
 80084b6:	4603      	mov	r3, r0
 80084b8:	2216      	movs	r2, #22
 80084ba:	601a      	str	r2, [r3, #0]
  return -1;
 80084bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3708      	adds	r7, #8
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <_exit>:

void _exit (int status)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80084d0:	f04f 31ff 	mov.w	r1, #4294967295
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f7ff ffe7 	bl	80084a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80084da:	e7fe      	b.n	80084da <_exit+0x12>

080084dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b086      	sub	sp, #24
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80084e8:	2300      	movs	r3, #0
 80084ea:	617b      	str	r3, [r7, #20]
 80084ec:	e00a      	b.n	8008504 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80084ee:	f3af 8000 	nop.w
 80084f2:	4601      	mov	r1, r0
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	1c5a      	adds	r2, r3, #1
 80084f8:	60ba      	str	r2, [r7, #8]
 80084fa:	b2ca      	uxtb	r2, r1
 80084fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	3301      	adds	r3, #1
 8008502:	617b      	str	r3, [r7, #20]
 8008504:	697a      	ldr	r2, [r7, #20]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	429a      	cmp	r2, r3
 800850a:	dbf0      	blt.n	80084ee <_read+0x12>
  }

  return len;
 800850c:	687b      	ldr	r3, [r7, #4]
}
 800850e:	4618      	mov	r0, r3
 8008510:	3718      	adds	r7, #24
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}

08008516 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b086      	sub	sp, #24
 800851a:	af00      	add	r7, sp, #0
 800851c:	60f8      	str	r0, [r7, #12]
 800851e:	60b9      	str	r1, [r7, #8]
 8008520:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008522:	2300      	movs	r3, #0
 8008524:	617b      	str	r3, [r7, #20]
 8008526:	e009      	b.n	800853c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	1c5a      	adds	r2, r3, #1
 800852c:	60ba      	str	r2, [r7, #8]
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	4618      	mov	r0, r3
 8008532:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	3301      	adds	r3, #1
 800853a:	617b      	str	r3, [r7, #20]
 800853c:	697a      	ldr	r2, [r7, #20]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	429a      	cmp	r2, r3
 8008542:	dbf1      	blt.n	8008528 <_write+0x12>
  }
  return len;
 8008544:	687b      	ldr	r3, [r7, #4]
}
 8008546:	4618      	mov	r0, r3
 8008548:	3718      	adds	r7, #24
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <_close>:

int _close(int file)
{
 800854e:	b480      	push	{r7}
 8008550:	b083      	sub	sp, #12
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008556:	f04f 33ff 	mov.w	r3, #4294967295
}
 800855a:	4618      	mov	r0, r3
 800855c:	370c      	adds	r7, #12
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr

08008566 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008566:	b480      	push	{r7}
 8008568:	b083      	sub	sp, #12
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
 800856e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008576:	605a      	str	r2, [r3, #4]
  return 0;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	370c      	adds	r7, #12
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr

08008586 <_isatty>:

int _isatty(int file)
{
 8008586:	b480      	push	{r7}
 8008588:	b083      	sub	sp, #12
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800858e:	2301      	movs	r3, #1
}
 8008590:	4618      	mov	r0, r3
 8008592:	370c      	adds	r7, #12
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800859c:	b480      	push	{r7}
 800859e:	b085      	sub	sp, #20
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80085a8:	2300      	movs	r3, #0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3714      	adds	r7, #20
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr
	...

080085b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b086      	sub	sp, #24
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80085c0:	4a14      	ldr	r2, [pc, #80]	; (8008614 <_sbrk+0x5c>)
 80085c2:	4b15      	ldr	r3, [pc, #84]	; (8008618 <_sbrk+0x60>)
 80085c4:	1ad3      	subs	r3, r2, r3
 80085c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80085cc:	4b13      	ldr	r3, [pc, #76]	; (800861c <_sbrk+0x64>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d102      	bne.n	80085da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80085d4:	4b11      	ldr	r3, [pc, #68]	; (800861c <_sbrk+0x64>)
 80085d6:	4a12      	ldr	r2, [pc, #72]	; (8008620 <_sbrk+0x68>)
 80085d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80085da:	4b10      	ldr	r3, [pc, #64]	; (800861c <_sbrk+0x64>)
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	4413      	add	r3, r2
 80085e2:	693a      	ldr	r2, [r7, #16]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d207      	bcs.n	80085f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80085e8:	f00a fbd4 	bl	8012d94 <__errno>
 80085ec:	4603      	mov	r3, r0
 80085ee:	220c      	movs	r2, #12
 80085f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80085f2:	f04f 33ff 	mov.w	r3, #4294967295
 80085f6:	e009      	b.n	800860c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80085f8:	4b08      	ldr	r3, [pc, #32]	; (800861c <_sbrk+0x64>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80085fe:	4b07      	ldr	r3, [pc, #28]	; (800861c <_sbrk+0x64>)
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	4413      	add	r3, r2
 8008606:	4a05      	ldr	r2, [pc, #20]	; (800861c <_sbrk+0x64>)
 8008608:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800860a:	68fb      	ldr	r3, [r7, #12]
}
 800860c:	4618      	mov	r0, r3
 800860e:	3718      	adds	r7, #24
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	20030000 	.word	0x20030000
 8008618:	00000400 	.word	0x00000400
 800861c:	200035e8 	.word	0x200035e8
 8008620:	20008128 	.word	0x20008128

08008624 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008624:	b480      	push	{r7}
 8008626:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008628:	4b06      	ldr	r3, [pc, #24]	; (8008644 <SystemInit+0x20>)
 800862a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800862e:	4a05      	ldr	r2, [pc, #20]	; (8008644 <SystemInit+0x20>)
 8008630:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008634:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008638:	bf00      	nop
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr
 8008642:	bf00      	nop
 8008644:	e000ed00 	.word	0xe000ed00

08008648 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8008648:	b480      	push	{r7}
 800864a:	b085      	sub	sp, #20
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	0a5a      	lsrs	r2, r3, #9
 8008658:	490f      	ldr	r1, [pc, #60]	; (8008698 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800865a:	fba1 1202 	umull	r1, r2, r1, r2
 800865e:	09d2      	lsrs	r2, r2, #7
 8008660:	490e      	ldr	r1, [pc, #56]	; (800869c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8008662:	fb01 f202 	mul.w	r2, r1, r2
 8008666:	1a9b      	subs	r3, r3, r2
 8008668:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	0a5b      	lsrs	r3, r3, #9
 8008670:	4a09      	ldr	r2, [pc, #36]	; (8008698 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8008672:	fba2 2303 	umull	r2, r3, r2, r3
 8008676:	09db      	lsrs	r3, r3, #7
 8008678:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	441a      	add	r2, r3
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	68fa      	ldr	r2, [r7, #12]
 800868a:	601a      	str	r2, [r3, #0]
}
 800868c:	bf00      	nop
 800868e:	3714      	adds	r7, #20
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr
 8008698:	00044b83 	.word	0x00044b83
 800869c:	3b9aca00 	.word	0x3b9aca00

080086a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80086a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80086d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80086a4:	f7ff ffbe 	bl	8008624 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80086a8:	480c      	ldr	r0, [pc, #48]	; (80086dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80086aa:	490d      	ldr	r1, [pc, #52]	; (80086e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80086ac:	4a0d      	ldr	r2, [pc, #52]	; (80086e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80086ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80086b0:	e002      	b.n	80086b8 <LoopCopyDataInit>

080086b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80086b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80086b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80086b6:	3304      	adds	r3, #4

080086b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80086b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80086ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80086bc:	d3f9      	bcc.n	80086b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80086be:	4a0a      	ldr	r2, [pc, #40]	; (80086e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80086c0:	4c0a      	ldr	r4, [pc, #40]	; (80086ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80086c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80086c4:	e001      	b.n	80086ca <LoopFillZerobss>

080086c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80086c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80086c8:	3204      	adds	r2, #4

080086ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80086ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80086cc:	d3fb      	bcc.n	80086c6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80086ce:	f00a fb67 	bl	8012da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80086d2:	f7fa f91b 	bl	800290c <main>
  bx  lr    
 80086d6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80086d8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80086dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80086e0:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80086e4:	08015b30 	.word	0x08015b30
  ldr r2, =_sbss
 80086e8:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80086ec:	20008124 	.word	0x20008124

080086f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80086f0:	e7fe      	b.n	80086f0 <ADC_IRQHandler>
	...

080086f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80086f8:	4b0e      	ldr	r3, [pc, #56]	; (8008734 <HAL_Init+0x40>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a0d      	ldr	r2, [pc, #52]	; (8008734 <HAL_Init+0x40>)
 80086fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008702:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008704:	4b0b      	ldr	r3, [pc, #44]	; (8008734 <HAL_Init+0x40>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a0a      	ldr	r2, [pc, #40]	; (8008734 <HAL_Init+0x40>)
 800870a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800870e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008710:	4b08      	ldr	r3, [pc, #32]	; (8008734 <HAL_Init+0x40>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a07      	ldr	r2, [pc, #28]	; (8008734 <HAL_Init+0x40>)
 8008716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800871a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800871c:	2003      	movs	r0, #3
 800871e:	f000 f8fc 	bl	800891a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008722:	200f      	movs	r0, #15
 8008724:	f7ff fdc0 	bl	80082a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008728:	f7ff fade 	bl	8007ce8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	40023c00 	.word	0x40023c00

08008738 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008738:	b480      	push	{r7}
 800873a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800873c:	4b06      	ldr	r3, [pc, #24]	; (8008758 <HAL_IncTick+0x20>)
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	461a      	mov	r2, r3
 8008742:	4b06      	ldr	r3, [pc, #24]	; (800875c <HAL_IncTick+0x24>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4413      	add	r3, r2
 8008748:	4a04      	ldr	r2, [pc, #16]	; (800875c <HAL_IncTick+0x24>)
 800874a:	6013      	str	r3, [r2, #0]
}
 800874c:	bf00      	nop
 800874e:	46bd      	mov	sp, r7
 8008750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008754:	4770      	bx	lr
 8008756:	bf00      	nop
 8008758:	20000014 	.word	0x20000014
 800875c:	200035ec 	.word	0x200035ec

08008760 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008760:	b480      	push	{r7}
 8008762:	af00      	add	r7, sp, #0
  return uwTick;
 8008764:	4b03      	ldr	r3, [pc, #12]	; (8008774 <HAL_GetTick+0x14>)
 8008766:	681b      	ldr	r3, [r3, #0]
}
 8008768:	4618      	mov	r0, r3
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr
 8008772:	bf00      	nop
 8008774:	200035ec 	.word	0x200035ec

08008778 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008780:	f7ff ffee 	bl	8008760 <HAL_GetTick>
 8008784:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008790:	d005      	beq.n	800879e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008792:	4b0a      	ldr	r3, [pc, #40]	; (80087bc <HAL_Delay+0x44>)
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	461a      	mov	r2, r3
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	4413      	add	r3, r2
 800879c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800879e:	bf00      	nop
 80087a0:	f7ff ffde 	bl	8008760 <HAL_GetTick>
 80087a4:	4602      	mov	r2, r0
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	1ad3      	subs	r3, r2, r3
 80087aa:	68fa      	ldr	r2, [r7, #12]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d8f7      	bhi.n	80087a0 <HAL_Delay+0x28>
  {
  }
}
 80087b0:	bf00      	nop
 80087b2:	bf00      	nop
 80087b4:	3710      	adds	r7, #16
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	bf00      	nop
 80087bc:	20000014 	.word	0x20000014

080087c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b085      	sub	sp, #20
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f003 0307 	and.w	r3, r3, #7
 80087ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80087d0:	4b0c      	ldr	r3, [pc, #48]	; (8008804 <__NVIC_SetPriorityGrouping+0x44>)
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80087d6:	68ba      	ldr	r2, [r7, #8]
 80087d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80087dc:	4013      	ands	r3, r2
 80087de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80087e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80087ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80087f2:	4a04      	ldr	r2, [pc, #16]	; (8008804 <__NVIC_SetPriorityGrouping+0x44>)
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	60d3      	str	r3, [r2, #12]
}
 80087f8:	bf00      	nop
 80087fa:	3714      	adds	r7, #20
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr
 8008804:	e000ed00 	.word	0xe000ed00

08008808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008808:	b480      	push	{r7}
 800880a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800880c:	4b04      	ldr	r3, [pc, #16]	; (8008820 <__NVIC_GetPriorityGrouping+0x18>)
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	0a1b      	lsrs	r3, r3, #8
 8008812:	f003 0307 	and.w	r3, r3, #7
}
 8008816:	4618      	mov	r0, r3
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr
 8008820:	e000ed00 	.word	0xe000ed00

08008824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	4603      	mov	r3, r0
 800882c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800882e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008832:	2b00      	cmp	r3, #0
 8008834:	db0b      	blt.n	800884e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008836:	79fb      	ldrb	r3, [r7, #7]
 8008838:	f003 021f 	and.w	r2, r3, #31
 800883c:	4907      	ldr	r1, [pc, #28]	; (800885c <__NVIC_EnableIRQ+0x38>)
 800883e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008842:	095b      	lsrs	r3, r3, #5
 8008844:	2001      	movs	r0, #1
 8008846:	fa00 f202 	lsl.w	r2, r0, r2
 800884a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800884e:	bf00      	nop
 8008850:	370c      	adds	r7, #12
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr
 800885a:	bf00      	nop
 800885c:	e000e100 	.word	0xe000e100

08008860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	4603      	mov	r3, r0
 8008868:	6039      	str	r1, [r7, #0]
 800886a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800886c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008870:	2b00      	cmp	r3, #0
 8008872:	db0a      	blt.n	800888a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	b2da      	uxtb	r2, r3
 8008878:	490c      	ldr	r1, [pc, #48]	; (80088ac <__NVIC_SetPriority+0x4c>)
 800887a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800887e:	0112      	lsls	r2, r2, #4
 8008880:	b2d2      	uxtb	r2, r2
 8008882:	440b      	add	r3, r1
 8008884:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008888:	e00a      	b.n	80088a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	b2da      	uxtb	r2, r3
 800888e:	4908      	ldr	r1, [pc, #32]	; (80088b0 <__NVIC_SetPriority+0x50>)
 8008890:	79fb      	ldrb	r3, [r7, #7]
 8008892:	f003 030f 	and.w	r3, r3, #15
 8008896:	3b04      	subs	r3, #4
 8008898:	0112      	lsls	r2, r2, #4
 800889a:	b2d2      	uxtb	r2, r2
 800889c:	440b      	add	r3, r1
 800889e:	761a      	strb	r2, [r3, #24]
}
 80088a0:	bf00      	nop
 80088a2:	370c      	adds	r7, #12
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr
 80088ac:	e000e100 	.word	0xe000e100
 80088b0:	e000ed00 	.word	0xe000ed00

080088b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b089      	sub	sp, #36	; 0x24
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	60f8      	str	r0, [r7, #12]
 80088bc:	60b9      	str	r1, [r7, #8]
 80088be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f003 0307 	and.w	r3, r3, #7
 80088c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	f1c3 0307 	rsb	r3, r3, #7
 80088ce:	2b04      	cmp	r3, #4
 80088d0:	bf28      	it	cs
 80088d2:	2304      	movcs	r3, #4
 80088d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	3304      	adds	r3, #4
 80088da:	2b06      	cmp	r3, #6
 80088dc:	d902      	bls.n	80088e4 <NVIC_EncodePriority+0x30>
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	3b03      	subs	r3, #3
 80088e2:	e000      	b.n	80088e6 <NVIC_EncodePriority+0x32>
 80088e4:	2300      	movs	r3, #0
 80088e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80088e8:	f04f 32ff 	mov.w	r2, #4294967295
 80088ec:	69bb      	ldr	r3, [r7, #24]
 80088ee:	fa02 f303 	lsl.w	r3, r2, r3
 80088f2:	43da      	mvns	r2, r3
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	401a      	ands	r2, r3
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80088fc:	f04f 31ff 	mov.w	r1, #4294967295
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	fa01 f303 	lsl.w	r3, r1, r3
 8008906:	43d9      	mvns	r1, r3
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800890c:	4313      	orrs	r3, r2
         );
}
 800890e:	4618      	mov	r0, r3
 8008910:	3724      	adds	r7, #36	; 0x24
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr

0800891a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800891a:	b580      	push	{r7, lr}
 800891c:	b082      	sub	sp, #8
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f7ff ff4c 	bl	80087c0 <__NVIC_SetPriorityGrouping>
}
 8008928:	bf00      	nop
 800892a:	3708      	adds	r7, #8
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008930:	b580      	push	{r7, lr}
 8008932:	b086      	sub	sp, #24
 8008934:	af00      	add	r7, sp, #0
 8008936:	4603      	mov	r3, r0
 8008938:	60b9      	str	r1, [r7, #8]
 800893a:	607a      	str	r2, [r7, #4]
 800893c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800893e:	2300      	movs	r3, #0
 8008940:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008942:	f7ff ff61 	bl	8008808 <__NVIC_GetPriorityGrouping>
 8008946:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	68b9      	ldr	r1, [r7, #8]
 800894c:	6978      	ldr	r0, [r7, #20]
 800894e:	f7ff ffb1 	bl	80088b4 <NVIC_EncodePriority>
 8008952:	4602      	mov	r2, r0
 8008954:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008958:	4611      	mov	r1, r2
 800895a:	4618      	mov	r0, r3
 800895c:	f7ff ff80 	bl	8008860 <__NVIC_SetPriority>
}
 8008960:	bf00      	nop
 8008962:	3718      	adds	r7, #24
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	4603      	mov	r3, r0
 8008970:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008976:	4618      	mov	r0, r3
 8008978:	f7ff ff54 	bl	8008824 <__NVIC_EnableIRQ>
}
 800897c:	bf00      	nop
 800897e:	3708      	adds	r7, #8
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b086      	sub	sp, #24
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800898c:	2300      	movs	r3, #0
 800898e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008990:	f7ff fee6 	bl	8008760 <HAL_GetTick>
 8008994:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d101      	bne.n	80089a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800899c:	2301      	movs	r3, #1
 800899e:	e099      	b.n	8008ad4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2202      	movs	r2, #2
 80089a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f022 0201 	bic.w	r2, r2, #1
 80089be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80089c0:	e00f      	b.n	80089e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80089c2:	f7ff fecd 	bl	8008760 <HAL_GetTick>
 80089c6:	4602      	mov	r2, r0
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	1ad3      	subs	r3, r2, r3
 80089cc:	2b05      	cmp	r3, #5
 80089ce:	d908      	bls.n	80089e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2220      	movs	r2, #32
 80089d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2203      	movs	r2, #3
 80089da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80089de:	2303      	movs	r3, #3
 80089e0:	e078      	b.n	8008ad4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f003 0301 	and.w	r3, r3, #1
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d1e8      	bne.n	80089c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80089f8:	697a      	ldr	r2, [r7, #20]
 80089fa:	4b38      	ldr	r3, [pc, #224]	; (8008adc <HAL_DMA_Init+0x158>)
 80089fc:	4013      	ands	r3, r2
 80089fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	685a      	ldr	r2, [r3, #4]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008a0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	691b      	ldr	r3, [r3, #16]
 8008a14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008a1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	699b      	ldr	r3, [r3, #24]
 8008a20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008a26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6a1b      	ldr	r3, [r3, #32]
 8008a2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008a2e:	697a      	ldr	r2, [r7, #20]
 8008a30:	4313      	orrs	r3, r2
 8008a32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a38:	2b04      	cmp	r3, #4
 8008a3a:	d107      	bne.n	8008a4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a44:	4313      	orrs	r3, r2
 8008a46:	697a      	ldr	r2, [r7, #20]
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	697a      	ldr	r2, [r7, #20]
 8008a52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	695b      	ldr	r3, [r3, #20]
 8008a5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	f023 0307 	bic.w	r3, r3, #7
 8008a62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a68:	697a      	ldr	r2, [r7, #20]
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a72:	2b04      	cmp	r3, #4
 8008a74:	d117      	bne.n	8008aa6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a7a:	697a      	ldr	r2, [r7, #20]
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d00e      	beq.n	8008aa6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f000 fb01 	bl	8009090 <DMA_CheckFifoParam>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d008      	beq.n	8008aa6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2240      	movs	r2, #64	; 0x40
 8008a98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	e016      	b.n	8008ad4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	697a      	ldr	r2, [r7, #20]
 8008aac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 fab8 	bl	8009024 <DMA_CalcBaseAndBitshift>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008abc:	223f      	movs	r2, #63	; 0x3f
 8008abe:	409a      	lsls	r2, r3
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2201      	movs	r2, #1
 8008ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3718      	adds	r7, #24
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	f010803f 	.word	0xf010803f

08008ae0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b086      	sub	sp, #24
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	607a      	str	r2, [r7, #4]
 8008aec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008aee:	2300      	movs	r3, #0
 8008af0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008af6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d101      	bne.n	8008b06 <HAL_DMA_Start_IT+0x26>
 8008b02:	2302      	movs	r3, #2
 8008b04:	e040      	b.n	8008b88 <HAL_DMA_Start_IT+0xa8>
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2201      	movs	r2, #1
 8008b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d12f      	bne.n	8008b7a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2202      	movs	r2, #2
 8008b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2200      	movs	r2, #0
 8008b26:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	68b9      	ldr	r1, [r7, #8]
 8008b2e:	68f8      	ldr	r0, [r7, #12]
 8008b30:	f000 fa4a 	bl	8008fc8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b38:	223f      	movs	r2, #63	; 0x3f
 8008b3a:	409a      	lsls	r2, r3
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f042 0216 	orr.w	r2, r2, #22
 8008b4e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d007      	beq.n	8008b68 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f042 0208 	orr.w	r2, r2, #8
 8008b66:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f042 0201 	orr.w	r2, r2, #1
 8008b76:	601a      	str	r2, [r3, #0]
 8008b78:	e005      	b.n	8008b86 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008b82:	2302      	movs	r3, #2
 8008b84:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3718      	adds	r7, #24
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b084      	sub	sp, #16
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b9c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008b9e:	f7ff fddf 	bl	8008760 <HAL_GetTick>
 8008ba2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	2b02      	cmp	r3, #2
 8008bae:	d008      	beq.n	8008bc2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2280      	movs	r2, #128	; 0x80
 8008bb4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	e052      	b.n	8008c68 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f022 0216 	bic.w	r2, r2, #22
 8008bd0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	695a      	ldr	r2, [r3, #20]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008be0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d103      	bne.n	8008bf2 <HAL_DMA_Abort+0x62>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d007      	beq.n	8008c02 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f022 0208 	bic.w	r2, r2, #8
 8008c00:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	681a      	ldr	r2, [r3, #0]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f022 0201 	bic.w	r2, r2, #1
 8008c10:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008c12:	e013      	b.n	8008c3c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008c14:	f7ff fda4 	bl	8008760 <HAL_GetTick>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	1ad3      	subs	r3, r2, r3
 8008c1e:	2b05      	cmp	r3, #5
 8008c20:	d90c      	bls.n	8008c3c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2220      	movs	r2, #32
 8008c26:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2203      	movs	r2, #3
 8008c2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2200      	movs	r2, #0
 8008c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8008c38:	2303      	movs	r3, #3
 8008c3a:	e015      	b.n	8008c68 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f003 0301 	and.w	r3, r3, #1
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d1e4      	bne.n	8008c14 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c4e:	223f      	movs	r2, #63	; 0x3f
 8008c50:	409a      	lsls	r2, r3
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8008c66:	2300      	movs	r3, #0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3710      	adds	r7, #16
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	2b02      	cmp	r3, #2
 8008c82:	d004      	beq.n	8008c8e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2280      	movs	r2, #128	; 0x80
 8008c88:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e00c      	b.n	8008ca8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2205      	movs	r2, #5
 8008c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f022 0201 	bic.w	r2, r2, #1
 8008ca4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b086      	sub	sp, #24
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008cc0:	4b8e      	ldr	r3, [pc, #568]	; (8008efc <HAL_DMA_IRQHandler+0x248>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a8e      	ldr	r2, [pc, #568]	; (8008f00 <HAL_DMA_IRQHandler+0x24c>)
 8008cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8008cca:	0a9b      	lsrs	r3, r3, #10
 8008ccc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cd2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cde:	2208      	movs	r2, #8
 8008ce0:	409a      	lsls	r2, r3
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	4013      	ands	r3, r2
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d01a      	beq.n	8008d20 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f003 0304 	and.w	r3, r3, #4
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d013      	beq.n	8008d20 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f022 0204 	bic.w	r2, r2, #4
 8008d06:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d0c:	2208      	movs	r2, #8
 8008d0e:	409a      	lsls	r2, r3
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d18:	f043 0201 	orr.w	r2, r3, #1
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d24:	2201      	movs	r2, #1
 8008d26:	409a      	lsls	r2, r3
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	4013      	ands	r3, r2
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d012      	beq.n	8008d56 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	695b      	ldr	r3, [r3, #20]
 8008d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d00b      	beq.n	8008d56 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d42:	2201      	movs	r2, #1
 8008d44:	409a      	lsls	r2, r3
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d4e:	f043 0202 	orr.w	r2, r3, #2
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d5a:	2204      	movs	r2, #4
 8008d5c:	409a      	lsls	r2, r3
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	4013      	ands	r3, r2
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d012      	beq.n	8008d8c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f003 0302 	and.w	r3, r3, #2
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d00b      	beq.n	8008d8c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d78:	2204      	movs	r2, #4
 8008d7a:	409a      	lsls	r2, r3
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d84:	f043 0204 	orr.w	r2, r3, #4
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d90:	2210      	movs	r2, #16
 8008d92:	409a      	lsls	r2, r3
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	4013      	ands	r3, r2
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d043      	beq.n	8008e24 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f003 0308 	and.w	r3, r3, #8
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d03c      	beq.n	8008e24 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dae:	2210      	movs	r2, #16
 8008db0:	409a      	lsls	r2, r3
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d018      	beq.n	8008df6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d108      	bne.n	8008de4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d024      	beq.n	8008e24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	4798      	blx	r3
 8008de2:	e01f      	b.n	8008e24 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d01b      	beq.n	8008e24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	4798      	blx	r3
 8008df4:	e016      	b.n	8008e24 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d107      	bne.n	8008e14 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f022 0208 	bic.w	r2, r2, #8
 8008e12:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d003      	beq.n	8008e24 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e28:	2220      	movs	r2, #32
 8008e2a:	409a      	lsls	r2, r3
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	4013      	ands	r3, r2
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	f000 808f 	beq.w	8008f54 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f003 0310 	and.w	r3, r3, #16
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	f000 8087 	beq.w	8008f54 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e4a:	2220      	movs	r2, #32
 8008e4c:	409a      	lsls	r2, r3
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	2b05      	cmp	r3, #5
 8008e5c:	d136      	bne.n	8008ecc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f022 0216 	bic.w	r2, r2, #22
 8008e6c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	695a      	ldr	r2, [r3, #20]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e7c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d103      	bne.n	8008e8e <HAL_DMA_IRQHandler+0x1da>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d007      	beq.n	8008e9e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f022 0208 	bic.w	r2, r2, #8
 8008e9c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ea2:	223f      	movs	r2, #63	; 0x3f
 8008ea4:	409a      	lsls	r2, r3
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2201      	movs	r2, #1
 8008eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d07e      	beq.n	8008fc0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	4798      	blx	r3
        }
        return;
 8008eca:	e079      	b.n	8008fc0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d01d      	beq.n	8008f16 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d10d      	bne.n	8008f04 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d031      	beq.n	8008f54 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	4798      	blx	r3
 8008ef8:	e02c      	b.n	8008f54 <HAL_DMA_IRQHandler+0x2a0>
 8008efa:	bf00      	nop
 8008efc:	2000000c 	.word	0x2000000c
 8008f00:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d023      	beq.n	8008f54 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	4798      	blx	r3
 8008f14:	e01e      	b.n	8008f54 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d10f      	bne.n	8008f44 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f022 0210 	bic.w	r2, r2, #16
 8008f32:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2201      	movs	r2, #1
 8008f38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d003      	beq.n	8008f54 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d032      	beq.n	8008fc2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f60:	f003 0301 	and.w	r3, r3, #1
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d022      	beq.n	8008fae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2205      	movs	r2, #5
 8008f6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f022 0201 	bic.w	r2, r2, #1
 8008f7e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	3301      	adds	r3, #1
 8008f84:	60bb      	str	r3, [r7, #8]
 8008f86:	697a      	ldr	r2, [r7, #20]
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d307      	bcc.n	8008f9c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f003 0301 	and.w	r3, r3, #1
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d1f2      	bne.n	8008f80 <HAL_DMA_IRQHandler+0x2cc>
 8008f9a:	e000      	b.n	8008f9e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008f9c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d005      	beq.n	8008fc2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	4798      	blx	r3
 8008fbe:	e000      	b.n	8008fc2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8008fc0:	bf00      	nop
    }
  }
}
 8008fc2:	3718      	adds	r7, #24
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b085      	sub	sp, #20
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	607a      	str	r2, [r7, #4]
 8008fd4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008fe4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	683a      	ldr	r2, [r7, #0]
 8008fec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	689b      	ldr	r3, [r3, #8]
 8008ff2:	2b40      	cmp	r3, #64	; 0x40
 8008ff4:	d108      	bne.n	8009008 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	68ba      	ldr	r2, [r7, #8]
 8009004:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8009006:	e007      	b.n	8009018 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	68ba      	ldr	r2, [r7, #8]
 800900e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	60da      	str	r2, [r3, #12]
}
 8009018:	bf00      	nop
 800901a:	3714      	adds	r7, #20
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr

08009024 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009024:	b480      	push	{r7}
 8009026:	b085      	sub	sp, #20
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	b2db      	uxtb	r3, r3
 8009032:	3b10      	subs	r3, #16
 8009034:	4a14      	ldr	r2, [pc, #80]	; (8009088 <DMA_CalcBaseAndBitshift+0x64>)
 8009036:	fba2 2303 	umull	r2, r3, r2, r3
 800903a:	091b      	lsrs	r3, r3, #4
 800903c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800903e:	4a13      	ldr	r2, [pc, #76]	; (800908c <DMA_CalcBaseAndBitshift+0x68>)
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	4413      	add	r3, r2
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	461a      	mov	r2, r3
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2b03      	cmp	r3, #3
 8009050:	d909      	bls.n	8009066 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800905a:	f023 0303 	bic.w	r3, r3, #3
 800905e:	1d1a      	adds	r2, r3, #4
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	659a      	str	r2, [r3, #88]	; 0x58
 8009064:	e007      	b.n	8009076 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800906e:	f023 0303 	bic.w	r3, r3, #3
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800907a:	4618      	mov	r0, r3
 800907c:	3714      	adds	r7, #20
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr
 8009086:	bf00      	nop
 8009088:	aaaaaaab 	.word	0xaaaaaaab
 800908c:	08015594 	.word	0x08015594

08009090 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009090:	b480      	push	{r7}
 8009092:	b085      	sub	sp, #20
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009098:	2300      	movs	r3, #0
 800909a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	699b      	ldr	r3, [r3, #24]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d11f      	bne.n	80090ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	2b03      	cmp	r3, #3
 80090ae:	d856      	bhi.n	800915e <DMA_CheckFifoParam+0xce>
 80090b0:	a201      	add	r2, pc, #4	; (adr r2, 80090b8 <DMA_CheckFifoParam+0x28>)
 80090b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b6:	bf00      	nop
 80090b8:	080090c9 	.word	0x080090c9
 80090bc:	080090db 	.word	0x080090db
 80090c0:	080090c9 	.word	0x080090c9
 80090c4:	0800915f 	.word	0x0800915f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d046      	beq.n	8009162 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80090d4:	2301      	movs	r3, #1
 80090d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80090d8:	e043      	b.n	8009162 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80090e2:	d140      	bne.n	8009166 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80090e4:	2301      	movs	r3, #1
 80090e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80090e8:	e03d      	b.n	8009166 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	699b      	ldr	r3, [r3, #24]
 80090ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090f2:	d121      	bne.n	8009138 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	2b03      	cmp	r3, #3
 80090f8:	d837      	bhi.n	800916a <DMA_CheckFifoParam+0xda>
 80090fa:	a201      	add	r2, pc, #4	; (adr r2, 8009100 <DMA_CheckFifoParam+0x70>)
 80090fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009100:	08009111 	.word	0x08009111
 8009104:	08009117 	.word	0x08009117
 8009108:	08009111 	.word	0x08009111
 800910c:	08009129 	.word	0x08009129
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8009110:	2301      	movs	r3, #1
 8009112:	73fb      	strb	r3, [r7, #15]
      break;
 8009114:	e030      	b.n	8009178 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800911a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800911e:	2b00      	cmp	r3, #0
 8009120:	d025      	beq.n	800916e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8009122:	2301      	movs	r3, #1
 8009124:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009126:	e022      	b.n	800916e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800912c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009130:	d11f      	bne.n	8009172 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009136:	e01c      	b.n	8009172 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	2b02      	cmp	r3, #2
 800913c:	d903      	bls.n	8009146 <DMA_CheckFifoParam+0xb6>
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	2b03      	cmp	r3, #3
 8009142:	d003      	beq.n	800914c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009144:	e018      	b.n	8009178 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8009146:	2301      	movs	r3, #1
 8009148:	73fb      	strb	r3, [r7, #15]
      break;
 800914a:	e015      	b.n	8009178 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009150:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009154:	2b00      	cmp	r3, #0
 8009156:	d00e      	beq.n	8009176 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8009158:	2301      	movs	r3, #1
 800915a:	73fb      	strb	r3, [r7, #15]
      break;
 800915c:	e00b      	b.n	8009176 <DMA_CheckFifoParam+0xe6>
      break;
 800915e:	bf00      	nop
 8009160:	e00a      	b.n	8009178 <DMA_CheckFifoParam+0xe8>
      break;
 8009162:	bf00      	nop
 8009164:	e008      	b.n	8009178 <DMA_CheckFifoParam+0xe8>
      break;
 8009166:	bf00      	nop
 8009168:	e006      	b.n	8009178 <DMA_CheckFifoParam+0xe8>
      break;
 800916a:	bf00      	nop
 800916c:	e004      	b.n	8009178 <DMA_CheckFifoParam+0xe8>
      break;
 800916e:	bf00      	nop
 8009170:	e002      	b.n	8009178 <DMA_CheckFifoParam+0xe8>
      break;   
 8009172:	bf00      	nop
 8009174:	e000      	b.n	8009178 <DMA_CheckFifoParam+0xe8>
      break;
 8009176:	bf00      	nop
    }
  } 
  
  return status; 
 8009178:	7bfb      	ldrb	r3, [r7, #15]
}
 800917a:	4618      	mov	r0, r3
 800917c:	3714      	adds	r7, #20
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr
 8009186:	bf00      	nop

08009188 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009188:	b480      	push	{r7}
 800918a:	b089      	sub	sp, #36	; 0x24
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009192:	2300      	movs	r3, #0
 8009194:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009196:	2300      	movs	r3, #0
 8009198:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800919a:	2300      	movs	r3, #0
 800919c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800919e:	2300      	movs	r3, #0
 80091a0:	61fb      	str	r3, [r7, #28]
 80091a2:	e177      	b.n	8009494 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80091a4:	2201      	movs	r2, #1
 80091a6:	69fb      	ldr	r3, [r7, #28]
 80091a8:	fa02 f303 	lsl.w	r3, r2, r3
 80091ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	697a      	ldr	r2, [r7, #20]
 80091b4:	4013      	ands	r3, r2
 80091b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80091b8:	693a      	ldr	r2, [r7, #16]
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	429a      	cmp	r2, r3
 80091be:	f040 8166 	bne.w	800948e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	f003 0303 	and.w	r3, r3, #3
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d005      	beq.n	80091da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80091d6:	2b02      	cmp	r3, #2
 80091d8:	d130      	bne.n	800923c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	689b      	ldr	r3, [r3, #8]
 80091de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80091e0:	69fb      	ldr	r3, [r7, #28]
 80091e2:	005b      	lsls	r3, r3, #1
 80091e4:	2203      	movs	r2, #3
 80091e6:	fa02 f303 	lsl.w	r3, r2, r3
 80091ea:	43db      	mvns	r3, r3
 80091ec:	69ba      	ldr	r2, [r7, #24]
 80091ee:	4013      	ands	r3, r2
 80091f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	68da      	ldr	r2, [r3, #12]
 80091f6:	69fb      	ldr	r3, [r7, #28]
 80091f8:	005b      	lsls	r3, r3, #1
 80091fa:	fa02 f303 	lsl.w	r3, r2, r3
 80091fe:	69ba      	ldr	r2, [r7, #24]
 8009200:	4313      	orrs	r3, r2
 8009202:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	69ba      	ldr	r2, [r7, #24]
 8009208:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009210:	2201      	movs	r2, #1
 8009212:	69fb      	ldr	r3, [r7, #28]
 8009214:	fa02 f303 	lsl.w	r3, r2, r3
 8009218:	43db      	mvns	r3, r3
 800921a:	69ba      	ldr	r2, [r7, #24]
 800921c:	4013      	ands	r3, r2
 800921e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	091b      	lsrs	r3, r3, #4
 8009226:	f003 0201 	and.w	r2, r3, #1
 800922a:	69fb      	ldr	r3, [r7, #28]
 800922c:	fa02 f303 	lsl.w	r3, r2, r3
 8009230:	69ba      	ldr	r2, [r7, #24]
 8009232:	4313      	orrs	r3, r2
 8009234:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	69ba      	ldr	r2, [r7, #24]
 800923a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	f003 0303 	and.w	r3, r3, #3
 8009244:	2b03      	cmp	r3, #3
 8009246:	d017      	beq.n	8009278 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	68db      	ldr	r3, [r3, #12]
 800924c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800924e:	69fb      	ldr	r3, [r7, #28]
 8009250:	005b      	lsls	r3, r3, #1
 8009252:	2203      	movs	r2, #3
 8009254:	fa02 f303 	lsl.w	r3, r2, r3
 8009258:	43db      	mvns	r3, r3
 800925a:	69ba      	ldr	r2, [r7, #24]
 800925c:	4013      	ands	r3, r2
 800925e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	689a      	ldr	r2, [r3, #8]
 8009264:	69fb      	ldr	r3, [r7, #28]
 8009266:	005b      	lsls	r3, r3, #1
 8009268:	fa02 f303 	lsl.w	r3, r2, r3
 800926c:	69ba      	ldr	r2, [r7, #24]
 800926e:	4313      	orrs	r3, r2
 8009270:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	69ba      	ldr	r2, [r7, #24]
 8009276:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	f003 0303 	and.w	r3, r3, #3
 8009280:	2b02      	cmp	r3, #2
 8009282:	d123      	bne.n	80092cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009284:	69fb      	ldr	r3, [r7, #28]
 8009286:	08da      	lsrs	r2, r3, #3
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	3208      	adds	r2, #8
 800928c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009290:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009292:	69fb      	ldr	r3, [r7, #28]
 8009294:	f003 0307 	and.w	r3, r3, #7
 8009298:	009b      	lsls	r3, r3, #2
 800929a:	220f      	movs	r2, #15
 800929c:	fa02 f303 	lsl.w	r3, r2, r3
 80092a0:	43db      	mvns	r3, r3
 80092a2:	69ba      	ldr	r2, [r7, #24]
 80092a4:	4013      	ands	r3, r2
 80092a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	691a      	ldr	r2, [r3, #16]
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	f003 0307 	and.w	r3, r3, #7
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	fa02 f303 	lsl.w	r3, r2, r3
 80092b8:	69ba      	ldr	r2, [r7, #24]
 80092ba:	4313      	orrs	r3, r2
 80092bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80092be:	69fb      	ldr	r3, [r7, #28]
 80092c0:	08da      	lsrs	r2, r3, #3
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	3208      	adds	r2, #8
 80092c6:	69b9      	ldr	r1, [r7, #24]
 80092c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	005b      	lsls	r3, r3, #1
 80092d6:	2203      	movs	r2, #3
 80092d8:	fa02 f303 	lsl.w	r3, r2, r3
 80092dc:	43db      	mvns	r3, r3
 80092de:	69ba      	ldr	r2, [r7, #24]
 80092e0:	4013      	ands	r3, r2
 80092e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	f003 0203 	and.w	r2, r3, #3
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	005b      	lsls	r3, r3, #1
 80092f0:	fa02 f303 	lsl.w	r3, r2, r3
 80092f4:	69ba      	ldr	r2, [r7, #24]
 80092f6:	4313      	orrs	r3, r2
 80092f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	69ba      	ldr	r2, [r7, #24]
 80092fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009308:	2b00      	cmp	r3, #0
 800930a:	f000 80c0 	beq.w	800948e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800930e:	2300      	movs	r3, #0
 8009310:	60fb      	str	r3, [r7, #12]
 8009312:	4b66      	ldr	r3, [pc, #408]	; (80094ac <HAL_GPIO_Init+0x324>)
 8009314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009316:	4a65      	ldr	r2, [pc, #404]	; (80094ac <HAL_GPIO_Init+0x324>)
 8009318:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800931c:	6453      	str	r3, [r2, #68]	; 0x44
 800931e:	4b63      	ldr	r3, [pc, #396]	; (80094ac <HAL_GPIO_Init+0x324>)
 8009320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009326:	60fb      	str	r3, [r7, #12]
 8009328:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800932a:	4a61      	ldr	r2, [pc, #388]	; (80094b0 <HAL_GPIO_Init+0x328>)
 800932c:	69fb      	ldr	r3, [r7, #28]
 800932e:	089b      	lsrs	r3, r3, #2
 8009330:	3302      	adds	r3, #2
 8009332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009336:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009338:	69fb      	ldr	r3, [r7, #28]
 800933a:	f003 0303 	and.w	r3, r3, #3
 800933e:	009b      	lsls	r3, r3, #2
 8009340:	220f      	movs	r2, #15
 8009342:	fa02 f303 	lsl.w	r3, r2, r3
 8009346:	43db      	mvns	r3, r3
 8009348:	69ba      	ldr	r2, [r7, #24]
 800934a:	4013      	ands	r3, r2
 800934c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	4a58      	ldr	r2, [pc, #352]	; (80094b4 <HAL_GPIO_Init+0x32c>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d037      	beq.n	80093c6 <HAL_GPIO_Init+0x23e>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	4a57      	ldr	r2, [pc, #348]	; (80094b8 <HAL_GPIO_Init+0x330>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d031      	beq.n	80093c2 <HAL_GPIO_Init+0x23a>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	4a56      	ldr	r2, [pc, #344]	; (80094bc <HAL_GPIO_Init+0x334>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d02b      	beq.n	80093be <HAL_GPIO_Init+0x236>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	4a55      	ldr	r2, [pc, #340]	; (80094c0 <HAL_GPIO_Init+0x338>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d025      	beq.n	80093ba <HAL_GPIO_Init+0x232>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	4a54      	ldr	r2, [pc, #336]	; (80094c4 <HAL_GPIO_Init+0x33c>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d01f      	beq.n	80093b6 <HAL_GPIO_Init+0x22e>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4a53      	ldr	r2, [pc, #332]	; (80094c8 <HAL_GPIO_Init+0x340>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d019      	beq.n	80093b2 <HAL_GPIO_Init+0x22a>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4a52      	ldr	r2, [pc, #328]	; (80094cc <HAL_GPIO_Init+0x344>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d013      	beq.n	80093ae <HAL_GPIO_Init+0x226>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	4a51      	ldr	r2, [pc, #324]	; (80094d0 <HAL_GPIO_Init+0x348>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d00d      	beq.n	80093aa <HAL_GPIO_Init+0x222>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	4a50      	ldr	r2, [pc, #320]	; (80094d4 <HAL_GPIO_Init+0x34c>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d007      	beq.n	80093a6 <HAL_GPIO_Init+0x21e>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4a4f      	ldr	r2, [pc, #316]	; (80094d8 <HAL_GPIO_Init+0x350>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d101      	bne.n	80093a2 <HAL_GPIO_Init+0x21a>
 800939e:	2309      	movs	r3, #9
 80093a0:	e012      	b.n	80093c8 <HAL_GPIO_Init+0x240>
 80093a2:	230a      	movs	r3, #10
 80093a4:	e010      	b.n	80093c8 <HAL_GPIO_Init+0x240>
 80093a6:	2308      	movs	r3, #8
 80093a8:	e00e      	b.n	80093c8 <HAL_GPIO_Init+0x240>
 80093aa:	2307      	movs	r3, #7
 80093ac:	e00c      	b.n	80093c8 <HAL_GPIO_Init+0x240>
 80093ae:	2306      	movs	r3, #6
 80093b0:	e00a      	b.n	80093c8 <HAL_GPIO_Init+0x240>
 80093b2:	2305      	movs	r3, #5
 80093b4:	e008      	b.n	80093c8 <HAL_GPIO_Init+0x240>
 80093b6:	2304      	movs	r3, #4
 80093b8:	e006      	b.n	80093c8 <HAL_GPIO_Init+0x240>
 80093ba:	2303      	movs	r3, #3
 80093bc:	e004      	b.n	80093c8 <HAL_GPIO_Init+0x240>
 80093be:	2302      	movs	r3, #2
 80093c0:	e002      	b.n	80093c8 <HAL_GPIO_Init+0x240>
 80093c2:	2301      	movs	r3, #1
 80093c4:	e000      	b.n	80093c8 <HAL_GPIO_Init+0x240>
 80093c6:	2300      	movs	r3, #0
 80093c8:	69fa      	ldr	r2, [r7, #28]
 80093ca:	f002 0203 	and.w	r2, r2, #3
 80093ce:	0092      	lsls	r2, r2, #2
 80093d0:	4093      	lsls	r3, r2
 80093d2:	69ba      	ldr	r2, [r7, #24]
 80093d4:	4313      	orrs	r3, r2
 80093d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80093d8:	4935      	ldr	r1, [pc, #212]	; (80094b0 <HAL_GPIO_Init+0x328>)
 80093da:	69fb      	ldr	r3, [r7, #28]
 80093dc:	089b      	lsrs	r3, r3, #2
 80093de:	3302      	adds	r3, #2
 80093e0:	69ba      	ldr	r2, [r7, #24]
 80093e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80093e6:	4b3d      	ldr	r3, [pc, #244]	; (80094dc <HAL_GPIO_Init+0x354>)
 80093e8:	689b      	ldr	r3, [r3, #8]
 80093ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	43db      	mvns	r3, r3
 80093f0:	69ba      	ldr	r2, [r7, #24]
 80093f2:	4013      	ands	r3, r2
 80093f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d003      	beq.n	800940a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8009402:	69ba      	ldr	r2, [r7, #24]
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	4313      	orrs	r3, r2
 8009408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800940a:	4a34      	ldr	r2, [pc, #208]	; (80094dc <HAL_GPIO_Init+0x354>)
 800940c:	69bb      	ldr	r3, [r7, #24]
 800940e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009410:	4b32      	ldr	r3, [pc, #200]	; (80094dc <HAL_GPIO_Init+0x354>)
 8009412:	68db      	ldr	r3, [r3, #12]
 8009414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	43db      	mvns	r3, r3
 800941a:	69ba      	ldr	r2, [r7, #24]
 800941c:	4013      	ands	r3, r2
 800941e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009428:	2b00      	cmp	r3, #0
 800942a:	d003      	beq.n	8009434 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800942c:	69ba      	ldr	r2, [r7, #24]
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	4313      	orrs	r3, r2
 8009432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009434:	4a29      	ldr	r2, [pc, #164]	; (80094dc <HAL_GPIO_Init+0x354>)
 8009436:	69bb      	ldr	r3, [r7, #24]
 8009438:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800943a:	4b28      	ldr	r3, [pc, #160]	; (80094dc <HAL_GPIO_Init+0x354>)
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	43db      	mvns	r3, r3
 8009444:	69ba      	ldr	r2, [r7, #24]
 8009446:	4013      	ands	r3, r2
 8009448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	685b      	ldr	r3, [r3, #4]
 800944e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009452:	2b00      	cmp	r3, #0
 8009454:	d003      	beq.n	800945e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8009456:	69ba      	ldr	r2, [r7, #24]
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	4313      	orrs	r3, r2
 800945c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800945e:	4a1f      	ldr	r2, [pc, #124]	; (80094dc <HAL_GPIO_Init+0x354>)
 8009460:	69bb      	ldr	r3, [r7, #24]
 8009462:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009464:	4b1d      	ldr	r3, [pc, #116]	; (80094dc <HAL_GPIO_Init+0x354>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	43db      	mvns	r3, r3
 800946e:	69ba      	ldr	r2, [r7, #24]
 8009470:	4013      	ands	r3, r2
 8009472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800947c:	2b00      	cmp	r3, #0
 800947e:	d003      	beq.n	8009488 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8009480:	69ba      	ldr	r2, [r7, #24]
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	4313      	orrs	r3, r2
 8009486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009488:	4a14      	ldr	r2, [pc, #80]	; (80094dc <HAL_GPIO_Init+0x354>)
 800948a:	69bb      	ldr	r3, [r7, #24]
 800948c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800948e:	69fb      	ldr	r3, [r7, #28]
 8009490:	3301      	adds	r3, #1
 8009492:	61fb      	str	r3, [r7, #28]
 8009494:	69fb      	ldr	r3, [r7, #28]
 8009496:	2b0f      	cmp	r3, #15
 8009498:	f67f ae84 	bls.w	80091a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800949c:	bf00      	nop
 800949e:	bf00      	nop
 80094a0:	3724      	adds	r7, #36	; 0x24
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr
 80094aa:	bf00      	nop
 80094ac:	40023800 	.word	0x40023800
 80094b0:	40013800 	.word	0x40013800
 80094b4:	40020000 	.word	0x40020000
 80094b8:	40020400 	.word	0x40020400
 80094bc:	40020800 	.word	0x40020800
 80094c0:	40020c00 	.word	0x40020c00
 80094c4:	40021000 	.word	0x40021000
 80094c8:	40021400 	.word	0x40021400
 80094cc:	40021800 	.word	0x40021800
 80094d0:	40021c00 	.word	0x40021c00
 80094d4:	40022000 	.word	0x40022000
 80094d8:	40022400 	.word	0x40022400
 80094dc:	40013c00 	.word	0x40013c00

080094e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b085      	sub	sp, #20
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	460b      	mov	r3, r1
 80094ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	691a      	ldr	r2, [r3, #16]
 80094f0:	887b      	ldrh	r3, [r7, #2]
 80094f2:	4013      	ands	r3, r2
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d002      	beq.n	80094fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80094f8:	2301      	movs	r3, #1
 80094fa:	73fb      	strb	r3, [r7, #15]
 80094fc:	e001      	b.n	8009502 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80094fe:	2300      	movs	r3, #0
 8009500:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009502:	7bfb      	ldrb	r3, [r7, #15]
}
 8009504:	4618      	mov	r0, r3
 8009506:	3714      	adds	r7, #20
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009510:	b480      	push	{r7}
 8009512:	b083      	sub	sp, #12
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	460b      	mov	r3, r1
 800951a:	807b      	strh	r3, [r7, #2]
 800951c:	4613      	mov	r3, r2
 800951e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009520:	787b      	ldrb	r3, [r7, #1]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d003      	beq.n	800952e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009526:	887a      	ldrh	r2, [r7, #2]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800952c:	e003      	b.n	8009536 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800952e:	887b      	ldrh	r3, [r7, #2]
 8009530:	041a      	lsls	r2, r3, #16
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	619a      	str	r2, [r3, #24]
}
 8009536:	bf00      	nop
 8009538:	370c      	adds	r7, #12
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr
	...

08009544 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b082      	sub	sp, #8
 8009548:	af00      	add	r7, sp, #0
 800954a:	4603      	mov	r3, r0
 800954c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800954e:	4b08      	ldr	r3, [pc, #32]	; (8009570 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009550:	695a      	ldr	r2, [r3, #20]
 8009552:	88fb      	ldrh	r3, [r7, #6]
 8009554:	4013      	ands	r3, r2
 8009556:	2b00      	cmp	r3, #0
 8009558:	d006      	beq.n	8009568 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800955a:	4a05      	ldr	r2, [pc, #20]	; (8009570 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800955c:	88fb      	ldrh	r3, [r7, #6]
 800955e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009560:	88fb      	ldrh	r3, [r7, #6]
 8009562:	4618      	mov	r0, r3
 8009564:	f7f9 ff18 	bl	8003398 <HAL_GPIO_EXTI_Callback>
  }
}
 8009568:	bf00      	nop
 800956a:	3708      	adds	r7, #8
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}
 8009570:	40013c00 	.word	0x40013c00

08009574 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d101      	bne.n	8009586 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009582:	2301      	movs	r3, #1
 8009584:	e12b      	b.n	80097de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800958c:	b2db      	uxtb	r3, r3
 800958e:	2b00      	cmp	r3, #0
 8009590:	d106      	bne.n	80095a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2200      	movs	r2, #0
 8009596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f7fe fbd0 	bl	8007d40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2224      	movs	r2, #36	; 0x24
 80095a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f022 0201 	bic.w	r2, r2, #1
 80095b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80095c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80095d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80095d8:	f001 fc8c 	bl	800aef4 <HAL_RCC_GetPCLK1Freq>
 80095dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	4a81      	ldr	r2, [pc, #516]	; (80097e8 <HAL_I2C_Init+0x274>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d807      	bhi.n	80095f8 <HAL_I2C_Init+0x84>
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	4a80      	ldr	r2, [pc, #512]	; (80097ec <HAL_I2C_Init+0x278>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	bf94      	ite	ls
 80095f0:	2301      	movls	r3, #1
 80095f2:	2300      	movhi	r3, #0
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	e006      	b.n	8009606 <HAL_I2C_Init+0x92>
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	4a7d      	ldr	r2, [pc, #500]	; (80097f0 <HAL_I2C_Init+0x27c>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	bf94      	ite	ls
 8009600:	2301      	movls	r3, #1
 8009602:	2300      	movhi	r3, #0
 8009604:	b2db      	uxtb	r3, r3
 8009606:	2b00      	cmp	r3, #0
 8009608:	d001      	beq.n	800960e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800960a:	2301      	movs	r3, #1
 800960c:	e0e7      	b.n	80097de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	4a78      	ldr	r2, [pc, #480]	; (80097f4 <HAL_I2C_Init+0x280>)
 8009612:	fba2 2303 	umull	r2, r3, r2, r3
 8009616:	0c9b      	lsrs	r3, r3, #18
 8009618:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	68ba      	ldr	r2, [r7, #8]
 800962a:	430a      	orrs	r2, r1
 800962c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	6a1b      	ldr	r3, [r3, #32]
 8009634:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	4a6a      	ldr	r2, [pc, #424]	; (80097e8 <HAL_I2C_Init+0x274>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d802      	bhi.n	8009648 <HAL_I2C_Init+0xd4>
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	3301      	adds	r3, #1
 8009646:	e009      	b.n	800965c <HAL_I2C_Init+0xe8>
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800964e:	fb02 f303 	mul.w	r3, r2, r3
 8009652:	4a69      	ldr	r2, [pc, #420]	; (80097f8 <HAL_I2C_Init+0x284>)
 8009654:	fba2 2303 	umull	r2, r3, r2, r3
 8009658:	099b      	lsrs	r3, r3, #6
 800965a:	3301      	adds	r3, #1
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	6812      	ldr	r2, [r2, #0]
 8009660:	430b      	orrs	r3, r1
 8009662:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	69db      	ldr	r3, [r3, #28]
 800966a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800966e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	495c      	ldr	r1, [pc, #368]	; (80097e8 <HAL_I2C_Init+0x274>)
 8009678:	428b      	cmp	r3, r1
 800967a:	d819      	bhi.n	80096b0 <HAL_I2C_Init+0x13c>
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	1e59      	subs	r1, r3, #1
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	005b      	lsls	r3, r3, #1
 8009686:	fbb1 f3f3 	udiv	r3, r1, r3
 800968a:	1c59      	adds	r1, r3, #1
 800968c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009690:	400b      	ands	r3, r1
 8009692:	2b00      	cmp	r3, #0
 8009694:	d00a      	beq.n	80096ac <HAL_I2C_Init+0x138>
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	1e59      	subs	r1, r3, #1
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	005b      	lsls	r3, r3, #1
 80096a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80096a4:	3301      	adds	r3, #1
 80096a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80096aa:	e051      	b.n	8009750 <HAL_I2C_Init+0x1dc>
 80096ac:	2304      	movs	r3, #4
 80096ae:	e04f      	b.n	8009750 <HAL_I2C_Init+0x1dc>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d111      	bne.n	80096dc <HAL_I2C_Init+0x168>
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	1e58      	subs	r0, r3, #1
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6859      	ldr	r1, [r3, #4]
 80096c0:	460b      	mov	r3, r1
 80096c2:	005b      	lsls	r3, r3, #1
 80096c4:	440b      	add	r3, r1
 80096c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80096ca:	3301      	adds	r3, #1
 80096cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	bf0c      	ite	eq
 80096d4:	2301      	moveq	r3, #1
 80096d6:	2300      	movne	r3, #0
 80096d8:	b2db      	uxtb	r3, r3
 80096da:	e012      	b.n	8009702 <HAL_I2C_Init+0x18e>
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	1e58      	subs	r0, r3, #1
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6859      	ldr	r1, [r3, #4]
 80096e4:	460b      	mov	r3, r1
 80096e6:	009b      	lsls	r3, r3, #2
 80096e8:	440b      	add	r3, r1
 80096ea:	0099      	lsls	r1, r3, #2
 80096ec:	440b      	add	r3, r1
 80096ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80096f2:	3301      	adds	r3, #1
 80096f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	bf0c      	ite	eq
 80096fc:	2301      	moveq	r3, #1
 80096fe:	2300      	movne	r3, #0
 8009700:	b2db      	uxtb	r3, r3
 8009702:	2b00      	cmp	r3, #0
 8009704:	d001      	beq.n	800970a <HAL_I2C_Init+0x196>
 8009706:	2301      	movs	r3, #1
 8009708:	e022      	b.n	8009750 <HAL_I2C_Init+0x1dc>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	689b      	ldr	r3, [r3, #8]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d10e      	bne.n	8009730 <HAL_I2C_Init+0x1bc>
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	1e58      	subs	r0, r3, #1
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6859      	ldr	r1, [r3, #4]
 800971a:	460b      	mov	r3, r1
 800971c:	005b      	lsls	r3, r3, #1
 800971e:	440b      	add	r3, r1
 8009720:	fbb0 f3f3 	udiv	r3, r0, r3
 8009724:	3301      	adds	r3, #1
 8009726:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800972a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800972e:	e00f      	b.n	8009750 <HAL_I2C_Init+0x1dc>
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	1e58      	subs	r0, r3, #1
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6859      	ldr	r1, [r3, #4]
 8009738:	460b      	mov	r3, r1
 800973a:	009b      	lsls	r3, r3, #2
 800973c:	440b      	add	r3, r1
 800973e:	0099      	lsls	r1, r3, #2
 8009740:	440b      	add	r3, r1
 8009742:	fbb0 f3f3 	udiv	r3, r0, r3
 8009746:	3301      	adds	r3, #1
 8009748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800974c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009750:	6879      	ldr	r1, [r7, #4]
 8009752:	6809      	ldr	r1, [r1, #0]
 8009754:	4313      	orrs	r3, r2
 8009756:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	69da      	ldr	r2, [r3, #28]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6a1b      	ldr	r3, [r3, #32]
 800976a:	431a      	orrs	r2, r3
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	430a      	orrs	r2, r1
 8009772:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	689b      	ldr	r3, [r3, #8]
 800977a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800977e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009782:	687a      	ldr	r2, [r7, #4]
 8009784:	6911      	ldr	r1, [r2, #16]
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	68d2      	ldr	r2, [r2, #12]
 800978a:	4311      	orrs	r1, r2
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	6812      	ldr	r2, [r2, #0]
 8009790:	430b      	orrs	r3, r1
 8009792:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	68db      	ldr	r3, [r3, #12]
 800979a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	695a      	ldr	r2, [r3, #20]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	699b      	ldr	r3, [r3, #24]
 80097a6:	431a      	orrs	r2, r3
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	430a      	orrs	r2, r1
 80097ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f042 0201 	orr.w	r2, r2, #1
 80097be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2220      	movs	r2, #32
 80097ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2200      	movs	r2, #0
 80097d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2200      	movs	r2, #0
 80097d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80097dc:	2300      	movs	r3, #0
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3710      	adds	r7, #16
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop
 80097e8:	000186a0 	.word	0x000186a0
 80097ec:	001e847f 	.word	0x001e847f
 80097f0:	003d08ff 	.word	0x003d08ff
 80097f4:	431bde83 	.word	0x431bde83
 80097f8:	10624dd3 	.word	0x10624dd3

080097fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b088      	sub	sp, #32
 8009800:	af02      	add	r7, sp, #8
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	607a      	str	r2, [r7, #4]
 8009806:	461a      	mov	r2, r3
 8009808:	460b      	mov	r3, r1
 800980a:	817b      	strh	r3, [r7, #10]
 800980c:	4613      	mov	r3, r2
 800980e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009810:	f7fe ffa6 	bl	8008760 <HAL_GetTick>
 8009814:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800981c:	b2db      	uxtb	r3, r3
 800981e:	2b20      	cmp	r3, #32
 8009820:	f040 80e0 	bne.w	80099e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	9300      	str	r3, [sp, #0]
 8009828:	2319      	movs	r3, #25
 800982a:	2201      	movs	r2, #1
 800982c:	4970      	ldr	r1, [pc, #448]	; (80099f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800982e:	68f8      	ldr	r0, [r7, #12]
 8009830:	f000 fc7e 	bl	800a130 <I2C_WaitOnFlagUntilTimeout>
 8009834:	4603      	mov	r3, r0
 8009836:	2b00      	cmp	r3, #0
 8009838:	d001      	beq.n	800983e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800983a:	2302      	movs	r3, #2
 800983c:	e0d3      	b.n	80099e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009844:	2b01      	cmp	r3, #1
 8009846:	d101      	bne.n	800984c <HAL_I2C_Master_Transmit+0x50>
 8009848:	2302      	movs	r3, #2
 800984a:	e0cc      	b.n	80099e6 <HAL_I2C_Master_Transmit+0x1ea>
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2201      	movs	r2, #1
 8009850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f003 0301 	and.w	r3, r3, #1
 800985e:	2b01      	cmp	r3, #1
 8009860:	d007      	beq.n	8009872 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	681a      	ldr	r2, [r3, #0]
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f042 0201 	orr.w	r2, r2, #1
 8009870:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	681a      	ldr	r2, [r3, #0]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009880:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2221      	movs	r2, #33	; 0x21
 8009886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2210      	movs	r2, #16
 800988e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2200      	movs	r2, #0
 8009896:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	687a      	ldr	r2, [r7, #4]
 800989c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	893a      	ldrh	r2, [r7, #8]
 80098a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098a8:	b29a      	uxth	r2, r3
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	4a50      	ldr	r2, [pc, #320]	; (80099f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80098b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80098b4:	8979      	ldrh	r1, [r7, #10]
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	6a3a      	ldr	r2, [r7, #32]
 80098ba:	68f8      	ldr	r0, [r7, #12]
 80098bc:	f000 fae8 	bl	8009e90 <I2C_MasterRequestWrite>
 80098c0:	4603      	mov	r3, r0
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d001      	beq.n	80098ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80098c6:	2301      	movs	r3, #1
 80098c8:	e08d      	b.n	80099e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098ca:	2300      	movs	r3, #0
 80098cc:	613b      	str	r3, [r7, #16]
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	695b      	ldr	r3, [r3, #20]
 80098d4:	613b      	str	r3, [r7, #16]
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	699b      	ldr	r3, [r3, #24]
 80098dc:	613b      	str	r3, [r7, #16]
 80098de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80098e0:	e066      	b.n	80099b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80098e2:	697a      	ldr	r2, [r7, #20]
 80098e4:	6a39      	ldr	r1, [r7, #32]
 80098e6:	68f8      	ldr	r0, [r7, #12]
 80098e8:	f000 fd3c 	bl	800a364 <I2C_WaitOnTXEFlagUntilTimeout>
 80098ec:	4603      	mov	r3, r0
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d00d      	beq.n	800990e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f6:	2b04      	cmp	r3, #4
 80098f8:	d107      	bne.n	800990a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009908:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	e06b      	b.n	80099e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009912:	781a      	ldrb	r2, [r3, #0]
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800991e:	1c5a      	adds	r2, r3, #1
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009928:	b29b      	uxth	r3, r3
 800992a:	3b01      	subs	r3, #1
 800992c:	b29a      	uxth	r2, r3
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009936:	3b01      	subs	r3, #1
 8009938:	b29a      	uxth	r2, r3
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	695b      	ldr	r3, [r3, #20]
 8009944:	f003 0304 	and.w	r3, r3, #4
 8009948:	2b04      	cmp	r3, #4
 800994a:	d11b      	bne.n	8009984 <HAL_I2C_Master_Transmit+0x188>
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009950:	2b00      	cmp	r3, #0
 8009952:	d017      	beq.n	8009984 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009958:	781a      	ldrb	r2, [r3, #0]
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009964:	1c5a      	adds	r2, r3, #1
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800996e:	b29b      	uxth	r3, r3
 8009970:	3b01      	subs	r3, #1
 8009972:	b29a      	uxth	r2, r3
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800997c:	3b01      	subs	r3, #1
 800997e:	b29a      	uxth	r2, r3
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009984:	697a      	ldr	r2, [r7, #20]
 8009986:	6a39      	ldr	r1, [r7, #32]
 8009988:	68f8      	ldr	r0, [r7, #12]
 800998a:	f000 fd33 	bl	800a3f4 <I2C_WaitOnBTFFlagUntilTimeout>
 800998e:	4603      	mov	r3, r0
 8009990:	2b00      	cmp	r3, #0
 8009992:	d00d      	beq.n	80099b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009998:	2b04      	cmp	r3, #4
 800999a:	d107      	bne.n	80099ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	681a      	ldr	r2, [r3, #0]
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80099ac:	2301      	movs	r3, #1
 80099ae:	e01a      	b.n	80099e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d194      	bne.n	80098e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	681a      	ldr	r2, [r3, #0]
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2220      	movs	r2, #32
 80099cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2200      	movs	r2, #0
 80099d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2200      	movs	r2, #0
 80099dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80099e0:	2300      	movs	r3, #0
 80099e2:	e000      	b.n	80099e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80099e4:	2302      	movs	r3, #2
  }
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3718      	adds	r7, #24
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	00100002 	.word	0x00100002
 80099f4:	ffff0000 	.word	0xffff0000

080099f8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b08c      	sub	sp, #48	; 0x30
 80099fc:	af02      	add	r7, sp, #8
 80099fe:	60f8      	str	r0, [r7, #12]
 8009a00:	607a      	str	r2, [r7, #4]
 8009a02:	461a      	mov	r2, r3
 8009a04:	460b      	mov	r3, r1
 8009a06:	817b      	strh	r3, [r7, #10]
 8009a08:	4613      	mov	r3, r2
 8009a0a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009a0c:	f7fe fea8 	bl	8008760 <HAL_GetTick>
 8009a10:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	2b20      	cmp	r3, #32
 8009a1c:	f040 8217 	bne.w	8009e4e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a22:	9300      	str	r3, [sp, #0]
 8009a24:	2319      	movs	r3, #25
 8009a26:	2201      	movs	r2, #1
 8009a28:	497c      	ldr	r1, [pc, #496]	; (8009c1c <HAL_I2C_Master_Receive+0x224>)
 8009a2a:	68f8      	ldr	r0, [r7, #12]
 8009a2c:	f000 fb80 	bl	800a130 <I2C_WaitOnFlagUntilTimeout>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d001      	beq.n	8009a3a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8009a36:	2302      	movs	r3, #2
 8009a38:	e20a      	b.n	8009e50 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d101      	bne.n	8009a48 <HAL_I2C_Master_Receive+0x50>
 8009a44:	2302      	movs	r3, #2
 8009a46:	e203      	b.n	8009e50 <HAL_I2C_Master_Receive+0x458>
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f003 0301 	and.w	r3, r3, #1
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d007      	beq.n	8009a6e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f042 0201 	orr.w	r2, r2, #1
 8009a6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	681a      	ldr	r2, [r3, #0]
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009a7c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2222      	movs	r2, #34	; 0x22
 8009a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2210      	movs	r2, #16
 8009a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2200      	movs	r2, #0
 8009a92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	687a      	ldr	r2, [r7, #4]
 8009a98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	893a      	ldrh	r2, [r7, #8]
 8009a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009aa4:	b29a      	uxth	r2, r3
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	4a5c      	ldr	r2, [pc, #368]	; (8009c20 <HAL_I2C_Master_Receive+0x228>)
 8009aae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009ab0:	8979      	ldrh	r1, [r7, #10]
 8009ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ab6:	68f8      	ldr	r0, [r7, #12]
 8009ab8:	f000 fa6c 	bl	8009f94 <I2C_MasterRequestRead>
 8009abc:	4603      	mov	r3, r0
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d001      	beq.n	8009ac6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	e1c4      	b.n	8009e50 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d113      	bne.n	8009af6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ace:	2300      	movs	r3, #0
 8009ad0:	623b      	str	r3, [r7, #32]
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	695b      	ldr	r3, [r3, #20]
 8009ad8:	623b      	str	r3, [r7, #32]
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	699b      	ldr	r3, [r3, #24]
 8009ae0:	623b      	str	r3, [r7, #32]
 8009ae2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	681a      	ldr	r2, [r3, #0]
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009af2:	601a      	str	r2, [r3, #0]
 8009af4:	e198      	b.n	8009e28 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d11b      	bne.n	8009b36 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b0e:	2300      	movs	r3, #0
 8009b10:	61fb      	str	r3, [r7, #28]
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	695b      	ldr	r3, [r3, #20]
 8009b18:	61fb      	str	r3, [r7, #28]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	699b      	ldr	r3, [r3, #24]
 8009b20:	61fb      	str	r3, [r7, #28]
 8009b22:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	681a      	ldr	r2, [r3, #0]
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b32:	601a      	str	r2, [r3, #0]
 8009b34:	e178      	b.n	8009e28 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b3a:	2b02      	cmp	r3, #2
 8009b3c:	d11b      	bne.n	8009b76 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b4c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	681a      	ldr	r2, [r3, #0]
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b5e:	2300      	movs	r3, #0
 8009b60:	61bb      	str	r3, [r7, #24]
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	695b      	ldr	r3, [r3, #20]
 8009b68:	61bb      	str	r3, [r7, #24]
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	699b      	ldr	r3, [r3, #24]
 8009b70:	61bb      	str	r3, [r7, #24]
 8009b72:	69bb      	ldr	r3, [r7, #24]
 8009b74:	e158      	b.n	8009e28 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009b84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b86:	2300      	movs	r3, #0
 8009b88:	617b      	str	r3, [r7, #20]
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	695b      	ldr	r3, [r3, #20]
 8009b90:	617b      	str	r3, [r7, #20]
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	699b      	ldr	r3, [r3, #24]
 8009b98:	617b      	str	r3, [r7, #20]
 8009b9a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009b9c:	e144      	b.n	8009e28 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ba2:	2b03      	cmp	r3, #3
 8009ba4:	f200 80f1 	bhi.w	8009d8a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d123      	bne.n	8009bf8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009bb4:	68f8      	ldr	r0, [r7, #12]
 8009bb6:	f000 fc65 	bl	800a484 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d001      	beq.n	8009bc4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	e145      	b.n	8009e50 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	691a      	ldr	r2, [r3, #16]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bce:	b2d2      	uxtb	r2, r2
 8009bd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd6:	1c5a      	adds	r2, r3, #1
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009be0:	3b01      	subs	r3, #1
 8009be2:	b29a      	uxth	r2, r3
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	3b01      	subs	r3, #1
 8009bf0:	b29a      	uxth	r2, r3
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009bf6:	e117      	b.n	8009e28 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bfc:	2b02      	cmp	r3, #2
 8009bfe:	d14e      	bne.n	8009c9e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c02:	9300      	str	r3, [sp, #0]
 8009c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c06:	2200      	movs	r2, #0
 8009c08:	4906      	ldr	r1, [pc, #24]	; (8009c24 <HAL_I2C_Master_Receive+0x22c>)
 8009c0a:	68f8      	ldr	r0, [r7, #12]
 8009c0c:	f000 fa90 	bl	800a130 <I2C_WaitOnFlagUntilTimeout>
 8009c10:	4603      	mov	r3, r0
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d008      	beq.n	8009c28 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8009c16:	2301      	movs	r3, #1
 8009c18:	e11a      	b.n	8009e50 <HAL_I2C_Master_Receive+0x458>
 8009c1a:	bf00      	nop
 8009c1c:	00100002 	.word	0x00100002
 8009c20:	ffff0000 	.word	0xffff0000
 8009c24:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	681a      	ldr	r2, [r3, #0]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	691a      	ldr	r2, [r3, #16]
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c42:	b2d2      	uxtb	r2, r2
 8009c44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c4a:	1c5a      	adds	r2, r3, #1
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c54:	3b01      	subs	r3, #1
 8009c56:	b29a      	uxth	r2, r3
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	3b01      	subs	r3, #1
 8009c64:	b29a      	uxth	r2, r3
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	691a      	ldr	r2, [r3, #16]
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c74:	b2d2      	uxtb	r2, r2
 8009c76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c7c:	1c5a      	adds	r2, r3, #1
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c86:	3b01      	subs	r3, #1
 8009c88:	b29a      	uxth	r2, r3
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	3b01      	subs	r3, #1
 8009c96:	b29a      	uxth	r2, r3
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009c9c:	e0c4      	b.n	8009e28 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca0:	9300      	str	r3, [sp, #0]
 8009ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	496c      	ldr	r1, [pc, #432]	; (8009e58 <HAL_I2C_Master_Receive+0x460>)
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	f000 fa41 	bl	800a130 <I2C_WaitOnFlagUntilTimeout>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d001      	beq.n	8009cb8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	e0cb      	b.n	8009e50 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	681a      	ldr	r2, [r3, #0]
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009cc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	691a      	ldr	r2, [r3, #16]
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd2:	b2d2      	uxtb	r2, r2
 8009cd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cda:	1c5a      	adds	r2, r3, #1
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ce4:	3b01      	subs	r3, #1
 8009ce6:	b29a      	uxth	r2, r3
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cf0:	b29b      	uxth	r3, r3
 8009cf2:	3b01      	subs	r3, #1
 8009cf4:	b29a      	uxth	r2, r3
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfc:	9300      	str	r3, [sp, #0]
 8009cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d00:	2200      	movs	r2, #0
 8009d02:	4955      	ldr	r1, [pc, #340]	; (8009e58 <HAL_I2C_Master_Receive+0x460>)
 8009d04:	68f8      	ldr	r0, [r7, #12]
 8009d06:	f000 fa13 	bl	800a130 <I2C_WaitOnFlagUntilTimeout>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d001      	beq.n	8009d14 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8009d10:	2301      	movs	r3, #1
 8009d12:	e09d      	b.n	8009e50 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	681a      	ldr	r2, [r3, #0]
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	691a      	ldr	r2, [r3, #16]
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d2e:	b2d2      	uxtb	r2, r2
 8009d30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d36:	1c5a      	adds	r2, r3, #1
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d40:	3b01      	subs	r3, #1
 8009d42:	b29a      	uxth	r2, r3
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	3b01      	subs	r3, #1
 8009d50:	b29a      	uxth	r2, r3
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	691a      	ldr	r2, [r3, #16]
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d60:	b2d2      	uxtb	r2, r2
 8009d62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d68:	1c5a      	adds	r2, r3, #1
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d72:	3b01      	subs	r3, #1
 8009d74:	b29a      	uxth	r2, r3
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	3b01      	subs	r3, #1
 8009d82:	b29a      	uxth	r2, r3
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009d88:	e04e      	b.n	8009e28 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009d8e:	68f8      	ldr	r0, [r7, #12]
 8009d90:	f000 fb78 	bl	800a484 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009d94:	4603      	mov	r3, r0
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d001      	beq.n	8009d9e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	e058      	b.n	8009e50 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	691a      	ldr	r2, [r3, #16]
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da8:	b2d2      	uxtb	r2, r2
 8009daa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db0:	1c5a      	adds	r2, r3, #1
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dba:	3b01      	subs	r3, #1
 8009dbc:	b29a      	uxth	r2, r3
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dc6:	b29b      	uxth	r3, r3
 8009dc8:	3b01      	subs	r3, #1
 8009dca:	b29a      	uxth	r2, r3
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	695b      	ldr	r3, [r3, #20]
 8009dd6:	f003 0304 	and.w	r3, r3, #4
 8009dda:	2b04      	cmp	r3, #4
 8009ddc:	d124      	bne.n	8009e28 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009de2:	2b03      	cmp	r3, #3
 8009de4:	d107      	bne.n	8009df6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	681a      	ldr	r2, [r3, #0]
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009df4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	691a      	ldr	r2, [r3, #16]
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e00:	b2d2      	uxtb	r2, r2
 8009e02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e08:	1c5a      	adds	r2, r3, #1
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e12:	3b01      	subs	r3, #1
 8009e14:	b29a      	uxth	r2, r3
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	3b01      	subs	r3, #1
 8009e22:	b29a      	uxth	r2, r3
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	f47f aeb6 	bne.w	8009b9e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	2220      	movs	r2, #32
 8009e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2200      	movs	r2, #0
 8009e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	e000      	b.n	8009e50 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8009e4e:	2302      	movs	r3, #2
  }
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3728      	adds	r7, #40	; 0x28
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}
 8009e58:	00010004 	.word	0x00010004

08009e5c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b083      	sub	sp, #12
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e6a:	b2db      	uxtb	r3, r3
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	370c      	adds	r7, #12
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr

08009e78 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b083      	sub	sp, #12
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	370c      	adds	r7, #12
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr

08009e90 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b088      	sub	sp, #32
 8009e94:	af02      	add	r7, sp, #8
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	607a      	str	r2, [r7, #4]
 8009e9a:	603b      	str	r3, [r7, #0]
 8009e9c:	460b      	mov	r3, r1
 8009e9e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	2b08      	cmp	r3, #8
 8009eaa:	d006      	beq.n	8009eba <I2C_MasterRequestWrite+0x2a>
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d003      	beq.n	8009eba <I2C_MasterRequestWrite+0x2a>
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009eb8:	d108      	bne.n	8009ecc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	681a      	ldr	r2, [r3, #0]
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ec8:	601a      	str	r2, [r3, #0]
 8009eca:	e00b      	b.n	8009ee4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ed0:	2b12      	cmp	r3, #18
 8009ed2:	d107      	bne.n	8009ee4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	681a      	ldr	r2, [r3, #0]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ee2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	9300      	str	r3, [sp, #0]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2200      	movs	r2, #0
 8009eec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009ef0:	68f8      	ldr	r0, [r7, #12]
 8009ef2:	f000 f91d 	bl	800a130 <I2C_WaitOnFlagUntilTimeout>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d00d      	beq.n	8009f18 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f0a:	d103      	bne.n	8009f14 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009f14:	2303      	movs	r3, #3
 8009f16:	e035      	b.n	8009f84 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	691b      	ldr	r3, [r3, #16]
 8009f1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f20:	d108      	bne.n	8009f34 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009f22:	897b      	ldrh	r3, [r7, #10]
 8009f24:	b2db      	uxtb	r3, r3
 8009f26:	461a      	mov	r2, r3
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009f30:	611a      	str	r2, [r3, #16]
 8009f32:	e01b      	b.n	8009f6c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009f34:	897b      	ldrh	r3, [r7, #10]
 8009f36:	11db      	asrs	r3, r3, #7
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	f003 0306 	and.w	r3, r3, #6
 8009f3e:	b2db      	uxtb	r3, r3
 8009f40:	f063 030f 	orn	r3, r3, #15
 8009f44:	b2da      	uxtb	r2, r3
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	490e      	ldr	r1, [pc, #56]	; (8009f8c <I2C_MasterRequestWrite+0xfc>)
 8009f52:	68f8      	ldr	r0, [r7, #12]
 8009f54:	f000 f966 	bl	800a224 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d001      	beq.n	8009f62 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e010      	b.n	8009f84 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009f62:	897b      	ldrh	r3, [r7, #10]
 8009f64:	b2da      	uxtb	r2, r3
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	4907      	ldr	r1, [pc, #28]	; (8009f90 <I2C_MasterRequestWrite+0x100>)
 8009f72:	68f8      	ldr	r0, [r7, #12]
 8009f74:	f000 f956 	bl	800a224 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d001      	beq.n	8009f82 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	e000      	b.n	8009f84 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009f82:	2300      	movs	r3, #0
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3718      	adds	r7, #24
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}
 8009f8c:	00010008 	.word	0x00010008
 8009f90:	00010002 	.word	0x00010002

08009f94 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b088      	sub	sp, #32
 8009f98:	af02      	add	r7, sp, #8
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	607a      	str	r2, [r7, #4]
 8009f9e:	603b      	str	r3, [r7, #0]
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	681a      	ldr	r2, [r3, #0]
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009fb8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	2b08      	cmp	r3, #8
 8009fbe:	d006      	beq.n	8009fce <I2C_MasterRequestRead+0x3a>
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	2b01      	cmp	r3, #1
 8009fc4:	d003      	beq.n	8009fce <I2C_MasterRequestRead+0x3a>
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009fcc:	d108      	bne.n	8009fe0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	681a      	ldr	r2, [r3, #0]
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009fdc:	601a      	str	r2, [r3, #0]
 8009fde:	e00b      	b.n	8009ff8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fe4:	2b11      	cmp	r3, #17
 8009fe6:	d107      	bne.n	8009ff8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	681a      	ldr	r2, [r3, #0]
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ff6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	9300      	str	r3, [sp, #0]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2200      	movs	r2, #0
 800a000:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a004:	68f8      	ldr	r0, [r7, #12]
 800a006:	f000 f893 	bl	800a130 <I2C_WaitOnFlagUntilTimeout>
 800a00a:	4603      	mov	r3, r0
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d00d      	beq.n	800a02c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a01a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a01e:	d103      	bne.n	800a028 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a026:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a028:	2303      	movs	r3, #3
 800a02a:	e079      	b.n	800a120 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	691b      	ldr	r3, [r3, #16]
 800a030:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a034:	d108      	bne.n	800a048 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a036:	897b      	ldrh	r3, [r7, #10]
 800a038:	b2db      	uxtb	r3, r3
 800a03a:	f043 0301 	orr.w	r3, r3, #1
 800a03e:	b2da      	uxtb	r2, r3
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	611a      	str	r2, [r3, #16]
 800a046:	e05f      	b.n	800a108 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a048:	897b      	ldrh	r3, [r7, #10]
 800a04a:	11db      	asrs	r3, r3, #7
 800a04c:	b2db      	uxtb	r3, r3
 800a04e:	f003 0306 	and.w	r3, r3, #6
 800a052:	b2db      	uxtb	r3, r3
 800a054:	f063 030f 	orn	r3, r3, #15
 800a058:	b2da      	uxtb	r2, r3
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	687a      	ldr	r2, [r7, #4]
 800a064:	4930      	ldr	r1, [pc, #192]	; (800a128 <I2C_MasterRequestRead+0x194>)
 800a066:	68f8      	ldr	r0, [r7, #12]
 800a068:	f000 f8dc 	bl	800a224 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a06c:	4603      	mov	r3, r0
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d001      	beq.n	800a076 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800a072:	2301      	movs	r3, #1
 800a074:	e054      	b.n	800a120 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a076:	897b      	ldrh	r3, [r7, #10]
 800a078:	b2da      	uxtb	r2, r3
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	687a      	ldr	r2, [r7, #4]
 800a084:	4929      	ldr	r1, [pc, #164]	; (800a12c <I2C_MasterRequestRead+0x198>)
 800a086:	68f8      	ldr	r0, [r7, #12]
 800a088:	f000 f8cc 	bl	800a224 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a08c:	4603      	mov	r3, r0
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d001      	beq.n	800a096 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800a092:	2301      	movs	r3, #1
 800a094:	e044      	b.n	800a120 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a096:	2300      	movs	r3, #0
 800a098:	613b      	str	r3, [r7, #16]
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	695b      	ldr	r3, [r3, #20]
 800a0a0:	613b      	str	r3, [r7, #16]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	699b      	ldr	r3, [r3, #24]
 800a0a8:	613b      	str	r3, [r7, #16]
 800a0aa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	681a      	ldr	r2, [r3, #0]
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a0ba:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	9300      	str	r3, [sp, #0]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a0c8:	68f8      	ldr	r0, [r7, #12]
 800a0ca:	f000 f831 	bl	800a130 <I2C_WaitOnFlagUntilTimeout>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d00d      	beq.n	800a0f0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0e2:	d103      	bne.n	800a0ec <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0ea:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800a0ec:	2303      	movs	r3, #3
 800a0ee:	e017      	b.n	800a120 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800a0f0:	897b      	ldrh	r3, [r7, #10]
 800a0f2:	11db      	asrs	r3, r3, #7
 800a0f4:	b2db      	uxtb	r3, r3
 800a0f6:	f003 0306 	and.w	r3, r3, #6
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	f063 030e 	orn	r3, r3, #14
 800a100:	b2da      	uxtb	r2, r3
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	687a      	ldr	r2, [r7, #4]
 800a10c:	4907      	ldr	r1, [pc, #28]	; (800a12c <I2C_MasterRequestRead+0x198>)
 800a10e:	68f8      	ldr	r0, [r7, #12]
 800a110:	f000 f888 	bl	800a224 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a114:	4603      	mov	r3, r0
 800a116:	2b00      	cmp	r3, #0
 800a118:	d001      	beq.n	800a11e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800a11a:	2301      	movs	r3, #1
 800a11c:	e000      	b.n	800a120 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800a11e:	2300      	movs	r3, #0
}
 800a120:	4618      	mov	r0, r3
 800a122:	3718      	adds	r7, #24
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}
 800a128:	00010008 	.word	0x00010008
 800a12c:	00010002 	.word	0x00010002

0800a130 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b084      	sub	sp, #16
 800a134:	af00      	add	r7, sp, #0
 800a136:	60f8      	str	r0, [r7, #12]
 800a138:	60b9      	str	r1, [r7, #8]
 800a13a:	603b      	str	r3, [r7, #0]
 800a13c:	4613      	mov	r3, r2
 800a13e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a140:	e048      	b.n	800a1d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a148:	d044      	beq.n	800a1d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a14a:	f7fe fb09 	bl	8008760 <HAL_GetTick>
 800a14e:	4602      	mov	r2, r0
 800a150:	69bb      	ldr	r3, [r7, #24]
 800a152:	1ad3      	subs	r3, r2, r3
 800a154:	683a      	ldr	r2, [r7, #0]
 800a156:	429a      	cmp	r2, r3
 800a158:	d302      	bcc.n	800a160 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d139      	bne.n	800a1d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	0c1b      	lsrs	r3, r3, #16
 800a164:	b2db      	uxtb	r3, r3
 800a166:	2b01      	cmp	r3, #1
 800a168:	d10d      	bne.n	800a186 <I2C_WaitOnFlagUntilTimeout+0x56>
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	695b      	ldr	r3, [r3, #20]
 800a170:	43da      	mvns	r2, r3
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	4013      	ands	r3, r2
 800a176:	b29b      	uxth	r3, r3
 800a178:	2b00      	cmp	r3, #0
 800a17a:	bf0c      	ite	eq
 800a17c:	2301      	moveq	r3, #1
 800a17e:	2300      	movne	r3, #0
 800a180:	b2db      	uxtb	r3, r3
 800a182:	461a      	mov	r2, r3
 800a184:	e00c      	b.n	800a1a0 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	699b      	ldr	r3, [r3, #24]
 800a18c:	43da      	mvns	r2, r3
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	4013      	ands	r3, r2
 800a192:	b29b      	uxth	r3, r3
 800a194:	2b00      	cmp	r3, #0
 800a196:	bf0c      	ite	eq
 800a198:	2301      	moveq	r3, #1
 800a19a:	2300      	movne	r3, #0
 800a19c:	b2db      	uxtb	r3, r3
 800a19e:	461a      	mov	r2, r3
 800a1a0:	79fb      	ldrb	r3, [r7, #7]
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d116      	bne.n	800a1d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2220      	movs	r2, #32
 800a1b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c0:	f043 0220 	orr.w	r2, r3, #32
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	e023      	b.n	800a21c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	0c1b      	lsrs	r3, r3, #16
 800a1d8:	b2db      	uxtb	r3, r3
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d10d      	bne.n	800a1fa <I2C_WaitOnFlagUntilTimeout+0xca>
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	695b      	ldr	r3, [r3, #20]
 800a1e4:	43da      	mvns	r2, r3
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	4013      	ands	r3, r2
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	bf0c      	ite	eq
 800a1f0:	2301      	moveq	r3, #1
 800a1f2:	2300      	movne	r3, #0
 800a1f4:	b2db      	uxtb	r3, r3
 800a1f6:	461a      	mov	r2, r3
 800a1f8:	e00c      	b.n	800a214 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	699b      	ldr	r3, [r3, #24]
 800a200:	43da      	mvns	r2, r3
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	4013      	ands	r3, r2
 800a206:	b29b      	uxth	r3, r3
 800a208:	2b00      	cmp	r3, #0
 800a20a:	bf0c      	ite	eq
 800a20c:	2301      	moveq	r3, #1
 800a20e:	2300      	movne	r3, #0
 800a210:	b2db      	uxtb	r3, r3
 800a212:	461a      	mov	r2, r3
 800a214:	79fb      	ldrb	r3, [r7, #7]
 800a216:	429a      	cmp	r2, r3
 800a218:	d093      	beq.n	800a142 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a21a:	2300      	movs	r3, #0
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3710      	adds	r7, #16
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b084      	sub	sp, #16
 800a228:	af00      	add	r7, sp, #0
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	60b9      	str	r1, [r7, #8]
 800a22e:	607a      	str	r2, [r7, #4]
 800a230:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a232:	e071      	b.n	800a318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	695b      	ldr	r3, [r3, #20]
 800a23a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a23e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a242:	d123      	bne.n	800a28c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	681a      	ldr	r2, [r3, #0]
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a252:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a25c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2200      	movs	r2, #0
 800a262:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2220      	movs	r2, #32
 800a268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2200      	movs	r2, #0
 800a270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a278:	f043 0204 	orr.w	r2, r3, #4
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	2200      	movs	r2, #0
 800a284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a288:	2301      	movs	r3, #1
 800a28a:	e067      	b.n	800a35c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a292:	d041      	beq.n	800a318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a294:	f7fe fa64 	bl	8008760 <HAL_GetTick>
 800a298:	4602      	mov	r2, r0
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	1ad3      	subs	r3, r2, r3
 800a29e:	687a      	ldr	r2, [r7, #4]
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d302      	bcc.n	800a2aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d136      	bne.n	800a318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	0c1b      	lsrs	r3, r3, #16
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d10c      	bne.n	800a2ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	695b      	ldr	r3, [r3, #20]
 800a2ba:	43da      	mvns	r2, r3
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	4013      	ands	r3, r2
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	bf14      	ite	ne
 800a2c6:	2301      	movne	r3, #1
 800a2c8:	2300      	moveq	r3, #0
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	e00b      	b.n	800a2e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	699b      	ldr	r3, [r3, #24]
 800a2d4:	43da      	mvns	r2, r3
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	4013      	ands	r3, r2
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	bf14      	ite	ne
 800a2e0:	2301      	movne	r3, #1
 800a2e2:	2300      	moveq	r3, #0
 800a2e4:	b2db      	uxtb	r3, r3
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d016      	beq.n	800a318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	2220      	movs	r2, #32
 800a2f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a304:	f043 0220 	orr.w	r2, r3, #32
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2200      	movs	r2, #0
 800a310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a314:	2301      	movs	r3, #1
 800a316:	e021      	b.n	800a35c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	0c1b      	lsrs	r3, r3, #16
 800a31c:	b2db      	uxtb	r3, r3
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d10c      	bne.n	800a33c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	695b      	ldr	r3, [r3, #20]
 800a328:	43da      	mvns	r2, r3
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	4013      	ands	r3, r2
 800a32e:	b29b      	uxth	r3, r3
 800a330:	2b00      	cmp	r3, #0
 800a332:	bf14      	ite	ne
 800a334:	2301      	movne	r3, #1
 800a336:	2300      	moveq	r3, #0
 800a338:	b2db      	uxtb	r3, r3
 800a33a:	e00b      	b.n	800a354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	699b      	ldr	r3, [r3, #24]
 800a342:	43da      	mvns	r2, r3
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	4013      	ands	r3, r2
 800a348:	b29b      	uxth	r3, r3
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	bf14      	ite	ne
 800a34e:	2301      	movne	r3, #1
 800a350:	2300      	moveq	r3, #0
 800a352:	b2db      	uxtb	r3, r3
 800a354:	2b00      	cmp	r3, #0
 800a356:	f47f af6d 	bne.w	800a234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a35a:	2300      	movs	r3, #0
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3710      	adds	r7, #16
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b084      	sub	sp, #16
 800a368:	af00      	add	r7, sp, #0
 800a36a:	60f8      	str	r0, [r7, #12]
 800a36c:	60b9      	str	r1, [r7, #8]
 800a36e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a370:	e034      	b.n	800a3dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a372:	68f8      	ldr	r0, [r7, #12]
 800a374:	f000 f8e3 	bl	800a53e <I2C_IsAcknowledgeFailed>
 800a378:	4603      	mov	r3, r0
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d001      	beq.n	800a382 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a37e:	2301      	movs	r3, #1
 800a380:	e034      	b.n	800a3ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a388:	d028      	beq.n	800a3dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a38a:	f7fe f9e9 	bl	8008760 <HAL_GetTick>
 800a38e:	4602      	mov	r2, r0
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	1ad3      	subs	r3, r2, r3
 800a394:	68ba      	ldr	r2, [r7, #8]
 800a396:	429a      	cmp	r2, r3
 800a398:	d302      	bcc.n	800a3a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d11d      	bne.n	800a3dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	695b      	ldr	r3, [r3, #20]
 800a3a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3aa:	2b80      	cmp	r3, #128	; 0x80
 800a3ac:	d016      	beq.n	800a3dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	2220      	movs	r2, #32
 800a3b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3c8:	f043 0220 	orr.w	r2, r3, #32
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	e007      	b.n	800a3ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	695b      	ldr	r3, [r3, #20]
 800a3e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3e6:	2b80      	cmp	r3, #128	; 0x80
 800a3e8:	d1c3      	bne.n	800a372 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a3ea:	2300      	movs	r3, #0
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3710      	adds	r7, #16
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}

0800a3f4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	60f8      	str	r0, [r7, #12]
 800a3fc:	60b9      	str	r1, [r7, #8]
 800a3fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a400:	e034      	b.n	800a46c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a402:	68f8      	ldr	r0, [r7, #12]
 800a404:	f000 f89b 	bl	800a53e <I2C_IsAcknowledgeFailed>
 800a408:	4603      	mov	r3, r0
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d001      	beq.n	800a412 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a40e:	2301      	movs	r3, #1
 800a410:	e034      	b.n	800a47c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a418:	d028      	beq.n	800a46c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a41a:	f7fe f9a1 	bl	8008760 <HAL_GetTick>
 800a41e:	4602      	mov	r2, r0
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	1ad3      	subs	r3, r2, r3
 800a424:	68ba      	ldr	r2, [r7, #8]
 800a426:	429a      	cmp	r2, r3
 800a428:	d302      	bcc.n	800a430 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d11d      	bne.n	800a46c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	695b      	ldr	r3, [r3, #20]
 800a436:	f003 0304 	and.w	r3, r3, #4
 800a43a:	2b04      	cmp	r3, #4
 800a43c:	d016      	beq.n	800a46c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2200      	movs	r2, #0
 800a442:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2220      	movs	r2, #32
 800a448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2200      	movs	r2, #0
 800a450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a458:	f043 0220 	orr.w	r2, r3, #32
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2200      	movs	r2, #0
 800a464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a468:	2301      	movs	r3, #1
 800a46a:	e007      	b.n	800a47c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	695b      	ldr	r3, [r3, #20]
 800a472:	f003 0304 	and.w	r3, r3, #4
 800a476:	2b04      	cmp	r3, #4
 800a478:	d1c3      	bne.n	800a402 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a47a:	2300      	movs	r3, #0
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3710      	adds	r7, #16
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	60b9      	str	r1, [r7, #8]
 800a48e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a490:	e049      	b.n	800a526 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	695b      	ldr	r3, [r3, #20]
 800a498:	f003 0310 	and.w	r3, r3, #16
 800a49c:	2b10      	cmp	r3, #16
 800a49e:	d119      	bne.n	800a4d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f06f 0210 	mvn.w	r2, #16
 800a4a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2220      	movs	r2, #32
 800a4b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	e030      	b.n	800a536 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4d4:	f7fe f944 	bl	8008760 <HAL_GetTick>
 800a4d8:	4602      	mov	r2, r0
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	1ad3      	subs	r3, r2, r3
 800a4de:	68ba      	ldr	r2, [r7, #8]
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d302      	bcc.n	800a4ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d11d      	bne.n	800a526 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	695b      	ldr	r3, [r3, #20]
 800a4f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4f4:	2b40      	cmp	r3, #64	; 0x40
 800a4f6:	d016      	beq.n	800a526 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	2220      	movs	r2, #32
 800a502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2200      	movs	r2, #0
 800a50a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a512:	f043 0220 	orr.w	r2, r3, #32
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	2200      	movs	r2, #0
 800a51e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a522:	2301      	movs	r3, #1
 800a524:	e007      	b.n	800a536 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	695b      	ldr	r3, [r3, #20]
 800a52c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a530:	2b40      	cmp	r3, #64	; 0x40
 800a532:	d1ae      	bne.n	800a492 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a534:	2300      	movs	r3, #0
}
 800a536:	4618      	mov	r0, r3
 800a538:	3710      	adds	r7, #16
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}

0800a53e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a53e:	b480      	push	{r7}
 800a540:	b083      	sub	sp, #12
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	695b      	ldr	r3, [r3, #20]
 800a54c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a554:	d11b      	bne.n	800a58e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a55e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2200      	movs	r2, #0
 800a564:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2220      	movs	r2, #32
 800a56a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2200      	movs	r2, #0
 800a572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a57a:	f043 0204 	orr.w	r2, r3, #4
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2200      	movs	r2, #0
 800a586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a58a:	2301      	movs	r3, #1
 800a58c:	e000      	b.n	800a590 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a58e:	2300      	movs	r3, #0
}
 800a590:	4618      	mov	r0, r3
 800a592:	370c      	adds	r7, #12
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr

0800a59c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b083      	sub	sp, #12
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5ac:	b2db      	uxtb	r3, r3
 800a5ae:	2b20      	cmp	r3, #32
 800a5b0:	d129      	bne.n	800a606 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2224      	movs	r2, #36	; 0x24
 800a5b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f022 0201 	bic.w	r2, r2, #1
 800a5c8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f022 0210 	bic.w	r2, r2, #16
 800a5d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	683a      	ldr	r2, [r7, #0]
 800a5e6:	430a      	orrs	r2, r1
 800a5e8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	681a      	ldr	r2, [r3, #0]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f042 0201 	orr.w	r2, r2, #1
 800a5f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2220      	movs	r2, #32
 800a5fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a602:	2300      	movs	r3, #0
 800a604:	e000      	b.n	800a608 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800a606:	2302      	movs	r3, #2
  }
}
 800a608:	4618      	mov	r0, r3
 800a60a:	370c      	adds	r7, #12
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr

0800a614 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a614:	b480      	push	{r7}
 800a616:	b085      	sub	sp, #20
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800a61e:	2300      	movs	r3, #0
 800a620:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	2b20      	cmp	r3, #32
 800a62c:	d12a      	bne.n	800a684 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2224      	movs	r2, #36	; 0x24
 800a632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	681a      	ldr	r2, [r3, #0]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f022 0201 	bic.w	r2, r2, #1
 800a644:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a64c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800a64e:	89fb      	ldrh	r3, [r7, #14]
 800a650:	f023 030f 	bic.w	r3, r3, #15
 800a654:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	b29a      	uxth	r2, r3
 800a65a:	89fb      	ldrh	r3, [r7, #14]
 800a65c:	4313      	orrs	r3, r2
 800a65e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	89fa      	ldrh	r2, [r7, #14]
 800a666:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	681a      	ldr	r2, [r3, #0]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f042 0201 	orr.w	r2, r2, #1
 800a676:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2220      	movs	r2, #32
 800a67c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a680:	2300      	movs	r3, #0
 800a682:	e000      	b.n	800a686 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800a684:	2302      	movs	r3, #2
  }
}
 800a686:	4618      	mov	r0, r3
 800a688:	3714      	adds	r7, #20
 800a68a:	46bd      	mov	sp, r7
 800a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a690:	4770      	bx	lr
	...

0800a694 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b086      	sub	sp, #24
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d101      	bne.n	800a6a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	e267      	b.n	800ab76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f003 0301 	and.w	r3, r3, #1
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d075      	beq.n	800a79e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a6b2:	4b88      	ldr	r3, [pc, #544]	; (800a8d4 <HAL_RCC_OscConfig+0x240>)
 800a6b4:	689b      	ldr	r3, [r3, #8]
 800a6b6:	f003 030c 	and.w	r3, r3, #12
 800a6ba:	2b04      	cmp	r3, #4
 800a6bc:	d00c      	beq.n	800a6d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a6be:	4b85      	ldr	r3, [pc, #532]	; (800a8d4 <HAL_RCC_OscConfig+0x240>)
 800a6c0:	689b      	ldr	r3, [r3, #8]
 800a6c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a6c6:	2b08      	cmp	r3, #8
 800a6c8:	d112      	bne.n	800a6f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a6ca:	4b82      	ldr	r3, [pc, #520]	; (800a8d4 <HAL_RCC_OscConfig+0x240>)
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a6d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a6d6:	d10b      	bne.n	800a6f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a6d8:	4b7e      	ldr	r3, [pc, #504]	; (800a8d4 <HAL_RCC_OscConfig+0x240>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d05b      	beq.n	800a79c <HAL_RCC_OscConfig+0x108>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	685b      	ldr	r3, [r3, #4]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d157      	bne.n	800a79c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	e242      	b.n	800ab76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6f8:	d106      	bne.n	800a708 <HAL_RCC_OscConfig+0x74>
 800a6fa:	4b76      	ldr	r3, [pc, #472]	; (800a8d4 <HAL_RCC_OscConfig+0x240>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	4a75      	ldr	r2, [pc, #468]	; (800a8d4 <HAL_RCC_OscConfig+0x240>)
 800a700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a704:	6013      	str	r3, [r2, #0]
 800a706:	e01d      	b.n	800a744 <HAL_RCC_OscConfig+0xb0>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	685b      	ldr	r3, [r3, #4]
 800a70c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a710:	d10c      	bne.n	800a72c <HAL_RCC_OscConfig+0x98>
 800a712:	4b70      	ldr	r3, [pc, #448]	; (800a8d4 <HAL_RCC_OscConfig+0x240>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	4a6f      	ldr	r2, [pc, #444]	; (800a8d4 <HAL_RCC_OscConfig+0x240>)
 800a718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a71c:	6013      	str	r3, [r2, #0]
 800a71e:	4b6d      	ldr	r3, [pc, #436]	; (800a8d4 <HAL_RCC_OscConfig+0x240>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4a6c      	ldr	r2, [pc, #432]	; (800a8d4 <HAL_RCC_OscConfig+0x240>)
 800a724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a728:	6013      	str	r3, [r2, #0]
 800a72a:	e00b      	b.n	800a744 <HAL_RCC_OscConfig+0xb0>
 800a72c:	4b69      	ldr	r3, [pc, #420]	; (800a8d4 <HAL_RCC_OscConfig+0x240>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4a68      	ldr	r2, [pc, #416]	; (800a8d4 <HAL_RCC_OscConfig+0x240>)
 800a732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a736:	6013      	str	r3, [r2, #0]
 800a738:	4b66      	ldr	r3, [pc, #408]	; (800a8d4 <HAL_RCC_OscConfig+0x240>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	4a65      	ldr	r2, [pc, #404]	; (800a8d4 <HAL_RCC_OscConfig+0x240>)
 800a73e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a742:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	685b      	ldr	r3, [r3, #4]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d013      	beq.n	800a774 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a74c:	f7fe f808 	bl	8008760 <HAL_GetTick>
 800a750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a752:	e008      	b.n	800a766 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a754:	f7fe f804 	bl	8008760 <HAL_GetTick>
 800a758:	4602      	mov	r2, r0
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	1ad3      	subs	r3, r2, r3
 800a75e:	2b64      	cmp	r3, #100	; 0x64
 800a760:	d901      	bls.n	800a766 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a762:	2303      	movs	r3, #3
 800a764:	e207      	b.n	800ab76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a766:	4b5b      	ldr	r3, [pc, #364]	; (800a8d4 <HAL_RCC_OscConfig+0x240>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d0f0      	beq.n	800a754 <HAL_RCC_OscConfig+0xc0>
 800a772:	e014      	b.n	800a79e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a774:	f7fd fff4 	bl	8008760 <HAL_GetTick>
 800a778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a77a:	e008      	b.n	800a78e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a77c:	f7fd fff0 	bl	8008760 <HAL_GetTick>
 800a780:	4602      	mov	r2, r0
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	1ad3      	subs	r3, r2, r3
 800a786:	2b64      	cmp	r3, #100	; 0x64
 800a788:	d901      	bls.n	800a78e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a78a:	2303      	movs	r3, #3
 800a78c:	e1f3      	b.n	800ab76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a78e:	4b51      	ldr	r3, [pc, #324]	; (800a8d4 <HAL_RCC_OscConfig+0x240>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a796:	2b00      	cmp	r3, #0
 800a798:	d1f0      	bne.n	800a77c <HAL_RCC_OscConfig+0xe8>
 800a79a:	e000      	b.n	800a79e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a79c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f003 0302 	and.w	r3, r3, #2
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d063      	beq.n	800a872 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a7aa:	4b4a      	ldr	r3, [pc, #296]	; (800a8d4 <HAL_RCC_OscConfig+0x240>)
 800a7ac:	689b      	ldr	r3, [r3, #8]
 800a7ae:	f003 030c 	and.w	r3, r3, #12
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d00b      	beq.n	800a7ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a7b6:	4b47      	ldr	r3, [pc, #284]	; (800a8d4 <HAL_RCC_OscConfig+0x240>)
 800a7b8:	689b      	ldr	r3, [r3, #8]
 800a7ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a7be:	2b08      	cmp	r3, #8
 800a7c0:	d11c      	bne.n	800a7fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a7c2:	4b44      	ldr	r3, [pc, #272]	; (800a8d4 <HAL_RCC_OscConfig+0x240>)
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d116      	bne.n	800a7fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a7ce:	4b41      	ldr	r3, [pc, #260]	; (800a8d4 <HAL_RCC_OscConfig+0x240>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f003 0302 	and.w	r3, r3, #2
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d005      	beq.n	800a7e6 <HAL_RCC_OscConfig+0x152>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	68db      	ldr	r3, [r3, #12]
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	d001      	beq.n	800a7e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	e1c7      	b.n	800ab76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a7e6:	4b3b      	ldr	r3, [pc, #236]	; (800a8d4 <HAL_RCC_OscConfig+0x240>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	691b      	ldr	r3, [r3, #16]
 800a7f2:	00db      	lsls	r3, r3, #3
 800a7f4:	4937      	ldr	r1, [pc, #220]	; (800a8d4 <HAL_RCC_OscConfig+0x240>)
 800a7f6:	4313      	orrs	r3, r2
 800a7f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a7fa:	e03a      	b.n	800a872 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	68db      	ldr	r3, [r3, #12]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d020      	beq.n	800a846 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a804:	4b34      	ldr	r3, [pc, #208]	; (800a8d8 <HAL_RCC_OscConfig+0x244>)
 800a806:	2201      	movs	r2, #1
 800a808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a80a:	f7fd ffa9 	bl	8008760 <HAL_GetTick>
 800a80e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a810:	e008      	b.n	800a824 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a812:	f7fd ffa5 	bl	8008760 <HAL_GetTick>
 800a816:	4602      	mov	r2, r0
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	1ad3      	subs	r3, r2, r3
 800a81c:	2b02      	cmp	r3, #2
 800a81e:	d901      	bls.n	800a824 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a820:	2303      	movs	r3, #3
 800a822:	e1a8      	b.n	800ab76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a824:	4b2b      	ldr	r3, [pc, #172]	; (800a8d4 <HAL_RCC_OscConfig+0x240>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f003 0302 	and.w	r3, r3, #2
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d0f0      	beq.n	800a812 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a830:	4b28      	ldr	r3, [pc, #160]	; (800a8d4 <HAL_RCC_OscConfig+0x240>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	691b      	ldr	r3, [r3, #16]
 800a83c:	00db      	lsls	r3, r3, #3
 800a83e:	4925      	ldr	r1, [pc, #148]	; (800a8d4 <HAL_RCC_OscConfig+0x240>)
 800a840:	4313      	orrs	r3, r2
 800a842:	600b      	str	r3, [r1, #0]
 800a844:	e015      	b.n	800a872 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a846:	4b24      	ldr	r3, [pc, #144]	; (800a8d8 <HAL_RCC_OscConfig+0x244>)
 800a848:	2200      	movs	r2, #0
 800a84a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a84c:	f7fd ff88 	bl	8008760 <HAL_GetTick>
 800a850:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a852:	e008      	b.n	800a866 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a854:	f7fd ff84 	bl	8008760 <HAL_GetTick>
 800a858:	4602      	mov	r2, r0
 800a85a:	693b      	ldr	r3, [r7, #16]
 800a85c:	1ad3      	subs	r3, r2, r3
 800a85e:	2b02      	cmp	r3, #2
 800a860:	d901      	bls.n	800a866 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a862:	2303      	movs	r3, #3
 800a864:	e187      	b.n	800ab76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a866:	4b1b      	ldr	r3, [pc, #108]	; (800a8d4 <HAL_RCC_OscConfig+0x240>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f003 0302 	and.w	r3, r3, #2
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d1f0      	bne.n	800a854 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f003 0308 	and.w	r3, r3, #8
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d036      	beq.n	800a8ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	695b      	ldr	r3, [r3, #20]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d016      	beq.n	800a8b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a886:	4b15      	ldr	r3, [pc, #84]	; (800a8dc <HAL_RCC_OscConfig+0x248>)
 800a888:	2201      	movs	r2, #1
 800a88a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a88c:	f7fd ff68 	bl	8008760 <HAL_GetTick>
 800a890:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a892:	e008      	b.n	800a8a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a894:	f7fd ff64 	bl	8008760 <HAL_GetTick>
 800a898:	4602      	mov	r2, r0
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	1ad3      	subs	r3, r2, r3
 800a89e:	2b02      	cmp	r3, #2
 800a8a0:	d901      	bls.n	800a8a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a8a2:	2303      	movs	r3, #3
 800a8a4:	e167      	b.n	800ab76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a8a6:	4b0b      	ldr	r3, [pc, #44]	; (800a8d4 <HAL_RCC_OscConfig+0x240>)
 800a8a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8aa:	f003 0302 	and.w	r3, r3, #2
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d0f0      	beq.n	800a894 <HAL_RCC_OscConfig+0x200>
 800a8b2:	e01b      	b.n	800a8ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a8b4:	4b09      	ldr	r3, [pc, #36]	; (800a8dc <HAL_RCC_OscConfig+0x248>)
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a8ba:	f7fd ff51 	bl	8008760 <HAL_GetTick>
 800a8be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a8c0:	e00e      	b.n	800a8e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a8c2:	f7fd ff4d 	bl	8008760 <HAL_GetTick>
 800a8c6:	4602      	mov	r2, r0
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	1ad3      	subs	r3, r2, r3
 800a8cc:	2b02      	cmp	r3, #2
 800a8ce:	d907      	bls.n	800a8e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a8d0:	2303      	movs	r3, #3
 800a8d2:	e150      	b.n	800ab76 <HAL_RCC_OscConfig+0x4e2>
 800a8d4:	40023800 	.word	0x40023800
 800a8d8:	42470000 	.word	0x42470000
 800a8dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a8e0:	4b88      	ldr	r3, [pc, #544]	; (800ab04 <HAL_RCC_OscConfig+0x470>)
 800a8e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8e4:	f003 0302 	and.w	r3, r3, #2
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d1ea      	bne.n	800a8c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f003 0304 	and.w	r3, r3, #4
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	f000 8097 	beq.w	800aa28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a8fe:	4b81      	ldr	r3, [pc, #516]	; (800ab04 <HAL_RCC_OscConfig+0x470>)
 800a900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a906:	2b00      	cmp	r3, #0
 800a908:	d10f      	bne.n	800a92a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a90a:	2300      	movs	r3, #0
 800a90c:	60bb      	str	r3, [r7, #8]
 800a90e:	4b7d      	ldr	r3, [pc, #500]	; (800ab04 <HAL_RCC_OscConfig+0x470>)
 800a910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a912:	4a7c      	ldr	r2, [pc, #496]	; (800ab04 <HAL_RCC_OscConfig+0x470>)
 800a914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a918:	6413      	str	r3, [r2, #64]	; 0x40
 800a91a:	4b7a      	ldr	r3, [pc, #488]	; (800ab04 <HAL_RCC_OscConfig+0x470>)
 800a91c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a91e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a922:	60bb      	str	r3, [r7, #8]
 800a924:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a926:	2301      	movs	r3, #1
 800a928:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a92a:	4b77      	ldr	r3, [pc, #476]	; (800ab08 <HAL_RCC_OscConfig+0x474>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a932:	2b00      	cmp	r3, #0
 800a934:	d118      	bne.n	800a968 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a936:	4b74      	ldr	r3, [pc, #464]	; (800ab08 <HAL_RCC_OscConfig+0x474>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4a73      	ldr	r2, [pc, #460]	; (800ab08 <HAL_RCC_OscConfig+0x474>)
 800a93c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a940:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a942:	f7fd ff0d 	bl	8008760 <HAL_GetTick>
 800a946:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a948:	e008      	b.n	800a95c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a94a:	f7fd ff09 	bl	8008760 <HAL_GetTick>
 800a94e:	4602      	mov	r2, r0
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	1ad3      	subs	r3, r2, r3
 800a954:	2b02      	cmp	r3, #2
 800a956:	d901      	bls.n	800a95c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a958:	2303      	movs	r3, #3
 800a95a:	e10c      	b.n	800ab76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a95c:	4b6a      	ldr	r3, [pc, #424]	; (800ab08 <HAL_RCC_OscConfig+0x474>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a964:	2b00      	cmp	r3, #0
 800a966:	d0f0      	beq.n	800a94a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	689b      	ldr	r3, [r3, #8]
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	d106      	bne.n	800a97e <HAL_RCC_OscConfig+0x2ea>
 800a970:	4b64      	ldr	r3, [pc, #400]	; (800ab04 <HAL_RCC_OscConfig+0x470>)
 800a972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a974:	4a63      	ldr	r2, [pc, #396]	; (800ab04 <HAL_RCC_OscConfig+0x470>)
 800a976:	f043 0301 	orr.w	r3, r3, #1
 800a97a:	6713      	str	r3, [r2, #112]	; 0x70
 800a97c:	e01c      	b.n	800a9b8 <HAL_RCC_OscConfig+0x324>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	689b      	ldr	r3, [r3, #8]
 800a982:	2b05      	cmp	r3, #5
 800a984:	d10c      	bne.n	800a9a0 <HAL_RCC_OscConfig+0x30c>
 800a986:	4b5f      	ldr	r3, [pc, #380]	; (800ab04 <HAL_RCC_OscConfig+0x470>)
 800a988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a98a:	4a5e      	ldr	r2, [pc, #376]	; (800ab04 <HAL_RCC_OscConfig+0x470>)
 800a98c:	f043 0304 	orr.w	r3, r3, #4
 800a990:	6713      	str	r3, [r2, #112]	; 0x70
 800a992:	4b5c      	ldr	r3, [pc, #368]	; (800ab04 <HAL_RCC_OscConfig+0x470>)
 800a994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a996:	4a5b      	ldr	r2, [pc, #364]	; (800ab04 <HAL_RCC_OscConfig+0x470>)
 800a998:	f043 0301 	orr.w	r3, r3, #1
 800a99c:	6713      	str	r3, [r2, #112]	; 0x70
 800a99e:	e00b      	b.n	800a9b8 <HAL_RCC_OscConfig+0x324>
 800a9a0:	4b58      	ldr	r3, [pc, #352]	; (800ab04 <HAL_RCC_OscConfig+0x470>)
 800a9a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9a4:	4a57      	ldr	r2, [pc, #348]	; (800ab04 <HAL_RCC_OscConfig+0x470>)
 800a9a6:	f023 0301 	bic.w	r3, r3, #1
 800a9aa:	6713      	str	r3, [r2, #112]	; 0x70
 800a9ac:	4b55      	ldr	r3, [pc, #340]	; (800ab04 <HAL_RCC_OscConfig+0x470>)
 800a9ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9b0:	4a54      	ldr	r2, [pc, #336]	; (800ab04 <HAL_RCC_OscConfig+0x470>)
 800a9b2:	f023 0304 	bic.w	r3, r3, #4
 800a9b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	689b      	ldr	r3, [r3, #8]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d015      	beq.n	800a9ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9c0:	f7fd fece 	bl	8008760 <HAL_GetTick>
 800a9c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a9c6:	e00a      	b.n	800a9de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a9c8:	f7fd feca 	bl	8008760 <HAL_GetTick>
 800a9cc:	4602      	mov	r2, r0
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	1ad3      	subs	r3, r2, r3
 800a9d2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d901      	bls.n	800a9de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a9da:	2303      	movs	r3, #3
 800a9dc:	e0cb      	b.n	800ab76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a9de:	4b49      	ldr	r3, [pc, #292]	; (800ab04 <HAL_RCC_OscConfig+0x470>)
 800a9e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9e2:	f003 0302 	and.w	r3, r3, #2
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d0ee      	beq.n	800a9c8 <HAL_RCC_OscConfig+0x334>
 800a9ea:	e014      	b.n	800aa16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a9ec:	f7fd feb8 	bl	8008760 <HAL_GetTick>
 800a9f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a9f2:	e00a      	b.n	800aa0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a9f4:	f7fd feb4 	bl	8008760 <HAL_GetTick>
 800a9f8:	4602      	mov	r2, r0
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	1ad3      	subs	r3, r2, r3
 800a9fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d901      	bls.n	800aa0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800aa06:	2303      	movs	r3, #3
 800aa08:	e0b5      	b.n	800ab76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aa0a:	4b3e      	ldr	r3, [pc, #248]	; (800ab04 <HAL_RCC_OscConfig+0x470>)
 800aa0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa0e:	f003 0302 	and.w	r3, r3, #2
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d1ee      	bne.n	800a9f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800aa16:	7dfb      	ldrb	r3, [r7, #23]
 800aa18:	2b01      	cmp	r3, #1
 800aa1a:	d105      	bne.n	800aa28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aa1c:	4b39      	ldr	r3, [pc, #228]	; (800ab04 <HAL_RCC_OscConfig+0x470>)
 800aa1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa20:	4a38      	ldr	r2, [pc, #224]	; (800ab04 <HAL_RCC_OscConfig+0x470>)
 800aa22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aa26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	699b      	ldr	r3, [r3, #24]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	f000 80a1 	beq.w	800ab74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800aa32:	4b34      	ldr	r3, [pc, #208]	; (800ab04 <HAL_RCC_OscConfig+0x470>)
 800aa34:	689b      	ldr	r3, [r3, #8]
 800aa36:	f003 030c 	and.w	r3, r3, #12
 800aa3a:	2b08      	cmp	r3, #8
 800aa3c:	d05c      	beq.n	800aaf8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	699b      	ldr	r3, [r3, #24]
 800aa42:	2b02      	cmp	r3, #2
 800aa44:	d141      	bne.n	800aaca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa46:	4b31      	ldr	r3, [pc, #196]	; (800ab0c <HAL_RCC_OscConfig+0x478>)
 800aa48:	2200      	movs	r2, #0
 800aa4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa4c:	f7fd fe88 	bl	8008760 <HAL_GetTick>
 800aa50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aa52:	e008      	b.n	800aa66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800aa54:	f7fd fe84 	bl	8008760 <HAL_GetTick>
 800aa58:	4602      	mov	r2, r0
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	1ad3      	subs	r3, r2, r3
 800aa5e:	2b02      	cmp	r3, #2
 800aa60:	d901      	bls.n	800aa66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800aa62:	2303      	movs	r3, #3
 800aa64:	e087      	b.n	800ab76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aa66:	4b27      	ldr	r3, [pc, #156]	; (800ab04 <HAL_RCC_OscConfig+0x470>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d1f0      	bne.n	800aa54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	69da      	ldr	r2, [r3, #28]
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6a1b      	ldr	r3, [r3, #32]
 800aa7a:	431a      	orrs	r2, r3
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa80:	019b      	lsls	r3, r3, #6
 800aa82:	431a      	orrs	r2, r3
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa88:	085b      	lsrs	r3, r3, #1
 800aa8a:	3b01      	subs	r3, #1
 800aa8c:	041b      	lsls	r3, r3, #16
 800aa8e:	431a      	orrs	r2, r3
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa94:	061b      	lsls	r3, r3, #24
 800aa96:	491b      	ldr	r1, [pc, #108]	; (800ab04 <HAL_RCC_OscConfig+0x470>)
 800aa98:	4313      	orrs	r3, r2
 800aa9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aa9c:	4b1b      	ldr	r3, [pc, #108]	; (800ab0c <HAL_RCC_OscConfig+0x478>)
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aaa2:	f7fd fe5d 	bl	8008760 <HAL_GetTick>
 800aaa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aaa8:	e008      	b.n	800aabc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800aaaa:	f7fd fe59 	bl	8008760 <HAL_GetTick>
 800aaae:	4602      	mov	r2, r0
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	1ad3      	subs	r3, r2, r3
 800aab4:	2b02      	cmp	r3, #2
 800aab6:	d901      	bls.n	800aabc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800aab8:	2303      	movs	r3, #3
 800aaba:	e05c      	b.n	800ab76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aabc:	4b11      	ldr	r3, [pc, #68]	; (800ab04 <HAL_RCC_OscConfig+0x470>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d0f0      	beq.n	800aaaa <HAL_RCC_OscConfig+0x416>
 800aac8:	e054      	b.n	800ab74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aaca:	4b10      	ldr	r3, [pc, #64]	; (800ab0c <HAL_RCC_OscConfig+0x478>)
 800aacc:	2200      	movs	r2, #0
 800aace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aad0:	f7fd fe46 	bl	8008760 <HAL_GetTick>
 800aad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aad6:	e008      	b.n	800aaea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800aad8:	f7fd fe42 	bl	8008760 <HAL_GetTick>
 800aadc:	4602      	mov	r2, r0
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	1ad3      	subs	r3, r2, r3
 800aae2:	2b02      	cmp	r3, #2
 800aae4:	d901      	bls.n	800aaea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800aae6:	2303      	movs	r3, #3
 800aae8:	e045      	b.n	800ab76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aaea:	4b06      	ldr	r3, [pc, #24]	; (800ab04 <HAL_RCC_OscConfig+0x470>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d1f0      	bne.n	800aad8 <HAL_RCC_OscConfig+0x444>
 800aaf6:	e03d      	b.n	800ab74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	699b      	ldr	r3, [r3, #24]
 800aafc:	2b01      	cmp	r3, #1
 800aafe:	d107      	bne.n	800ab10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800ab00:	2301      	movs	r3, #1
 800ab02:	e038      	b.n	800ab76 <HAL_RCC_OscConfig+0x4e2>
 800ab04:	40023800 	.word	0x40023800
 800ab08:	40007000 	.word	0x40007000
 800ab0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ab10:	4b1b      	ldr	r3, [pc, #108]	; (800ab80 <HAL_RCC_OscConfig+0x4ec>)
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	699b      	ldr	r3, [r3, #24]
 800ab1a:	2b01      	cmp	r3, #1
 800ab1c:	d028      	beq.n	800ab70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	d121      	bne.n	800ab70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ab36:	429a      	cmp	r2, r3
 800ab38:	d11a      	bne.n	800ab70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ab3a:	68fa      	ldr	r2, [r7, #12]
 800ab3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ab40:	4013      	ands	r3, r2
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ab46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d111      	bne.n	800ab70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab56:	085b      	lsrs	r3, r3, #1
 800ab58:	3b01      	subs	r3, #1
 800ab5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d107      	bne.n	800ab70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	d001      	beq.n	800ab74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800ab70:	2301      	movs	r3, #1
 800ab72:	e000      	b.n	800ab76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800ab74:	2300      	movs	r3, #0
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3718      	adds	r7, #24
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}
 800ab7e:	bf00      	nop
 800ab80:	40023800 	.word	0x40023800

0800ab84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b084      	sub	sp, #16
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d101      	bne.n	800ab98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ab94:	2301      	movs	r3, #1
 800ab96:	e0cc      	b.n	800ad32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ab98:	4b68      	ldr	r3, [pc, #416]	; (800ad3c <HAL_RCC_ClockConfig+0x1b8>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f003 030f 	and.w	r3, r3, #15
 800aba0:	683a      	ldr	r2, [r7, #0]
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d90c      	bls.n	800abc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aba6:	4b65      	ldr	r3, [pc, #404]	; (800ad3c <HAL_RCC_ClockConfig+0x1b8>)
 800aba8:	683a      	ldr	r2, [r7, #0]
 800abaa:	b2d2      	uxtb	r2, r2
 800abac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800abae:	4b63      	ldr	r3, [pc, #396]	; (800ad3c <HAL_RCC_ClockConfig+0x1b8>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f003 030f 	and.w	r3, r3, #15
 800abb6:	683a      	ldr	r2, [r7, #0]
 800abb8:	429a      	cmp	r2, r3
 800abba:	d001      	beq.n	800abc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800abbc:	2301      	movs	r3, #1
 800abbe:	e0b8      	b.n	800ad32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f003 0302 	and.w	r3, r3, #2
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d020      	beq.n	800ac0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f003 0304 	and.w	r3, r3, #4
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d005      	beq.n	800abe4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800abd8:	4b59      	ldr	r3, [pc, #356]	; (800ad40 <HAL_RCC_ClockConfig+0x1bc>)
 800abda:	689b      	ldr	r3, [r3, #8]
 800abdc:	4a58      	ldr	r2, [pc, #352]	; (800ad40 <HAL_RCC_ClockConfig+0x1bc>)
 800abde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800abe2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f003 0308 	and.w	r3, r3, #8
 800abec:	2b00      	cmp	r3, #0
 800abee:	d005      	beq.n	800abfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800abf0:	4b53      	ldr	r3, [pc, #332]	; (800ad40 <HAL_RCC_ClockConfig+0x1bc>)
 800abf2:	689b      	ldr	r3, [r3, #8]
 800abf4:	4a52      	ldr	r2, [pc, #328]	; (800ad40 <HAL_RCC_ClockConfig+0x1bc>)
 800abf6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800abfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800abfc:	4b50      	ldr	r3, [pc, #320]	; (800ad40 <HAL_RCC_ClockConfig+0x1bc>)
 800abfe:	689b      	ldr	r3, [r3, #8]
 800ac00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	689b      	ldr	r3, [r3, #8]
 800ac08:	494d      	ldr	r1, [pc, #308]	; (800ad40 <HAL_RCC_ClockConfig+0x1bc>)
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f003 0301 	and.w	r3, r3, #1
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d044      	beq.n	800aca4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	2b01      	cmp	r3, #1
 800ac20:	d107      	bne.n	800ac32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ac22:	4b47      	ldr	r3, [pc, #284]	; (800ad40 <HAL_RCC_ClockConfig+0x1bc>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d119      	bne.n	800ac62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ac2e:	2301      	movs	r3, #1
 800ac30:	e07f      	b.n	800ad32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	2b02      	cmp	r3, #2
 800ac38:	d003      	beq.n	800ac42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ac3e:	2b03      	cmp	r3, #3
 800ac40:	d107      	bne.n	800ac52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ac42:	4b3f      	ldr	r3, [pc, #252]	; (800ad40 <HAL_RCC_ClockConfig+0x1bc>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d109      	bne.n	800ac62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ac4e:	2301      	movs	r3, #1
 800ac50:	e06f      	b.n	800ad32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ac52:	4b3b      	ldr	r3, [pc, #236]	; (800ad40 <HAL_RCC_ClockConfig+0x1bc>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f003 0302 	and.w	r3, r3, #2
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d101      	bne.n	800ac62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ac5e:	2301      	movs	r3, #1
 800ac60:	e067      	b.n	800ad32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ac62:	4b37      	ldr	r3, [pc, #220]	; (800ad40 <HAL_RCC_ClockConfig+0x1bc>)
 800ac64:	689b      	ldr	r3, [r3, #8]
 800ac66:	f023 0203 	bic.w	r2, r3, #3
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	4934      	ldr	r1, [pc, #208]	; (800ad40 <HAL_RCC_ClockConfig+0x1bc>)
 800ac70:	4313      	orrs	r3, r2
 800ac72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ac74:	f7fd fd74 	bl	8008760 <HAL_GetTick>
 800ac78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac7a:	e00a      	b.n	800ac92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ac7c:	f7fd fd70 	bl	8008760 <HAL_GetTick>
 800ac80:	4602      	mov	r2, r0
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	1ad3      	subs	r3, r2, r3
 800ac86:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d901      	bls.n	800ac92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ac8e:	2303      	movs	r3, #3
 800ac90:	e04f      	b.n	800ad32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac92:	4b2b      	ldr	r3, [pc, #172]	; (800ad40 <HAL_RCC_ClockConfig+0x1bc>)
 800ac94:	689b      	ldr	r3, [r3, #8]
 800ac96:	f003 020c 	and.w	r2, r3, #12
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	009b      	lsls	r3, r3, #2
 800aca0:	429a      	cmp	r2, r3
 800aca2:	d1eb      	bne.n	800ac7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800aca4:	4b25      	ldr	r3, [pc, #148]	; (800ad3c <HAL_RCC_ClockConfig+0x1b8>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f003 030f 	and.w	r3, r3, #15
 800acac:	683a      	ldr	r2, [r7, #0]
 800acae:	429a      	cmp	r2, r3
 800acb0:	d20c      	bcs.n	800accc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800acb2:	4b22      	ldr	r3, [pc, #136]	; (800ad3c <HAL_RCC_ClockConfig+0x1b8>)
 800acb4:	683a      	ldr	r2, [r7, #0]
 800acb6:	b2d2      	uxtb	r2, r2
 800acb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800acba:	4b20      	ldr	r3, [pc, #128]	; (800ad3c <HAL_RCC_ClockConfig+0x1b8>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f003 030f 	and.w	r3, r3, #15
 800acc2:	683a      	ldr	r2, [r7, #0]
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d001      	beq.n	800accc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800acc8:	2301      	movs	r3, #1
 800acca:	e032      	b.n	800ad32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f003 0304 	and.w	r3, r3, #4
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d008      	beq.n	800acea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800acd8:	4b19      	ldr	r3, [pc, #100]	; (800ad40 <HAL_RCC_ClockConfig+0x1bc>)
 800acda:	689b      	ldr	r3, [r3, #8]
 800acdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	68db      	ldr	r3, [r3, #12]
 800ace4:	4916      	ldr	r1, [pc, #88]	; (800ad40 <HAL_RCC_ClockConfig+0x1bc>)
 800ace6:	4313      	orrs	r3, r2
 800ace8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f003 0308 	and.w	r3, r3, #8
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d009      	beq.n	800ad0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800acf6:	4b12      	ldr	r3, [pc, #72]	; (800ad40 <HAL_RCC_ClockConfig+0x1bc>)
 800acf8:	689b      	ldr	r3, [r3, #8]
 800acfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	691b      	ldr	r3, [r3, #16]
 800ad02:	00db      	lsls	r3, r3, #3
 800ad04:	490e      	ldr	r1, [pc, #56]	; (800ad40 <HAL_RCC_ClockConfig+0x1bc>)
 800ad06:	4313      	orrs	r3, r2
 800ad08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ad0a:	f000 f821 	bl	800ad50 <HAL_RCC_GetSysClockFreq>
 800ad0e:	4602      	mov	r2, r0
 800ad10:	4b0b      	ldr	r3, [pc, #44]	; (800ad40 <HAL_RCC_ClockConfig+0x1bc>)
 800ad12:	689b      	ldr	r3, [r3, #8]
 800ad14:	091b      	lsrs	r3, r3, #4
 800ad16:	f003 030f 	and.w	r3, r3, #15
 800ad1a:	490a      	ldr	r1, [pc, #40]	; (800ad44 <HAL_RCC_ClockConfig+0x1c0>)
 800ad1c:	5ccb      	ldrb	r3, [r1, r3]
 800ad1e:	fa22 f303 	lsr.w	r3, r2, r3
 800ad22:	4a09      	ldr	r2, [pc, #36]	; (800ad48 <HAL_RCC_ClockConfig+0x1c4>)
 800ad24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800ad26:	4b09      	ldr	r3, [pc, #36]	; (800ad4c <HAL_RCC_ClockConfig+0x1c8>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f7fd fabc 	bl	80082a8 <HAL_InitTick>

  return HAL_OK;
 800ad30:	2300      	movs	r3, #0
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	3710      	adds	r7, #16
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}
 800ad3a:	bf00      	nop
 800ad3c:	40023c00 	.word	0x40023c00
 800ad40:	40023800 	.word	0x40023800
 800ad44:	0801557c 	.word	0x0801557c
 800ad48:	2000000c 	.word	0x2000000c
 800ad4c:	20000010 	.word	0x20000010

0800ad50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ad50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ad54:	b090      	sub	sp, #64	; 0x40
 800ad56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	637b      	str	r3, [r7, #52]	; 0x34
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad60:	2300      	movs	r3, #0
 800ad62:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800ad64:	2300      	movs	r3, #0
 800ad66:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ad68:	4b59      	ldr	r3, [pc, #356]	; (800aed0 <HAL_RCC_GetSysClockFreq+0x180>)
 800ad6a:	689b      	ldr	r3, [r3, #8]
 800ad6c:	f003 030c 	and.w	r3, r3, #12
 800ad70:	2b08      	cmp	r3, #8
 800ad72:	d00d      	beq.n	800ad90 <HAL_RCC_GetSysClockFreq+0x40>
 800ad74:	2b08      	cmp	r3, #8
 800ad76:	f200 80a1 	bhi.w	800aebc <HAL_RCC_GetSysClockFreq+0x16c>
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d002      	beq.n	800ad84 <HAL_RCC_GetSysClockFreq+0x34>
 800ad7e:	2b04      	cmp	r3, #4
 800ad80:	d003      	beq.n	800ad8a <HAL_RCC_GetSysClockFreq+0x3a>
 800ad82:	e09b      	b.n	800aebc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ad84:	4b53      	ldr	r3, [pc, #332]	; (800aed4 <HAL_RCC_GetSysClockFreq+0x184>)
 800ad86:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800ad88:	e09b      	b.n	800aec2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ad8a:	4b53      	ldr	r3, [pc, #332]	; (800aed8 <HAL_RCC_GetSysClockFreq+0x188>)
 800ad8c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800ad8e:	e098      	b.n	800aec2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ad90:	4b4f      	ldr	r3, [pc, #316]	; (800aed0 <HAL_RCC_GetSysClockFreq+0x180>)
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad98:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ad9a:	4b4d      	ldr	r3, [pc, #308]	; (800aed0 <HAL_RCC_GetSysClockFreq+0x180>)
 800ad9c:	685b      	ldr	r3, [r3, #4]
 800ad9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d028      	beq.n	800adf8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ada6:	4b4a      	ldr	r3, [pc, #296]	; (800aed0 <HAL_RCC_GetSysClockFreq+0x180>)
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	099b      	lsrs	r3, r3, #6
 800adac:	2200      	movs	r2, #0
 800adae:	623b      	str	r3, [r7, #32]
 800adb0:	627a      	str	r2, [r7, #36]	; 0x24
 800adb2:	6a3b      	ldr	r3, [r7, #32]
 800adb4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800adb8:	2100      	movs	r1, #0
 800adba:	4b47      	ldr	r3, [pc, #284]	; (800aed8 <HAL_RCC_GetSysClockFreq+0x188>)
 800adbc:	fb03 f201 	mul.w	r2, r3, r1
 800adc0:	2300      	movs	r3, #0
 800adc2:	fb00 f303 	mul.w	r3, r0, r3
 800adc6:	4413      	add	r3, r2
 800adc8:	4a43      	ldr	r2, [pc, #268]	; (800aed8 <HAL_RCC_GetSysClockFreq+0x188>)
 800adca:	fba0 1202 	umull	r1, r2, r0, r2
 800adce:	62fa      	str	r2, [r7, #44]	; 0x2c
 800add0:	460a      	mov	r2, r1
 800add2:	62ba      	str	r2, [r7, #40]	; 0x28
 800add4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800add6:	4413      	add	r3, r2
 800add8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800adda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800addc:	2200      	movs	r2, #0
 800adde:	61bb      	str	r3, [r7, #24]
 800ade0:	61fa      	str	r2, [r7, #28]
 800ade2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ade6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800adea:	f7f5 ff3d 	bl	8000c68 <__aeabi_uldivmod>
 800adee:	4602      	mov	r2, r0
 800adf0:	460b      	mov	r3, r1
 800adf2:	4613      	mov	r3, r2
 800adf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800adf6:	e053      	b.n	800aea0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800adf8:	4b35      	ldr	r3, [pc, #212]	; (800aed0 <HAL_RCC_GetSysClockFreq+0x180>)
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	099b      	lsrs	r3, r3, #6
 800adfe:	2200      	movs	r2, #0
 800ae00:	613b      	str	r3, [r7, #16]
 800ae02:	617a      	str	r2, [r7, #20]
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800ae0a:	f04f 0b00 	mov.w	fp, #0
 800ae0e:	4652      	mov	r2, sl
 800ae10:	465b      	mov	r3, fp
 800ae12:	f04f 0000 	mov.w	r0, #0
 800ae16:	f04f 0100 	mov.w	r1, #0
 800ae1a:	0159      	lsls	r1, r3, #5
 800ae1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ae20:	0150      	lsls	r0, r2, #5
 800ae22:	4602      	mov	r2, r0
 800ae24:	460b      	mov	r3, r1
 800ae26:	ebb2 080a 	subs.w	r8, r2, sl
 800ae2a:	eb63 090b 	sbc.w	r9, r3, fp
 800ae2e:	f04f 0200 	mov.w	r2, #0
 800ae32:	f04f 0300 	mov.w	r3, #0
 800ae36:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800ae3a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800ae3e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800ae42:	ebb2 0408 	subs.w	r4, r2, r8
 800ae46:	eb63 0509 	sbc.w	r5, r3, r9
 800ae4a:	f04f 0200 	mov.w	r2, #0
 800ae4e:	f04f 0300 	mov.w	r3, #0
 800ae52:	00eb      	lsls	r3, r5, #3
 800ae54:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ae58:	00e2      	lsls	r2, r4, #3
 800ae5a:	4614      	mov	r4, r2
 800ae5c:	461d      	mov	r5, r3
 800ae5e:	eb14 030a 	adds.w	r3, r4, sl
 800ae62:	603b      	str	r3, [r7, #0]
 800ae64:	eb45 030b 	adc.w	r3, r5, fp
 800ae68:	607b      	str	r3, [r7, #4]
 800ae6a:	f04f 0200 	mov.w	r2, #0
 800ae6e:	f04f 0300 	mov.w	r3, #0
 800ae72:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ae76:	4629      	mov	r1, r5
 800ae78:	028b      	lsls	r3, r1, #10
 800ae7a:	4621      	mov	r1, r4
 800ae7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ae80:	4621      	mov	r1, r4
 800ae82:	028a      	lsls	r2, r1, #10
 800ae84:	4610      	mov	r0, r2
 800ae86:	4619      	mov	r1, r3
 800ae88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	60bb      	str	r3, [r7, #8]
 800ae8e:	60fa      	str	r2, [r7, #12]
 800ae90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ae94:	f7f5 fee8 	bl	8000c68 <__aeabi_uldivmod>
 800ae98:	4602      	mov	r2, r0
 800ae9a:	460b      	mov	r3, r1
 800ae9c:	4613      	mov	r3, r2
 800ae9e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800aea0:	4b0b      	ldr	r3, [pc, #44]	; (800aed0 <HAL_RCC_GetSysClockFreq+0x180>)
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	0c1b      	lsrs	r3, r3, #16
 800aea6:	f003 0303 	and.w	r3, r3, #3
 800aeaa:	3301      	adds	r3, #1
 800aeac:	005b      	lsls	r3, r3, #1
 800aeae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800aeb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aeb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800aeb8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800aeba:	e002      	b.n	800aec2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800aebc:	4b05      	ldr	r3, [pc, #20]	; (800aed4 <HAL_RCC_GetSysClockFreq+0x184>)
 800aebe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800aec0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800aec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3740      	adds	r7, #64	; 0x40
 800aec8:	46bd      	mov	sp, r7
 800aeca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aece:	bf00      	nop
 800aed0:	40023800 	.word	0x40023800
 800aed4:	00f42400 	.word	0x00f42400
 800aed8:	017d7840 	.word	0x017d7840

0800aedc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aedc:	b480      	push	{r7}
 800aede:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800aee0:	4b03      	ldr	r3, [pc, #12]	; (800aef0 <HAL_RCC_GetHCLKFreq+0x14>)
 800aee2:	681b      	ldr	r3, [r3, #0]
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	46bd      	mov	sp, r7
 800aee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeec:	4770      	bx	lr
 800aeee:	bf00      	nop
 800aef0:	2000000c 	.word	0x2000000c

0800aef4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800aef8:	f7ff fff0 	bl	800aedc <HAL_RCC_GetHCLKFreq>
 800aefc:	4602      	mov	r2, r0
 800aefe:	4b05      	ldr	r3, [pc, #20]	; (800af14 <HAL_RCC_GetPCLK1Freq+0x20>)
 800af00:	689b      	ldr	r3, [r3, #8]
 800af02:	0a9b      	lsrs	r3, r3, #10
 800af04:	f003 0307 	and.w	r3, r3, #7
 800af08:	4903      	ldr	r1, [pc, #12]	; (800af18 <HAL_RCC_GetPCLK1Freq+0x24>)
 800af0a:	5ccb      	ldrb	r3, [r1, r3]
 800af0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800af10:	4618      	mov	r0, r3
 800af12:	bd80      	pop	{r7, pc}
 800af14:	40023800 	.word	0x40023800
 800af18:	0801558c 	.word	0x0801558c

0800af1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800af20:	f7ff ffdc 	bl	800aedc <HAL_RCC_GetHCLKFreq>
 800af24:	4602      	mov	r2, r0
 800af26:	4b05      	ldr	r3, [pc, #20]	; (800af3c <HAL_RCC_GetPCLK2Freq+0x20>)
 800af28:	689b      	ldr	r3, [r3, #8]
 800af2a:	0b5b      	lsrs	r3, r3, #13
 800af2c:	f003 0307 	and.w	r3, r3, #7
 800af30:	4903      	ldr	r1, [pc, #12]	; (800af40 <HAL_RCC_GetPCLK2Freq+0x24>)
 800af32:	5ccb      	ldrb	r3, [r1, r3]
 800af34:	fa22 f303 	lsr.w	r3, r2, r3
}
 800af38:	4618      	mov	r0, r3
 800af3a:	bd80      	pop	{r7, pc}
 800af3c:	40023800 	.word	0x40023800
 800af40:	0801558c 	.word	0x0801558c

0800af44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800af44:	b480      	push	{r7}
 800af46:	b083      	sub	sp, #12
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
 800af4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	220f      	movs	r2, #15
 800af52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800af54:	4b12      	ldr	r3, [pc, #72]	; (800afa0 <HAL_RCC_GetClockConfig+0x5c>)
 800af56:	689b      	ldr	r3, [r3, #8]
 800af58:	f003 0203 	and.w	r2, r3, #3
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800af60:	4b0f      	ldr	r3, [pc, #60]	; (800afa0 <HAL_RCC_GetClockConfig+0x5c>)
 800af62:	689b      	ldr	r3, [r3, #8]
 800af64:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800af6c:	4b0c      	ldr	r3, [pc, #48]	; (800afa0 <HAL_RCC_GetClockConfig+0x5c>)
 800af6e:	689b      	ldr	r3, [r3, #8]
 800af70:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800af78:	4b09      	ldr	r3, [pc, #36]	; (800afa0 <HAL_RCC_GetClockConfig+0x5c>)
 800af7a:	689b      	ldr	r3, [r3, #8]
 800af7c:	08db      	lsrs	r3, r3, #3
 800af7e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800af86:	4b07      	ldr	r3, [pc, #28]	; (800afa4 <HAL_RCC_GetClockConfig+0x60>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f003 020f 	and.w	r2, r3, #15
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	601a      	str	r2, [r3, #0]
}
 800af92:	bf00      	nop
 800af94:	370c      	adds	r7, #12
 800af96:	46bd      	mov	sp, r7
 800af98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9c:	4770      	bx	lr
 800af9e:	bf00      	nop
 800afa0:	40023800 	.word	0x40023800
 800afa4:	40023c00 	.word	0x40023c00

0800afa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d101      	bne.n	800afba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800afb6:	2301      	movs	r3, #1
 800afb8:	e041      	b.n	800b03e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afc0:	b2db      	uxtb	r3, r3
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d106      	bne.n	800afd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2200      	movs	r2, #0
 800afca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f7fc ffba 	bl	8007f48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2202      	movs	r2, #2
 800afd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681a      	ldr	r2, [r3, #0]
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	3304      	adds	r3, #4
 800afe4:	4619      	mov	r1, r3
 800afe6:	4610      	mov	r0, r2
 800afe8:	f000 fc62 	bl	800b8b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2201      	movs	r2, #1
 800aff0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2201      	movs	r2, #1
 800aff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2201      	movs	r2, #1
 800b000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2201      	movs	r2, #1
 800b008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2201      	movs	r2, #1
 800b010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2201      	movs	r2, #1
 800b018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2201      	movs	r2, #1
 800b020:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2201      	movs	r2, #1
 800b028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2201      	movs	r2, #1
 800b030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2201      	movs	r2, #1
 800b038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b03c:	2300      	movs	r3, #0
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3708      	adds	r7, #8
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
	...

0800b048 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b048:	b480      	push	{r7}
 800b04a:	b085      	sub	sp, #20
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b056:	b2db      	uxtb	r3, r3
 800b058:	2b01      	cmp	r3, #1
 800b05a:	d001      	beq.n	800b060 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b05c:	2301      	movs	r3, #1
 800b05e:	e04e      	b.n	800b0fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2202      	movs	r2, #2
 800b064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	68da      	ldr	r2, [r3, #12]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f042 0201 	orr.w	r2, r2, #1
 800b076:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	4a23      	ldr	r2, [pc, #140]	; (800b10c <HAL_TIM_Base_Start_IT+0xc4>)
 800b07e:	4293      	cmp	r3, r2
 800b080:	d022      	beq.n	800b0c8 <HAL_TIM_Base_Start_IT+0x80>
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b08a:	d01d      	beq.n	800b0c8 <HAL_TIM_Base_Start_IT+0x80>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	4a1f      	ldr	r2, [pc, #124]	; (800b110 <HAL_TIM_Base_Start_IT+0xc8>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d018      	beq.n	800b0c8 <HAL_TIM_Base_Start_IT+0x80>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	4a1e      	ldr	r2, [pc, #120]	; (800b114 <HAL_TIM_Base_Start_IT+0xcc>)
 800b09c:	4293      	cmp	r3, r2
 800b09e:	d013      	beq.n	800b0c8 <HAL_TIM_Base_Start_IT+0x80>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	4a1c      	ldr	r2, [pc, #112]	; (800b118 <HAL_TIM_Base_Start_IT+0xd0>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d00e      	beq.n	800b0c8 <HAL_TIM_Base_Start_IT+0x80>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	4a1b      	ldr	r2, [pc, #108]	; (800b11c <HAL_TIM_Base_Start_IT+0xd4>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d009      	beq.n	800b0c8 <HAL_TIM_Base_Start_IT+0x80>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	4a19      	ldr	r2, [pc, #100]	; (800b120 <HAL_TIM_Base_Start_IT+0xd8>)
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d004      	beq.n	800b0c8 <HAL_TIM_Base_Start_IT+0x80>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	4a18      	ldr	r2, [pc, #96]	; (800b124 <HAL_TIM_Base_Start_IT+0xdc>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d111      	bne.n	800b0ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	689b      	ldr	r3, [r3, #8]
 800b0ce:	f003 0307 	and.w	r3, r3, #7
 800b0d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	2b06      	cmp	r3, #6
 800b0d8:	d010      	beq.n	800b0fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	681a      	ldr	r2, [r3, #0]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f042 0201 	orr.w	r2, r2, #1
 800b0e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0ea:	e007      	b.n	800b0fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	681a      	ldr	r2, [r3, #0]
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f042 0201 	orr.w	r2, r2, #1
 800b0fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b0fc:	2300      	movs	r3, #0
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3714      	adds	r7, #20
 800b102:	46bd      	mov	sp, r7
 800b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b108:	4770      	bx	lr
 800b10a:	bf00      	nop
 800b10c:	40010000 	.word	0x40010000
 800b110:	40000400 	.word	0x40000400
 800b114:	40000800 	.word	0x40000800
 800b118:	40000c00 	.word	0x40000c00
 800b11c:	40010400 	.word	0x40010400
 800b120:	40014000 	.word	0x40014000
 800b124:	40001800 	.word	0x40001800

0800b128 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b082      	sub	sp, #8
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d101      	bne.n	800b13a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b136:	2301      	movs	r3, #1
 800b138:	e041      	b.n	800b1be <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b140:	b2db      	uxtb	r3, r3
 800b142:	2b00      	cmp	r3, #0
 800b144:	d106      	bne.n	800b154 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2200      	movs	r2, #0
 800b14a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f000 f839 	bl	800b1c6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2202      	movs	r2, #2
 800b158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681a      	ldr	r2, [r3, #0]
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	3304      	adds	r3, #4
 800b164:	4619      	mov	r1, r3
 800b166:	4610      	mov	r0, r2
 800b168:	f000 fba2 	bl	800b8b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2201      	movs	r2, #1
 800b170:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2201      	movs	r2, #1
 800b178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2201      	movs	r2, #1
 800b180:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2201      	movs	r2, #1
 800b188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2201      	movs	r2, #1
 800b190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2201      	movs	r2, #1
 800b198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2201      	movs	r2, #1
 800b1a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b1bc:	2300      	movs	r3, #0
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3708      	adds	r7, #8
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}

0800b1c6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b1c6:	b480      	push	{r7}
 800b1c8:	b083      	sub	sp, #12
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b1ce:	bf00      	nop
 800b1d0:	370c      	adds	r7, #12
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d8:	4770      	bx	lr
	...

0800b1dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b084      	sub	sp, #16
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
 800b1e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d109      	bne.n	800b200 <HAL_TIM_PWM_Start+0x24>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b1f2:	b2db      	uxtb	r3, r3
 800b1f4:	2b01      	cmp	r3, #1
 800b1f6:	bf14      	ite	ne
 800b1f8:	2301      	movne	r3, #1
 800b1fa:	2300      	moveq	r3, #0
 800b1fc:	b2db      	uxtb	r3, r3
 800b1fe:	e022      	b.n	800b246 <HAL_TIM_PWM_Start+0x6a>
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	2b04      	cmp	r3, #4
 800b204:	d109      	bne.n	800b21a <HAL_TIM_PWM_Start+0x3e>
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b20c:	b2db      	uxtb	r3, r3
 800b20e:	2b01      	cmp	r3, #1
 800b210:	bf14      	ite	ne
 800b212:	2301      	movne	r3, #1
 800b214:	2300      	moveq	r3, #0
 800b216:	b2db      	uxtb	r3, r3
 800b218:	e015      	b.n	800b246 <HAL_TIM_PWM_Start+0x6a>
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	2b08      	cmp	r3, #8
 800b21e:	d109      	bne.n	800b234 <HAL_TIM_PWM_Start+0x58>
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b226:	b2db      	uxtb	r3, r3
 800b228:	2b01      	cmp	r3, #1
 800b22a:	bf14      	ite	ne
 800b22c:	2301      	movne	r3, #1
 800b22e:	2300      	moveq	r3, #0
 800b230:	b2db      	uxtb	r3, r3
 800b232:	e008      	b.n	800b246 <HAL_TIM_PWM_Start+0x6a>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b23a:	b2db      	uxtb	r3, r3
 800b23c:	2b01      	cmp	r3, #1
 800b23e:	bf14      	ite	ne
 800b240:	2301      	movne	r3, #1
 800b242:	2300      	moveq	r3, #0
 800b244:	b2db      	uxtb	r3, r3
 800b246:	2b00      	cmp	r3, #0
 800b248:	d001      	beq.n	800b24e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b24a:	2301      	movs	r3, #1
 800b24c:	e07c      	b.n	800b348 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d104      	bne.n	800b25e <HAL_TIM_PWM_Start+0x82>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2202      	movs	r2, #2
 800b258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b25c:	e013      	b.n	800b286 <HAL_TIM_PWM_Start+0xaa>
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	2b04      	cmp	r3, #4
 800b262:	d104      	bne.n	800b26e <HAL_TIM_PWM_Start+0x92>
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2202      	movs	r2, #2
 800b268:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b26c:	e00b      	b.n	800b286 <HAL_TIM_PWM_Start+0xaa>
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	2b08      	cmp	r3, #8
 800b272:	d104      	bne.n	800b27e <HAL_TIM_PWM_Start+0xa2>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2202      	movs	r2, #2
 800b278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b27c:	e003      	b.n	800b286 <HAL_TIM_PWM_Start+0xaa>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2202      	movs	r2, #2
 800b282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	2201      	movs	r2, #1
 800b28c:	6839      	ldr	r1, [r7, #0]
 800b28e:	4618      	mov	r0, r3
 800b290:	f000 fe04 	bl	800be9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	4a2d      	ldr	r2, [pc, #180]	; (800b350 <HAL_TIM_PWM_Start+0x174>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d004      	beq.n	800b2a8 <HAL_TIM_PWM_Start+0xcc>
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	4a2c      	ldr	r2, [pc, #176]	; (800b354 <HAL_TIM_PWM_Start+0x178>)
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	d101      	bne.n	800b2ac <HAL_TIM_PWM_Start+0xd0>
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	e000      	b.n	800b2ae <HAL_TIM_PWM_Start+0xd2>
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d007      	beq.n	800b2c2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b2c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	4a22      	ldr	r2, [pc, #136]	; (800b350 <HAL_TIM_PWM_Start+0x174>)
 800b2c8:	4293      	cmp	r3, r2
 800b2ca:	d022      	beq.n	800b312 <HAL_TIM_PWM_Start+0x136>
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2d4:	d01d      	beq.n	800b312 <HAL_TIM_PWM_Start+0x136>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	4a1f      	ldr	r2, [pc, #124]	; (800b358 <HAL_TIM_PWM_Start+0x17c>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d018      	beq.n	800b312 <HAL_TIM_PWM_Start+0x136>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	4a1d      	ldr	r2, [pc, #116]	; (800b35c <HAL_TIM_PWM_Start+0x180>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d013      	beq.n	800b312 <HAL_TIM_PWM_Start+0x136>
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	4a1c      	ldr	r2, [pc, #112]	; (800b360 <HAL_TIM_PWM_Start+0x184>)
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d00e      	beq.n	800b312 <HAL_TIM_PWM_Start+0x136>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	4a16      	ldr	r2, [pc, #88]	; (800b354 <HAL_TIM_PWM_Start+0x178>)
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	d009      	beq.n	800b312 <HAL_TIM_PWM_Start+0x136>
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	4a18      	ldr	r2, [pc, #96]	; (800b364 <HAL_TIM_PWM_Start+0x188>)
 800b304:	4293      	cmp	r3, r2
 800b306:	d004      	beq.n	800b312 <HAL_TIM_PWM_Start+0x136>
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	4a16      	ldr	r2, [pc, #88]	; (800b368 <HAL_TIM_PWM_Start+0x18c>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	d111      	bne.n	800b336 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	689b      	ldr	r3, [r3, #8]
 800b318:	f003 0307 	and.w	r3, r3, #7
 800b31c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2b06      	cmp	r3, #6
 800b322:	d010      	beq.n	800b346 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	681a      	ldr	r2, [r3, #0]
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f042 0201 	orr.w	r2, r2, #1
 800b332:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b334:	e007      	b.n	800b346 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	681a      	ldr	r2, [r3, #0]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f042 0201 	orr.w	r2, r2, #1
 800b344:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b346:	2300      	movs	r3, #0
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3710      	adds	r7, #16
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}
 800b350:	40010000 	.word	0x40010000
 800b354:	40010400 	.word	0x40010400
 800b358:	40000400 	.word	0x40000400
 800b35c:	40000800 	.word	0x40000800
 800b360:	40000c00 	.word	0x40000c00
 800b364:	40014000 	.word	0x40014000
 800b368:	40001800 	.word	0x40001800

0800b36c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b084      	sub	sp, #16
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	68db      	ldr	r3, [r3, #12]
 800b37a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	691b      	ldr	r3, [r3, #16]
 800b382:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	f003 0302 	and.w	r3, r3, #2
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d020      	beq.n	800b3d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	f003 0302 	and.w	r3, r3, #2
 800b394:	2b00      	cmp	r3, #0
 800b396:	d01b      	beq.n	800b3d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	f06f 0202 	mvn.w	r2, #2
 800b3a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2201      	movs	r2, #1
 800b3a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	699b      	ldr	r3, [r3, #24]
 800b3ae:	f003 0303 	and.w	r3, r3, #3
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d003      	beq.n	800b3be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f000 fa5b 	bl	800b872 <HAL_TIM_IC_CaptureCallback>
 800b3bc:	e005      	b.n	800b3ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f000 fa4d 	bl	800b85e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f000 fa5e 	bl	800b886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	f003 0304 	and.w	r3, r3, #4
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d020      	beq.n	800b41c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	f003 0304 	and.w	r3, r3, #4
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d01b      	beq.n	800b41c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f06f 0204 	mvn.w	r2, #4
 800b3ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2202      	movs	r2, #2
 800b3f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	699b      	ldr	r3, [r3, #24]
 800b3fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d003      	beq.n	800b40a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 fa35 	bl	800b872 <HAL_TIM_IC_CaptureCallback>
 800b408:	e005      	b.n	800b416 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	f000 fa27 	bl	800b85e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f000 fa38 	bl	800b886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2200      	movs	r2, #0
 800b41a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	f003 0308 	and.w	r3, r3, #8
 800b422:	2b00      	cmp	r3, #0
 800b424:	d020      	beq.n	800b468 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	f003 0308 	and.w	r3, r3, #8
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d01b      	beq.n	800b468 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f06f 0208 	mvn.w	r2, #8
 800b438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2204      	movs	r2, #4
 800b43e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	69db      	ldr	r3, [r3, #28]
 800b446:	f003 0303 	and.w	r3, r3, #3
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d003      	beq.n	800b456 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f000 fa0f 	bl	800b872 <HAL_TIM_IC_CaptureCallback>
 800b454:	e005      	b.n	800b462 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f000 fa01 	bl	800b85e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f000 fa12 	bl	800b886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2200      	movs	r2, #0
 800b466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	f003 0310 	and.w	r3, r3, #16
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d020      	beq.n	800b4b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	f003 0310 	and.w	r3, r3, #16
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d01b      	beq.n	800b4b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f06f 0210 	mvn.w	r2, #16
 800b484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2208      	movs	r2, #8
 800b48a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	69db      	ldr	r3, [r3, #28]
 800b492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b496:	2b00      	cmp	r3, #0
 800b498:	d003      	beq.n	800b4a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f000 f9e9 	bl	800b872 <HAL_TIM_IC_CaptureCallback>
 800b4a0:	e005      	b.n	800b4ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f000 f9db 	bl	800b85e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f000 f9ec 	bl	800b886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	f003 0301 	and.w	r3, r3, #1
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d00c      	beq.n	800b4d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	f003 0301 	and.w	r3, r3, #1
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d007      	beq.n	800b4d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f06f 0201 	mvn.w	r2, #1
 800b4d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f7f8 faee 	bl	8003ab4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d00c      	beq.n	800b4fc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d007      	beq.n	800b4fc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b4f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f000 fdce 	bl	800c098 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b502:	2b00      	cmp	r3, #0
 800b504:	d00c      	beq.n	800b520 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d007      	beq.n	800b520 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f000 f9bd 	bl	800b89a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	f003 0320 	and.w	r3, r3, #32
 800b526:	2b00      	cmp	r3, #0
 800b528:	d00c      	beq.n	800b544 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	f003 0320 	and.w	r3, r3, #32
 800b530:	2b00      	cmp	r3, #0
 800b532:	d007      	beq.n	800b544 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f06f 0220 	mvn.w	r2, #32
 800b53c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f000 fda0 	bl	800c084 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b544:	bf00      	nop
 800b546:	3710      	adds	r7, #16
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b086      	sub	sp, #24
 800b550:	af00      	add	r7, sp, #0
 800b552:	60f8      	str	r0, [r7, #12]
 800b554:	60b9      	str	r1, [r7, #8]
 800b556:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b558:	2300      	movs	r3, #0
 800b55a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b562:	2b01      	cmp	r3, #1
 800b564:	d101      	bne.n	800b56a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b566:	2302      	movs	r3, #2
 800b568:	e0ae      	b.n	800b6c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	2201      	movs	r2, #1
 800b56e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2b0c      	cmp	r3, #12
 800b576:	f200 809f 	bhi.w	800b6b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b57a:	a201      	add	r2, pc, #4	; (adr r2, 800b580 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b57c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b580:	0800b5b5 	.word	0x0800b5b5
 800b584:	0800b6b9 	.word	0x0800b6b9
 800b588:	0800b6b9 	.word	0x0800b6b9
 800b58c:	0800b6b9 	.word	0x0800b6b9
 800b590:	0800b5f5 	.word	0x0800b5f5
 800b594:	0800b6b9 	.word	0x0800b6b9
 800b598:	0800b6b9 	.word	0x0800b6b9
 800b59c:	0800b6b9 	.word	0x0800b6b9
 800b5a0:	0800b637 	.word	0x0800b637
 800b5a4:	0800b6b9 	.word	0x0800b6b9
 800b5a8:	0800b6b9 	.word	0x0800b6b9
 800b5ac:	0800b6b9 	.word	0x0800b6b9
 800b5b0:	0800b677 	.word	0x0800b677
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	68b9      	ldr	r1, [r7, #8]
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f000 fa24 	bl	800ba08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	699a      	ldr	r2, [r3, #24]
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f042 0208 	orr.w	r2, r2, #8
 800b5ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	699a      	ldr	r2, [r3, #24]
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f022 0204 	bic.w	r2, r2, #4
 800b5de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	6999      	ldr	r1, [r3, #24]
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	691a      	ldr	r2, [r3, #16]
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	430a      	orrs	r2, r1
 800b5f0:	619a      	str	r2, [r3, #24]
      break;
 800b5f2:	e064      	b.n	800b6be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	68b9      	ldr	r1, [r7, #8]
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f000 fa74 	bl	800bae8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	699a      	ldr	r2, [r3, #24]
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b60e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	699a      	ldr	r2, [r3, #24]
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b61e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	6999      	ldr	r1, [r3, #24]
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	691b      	ldr	r3, [r3, #16]
 800b62a:	021a      	lsls	r2, r3, #8
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	430a      	orrs	r2, r1
 800b632:	619a      	str	r2, [r3, #24]
      break;
 800b634:	e043      	b.n	800b6be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	68b9      	ldr	r1, [r7, #8]
 800b63c:	4618      	mov	r0, r3
 800b63e:	f000 fac9 	bl	800bbd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	69da      	ldr	r2, [r3, #28]
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f042 0208 	orr.w	r2, r2, #8
 800b650:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	69da      	ldr	r2, [r3, #28]
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f022 0204 	bic.w	r2, r2, #4
 800b660:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	69d9      	ldr	r1, [r3, #28]
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	691a      	ldr	r2, [r3, #16]
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	430a      	orrs	r2, r1
 800b672:	61da      	str	r2, [r3, #28]
      break;
 800b674:	e023      	b.n	800b6be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	68b9      	ldr	r1, [r7, #8]
 800b67c:	4618      	mov	r0, r3
 800b67e:	f000 fb1d 	bl	800bcbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	69da      	ldr	r2, [r3, #28]
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b690:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	69da      	ldr	r2, [r3, #28]
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b6a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	69d9      	ldr	r1, [r3, #28]
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	691b      	ldr	r3, [r3, #16]
 800b6ac:	021a      	lsls	r2, r3, #8
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	430a      	orrs	r2, r1
 800b6b4:	61da      	str	r2, [r3, #28]
      break;
 800b6b6:	e002      	b.n	800b6be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	75fb      	strb	r3, [r7, #23]
      break;
 800b6bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b6c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3718      	adds	r7, #24
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}

0800b6d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b084      	sub	sp, #16
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
 800b6d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b6e4:	2b01      	cmp	r3, #1
 800b6e6:	d101      	bne.n	800b6ec <HAL_TIM_ConfigClockSource+0x1c>
 800b6e8:	2302      	movs	r3, #2
 800b6ea:	e0b4      	b.n	800b856 <HAL_TIM_ConfigClockSource+0x186>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2202      	movs	r2, #2
 800b6f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	689b      	ldr	r3, [r3, #8]
 800b702:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b70a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b712:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	68ba      	ldr	r2, [r7, #8]
 800b71a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b724:	d03e      	beq.n	800b7a4 <HAL_TIM_ConfigClockSource+0xd4>
 800b726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b72a:	f200 8087 	bhi.w	800b83c <HAL_TIM_ConfigClockSource+0x16c>
 800b72e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b732:	f000 8086 	beq.w	800b842 <HAL_TIM_ConfigClockSource+0x172>
 800b736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b73a:	d87f      	bhi.n	800b83c <HAL_TIM_ConfigClockSource+0x16c>
 800b73c:	2b70      	cmp	r3, #112	; 0x70
 800b73e:	d01a      	beq.n	800b776 <HAL_TIM_ConfigClockSource+0xa6>
 800b740:	2b70      	cmp	r3, #112	; 0x70
 800b742:	d87b      	bhi.n	800b83c <HAL_TIM_ConfigClockSource+0x16c>
 800b744:	2b60      	cmp	r3, #96	; 0x60
 800b746:	d050      	beq.n	800b7ea <HAL_TIM_ConfigClockSource+0x11a>
 800b748:	2b60      	cmp	r3, #96	; 0x60
 800b74a:	d877      	bhi.n	800b83c <HAL_TIM_ConfigClockSource+0x16c>
 800b74c:	2b50      	cmp	r3, #80	; 0x50
 800b74e:	d03c      	beq.n	800b7ca <HAL_TIM_ConfigClockSource+0xfa>
 800b750:	2b50      	cmp	r3, #80	; 0x50
 800b752:	d873      	bhi.n	800b83c <HAL_TIM_ConfigClockSource+0x16c>
 800b754:	2b40      	cmp	r3, #64	; 0x40
 800b756:	d058      	beq.n	800b80a <HAL_TIM_ConfigClockSource+0x13a>
 800b758:	2b40      	cmp	r3, #64	; 0x40
 800b75a:	d86f      	bhi.n	800b83c <HAL_TIM_ConfigClockSource+0x16c>
 800b75c:	2b30      	cmp	r3, #48	; 0x30
 800b75e:	d064      	beq.n	800b82a <HAL_TIM_ConfigClockSource+0x15a>
 800b760:	2b30      	cmp	r3, #48	; 0x30
 800b762:	d86b      	bhi.n	800b83c <HAL_TIM_ConfigClockSource+0x16c>
 800b764:	2b20      	cmp	r3, #32
 800b766:	d060      	beq.n	800b82a <HAL_TIM_ConfigClockSource+0x15a>
 800b768:	2b20      	cmp	r3, #32
 800b76a:	d867      	bhi.n	800b83c <HAL_TIM_ConfigClockSource+0x16c>
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d05c      	beq.n	800b82a <HAL_TIM_ConfigClockSource+0x15a>
 800b770:	2b10      	cmp	r3, #16
 800b772:	d05a      	beq.n	800b82a <HAL_TIM_ConfigClockSource+0x15a>
 800b774:	e062      	b.n	800b83c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b786:	f000 fb69 	bl	800be5c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	689b      	ldr	r3, [r3, #8]
 800b790:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b798:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	68ba      	ldr	r2, [r7, #8]
 800b7a0:	609a      	str	r2, [r3, #8]
      break;
 800b7a2:	e04f      	b.n	800b844 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b7b4:	f000 fb52 	bl	800be5c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	689a      	ldr	r2, [r3, #8]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b7c6:	609a      	str	r2, [r3, #8]
      break;
 800b7c8:	e03c      	b.n	800b844 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	f000 fac6 	bl	800bd68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	2150      	movs	r1, #80	; 0x50
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f000 fb1f 	bl	800be26 <TIM_ITRx_SetConfig>
      break;
 800b7e8:	e02c      	b.n	800b844 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b7f6:	461a      	mov	r2, r3
 800b7f8:	f000 fae5 	bl	800bdc6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	2160      	movs	r1, #96	; 0x60
 800b802:	4618      	mov	r0, r3
 800b804:	f000 fb0f 	bl	800be26 <TIM_ITRx_SetConfig>
      break;
 800b808:	e01c      	b.n	800b844 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b816:	461a      	mov	r2, r3
 800b818:	f000 faa6 	bl	800bd68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	2140      	movs	r1, #64	; 0x40
 800b822:	4618      	mov	r0, r3
 800b824:	f000 faff 	bl	800be26 <TIM_ITRx_SetConfig>
      break;
 800b828:	e00c      	b.n	800b844 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681a      	ldr	r2, [r3, #0]
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	4619      	mov	r1, r3
 800b834:	4610      	mov	r0, r2
 800b836:	f000 faf6 	bl	800be26 <TIM_ITRx_SetConfig>
      break;
 800b83a:	e003      	b.n	800b844 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b83c:	2301      	movs	r3, #1
 800b83e:	73fb      	strb	r3, [r7, #15]
      break;
 800b840:	e000      	b.n	800b844 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b842:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2201      	movs	r2, #1
 800b848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2200      	movs	r2, #0
 800b850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b854:	7bfb      	ldrb	r3, [r7, #15]
}
 800b856:	4618      	mov	r0, r3
 800b858:	3710      	adds	r7, #16
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}

0800b85e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b85e:	b480      	push	{r7}
 800b860:	b083      	sub	sp, #12
 800b862:	af00      	add	r7, sp, #0
 800b864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b866:	bf00      	nop
 800b868:	370c      	adds	r7, #12
 800b86a:	46bd      	mov	sp, r7
 800b86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b870:	4770      	bx	lr

0800b872 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b872:	b480      	push	{r7}
 800b874:	b083      	sub	sp, #12
 800b876:	af00      	add	r7, sp, #0
 800b878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b87a:	bf00      	nop
 800b87c:	370c      	adds	r7, #12
 800b87e:	46bd      	mov	sp, r7
 800b880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b884:	4770      	bx	lr

0800b886 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b886:	b480      	push	{r7}
 800b888:	b083      	sub	sp, #12
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b88e:	bf00      	nop
 800b890:	370c      	adds	r7, #12
 800b892:	46bd      	mov	sp, r7
 800b894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b898:	4770      	bx	lr

0800b89a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b89a:	b480      	push	{r7}
 800b89c:	b083      	sub	sp, #12
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b8a2:	bf00      	nop
 800b8a4:	370c      	adds	r7, #12
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ac:	4770      	bx	lr
	...

0800b8b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b085      	sub	sp, #20
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
 800b8b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	4a46      	ldr	r2, [pc, #280]	; (800b9dc <TIM_Base_SetConfig+0x12c>)
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d013      	beq.n	800b8f0 <TIM_Base_SetConfig+0x40>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8ce:	d00f      	beq.n	800b8f0 <TIM_Base_SetConfig+0x40>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	4a43      	ldr	r2, [pc, #268]	; (800b9e0 <TIM_Base_SetConfig+0x130>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d00b      	beq.n	800b8f0 <TIM_Base_SetConfig+0x40>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	4a42      	ldr	r2, [pc, #264]	; (800b9e4 <TIM_Base_SetConfig+0x134>)
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	d007      	beq.n	800b8f0 <TIM_Base_SetConfig+0x40>
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	4a41      	ldr	r2, [pc, #260]	; (800b9e8 <TIM_Base_SetConfig+0x138>)
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d003      	beq.n	800b8f0 <TIM_Base_SetConfig+0x40>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	4a40      	ldr	r2, [pc, #256]	; (800b9ec <TIM_Base_SetConfig+0x13c>)
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	d108      	bne.n	800b902 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	685b      	ldr	r3, [r3, #4]
 800b8fc:	68fa      	ldr	r2, [r7, #12]
 800b8fe:	4313      	orrs	r3, r2
 800b900:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	4a35      	ldr	r2, [pc, #212]	; (800b9dc <TIM_Base_SetConfig+0x12c>)
 800b906:	4293      	cmp	r3, r2
 800b908:	d02b      	beq.n	800b962 <TIM_Base_SetConfig+0xb2>
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b910:	d027      	beq.n	800b962 <TIM_Base_SetConfig+0xb2>
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	4a32      	ldr	r2, [pc, #200]	; (800b9e0 <TIM_Base_SetConfig+0x130>)
 800b916:	4293      	cmp	r3, r2
 800b918:	d023      	beq.n	800b962 <TIM_Base_SetConfig+0xb2>
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	4a31      	ldr	r2, [pc, #196]	; (800b9e4 <TIM_Base_SetConfig+0x134>)
 800b91e:	4293      	cmp	r3, r2
 800b920:	d01f      	beq.n	800b962 <TIM_Base_SetConfig+0xb2>
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	4a30      	ldr	r2, [pc, #192]	; (800b9e8 <TIM_Base_SetConfig+0x138>)
 800b926:	4293      	cmp	r3, r2
 800b928:	d01b      	beq.n	800b962 <TIM_Base_SetConfig+0xb2>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	4a2f      	ldr	r2, [pc, #188]	; (800b9ec <TIM_Base_SetConfig+0x13c>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d017      	beq.n	800b962 <TIM_Base_SetConfig+0xb2>
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	4a2e      	ldr	r2, [pc, #184]	; (800b9f0 <TIM_Base_SetConfig+0x140>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d013      	beq.n	800b962 <TIM_Base_SetConfig+0xb2>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	4a2d      	ldr	r2, [pc, #180]	; (800b9f4 <TIM_Base_SetConfig+0x144>)
 800b93e:	4293      	cmp	r3, r2
 800b940:	d00f      	beq.n	800b962 <TIM_Base_SetConfig+0xb2>
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	4a2c      	ldr	r2, [pc, #176]	; (800b9f8 <TIM_Base_SetConfig+0x148>)
 800b946:	4293      	cmp	r3, r2
 800b948:	d00b      	beq.n	800b962 <TIM_Base_SetConfig+0xb2>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	4a2b      	ldr	r2, [pc, #172]	; (800b9fc <TIM_Base_SetConfig+0x14c>)
 800b94e:	4293      	cmp	r3, r2
 800b950:	d007      	beq.n	800b962 <TIM_Base_SetConfig+0xb2>
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	4a2a      	ldr	r2, [pc, #168]	; (800ba00 <TIM_Base_SetConfig+0x150>)
 800b956:	4293      	cmp	r3, r2
 800b958:	d003      	beq.n	800b962 <TIM_Base_SetConfig+0xb2>
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	4a29      	ldr	r2, [pc, #164]	; (800ba04 <TIM_Base_SetConfig+0x154>)
 800b95e:	4293      	cmp	r3, r2
 800b960:	d108      	bne.n	800b974 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b968:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	68db      	ldr	r3, [r3, #12]
 800b96e:	68fa      	ldr	r2, [r7, #12]
 800b970:	4313      	orrs	r3, r2
 800b972:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	695b      	ldr	r3, [r3, #20]
 800b97e:	4313      	orrs	r3, r2
 800b980:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	68fa      	ldr	r2, [r7, #12]
 800b986:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	689a      	ldr	r2, [r3, #8]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	681a      	ldr	r2, [r3, #0]
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	4a10      	ldr	r2, [pc, #64]	; (800b9dc <TIM_Base_SetConfig+0x12c>)
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d003      	beq.n	800b9a8 <TIM_Base_SetConfig+0xf8>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	4a12      	ldr	r2, [pc, #72]	; (800b9ec <TIM_Base_SetConfig+0x13c>)
 800b9a4:	4293      	cmp	r3, r2
 800b9a6:	d103      	bne.n	800b9b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	691a      	ldr	r2, [r3, #16]
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2201      	movs	r2, #1
 800b9b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	691b      	ldr	r3, [r3, #16]
 800b9ba:	f003 0301 	and.w	r3, r3, #1
 800b9be:	2b01      	cmp	r3, #1
 800b9c0:	d105      	bne.n	800b9ce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	691b      	ldr	r3, [r3, #16]
 800b9c6:	f023 0201 	bic.w	r2, r3, #1
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	611a      	str	r2, [r3, #16]
  }
}
 800b9ce:	bf00      	nop
 800b9d0:	3714      	adds	r7, #20
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d8:	4770      	bx	lr
 800b9da:	bf00      	nop
 800b9dc:	40010000 	.word	0x40010000
 800b9e0:	40000400 	.word	0x40000400
 800b9e4:	40000800 	.word	0x40000800
 800b9e8:	40000c00 	.word	0x40000c00
 800b9ec:	40010400 	.word	0x40010400
 800b9f0:	40014000 	.word	0x40014000
 800b9f4:	40014400 	.word	0x40014400
 800b9f8:	40014800 	.word	0x40014800
 800b9fc:	40001800 	.word	0x40001800
 800ba00:	40001c00 	.word	0x40001c00
 800ba04:	40002000 	.word	0x40002000

0800ba08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b087      	sub	sp, #28
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
 800ba10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6a1b      	ldr	r3, [r3, #32]
 800ba16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	6a1b      	ldr	r3, [r3, #32]
 800ba1c:	f023 0201 	bic.w	r2, r3, #1
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	685b      	ldr	r3, [r3, #4]
 800ba28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	699b      	ldr	r3, [r3, #24]
 800ba2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	f023 0303 	bic.w	r3, r3, #3
 800ba3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	68fa      	ldr	r2, [r7, #12]
 800ba46:	4313      	orrs	r3, r2
 800ba48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	f023 0302 	bic.w	r3, r3, #2
 800ba50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	689b      	ldr	r3, [r3, #8]
 800ba56:	697a      	ldr	r2, [r7, #20]
 800ba58:	4313      	orrs	r3, r2
 800ba5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	4a20      	ldr	r2, [pc, #128]	; (800bae0 <TIM_OC1_SetConfig+0xd8>)
 800ba60:	4293      	cmp	r3, r2
 800ba62:	d003      	beq.n	800ba6c <TIM_OC1_SetConfig+0x64>
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	4a1f      	ldr	r2, [pc, #124]	; (800bae4 <TIM_OC1_SetConfig+0xdc>)
 800ba68:	4293      	cmp	r3, r2
 800ba6a:	d10c      	bne.n	800ba86 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	f023 0308 	bic.w	r3, r3, #8
 800ba72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	68db      	ldr	r3, [r3, #12]
 800ba78:	697a      	ldr	r2, [r7, #20]
 800ba7a:	4313      	orrs	r3, r2
 800ba7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	f023 0304 	bic.w	r3, r3, #4
 800ba84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	4a15      	ldr	r2, [pc, #84]	; (800bae0 <TIM_OC1_SetConfig+0xd8>)
 800ba8a:	4293      	cmp	r3, r2
 800ba8c:	d003      	beq.n	800ba96 <TIM_OC1_SetConfig+0x8e>
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	4a14      	ldr	r2, [pc, #80]	; (800bae4 <TIM_OC1_SetConfig+0xdc>)
 800ba92:	4293      	cmp	r3, r2
 800ba94:	d111      	bne.n	800baba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800baa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	695b      	ldr	r3, [r3, #20]
 800baaa:	693a      	ldr	r2, [r7, #16]
 800baac:	4313      	orrs	r3, r2
 800baae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	699b      	ldr	r3, [r3, #24]
 800bab4:	693a      	ldr	r2, [r7, #16]
 800bab6:	4313      	orrs	r3, r2
 800bab8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	693a      	ldr	r2, [r7, #16]
 800babe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	68fa      	ldr	r2, [r7, #12]
 800bac4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	685a      	ldr	r2, [r3, #4]
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	697a      	ldr	r2, [r7, #20]
 800bad2:	621a      	str	r2, [r3, #32]
}
 800bad4:	bf00      	nop
 800bad6:	371c      	adds	r7, #28
 800bad8:	46bd      	mov	sp, r7
 800bada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bade:	4770      	bx	lr
 800bae0:	40010000 	.word	0x40010000
 800bae4:	40010400 	.word	0x40010400

0800bae8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bae8:	b480      	push	{r7}
 800baea:	b087      	sub	sp, #28
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
 800baf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6a1b      	ldr	r3, [r3, #32]
 800baf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6a1b      	ldr	r3, [r3, #32]
 800bafc:	f023 0210 	bic.w	r2, r3, #16
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	685b      	ldr	r3, [r3, #4]
 800bb08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	699b      	ldr	r3, [r3, #24]
 800bb0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	021b      	lsls	r3, r3, #8
 800bb26:	68fa      	ldr	r2, [r7, #12]
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	f023 0320 	bic.w	r3, r3, #32
 800bb32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	689b      	ldr	r3, [r3, #8]
 800bb38:	011b      	lsls	r3, r3, #4
 800bb3a:	697a      	ldr	r2, [r7, #20]
 800bb3c:	4313      	orrs	r3, r2
 800bb3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	4a22      	ldr	r2, [pc, #136]	; (800bbcc <TIM_OC2_SetConfig+0xe4>)
 800bb44:	4293      	cmp	r3, r2
 800bb46:	d003      	beq.n	800bb50 <TIM_OC2_SetConfig+0x68>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	4a21      	ldr	r2, [pc, #132]	; (800bbd0 <TIM_OC2_SetConfig+0xe8>)
 800bb4c:	4293      	cmp	r3, r2
 800bb4e:	d10d      	bne.n	800bb6c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bb50:	697b      	ldr	r3, [r7, #20]
 800bb52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	68db      	ldr	r3, [r3, #12]
 800bb5c:	011b      	lsls	r3, r3, #4
 800bb5e:	697a      	ldr	r2, [r7, #20]
 800bb60:	4313      	orrs	r3, r2
 800bb62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	4a17      	ldr	r2, [pc, #92]	; (800bbcc <TIM_OC2_SetConfig+0xe4>)
 800bb70:	4293      	cmp	r3, r2
 800bb72:	d003      	beq.n	800bb7c <TIM_OC2_SetConfig+0x94>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	4a16      	ldr	r2, [pc, #88]	; (800bbd0 <TIM_OC2_SetConfig+0xe8>)
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	d113      	bne.n	800bba4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bb82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bb8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	695b      	ldr	r3, [r3, #20]
 800bb90:	009b      	lsls	r3, r3, #2
 800bb92:	693a      	ldr	r2, [r7, #16]
 800bb94:	4313      	orrs	r3, r2
 800bb96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	699b      	ldr	r3, [r3, #24]
 800bb9c:	009b      	lsls	r3, r3, #2
 800bb9e:	693a      	ldr	r2, [r7, #16]
 800bba0:	4313      	orrs	r3, r2
 800bba2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	693a      	ldr	r2, [r7, #16]
 800bba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	68fa      	ldr	r2, [r7, #12]
 800bbae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	685a      	ldr	r2, [r3, #4]
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	697a      	ldr	r2, [r7, #20]
 800bbbc:	621a      	str	r2, [r3, #32]
}
 800bbbe:	bf00      	nop
 800bbc0:	371c      	adds	r7, #28
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc8:	4770      	bx	lr
 800bbca:	bf00      	nop
 800bbcc:	40010000 	.word	0x40010000
 800bbd0:	40010400 	.word	0x40010400

0800bbd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b087      	sub	sp, #28
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
 800bbdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6a1b      	ldr	r3, [r3, #32]
 800bbe2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6a1b      	ldr	r3, [r3, #32]
 800bbe8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	685b      	ldr	r3, [r3, #4]
 800bbf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	69db      	ldr	r3, [r3, #28]
 800bbfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	f023 0303 	bic.w	r3, r3, #3
 800bc0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	68fa      	ldr	r2, [r7, #12]
 800bc12:	4313      	orrs	r3, r2
 800bc14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bc1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	689b      	ldr	r3, [r3, #8]
 800bc22:	021b      	lsls	r3, r3, #8
 800bc24:	697a      	ldr	r2, [r7, #20]
 800bc26:	4313      	orrs	r3, r2
 800bc28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	4a21      	ldr	r2, [pc, #132]	; (800bcb4 <TIM_OC3_SetConfig+0xe0>)
 800bc2e:	4293      	cmp	r3, r2
 800bc30:	d003      	beq.n	800bc3a <TIM_OC3_SetConfig+0x66>
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	4a20      	ldr	r2, [pc, #128]	; (800bcb8 <TIM_OC3_SetConfig+0xe4>)
 800bc36:	4293      	cmp	r3, r2
 800bc38:	d10d      	bne.n	800bc56 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bc40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	68db      	ldr	r3, [r3, #12]
 800bc46:	021b      	lsls	r3, r3, #8
 800bc48:	697a      	ldr	r2, [r7, #20]
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bc54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	4a16      	ldr	r2, [pc, #88]	; (800bcb4 <TIM_OC3_SetConfig+0xe0>)
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	d003      	beq.n	800bc66 <TIM_OC3_SetConfig+0x92>
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	4a15      	ldr	r2, [pc, #84]	; (800bcb8 <TIM_OC3_SetConfig+0xe4>)
 800bc62:	4293      	cmp	r3, r2
 800bc64:	d113      	bne.n	800bc8e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bc74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	695b      	ldr	r3, [r3, #20]
 800bc7a:	011b      	lsls	r3, r3, #4
 800bc7c:	693a      	ldr	r2, [r7, #16]
 800bc7e:	4313      	orrs	r3, r2
 800bc80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	699b      	ldr	r3, [r3, #24]
 800bc86:	011b      	lsls	r3, r3, #4
 800bc88:	693a      	ldr	r2, [r7, #16]
 800bc8a:	4313      	orrs	r3, r2
 800bc8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	693a      	ldr	r2, [r7, #16]
 800bc92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	68fa      	ldr	r2, [r7, #12]
 800bc98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	685a      	ldr	r2, [r3, #4]
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	697a      	ldr	r2, [r7, #20]
 800bca6:	621a      	str	r2, [r3, #32]
}
 800bca8:	bf00      	nop
 800bcaa:	371c      	adds	r7, #28
 800bcac:	46bd      	mov	sp, r7
 800bcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb2:	4770      	bx	lr
 800bcb4:	40010000 	.word	0x40010000
 800bcb8:	40010400 	.word	0x40010400

0800bcbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b087      	sub	sp, #28
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6a1b      	ldr	r3, [r3, #32]
 800bcca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6a1b      	ldr	r3, [r3, #32]
 800bcd0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	69db      	ldr	r3, [r3, #28]
 800bce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bcea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bcf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	021b      	lsls	r3, r3, #8
 800bcfa:	68fa      	ldr	r2, [r7, #12]
 800bcfc:	4313      	orrs	r3, r2
 800bcfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bd00:	693b      	ldr	r3, [r7, #16]
 800bd02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bd06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	689b      	ldr	r3, [r3, #8]
 800bd0c:	031b      	lsls	r3, r3, #12
 800bd0e:	693a      	ldr	r2, [r7, #16]
 800bd10:	4313      	orrs	r3, r2
 800bd12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	4a12      	ldr	r2, [pc, #72]	; (800bd60 <TIM_OC4_SetConfig+0xa4>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d003      	beq.n	800bd24 <TIM_OC4_SetConfig+0x68>
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	4a11      	ldr	r2, [pc, #68]	; (800bd64 <TIM_OC4_SetConfig+0xa8>)
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d109      	bne.n	800bd38 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bd24:	697b      	ldr	r3, [r7, #20]
 800bd26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bd2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	695b      	ldr	r3, [r3, #20]
 800bd30:	019b      	lsls	r3, r3, #6
 800bd32:	697a      	ldr	r2, [r7, #20]
 800bd34:	4313      	orrs	r3, r2
 800bd36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	697a      	ldr	r2, [r7, #20]
 800bd3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	68fa      	ldr	r2, [r7, #12]
 800bd42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	685a      	ldr	r2, [r3, #4]
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	693a      	ldr	r2, [r7, #16]
 800bd50:	621a      	str	r2, [r3, #32]
}
 800bd52:	bf00      	nop
 800bd54:	371c      	adds	r7, #28
 800bd56:	46bd      	mov	sp, r7
 800bd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5c:	4770      	bx	lr
 800bd5e:	bf00      	nop
 800bd60:	40010000 	.word	0x40010000
 800bd64:	40010400 	.word	0x40010400

0800bd68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b087      	sub	sp, #28
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	60f8      	str	r0, [r7, #12]
 800bd70:	60b9      	str	r1, [r7, #8]
 800bd72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	6a1b      	ldr	r3, [r3, #32]
 800bd78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	6a1b      	ldr	r3, [r3, #32]
 800bd7e:	f023 0201 	bic.w	r2, r3, #1
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	699b      	ldr	r3, [r3, #24]
 800bd8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bd8c:	693b      	ldr	r3, [r7, #16]
 800bd8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bd92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	011b      	lsls	r3, r3, #4
 800bd98:	693a      	ldr	r2, [r7, #16]
 800bd9a:	4313      	orrs	r3, r2
 800bd9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	f023 030a 	bic.w	r3, r3, #10
 800bda4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bda6:	697a      	ldr	r2, [r7, #20]
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	4313      	orrs	r3, r2
 800bdac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	693a      	ldr	r2, [r7, #16]
 800bdb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	697a      	ldr	r2, [r7, #20]
 800bdb8:	621a      	str	r2, [r3, #32]
}
 800bdba:	bf00      	nop
 800bdbc:	371c      	adds	r7, #28
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc4:	4770      	bx	lr

0800bdc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bdc6:	b480      	push	{r7}
 800bdc8:	b087      	sub	sp, #28
 800bdca:	af00      	add	r7, sp, #0
 800bdcc:	60f8      	str	r0, [r7, #12]
 800bdce:	60b9      	str	r1, [r7, #8]
 800bdd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	6a1b      	ldr	r3, [r3, #32]
 800bdd6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	6a1b      	ldr	r3, [r3, #32]
 800bddc:	f023 0210 	bic.w	r2, r3, #16
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	699b      	ldr	r3, [r3, #24]
 800bde8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bdf0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	031b      	lsls	r3, r3, #12
 800bdf6:	693a      	ldr	r2, [r7, #16]
 800bdf8:	4313      	orrs	r3, r2
 800bdfa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bdfc:	697b      	ldr	r3, [r7, #20]
 800bdfe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800be02:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	011b      	lsls	r3, r3, #4
 800be08:	697a      	ldr	r2, [r7, #20]
 800be0a:	4313      	orrs	r3, r2
 800be0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	693a      	ldr	r2, [r7, #16]
 800be12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	697a      	ldr	r2, [r7, #20]
 800be18:	621a      	str	r2, [r3, #32]
}
 800be1a:	bf00      	nop
 800be1c:	371c      	adds	r7, #28
 800be1e:	46bd      	mov	sp, r7
 800be20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be24:	4770      	bx	lr

0800be26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800be26:	b480      	push	{r7}
 800be28:	b085      	sub	sp, #20
 800be2a:	af00      	add	r7, sp, #0
 800be2c:	6078      	str	r0, [r7, #4]
 800be2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	689b      	ldr	r3, [r3, #8]
 800be34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800be3e:	683a      	ldr	r2, [r7, #0]
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	4313      	orrs	r3, r2
 800be44:	f043 0307 	orr.w	r3, r3, #7
 800be48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	68fa      	ldr	r2, [r7, #12]
 800be4e:	609a      	str	r2, [r3, #8]
}
 800be50:	bf00      	nop
 800be52:	3714      	adds	r7, #20
 800be54:	46bd      	mov	sp, r7
 800be56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5a:	4770      	bx	lr

0800be5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800be5c:	b480      	push	{r7}
 800be5e:	b087      	sub	sp, #28
 800be60:	af00      	add	r7, sp, #0
 800be62:	60f8      	str	r0, [r7, #12]
 800be64:	60b9      	str	r1, [r7, #8]
 800be66:	607a      	str	r2, [r7, #4]
 800be68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	689b      	ldr	r3, [r3, #8]
 800be6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800be76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	021a      	lsls	r2, r3, #8
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	431a      	orrs	r2, r3
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	4313      	orrs	r3, r2
 800be84:	697a      	ldr	r2, [r7, #20]
 800be86:	4313      	orrs	r3, r2
 800be88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	697a      	ldr	r2, [r7, #20]
 800be8e:	609a      	str	r2, [r3, #8]
}
 800be90:	bf00      	nop
 800be92:	371c      	adds	r7, #28
 800be94:	46bd      	mov	sp, r7
 800be96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9a:	4770      	bx	lr

0800be9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b087      	sub	sp, #28
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	60f8      	str	r0, [r7, #12]
 800bea4:	60b9      	str	r1, [r7, #8]
 800bea6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	f003 031f 	and.w	r3, r3, #31
 800beae:	2201      	movs	r2, #1
 800beb0:	fa02 f303 	lsl.w	r3, r2, r3
 800beb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	6a1a      	ldr	r2, [r3, #32]
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	43db      	mvns	r3, r3
 800bebe:	401a      	ands	r2, r3
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	6a1a      	ldr	r2, [r3, #32]
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	f003 031f 	and.w	r3, r3, #31
 800bece:	6879      	ldr	r1, [r7, #4]
 800bed0:	fa01 f303 	lsl.w	r3, r1, r3
 800bed4:	431a      	orrs	r2, r3
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	621a      	str	r2, [r3, #32]
}
 800beda:	bf00      	nop
 800bedc:	371c      	adds	r7, #28
 800bede:	46bd      	mov	sp, r7
 800bee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee4:	4770      	bx	lr
	...

0800bee8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bee8:	b480      	push	{r7}
 800beea:	b085      	sub	sp, #20
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
 800bef0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bef8:	2b01      	cmp	r3, #1
 800befa:	d101      	bne.n	800bf00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800befc:	2302      	movs	r3, #2
 800befe:	e05a      	b.n	800bfb6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2201      	movs	r2, #1
 800bf04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2202      	movs	r2, #2
 800bf0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	685b      	ldr	r3, [r3, #4]
 800bf16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	689b      	ldr	r3, [r3, #8]
 800bf1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	68fa      	ldr	r2, [r7, #12]
 800bf2e:	4313      	orrs	r3, r2
 800bf30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	68fa      	ldr	r2, [r7, #12]
 800bf38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	4a21      	ldr	r2, [pc, #132]	; (800bfc4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800bf40:	4293      	cmp	r3, r2
 800bf42:	d022      	beq.n	800bf8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf4c:	d01d      	beq.n	800bf8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	4a1d      	ldr	r2, [pc, #116]	; (800bfc8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800bf54:	4293      	cmp	r3, r2
 800bf56:	d018      	beq.n	800bf8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	4a1b      	ldr	r2, [pc, #108]	; (800bfcc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	d013      	beq.n	800bf8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	4a1a      	ldr	r2, [pc, #104]	; (800bfd0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d00e      	beq.n	800bf8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	4a18      	ldr	r2, [pc, #96]	; (800bfd4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800bf72:	4293      	cmp	r3, r2
 800bf74:	d009      	beq.n	800bf8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	4a17      	ldr	r2, [pc, #92]	; (800bfd8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d004      	beq.n	800bf8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	4a15      	ldr	r2, [pc, #84]	; (800bfdc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bf86:	4293      	cmp	r3, r2
 800bf88:	d10c      	bne.n	800bfa4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	685b      	ldr	r3, [r3, #4]
 800bf96:	68ba      	ldr	r2, [r7, #8]
 800bf98:	4313      	orrs	r3, r2
 800bf9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	68ba      	ldr	r2, [r7, #8]
 800bfa2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bfb4:	2300      	movs	r3, #0
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	3714      	adds	r7, #20
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc0:	4770      	bx	lr
 800bfc2:	bf00      	nop
 800bfc4:	40010000 	.word	0x40010000
 800bfc8:	40000400 	.word	0x40000400
 800bfcc:	40000800 	.word	0x40000800
 800bfd0:	40000c00 	.word	0x40000c00
 800bfd4:	40010400 	.word	0x40010400
 800bfd8:	40014000 	.word	0x40014000
 800bfdc:	40001800 	.word	0x40001800

0800bfe0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	b085      	sub	sp, #20
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
 800bfe8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bfea:	2300      	movs	r3, #0
 800bfec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bff4:	2b01      	cmp	r3, #1
 800bff6:	d101      	bne.n	800bffc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bff8:	2302      	movs	r3, #2
 800bffa:	e03d      	b.n	800c078 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2201      	movs	r2, #1
 800c000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	68db      	ldr	r3, [r3, #12]
 800c00e:	4313      	orrs	r3, r2
 800c010:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	689b      	ldr	r3, [r3, #8]
 800c01c:	4313      	orrs	r3, r2
 800c01e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	685b      	ldr	r3, [r3, #4]
 800c02a:	4313      	orrs	r3, r2
 800c02c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	4313      	orrs	r3, r2
 800c03a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	691b      	ldr	r3, [r3, #16]
 800c046:	4313      	orrs	r3, r2
 800c048:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	695b      	ldr	r3, [r3, #20]
 800c054:	4313      	orrs	r3, r2
 800c056:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	69db      	ldr	r3, [r3, #28]
 800c062:	4313      	orrs	r3, r2
 800c064:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	68fa      	ldr	r2, [r7, #12]
 800c06c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2200      	movs	r2, #0
 800c072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c076:	2300      	movs	r3, #0
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3714      	adds	r7, #20
 800c07c:	46bd      	mov	sp, r7
 800c07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c082:	4770      	bx	lr

0800c084 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c084:	b480      	push	{r7}
 800c086:	b083      	sub	sp, #12
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c08c:	bf00      	nop
 800c08e:	370c      	adds	r7, #12
 800c090:	46bd      	mov	sp, r7
 800c092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c096:	4770      	bx	lr

0800c098 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c098:	b480      	push	{r7}
 800c09a:	b083      	sub	sp, #12
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c0a0:	bf00      	nop
 800c0a2:	370c      	adds	r7, #12
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0aa:	4770      	bx	lr

0800c0ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d101      	bne.n	800c0be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	e042      	b.n	800c144 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c0c4:	b2db      	uxtb	r3, r3
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d106      	bne.n	800c0d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f7fc f830 	bl	8008138 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2224      	movs	r2, #36	; 0x24
 800c0dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	68da      	ldr	r2, [r3, #12]
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c0ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f000 ff37 	bl	800cf64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	691a      	ldr	r2, [r3, #16]
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c104:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	695a      	ldr	r2, [r3, #20]
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c114:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	68da      	ldr	r2, [r3, #12]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c124:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2200      	movs	r2, #0
 800c12a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2220      	movs	r2, #32
 800c130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2220      	movs	r2, #32
 800c138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2200      	movs	r2, #0
 800c140:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c142:	2300      	movs	r3, #0
}
 800c144:	4618      	mov	r0, r3
 800c146:	3708      	adds	r7, #8
 800c148:	46bd      	mov	sp, r7
 800c14a:	bd80      	pop	{r7, pc}

0800c14c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b08c      	sub	sp, #48	; 0x30
 800c150:	af00      	add	r7, sp, #0
 800c152:	60f8      	str	r0, [r7, #12]
 800c154:	60b9      	str	r1, [r7, #8]
 800c156:	4613      	mov	r3, r2
 800c158:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c160:	b2db      	uxtb	r3, r3
 800c162:	2b20      	cmp	r3, #32
 800c164:	d156      	bne.n	800c214 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800c166:	68bb      	ldr	r3, [r7, #8]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d002      	beq.n	800c172 <HAL_UART_Transmit_DMA+0x26>
 800c16c:	88fb      	ldrh	r3, [r7, #6]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d101      	bne.n	800c176 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800c172:	2301      	movs	r3, #1
 800c174:	e04f      	b.n	800c216 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800c176:	68ba      	ldr	r2, [r7, #8]
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	88fa      	ldrh	r2, [r7, #6]
 800c180:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	88fa      	ldrh	r2, [r7, #6]
 800c186:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	2200      	movs	r2, #0
 800c18c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	2221      	movs	r2, #33	; 0x21
 800c192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c19a:	4a21      	ldr	r2, [pc, #132]	; (800c220 <HAL_UART_Transmit_DMA+0xd4>)
 800c19c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1a2:	4a20      	ldr	r2, [pc, #128]	; (800c224 <HAL_UART_Transmit_DMA+0xd8>)
 800c1a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1aa:	4a1f      	ldr	r2, [pc, #124]	; (800c228 <HAL_UART_Transmit_DMA+0xdc>)
 800c1ac:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800c1b6:	f107 0308 	add.w	r3, r7, #8
 800c1ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800c1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c2:	6819      	ldr	r1, [r3, #0]
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	3304      	adds	r3, #4
 800c1ca:	461a      	mov	r2, r3
 800c1cc:	88fb      	ldrh	r3, [r7, #6]
 800c1ce:	f7fc fc87 	bl	8008ae0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c1da:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	3314      	adds	r3, #20
 800c1e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1e4:	69bb      	ldr	r3, [r7, #24]
 800c1e6:	e853 3f00 	ldrex	r3, [r3]
 800c1ea:	617b      	str	r3, [r7, #20]
   return(result);
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1f2:	62bb      	str	r3, [r7, #40]	; 0x28
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	3314      	adds	r3, #20
 800c1fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1fc:	627a      	str	r2, [r7, #36]	; 0x24
 800c1fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c200:	6a39      	ldr	r1, [r7, #32]
 800c202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c204:	e841 2300 	strex	r3, r2, [r1]
 800c208:	61fb      	str	r3, [r7, #28]
   return(result);
 800c20a:	69fb      	ldr	r3, [r7, #28]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d1e5      	bne.n	800c1dc <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800c210:	2300      	movs	r3, #0
 800c212:	e000      	b.n	800c216 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800c214:	2302      	movs	r3, #2
  }
}
 800c216:	4618      	mov	r0, r3
 800c218:	3730      	adds	r7, #48	; 0x30
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}
 800c21e:	bf00      	nop
 800c220:	0800c7f1 	.word	0x0800c7f1
 800c224:	0800c88b 	.word	0x0800c88b
 800c228:	0800ca0f 	.word	0x0800ca0f

0800c22c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b084      	sub	sp, #16
 800c230:	af00      	add	r7, sp, #0
 800c232:	60f8      	str	r0, [r7, #12]
 800c234:	60b9      	str	r1, [r7, #8]
 800c236:	4613      	mov	r3, r2
 800c238:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c240:	b2db      	uxtb	r3, r3
 800c242:	2b20      	cmp	r3, #32
 800c244:	d112      	bne.n	800c26c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d002      	beq.n	800c252 <HAL_UART_Receive_DMA+0x26>
 800c24c:	88fb      	ldrh	r3, [r7, #6]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d101      	bne.n	800c256 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800c252:	2301      	movs	r3, #1
 800c254:	e00b      	b.n	800c26e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	2200      	movs	r2, #0
 800c25a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c25c:	88fb      	ldrh	r3, [r7, #6]
 800c25e:	461a      	mov	r2, r3
 800c260:	68b9      	ldr	r1, [r7, #8]
 800c262:	68f8      	ldr	r0, [r7, #12]
 800c264:	f000 fc1e 	bl	800caa4 <UART_Start_Receive_DMA>
 800c268:	4603      	mov	r3, r0
 800c26a:	e000      	b.n	800c26e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800c26c:	2302      	movs	r3, #2
  }
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3710      	adds	r7, #16
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}
	...

0800c278 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b0ba      	sub	sp, #232	; 0xe8
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	68db      	ldr	r3, [r3, #12]
 800c290:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	695b      	ldr	r3, [r3, #20]
 800c29a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c2aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2ae:	f003 030f 	and.w	r3, r3, #15
 800c2b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c2b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d10f      	bne.n	800c2de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c2be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2c2:	f003 0320 	and.w	r3, r3, #32
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d009      	beq.n	800c2de <HAL_UART_IRQHandler+0x66>
 800c2ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2ce:	f003 0320 	and.w	r3, r3, #32
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d003      	beq.n	800c2de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f000 fd85 	bl	800cde6 <UART_Receive_IT>
      return;
 800c2dc:	e25b      	b.n	800c796 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c2de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	f000 80de 	beq.w	800c4a4 <HAL_UART_IRQHandler+0x22c>
 800c2e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c2ec:	f003 0301 	and.w	r3, r3, #1
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d106      	bne.n	800c302 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c2f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2f8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	f000 80d1 	beq.w	800c4a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c306:	f003 0301 	and.w	r3, r3, #1
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d00b      	beq.n	800c326 <HAL_UART_IRQHandler+0xae>
 800c30e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c316:	2b00      	cmp	r3, #0
 800c318:	d005      	beq.n	800c326 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c31e:	f043 0201 	orr.w	r2, r3, #1
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c32a:	f003 0304 	and.w	r3, r3, #4
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d00b      	beq.n	800c34a <HAL_UART_IRQHandler+0xd2>
 800c332:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c336:	f003 0301 	and.w	r3, r3, #1
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d005      	beq.n	800c34a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c342:	f043 0202 	orr.w	r2, r3, #2
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c34a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c34e:	f003 0302 	and.w	r3, r3, #2
 800c352:	2b00      	cmp	r3, #0
 800c354:	d00b      	beq.n	800c36e <HAL_UART_IRQHandler+0xf6>
 800c356:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c35a:	f003 0301 	and.w	r3, r3, #1
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d005      	beq.n	800c36e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c366:	f043 0204 	orr.w	r2, r3, #4
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c36e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c372:	f003 0308 	and.w	r3, r3, #8
 800c376:	2b00      	cmp	r3, #0
 800c378:	d011      	beq.n	800c39e <HAL_UART_IRQHandler+0x126>
 800c37a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c37e:	f003 0320 	and.w	r3, r3, #32
 800c382:	2b00      	cmp	r3, #0
 800c384:	d105      	bne.n	800c392 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c386:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c38a:	f003 0301 	and.w	r3, r3, #1
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d005      	beq.n	800c39e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c396:	f043 0208 	orr.w	r2, r3, #8
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	f000 81f2 	beq.w	800c78c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c3a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3ac:	f003 0320 	and.w	r3, r3, #32
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d008      	beq.n	800c3c6 <HAL_UART_IRQHandler+0x14e>
 800c3b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3b8:	f003 0320 	and.w	r3, r3, #32
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d002      	beq.n	800c3c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f000 fd10 	bl	800cde6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	695b      	ldr	r3, [r3, #20]
 800c3cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3d0:	2b40      	cmp	r3, #64	; 0x40
 800c3d2:	bf0c      	ite	eq
 800c3d4:	2301      	moveq	r3, #1
 800c3d6:	2300      	movne	r3, #0
 800c3d8:	b2db      	uxtb	r3, r3
 800c3da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3e2:	f003 0308 	and.w	r3, r3, #8
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d103      	bne.n	800c3f2 <HAL_UART_IRQHandler+0x17a>
 800c3ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d04f      	beq.n	800c492 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f000 fc18 	bl	800cc28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	695b      	ldr	r3, [r3, #20]
 800c3fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c402:	2b40      	cmp	r3, #64	; 0x40
 800c404:	d141      	bne.n	800c48a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	3314      	adds	r3, #20
 800c40c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c410:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c414:	e853 3f00 	ldrex	r3, [r3]
 800c418:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c41c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c420:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c424:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	3314      	adds	r3, #20
 800c42e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c432:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c436:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c43a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c43e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c442:	e841 2300 	strex	r3, r2, [r1]
 800c446:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c44a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d1d9      	bne.n	800c406 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c456:	2b00      	cmp	r3, #0
 800c458:	d013      	beq.n	800c482 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c45e:	4a7e      	ldr	r2, [pc, #504]	; (800c658 <HAL_UART_IRQHandler+0x3e0>)
 800c460:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c466:	4618      	mov	r0, r3
 800c468:	f7fc fc02 	bl	8008c70 <HAL_DMA_Abort_IT>
 800c46c:	4603      	mov	r3, r0
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d016      	beq.n	800c4a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c478:	687a      	ldr	r2, [r7, #4]
 800c47a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c47c:	4610      	mov	r0, r2
 800c47e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c480:	e00e      	b.n	800c4a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f000 f99e 	bl	800c7c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c488:	e00a      	b.n	800c4a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f000 f99a 	bl	800c7c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c490:	e006      	b.n	800c4a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c492:	6878      	ldr	r0, [r7, #4]
 800c494:	f000 f996 	bl	800c7c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2200      	movs	r2, #0
 800c49c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800c49e:	e175      	b.n	800c78c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4a0:	bf00      	nop
    return;
 800c4a2:	e173      	b.n	800c78c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4a8:	2b01      	cmp	r3, #1
 800c4aa:	f040 814f 	bne.w	800c74c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c4ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4b2:	f003 0310 	and.w	r3, r3, #16
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	f000 8148 	beq.w	800c74c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c4bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4c0:	f003 0310 	and.w	r3, r3, #16
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	f000 8141 	beq.w	800c74c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	60bb      	str	r3, [r7, #8]
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	60bb      	str	r3, [r7, #8]
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	685b      	ldr	r3, [r3, #4]
 800c4dc:	60bb      	str	r3, [r7, #8]
 800c4de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	695b      	ldr	r3, [r3, #20]
 800c4e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4ea:	2b40      	cmp	r3, #64	; 0x40
 800c4ec:	f040 80b6 	bne.w	800c65c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	685b      	ldr	r3, [r3, #4]
 800c4f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c4fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c500:	2b00      	cmp	r3, #0
 800c502:	f000 8145 	beq.w	800c790 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c50a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c50e:	429a      	cmp	r2, r3
 800c510:	f080 813e 	bcs.w	800c790 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c51a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c520:	69db      	ldr	r3, [r3, #28]
 800c522:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c526:	f000 8088 	beq.w	800c63a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	330c      	adds	r3, #12
 800c530:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c534:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c538:	e853 3f00 	ldrex	r3, [r3]
 800c53c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c540:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c544:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c548:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	330c      	adds	r3, #12
 800c552:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c556:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c55a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c55e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c562:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c566:	e841 2300 	strex	r3, r2, [r1]
 800c56a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c56e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c572:	2b00      	cmp	r3, #0
 800c574:	d1d9      	bne.n	800c52a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	3314      	adds	r3, #20
 800c57c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c57e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c580:	e853 3f00 	ldrex	r3, [r3]
 800c584:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c586:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c588:	f023 0301 	bic.w	r3, r3, #1
 800c58c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	3314      	adds	r3, #20
 800c596:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c59a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c59e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c5a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c5a6:	e841 2300 	strex	r3, r2, [r1]
 800c5aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c5ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d1e1      	bne.n	800c576 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	3314      	adds	r3, #20
 800c5b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c5bc:	e853 3f00 	ldrex	r3, [r3]
 800c5c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c5c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c5c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	3314      	adds	r3, #20
 800c5d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c5d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c5d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c5dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c5de:	e841 2300 	strex	r3, r2, [r1]
 800c5e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c5e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d1e3      	bne.n	800c5b2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	2220      	movs	r2, #32
 800c5ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	330c      	adds	r3, #12
 800c5fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c602:	e853 3f00 	ldrex	r3, [r3]
 800c606:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c60a:	f023 0310 	bic.w	r3, r3, #16
 800c60e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	330c      	adds	r3, #12
 800c618:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c61c:	65ba      	str	r2, [r7, #88]	; 0x58
 800c61e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c620:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c622:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c624:	e841 2300 	strex	r3, r2, [r1]
 800c628:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c62a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d1e3      	bne.n	800c5f8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c634:	4618      	mov	r0, r3
 800c636:	f7fc faab 	bl	8008b90 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2202      	movs	r2, #2
 800c63e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c648:	b29b      	uxth	r3, r3
 800c64a:	1ad3      	subs	r3, r2, r3
 800c64c:	b29b      	uxth	r3, r3
 800c64e:	4619      	mov	r1, r3
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f000 f8c1 	bl	800c7d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c656:	e09b      	b.n	800c790 <HAL_UART_IRQHandler+0x518>
 800c658:	0800ccef 	.word	0x0800ccef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c664:	b29b      	uxth	r3, r3
 800c666:	1ad3      	subs	r3, r2, r3
 800c668:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c670:	b29b      	uxth	r3, r3
 800c672:	2b00      	cmp	r3, #0
 800c674:	f000 808e 	beq.w	800c794 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c678:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	f000 8089 	beq.w	800c794 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	330c      	adds	r3, #12
 800c688:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c68c:	e853 3f00 	ldrex	r3, [r3]
 800c690:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c694:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c698:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	330c      	adds	r3, #12
 800c6a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c6a6:	647a      	str	r2, [r7, #68]	; 0x44
 800c6a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c6ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c6ae:	e841 2300 	strex	r3, r2, [r1]
 800c6b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c6b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d1e3      	bne.n	800c682 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	3314      	adds	r3, #20
 800c6c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6c4:	e853 3f00 	ldrex	r3, [r3]
 800c6c8:	623b      	str	r3, [r7, #32]
   return(result);
 800c6ca:	6a3b      	ldr	r3, [r7, #32]
 800c6cc:	f023 0301 	bic.w	r3, r3, #1
 800c6d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	3314      	adds	r3, #20
 800c6da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c6de:	633a      	str	r2, [r7, #48]	; 0x30
 800c6e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c6e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6e6:	e841 2300 	strex	r3, r2, [r1]
 800c6ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d1e3      	bne.n	800c6ba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2220      	movs	r2, #32
 800c6f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	330c      	adds	r3, #12
 800c706:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c708:	693b      	ldr	r3, [r7, #16]
 800c70a:	e853 3f00 	ldrex	r3, [r3]
 800c70e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f023 0310 	bic.w	r3, r3, #16
 800c716:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	330c      	adds	r3, #12
 800c720:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c724:	61fa      	str	r2, [r7, #28]
 800c726:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c728:	69b9      	ldr	r1, [r7, #24]
 800c72a:	69fa      	ldr	r2, [r7, #28]
 800c72c:	e841 2300 	strex	r3, r2, [r1]
 800c730:	617b      	str	r3, [r7, #20]
   return(result);
 800c732:	697b      	ldr	r3, [r7, #20]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d1e3      	bne.n	800c700 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2202      	movs	r2, #2
 800c73c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c73e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c742:	4619      	mov	r1, r3
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f000 f847 	bl	800c7d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c74a:	e023      	b.n	800c794 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c74c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c754:	2b00      	cmp	r3, #0
 800c756:	d009      	beq.n	800c76c <HAL_UART_IRQHandler+0x4f4>
 800c758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c75c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c760:	2b00      	cmp	r3, #0
 800c762:	d003      	beq.n	800c76c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f000 fad6 	bl	800cd16 <UART_Transmit_IT>
    return;
 800c76a:	e014      	b.n	800c796 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c76c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c774:	2b00      	cmp	r3, #0
 800c776:	d00e      	beq.n	800c796 <HAL_UART_IRQHandler+0x51e>
 800c778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c77c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c780:	2b00      	cmp	r3, #0
 800c782:	d008      	beq.n	800c796 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	f000 fb16 	bl	800cdb6 <UART_EndTransmit_IT>
    return;
 800c78a:	e004      	b.n	800c796 <HAL_UART_IRQHandler+0x51e>
    return;
 800c78c:	bf00      	nop
 800c78e:	e002      	b.n	800c796 <HAL_UART_IRQHandler+0x51e>
      return;
 800c790:	bf00      	nop
 800c792:	e000      	b.n	800c796 <HAL_UART_IRQHandler+0x51e>
      return;
 800c794:	bf00      	nop
  }
}
 800c796:	37e8      	adds	r7, #232	; 0xe8
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}

0800c79c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c79c:	b480      	push	{r7}
 800c79e:	b083      	sub	sp, #12
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800c7a4:	bf00      	nop
 800c7a6:	370c      	adds	r7, #12
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ae:	4770      	bx	lr

0800c7b0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b083      	sub	sp, #12
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c7b8:	bf00      	nop
 800c7ba:	370c      	adds	r7, #12
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr

0800c7c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	b083      	sub	sp, #12
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c7cc:	bf00      	nop
 800c7ce:	370c      	adds	r7, #12
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d6:	4770      	bx	lr

0800c7d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c7d8:	b480      	push	{r7}
 800c7da:	b083      	sub	sp, #12
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	460b      	mov	r3, r1
 800c7e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c7e4:	bf00      	nop
 800c7e6:	370c      	adds	r7, #12
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ee:	4770      	bx	lr

0800c7f0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b090      	sub	sp, #64	; 0x40
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d137      	bne.n	800c87c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800c80c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c80e:	2200      	movs	r2, #0
 800c810:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	3314      	adds	r3, #20
 800c818:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c81c:	e853 3f00 	ldrex	r3, [r3]
 800c820:	623b      	str	r3, [r7, #32]
   return(result);
 800c822:	6a3b      	ldr	r3, [r7, #32]
 800c824:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c828:	63bb      	str	r3, [r7, #56]	; 0x38
 800c82a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	3314      	adds	r3, #20
 800c830:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c832:	633a      	str	r2, [r7, #48]	; 0x30
 800c834:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c836:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c83a:	e841 2300 	strex	r3, r2, [r1]
 800c83e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c842:	2b00      	cmp	r3, #0
 800c844:	d1e5      	bne.n	800c812 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	330c      	adds	r3, #12
 800c84c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c84e:	693b      	ldr	r3, [r7, #16]
 800c850:	e853 3f00 	ldrex	r3, [r3]
 800c854:	60fb      	str	r3, [r7, #12]
   return(result);
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c85c:	637b      	str	r3, [r7, #52]	; 0x34
 800c85e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	330c      	adds	r3, #12
 800c864:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c866:	61fa      	str	r2, [r7, #28]
 800c868:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c86a:	69b9      	ldr	r1, [r7, #24]
 800c86c:	69fa      	ldr	r2, [r7, #28]
 800c86e:	e841 2300 	strex	r3, r2, [r1]
 800c872:	617b      	str	r3, [r7, #20]
   return(result);
 800c874:	697b      	ldr	r3, [r7, #20]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d1e5      	bne.n	800c846 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c87a:	e002      	b.n	800c882 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800c87c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c87e:	f7fa fab5 	bl	8006dec <HAL_UART_TxCpltCallback>
}
 800c882:	bf00      	nop
 800c884:	3740      	adds	r7, #64	; 0x40
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}

0800c88a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c88a:	b580      	push	{r7, lr}
 800c88c:	b084      	sub	sp, #16
 800c88e:	af00      	add	r7, sp, #0
 800c890:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c896:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c898:	68f8      	ldr	r0, [r7, #12]
 800c89a:	f7ff ff7f 	bl	800c79c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c89e:	bf00      	nop
 800c8a0:	3710      	adds	r7, #16
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}

0800c8a6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c8a6:	b580      	push	{r7, lr}
 800c8a8:	b09c      	sub	sp, #112	; 0x70
 800c8aa:	af00      	add	r7, sp, #0
 800c8ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8b2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d172      	bne.n	800c9a8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800c8c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c8c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	330c      	adds	r3, #12
 800c8ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8d2:	e853 3f00 	ldrex	r3, [r3]
 800c8d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c8d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c8de:	66bb      	str	r3, [r7, #104]	; 0x68
 800c8e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	330c      	adds	r3, #12
 800c8e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c8e8:	65ba      	str	r2, [r7, #88]	; 0x58
 800c8ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c8ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c8f0:	e841 2300 	strex	r3, r2, [r1]
 800c8f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c8f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d1e5      	bne.n	800c8c8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	3314      	adds	r3, #20
 800c902:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c906:	e853 3f00 	ldrex	r3, [r3]
 800c90a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c90c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c90e:	f023 0301 	bic.w	r3, r3, #1
 800c912:	667b      	str	r3, [r7, #100]	; 0x64
 800c914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	3314      	adds	r3, #20
 800c91a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c91c:	647a      	str	r2, [r7, #68]	; 0x44
 800c91e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c920:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c922:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c924:	e841 2300 	strex	r3, r2, [r1]
 800c928:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c92a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d1e5      	bne.n	800c8fc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	3314      	adds	r3, #20
 800c936:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c93a:	e853 3f00 	ldrex	r3, [r3]
 800c93e:	623b      	str	r3, [r7, #32]
   return(result);
 800c940:	6a3b      	ldr	r3, [r7, #32]
 800c942:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c946:	663b      	str	r3, [r7, #96]	; 0x60
 800c948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	3314      	adds	r3, #20
 800c94e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c950:	633a      	str	r2, [r7, #48]	; 0x30
 800c952:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c954:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c956:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c958:	e841 2300 	strex	r3, r2, [r1]
 800c95c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c960:	2b00      	cmp	r3, #0
 800c962:	d1e5      	bne.n	800c930 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c966:	2220      	movs	r2, #32
 800c968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c96c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c96e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c970:	2b01      	cmp	r3, #1
 800c972:	d119      	bne.n	800c9a8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	330c      	adds	r3, #12
 800c97a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c97c:	693b      	ldr	r3, [r7, #16]
 800c97e:	e853 3f00 	ldrex	r3, [r3]
 800c982:	60fb      	str	r3, [r7, #12]
   return(result);
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	f023 0310 	bic.w	r3, r3, #16
 800c98a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c98c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	330c      	adds	r3, #12
 800c992:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c994:	61fa      	str	r2, [r7, #28]
 800c996:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c998:	69b9      	ldr	r1, [r7, #24]
 800c99a:	69fa      	ldr	r2, [r7, #28]
 800c99c:	e841 2300 	strex	r3, r2, [r1]
 800c9a0:	617b      	str	r3, [r7, #20]
   return(result);
 800c9a2:	697b      	ldr	r3, [r7, #20]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d1e5      	bne.n	800c974 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c9a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c9ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c9b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9b2:	2b01      	cmp	r3, #1
 800c9b4:	d106      	bne.n	800c9c4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c9b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c9b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c9ba:	4619      	mov	r1, r3
 800c9bc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c9be:	f7ff ff0b 	bl	800c7d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c9c2:	e002      	b.n	800c9ca <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800c9c4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c9c6:	f7fa fa23 	bl	8006e10 <HAL_UART_RxCpltCallback>
}
 800c9ca:	bf00      	nop
 800c9cc:	3770      	adds	r7, #112	; 0x70
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}

0800c9d2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c9d2:	b580      	push	{r7, lr}
 800c9d4:	b084      	sub	sp, #16
 800c9d6:	af00      	add	r7, sp, #0
 800c9d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9de:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	2201      	movs	r2, #1
 800c9e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9ea:	2b01      	cmp	r3, #1
 800c9ec:	d108      	bne.n	800ca00 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c9f2:	085b      	lsrs	r3, r3, #1
 800c9f4:	b29b      	uxth	r3, r3
 800c9f6:	4619      	mov	r1, r3
 800c9f8:	68f8      	ldr	r0, [r7, #12]
 800c9fa:	f7ff feed 	bl	800c7d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c9fe:	e002      	b.n	800ca06 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800ca00:	68f8      	ldr	r0, [r7, #12]
 800ca02:	f7ff fed5 	bl	800c7b0 <HAL_UART_RxHalfCpltCallback>
}
 800ca06:	bf00      	nop
 800ca08:	3710      	adds	r7, #16
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd80      	pop	{r7, pc}

0800ca0e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ca0e:	b580      	push	{r7, lr}
 800ca10:	b084      	sub	sp, #16
 800ca12:	af00      	add	r7, sp, #0
 800ca14:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ca16:	2300      	movs	r3, #0
 800ca18:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca1e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	695b      	ldr	r3, [r3, #20]
 800ca26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca2a:	2b80      	cmp	r3, #128	; 0x80
 800ca2c:	bf0c      	ite	eq
 800ca2e:	2301      	moveq	r3, #1
 800ca30:	2300      	movne	r3, #0
 800ca32:	b2db      	uxtb	r3, r3
 800ca34:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca3c:	b2db      	uxtb	r3, r3
 800ca3e:	2b21      	cmp	r3, #33	; 0x21
 800ca40:	d108      	bne.n	800ca54 <UART_DMAError+0x46>
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d005      	beq.n	800ca54 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800ca4e:	68b8      	ldr	r0, [r7, #8]
 800ca50:	f000 f8c2 	bl	800cbd8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	695b      	ldr	r3, [r3, #20]
 800ca5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca5e:	2b40      	cmp	r3, #64	; 0x40
 800ca60:	bf0c      	ite	eq
 800ca62:	2301      	moveq	r3, #1
 800ca64:	2300      	movne	r3, #0
 800ca66:	b2db      	uxtb	r3, r3
 800ca68:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ca70:	b2db      	uxtb	r3, r3
 800ca72:	2b22      	cmp	r3, #34	; 0x22
 800ca74:	d108      	bne.n	800ca88 <UART_DMAError+0x7a>
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d005      	beq.n	800ca88 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ca82:	68b8      	ldr	r0, [r7, #8]
 800ca84:	f000 f8d0 	bl	800cc28 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca8c:	f043 0210 	orr.w	r2, r3, #16
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ca94:	68b8      	ldr	r0, [r7, #8]
 800ca96:	f7ff fe95 	bl	800c7c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ca9a:	bf00      	nop
 800ca9c:	3710      	adds	r7, #16
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}
	...

0800caa4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b098      	sub	sp, #96	; 0x60
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	60f8      	str	r0, [r7, #12]
 800caac:	60b9      	str	r1, [r7, #8]
 800caae:	4613      	mov	r3, r2
 800cab0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800cab2:	68ba      	ldr	r2, [r7, #8]
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	88fa      	ldrh	r2, [r7, #6]
 800cabc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	2200      	movs	r2, #0
 800cac2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	2222      	movs	r2, #34	; 0x22
 800cac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cad0:	4a3e      	ldr	r2, [pc, #248]	; (800cbcc <UART_Start_Receive_DMA+0x128>)
 800cad2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cad8:	4a3d      	ldr	r2, [pc, #244]	; (800cbd0 <UART_Start_Receive_DMA+0x12c>)
 800cada:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cae0:	4a3c      	ldr	r2, [pc, #240]	; (800cbd4 <UART_Start_Receive_DMA+0x130>)
 800cae2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cae8:	2200      	movs	r2, #0
 800caea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800caec:	f107 0308 	add.w	r3, r7, #8
 800caf0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	3304      	adds	r3, #4
 800cafc:	4619      	mov	r1, r3
 800cafe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb00:	681a      	ldr	r2, [r3, #0]
 800cb02:	88fb      	ldrh	r3, [r7, #6]
 800cb04:	f7fb ffec 	bl	8008ae0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800cb08:	2300      	movs	r3, #0
 800cb0a:	613b      	str	r3, [r7, #16]
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	613b      	str	r3, [r7, #16]
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	685b      	ldr	r3, [r3, #4]
 800cb1a:	613b      	str	r3, [r7, #16]
 800cb1c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	691b      	ldr	r3, [r3, #16]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d019      	beq.n	800cb5a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	330c      	adds	r3, #12
 800cb2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb30:	e853 3f00 	ldrex	r3, [r3]
 800cb34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cb36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb3c:	65bb      	str	r3, [r7, #88]	; 0x58
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	330c      	adds	r3, #12
 800cb44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cb46:	64fa      	str	r2, [r7, #76]	; 0x4c
 800cb48:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb4a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cb4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cb4e:	e841 2300 	strex	r3, r2, [r1]
 800cb52:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800cb54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d1e5      	bne.n	800cb26 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	3314      	adds	r3, #20
 800cb60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb64:	e853 3f00 	ldrex	r3, [r3]
 800cb68:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cb6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb6c:	f043 0301 	orr.w	r3, r3, #1
 800cb70:	657b      	str	r3, [r7, #84]	; 0x54
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	3314      	adds	r3, #20
 800cb78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cb7a:	63ba      	str	r2, [r7, #56]	; 0x38
 800cb7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb7e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cb80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb82:	e841 2300 	strex	r3, r2, [r1]
 800cb86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cb88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d1e5      	bne.n	800cb5a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	3314      	adds	r3, #20
 800cb94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb96:	69bb      	ldr	r3, [r7, #24]
 800cb98:	e853 3f00 	ldrex	r3, [r3]
 800cb9c:	617b      	str	r3, [r7, #20]
   return(result);
 800cb9e:	697b      	ldr	r3, [r7, #20]
 800cba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cba4:	653b      	str	r3, [r7, #80]	; 0x50
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	3314      	adds	r3, #20
 800cbac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cbae:	627a      	str	r2, [r7, #36]	; 0x24
 800cbb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbb2:	6a39      	ldr	r1, [r7, #32]
 800cbb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbb6:	e841 2300 	strex	r3, r2, [r1]
 800cbba:	61fb      	str	r3, [r7, #28]
   return(result);
 800cbbc:	69fb      	ldr	r3, [r7, #28]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d1e5      	bne.n	800cb8e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800cbc2:	2300      	movs	r3, #0
}
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	3760      	adds	r7, #96	; 0x60
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}
 800cbcc:	0800c8a7 	.word	0x0800c8a7
 800cbd0:	0800c9d3 	.word	0x0800c9d3
 800cbd4:	0800ca0f 	.word	0x0800ca0f

0800cbd8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cbd8:	b480      	push	{r7}
 800cbda:	b089      	sub	sp, #36	; 0x24
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	330c      	adds	r3, #12
 800cbe6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	e853 3f00 	ldrex	r3, [r3]
 800cbee:	60bb      	str	r3, [r7, #8]
   return(result);
 800cbf0:	68bb      	ldr	r3, [r7, #8]
 800cbf2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cbf6:	61fb      	str	r3, [r7, #28]
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	330c      	adds	r3, #12
 800cbfe:	69fa      	ldr	r2, [r7, #28]
 800cc00:	61ba      	str	r2, [r7, #24]
 800cc02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc04:	6979      	ldr	r1, [r7, #20]
 800cc06:	69ba      	ldr	r2, [r7, #24]
 800cc08:	e841 2300 	strex	r3, r2, [r1]
 800cc0c:	613b      	str	r3, [r7, #16]
   return(result);
 800cc0e:	693b      	ldr	r3, [r7, #16]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d1e5      	bne.n	800cbe0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2220      	movs	r2, #32
 800cc18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800cc1c:	bf00      	nop
 800cc1e:	3724      	adds	r7, #36	; 0x24
 800cc20:	46bd      	mov	sp, r7
 800cc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc26:	4770      	bx	lr

0800cc28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cc28:	b480      	push	{r7}
 800cc2a:	b095      	sub	sp, #84	; 0x54
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	330c      	adds	r3, #12
 800cc36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc3a:	e853 3f00 	ldrex	r3, [r3]
 800cc3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cc40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cc46:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	330c      	adds	r3, #12
 800cc4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cc50:	643a      	str	r2, [r7, #64]	; 0x40
 800cc52:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cc56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cc58:	e841 2300 	strex	r3, r2, [r1]
 800cc5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cc5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d1e5      	bne.n	800cc30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	3314      	adds	r3, #20
 800cc6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc6c:	6a3b      	ldr	r3, [r7, #32]
 800cc6e:	e853 3f00 	ldrex	r3, [r3]
 800cc72:	61fb      	str	r3, [r7, #28]
   return(result);
 800cc74:	69fb      	ldr	r3, [r7, #28]
 800cc76:	f023 0301 	bic.w	r3, r3, #1
 800cc7a:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	3314      	adds	r3, #20
 800cc82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc84:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cc86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cc8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc8c:	e841 2300 	strex	r3, r2, [r1]
 800cc90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cc92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d1e5      	bne.n	800cc64 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc9c:	2b01      	cmp	r3, #1
 800cc9e:	d119      	bne.n	800ccd4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	330c      	adds	r3, #12
 800cca6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	e853 3f00 	ldrex	r3, [r3]
 800ccae:	60bb      	str	r3, [r7, #8]
   return(result);
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	f023 0310 	bic.w	r3, r3, #16
 800ccb6:	647b      	str	r3, [r7, #68]	; 0x44
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	330c      	adds	r3, #12
 800ccbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ccc0:	61ba      	str	r2, [r7, #24]
 800ccc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccc4:	6979      	ldr	r1, [r7, #20]
 800ccc6:	69ba      	ldr	r2, [r7, #24]
 800ccc8:	e841 2300 	strex	r3, r2, [r1]
 800cccc:	613b      	str	r3, [r7, #16]
   return(result);
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d1e5      	bne.n	800cca0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2220      	movs	r2, #32
 800ccd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2200      	movs	r2, #0
 800cce0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800cce2:	bf00      	nop
 800cce4:	3754      	adds	r7, #84	; 0x54
 800cce6:	46bd      	mov	sp, r7
 800cce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccec:	4770      	bx	lr

0800ccee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ccee:	b580      	push	{r7, lr}
 800ccf0:	b084      	sub	sp, #16
 800ccf2:	af00      	add	r7, sp, #0
 800ccf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccfa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	2200      	movs	r2, #0
 800cd00:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	2200      	movs	r2, #0
 800cd06:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cd08:	68f8      	ldr	r0, [r7, #12]
 800cd0a:	f7ff fd5b 	bl	800c7c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cd0e:	bf00      	nop
 800cd10:	3710      	adds	r7, #16
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}

0800cd16 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800cd16:	b480      	push	{r7}
 800cd18:	b085      	sub	sp, #20
 800cd1a:	af00      	add	r7, sp, #0
 800cd1c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd24:	b2db      	uxtb	r3, r3
 800cd26:	2b21      	cmp	r3, #33	; 0x21
 800cd28:	d13e      	bne.n	800cda8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	689b      	ldr	r3, [r3, #8]
 800cd2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd32:	d114      	bne.n	800cd5e <UART_Transmit_IT+0x48>
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	691b      	ldr	r3, [r3, #16]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d110      	bne.n	800cd5e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	6a1b      	ldr	r3, [r3, #32]
 800cd40:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	881b      	ldrh	r3, [r3, #0]
 800cd46:	461a      	mov	r2, r3
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cd50:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	6a1b      	ldr	r3, [r3, #32]
 800cd56:	1c9a      	adds	r2, r3, #2
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	621a      	str	r2, [r3, #32]
 800cd5c:	e008      	b.n	800cd70 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6a1b      	ldr	r3, [r3, #32]
 800cd62:	1c59      	adds	r1, r3, #1
 800cd64:	687a      	ldr	r2, [r7, #4]
 800cd66:	6211      	str	r1, [r2, #32]
 800cd68:	781a      	ldrb	r2, [r3, #0]
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cd74:	b29b      	uxth	r3, r3
 800cd76:	3b01      	subs	r3, #1
 800cd78:	b29b      	uxth	r3, r3
 800cd7a:	687a      	ldr	r2, [r7, #4]
 800cd7c:	4619      	mov	r1, r3
 800cd7e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d10f      	bne.n	800cda4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	68da      	ldr	r2, [r3, #12]
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cd92:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	68da      	ldr	r2, [r3, #12]
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cda2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cda4:	2300      	movs	r3, #0
 800cda6:	e000      	b.n	800cdaa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800cda8:	2302      	movs	r3, #2
  }
}
 800cdaa:	4618      	mov	r0, r3
 800cdac:	3714      	adds	r7, #20
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb4:	4770      	bx	lr

0800cdb6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cdb6:	b580      	push	{r7, lr}
 800cdb8:	b082      	sub	sp, #8
 800cdba:	af00      	add	r7, sp, #0
 800cdbc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	68da      	ldr	r2, [r3, #12]
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cdcc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2220      	movs	r2, #32
 800cdd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f7fa f808 	bl	8006dec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cddc:	2300      	movs	r3, #0
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3708      	adds	r7, #8
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}

0800cde6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cde6:	b580      	push	{r7, lr}
 800cde8:	b08c      	sub	sp, #48	; 0x30
 800cdea:	af00      	add	r7, sp, #0
 800cdec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cdf4:	b2db      	uxtb	r3, r3
 800cdf6:	2b22      	cmp	r3, #34	; 0x22
 800cdf8:	f040 80ae 	bne.w	800cf58 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	689b      	ldr	r3, [r3, #8]
 800ce00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce04:	d117      	bne.n	800ce36 <UART_Receive_IT+0x50>
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	691b      	ldr	r3, [r3, #16]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d113      	bne.n	800ce36 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce16:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	685b      	ldr	r3, [r3, #4]
 800ce1e:	b29b      	uxth	r3, r3
 800ce20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce24:	b29a      	uxth	r2, r3
 800ce26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce28:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce2e:	1c9a      	adds	r2, r3, #2
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	629a      	str	r2, [r3, #40]	; 0x28
 800ce34:	e026      	b.n	800ce84 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	689b      	ldr	r3, [r3, #8]
 800ce44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce48:	d007      	beq.n	800ce5a <UART_Receive_IT+0x74>
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	689b      	ldr	r3, [r3, #8]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d10a      	bne.n	800ce68 <UART_Receive_IT+0x82>
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	691b      	ldr	r3, [r3, #16]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d106      	bne.n	800ce68 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	685b      	ldr	r3, [r3, #4]
 800ce60:	b2da      	uxtb	r2, r3
 800ce62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce64:	701a      	strb	r2, [r3, #0]
 800ce66:	e008      	b.n	800ce7a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	685b      	ldr	r3, [r3, #4]
 800ce6e:	b2db      	uxtb	r3, r3
 800ce70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce74:	b2da      	uxtb	r2, r3
 800ce76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce78:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce7e:	1c5a      	adds	r2, r3, #1
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ce88:	b29b      	uxth	r3, r3
 800ce8a:	3b01      	subs	r3, #1
 800ce8c:	b29b      	uxth	r3, r3
 800ce8e:	687a      	ldr	r2, [r7, #4]
 800ce90:	4619      	mov	r1, r3
 800ce92:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d15d      	bne.n	800cf54 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	68da      	ldr	r2, [r3, #12]
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	f022 0220 	bic.w	r2, r2, #32
 800cea6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	68da      	ldr	r2, [r3, #12]
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ceb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	695a      	ldr	r2, [r3, #20]
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	f022 0201 	bic.w	r2, r2, #1
 800cec6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2220      	movs	r2, #32
 800cecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2200      	movs	r2, #0
 800ced4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceda:	2b01      	cmp	r3, #1
 800cedc:	d135      	bne.n	800cf4a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2200      	movs	r2, #0
 800cee2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	330c      	adds	r3, #12
 800ceea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceec:	697b      	ldr	r3, [r7, #20]
 800ceee:	e853 3f00 	ldrex	r3, [r3]
 800cef2:	613b      	str	r3, [r7, #16]
   return(result);
 800cef4:	693b      	ldr	r3, [r7, #16]
 800cef6:	f023 0310 	bic.w	r3, r3, #16
 800cefa:	627b      	str	r3, [r7, #36]	; 0x24
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	330c      	adds	r3, #12
 800cf02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf04:	623a      	str	r2, [r7, #32]
 800cf06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf08:	69f9      	ldr	r1, [r7, #28]
 800cf0a:	6a3a      	ldr	r2, [r7, #32]
 800cf0c:	e841 2300 	strex	r3, r2, [r1]
 800cf10:	61bb      	str	r3, [r7, #24]
   return(result);
 800cf12:	69bb      	ldr	r3, [r7, #24]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d1e5      	bne.n	800cee4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f003 0310 	and.w	r3, r3, #16
 800cf22:	2b10      	cmp	r3, #16
 800cf24:	d10a      	bne.n	800cf3c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cf26:	2300      	movs	r3, #0
 800cf28:	60fb      	str	r3, [r7, #12]
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	60fb      	str	r3, [r7, #12]
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	685b      	ldr	r3, [r3, #4]
 800cf38:	60fb      	str	r3, [r7, #12]
 800cf3a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cf40:	4619      	mov	r1, r3
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f7ff fc48 	bl	800c7d8 <HAL_UARTEx_RxEventCallback>
 800cf48:	e002      	b.n	800cf50 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	f7f9 ff60 	bl	8006e10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800cf50:	2300      	movs	r3, #0
 800cf52:	e002      	b.n	800cf5a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800cf54:	2300      	movs	r3, #0
 800cf56:	e000      	b.n	800cf5a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800cf58:	2302      	movs	r3, #2
  }
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	3730      	adds	r7, #48	; 0x30
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}
	...

0800cf64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cf64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cf68:	b0c0      	sub	sp, #256	; 0x100
 800cf6a:	af00      	add	r7, sp, #0
 800cf6c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cf70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	691b      	ldr	r3, [r3, #16]
 800cf78:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800cf7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf80:	68d9      	ldr	r1, [r3, #12]
 800cf82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf86:	681a      	ldr	r2, [r3, #0]
 800cf88:	ea40 0301 	orr.w	r3, r0, r1
 800cf8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cf8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf92:	689a      	ldr	r2, [r3, #8]
 800cf94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf98:	691b      	ldr	r3, [r3, #16]
 800cf9a:	431a      	orrs	r2, r3
 800cf9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfa0:	695b      	ldr	r3, [r3, #20]
 800cfa2:	431a      	orrs	r2, r3
 800cfa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfa8:	69db      	ldr	r3, [r3, #28]
 800cfaa:	4313      	orrs	r3, r2
 800cfac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800cfb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	68db      	ldr	r3, [r3, #12]
 800cfb8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800cfbc:	f021 010c 	bic.w	r1, r1, #12
 800cfc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfc4:	681a      	ldr	r2, [r3, #0]
 800cfc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cfca:	430b      	orrs	r3, r1
 800cfcc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cfce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	695b      	ldr	r3, [r3, #20]
 800cfd6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800cfda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfde:	6999      	ldr	r1, [r3, #24]
 800cfe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfe4:	681a      	ldr	r2, [r3, #0]
 800cfe6:	ea40 0301 	orr.w	r3, r0, r1
 800cfea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cfec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cff0:	681a      	ldr	r2, [r3, #0]
 800cff2:	4b8f      	ldr	r3, [pc, #572]	; (800d230 <UART_SetConfig+0x2cc>)
 800cff4:	429a      	cmp	r2, r3
 800cff6:	d005      	beq.n	800d004 <UART_SetConfig+0xa0>
 800cff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cffc:	681a      	ldr	r2, [r3, #0]
 800cffe:	4b8d      	ldr	r3, [pc, #564]	; (800d234 <UART_SetConfig+0x2d0>)
 800d000:	429a      	cmp	r2, r3
 800d002:	d104      	bne.n	800d00e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d004:	f7fd ff8a 	bl	800af1c <HAL_RCC_GetPCLK2Freq>
 800d008:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800d00c:	e003      	b.n	800d016 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d00e:	f7fd ff71 	bl	800aef4 <HAL_RCC_GetPCLK1Freq>
 800d012:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d01a:	69db      	ldr	r3, [r3, #28]
 800d01c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d020:	f040 810c 	bne.w	800d23c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d024:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d028:	2200      	movs	r2, #0
 800d02a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d02e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800d032:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800d036:	4622      	mov	r2, r4
 800d038:	462b      	mov	r3, r5
 800d03a:	1891      	adds	r1, r2, r2
 800d03c:	65b9      	str	r1, [r7, #88]	; 0x58
 800d03e:	415b      	adcs	r3, r3
 800d040:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d042:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800d046:	4621      	mov	r1, r4
 800d048:	eb12 0801 	adds.w	r8, r2, r1
 800d04c:	4629      	mov	r1, r5
 800d04e:	eb43 0901 	adc.w	r9, r3, r1
 800d052:	f04f 0200 	mov.w	r2, #0
 800d056:	f04f 0300 	mov.w	r3, #0
 800d05a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d05e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d062:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d066:	4690      	mov	r8, r2
 800d068:	4699      	mov	r9, r3
 800d06a:	4623      	mov	r3, r4
 800d06c:	eb18 0303 	adds.w	r3, r8, r3
 800d070:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d074:	462b      	mov	r3, r5
 800d076:	eb49 0303 	adc.w	r3, r9, r3
 800d07a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d07e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d082:	685b      	ldr	r3, [r3, #4]
 800d084:	2200      	movs	r2, #0
 800d086:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d08a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800d08e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800d092:	460b      	mov	r3, r1
 800d094:	18db      	adds	r3, r3, r3
 800d096:	653b      	str	r3, [r7, #80]	; 0x50
 800d098:	4613      	mov	r3, r2
 800d09a:	eb42 0303 	adc.w	r3, r2, r3
 800d09e:	657b      	str	r3, [r7, #84]	; 0x54
 800d0a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d0a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800d0a8:	f7f3 fdde 	bl	8000c68 <__aeabi_uldivmod>
 800d0ac:	4602      	mov	r2, r0
 800d0ae:	460b      	mov	r3, r1
 800d0b0:	4b61      	ldr	r3, [pc, #388]	; (800d238 <UART_SetConfig+0x2d4>)
 800d0b2:	fba3 2302 	umull	r2, r3, r3, r2
 800d0b6:	095b      	lsrs	r3, r3, #5
 800d0b8:	011c      	lsls	r4, r3, #4
 800d0ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d0be:	2200      	movs	r2, #0
 800d0c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d0c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800d0c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800d0cc:	4642      	mov	r2, r8
 800d0ce:	464b      	mov	r3, r9
 800d0d0:	1891      	adds	r1, r2, r2
 800d0d2:	64b9      	str	r1, [r7, #72]	; 0x48
 800d0d4:	415b      	adcs	r3, r3
 800d0d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d0d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d0dc:	4641      	mov	r1, r8
 800d0de:	eb12 0a01 	adds.w	sl, r2, r1
 800d0e2:	4649      	mov	r1, r9
 800d0e4:	eb43 0b01 	adc.w	fp, r3, r1
 800d0e8:	f04f 0200 	mov.w	r2, #0
 800d0ec:	f04f 0300 	mov.w	r3, #0
 800d0f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d0f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d0f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d0fc:	4692      	mov	sl, r2
 800d0fe:	469b      	mov	fp, r3
 800d100:	4643      	mov	r3, r8
 800d102:	eb1a 0303 	adds.w	r3, sl, r3
 800d106:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d10a:	464b      	mov	r3, r9
 800d10c:	eb4b 0303 	adc.w	r3, fp, r3
 800d110:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d118:	685b      	ldr	r3, [r3, #4]
 800d11a:	2200      	movs	r2, #0
 800d11c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d120:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800d124:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d128:	460b      	mov	r3, r1
 800d12a:	18db      	adds	r3, r3, r3
 800d12c:	643b      	str	r3, [r7, #64]	; 0x40
 800d12e:	4613      	mov	r3, r2
 800d130:	eb42 0303 	adc.w	r3, r2, r3
 800d134:	647b      	str	r3, [r7, #68]	; 0x44
 800d136:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d13a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d13e:	f7f3 fd93 	bl	8000c68 <__aeabi_uldivmod>
 800d142:	4602      	mov	r2, r0
 800d144:	460b      	mov	r3, r1
 800d146:	4611      	mov	r1, r2
 800d148:	4b3b      	ldr	r3, [pc, #236]	; (800d238 <UART_SetConfig+0x2d4>)
 800d14a:	fba3 2301 	umull	r2, r3, r3, r1
 800d14e:	095b      	lsrs	r3, r3, #5
 800d150:	2264      	movs	r2, #100	; 0x64
 800d152:	fb02 f303 	mul.w	r3, r2, r3
 800d156:	1acb      	subs	r3, r1, r3
 800d158:	00db      	lsls	r3, r3, #3
 800d15a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800d15e:	4b36      	ldr	r3, [pc, #216]	; (800d238 <UART_SetConfig+0x2d4>)
 800d160:	fba3 2302 	umull	r2, r3, r3, r2
 800d164:	095b      	lsrs	r3, r3, #5
 800d166:	005b      	lsls	r3, r3, #1
 800d168:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d16c:	441c      	add	r4, r3
 800d16e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d172:	2200      	movs	r2, #0
 800d174:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d178:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800d17c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800d180:	4642      	mov	r2, r8
 800d182:	464b      	mov	r3, r9
 800d184:	1891      	adds	r1, r2, r2
 800d186:	63b9      	str	r1, [r7, #56]	; 0x38
 800d188:	415b      	adcs	r3, r3
 800d18a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d18c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d190:	4641      	mov	r1, r8
 800d192:	1851      	adds	r1, r2, r1
 800d194:	6339      	str	r1, [r7, #48]	; 0x30
 800d196:	4649      	mov	r1, r9
 800d198:	414b      	adcs	r3, r1
 800d19a:	637b      	str	r3, [r7, #52]	; 0x34
 800d19c:	f04f 0200 	mov.w	r2, #0
 800d1a0:	f04f 0300 	mov.w	r3, #0
 800d1a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800d1a8:	4659      	mov	r1, fp
 800d1aa:	00cb      	lsls	r3, r1, #3
 800d1ac:	4651      	mov	r1, sl
 800d1ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d1b2:	4651      	mov	r1, sl
 800d1b4:	00ca      	lsls	r2, r1, #3
 800d1b6:	4610      	mov	r0, r2
 800d1b8:	4619      	mov	r1, r3
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	4642      	mov	r2, r8
 800d1be:	189b      	adds	r3, r3, r2
 800d1c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d1c4:	464b      	mov	r3, r9
 800d1c6:	460a      	mov	r2, r1
 800d1c8:	eb42 0303 	adc.w	r3, r2, r3
 800d1cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d1d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d1d4:	685b      	ldr	r3, [r3, #4]
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d1dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800d1e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d1e4:	460b      	mov	r3, r1
 800d1e6:	18db      	adds	r3, r3, r3
 800d1e8:	62bb      	str	r3, [r7, #40]	; 0x28
 800d1ea:	4613      	mov	r3, r2
 800d1ec:	eb42 0303 	adc.w	r3, r2, r3
 800d1f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d1f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d1f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800d1fa:	f7f3 fd35 	bl	8000c68 <__aeabi_uldivmod>
 800d1fe:	4602      	mov	r2, r0
 800d200:	460b      	mov	r3, r1
 800d202:	4b0d      	ldr	r3, [pc, #52]	; (800d238 <UART_SetConfig+0x2d4>)
 800d204:	fba3 1302 	umull	r1, r3, r3, r2
 800d208:	095b      	lsrs	r3, r3, #5
 800d20a:	2164      	movs	r1, #100	; 0x64
 800d20c:	fb01 f303 	mul.w	r3, r1, r3
 800d210:	1ad3      	subs	r3, r2, r3
 800d212:	00db      	lsls	r3, r3, #3
 800d214:	3332      	adds	r3, #50	; 0x32
 800d216:	4a08      	ldr	r2, [pc, #32]	; (800d238 <UART_SetConfig+0x2d4>)
 800d218:	fba2 2303 	umull	r2, r3, r2, r3
 800d21c:	095b      	lsrs	r3, r3, #5
 800d21e:	f003 0207 	and.w	r2, r3, #7
 800d222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	4422      	add	r2, r4
 800d22a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d22c:	e106      	b.n	800d43c <UART_SetConfig+0x4d8>
 800d22e:	bf00      	nop
 800d230:	40011000 	.word	0x40011000
 800d234:	40011400 	.word	0x40011400
 800d238:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d23c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d240:	2200      	movs	r2, #0
 800d242:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d246:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d24a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800d24e:	4642      	mov	r2, r8
 800d250:	464b      	mov	r3, r9
 800d252:	1891      	adds	r1, r2, r2
 800d254:	6239      	str	r1, [r7, #32]
 800d256:	415b      	adcs	r3, r3
 800d258:	627b      	str	r3, [r7, #36]	; 0x24
 800d25a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d25e:	4641      	mov	r1, r8
 800d260:	1854      	adds	r4, r2, r1
 800d262:	4649      	mov	r1, r9
 800d264:	eb43 0501 	adc.w	r5, r3, r1
 800d268:	f04f 0200 	mov.w	r2, #0
 800d26c:	f04f 0300 	mov.w	r3, #0
 800d270:	00eb      	lsls	r3, r5, #3
 800d272:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d276:	00e2      	lsls	r2, r4, #3
 800d278:	4614      	mov	r4, r2
 800d27a:	461d      	mov	r5, r3
 800d27c:	4643      	mov	r3, r8
 800d27e:	18e3      	adds	r3, r4, r3
 800d280:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d284:	464b      	mov	r3, r9
 800d286:	eb45 0303 	adc.w	r3, r5, r3
 800d28a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d28e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d292:	685b      	ldr	r3, [r3, #4]
 800d294:	2200      	movs	r2, #0
 800d296:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d29a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d29e:	f04f 0200 	mov.w	r2, #0
 800d2a2:	f04f 0300 	mov.w	r3, #0
 800d2a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800d2aa:	4629      	mov	r1, r5
 800d2ac:	008b      	lsls	r3, r1, #2
 800d2ae:	4621      	mov	r1, r4
 800d2b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d2b4:	4621      	mov	r1, r4
 800d2b6:	008a      	lsls	r2, r1, #2
 800d2b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800d2bc:	f7f3 fcd4 	bl	8000c68 <__aeabi_uldivmod>
 800d2c0:	4602      	mov	r2, r0
 800d2c2:	460b      	mov	r3, r1
 800d2c4:	4b60      	ldr	r3, [pc, #384]	; (800d448 <UART_SetConfig+0x4e4>)
 800d2c6:	fba3 2302 	umull	r2, r3, r3, r2
 800d2ca:	095b      	lsrs	r3, r3, #5
 800d2cc:	011c      	lsls	r4, r3, #4
 800d2ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d2d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d2dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800d2e0:	4642      	mov	r2, r8
 800d2e2:	464b      	mov	r3, r9
 800d2e4:	1891      	adds	r1, r2, r2
 800d2e6:	61b9      	str	r1, [r7, #24]
 800d2e8:	415b      	adcs	r3, r3
 800d2ea:	61fb      	str	r3, [r7, #28]
 800d2ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d2f0:	4641      	mov	r1, r8
 800d2f2:	1851      	adds	r1, r2, r1
 800d2f4:	6139      	str	r1, [r7, #16]
 800d2f6:	4649      	mov	r1, r9
 800d2f8:	414b      	adcs	r3, r1
 800d2fa:	617b      	str	r3, [r7, #20]
 800d2fc:	f04f 0200 	mov.w	r2, #0
 800d300:	f04f 0300 	mov.w	r3, #0
 800d304:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d308:	4659      	mov	r1, fp
 800d30a:	00cb      	lsls	r3, r1, #3
 800d30c:	4651      	mov	r1, sl
 800d30e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d312:	4651      	mov	r1, sl
 800d314:	00ca      	lsls	r2, r1, #3
 800d316:	4610      	mov	r0, r2
 800d318:	4619      	mov	r1, r3
 800d31a:	4603      	mov	r3, r0
 800d31c:	4642      	mov	r2, r8
 800d31e:	189b      	adds	r3, r3, r2
 800d320:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d324:	464b      	mov	r3, r9
 800d326:	460a      	mov	r2, r1
 800d328:	eb42 0303 	adc.w	r3, r2, r3
 800d32c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d334:	685b      	ldr	r3, [r3, #4]
 800d336:	2200      	movs	r2, #0
 800d338:	67bb      	str	r3, [r7, #120]	; 0x78
 800d33a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d33c:	f04f 0200 	mov.w	r2, #0
 800d340:	f04f 0300 	mov.w	r3, #0
 800d344:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800d348:	4649      	mov	r1, r9
 800d34a:	008b      	lsls	r3, r1, #2
 800d34c:	4641      	mov	r1, r8
 800d34e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d352:	4641      	mov	r1, r8
 800d354:	008a      	lsls	r2, r1, #2
 800d356:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800d35a:	f7f3 fc85 	bl	8000c68 <__aeabi_uldivmod>
 800d35e:	4602      	mov	r2, r0
 800d360:	460b      	mov	r3, r1
 800d362:	4611      	mov	r1, r2
 800d364:	4b38      	ldr	r3, [pc, #224]	; (800d448 <UART_SetConfig+0x4e4>)
 800d366:	fba3 2301 	umull	r2, r3, r3, r1
 800d36a:	095b      	lsrs	r3, r3, #5
 800d36c:	2264      	movs	r2, #100	; 0x64
 800d36e:	fb02 f303 	mul.w	r3, r2, r3
 800d372:	1acb      	subs	r3, r1, r3
 800d374:	011b      	lsls	r3, r3, #4
 800d376:	3332      	adds	r3, #50	; 0x32
 800d378:	4a33      	ldr	r2, [pc, #204]	; (800d448 <UART_SetConfig+0x4e4>)
 800d37a:	fba2 2303 	umull	r2, r3, r2, r3
 800d37e:	095b      	lsrs	r3, r3, #5
 800d380:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d384:	441c      	add	r4, r3
 800d386:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d38a:	2200      	movs	r2, #0
 800d38c:	673b      	str	r3, [r7, #112]	; 0x70
 800d38e:	677a      	str	r2, [r7, #116]	; 0x74
 800d390:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800d394:	4642      	mov	r2, r8
 800d396:	464b      	mov	r3, r9
 800d398:	1891      	adds	r1, r2, r2
 800d39a:	60b9      	str	r1, [r7, #8]
 800d39c:	415b      	adcs	r3, r3
 800d39e:	60fb      	str	r3, [r7, #12]
 800d3a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d3a4:	4641      	mov	r1, r8
 800d3a6:	1851      	adds	r1, r2, r1
 800d3a8:	6039      	str	r1, [r7, #0]
 800d3aa:	4649      	mov	r1, r9
 800d3ac:	414b      	adcs	r3, r1
 800d3ae:	607b      	str	r3, [r7, #4]
 800d3b0:	f04f 0200 	mov.w	r2, #0
 800d3b4:	f04f 0300 	mov.w	r3, #0
 800d3b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d3bc:	4659      	mov	r1, fp
 800d3be:	00cb      	lsls	r3, r1, #3
 800d3c0:	4651      	mov	r1, sl
 800d3c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d3c6:	4651      	mov	r1, sl
 800d3c8:	00ca      	lsls	r2, r1, #3
 800d3ca:	4610      	mov	r0, r2
 800d3cc:	4619      	mov	r1, r3
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	4642      	mov	r2, r8
 800d3d2:	189b      	adds	r3, r3, r2
 800d3d4:	66bb      	str	r3, [r7, #104]	; 0x68
 800d3d6:	464b      	mov	r3, r9
 800d3d8:	460a      	mov	r2, r1
 800d3da:	eb42 0303 	adc.w	r3, r2, r3
 800d3de:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d3e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d3e4:	685b      	ldr	r3, [r3, #4]
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	663b      	str	r3, [r7, #96]	; 0x60
 800d3ea:	667a      	str	r2, [r7, #100]	; 0x64
 800d3ec:	f04f 0200 	mov.w	r2, #0
 800d3f0:	f04f 0300 	mov.w	r3, #0
 800d3f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800d3f8:	4649      	mov	r1, r9
 800d3fa:	008b      	lsls	r3, r1, #2
 800d3fc:	4641      	mov	r1, r8
 800d3fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d402:	4641      	mov	r1, r8
 800d404:	008a      	lsls	r2, r1, #2
 800d406:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d40a:	f7f3 fc2d 	bl	8000c68 <__aeabi_uldivmod>
 800d40e:	4602      	mov	r2, r0
 800d410:	460b      	mov	r3, r1
 800d412:	4b0d      	ldr	r3, [pc, #52]	; (800d448 <UART_SetConfig+0x4e4>)
 800d414:	fba3 1302 	umull	r1, r3, r3, r2
 800d418:	095b      	lsrs	r3, r3, #5
 800d41a:	2164      	movs	r1, #100	; 0x64
 800d41c:	fb01 f303 	mul.w	r3, r1, r3
 800d420:	1ad3      	subs	r3, r2, r3
 800d422:	011b      	lsls	r3, r3, #4
 800d424:	3332      	adds	r3, #50	; 0x32
 800d426:	4a08      	ldr	r2, [pc, #32]	; (800d448 <UART_SetConfig+0x4e4>)
 800d428:	fba2 2303 	umull	r2, r3, r2, r3
 800d42c:	095b      	lsrs	r3, r3, #5
 800d42e:	f003 020f 	and.w	r2, r3, #15
 800d432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	4422      	add	r2, r4
 800d43a:	609a      	str	r2, [r3, #8]
}
 800d43c:	bf00      	nop
 800d43e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800d442:	46bd      	mov	sp, r7
 800d444:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d448:	51eb851f 	.word	0x51eb851f

0800d44c <__NVIC_SetPriority>:
{
 800d44c:	b480      	push	{r7}
 800d44e:	b083      	sub	sp, #12
 800d450:	af00      	add	r7, sp, #0
 800d452:	4603      	mov	r3, r0
 800d454:	6039      	str	r1, [r7, #0]
 800d456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	db0a      	blt.n	800d476 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	b2da      	uxtb	r2, r3
 800d464:	490c      	ldr	r1, [pc, #48]	; (800d498 <__NVIC_SetPriority+0x4c>)
 800d466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d46a:	0112      	lsls	r2, r2, #4
 800d46c:	b2d2      	uxtb	r2, r2
 800d46e:	440b      	add	r3, r1
 800d470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d474:	e00a      	b.n	800d48c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	b2da      	uxtb	r2, r3
 800d47a:	4908      	ldr	r1, [pc, #32]	; (800d49c <__NVIC_SetPriority+0x50>)
 800d47c:	79fb      	ldrb	r3, [r7, #7]
 800d47e:	f003 030f 	and.w	r3, r3, #15
 800d482:	3b04      	subs	r3, #4
 800d484:	0112      	lsls	r2, r2, #4
 800d486:	b2d2      	uxtb	r2, r2
 800d488:	440b      	add	r3, r1
 800d48a:	761a      	strb	r2, [r3, #24]
}
 800d48c:	bf00      	nop
 800d48e:	370c      	adds	r7, #12
 800d490:	46bd      	mov	sp, r7
 800d492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d496:	4770      	bx	lr
 800d498:	e000e100 	.word	0xe000e100
 800d49c:	e000ed00 	.word	0xe000ed00

0800d4a0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d4a4:	4b05      	ldr	r3, [pc, #20]	; (800d4bc <SysTick_Handler+0x1c>)
 800d4a6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d4a8:	f001 fd28 	bl	800eefc <xTaskGetSchedulerState>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	2b01      	cmp	r3, #1
 800d4b0:	d001      	beq.n	800d4b6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d4b2:	f002 fb11 	bl	800fad8 <xPortSysTickHandler>
  }
}
 800d4b6:	bf00      	nop
 800d4b8:	bd80      	pop	{r7, pc}
 800d4ba:	bf00      	nop
 800d4bc:	e000e010 	.word	0xe000e010

0800d4c0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d4c4:	2100      	movs	r1, #0
 800d4c6:	f06f 0004 	mvn.w	r0, #4
 800d4ca:	f7ff ffbf 	bl	800d44c <__NVIC_SetPriority>
#endif
}
 800d4ce:	bf00      	nop
 800d4d0:	bd80      	pop	{r7, pc}
	...

0800d4d4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d4d4:	b480      	push	{r7}
 800d4d6:	b083      	sub	sp, #12
 800d4d8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d4da:	f3ef 8305 	mrs	r3, IPSR
 800d4de:	603b      	str	r3, [r7, #0]
  return(result);
 800d4e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d003      	beq.n	800d4ee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d4e6:	f06f 0305 	mvn.w	r3, #5
 800d4ea:	607b      	str	r3, [r7, #4]
 800d4ec:	e00c      	b.n	800d508 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d4ee:	4b0a      	ldr	r3, [pc, #40]	; (800d518 <osKernelInitialize+0x44>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d105      	bne.n	800d502 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d4f6:	4b08      	ldr	r3, [pc, #32]	; (800d518 <osKernelInitialize+0x44>)
 800d4f8:	2201      	movs	r2, #1
 800d4fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	607b      	str	r3, [r7, #4]
 800d500:	e002      	b.n	800d508 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d502:	f04f 33ff 	mov.w	r3, #4294967295
 800d506:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d508:	687b      	ldr	r3, [r7, #4]
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	370c      	adds	r7, #12
 800d50e:	46bd      	mov	sp, r7
 800d510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d514:	4770      	bx	lr
 800d516:	bf00      	nop
 800d518:	200035f0 	.word	0x200035f0

0800d51c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b082      	sub	sp, #8
 800d520:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d522:	f3ef 8305 	mrs	r3, IPSR
 800d526:	603b      	str	r3, [r7, #0]
  return(result);
 800d528:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d003      	beq.n	800d536 <osKernelStart+0x1a>
    stat = osErrorISR;
 800d52e:	f06f 0305 	mvn.w	r3, #5
 800d532:	607b      	str	r3, [r7, #4]
 800d534:	e010      	b.n	800d558 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d536:	4b0b      	ldr	r3, [pc, #44]	; (800d564 <osKernelStart+0x48>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	2b01      	cmp	r3, #1
 800d53c:	d109      	bne.n	800d552 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d53e:	f7ff ffbf 	bl	800d4c0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d542:	4b08      	ldr	r3, [pc, #32]	; (800d564 <osKernelStart+0x48>)
 800d544:	2202      	movs	r2, #2
 800d546:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d548:	f001 f87c 	bl	800e644 <vTaskStartScheduler>
      stat = osOK;
 800d54c:	2300      	movs	r3, #0
 800d54e:	607b      	str	r3, [r7, #4]
 800d550:	e002      	b.n	800d558 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d552:	f04f 33ff 	mov.w	r3, #4294967295
 800d556:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d558:	687b      	ldr	r3, [r7, #4]
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3708      	adds	r7, #8
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}
 800d562:	bf00      	nop
 800d564:	200035f0 	.word	0x200035f0

0800d568 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d568:	b580      	push	{r7, lr}
 800d56a:	b08e      	sub	sp, #56	; 0x38
 800d56c:	af04      	add	r7, sp, #16
 800d56e:	60f8      	str	r0, [r7, #12]
 800d570:	60b9      	str	r1, [r7, #8]
 800d572:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d574:	2300      	movs	r3, #0
 800d576:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d578:	f3ef 8305 	mrs	r3, IPSR
 800d57c:	617b      	str	r3, [r7, #20]
  return(result);
 800d57e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d580:	2b00      	cmp	r3, #0
 800d582:	d17e      	bne.n	800d682 <osThreadNew+0x11a>
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d07b      	beq.n	800d682 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d58a:	2380      	movs	r3, #128	; 0x80
 800d58c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d58e:	2318      	movs	r3, #24
 800d590:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d592:	2300      	movs	r3, #0
 800d594:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800d596:	f04f 33ff 	mov.w	r3, #4294967295
 800d59a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d045      	beq.n	800d62e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d002      	beq.n	800d5b0 <osThreadNew+0x48>
        name = attr->name;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	699b      	ldr	r3, [r3, #24]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d002      	beq.n	800d5be <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	699b      	ldr	r3, [r3, #24]
 800d5bc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d5be:	69fb      	ldr	r3, [r7, #28]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d008      	beq.n	800d5d6 <osThreadNew+0x6e>
 800d5c4:	69fb      	ldr	r3, [r7, #28]
 800d5c6:	2b38      	cmp	r3, #56	; 0x38
 800d5c8:	d805      	bhi.n	800d5d6 <osThreadNew+0x6e>
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	685b      	ldr	r3, [r3, #4]
 800d5ce:	f003 0301 	and.w	r3, r3, #1
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d001      	beq.n	800d5da <osThreadNew+0x72>
        return (NULL);
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	e054      	b.n	800d684 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	695b      	ldr	r3, [r3, #20]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d003      	beq.n	800d5ea <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	695b      	ldr	r3, [r3, #20]
 800d5e6:	089b      	lsrs	r3, r3, #2
 800d5e8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	689b      	ldr	r3, [r3, #8]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d00e      	beq.n	800d610 <osThreadNew+0xa8>
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	68db      	ldr	r3, [r3, #12]
 800d5f6:	2ba7      	cmp	r3, #167	; 0xa7
 800d5f8:	d90a      	bls.n	800d610 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d006      	beq.n	800d610 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	695b      	ldr	r3, [r3, #20]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d002      	beq.n	800d610 <osThreadNew+0xa8>
        mem = 1;
 800d60a:	2301      	movs	r3, #1
 800d60c:	61bb      	str	r3, [r7, #24]
 800d60e:	e010      	b.n	800d632 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	689b      	ldr	r3, [r3, #8]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d10c      	bne.n	800d632 <osThreadNew+0xca>
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	68db      	ldr	r3, [r3, #12]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d108      	bne.n	800d632 <osThreadNew+0xca>
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	691b      	ldr	r3, [r3, #16]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d104      	bne.n	800d632 <osThreadNew+0xca>
          mem = 0;
 800d628:	2300      	movs	r3, #0
 800d62a:	61bb      	str	r3, [r7, #24]
 800d62c:	e001      	b.n	800d632 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d62e:	2300      	movs	r3, #0
 800d630:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d632:	69bb      	ldr	r3, [r7, #24]
 800d634:	2b01      	cmp	r3, #1
 800d636:	d110      	bne.n	800d65a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d63c:	687a      	ldr	r2, [r7, #4]
 800d63e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d640:	9202      	str	r2, [sp, #8]
 800d642:	9301      	str	r3, [sp, #4]
 800d644:	69fb      	ldr	r3, [r7, #28]
 800d646:	9300      	str	r3, [sp, #0]
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	6a3a      	ldr	r2, [r7, #32]
 800d64c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d64e:	68f8      	ldr	r0, [r7, #12]
 800d650:	f000 fe0c 	bl	800e26c <xTaskCreateStatic>
 800d654:	4603      	mov	r3, r0
 800d656:	613b      	str	r3, [r7, #16]
 800d658:	e013      	b.n	800d682 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d65a:	69bb      	ldr	r3, [r7, #24]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d110      	bne.n	800d682 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d660:	6a3b      	ldr	r3, [r7, #32]
 800d662:	b29a      	uxth	r2, r3
 800d664:	f107 0310 	add.w	r3, r7, #16
 800d668:	9301      	str	r3, [sp, #4]
 800d66a:	69fb      	ldr	r3, [r7, #28]
 800d66c:	9300      	str	r3, [sp, #0]
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d672:	68f8      	ldr	r0, [r7, #12]
 800d674:	f000 fe57 	bl	800e326 <xTaskCreate>
 800d678:	4603      	mov	r3, r0
 800d67a:	2b01      	cmp	r3, #1
 800d67c:	d001      	beq.n	800d682 <osThreadNew+0x11a>
            hTask = NULL;
 800d67e:	2300      	movs	r3, #0
 800d680:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d682:	693b      	ldr	r3, [r7, #16]
}
 800d684:	4618      	mov	r0, r3
 800d686:	3728      	adds	r7, #40	; 0x28
 800d688:	46bd      	mov	sp, r7
 800d68a:	bd80      	pop	{r7, pc}

0800d68c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b084      	sub	sp, #16
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d694:	f3ef 8305 	mrs	r3, IPSR
 800d698:	60bb      	str	r3, [r7, #8]
  return(result);
 800d69a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d003      	beq.n	800d6a8 <osDelay+0x1c>
    stat = osErrorISR;
 800d6a0:	f06f 0305 	mvn.w	r3, #5
 800d6a4:	60fb      	str	r3, [r7, #12]
 800d6a6:	e007      	b.n	800d6b8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d002      	beq.n	800d6b8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f000 ff92 	bl	800e5dc <vTaskDelay>
    }
  }

  return (stat);
 800d6b8:	68fb      	ldr	r3, [r7, #12]
}
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	3710      	adds	r7, #16
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	bd80      	pop	{r7, pc}
	...

0800d6c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d6c4:	b480      	push	{r7}
 800d6c6:	b085      	sub	sp, #20
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	60f8      	str	r0, [r7, #12]
 800d6cc:	60b9      	str	r1, [r7, #8]
 800d6ce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	4a07      	ldr	r2, [pc, #28]	; (800d6f0 <vApplicationGetIdleTaskMemory+0x2c>)
 800d6d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d6d6:	68bb      	ldr	r3, [r7, #8]
 800d6d8:	4a06      	ldr	r2, [pc, #24]	; (800d6f4 <vApplicationGetIdleTaskMemory+0x30>)
 800d6da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2280      	movs	r2, #128	; 0x80
 800d6e0:	601a      	str	r2, [r3, #0]
}
 800d6e2:	bf00      	nop
 800d6e4:	3714      	adds	r7, #20
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ec:	4770      	bx	lr
 800d6ee:	bf00      	nop
 800d6f0:	200035f4 	.word	0x200035f4
 800d6f4:	2000369c 	.word	0x2000369c

0800d6f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d6f8:	b480      	push	{r7}
 800d6fa:	b085      	sub	sp, #20
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	60f8      	str	r0, [r7, #12]
 800d700:	60b9      	str	r1, [r7, #8]
 800d702:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	4a07      	ldr	r2, [pc, #28]	; (800d724 <vApplicationGetTimerTaskMemory+0x2c>)
 800d708:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	4a06      	ldr	r2, [pc, #24]	; (800d728 <vApplicationGetTimerTaskMemory+0x30>)
 800d70e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d716:	601a      	str	r2, [r3, #0]
}
 800d718:	bf00      	nop
 800d71a:	3714      	adds	r7, #20
 800d71c:	46bd      	mov	sp, r7
 800d71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d722:	4770      	bx	lr
 800d724:	2000389c 	.word	0x2000389c
 800d728:	20003944 	.word	0x20003944

0800d72c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d72c:	b480      	push	{r7}
 800d72e:	b083      	sub	sp, #12
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f103 0208 	add.w	r2, r3, #8
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	f04f 32ff 	mov.w	r2, #4294967295
 800d744:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	f103 0208 	add.w	r2, r3, #8
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f103 0208 	add.w	r2, r3, #8
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	2200      	movs	r2, #0
 800d75e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d760:	bf00      	nop
 800d762:	370c      	adds	r7, #12
 800d764:	46bd      	mov	sp, r7
 800d766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76a:	4770      	bx	lr

0800d76c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d76c:	b480      	push	{r7}
 800d76e:	b083      	sub	sp, #12
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	2200      	movs	r2, #0
 800d778:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d77a:	bf00      	nop
 800d77c:	370c      	adds	r7, #12
 800d77e:	46bd      	mov	sp, r7
 800d780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d784:	4770      	bx	lr

0800d786 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d786:	b480      	push	{r7}
 800d788:	b085      	sub	sp, #20
 800d78a:	af00      	add	r7, sp, #0
 800d78c:	6078      	str	r0, [r7, #4]
 800d78e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	685b      	ldr	r3, [r3, #4]
 800d794:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	68fa      	ldr	r2, [r7, #12]
 800d79a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	689a      	ldr	r2, [r3, #8]
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	689b      	ldr	r3, [r3, #8]
 800d7a8:	683a      	ldr	r2, [r7, #0]
 800d7aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	683a      	ldr	r2, [r7, #0]
 800d7b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	687a      	ldr	r2, [r7, #4]
 800d7b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	1c5a      	adds	r2, r3, #1
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	601a      	str	r2, [r3, #0]
}
 800d7c2:	bf00      	nop
 800d7c4:	3714      	adds	r7, #20
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7cc:	4770      	bx	lr

0800d7ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d7ce:	b480      	push	{r7}
 800d7d0:	b085      	sub	sp, #20
 800d7d2:	af00      	add	r7, sp, #0
 800d7d4:	6078      	str	r0, [r7, #4]
 800d7d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d7de:	68bb      	ldr	r3, [r7, #8]
 800d7e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7e4:	d103      	bne.n	800d7ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	691b      	ldr	r3, [r3, #16]
 800d7ea:	60fb      	str	r3, [r7, #12]
 800d7ec:	e00c      	b.n	800d808 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	3308      	adds	r3, #8
 800d7f2:	60fb      	str	r3, [r7, #12]
 800d7f4:	e002      	b.n	800d7fc <vListInsert+0x2e>
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	685b      	ldr	r3, [r3, #4]
 800d7fa:	60fb      	str	r3, [r7, #12]
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	685b      	ldr	r3, [r3, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	68ba      	ldr	r2, [r7, #8]
 800d804:	429a      	cmp	r2, r3
 800d806:	d2f6      	bcs.n	800d7f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	685a      	ldr	r2, [r3, #4]
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	685b      	ldr	r3, [r3, #4]
 800d814:	683a      	ldr	r2, [r7, #0]
 800d816:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	68fa      	ldr	r2, [r7, #12]
 800d81c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	683a      	ldr	r2, [r7, #0]
 800d822:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	687a      	ldr	r2, [r7, #4]
 800d828:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	1c5a      	adds	r2, r3, #1
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	601a      	str	r2, [r3, #0]
}
 800d834:	bf00      	nop
 800d836:	3714      	adds	r7, #20
 800d838:	46bd      	mov	sp, r7
 800d83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83e:	4770      	bx	lr

0800d840 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d840:	b480      	push	{r7}
 800d842:	b085      	sub	sp, #20
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	691b      	ldr	r3, [r3, #16]
 800d84c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	685b      	ldr	r3, [r3, #4]
 800d852:	687a      	ldr	r2, [r7, #4]
 800d854:	6892      	ldr	r2, [r2, #8]
 800d856:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	689b      	ldr	r3, [r3, #8]
 800d85c:	687a      	ldr	r2, [r7, #4]
 800d85e:	6852      	ldr	r2, [r2, #4]
 800d860:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	685b      	ldr	r3, [r3, #4]
 800d866:	687a      	ldr	r2, [r7, #4]
 800d868:	429a      	cmp	r2, r3
 800d86a:	d103      	bne.n	800d874 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	689a      	ldr	r2, [r3, #8]
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	2200      	movs	r2, #0
 800d878:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	1e5a      	subs	r2, r3, #1
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	681b      	ldr	r3, [r3, #0]
}
 800d888:	4618      	mov	r0, r3
 800d88a:	3714      	adds	r7, #20
 800d88c:	46bd      	mov	sp, r7
 800d88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d892:	4770      	bx	lr

0800d894 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b084      	sub	sp, #16
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
 800d89c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d10a      	bne.n	800d8be <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ac:	f383 8811 	msr	BASEPRI, r3
 800d8b0:	f3bf 8f6f 	isb	sy
 800d8b4:	f3bf 8f4f 	dsb	sy
 800d8b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d8ba:	bf00      	nop
 800d8bc:	e7fe      	b.n	800d8bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d8be:	f002 f879 	bl	800f9b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	681a      	ldr	r2, [r3, #0]
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8ca:	68f9      	ldr	r1, [r7, #12]
 800d8cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d8ce:	fb01 f303 	mul.w	r3, r1, r3
 800d8d2:	441a      	add	r2, r3
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	2200      	movs	r2, #0
 800d8dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	681a      	ldr	r2, [r3, #0]
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	681a      	ldr	r2, [r3, #0]
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8ee:	3b01      	subs	r3, #1
 800d8f0:	68f9      	ldr	r1, [r7, #12]
 800d8f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d8f4:	fb01 f303 	mul.w	r3, r1, r3
 800d8f8:	441a      	add	r2, r3
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	22ff      	movs	r2, #255	; 0xff
 800d902:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	22ff      	movs	r2, #255	; 0xff
 800d90a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d114      	bne.n	800d93e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	691b      	ldr	r3, [r3, #16]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d01a      	beq.n	800d952 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	3310      	adds	r3, #16
 800d920:	4618      	mov	r0, r3
 800d922:	f001 f929 	bl	800eb78 <xTaskRemoveFromEventList>
 800d926:	4603      	mov	r3, r0
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d012      	beq.n	800d952 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d92c:	4b0c      	ldr	r3, [pc, #48]	; (800d960 <xQueueGenericReset+0xcc>)
 800d92e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d932:	601a      	str	r2, [r3, #0]
 800d934:	f3bf 8f4f 	dsb	sy
 800d938:	f3bf 8f6f 	isb	sy
 800d93c:	e009      	b.n	800d952 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	3310      	adds	r3, #16
 800d942:	4618      	mov	r0, r3
 800d944:	f7ff fef2 	bl	800d72c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	3324      	adds	r3, #36	; 0x24
 800d94c:	4618      	mov	r0, r3
 800d94e:	f7ff feed 	bl	800d72c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d952:	f002 f85f 	bl	800fa14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d956:	2301      	movs	r3, #1
}
 800d958:	4618      	mov	r0, r3
 800d95a:	3710      	adds	r7, #16
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}
 800d960:	e000ed04 	.word	0xe000ed04

0800d964 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d964:	b580      	push	{r7, lr}
 800d966:	b08e      	sub	sp, #56	; 0x38
 800d968:	af02      	add	r7, sp, #8
 800d96a:	60f8      	str	r0, [r7, #12]
 800d96c:	60b9      	str	r1, [r7, #8]
 800d96e:	607a      	str	r2, [r7, #4]
 800d970:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d10a      	bne.n	800d98e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d97c:	f383 8811 	msr	BASEPRI, r3
 800d980:	f3bf 8f6f 	isb	sy
 800d984:	f3bf 8f4f 	dsb	sy
 800d988:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d98a:	bf00      	nop
 800d98c:	e7fe      	b.n	800d98c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d10a      	bne.n	800d9aa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d994:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d998:	f383 8811 	msr	BASEPRI, r3
 800d99c:	f3bf 8f6f 	isb	sy
 800d9a0:	f3bf 8f4f 	dsb	sy
 800d9a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d9a6:	bf00      	nop
 800d9a8:	e7fe      	b.n	800d9a8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d002      	beq.n	800d9b6 <xQueueGenericCreateStatic+0x52>
 800d9b0:	68bb      	ldr	r3, [r7, #8]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d001      	beq.n	800d9ba <xQueueGenericCreateStatic+0x56>
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	e000      	b.n	800d9bc <xQueueGenericCreateStatic+0x58>
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d10a      	bne.n	800d9d6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9c4:	f383 8811 	msr	BASEPRI, r3
 800d9c8:	f3bf 8f6f 	isb	sy
 800d9cc:	f3bf 8f4f 	dsb	sy
 800d9d0:	623b      	str	r3, [r7, #32]
}
 800d9d2:	bf00      	nop
 800d9d4:	e7fe      	b.n	800d9d4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d102      	bne.n	800d9e2 <xQueueGenericCreateStatic+0x7e>
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d101      	bne.n	800d9e6 <xQueueGenericCreateStatic+0x82>
 800d9e2:	2301      	movs	r3, #1
 800d9e4:	e000      	b.n	800d9e8 <xQueueGenericCreateStatic+0x84>
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d10a      	bne.n	800da02 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9f0:	f383 8811 	msr	BASEPRI, r3
 800d9f4:	f3bf 8f6f 	isb	sy
 800d9f8:	f3bf 8f4f 	dsb	sy
 800d9fc:	61fb      	str	r3, [r7, #28]
}
 800d9fe:	bf00      	nop
 800da00:	e7fe      	b.n	800da00 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800da02:	2350      	movs	r3, #80	; 0x50
 800da04:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800da06:	697b      	ldr	r3, [r7, #20]
 800da08:	2b50      	cmp	r3, #80	; 0x50
 800da0a:	d00a      	beq.n	800da22 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800da0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da10:	f383 8811 	msr	BASEPRI, r3
 800da14:	f3bf 8f6f 	isb	sy
 800da18:	f3bf 8f4f 	dsb	sy
 800da1c:	61bb      	str	r3, [r7, #24]
}
 800da1e:	bf00      	nop
 800da20:	e7fe      	b.n	800da20 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800da22:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800da28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d00d      	beq.n	800da4a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800da2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da30:	2201      	movs	r2, #1
 800da32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800da36:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800da3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da3c:	9300      	str	r3, [sp, #0]
 800da3e:	4613      	mov	r3, r2
 800da40:	687a      	ldr	r2, [r7, #4]
 800da42:	68b9      	ldr	r1, [r7, #8]
 800da44:	68f8      	ldr	r0, [r7, #12]
 800da46:	f000 f805 	bl	800da54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800da4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800da4c:	4618      	mov	r0, r3
 800da4e:	3730      	adds	r7, #48	; 0x30
 800da50:	46bd      	mov	sp, r7
 800da52:	bd80      	pop	{r7, pc}

0800da54 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b084      	sub	sp, #16
 800da58:	af00      	add	r7, sp, #0
 800da5a:	60f8      	str	r0, [r7, #12]
 800da5c:	60b9      	str	r1, [r7, #8]
 800da5e:	607a      	str	r2, [r7, #4]
 800da60:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800da62:	68bb      	ldr	r3, [r7, #8]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d103      	bne.n	800da70 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800da68:	69bb      	ldr	r3, [r7, #24]
 800da6a:	69ba      	ldr	r2, [r7, #24]
 800da6c:	601a      	str	r2, [r3, #0]
 800da6e:	e002      	b.n	800da76 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800da70:	69bb      	ldr	r3, [r7, #24]
 800da72:	687a      	ldr	r2, [r7, #4]
 800da74:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800da76:	69bb      	ldr	r3, [r7, #24]
 800da78:	68fa      	ldr	r2, [r7, #12]
 800da7a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800da7c:	69bb      	ldr	r3, [r7, #24]
 800da7e:	68ba      	ldr	r2, [r7, #8]
 800da80:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800da82:	2101      	movs	r1, #1
 800da84:	69b8      	ldr	r0, [r7, #24]
 800da86:	f7ff ff05 	bl	800d894 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800da8a:	69bb      	ldr	r3, [r7, #24]
 800da8c:	78fa      	ldrb	r2, [r7, #3]
 800da8e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800da92:	bf00      	nop
 800da94:	3710      	adds	r7, #16
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}
	...

0800da9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b08e      	sub	sp, #56	; 0x38
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	60f8      	str	r0, [r7, #12]
 800daa4:	60b9      	str	r1, [r7, #8]
 800daa6:	607a      	str	r2, [r7, #4]
 800daa8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800daaa:	2300      	movs	r3, #0
 800daac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800dab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d10a      	bne.n	800dace <xQueueGenericSend+0x32>
	__asm volatile
 800dab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dabc:	f383 8811 	msr	BASEPRI, r3
 800dac0:	f3bf 8f6f 	isb	sy
 800dac4:	f3bf 8f4f 	dsb	sy
 800dac8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800daca:	bf00      	nop
 800dacc:	e7fe      	b.n	800dacc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dace:	68bb      	ldr	r3, [r7, #8]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d103      	bne.n	800dadc <xQueueGenericSend+0x40>
 800dad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d101      	bne.n	800dae0 <xQueueGenericSend+0x44>
 800dadc:	2301      	movs	r3, #1
 800dade:	e000      	b.n	800dae2 <xQueueGenericSend+0x46>
 800dae0:	2300      	movs	r3, #0
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d10a      	bne.n	800dafc <xQueueGenericSend+0x60>
	__asm volatile
 800dae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daea:	f383 8811 	msr	BASEPRI, r3
 800daee:	f3bf 8f6f 	isb	sy
 800daf2:	f3bf 8f4f 	dsb	sy
 800daf6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800daf8:	bf00      	nop
 800dafa:	e7fe      	b.n	800dafa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	2b02      	cmp	r3, #2
 800db00:	d103      	bne.n	800db0a <xQueueGenericSend+0x6e>
 800db02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db06:	2b01      	cmp	r3, #1
 800db08:	d101      	bne.n	800db0e <xQueueGenericSend+0x72>
 800db0a:	2301      	movs	r3, #1
 800db0c:	e000      	b.n	800db10 <xQueueGenericSend+0x74>
 800db0e:	2300      	movs	r3, #0
 800db10:	2b00      	cmp	r3, #0
 800db12:	d10a      	bne.n	800db2a <xQueueGenericSend+0x8e>
	__asm volatile
 800db14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db18:	f383 8811 	msr	BASEPRI, r3
 800db1c:	f3bf 8f6f 	isb	sy
 800db20:	f3bf 8f4f 	dsb	sy
 800db24:	623b      	str	r3, [r7, #32]
}
 800db26:	bf00      	nop
 800db28:	e7fe      	b.n	800db28 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800db2a:	f001 f9e7 	bl	800eefc <xTaskGetSchedulerState>
 800db2e:	4603      	mov	r3, r0
 800db30:	2b00      	cmp	r3, #0
 800db32:	d102      	bne.n	800db3a <xQueueGenericSend+0x9e>
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d101      	bne.n	800db3e <xQueueGenericSend+0xa2>
 800db3a:	2301      	movs	r3, #1
 800db3c:	e000      	b.n	800db40 <xQueueGenericSend+0xa4>
 800db3e:	2300      	movs	r3, #0
 800db40:	2b00      	cmp	r3, #0
 800db42:	d10a      	bne.n	800db5a <xQueueGenericSend+0xbe>
	__asm volatile
 800db44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db48:	f383 8811 	msr	BASEPRI, r3
 800db4c:	f3bf 8f6f 	isb	sy
 800db50:	f3bf 8f4f 	dsb	sy
 800db54:	61fb      	str	r3, [r7, #28]
}
 800db56:	bf00      	nop
 800db58:	e7fe      	b.n	800db58 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800db5a:	f001 ff2b 	bl	800f9b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800db5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db66:	429a      	cmp	r2, r3
 800db68:	d302      	bcc.n	800db70 <xQueueGenericSend+0xd4>
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	2b02      	cmp	r3, #2
 800db6e:	d129      	bne.n	800dbc4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800db70:	683a      	ldr	r2, [r7, #0]
 800db72:	68b9      	ldr	r1, [r7, #8]
 800db74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db76:	f000 fa0b 	bl	800df90 <prvCopyDataToQueue>
 800db7a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800db7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db80:	2b00      	cmp	r3, #0
 800db82:	d010      	beq.n	800dba6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800db84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db86:	3324      	adds	r3, #36	; 0x24
 800db88:	4618      	mov	r0, r3
 800db8a:	f000 fff5 	bl	800eb78 <xTaskRemoveFromEventList>
 800db8e:	4603      	mov	r3, r0
 800db90:	2b00      	cmp	r3, #0
 800db92:	d013      	beq.n	800dbbc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800db94:	4b3f      	ldr	r3, [pc, #252]	; (800dc94 <xQueueGenericSend+0x1f8>)
 800db96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db9a:	601a      	str	r2, [r3, #0]
 800db9c:	f3bf 8f4f 	dsb	sy
 800dba0:	f3bf 8f6f 	isb	sy
 800dba4:	e00a      	b.n	800dbbc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800dba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d007      	beq.n	800dbbc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800dbac:	4b39      	ldr	r3, [pc, #228]	; (800dc94 <xQueueGenericSend+0x1f8>)
 800dbae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbb2:	601a      	str	r2, [r3, #0]
 800dbb4:	f3bf 8f4f 	dsb	sy
 800dbb8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800dbbc:	f001 ff2a 	bl	800fa14 <vPortExitCritical>
				return pdPASS;
 800dbc0:	2301      	movs	r3, #1
 800dbc2:	e063      	b.n	800dc8c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d103      	bne.n	800dbd2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dbca:	f001 ff23 	bl	800fa14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	e05c      	b.n	800dc8c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dbd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d106      	bne.n	800dbe6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dbd8:	f107 0314 	add.w	r3, r7, #20
 800dbdc:	4618      	mov	r0, r3
 800dbde:	f001 f82f 	bl	800ec40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dbe6:	f001 ff15 	bl	800fa14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dbea:	f000 fd9b 	bl	800e724 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dbee:	f001 fee1 	bl	800f9b4 <vPortEnterCritical>
 800dbf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dbf8:	b25b      	sxtb	r3, r3
 800dbfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbfe:	d103      	bne.n	800dc08 <xQueueGenericSend+0x16c>
 800dc00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc02:	2200      	movs	r2, #0
 800dc04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dc08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dc0e:	b25b      	sxtb	r3, r3
 800dc10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc14:	d103      	bne.n	800dc1e <xQueueGenericSend+0x182>
 800dc16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc18:	2200      	movs	r2, #0
 800dc1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dc1e:	f001 fef9 	bl	800fa14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dc22:	1d3a      	adds	r2, r7, #4
 800dc24:	f107 0314 	add.w	r3, r7, #20
 800dc28:	4611      	mov	r1, r2
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	f001 f81e 	bl	800ec6c <xTaskCheckForTimeOut>
 800dc30:	4603      	mov	r3, r0
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d124      	bne.n	800dc80 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800dc36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc38:	f000 faa2 	bl	800e180 <prvIsQueueFull>
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d018      	beq.n	800dc74 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800dc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc44:	3310      	adds	r3, #16
 800dc46:	687a      	ldr	r2, [r7, #4]
 800dc48:	4611      	mov	r1, r2
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f000 ff44 	bl	800ead8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800dc50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc52:	f000 fa2d 	bl	800e0b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800dc56:	f000 fd73 	bl	800e740 <xTaskResumeAll>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	f47f af7c 	bne.w	800db5a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800dc62:	4b0c      	ldr	r3, [pc, #48]	; (800dc94 <xQueueGenericSend+0x1f8>)
 800dc64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc68:	601a      	str	r2, [r3, #0]
 800dc6a:	f3bf 8f4f 	dsb	sy
 800dc6e:	f3bf 8f6f 	isb	sy
 800dc72:	e772      	b.n	800db5a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800dc74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc76:	f000 fa1b 	bl	800e0b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dc7a:	f000 fd61 	bl	800e740 <xTaskResumeAll>
 800dc7e:	e76c      	b.n	800db5a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800dc80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc82:	f000 fa15 	bl	800e0b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dc86:	f000 fd5b 	bl	800e740 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800dc8a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3738      	adds	r7, #56	; 0x38
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}
 800dc94:	e000ed04 	.word	0xe000ed04

0800dc98 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b090      	sub	sp, #64	; 0x40
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	60f8      	str	r0, [r7, #12]
 800dca0:	60b9      	str	r1, [r7, #8]
 800dca2:	607a      	str	r2, [r7, #4]
 800dca4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800dcaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d10a      	bne.n	800dcc6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800dcb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcb4:	f383 8811 	msr	BASEPRI, r3
 800dcb8:	f3bf 8f6f 	isb	sy
 800dcbc:	f3bf 8f4f 	dsb	sy
 800dcc0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800dcc2:	bf00      	nop
 800dcc4:	e7fe      	b.n	800dcc4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dcc6:	68bb      	ldr	r3, [r7, #8]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d103      	bne.n	800dcd4 <xQueueGenericSendFromISR+0x3c>
 800dccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d101      	bne.n	800dcd8 <xQueueGenericSendFromISR+0x40>
 800dcd4:	2301      	movs	r3, #1
 800dcd6:	e000      	b.n	800dcda <xQueueGenericSendFromISR+0x42>
 800dcd8:	2300      	movs	r3, #0
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d10a      	bne.n	800dcf4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800dcde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dce2:	f383 8811 	msr	BASEPRI, r3
 800dce6:	f3bf 8f6f 	isb	sy
 800dcea:	f3bf 8f4f 	dsb	sy
 800dcee:	627b      	str	r3, [r7, #36]	; 0x24
}
 800dcf0:	bf00      	nop
 800dcf2:	e7fe      	b.n	800dcf2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	2b02      	cmp	r3, #2
 800dcf8:	d103      	bne.n	800dd02 <xQueueGenericSendFromISR+0x6a>
 800dcfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcfe:	2b01      	cmp	r3, #1
 800dd00:	d101      	bne.n	800dd06 <xQueueGenericSendFromISR+0x6e>
 800dd02:	2301      	movs	r3, #1
 800dd04:	e000      	b.n	800dd08 <xQueueGenericSendFromISR+0x70>
 800dd06:	2300      	movs	r3, #0
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d10a      	bne.n	800dd22 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800dd0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd10:	f383 8811 	msr	BASEPRI, r3
 800dd14:	f3bf 8f6f 	isb	sy
 800dd18:	f3bf 8f4f 	dsb	sy
 800dd1c:	623b      	str	r3, [r7, #32]
}
 800dd1e:	bf00      	nop
 800dd20:	e7fe      	b.n	800dd20 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dd22:	f001 ff29 	bl	800fb78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800dd26:	f3ef 8211 	mrs	r2, BASEPRI
 800dd2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd2e:	f383 8811 	msr	BASEPRI, r3
 800dd32:	f3bf 8f6f 	isb	sy
 800dd36:	f3bf 8f4f 	dsb	sy
 800dd3a:	61fa      	str	r2, [r7, #28]
 800dd3c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800dd3e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dd40:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dd42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd4a:	429a      	cmp	r2, r3
 800dd4c:	d302      	bcc.n	800dd54 <xQueueGenericSendFromISR+0xbc>
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	2b02      	cmp	r3, #2
 800dd52:	d12f      	bne.n	800ddb4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dd54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dd5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd62:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dd64:	683a      	ldr	r2, [r7, #0]
 800dd66:	68b9      	ldr	r1, [r7, #8]
 800dd68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dd6a:	f000 f911 	bl	800df90 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dd6e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800dd72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd76:	d112      	bne.n	800dd9e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dd78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d016      	beq.n	800ddae <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dd80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd82:	3324      	adds	r3, #36	; 0x24
 800dd84:	4618      	mov	r0, r3
 800dd86:	f000 fef7 	bl	800eb78 <xTaskRemoveFromEventList>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d00e      	beq.n	800ddae <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d00b      	beq.n	800ddae <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	2201      	movs	r2, #1
 800dd9a:	601a      	str	r2, [r3, #0]
 800dd9c:	e007      	b.n	800ddae <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dd9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800dda2:	3301      	adds	r3, #1
 800dda4:	b2db      	uxtb	r3, r3
 800dda6:	b25a      	sxtb	r2, r3
 800dda8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ddae:	2301      	movs	r3, #1
 800ddb0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ddb2:	e001      	b.n	800ddb8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ddb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddba:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ddc2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ddc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	3740      	adds	r7, #64	; 0x40
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	bd80      	pop	{r7, pc}
	...

0800ddd0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b08c      	sub	sp, #48	; 0x30
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	60f8      	str	r0, [r7, #12]
 800ddd8:	60b9      	str	r1, [r7, #8]
 800ddda:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800dddc:	2300      	movs	r3, #0
 800ddde:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dde4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d10a      	bne.n	800de00 <xQueueReceive+0x30>
	__asm volatile
 800ddea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddee:	f383 8811 	msr	BASEPRI, r3
 800ddf2:	f3bf 8f6f 	isb	sy
 800ddf6:	f3bf 8f4f 	dsb	sy
 800ddfa:	623b      	str	r3, [r7, #32]
}
 800ddfc:	bf00      	nop
 800ddfe:	e7fe      	b.n	800ddfe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800de00:	68bb      	ldr	r3, [r7, #8]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d103      	bne.n	800de0e <xQueueReceive+0x3e>
 800de06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d101      	bne.n	800de12 <xQueueReceive+0x42>
 800de0e:	2301      	movs	r3, #1
 800de10:	e000      	b.n	800de14 <xQueueReceive+0x44>
 800de12:	2300      	movs	r3, #0
 800de14:	2b00      	cmp	r3, #0
 800de16:	d10a      	bne.n	800de2e <xQueueReceive+0x5e>
	__asm volatile
 800de18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de1c:	f383 8811 	msr	BASEPRI, r3
 800de20:	f3bf 8f6f 	isb	sy
 800de24:	f3bf 8f4f 	dsb	sy
 800de28:	61fb      	str	r3, [r7, #28]
}
 800de2a:	bf00      	nop
 800de2c:	e7fe      	b.n	800de2c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800de2e:	f001 f865 	bl	800eefc <xTaskGetSchedulerState>
 800de32:	4603      	mov	r3, r0
 800de34:	2b00      	cmp	r3, #0
 800de36:	d102      	bne.n	800de3e <xQueueReceive+0x6e>
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d101      	bne.n	800de42 <xQueueReceive+0x72>
 800de3e:	2301      	movs	r3, #1
 800de40:	e000      	b.n	800de44 <xQueueReceive+0x74>
 800de42:	2300      	movs	r3, #0
 800de44:	2b00      	cmp	r3, #0
 800de46:	d10a      	bne.n	800de5e <xQueueReceive+0x8e>
	__asm volatile
 800de48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de4c:	f383 8811 	msr	BASEPRI, r3
 800de50:	f3bf 8f6f 	isb	sy
 800de54:	f3bf 8f4f 	dsb	sy
 800de58:	61bb      	str	r3, [r7, #24]
}
 800de5a:	bf00      	nop
 800de5c:	e7fe      	b.n	800de5c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800de5e:	f001 fda9 	bl	800f9b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800de62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de66:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800de68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d01f      	beq.n	800deae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800de6e:	68b9      	ldr	r1, [r7, #8]
 800de70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de72:	f000 f8f7 	bl	800e064 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800de76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de78:	1e5a      	subs	r2, r3, #1
 800de7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de7c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de80:	691b      	ldr	r3, [r3, #16]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d00f      	beq.n	800dea6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800de86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de88:	3310      	adds	r3, #16
 800de8a:	4618      	mov	r0, r3
 800de8c:	f000 fe74 	bl	800eb78 <xTaskRemoveFromEventList>
 800de90:	4603      	mov	r3, r0
 800de92:	2b00      	cmp	r3, #0
 800de94:	d007      	beq.n	800dea6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800de96:	4b3d      	ldr	r3, [pc, #244]	; (800df8c <xQueueReceive+0x1bc>)
 800de98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de9c:	601a      	str	r2, [r3, #0]
 800de9e:	f3bf 8f4f 	dsb	sy
 800dea2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dea6:	f001 fdb5 	bl	800fa14 <vPortExitCritical>
				return pdPASS;
 800deaa:	2301      	movs	r3, #1
 800deac:	e069      	b.n	800df82 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d103      	bne.n	800debc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800deb4:	f001 fdae 	bl	800fa14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800deb8:	2300      	movs	r3, #0
 800deba:	e062      	b.n	800df82 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800debc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d106      	bne.n	800ded0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dec2:	f107 0310 	add.w	r3, r7, #16
 800dec6:	4618      	mov	r0, r3
 800dec8:	f000 feba 	bl	800ec40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800decc:	2301      	movs	r3, #1
 800dece:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ded0:	f001 fda0 	bl	800fa14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ded4:	f000 fc26 	bl	800e724 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ded8:	f001 fd6c 	bl	800f9b4 <vPortEnterCritical>
 800dedc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dede:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dee2:	b25b      	sxtb	r3, r3
 800dee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dee8:	d103      	bne.n	800def2 <xQueueReceive+0x122>
 800deea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deec:	2200      	movs	r2, #0
 800deee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800def2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800def8:	b25b      	sxtb	r3, r3
 800defa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800defe:	d103      	bne.n	800df08 <xQueueReceive+0x138>
 800df00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df02:	2200      	movs	r2, #0
 800df04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800df08:	f001 fd84 	bl	800fa14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800df0c:	1d3a      	adds	r2, r7, #4
 800df0e:	f107 0310 	add.w	r3, r7, #16
 800df12:	4611      	mov	r1, r2
 800df14:	4618      	mov	r0, r3
 800df16:	f000 fea9 	bl	800ec6c <xTaskCheckForTimeOut>
 800df1a:	4603      	mov	r3, r0
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d123      	bne.n	800df68 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800df20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df22:	f000 f917 	bl	800e154 <prvIsQueueEmpty>
 800df26:	4603      	mov	r3, r0
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d017      	beq.n	800df5c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800df2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df2e:	3324      	adds	r3, #36	; 0x24
 800df30:	687a      	ldr	r2, [r7, #4]
 800df32:	4611      	mov	r1, r2
 800df34:	4618      	mov	r0, r3
 800df36:	f000 fdcf 	bl	800ead8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800df3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df3c:	f000 f8b8 	bl	800e0b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800df40:	f000 fbfe 	bl	800e740 <xTaskResumeAll>
 800df44:	4603      	mov	r3, r0
 800df46:	2b00      	cmp	r3, #0
 800df48:	d189      	bne.n	800de5e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800df4a:	4b10      	ldr	r3, [pc, #64]	; (800df8c <xQueueReceive+0x1bc>)
 800df4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df50:	601a      	str	r2, [r3, #0]
 800df52:	f3bf 8f4f 	dsb	sy
 800df56:	f3bf 8f6f 	isb	sy
 800df5a:	e780      	b.n	800de5e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800df5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df5e:	f000 f8a7 	bl	800e0b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800df62:	f000 fbed 	bl	800e740 <xTaskResumeAll>
 800df66:	e77a      	b.n	800de5e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800df68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df6a:	f000 f8a1 	bl	800e0b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800df6e:	f000 fbe7 	bl	800e740 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800df72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df74:	f000 f8ee 	bl	800e154 <prvIsQueueEmpty>
 800df78:	4603      	mov	r3, r0
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	f43f af6f 	beq.w	800de5e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800df80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800df82:	4618      	mov	r0, r3
 800df84:	3730      	adds	r7, #48	; 0x30
 800df86:	46bd      	mov	sp, r7
 800df88:	bd80      	pop	{r7, pc}
 800df8a:	bf00      	nop
 800df8c:	e000ed04 	.word	0xe000ed04

0800df90 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b086      	sub	sp, #24
 800df94:	af00      	add	r7, sp, #0
 800df96:	60f8      	str	r0, [r7, #12]
 800df98:	60b9      	str	r1, [r7, #8]
 800df9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800df9c:	2300      	movs	r3, #0
 800df9e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfa4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d10d      	bne.n	800dfca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d14d      	bne.n	800e052 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	689b      	ldr	r3, [r3, #8]
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f000 ffbc 	bl	800ef38 <xTaskPriorityDisinherit>
 800dfc0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	609a      	str	r2, [r3, #8]
 800dfc8:	e043      	b.n	800e052 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d119      	bne.n	800e004 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	6858      	ldr	r0, [r3, #4]
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfd8:	461a      	mov	r2, r3
 800dfda:	68b9      	ldr	r1, [r7, #8]
 800dfdc:	f004 ff07 	bl	8012dee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	685a      	ldr	r2, [r3, #4]
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfe8:	441a      	add	r2, r3
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	685a      	ldr	r2, [r3, #4]
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	689b      	ldr	r3, [r3, #8]
 800dff6:	429a      	cmp	r2, r3
 800dff8:	d32b      	bcc.n	800e052 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	681a      	ldr	r2, [r3, #0]
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	605a      	str	r2, [r3, #4]
 800e002:	e026      	b.n	800e052 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	68d8      	ldr	r0, [r3, #12]
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e00c:	461a      	mov	r2, r3
 800e00e:	68b9      	ldr	r1, [r7, #8]
 800e010:	f004 feed 	bl	8012dee <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	68da      	ldr	r2, [r3, #12]
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e01c:	425b      	negs	r3, r3
 800e01e:	441a      	add	r2, r3
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	68da      	ldr	r2, [r3, #12]
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	429a      	cmp	r2, r3
 800e02e:	d207      	bcs.n	800e040 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	689a      	ldr	r2, [r3, #8]
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e038:	425b      	negs	r3, r3
 800e03a:	441a      	add	r2, r3
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	2b02      	cmp	r3, #2
 800e044:	d105      	bne.n	800e052 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e046:	693b      	ldr	r3, [r7, #16]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d002      	beq.n	800e052 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e04c:	693b      	ldr	r3, [r7, #16]
 800e04e:	3b01      	subs	r3, #1
 800e050:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e052:	693b      	ldr	r3, [r7, #16]
 800e054:	1c5a      	adds	r2, r3, #1
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e05a:	697b      	ldr	r3, [r7, #20]
}
 800e05c:	4618      	mov	r0, r3
 800e05e:	3718      	adds	r7, #24
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}

0800e064 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b082      	sub	sp, #8
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
 800e06c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e072:	2b00      	cmp	r3, #0
 800e074:	d018      	beq.n	800e0a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	68da      	ldr	r2, [r3, #12]
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e07e:	441a      	add	r2, r3
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	68da      	ldr	r2, [r3, #12]
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	689b      	ldr	r3, [r3, #8]
 800e08c:	429a      	cmp	r2, r3
 800e08e:	d303      	bcc.n	800e098 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681a      	ldr	r2, [r3, #0]
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	68d9      	ldr	r1, [r3, #12]
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0a0:	461a      	mov	r2, r3
 800e0a2:	6838      	ldr	r0, [r7, #0]
 800e0a4:	f004 fea3 	bl	8012dee <memcpy>
	}
}
 800e0a8:	bf00      	nop
 800e0aa:	3708      	adds	r7, #8
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}

0800e0b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b084      	sub	sp, #16
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e0b8:	f001 fc7c 	bl	800f9b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e0c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e0c4:	e011      	b.n	800e0ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d012      	beq.n	800e0f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	3324      	adds	r3, #36	; 0x24
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f000 fd50 	bl	800eb78 <xTaskRemoveFromEventList>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d001      	beq.n	800e0e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e0de:	f000 fe27 	bl	800ed30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e0e2:	7bfb      	ldrb	r3, [r7, #15]
 800e0e4:	3b01      	subs	r3, #1
 800e0e6:	b2db      	uxtb	r3, r3
 800e0e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e0ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	dce9      	bgt.n	800e0c6 <prvUnlockQueue+0x16>
 800e0f2:	e000      	b.n	800e0f6 <prvUnlockQueue+0x46>
					break;
 800e0f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	22ff      	movs	r2, #255	; 0xff
 800e0fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e0fe:	f001 fc89 	bl	800fa14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e102:	f001 fc57 	bl	800f9b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e10c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e10e:	e011      	b.n	800e134 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	691b      	ldr	r3, [r3, #16]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d012      	beq.n	800e13e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	3310      	adds	r3, #16
 800e11c:	4618      	mov	r0, r3
 800e11e:	f000 fd2b 	bl	800eb78 <xTaskRemoveFromEventList>
 800e122:	4603      	mov	r3, r0
 800e124:	2b00      	cmp	r3, #0
 800e126:	d001      	beq.n	800e12c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e128:	f000 fe02 	bl	800ed30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e12c:	7bbb      	ldrb	r3, [r7, #14]
 800e12e:	3b01      	subs	r3, #1
 800e130:	b2db      	uxtb	r3, r3
 800e132:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e134:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	dce9      	bgt.n	800e110 <prvUnlockQueue+0x60>
 800e13c:	e000      	b.n	800e140 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e13e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	22ff      	movs	r2, #255	; 0xff
 800e144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e148:	f001 fc64 	bl	800fa14 <vPortExitCritical>
}
 800e14c:	bf00      	nop
 800e14e:	3710      	adds	r7, #16
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}

0800e154 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b084      	sub	sp, #16
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e15c:	f001 fc2a 	bl	800f9b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e164:	2b00      	cmp	r3, #0
 800e166:	d102      	bne.n	800e16e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e168:	2301      	movs	r3, #1
 800e16a:	60fb      	str	r3, [r7, #12]
 800e16c:	e001      	b.n	800e172 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e16e:	2300      	movs	r3, #0
 800e170:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e172:	f001 fc4f 	bl	800fa14 <vPortExitCritical>

	return xReturn;
 800e176:	68fb      	ldr	r3, [r7, #12]
}
 800e178:	4618      	mov	r0, r3
 800e17a:	3710      	adds	r7, #16
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd80      	pop	{r7, pc}

0800e180 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b084      	sub	sp, #16
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e188:	f001 fc14 	bl	800f9b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e194:	429a      	cmp	r2, r3
 800e196:	d102      	bne.n	800e19e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e198:	2301      	movs	r3, #1
 800e19a:	60fb      	str	r3, [r7, #12]
 800e19c:	e001      	b.n	800e1a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e19e:	2300      	movs	r3, #0
 800e1a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e1a2:	f001 fc37 	bl	800fa14 <vPortExitCritical>

	return xReturn;
 800e1a6:	68fb      	ldr	r3, [r7, #12]
}
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	3710      	adds	r7, #16
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bd80      	pop	{r7, pc}

0800e1b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e1b0:	b480      	push	{r7}
 800e1b2:	b085      	sub	sp, #20
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
 800e1b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	60fb      	str	r3, [r7, #12]
 800e1be:	e014      	b.n	800e1ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e1c0:	4a0f      	ldr	r2, [pc, #60]	; (800e200 <vQueueAddToRegistry+0x50>)
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d10b      	bne.n	800e1e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e1cc:	490c      	ldr	r1, [pc, #48]	; (800e200 <vQueueAddToRegistry+0x50>)
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	683a      	ldr	r2, [r7, #0]
 800e1d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e1d6:	4a0a      	ldr	r2, [pc, #40]	; (800e200 <vQueueAddToRegistry+0x50>)
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	00db      	lsls	r3, r3, #3
 800e1dc:	4413      	add	r3, r2
 800e1de:	687a      	ldr	r2, [r7, #4]
 800e1e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e1e2:	e006      	b.n	800e1f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	3301      	adds	r3, #1
 800e1e8:	60fb      	str	r3, [r7, #12]
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	2b07      	cmp	r3, #7
 800e1ee:	d9e7      	bls.n	800e1c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e1f0:	bf00      	nop
 800e1f2:	bf00      	nop
 800e1f4:	3714      	adds	r7, #20
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fc:	4770      	bx	lr
 800e1fe:	bf00      	nop
 800e200:	20003d44 	.word	0x20003d44

0800e204 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e204:	b580      	push	{r7, lr}
 800e206:	b086      	sub	sp, #24
 800e208:	af00      	add	r7, sp, #0
 800e20a:	60f8      	str	r0, [r7, #12]
 800e20c:	60b9      	str	r1, [r7, #8]
 800e20e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e214:	f001 fbce 	bl	800f9b4 <vPortEnterCritical>
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e21e:	b25b      	sxtb	r3, r3
 800e220:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e224:	d103      	bne.n	800e22e <vQueueWaitForMessageRestricted+0x2a>
 800e226:	697b      	ldr	r3, [r7, #20]
 800e228:	2200      	movs	r2, #0
 800e22a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e234:	b25b      	sxtb	r3, r3
 800e236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e23a:	d103      	bne.n	800e244 <vQueueWaitForMessageRestricted+0x40>
 800e23c:	697b      	ldr	r3, [r7, #20]
 800e23e:	2200      	movs	r2, #0
 800e240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e244:	f001 fbe6 	bl	800fa14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d106      	bne.n	800e25e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e250:	697b      	ldr	r3, [r7, #20]
 800e252:	3324      	adds	r3, #36	; 0x24
 800e254:	687a      	ldr	r2, [r7, #4]
 800e256:	68b9      	ldr	r1, [r7, #8]
 800e258:	4618      	mov	r0, r3
 800e25a:	f000 fc61 	bl	800eb20 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e25e:	6978      	ldr	r0, [r7, #20]
 800e260:	f7ff ff26 	bl	800e0b0 <prvUnlockQueue>
	}
 800e264:	bf00      	nop
 800e266:	3718      	adds	r7, #24
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}

0800e26c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b08e      	sub	sp, #56	; 0x38
 800e270:	af04      	add	r7, sp, #16
 800e272:	60f8      	str	r0, [r7, #12]
 800e274:	60b9      	str	r1, [r7, #8]
 800e276:	607a      	str	r2, [r7, #4]
 800e278:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e27a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d10a      	bne.n	800e296 <xTaskCreateStatic+0x2a>
	__asm volatile
 800e280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e284:	f383 8811 	msr	BASEPRI, r3
 800e288:	f3bf 8f6f 	isb	sy
 800e28c:	f3bf 8f4f 	dsb	sy
 800e290:	623b      	str	r3, [r7, #32]
}
 800e292:	bf00      	nop
 800e294:	e7fe      	b.n	800e294 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d10a      	bne.n	800e2b2 <xTaskCreateStatic+0x46>
	__asm volatile
 800e29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2a0:	f383 8811 	msr	BASEPRI, r3
 800e2a4:	f3bf 8f6f 	isb	sy
 800e2a8:	f3bf 8f4f 	dsb	sy
 800e2ac:	61fb      	str	r3, [r7, #28]
}
 800e2ae:	bf00      	nop
 800e2b0:	e7fe      	b.n	800e2b0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e2b2:	23a8      	movs	r3, #168	; 0xa8
 800e2b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e2b6:	693b      	ldr	r3, [r7, #16]
 800e2b8:	2ba8      	cmp	r3, #168	; 0xa8
 800e2ba:	d00a      	beq.n	800e2d2 <xTaskCreateStatic+0x66>
	__asm volatile
 800e2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2c0:	f383 8811 	msr	BASEPRI, r3
 800e2c4:	f3bf 8f6f 	isb	sy
 800e2c8:	f3bf 8f4f 	dsb	sy
 800e2cc:	61bb      	str	r3, [r7, #24]
}
 800e2ce:	bf00      	nop
 800e2d0:	e7fe      	b.n	800e2d0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e2d2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d01e      	beq.n	800e318 <xTaskCreateStatic+0xac>
 800e2da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d01b      	beq.n	800e318 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2e2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e2e8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ec:	2202      	movs	r2, #2
 800e2ee:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	9303      	str	r3, [sp, #12]
 800e2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f8:	9302      	str	r3, [sp, #8]
 800e2fa:	f107 0314 	add.w	r3, r7, #20
 800e2fe:	9301      	str	r3, [sp, #4]
 800e300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e302:	9300      	str	r3, [sp, #0]
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	687a      	ldr	r2, [r7, #4]
 800e308:	68b9      	ldr	r1, [r7, #8]
 800e30a:	68f8      	ldr	r0, [r7, #12]
 800e30c:	f000 f850 	bl	800e3b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e310:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e312:	f000 f8f3 	bl	800e4fc <prvAddNewTaskToReadyList>
 800e316:	e001      	b.n	800e31c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e318:	2300      	movs	r3, #0
 800e31a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e31c:	697b      	ldr	r3, [r7, #20]
	}
 800e31e:	4618      	mov	r0, r3
 800e320:	3728      	adds	r7, #40	; 0x28
 800e322:	46bd      	mov	sp, r7
 800e324:	bd80      	pop	{r7, pc}

0800e326 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e326:	b580      	push	{r7, lr}
 800e328:	b08c      	sub	sp, #48	; 0x30
 800e32a:	af04      	add	r7, sp, #16
 800e32c:	60f8      	str	r0, [r7, #12]
 800e32e:	60b9      	str	r1, [r7, #8]
 800e330:	603b      	str	r3, [r7, #0]
 800e332:	4613      	mov	r3, r2
 800e334:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e336:	88fb      	ldrh	r3, [r7, #6]
 800e338:	009b      	lsls	r3, r3, #2
 800e33a:	4618      	mov	r0, r3
 800e33c:	f001 fc5c 	bl	800fbf8 <pvPortMalloc>
 800e340:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e342:	697b      	ldr	r3, [r7, #20]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d00e      	beq.n	800e366 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e348:	20a8      	movs	r0, #168	; 0xa8
 800e34a:	f001 fc55 	bl	800fbf8 <pvPortMalloc>
 800e34e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e350:	69fb      	ldr	r3, [r7, #28]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d003      	beq.n	800e35e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e356:	69fb      	ldr	r3, [r7, #28]
 800e358:	697a      	ldr	r2, [r7, #20]
 800e35a:	631a      	str	r2, [r3, #48]	; 0x30
 800e35c:	e005      	b.n	800e36a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e35e:	6978      	ldr	r0, [r7, #20]
 800e360:	f001 fd16 	bl	800fd90 <vPortFree>
 800e364:	e001      	b.n	800e36a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e366:	2300      	movs	r3, #0
 800e368:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e36a:	69fb      	ldr	r3, [r7, #28]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d017      	beq.n	800e3a0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e370:	69fb      	ldr	r3, [r7, #28]
 800e372:	2200      	movs	r2, #0
 800e374:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e378:	88fa      	ldrh	r2, [r7, #6]
 800e37a:	2300      	movs	r3, #0
 800e37c:	9303      	str	r3, [sp, #12]
 800e37e:	69fb      	ldr	r3, [r7, #28]
 800e380:	9302      	str	r3, [sp, #8]
 800e382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e384:	9301      	str	r3, [sp, #4]
 800e386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e388:	9300      	str	r3, [sp, #0]
 800e38a:	683b      	ldr	r3, [r7, #0]
 800e38c:	68b9      	ldr	r1, [r7, #8]
 800e38e:	68f8      	ldr	r0, [r7, #12]
 800e390:	f000 f80e 	bl	800e3b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e394:	69f8      	ldr	r0, [r7, #28]
 800e396:	f000 f8b1 	bl	800e4fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e39a:	2301      	movs	r3, #1
 800e39c:	61bb      	str	r3, [r7, #24]
 800e39e:	e002      	b.n	800e3a6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e3a0:	f04f 33ff 	mov.w	r3, #4294967295
 800e3a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e3a6:	69bb      	ldr	r3, [r7, #24]
	}
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	3720      	adds	r7, #32
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bd80      	pop	{r7, pc}

0800e3b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b088      	sub	sp, #32
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	60f8      	str	r0, [r7, #12]
 800e3b8:	60b9      	str	r1, [r7, #8]
 800e3ba:	607a      	str	r2, [r7, #4]
 800e3bc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	009b      	lsls	r3, r3, #2
 800e3c6:	461a      	mov	r2, r3
 800e3c8:	21a5      	movs	r1, #165	; 0xa5
 800e3ca:	f004 fc3b 	bl	8012c44 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e3d8:	3b01      	subs	r3, #1
 800e3da:	009b      	lsls	r3, r3, #2
 800e3dc:	4413      	add	r3, r2
 800e3de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e3e0:	69bb      	ldr	r3, [r7, #24]
 800e3e2:	f023 0307 	bic.w	r3, r3, #7
 800e3e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e3e8:	69bb      	ldr	r3, [r7, #24]
 800e3ea:	f003 0307 	and.w	r3, r3, #7
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d00a      	beq.n	800e408 <prvInitialiseNewTask+0x58>
	__asm volatile
 800e3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3f6:	f383 8811 	msr	BASEPRI, r3
 800e3fa:	f3bf 8f6f 	isb	sy
 800e3fe:	f3bf 8f4f 	dsb	sy
 800e402:	617b      	str	r3, [r7, #20]
}
 800e404:	bf00      	nop
 800e406:	e7fe      	b.n	800e406 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d01f      	beq.n	800e44e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e40e:	2300      	movs	r3, #0
 800e410:	61fb      	str	r3, [r7, #28]
 800e412:	e012      	b.n	800e43a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e414:	68ba      	ldr	r2, [r7, #8]
 800e416:	69fb      	ldr	r3, [r7, #28]
 800e418:	4413      	add	r3, r2
 800e41a:	7819      	ldrb	r1, [r3, #0]
 800e41c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e41e:	69fb      	ldr	r3, [r7, #28]
 800e420:	4413      	add	r3, r2
 800e422:	3334      	adds	r3, #52	; 0x34
 800e424:	460a      	mov	r2, r1
 800e426:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e428:	68ba      	ldr	r2, [r7, #8]
 800e42a:	69fb      	ldr	r3, [r7, #28]
 800e42c:	4413      	add	r3, r2
 800e42e:	781b      	ldrb	r3, [r3, #0]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d006      	beq.n	800e442 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e434:	69fb      	ldr	r3, [r7, #28]
 800e436:	3301      	adds	r3, #1
 800e438:	61fb      	str	r3, [r7, #28]
 800e43a:	69fb      	ldr	r3, [r7, #28]
 800e43c:	2b0f      	cmp	r3, #15
 800e43e:	d9e9      	bls.n	800e414 <prvInitialiseNewTask+0x64>
 800e440:	e000      	b.n	800e444 <prvInitialiseNewTask+0x94>
			{
				break;
 800e442:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e446:	2200      	movs	r2, #0
 800e448:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e44c:	e003      	b.n	800e456 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e450:	2200      	movs	r2, #0
 800e452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e458:	2b37      	cmp	r3, #55	; 0x37
 800e45a:	d901      	bls.n	800e460 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e45c:	2337      	movs	r3, #55	; 0x37
 800e45e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e462:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e464:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e468:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e46a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e46e:	2200      	movs	r2, #0
 800e470:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e474:	3304      	adds	r3, #4
 800e476:	4618      	mov	r0, r3
 800e478:	f7ff f978 	bl	800d76c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e47e:	3318      	adds	r3, #24
 800e480:	4618      	mov	r0, r3
 800e482:	f7ff f973 	bl	800d76c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e48a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e48e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e494:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e49a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e49e:	2200      	movs	r2, #0
 800e4a0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e4a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4ae:	3354      	adds	r3, #84	; 0x54
 800e4b0:	224c      	movs	r2, #76	; 0x4c
 800e4b2:	2100      	movs	r1, #0
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f004 fbc5 	bl	8012c44 <memset>
 800e4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4bc:	4a0c      	ldr	r2, [pc, #48]	; (800e4f0 <prvInitialiseNewTask+0x140>)
 800e4be:	659a      	str	r2, [r3, #88]	; 0x58
 800e4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4c2:	4a0c      	ldr	r2, [pc, #48]	; (800e4f4 <prvInitialiseNewTask+0x144>)
 800e4c4:	65da      	str	r2, [r3, #92]	; 0x5c
 800e4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4c8:	4a0b      	ldr	r2, [pc, #44]	; (800e4f8 <prvInitialiseNewTask+0x148>)
 800e4ca:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e4cc:	683a      	ldr	r2, [r7, #0]
 800e4ce:	68f9      	ldr	r1, [r7, #12]
 800e4d0:	69b8      	ldr	r0, [r7, #24]
 800e4d2:	f001 f941 	bl	800f758 <pxPortInitialiseStack>
 800e4d6:	4602      	mov	r2, r0
 800e4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4da:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d002      	beq.n	800e4e8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4e6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e4e8:	bf00      	nop
 800e4ea:	3720      	adds	r7, #32
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}
 800e4f0:	20007fd8 	.word	0x20007fd8
 800e4f4:	20008040 	.word	0x20008040
 800e4f8:	200080a8 	.word	0x200080a8

0800e4fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b082      	sub	sp, #8
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e504:	f001 fa56 	bl	800f9b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e508:	4b2d      	ldr	r3, [pc, #180]	; (800e5c0 <prvAddNewTaskToReadyList+0xc4>)
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	3301      	adds	r3, #1
 800e50e:	4a2c      	ldr	r2, [pc, #176]	; (800e5c0 <prvAddNewTaskToReadyList+0xc4>)
 800e510:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e512:	4b2c      	ldr	r3, [pc, #176]	; (800e5c4 <prvAddNewTaskToReadyList+0xc8>)
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d109      	bne.n	800e52e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e51a:	4a2a      	ldr	r2, [pc, #168]	; (800e5c4 <prvAddNewTaskToReadyList+0xc8>)
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e520:	4b27      	ldr	r3, [pc, #156]	; (800e5c0 <prvAddNewTaskToReadyList+0xc4>)
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	2b01      	cmp	r3, #1
 800e526:	d110      	bne.n	800e54a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e528:	f000 fc26 	bl	800ed78 <prvInitialiseTaskLists>
 800e52c:	e00d      	b.n	800e54a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e52e:	4b26      	ldr	r3, [pc, #152]	; (800e5c8 <prvAddNewTaskToReadyList+0xcc>)
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d109      	bne.n	800e54a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e536:	4b23      	ldr	r3, [pc, #140]	; (800e5c4 <prvAddNewTaskToReadyList+0xc8>)
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e540:	429a      	cmp	r2, r3
 800e542:	d802      	bhi.n	800e54a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e544:	4a1f      	ldr	r2, [pc, #124]	; (800e5c4 <prvAddNewTaskToReadyList+0xc8>)
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e54a:	4b20      	ldr	r3, [pc, #128]	; (800e5cc <prvAddNewTaskToReadyList+0xd0>)
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	3301      	adds	r3, #1
 800e550:	4a1e      	ldr	r2, [pc, #120]	; (800e5cc <prvAddNewTaskToReadyList+0xd0>)
 800e552:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e554:	4b1d      	ldr	r3, [pc, #116]	; (800e5cc <prvAddNewTaskToReadyList+0xd0>)
 800e556:	681a      	ldr	r2, [r3, #0]
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e560:	4b1b      	ldr	r3, [pc, #108]	; (800e5d0 <prvAddNewTaskToReadyList+0xd4>)
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	429a      	cmp	r2, r3
 800e566:	d903      	bls.n	800e570 <prvAddNewTaskToReadyList+0x74>
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e56c:	4a18      	ldr	r2, [pc, #96]	; (800e5d0 <prvAddNewTaskToReadyList+0xd4>)
 800e56e:	6013      	str	r3, [r2, #0]
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e574:	4613      	mov	r3, r2
 800e576:	009b      	lsls	r3, r3, #2
 800e578:	4413      	add	r3, r2
 800e57a:	009b      	lsls	r3, r3, #2
 800e57c:	4a15      	ldr	r2, [pc, #84]	; (800e5d4 <prvAddNewTaskToReadyList+0xd8>)
 800e57e:	441a      	add	r2, r3
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	3304      	adds	r3, #4
 800e584:	4619      	mov	r1, r3
 800e586:	4610      	mov	r0, r2
 800e588:	f7ff f8fd 	bl	800d786 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e58c:	f001 fa42 	bl	800fa14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e590:	4b0d      	ldr	r3, [pc, #52]	; (800e5c8 <prvAddNewTaskToReadyList+0xcc>)
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d00e      	beq.n	800e5b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e598:	4b0a      	ldr	r3, [pc, #40]	; (800e5c4 <prvAddNewTaskToReadyList+0xc8>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5a2:	429a      	cmp	r2, r3
 800e5a4:	d207      	bcs.n	800e5b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e5a6:	4b0c      	ldr	r3, [pc, #48]	; (800e5d8 <prvAddNewTaskToReadyList+0xdc>)
 800e5a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5ac:	601a      	str	r2, [r3, #0]
 800e5ae:	f3bf 8f4f 	dsb	sy
 800e5b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e5b6:	bf00      	nop
 800e5b8:	3708      	adds	r7, #8
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd80      	pop	{r7, pc}
 800e5be:	bf00      	nop
 800e5c0:	20004258 	.word	0x20004258
 800e5c4:	20003d84 	.word	0x20003d84
 800e5c8:	20004264 	.word	0x20004264
 800e5cc:	20004274 	.word	0x20004274
 800e5d0:	20004260 	.word	0x20004260
 800e5d4:	20003d88 	.word	0x20003d88
 800e5d8:	e000ed04 	.word	0xe000ed04

0800e5dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b084      	sub	sp, #16
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d017      	beq.n	800e61e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e5ee:	4b13      	ldr	r3, [pc, #76]	; (800e63c <vTaskDelay+0x60>)
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d00a      	beq.n	800e60c <vTaskDelay+0x30>
	__asm volatile
 800e5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5fa:	f383 8811 	msr	BASEPRI, r3
 800e5fe:	f3bf 8f6f 	isb	sy
 800e602:	f3bf 8f4f 	dsb	sy
 800e606:	60bb      	str	r3, [r7, #8]
}
 800e608:	bf00      	nop
 800e60a:	e7fe      	b.n	800e60a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e60c:	f000 f88a 	bl	800e724 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e610:	2100      	movs	r1, #0
 800e612:	6878      	ldr	r0, [r7, #4]
 800e614:	f000 fcfe 	bl	800f014 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e618:	f000 f892 	bl	800e740 <xTaskResumeAll>
 800e61c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d107      	bne.n	800e634 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e624:	4b06      	ldr	r3, [pc, #24]	; (800e640 <vTaskDelay+0x64>)
 800e626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e62a:	601a      	str	r2, [r3, #0]
 800e62c:	f3bf 8f4f 	dsb	sy
 800e630:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e634:	bf00      	nop
 800e636:	3710      	adds	r7, #16
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}
 800e63c:	20004280 	.word	0x20004280
 800e640:	e000ed04 	.word	0xe000ed04

0800e644 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b08a      	sub	sp, #40	; 0x28
 800e648:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e64a:	2300      	movs	r3, #0
 800e64c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e64e:	2300      	movs	r3, #0
 800e650:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e652:	463a      	mov	r2, r7
 800e654:	1d39      	adds	r1, r7, #4
 800e656:	f107 0308 	add.w	r3, r7, #8
 800e65a:	4618      	mov	r0, r3
 800e65c:	f7ff f832 	bl	800d6c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e660:	6839      	ldr	r1, [r7, #0]
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	68ba      	ldr	r2, [r7, #8]
 800e666:	9202      	str	r2, [sp, #8]
 800e668:	9301      	str	r3, [sp, #4]
 800e66a:	2300      	movs	r3, #0
 800e66c:	9300      	str	r3, [sp, #0]
 800e66e:	2300      	movs	r3, #0
 800e670:	460a      	mov	r2, r1
 800e672:	4924      	ldr	r1, [pc, #144]	; (800e704 <vTaskStartScheduler+0xc0>)
 800e674:	4824      	ldr	r0, [pc, #144]	; (800e708 <vTaskStartScheduler+0xc4>)
 800e676:	f7ff fdf9 	bl	800e26c <xTaskCreateStatic>
 800e67a:	4603      	mov	r3, r0
 800e67c:	4a23      	ldr	r2, [pc, #140]	; (800e70c <vTaskStartScheduler+0xc8>)
 800e67e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e680:	4b22      	ldr	r3, [pc, #136]	; (800e70c <vTaskStartScheduler+0xc8>)
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d002      	beq.n	800e68e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e688:	2301      	movs	r3, #1
 800e68a:	617b      	str	r3, [r7, #20]
 800e68c:	e001      	b.n	800e692 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e68e:	2300      	movs	r3, #0
 800e690:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e692:	697b      	ldr	r3, [r7, #20]
 800e694:	2b01      	cmp	r3, #1
 800e696:	d102      	bne.n	800e69e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e698:	f000 fd10 	bl	800f0bc <xTimerCreateTimerTask>
 800e69c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e69e:	697b      	ldr	r3, [r7, #20]
 800e6a0:	2b01      	cmp	r3, #1
 800e6a2:	d11b      	bne.n	800e6dc <vTaskStartScheduler+0x98>
	__asm volatile
 800e6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6a8:	f383 8811 	msr	BASEPRI, r3
 800e6ac:	f3bf 8f6f 	isb	sy
 800e6b0:	f3bf 8f4f 	dsb	sy
 800e6b4:	613b      	str	r3, [r7, #16]
}
 800e6b6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e6b8:	4b15      	ldr	r3, [pc, #84]	; (800e710 <vTaskStartScheduler+0xcc>)
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	3354      	adds	r3, #84	; 0x54
 800e6be:	4a15      	ldr	r2, [pc, #84]	; (800e714 <vTaskStartScheduler+0xd0>)
 800e6c0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e6c2:	4b15      	ldr	r3, [pc, #84]	; (800e718 <vTaskStartScheduler+0xd4>)
 800e6c4:	f04f 32ff 	mov.w	r2, #4294967295
 800e6c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e6ca:	4b14      	ldr	r3, [pc, #80]	; (800e71c <vTaskStartScheduler+0xd8>)
 800e6cc:	2201      	movs	r2, #1
 800e6ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e6d0:	4b13      	ldr	r3, [pc, #76]	; (800e720 <vTaskStartScheduler+0xdc>)
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e6d6:	f001 f8cb 	bl	800f870 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e6da:	e00e      	b.n	800e6fa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e6dc:	697b      	ldr	r3, [r7, #20]
 800e6de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6e2:	d10a      	bne.n	800e6fa <vTaskStartScheduler+0xb6>
	__asm volatile
 800e6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6e8:	f383 8811 	msr	BASEPRI, r3
 800e6ec:	f3bf 8f6f 	isb	sy
 800e6f0:	f3bf 8f4f 	dsb	sy
 800e6f4:	60fb      	str	r3, [r7, #12]
}
 800e6f6:	bf00      	nop
 800e6f8:	e7fe      	b.n	800e6f8 <vTaskStartScheduler+0xb4>
}
 800e6fa:	bf00      	nop
 800e6fc:	3718      	adds	r7, #24
 800e6fe:	46bd      	mov	sp, r7
 800e700:	bd80      	pop	{r7, pc}
 800e702:	bf00      	nop
 800e704:	08015328 	.word	0x08015328
 800e708:	0800ed49 	.word	0x0800ed49
 800e70c:	2000427c 	.word	0x2000427c
 800e710:	20003d84 	.word	0x20003d84
 800e714:	20000088 	.word	0x20000088
 800e718:	20004278 	.word	0x20004278
 800e71c:	20004264 	.word	0x20004264
 800e720:	2000425c 	.word	0x2000425c

0800e724 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e724:	b480      	push	{r7}
 800e726:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e728:	4b04      	ldr	r3, [pc, #16]	; (800e73c <vTaskSuspendAll+0x18>)
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	3301      	adds	r3, #1
 800e72e:	4a03      	ldr	r2, [pc, #12]	; (800e73c <vTaskSuspendAll+0x18>)
 800e730:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e732:	bf00      	nop
 800e734:	46bd      	mov	sp, r7
 800e736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73a:	4770      	bx	lr
 800e73c:	20004280 	.word	0x20004280

0800e740 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b084      	sub	sp, #16
 800e744:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e746:	2300      	movs	r3, #0
 800e748:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e74a:	2300      	movs	r3, #0
 800e74c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e74e:	4b42      	ldr	r3, [pc, #264]	; (800e858 <xTaskResumeAll+0x118>)
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d10a      	bne.n	800e76c <xTaskResumeAll+0x2c>
	__asm volatile
 800e756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e75a:	f383 8811 	msr	BASEPRI, r3
 800e75e:	f3bf 8f6f 	isb	sy
 800e762:	f3bf 8f4f 	dsb	sy
 800e766:	603b      	str	r3, [r7, #0]
}
 800e768:	bf00      	nop
 800e76a:	e7fe      	b.n	800e76a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e76c:	f001 f922 	bl	800f9b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e770:	4b39      	ldr	r3, [pc, #228]	; (800e858 <xTaskResumeAll+0x118>)
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	3b01      	subs	r3, #1
 800e776:	4a38      	ldr	r2, [pc, #224]	; (800e858 <xTaskResumeAll+0x118>)
 800e778:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e77a:	4b37      	ldr	r3, [pc, #220]	; (800e858 <xTaskResumeAll+0x118>)
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d162      	bne.n	800e848 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e782:	4b36      	ldr	r3, [pc, #216]	; (800e85c <xTaskResumeAll+0x11c>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d05e      	beq.n	800e848 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e78a:	e02f      	b.n	800e7ec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e78c:	4b34      	ldr	r3, [pc, #208]	; (800e860 <xTaskResumeAll+0x120>)
 800e78e:	68db      	ldr	r3, [r3, #12]
 800e790:	68db      	ldr	r3, [r3, #12]
 800e792:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	3318      	adds	r3, #24
 800e798:	4618      	mov	r0, r3
 800e79a:	f7ff f851 	bl	800d840 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	3304      	adds	r3, #4
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	f7ff f84c 	bl	800d840 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7ac:	4b2d      	ldr	r3, [pc, #180]	; (800e864 <xTaskResumeAll+0x124>)
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	429a      	cmp	r2, r3
 800e7b2:	d903      	bls.n	800e7bc <xTaskResumeAll+0x7c>
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7b8:	4a2a      	ldr	r2, [pc, #168]	; (800e864 <xTaskResumeAll+0x124>)
 800e7ba:	6013      	str	r3, [r2, #0]
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7c0:	4613      	mov	r3, r2
 800e7c2:	009b      	lsls	r3, r3, #2
 800e7c4:	4413      	add	r3, r2
 800e7c6:	009b      	lsls	r3, r3, #2
 800e7c8:	4a27      	ldr	r2, [pc, #156]	; (800e868 <xTaskResumeAll+0x128>)
 800e7ca:	441a      	add	r2, r3
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	3304      	adds	r3, #4
 800e7d0:	4619      	mov	r1, r3
 800e7d2:	4610      	mov	r0, r2
 800e7d4:	f7fe ffd7 	bl	800d786 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7dc:	4b23      	ldr	r3, [pc, #140]	; (800e86c <xTaskResumeAll+0x12c>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d302      	bcc.n	800e7ec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e7e6:	4b22      	ldr	r3, [pc, #136]	; (800e870 <xTaskResumeAll+0x130>)
 800e7e8:	2201      	movs	r2, #1
 800e7ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e7ec:	4b1c      	ldr	r3, [pc, #112]	; (800e860 <xTaskResumeAll+0x120>)
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d1cb      	bne.n	800e78c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d001      	beq.n	800e7fe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e7fa:	f000 fb5f 	bl	800eebc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e7fe:	4b1d      	ldr	r3, [pc, #116]	; (800e874 <xTaskResumeAll+0x134>)
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d010      	beq.n	800e82c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e80a:	f000 f847 	bl	800e89c <xTaskIncrementTick>
 800e80e:	4603      	mov	r3, r0
 800e810:	2b00      	cmp	r3, #0
 800e812:	d002      	beq.n	800e81a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e814:	4b16      	ldr	r3, [pc, #88]	; (800e870 <xTaskResumeAll+0x130>)
 800e816:	2201      	movs	r2, #1
 800e818:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	3b01      	subs	r3, #1
 800e81e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d1f1      	bne.n	800e80a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e826:	4b13      	ldr	r3, [pc, #76]	; (800e874 <xTaskResumeAll+0x134>)
 800e828:	2200      	movs	r2, #0
 800e82a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e82c:	4b10      	ldr	r3, [pc, #64]	; (800e870 <xTaskResumeAll+0x130>)
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d009      	beq.n	800e848 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e834:	2301      	movs	r3, #1
 800e836:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e838:	4b0f      	ldr	r3, [pc, #60]	; (800e878 <xTaskResumeAll+0x138>)
 800e83a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e83e:	601a      	str	r2, [r3, #0]
 800e840:	f3bf 8f4f 	dsb	sy
 800e844:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e848:	f001 f8e4 	bl	800fa14 <vPortExitCritical>

	return xAlreadyYielded;
 800e84c:	68bb      	ldr	r3, [r7, #8]
}
 800e84e:	4618      	mov	r0, r3
 800e850:	3710      	adds	r7, #16
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}
 800e856:	bf00      	nop
 800e858:	20004280 	.word	0x20004280
 800e85c:	20004258 	.word	0x20004258
 800e860:	20004218 	.word	0x20004218
 800e864:	20004260 	.word	0x20004260
 800e868:	20003d88 	.word	0x20003d88
 800e86c:	20003d84 	.word	0x20003d84
 800e870:	2000426c 	.word	0x2000426c
 800e874:	20004268 	.word	0x20004268
 800e878:	e000ed04 	.word	0xe000ed04

0800e87c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e87c:	b480      	push	{r7}
 800e87e:	b083      	sub	sp, #12
 800e880:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e882:	4b05      	ldr	r3, [pc, #20]	; (800e898 <xTaskGetTickCount+0x1c>)
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e888:	687b      	ldr	r3, [r7, #4]
}
 800e88a:	4618      	mov	r0, r3
 800e88c:	370c      	adds	r7, #12
 800e88e:	46bd      	mov	sp, r7
 800e890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e894:	4770      	bx	lr
 800e896:	bf00      	nop
 800e898:	2000425c 	.word	0x2000425c

0800e89c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b086      	sub	sp, #24
 800e8a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e8a6:	4b4f      	ldr	r3, [pc, #316]	; (800e9e4 <xTaskIncrementTick+0x148>)
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	f040 808f 	bne.w	800e9ce <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e8b0:	4b4d      	ldr	r3, [pc, #308]	; (800e9e8 <xTaskIncrementTick+0x14c>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	3301      	adds	r3, #1
 800e8b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e8b8:	4a4b      	ldr	r2, [pc, #300]	; (800e9e8 <xTaskIncrementTick+0x14c>)
 800e8ba:	693b      	ldr	r3, [r7, #16]
 800e8bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e8be:	693b      	ldr	r3, [r7, #16]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d120      	bne.n	800e906 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e8c4:	4b49      	ldr	r3, [pc, #292]	; (800e9ec <xTaskIncrementTick+0x150>)
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d00a      	beq.n	800e8e4 <xTaskIncrementTick+0x48>
	__asm volatile
 800e8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8d2:	f383 8811 	msr	BASEPRI, r3
 800e8d6:	f3bf 8f6f 	isb	sy
 800e8da:	f3bf 8f4f 	dsb	sy
 800e8de:	603b      	str	r3, [r7, #0]
}
 800e8e0:	bf00      	nop
 800e8e2:	e7fe      	b.n	800e8e2 <xTaskIncrementTick+0x46>
 800e8e4:	4b41      	ldr	r3, [pc, #260]	; (800e9ec <xTaskIncrementTick+0x150>)
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	60fb      	str	r3, [r7, #12]
 800e8ea:	4b41      	ldr	r3, [pc, #260]	; (800e9f0 <xTaskIncrementTick+0x154>)
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	4a3f      	ldr	r2, [pc, #252]	; (800e9ec <xTaskIncrementTick+0x150>)
 800e8f0:	6013      	str	r3, [r2, #0]
 800e8f2:	4a3f      	ldr	r2, [pc, #252]	; (800e9f0 <xTaskIncrementTick+0x154>)
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	6013      	str	r3, [r2, #0]
 800e8f8:	4b3e      	ldr	r3, [pc, #248]	; (800e9f4 <xTaskIncrementTick+0x158>)
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	3301      	adds	r3, #1
 800e8fe:	4a3d      	ldr	r2, [pc, #244]	; (800e9f4 <xTaskIncrementTick+0x158>)
 800e900:	6013      	str	r3, [r2, #0]
 800e902:	f000 fadb 	bl	800eebc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e906:	4b3c      	ldr	r3, [pc, #240]	; (800e9f8 <xTaskIncrementTick+0x15c>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	693a      	ldr	r2, [r7, #16]
 800e90c:	429a      	cmp	r2, r3
 800e90e:	d349      	bcc.n	800e9a4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e910:	4b36      	ldr	r3, [pc, #216]	; (800e9ec <xTaskIncrementTick+0x150>)
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d104      	bne.n	800e924 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e91a:	4b37      	ldr	r3, [pc, #220]	; (800e9f8 <xTaskIncrementTick+0x15c>)
 800e91c:	f04f 32ff 	mov.w	r2, #4294967295
 800e920:	601a      	str	r2, [r3, #0]
					break;
 800e922:	e03f      	b.n	800e9a4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e924:	4b31      	ldr	r3, [pc, #196]	; (800e9ec <xTaskIncrementTick+0x150>)
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	68db      	ldr	r3, [r3, #12]
 800e92a:	68db      	ldr	r3, [r3, #12]
 800e92c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e92e:	68bb      	ldr	r3, [r7, #8]
 800e930:	685b      	ldr	r3, [r3, #4]
 800e932:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e934:	693a      	ldr	r2, [r7, #16]
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	429a      	cmp	r2, r3
 800e93a:	d203      	bcs.n	800e944 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e93c:	4a2e      	ldr	r2, [pc, #184]	; (800e9f8 <xTaskIncrementTick+0x15c>)
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e942:	e02f      	b.n	800e9a4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e944:	68bb      	ldr	r3, [r7, #8]
 800e946:	3304      	adds	r3, #4
 800e948:	4618      	mov	r0, r3
 800e94a:	f7fe ff79 	bl	800d840 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e94e:	68bb      	ldr	r3, [r7, #8]
 800e950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e952:	2b00      	cmp	r3, #0
 800e954:	d004      	beq.n	800e960 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e956:	68bb      	ldr	r3, [r7, #8]
 800e958:	3318      	adds	r3, #24
 800e95a:	4618      	mov	r0, r3
 800e95c:	f7fe ff70 	bl	800d840 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e960:	68bb      	ldr	r3, [r7, #8]
 800e962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e964:	4b25      	ldr	r3, [pc, #148]	; (800e9fc <xTaskIncrementTick+0x160>)
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	429a      	cmp	r2, r3
 800e96a:	d903      	bls.n	800e974 <xTaskIncrementTick+0xd8>
 800e96c:	68bb      	ldr	r3, [r7, #8]
 800e96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e970:	4a22      	ldr	r2, [pc, #136]	; (800e9fc <xTaskIncrementTick+0x160>)
 800e972:	6013      	str	r3, [r2, #0]
 800e974:	68bb      	ldr	r3, [r7, #8]
 800e976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e978:	4613      	mov	r3, r2
 800e97a:	009b      	lsls	r3, r3, #2
 800e97c:	4413      	add	r3, r2
 800e97e:	009b      	lsls	r3, r3, #2
 800e980:	4a1f      	ldr	r2, [pc, #124]	; (800ea00 <xTaskIncrementTick+0x164>)
 800e982:	441a      	add	r2, r3
 800e984:	68bb      	ldr	r3, [r7, #8]
 800e986:	3304      	adds	r3, #4
 800e988:	4619      	mov	r1, r3
 800e98a:	4610      	mov	r0, r2
 800e98c:	f7fe fefb 	bl	800d786 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e990:	68bb      	ldr	r3, [r7, #8]
 800e992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e994:	4b1b      	ldr	r3, [pc, #108]	; (800ea04 <xTaskIncrementTick+0x168>)
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e99a:	429a      	cmp	r2, r3
 800e99c:	d3b8      	bcc.n	800e910 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e99e:	2301      	movs	r3, #1
 800e9a0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e9a2:	e7b5      	b.n	800e910 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e9a4:	4b17      	ldr	r3, [pc, #92]	; (800ea04 <xTaskIncrementTick+0x168>)
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9aa:	4915      	ldr	r1, [pc, #84]	; (800ea00 <xTaskIncrementTick+0x164>)
 800e9ac:	4613      	mov	r3, r2
 800e9ae:	009b      	lsls	r3, r3, #2
 800e9b0:	4413      	add	r3, r2
 800e9b2:	009b      	lsls	r3, r3, #2
 800e9b4:	440b      	add	r3, r1
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	2b01      	cmp	r3, #1
 800e9ba:	d901      	bls.n	800e9c0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e9bc:	2301      	movs	r3, #1
 800e9be:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e9c0:	4b11      	ldr	r3, [pc, #68]	; (800ea08 <xTaskIncrementTick+0x16c>)
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d007      	beq.n	800e9d8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e9c8:	2301      	movs	r3, #1
 800e9ca:	617b      	str	r3, [r7, #20]
 800e9cc:	e004      	b.n	800e9d8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e9ce:	4b0f      	ldr	r3, [pc, #60]	; (800ea0c <xTaskIncrementTick+0x170>)
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	3301      	adds	r3, #1
 800e9d4:	4a0d      	ldr	r2, [pc, #52]	; (800ea0c <xTaskIncrementTick+0x170>)
 800e9d6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e9d8:	697b      	ldr	r3, [r7, #20]
}
 800e9da:	4618      	mov	r0, r3
 800e9dc:	3718      	adds	r7, #24
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd80      	pop	{r7, pc}
 800e9e2:	bf00      	nop
 800e9e4:	20004280 	.word	0x20004280
 800e9e8:	2000425c 	.word	0x2000425c
 800e9ec:	20004210 	.word	0x20004210
 800e9f0:	20004214 	.word	0x20004214
 800e9f4:	20004270 	.word	0x20004270
 800e9f8:	20004278 	.word	0x20004278
 800e9fc:	20004260 	.word	0x20004260
 800ea00:	20003d88 	.word	0x20003d88
 800ea04:	20003d84 	.word	0x20003d84
 800ea08:	2000426c 	.word	0x2000426c
 800ea0c:	20004268 	.word	0x20004268

0800ea10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ea10:	b480      	push	{r7}
 800ea12:	b085      	sub	sp, #20
 800ea14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ea16:	4b2a      	ldr	r3, [pc, #168]	; (800eac0 <vTaskSwitchContext+0xb0>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d003      	beq.n	800ea26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ea1e:	4b29      	ldr	r3, [pc, #164]	; (800eac4 <vTaskSwitchContext+0xb4>)
 800ea20:	2201      	movs	r2, #1
 800ea22:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ea24:	e046      	b.n	800eab4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800ea26:	4b27      	ldr	r3, [pc, #156]	; (800eac4 <vTaskSwitchContext+0xb4>)
 800ea28:	2200      	movs	r2, #0
 800ea2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea2c:	4b26      	ldr	r3, [pc, #152]	; (800eac8 <vTaskSwitchContext+0xb8>)
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	60fb      	str	r3, [r7, #12]
 800ea32:	e010      	b.n	800ea56 <vTaskSwitchContext+0x46>
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d10a      	bne.n	800ea50 <vTaskSwitchContext+0x40>
	__asm volatile
 800ea3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea3e:	f383 8811 	msr	BASEPRI, r3
 800ea42:	f3bf 8f6f 	isb	sy
 800ea46:	f3bf 8f4f 	dsb	sy
 800ea4a:	607b      	str	r3, [r7, #4]
}
 800ea4c:	bf00      	nop
 800ea4e:	e7fe      	b.n	800ea4e <vTaskSwitchContext+0x3e>
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	3b01      	subs	r3, #1
 800ea54:	60fb      	str	r3, [r7, #12]
 800ea56:	491d      	ldr	r1, [pc, #116]	; (800eacc <vTaskSwitchContext+0xbc>)
 800ea58:	68fa      	ldr	r2, [r7, #12]
 800ea5a:	4613      	mov	r3, r2
 800ea5c:	009b      	lsls	r3, r3, #2
 800ea5e:	4413      	add	r3, r2
 800ea60:	009b      	lsls	r3, r3, #2
 800ea62:	440b      	add	r3, r1
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d0e4      	beq.n	800ea34 <vTaskSwitchContext+0x24>
 800ea6a:	68fa      	ldr	r2, [r7, #12]
 800ea6c:	4613      	mov	r3, r2
 800ea6e:	009b      	lsls	r3, r3, #2
 800ea70:	4413      	add	r3, r2
 800ea72:	009b      	lsls	r3, r3, #2
 800ea74:	4a15      	ldr	r2, [pc, #84]	; (800eacc <vTaskSwitchContext+0xbc>)
 800ea76:	4413      	add	r3, r2
 800ea78:	60bb      	str	r3, [r7, #8]
 800ea7a:	68bb      	ldr	r3, [r7, #8]
 800ea7c:	685b      	ldr	r3, [r3, #4]
 800ea7e:	685a      	ldr	r2, [r3, #4]
 800ea80:	68bb      	ldr	r3, [r7, #8]
 800ea82:	605a      	str	r2, [r3, #4]
 800ea84:	68bb      	ldr	r3, [r7, #8]
 800ea86:	685a      	ldr	r2, [r3, #4]
 800ea88:	68bb      	ldr	r3, [r7, #8]
 800ea8a:	3308      	adds	r3, #8
 800ea8c:	429a      	cmp	r2, r3
 800ea8e:	d104      	bne.n	800ea9a <vTaskSwitchContext+0x8a>
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	685b      	ldr	r3, [r3, #4]
 800ea94:	685a      	ldr	r2, [r3, #4]
 800ea96:	68bb      	ldr	r3, [r7, #8]
 800ea98:	605a      	str	r2, [r3, #4]
 800ea9a:	68bb      	ldr	r3, [r7, #8]
 800ea9c:	685b      	ldr	r3, [r3, #4]
 800ea9e:	68db      	ldr	r3, [r3, #12]
 800eaa0:	4a0b      	ldr	r2, [pc, #44]	; (800ead0 <vTaskSwitchContext+0xc0>)
 800eaa2:	6013      	str	r3, [r2, #0]
 800eaa4:	4a08      	ldr	r2, [pc, #32]	; (800eac8 <vTaskSwitchContext+0xb8>)
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800eaaa:	4b09      	ldr	r3, [pc, #36]	; (800ead0 <vTaskSwitchContext+0xc0>)
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	3354      	adds	r3, #84	; 0x54
 800eab0:	4a08      	ldr	r2, [pc, #32]	; (800ead4 <vTaskSwitchContext+0xc4>)
 800eab2:	6013      	str	r3, [r2, #0]
}
 800eab4:	bf00      	nop
 800eab6:	3714      	adds	r7, #20
 800eab8:	46bd      	mov	sp, r7
 800eaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eabe:	4770      	bx	lr
 800eac0:	20004280 	.word	0x20004280
 800eac4:	2000426c 	.word	0x2000426c
 800eac8:	20004260 	.word	0x20004260
 800eacc:	20003d88 	.word	0x20003d88
 800ead0:	20003d84 	.word	0x20003d84
 800ead4:	20000088 	.word	0x20000088

0800ead8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b084      	sub	sp, #16
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
 800eae0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d10a      	bne.n	800eafe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800eae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaec:	f383 8811 	msr	BASEPRI, r3
 800eaf0:	f3bf 8f6f 	isb	sy
 800eaf4:	f3bf 8f4f 	dsb	sy
 800eaf8:	60fb      	str	r3, [r7, #12]
}
 800eafa:	bf00      	nop
 800eafc:	e7fe      	b.n	800eafc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800eafe:	4b07      	ldr	r3, [pc, #28]	; (800eb1c <vTaskPlaceOnEventList+0x44>)
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	3318      	adds	r3, #24
 800eb04:	4619      	mov	r1, r3
 800eb06:	6878      	ldr	r0, [r7, #4]
 800eb08:	f7fe fe61 	bl	800d7ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800eb0c:	2101      	movs	r1, #1
 800eb0e:	6838      	ldr	r0, [r7, #0]
 800eb10:	f000 fa80 	bl	800f014 <prvAddCurrentTaskToDelayedList>
}
 800eb14:	bf00      	nop
 800eb16:	3710      	adds	r7, #16
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}
 800eb1c:	20003d84 	.word	0x20003d84

0800eb20 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b086      	sub	sp, #24
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	60f8      	str	r0, [r7, #12]
 800eb28:	60b9      	str	r1, [r7, #8]
 800eb2a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d10a      	bne.n	800eb48 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800eb32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb36:	f383 8811 	msr	BASEPRI, r3
 800eb3a:	f3bf 8f6f 	isb	sy
 800eb3e:	f3bf 8f4f 	dsb	sy
 800eb42:	617b      	str	r3, [r7, #20]
}
 800eb44:	bf00      	nop
 800eb46:	e7fe      	b.n	800eb46 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800eb48:	4b0a      	ldr	r3, [pc, #40]	; (800eb74 <vTaskPlaceOnEventListRestricted+0x54>)
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	3318      	adds	r3, #24
 800eb4e:	4619      	mov	r1, r3
 800eb50:	68f8      	ldr	r0, [r7, #12]
 800eb52:	f7fe fe18 	bl	800d786 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d002      	beq.n	800eb62 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800eb5c:	f04f 33ff 	mov.w	r3, #4294967295
 800eb60:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800eb62:	6879      	ldr	r1, [r7, #4]
 800eb64:	68b8      	ldr	r0, [r7, #8]
 800eb66:	f000 fa55 	bl	800f014 <prvAddCurrentTaskToDelayedList>
	}
 800eb6a:	bf00      	nop
 800eb6c:	3718      	adds	r7, #24
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	bd80      	pop	{r7, pc}
 800eb72:	bf00      	nop
 800eb74:	20003d84 	.word	0x20003d84

0800eb78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b086      	sub	sp, #24
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	68db      	ldr	r3, [r3, #12]
 800eb84:	68db      	ldr	r3, [r3, #12]
 800eb86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800eb88:	693b      	ldr	r3, [r7, #16]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d10a      	bne.n	800eba4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800eb8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb92:	f383 8811 	msr	BASEPRI, r3
 800eb96:	f3bf 8f6f 	isb	sy
 800eb9a:	f3bf 8f4f 	dsb	sy
 800eb9e:	60fb      	str	r3, [r7, #12]
}
 800eba0:	bf00      	nop
 800eba2:	e7fe      	b.n	800eba2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800eba4:	693b      	ldr	r3, [r7, #16]
 800eba6:	3318      	adds	r3, #24
 800eba8:	4618      	mov	r0, r3
 800ebaa:	f7fe fe49 	bl	800d840 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ebae:	4b1e      	ldr	r3, [pc, #120]	; (800ec28 <xTaskRemoveFromEventList+0xb0>)
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d11d      	bne.n	800ebf2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ebb6:	693b      	ldr	r3, [r7, #16]
 800ebb8:	3304      	adds	r3, #4
 800ebba:	4618      	mov	r0, r3
 800ebbc:	f7fe fe40 	bl	800d840 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ebc0:	693b      	ldr	r3, [r7, #16]
 800ebc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebc4:	4b19      	ldr	r3, [pc, #100]	; (800ec2c <xTaskRemoveFromEventList+0xb4>)
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	429a      	cmp	r2, r3
 800ebca:	d903      	bls.n	800ebd4 <xTaskRemoveFromEventList+0x5c>
 800ebcc:	693b      	ldr	r3, [r7, #16]
 800ebce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebd0:	4a16      	ldr	r2, [pc, #88]	; (800ec2c <xTaskRemoveFromEventList+0xb4>)
 800ebd2:	6013      	str	r3, [r2, #0]
 800ebd4:	693b      	ldr	r3, [r7, #16]
 800ebd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebd8:	4613      	mov	r3, r2
 800ebda:	009b      	lsls	r3, r3, #2
 800ebdc:	4413      	add	r3, r2
 800ebde:	009b      	lsls	r3, r3, #2
 800ebe0:	4a13      	ldr	r2, [pc, #76]	; (800ec30 <xTaskRemoveFromEventList+0xb8>)
 800ebe2:	441a      	add	r2, r3
 800ebe4:	693b      	ldr	r3, [r7, #16]
 800ebe6:	3304      	adds	r3, #4
 800ebe8:	4619      	mov	r1, r3
 800ebea:	4610      	mov	r0, r2
 800ebec:	f7fe fdcb 	bl	800d786 <vListInsertEnd>
 800ebf0:	e005      	b.n	800ebfe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	3318      	adds	r3, #24
 800ebf6:	4619      	mov	r1, r3
 800ebf8:	480e      	ldr	r0, [pc, #56]	; (800ec34 <xTaskRemoveFromEventList+0xbc>)
 800ebfa:	f7fe fdc4 	bl	800d786 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ebfe:	693b      	ldr	r3, [r7, #16]
 800ec00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec02:	4b0d      	ldr	r3, [pc, #52]	; (800ec38 <xTaskRemoveFromEventList+0xc0>)
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec08:	429a      	cmp	r2, r3
 800ec0a:	d905      	bls.n	800ec18 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ec0c:	2301      	movs	r3, #1
 800ec0e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ec10:	4b0a      	ldr	r3, [pc, #40]	; (800ec3c <xTaskRemoveFromEventList+0xc4>)
 800ec12:	2201      	movs	r2, #1
 800ec14:	601a      	str	r2, [r3, #0]
 800ec16:	e001      	b.n	800ec1c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ec18:	2300      	movs	r3, #0
 800ec1a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ec1c:	697b      	ldr	r3, [r7, #20]
}
 800ec1e:	4618      	mov	r0, r3
 800ec20:	3718      	adds	r7, #24
 800ec22:	46bd      	mov	sp, r7
 800ec24:	bd80      	pop	{r7, pc}
 800ec26:	bf00      	nop
 800ec28:	20004280 	.word	0x20004280
 800ec2c:	20004260 	.word	0x20004260
 800ec30:	20003d88 	.word	0x20003d88
 800ec34:	20004218 	.word	0x20004218
 800ec38:	20003d84 	.word	0x20003d84
 800ec3c:	2000426c 	.word	0x2000426c

0800ec40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ec40:	b480      	push	{r7}
 800ec42:	b083      	sub	sp, #12
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ec48:	4b06      	ldr	r3, [pc, #24]	; (800ec64 <vTaskInternalSetTimeOutState+0x24>)
 800ec4a:	681a      	ldr	r2, [r3, #0]
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ec50:	4b05      	ldr	r3, [pc, #20]	; (800ec68 <vTaskInternalSetTimeOutState+0x28>)
 800ec52:	681a      	ldr	r2, [r3, #0]
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	605a      	str	r2, [r3, #4]
}
 800ec58:	bf00      	nop
 800ec5a:	370c      	adds	r7, #12
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec62:	4770      	bx	lr
 800ec64:	20004270 	.word	0x20004270
 800ec68:	2000425c 	.word	0x2000425c

0800ec6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b088      	sub	sp, #32
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
 800ec74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d10a      	bne.n	800ec92 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ec7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec80:	f383 8811 	msr	BASEPRI, r3
 800ec84:	f3bf 8f6f 	isb	sy
 800ec88:	f3bf 8f4f 	dsb	sy
 800ec8c:	613b      	str	r3, [r7, #16]
}
 800ec8e:	bf00      	nop
 800ec90:	e7fe      	b.n	800ec90 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ec92:	683b      	ldr	r3, [r7, #0]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d10a      	bne.n	800ecae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ec98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec9c:	f383 8811 	msr	BASEPRI, r3
 800eca0:	f3bf 8f6f 	isb	sy
 800eca4:	f3bf 8f4f 	dsb	sy
 800eca8:	60fb      	str	r3, [r7, #12]
}
 800ecaa:	bf00      	nop
 800ecac:	e7fe      	b.n	800ecac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ecae:	f000 fe81 	bl	800f9b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ecb2:	4b1d      	ldr	r3, [pc, #116]	; (800ed28 <xTaskCheckForTimeOut+0xbc>)
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	685b      	ldr	r3, [r3, #4]
 800ecbc:	69ba      	ldr	r2, [r7, #24]
 800ecbe:	1ad3      	subs	r3, r2, r3
 800ecc0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ecc2:	683b      	ldr	r3, [r7, #0]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecca:	d102      	bne.n	800ecd2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800eccc:	2300      	movs	r3, #0
 800ecce:	61fb      	str	r3, [r7, #28]
 800ecd0:	e023      	b.n	800ed1a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681a      	ldr	r2, [r3, #0]
 800ecd6:	4b15      	ldr	r3, [pc, #84]	; (800ed2c <xTaskCheckForTimeOut+0xc0>)
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	429a      	cmp	r2, r3
 800ecdc:	d007      	beq.n	800ecee <xTaskCheckForTimeOut+0x82>
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	685b      	ldr	r3, [r3, #4]
 800ece2:	69ba      	ldr	r2, [r7, #24]
 800ece4:	429a      	cmp	r2, r3
 800ece6:	d302      	bcc.n	800ecee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ece8:	2301      	movs	r3, #1
 800ecea:	61fb      	str	r3, [r7, #28]
 800ecec:	e015      	b.n	800ed1a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ecee:	683b      	ldr	r3, [r7, #0]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	697a      	ldr	r2, [r7, #20]
 800ecf4:	429a      	cmp	r2, r3
 800ecf6:	d20b      	bcs.n	800ed10 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ecf8:	683b      	ldr	r3, [r7, #0]
 800ecfa:	681a      	ldr	r2, [r3, #0]
 800ecfc:	697b      	ldr	r3, [r7, #20]
 800ecfe:	1ad2      	subs	r2, r2, r3
 800ed00:	683b      	ldr	r3, [r7, #0]
 800ed02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ed04:	6878      	ldr	r0, [r7, #4]
 800ed06:	f7ff ff9b 	bl	800ec40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	61fb      	str	r3, [r7, #28]
 800ed0e:	e004      	b.n	800ed1a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ed10:	683b      	ldr	r3, [r7, #0]
 800ed12:	2200      	movs	r2, #0
 800ed14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ed16:	2301      	movs	r3, #1
 800ed18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ed1a:	f000 fe7b 	bl	800fa14 <vPortExitCritical>

	return xReturn;
 800ed1e:	69fb      	ldr	r3, [r7, #28]
}
 800ed20:	4618      	mov	r0, r3
 800ed22:	3720      	adds	r7, #32
 800ed24:	46bd      	mov	sp, r7
 800ed26:	bd80      	pop	{r7, pc}
 800ed28:	2000425c 	.word	0x2000425c
 800ed2c:	20004270 	.word	0x20004270

0800ed30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ed30:	b480      	push	{r7}
 800ed32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ed34:	4b03      	ldr	r3, [pc, #12]	; (800ed44 <vTaskMissedYield+0x14>)
 800ed36:	2201      	movs	r2, #1
 800ed38:	601a      	str	r2, [r3, #0]
}
 800ed3a:	bf00      	nop
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed42:	4770      	bx	lr
 800ed44:	2000426c 	.word	0x2000426c

0800ed48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b082      	sub	sp, #8
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ed50:	f000 f852 	bl	800edf8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ed54:	4b06      	ldr	r3, [pc, #24]	; (800ed70 <prvIdleTask+0x28>)
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	2b01      	cmp	r3, #1
 800ed5a:	d9f9      	bls.n	800ed50 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ed5c:	4b05      	ldr	r3, [pc, #20]	; (800ed74 <prvIdleTask+0x2c>)
 800ed5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed62:	601a      	str	r2, [r3, #0]
 800ed64:	f3bf 8f4f 	dsb	sy
 800ed68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ed6c:	e7f0      	b.n	800ed50 <prvIdleTask+0x8>
 800ed6e:	bf00      	nop
 800ed70:	20003d88 	.word	0x20003d88
 800ed74:	e000ed04 	.word	0xe000ed04

0800ed78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b082      	sub	sp, #8
 800ed7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ed7e:	2300      	movs	r3, #0
 800ed80:	607b      	str	r3, [r7, #4]
 800ed82:	e00c      	b.n	800ed9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ed84:	687a      	ldr	r2, [r7, #4]
 800ed86:	4613      	mov	r3, r2
 800ed88:	009b      	lsls	r3, r3, #2
 800ed8a:	4413      	add	r3, r2
 800ed8c:	009b      	lsls	r3, r3, #2
 800ed8e:	4a12      	ldr	r2, [pc, #72]	; (800edd8 <prvInitialiseTaskLists+0x60>)
 800ed90:	4413      	add	r3, r2
 800ed92:	4618      	mov	r0, r3
 800ed94:	f7fe fcca 	bl	800d72c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	3301      	adds	r3, #1
 800ed9c:	607b      	str	r3, [r7, #4]
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	2b37      	cmp	r3, #55	; 0x37
 800eda2:	d9ef      	bls.n	800ed84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800eda4:	480d      	ldr	r0, [pc, #52]	; (800eddc <prvInitialiseTaskLists+0x64>)
 800eda6:	f7fe fcc1 	bl	800d72c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800edaa:	480d      	ldr	r0, [pc, #52]	; (800ede0 <prvInitialiseTaskLists+0x68>)
 800edac:	f7fe fcbe 	bl	800d72c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800edb0:	480c      	ldr	r0, [pc, #48]	; (800ede4 <prvInitialiseTaskLists+0x6c>)
 800edb2:	f7fe fcbb 	bl	800d72c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800edb6:	480c      	ldr	r0, [pc, #48]	; (800ede8 <prvInitialiseTaskLists+0x70>)
 800edb8:	f7fe fcb8 	bl	800d72c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800edbc:	480b      	ldr	r0, [pc, #44]	; (800edec <prvInitialiseTaskLists+0x74>)
 800edbe:	f7fe fcb5 	bl	800d72c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800edc2:	4b0b      	ldr	r3, [pc, #44]	; (800edf0 <prvInitialiseTaskLists+0x78>)
 800edc4:	4a05      	ldr	r2, [pc, #20]	; (800eddc <prvInitialiseTaskLists+0x64>)
 800edc6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800edc8:	4b0a      	ldr	r3, [pc, #40]	; (800edf4 <prvInitialiseTaskLists+0x7c>)
 800edca:	4a05      	ldr	r2, [pc, #20]	; (800ede0 <prvInitialiseTaskLists+0x68>)
 800edcc:	601a      	str	r2, [r3, #0]
}
 800edce:	bf00      	nop
 800edd0:	3708      	adds	r7, #8
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}
 800edd6:	bf00      	nop
 800edd8:	20003d88 	.word	0x20003d88
 800eddc:	200041e8 	.word	0x200041e8
 800ede0:	200041fc 	.word	0x200041fc
 800ede4:	20004218 	.word	0x20004218
 800ede8:	2000422c 	.word	0x2000422c
 800edec:	20004244 	.word	0x20004244
 800edf0:	20004210 	.word	0x20004210
 800edf4:	20004214 	.word	0x20004214

0800edf8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b082      	sub	sp, #8
 800edfc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800edfe:	e019      	b.n	800ee34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ee00:	f000 fdd8 	bl	800f9b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee04:	4b10      	ldr	r3, [pc, #64]	; (800ee48 <prvCheckTasksWaitingTermination+0x50>)
 800ee06:	68db      	ldr	r3, [r3, #12]
 800ee08:	68db      	ldr	r3, [r3, #12]
 800ee0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	3304      	adds	r3, #4
 800ee10:	4618      	mov	r0, r3
 800ee12:	f7fe fd15 	bl	800d840 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ee16:	4b0d      	ldr	r3, [pc, #52]	; (800ee4c <prvCheckTasksWaitingTermination+0x54>)
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	3b01      	subs	r3, #1
 800ee1c:	4a0b      	ldr	r2, [pc, #44]	; (800ee4c <prvCheckTasksWaitingTermination+0x54>)
 800ee1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ee20:	4b0b      	ldr	r3, [pc, #44]	; (800ee50 <prvCheckTasksWaitingTermination+0x58>)
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	3b01      	subs	r3, #1
 800ee26:	4a0a      	ldr	r2, [pc, #40]	; (800ee50 <prvCheckTasksWaitingTermination+0x58>)
 800ee28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ee2a:	f000 fdf3 	bl	800fa14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ee2e:	6878      	ldr	r0, [r7, #4]
 800ee30:	f000 f810 	bl	800ee54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ee34:	4b06      	ldr	r3, [pc, #24]	; (800ee50 <prvCheckTasksWaitingTermination+0x58>)
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d1e1      	bne.n	800ee00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ee3c:	bf00      	nop
 800ee3e:	bf00      	nop
 800ee40:	3708      	adds	r7, #8
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bd80      	pop	{r7, pc}
 800ee46:	bf00      	nop
 800ee48:	2000422c 	.word	0x2000422c
 800ee4c:	20004258 	.word	0x20004258
 800ee50:	20004240 	.word	0x20004240

0800ee54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b084      	sub	sp, #16
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	3354      	adds	r3, #84	; 0x54
 800ee60:	4618      	mov	r0, r3
 800ee62:	f003 ff0b 	bl	8012c7c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d108      	bne.n	800ee82 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee74:	4618      	mov	r0, r3
 800ee76:	f000 ff8b 	bl	800fd90 <vPortFree>
				vPortFree( pxTCB );
 800ee7a:	6878      	ldr	r0, [r7, #4]
 800ee7c:	f000 ff88 	bl	800fd90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ee80:	e018      	b.n	800eeb4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800ee88:	2b01      	cmp	r3, #1
 800ee8a:	d103      	bne.n	800ee94 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ee8c:	6878      	ldr	r0, [r7, #4]
 800ee8e:	f000 ff7f 	bl	800fd90 <vPortFree>
	}
 800ee92:	e00f      	b.n	800eeb4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800ee9a:	2b02      	cmp	r3, #2
 800ee9c:	d00a      	beq.n	800eeb4 <prvDeleteTCB+0x60>
	__asm volatile
 800ee9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eea2:	f383 8811 	msr	BASEPRI, r3
 800eea6:	f3bf 8f6f 	isb	sy
 800eeaa:	f3bf 8f4f 	dsb	sy
 800eeae:	60fb      	str	r3, [r7, #12]
}
 800eeb0:	bf00      	nop
 800eeb2:	e7fe      	b.n	800eeb2 <prvDeleteTCB+0x5e>
	}
 800eeb4:	bf00      	nop
 800eeb6:	3710      	adds	r7, #16
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	bd80      	pop	{r7, pc}

0800eebc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800eebc:	b480      	push	{r7}
 800eebe:	b083      	sub	sp, #12
 800eec0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eec2:	4b0c      	ldr	r3, [pc, #48]	; (800eef4 <prvResetNextTaskUnblockTime+0x38>)
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d104      	bne.n	800eed6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800eecc:	4b0a      	ldr	r3, [pc, #40]	; (800eef8 <prvResetNextTaskUnblockTime+0x3c>)
 800eece:	f04f 32ff 	mov.w	r2, #4294967295
 800eed2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800eed4:	e008      	b.n	800eee8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eed6:	4b07      	ldr	r3, [pc, #28]	; (800eef4 <prvResetNextTaskUnblockTime+0x38>)
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	68db      	ldr	r3, [r3, #12]
 800eedc:	68db      	ldr	r3, [r3, #12]
 800eede:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	685b      	ldr	r3, [r3, #4]
 800eee4:	4a04      	ldr	r2, [pc, #16]	; (800eef8 <prvResetNextTaskUnblockTime+0x3c>)
 800eee6:	6013      	str	r3, [r2, #0]
}
 800eee8:	bf00      	nop
 800eeea:	370c      	adds	r7, #12
 800eeec:	46bd      	mov	sp, r7
 800eeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef2:	4770      	bx	lr
 800eef4:	20004210 	.word	0x20004210
 800eef8:	20004278 	.word	0x20004278

0800eefc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800eefc:	b480      	push	{r7}
 800eefe:	b083      	sub	sp, #12
 800ef00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ef02:	4b0b      	ldr	r3, [pc, #44]	; (800ef30 <xTaskGetSchedulerState+0x34>)
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d102      	bne.n	800ef10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ef0a:	2301      	movs	r3, #1
 800ef0c:	607b      	str	r3, [r7, #4]
 800ef0e:	e008      	b.n	800ef22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ef10:	4b08      	ldr	r3, [pc, #32]	; (800ef34 <xTaskGetSchedulerState+0x38>)
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d102      	bne.n	800ef1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ef18:	2302      	movs	r3, #2
 800ef1a:	607b      	str	r3, [r7, #4]
 800ef1c:	e001      	b.n	800ef22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ef1e:	2300      	movs	r3, #0
 800ef20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ef22:	687b      	ldr	r3, [r7, #4]
	}
 800ef24:	4618      	mov	r0, r3
 800ef26:	370c      	adds	r7, #12
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2e:	4770      	bx	lr
 800ef30:	20004264 	.word	0x20004264
 800ef34:	20004280 	.word	0x20004280

0800ef38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b086      	sub	sp, #24
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ef44:	2300      	movs	r3, #0
 800ef46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d056      	beq.n	800effc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ef4e:	4b2e      	ldr	r3, [pc, #184]	; (800f008 <xTaskPriorityDisinherit+0xd0>)
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	693a      	ldr	r2, [r7, #16]
 800ef54:	429a      	cmp	r2, r3
 800ef56:	d00a      	beq.n	800ef6e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ef58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef5c:	f383 8811 	msr	BASEPRI, r3
 800ef60:	f3bf 8f6f 	isb	sy
 800ef64:	f3bf 8f4f 	dsb	sy
 800ef68:	60fb      	str	r3, [r7, #12]
}
 800ef6a:	bf00      	nop
 800ef6c:	e7fe      	b.n	800ef6c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ef6e:	693b      	ldr	r3, [r7, #16]
 800ef70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d10a      	bne.n	800ef8c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ef76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef7a:	f383 8811 	msr	BASEPRI, r3
 800ef7e:	f3bf 8f6f 	isb	sy
 800ef82:	f3bf 8f4f 	dsb	sy
 800ef86:	60bb      	str	r3, [r7, #8]
}
 800ef88:	bf00      	nop
 800ef8a:	e7fe      	b.n	800ef8a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ef8c:	693b      	ldr	r3, [r7, #16]
 800ef8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef90:	1e5a      	subs	r2, r3, #1
 800ef92:	693b      	ldr	r3, [r7, #16]
 800ef94:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ef96:	693b      	ldr	r3, [r7, #16]
 800ef98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef9a:	693b      	ldr	r3, [r7, #16]
 800ef9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ef9e:	429a      	cmp	r2, r3
 800efa0:	d02c      	beq.n	800effc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800efa2:	693b      	ldr	r3, [r7, #16]
 800efa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d128      	bne.n	800effc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800efaa:	693b      	ldr	r3, [r7, #16]
 800efac:	3304      	adds	r3, #4
 800efae:	4618      	mov	r0, r3
 800efb0:	f7fe fc46 	bl	800d840 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800efb4:	693b      	ldr	r3, [r7, #16]
 800efb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800efb8:	693b      	ldr	r3, [r7, #16]
 800efba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800efbc:	693b      	ldr	r3, [r7, #16]
 800efbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efc0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800efc4:	693b      	ldr	r3, [r7, #16]
 800efc6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800efc8:	693b      	ldr	r3, [r7, #16]
 800efca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efcc:	4b0f      	ldr	r3, [pc, #60]	; (800f00c <xTaskPriorityDisinherit+0xd4>)
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	429a      	cmp	r2, r3
 800efd2:	d903      	bls.n	800efdc <xTaskPriorityDisinherit+0xa4>
 800efd4:	693b      	ldr	r3, [r7, #16]
 800efd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efd8:	4a0c      	ldr	r2, [pc, #48]	; (800f00c <xTaskPriorityDisinherit+0xd4>)
 800efda:	6013      	str	r3, [r2, #0]
 800efdc:	693b      	ldr	r3, [r7, #16]
 800efde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efe0:	4613      	mov	r3, r2
 800efe2:	009b      	lsls	r3, r3, #2
 800efe4:	4413      	add	r3, r2
 800efe6:	009b      	lsls	r3, r3, #2
 800efe8:	4a09      	ldr	r2, [pc, #36]	; (800f010 <xTaskPriorityDisinherit+0xd8>)
 800efea:	441a      	add	r2, r3
 800efec:	693b      	ldr	r3, [r7, #16]
 800efee:	3304      	adds	r3, #4
 800eff0:	4619      	mov	r1, r3
 800eff2:	4610      	mov	r0, r2
 800eff4:	f7fe fbc7 	bl	800d786 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800eff8:	2301      	movs	r3, #1
 800effa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800effc:	697b      	ldr	r3, [r7, #20]
	}
 800effe:	4618      	mov	r0, r3
 800f000:	3718      	adds	r7, #24
 800f002:	46bd      	mov	sp, r7
 800f004:	bd80      	pop	{r7, pc}
 800f006:	bf00      	nop
 800f008:	20003d84 	.word	0x20003d84
 800f00c:	20004260 	.word	0x20004260
 800f010:	20003d88 	.word	0x20003d88

0800f014 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b084      	sub	sp, #16
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
 800f01c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f01e:	4b21      	ldr	r3, [pc, #132]	; (800f0a4 <prvAddCurrentTaskToDelayedList+0x90>)
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f024:	4b20      	ldr	r3, [pc, #128]	; (800f0a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	3304      	adds	r3, #4
 800f02a:	4618      	mov	r0, r3
 800f02c:	f7fe fc08 	bl	800d840 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f036:	d10a      	bne.n	800f04e <prvAddCurrentTaskToDelayedList+0x3a>
 800f038:	683b      	ldr	r3, [r7, #0]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d007      	beq.n	800f04e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f03e:	4b1a      	ldr	r3, [pc, #104]	; (800f0a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	3304      	adds	r3, #4
 800f044:	4619      	mov	r1, r3
 800f046:	4819      	ldr	r0, [pc, #100]	; (800f0ac <prvAddCurrentTaskToDelayedList+0x98>)
 800f048:	f7fe fb9d 	bl	800d786 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f04c:	e026      	b.n	800f09c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f04e:	68fa      	ldr	r2, [r7, #12]
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	4413      	add	r3, r2
 800f054:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f056:	4b14      	ldr	r3, [pc, #80]	; (800f0a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	68ba      	ldr	r2, [r7, #8]
 800f05c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f05e:	68ba      	ldr	r2, [r7, #8]
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	429a      	cmp	r2, r3
 800f064:	d209      	bcs.n	800f07a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f066:	4b12      	ldr	r3, [pc, #72]	; (800f0b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f068:	681a      	ldr	r2, [r3, #0]
 800f06a:	4b0f      	ldr	r3, [pc, #60]	; (800f0a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	3304      	adds	r3, #4
 800f070:	4619      	mov	r1, r3
 800f072:	4610      	mov	r0, r2
 800f074:	f7fe fbab 	bl	800d7ce <vListInsert>
}
 800f078:	e010      	b.n	800f09c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f07a:	4b0e      	ldr	r3, [pc, #56]	; (800f0b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f07c:	681a      	ldr	r2, [r3, #0]
 800f07e:	4b0a      	ldr	r3, [pc, #40]	; (800f0a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	3304      	adds	r3, #4
 800f084:	4619      	mov	r1, r3
 800f086:	4610      	mov	r0, r2
 800f088:	f7fe fba1 	bl	800d7ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f08c:	4b0a      	ldr	r3, [pc, #40]	; (800f0b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	68ba      	ldr	r2, [r7, #8]
 800f092:	429a      	cmp	r2, r3
 800f094:	d202      	bcs.n	800f09c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f096:	4a08      	ldr	r2, [pc, #32]	; (800f0b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f098:	68bb      	ldr	r3, [r7, #8]
 800f09a:	6013      	str	r3, [r2, #0]
}
 800f09c:	bf00      	nop
 800f09e:	3710      	adds	r7, #16
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	bd80      	pop	{r7, pc}
 800f0a4:	2000425c 	.word	0x2000425c
 800f0a8:	20003d84 	.word	0x20003d84
 800f0ac:	20004244 	.word	0x20004244
 800f0b0:	20004214 	.word	0x20004214
 800f0b4:	20004210 	.word	0x20004210
 800f0b8:	20004278 	.word	0x20004278

0800f0bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b08a      	sub	sp, #40	; 0x28
 800f0c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f0c6:	f000 fb07 	bl	800f6d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f0ca:	4b1c      	ldr	r3, [pc, #112]	; (800f13c <xTimerCreateTimerTask+0x80>)
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d021      	beq.n	800f116 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f0da:	1d3a      	adds	r2, r7, #4
 800f0dc:	f107 0108 	add.w	r1, r7, #8
 800f0e0:	f107 030c 	add.w	r3, r7, #12
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	f7fe fb07 	bl	800d6f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f0ea:	6879      	ldr	r1, [r7, #4]
 800f0ec:	68bb      	ldr	r3, [r7, #8]
 800f0ee:	68fa      	ldr	r2, [r7, #12]
 800f0f0:	9202      	str	r2, [sp, #8]
 800f0f2:	9301      	str	r3, [sp, #4]
 800f0f4:	2302      	movs	r3, #2
 800f0f6:	9300      	str	r3, [sp, #0]
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	460a      	mov	r2, r1
 800f0fc:	4910      	ldr	r1, [pc, #64]	; (800f140 <xTimerCreateTimerTask+0x84>)
 800f0fe:	4811      	ldr	r0, [pc, #68]	; (800f144 <xTimerCreateTimerTask+0x88>)
 800f100:	f7ff f8b4 	bl	800e26c <xTaskCreateStatic>
 800f104:	4603      	mov	r3, r0
 800f106:	4a10      	ldr	r2, [pc, #64]	; (800f148 <xTimerCreateTimerTask+0x8c>)
 800f108:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f10a:	4b0f      	ldr	r3, [pc, #60]	; (800f148 <xTimerCreateTimerTask+0x8c>)
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d001      	beq.n	800f116 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f112:	2301      	movs	r3, #1
 800f114:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f116:	697b      	ldr	r3, [r7, #20]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d10a      	bne.n	800f132 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f120:	f383 8811 	msr	BASEPRI, r3
 800f124:	f3bf 8f6f 	isb	sy
 800f128:	f3bf 8f4f 	dsb	sy
 800f12c:	613b      	str	r3, [r7, #16]
}
 800f12e:	bf00      	nop
 800f130:	e7fe      	b.n	800f130 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f132:	697b      	ldr	r3, [r7, #20]
}
 800f134:	4618      	mov	r0, r3
 800f136:	3718      	adds	r7, #24
 800f138:	46bd      	mov	sp, r7
 800f13a:	bd80      	pop	{r7, pc}
 800f13c:	200042b4 	.word	0x200042b4
 800f140:	08015330 	.word	0x08015330
 800f144:	0800f281 	.word	0x0800f281
 800f148:	200042b8 	.word	0x200042b8

0800f14c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b08a      	sub	sp, #40	; 0x28
 800f150:	af00      	add	r7, sp, #0
 800f152:	60f8      	str	r0, [r7, #12]
 800f154:	60b9      	str	r1, [r7, #8]
 800f156:	607a      	str	r2, [r7, #4]
 800f158:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f15a:	2300      	movs	r3, #0
 800f15c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d10a      	bne.n	800f17a <xTimerGenericCommand+0x2e>
	__asm volatile
 800f164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f168:	f383 8811 	msr	BASEPRI, r3
 800f16c:	f3bf 8f6f 	isb	sy
 800f170:	f3bf 8f4f 	dsb	sy
 800f174:	623b      	str	r3, [r7, #32]
}
 800f176:	bf00      	nop
 800f178:	e7fe      	b.n	800f178 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f17a:	4b1a      	ldr	r3, [pc, #104]	; (800f1e4 <xTimerGenericCommand+0x98>)
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d02a      	beq.n	800f1d8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f182:	68bb      	ldr	r3, [r7, #8]
 800f184:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f18e:	68bb      	ldr	r3, [r7, #8]
 800f190:	2b05      	cmp	r3, #5
 800f192:	dc18      	bgt.n	800f1c6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f194:	f7ff feb2 	bl	800eefc <xTaskGetSchedulerState>
 800f198:	4603      	mov	r3, r0
 800f19a:	2b02      	cmp	r3, #2
 800f19c:	d109      	bne.n	800f1b2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f19e:	4b11      	ldr	r3, [pc, #68]	; (800f1e4 <xTimerGenericCommand+0x98>)
 800f1a0:	6818      	ldr	r0, [r3, #0]
 800f1a2:	f107 0110 	add.w	r1, r7, #16
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1aa:	f7fe fc77 	bl	800da9c <xQueueGenericSend>
 800f1ae:	6278      	str	r0, [r7, #36]	; 0x24
 800f1b0:	e012      	b.n	800f1d8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f1b2:	4b0c      	ldr	r3, [pc, #48]	; (800f1e4 <xTimerGenericCommand+0x98>)
 800f1b4:	6818      	ldr	r0, [r3, #0]
 800f1b6:	f107 0110 	add.w	r1, r7, #16
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	2200      	movs	r2, #0
 800f1be:	f7fe fc6d 	bl	800da9c <xQueueGenericSend>
 800f1c2:	6278      	str	r0, [r7, #36]	; 0x24
 800f1c4:	e008      	b.n	800f1d8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f1c6:	4b07      	ldr	r3, [pc, #28]	; (800f1e4 <xTimerGenericCommand+0x98>)
 800f1c8:	6818      	ldr	r0, [r3, #0]
 800f1ca:	f107 0110 	add.w	r1, r7, #16
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	683a      	ldr	r2, [r7, #0]
 800f1d2:	f7fe fd61 	bl	800dc98 <xQueueGenericSendFromISR>
 800f1d6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f1da:	4618      	mov	r0, r3
 800f1dc:	3728      	adds	r7, #40	; 0x28
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd80      	pop	{r7, pc}
 800f1e2:	bf00      	nop
 800f1e4:	200042b4 	.word	0x200042b4

0800f1e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b088      	sub	sp, #32
 800f1ec:	af02      	add	r7, sp, #8
 800f1ee:	6078      	str	r0, [r7, #4]
 800f1f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1f2:	4b22      	ldr	r3, [pc, #136]	; (800f27c <prvProcessExpiredTimer+0x94>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	68db      	ldr	r3, [r3, #12]
 800f1f8:	68db      	ldr	r3, [r3, #12]
 800f1fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f1fc:	697b      	ldr	r3, [r7, #20]
 800f1fe:	3304      	adds	r3, #4
 800f200:	4618      	mov	r0, r3
 800f202:	f7fe fb1d 	bl	800d840 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f206:	697b      	ldr	r3, [r7, #20]
 800f208:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f20c:	f003 0304 	and.w	r3, r3, #4
 800f210:	2b00      	cmp	r3, #0
 800f212:	d022      	beq.n	800f25a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f214:	697b      	ldr	r3, [r7, #20]
 800f216:	699a      	ldr	r2, [r3, #24]
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	18d1      	adds	r1, r2, r3
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	683a      	ldr	r2, [r7, #0]
 800f220:	6978      	ldr	r0, [r7, #20]
 800f222:	f000 f8d1 	bl	800f3c8 <prvInsertTimerInActiveList>
 800f226:	4603      	mov	r3, r0
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d01f      	beq.n	800f26c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f22c:	2300      	movs	r3, #0
 800f22e:	9300      	str	r3, [sp, #0]
 800f230:	2300      	movs	r3, #0
 800f232:	687a      	ldr	r2, [r7, #4]
 800f234:	2100      	movs	r1, #0
 800f236:	6978      	ldr	r0, [r7, #20]
 800f238:	f7ff ff88 	bl	800f14c <xTimerGenericCommand>
 800f23c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f23e:	693b      	ldr	r3, [r7, #16]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d113      	bne.n	800f26c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f248:	f383 8811 	msr	BASEPRI, r3
 800f24c:	f3bf 8f6f 	isb	sy
 800f250:	f3bf 8f4f 	dsb	sy
 800f254:	60fb      	str	r3, [r7, #12]
}
 800f256:	bf00      	nop
 800f258:	e7fe      	b.n	800f258 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f25a:	697b      	ldr	r3, [r7, #20]
 800f25c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f260:	f023 0301 	bic.w	r3, r3, #1
 800f264:	b2da      	uxtb	r2, r3
 800f266:	697b      	ldr	r3, [r7, #20]
 800f268:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f26c:	697b      	ldr	r3, [r7, #20]
 800f26e:	6a1b      	ldr	r3, [r3, #32]
 800f270:	6978      	ldr	r0, [r7, #20]
 800f272:	4798      	blx	r3
}
 800f274:	bf00      	nop
 800f276:	3718      	adds	r7, #24
 800f278:	46bd      	mov	sp, r7
 800f27a:	bd80      	pop	{r7, pc}
 800f27c:	200042ac 	.word	0x200042ac

0800f280 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b084      	sub	sp, #16
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f288:	f107 0308 	add.w	r3, r7, #8
 800f28c:	4618      	mov	r0, r3
 800f28e:	f000 f857 	bl	800f340 <prvGetNextExpireTime>
 800f292:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f294:	68bb      	ldr	r3, [r7, #8]
 800f296:	4619      	mov	r1, r3
 800f298:	68f8      	ldr	r0, [r7, #12]
 800f29a:	f000 f803 	bl	800f2a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f29e:	f000 f8d5 	bl	800f44c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f2a2:	e7f1      	b.n	800f288 <prvTimerTask+0x8>

0800f2a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b084      	sub	sp, #16
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
 800f2ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f2ae:	f7ff fa39 	bl	800e724 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f2b2:	f107 0308 	add.w	r3, r7, #8
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	f000 f866 	bl	800f388 <prvSampleTimeNow>
 800f2bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f2be:	68bb      	ldr	r3, [r7, #8]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d130      	bne.n	800f326 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f2c4:	683b      	ldr	r3, [r7, #0]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d10a      	bne.n	800f2e0 <prvProcessTimerOrBlockTask+0x3c>
 800f2ca:	687a      	ldr	r2, [r7, #4]
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	429a      	cmp	r2, r3
 800f2d0:	d806      	bhi.n	800f2e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f2d2:	f7ff fa35 	bl	800e740 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f2d6:	68f9      	ldr	r1, [r7, #12]
 800f2d8:	6878      	ldr	r0, [r7, #4]
 800f2da:	f7ff ff85 	bl	800f1e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f2de:	e024      	b.n	800f32a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d008      	beq.n	800f2f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f2e6:	4b13      	ldr	r3, [pc, #76]	; (800f334 <prvProcessTimerOrBlockTask+0x90>)
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d101      	bne.n	800f2f4 <prvProcessTimerOrBlockTask+0x50>
 800f2f0:	2301      	movs	r3, #1
 800f2f2:	e000      	b.n	800f2f6 <prvProcessTimerOrBlockTask+0x52>
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f2f8:	4b0f      	ldr	r3, [pc, #60]	; (800f338 <prvProcessTimerOrBlockTask+0x94>)
 800f2fa:	6818      	ldr	r0, [r3, #0]
 800f2fc:	687a      	ldr	r2, [r7, #4]
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	1ad3      	subs	r3, r2, r3
 800f302:	683a      	ldr	r2, [r7, #0]
 800f304:	4619      	mov	r1, r3
 800f306:	f7fe ff7d 	bl	800e204 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f30a:	f7ff fa19 	bl	800e740 <xTaskResumeAll>
 800f30e:	4603      	mov	r3, r0
 800f310:	2b00      	cmp	r3, #0
 800f312:	d10a      	bne.n	800f32a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f314:	4b09      	ldr	r3, [pc, #36]	; (800f33c <prvProcessTimerOrBlockTask+0x98>)
 800f316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f31a:	601a      	str	r2, [r3, #0]
 800f31c:	f3bf 8f4f 	dsb	sy
 800f320:	f3bf 8f6f 	isb	sy
}
 800f324:	e001      	b.n	800f32a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f326:	f7ff fa0b 	bl	800e740 <xTaskResumeAll>
}
 800f32a:	bf00      	nop
 800f32c:	3710      	adds	r7, #16
 800f32e:	46bd      	mov	sp, r7
 800f330:	bd80      	pop	{r7, pc}
 800f332:	bf00      	nop
 800f334:	200042b0 	.word	0x200042b0
 800f338:	200042b4 	.word	0x200042b4
 800f33c:	e000ed04 	.word	0xe000ed04

0800f340 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f340:	b480      	push	{r7}
 800f342:	b085      	sub	sp, #20
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f348:	4b0e      	ldr	r3, [pc, #56]	; (800f384 <prvGetNextExpireTime+0x44>)
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d101      	bne.n	800f356 <prvGetNextExpireTime+0x16>
 800f352:	2201      	movs	r2, #1
 800f354:	e000      	b.n	800f358 <prvGetNextExpireTime+0x18>
 800f356:	2200      	movs	r2, #0
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d105      	bne.n	800f370 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f364:	4b07      	ldr	r3, [pc, #28]	; (800f384 <prvGetNextExpireTime+0x44>)
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	68db      	ldr	r3, [r3, #12]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	60fb      	str	r3, [r7, #12]
 800f36e:	e001      	b.n	800f374 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f370:	2300      	movs	r3, #0
 800f372:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f374:	68fb      	ldr	r3, [r7, #12]
}
 800f376:	4618      	mov	r0, r3
 800f378:	3714      	adds	r7, #20
 800f37a:	46bd      	mov	sp, r7
 800f37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f380:	4770      	bx	lr
 800f382:	bf00      	nop
 800f384:	200042ac 	.word	0x200042ac

0800f388 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b084      	sub	sp, #16
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f390:	f7ff fa74 	bl	800e87c <xTaskGetTickCount>
 800f394:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f396:	4b0b      	ldr	r3, [pc, #44]	; (800f3c4 <prvSampleTimeNow+0x3c>)
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	68fa      	ldr	r2, [r7, #12]
 800f39c:	429a      	cmp	r2, r3
 800f39e:	d205      	bcs.n	800f3ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f3a0:	f000 f936 	bl	800f610 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	2201      	movs	r2, #1
 800f3a8:	601a      	str	r2, [r3, #0]
 800f3aa:	e002      	b.n	800f3b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f3b2:	4a04      	ldr	r2, [pc, #16]	; (800f3c4 <prvSampleTimeNow+0x3c>)
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
}
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	3710      	adds	r7, #16
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	bd80      	pop	{r7, pc}
 800f3c2:	bf00      	nop
 800f3c4:	200042bc 	.word	0x200042bc

0800f3c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b086      	sub	sp, #24
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	60f8      	str	r0, [r7, #12]
 800f3d0:	60b9      	str	r1, [r7, #8]
 800f3d2:	607a      	str	r2, [r7, #4]
 800f3d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	68ba      	ldr	r2, [r7, #8]
 800f3de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	68fa      	ldr	r2, [r7, #12]
 800f3e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f3e6:	68ba      	ldr	r2, [r7, #8]
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	429a      	cmp	r2, r3
 800f3ec:	d812      	bhi.n	800f414 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f3ee:	687a      	ldr	r2, [r7, #4]
 800f3f0:	683b      	ldr	r3, [r7, #0]
 800f3f2:	1ad2      	subs	r2, r2, r3
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	699b      	ldr	r3, [r3, #24]
 800f3f8:	429a      	cmp	r2, r3
 800f3fa:	d302      	bcc.n	800f402 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f3fc:	2301      	movs	r3, #1
 800f3fe:	617b      	str	r3, [r7, #20]
 800f400:	e01b      	b.n	800f43a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f402:	4b10      	ldr	r3, [pc, #64]	; (800f444 <prvInsertTimerInActiveList+0x7c>)
 800f404:	681a      	ldr	r2, [r3, #0]
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	3304      	adds	r3, #4
 800f40a:	4619      	mov	r1, r3
 800f40c:	4610      	mov	r0, r2
 800f40e:	f7fe f9de 	bl	800d7ce <vListInsert>
 800f412:	e012      	b.n	800f43a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f414:	687a      	ldr	r2, [r7, #4]
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	429a      	cmp	r2, r3
 800f41a:	d206      	bcs.n	800f42a <prvInsertTimerInActiveList+0x62>
 800f41c:	68ba      	ldr	r2, [r7, #8]
 800f41e:	683b      	ldr	r3, [r7, #0]
 800f420:	429a      	cmp	r2, r3
 800f422:	d302      	bcc.n	800f42a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f424:	2301      	movs	r3, #1
 800f426:	617b      	str	r3, [r7, #20]
 800f428:	e007      	b.n	800f43a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f42a:	4b07      	ldr	r3, [pc, #28]	; (800f448 <prvInsertTimerInActiveList+0x80>)
 800f42c:	681a      	ldr	r2, [r3, #0]
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	3304      	adds	r3, #4
 800f432:	4619      	mov	r1, r3
 800f434:	4610      	mov	r0, r2
 800f436:	f7fe f9ca 	bl	800d7ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f43a:	697b      	ldr	r3, [r7, #20]
}
 800f43c:	4618      	mov	r0, r3
 800f43e:	3718      	adds	r7, #24
 800f440:	46bd      	mov	sp, r7
 800f442:	bd80      	pop	{r7, pc}
 800f444:	200042b0 	.word	0x200042b0
 800f448:	200042ac 	.word	0x200042ac

0800f44c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f44c:	b580      	push	{r7, lr}
 800f44e:	b08e      	sub	sp, #56	; 0x38
 800f450:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f452:	e0ca      	b.n	800f5ea <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	2b00      	cmp	r3, #0
 800f458:	da18      	bge.n	800f48c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f45a:	1d3b      	adds	r3, r7, #4
 800f45c:	3304      	adds	r3, #4
 800f45e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f462:	2b00      	cmp	r3, #0
 800f464:	d10a      	bne.n	800f47c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f46a:	f383 8811 	msr	BASEPRI, r3
 800f46e:	f3bf 8f6f 	isb	sy
 800f472:	f3bf 8f4f 	dsb	sy
 800f476:	61fb      	str	r3, [r7, #28]
}
 800f478:	bf00      	nop
 800f47a:	e7fe      	b.n	800f47a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f482:	6850      	ldr	r0, [r2, #4]
 800f484:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f486:	6892      	ldr	r2, [r2, #8]
 800f488:	4611      	mov	r1, r2
 800f48a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	f2c0 80ab 	blt.w	800f5ea <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f49a:	695b      	ldr	r3, [r3, #20]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d004      	beq.n	800f4aa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4a2:	3304      	adds	r3, #4
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f7fe f9cb 	bl	800d840 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f4aa:	463b      	mov	r3, r7
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	f7ff ff6b 	bl	800f388 <prvSampleTimeNow>
 800f4b2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	2b09      	cmp	r3, #9
 800f4b8:	f200 8096 	bhi.w	800f5e8 <prvProcessReceivedCommands+0x19c>
 800f4bc:	a201      	add	r2, pc, #4	; (adr r2, 800f4c4 <prvProcessReceivedCommands+0x78>)
 800f4be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4c2:	bf00      	nop
 800f4c4:	0800f4ed 	.word	0x0800f4ed
 800f4c8:	0800f4ed 	.word	0x0800f4ed
 800f4cc:	0800f4ed 	.word	0x0800f4ed
 800f4d0:	0800f561 	.word	0x0800f561
 800f4d4:	0800f575 	.word	0x0800f575
 800f4d8:	0800f5bf 	.word	0x0800f5bf
 800f4dc:	0800f4ed 	.word	0x0800f4ed
 800f4e0:	0800f4ed 	.word	0x0800f4ed
 800f4e4:	0800f561 	.word	0x0800f561
 800f4e8:	0800f575 	.word	0x0800f575
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f4f2:	f043 0301 	orr.w	r3, r3, #1
 800f4f6:	b2da      	uxtb	r2, r3
 800f4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f4fe:	68ba      	ldr	r2, [r7, #8]
 800f500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f502:	699b      	ldr	r3, [r3, #24]
 800f504:	18d1      	adds	r1, r2, r3
 800f506:	68bb      	ldr	r3, [r7, #8]
 800f508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f50a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f50c:	f7ff ff5c 	bl	800f3c8 <prvInsertTimerInActiveList>
 800f510:	4603      	mov	r3, r0
 800f512:	2b00      	cmp	r3, #0
 800f514:	d069      	beq.n	800f5ea <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f518:	6a1b      	ldr	r3, [r3, #32]
 800f51a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f51c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f520:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f524:	f003 0304 	and.w	r3, r3, #4
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d05e      	beq.n	800f5ea <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f52c:	68ba      	ldr	r2, [r7, #8]
 800f52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f530:	699b      	ldr	r3, [r3, #24]
 800f532:	441a      	add	r2, r3
 800f534:	2300      	movs	r3, #0
 800f536:	9300      	str	r3, [sp, #0]
 800f538:	2300      	movs	r3, #0
 800f53a:	2100      	movs	r1, #0
 800f53c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f53e:	f7ff fe05 	bl	800f14c <xTimerGenericCommand>
 800f542:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f544:	6a3b      	ldr	r3, [r7, #32]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d14f      	bne.n	800f5ea <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f54e:	f383 8811 	msr	BASEPRI, r3
 800f552:	f3bf 8f6f 	isb	sy
 800f556:	f3bf 8f4f 	dsb	sy
 800f55a:	61bb      	str	r3, [r7, #24]
}
 800f55c:	bf00      	nop
 800f55e:	e7fe      	b.n	800f55e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f562:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f566:	f023 0301 	bic.w	r3, r3, #1
 800f56a:	b2da      	uxtb	r2, r3
 800f56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f56e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f572:	e03a      	b.n	800f5ea <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f576:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f57a:	f043 0301 	orr.w	r3, r3, #1
 800f57e:	b2da      	uxtb	r2, r3
 800f580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f582:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f586:	68ba      	ldr	r2, [r7, #8]
 800f588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f58a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f58e:	699b      	ldr	r3, [r3, #24]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d10a      	bne.n	800f5aa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f594:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f598:	f383 8811 	msr	BASEPRI, r3
 800f59c:	f3bf 8f6f 	isb	sy
 800f5a0:	f3bf 8f4f 	dsb	sy
 800f5a4:	617b      	str	r3, [r7, #20]
}
 800f5a6:	bf00      	nop
 800f5a8:	e7fe      	b.n	800f5a8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ac:	699a      	ldr	r2, [r3, #24]
 800f5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5b0:	18d1      	adds	r1, r2, r3
 800f5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f5b8:	f7ff ff06 	bl	800f3c8 <prvInsertTimerInActiveList>
					break;
 800f5bc:	e015      	b.n	800f5ea <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f5c4:	f003 0302 	and.w	r3, r3, #2
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d103      	bne.n	800f5d4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f5cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f5ce:	f000 fbdf 	bl	800fd90 <vPortFree>
 800f5d2:	e00a      	b.n	800f5ea <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f5da:	f023 0301 	bic.w	r3, r3, #1
 800f5de:	b2da      	uxtb	r2, r3
 800f5e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f5e6:	e000      	b.n	800f5ea <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800f5e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f5ea:	4b08      	ldr	r3, [pc, #32]	; (800f60c <prvProcessReceivedCommands+0x1c0>)
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	1d39      	adds	r1, r7, #4
 800f5f0:	2200      	movs	r2, #0
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	f7fe fbec 	bl	800ddd0 <xQueueReceive>
 800f5f8:	4603      	mov	r3, r0
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	f47f af2a 	bne.w	800f454 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f600:	bf00      	nop
 800f602:	bf00      	nop
 800f604:	3730      	adds	r7, #48	; 0x30
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}
 800f60a:	bf00      	nop
 800f60c:	200042b4 	.word	0x200042b4

0800f610 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f610:	b580      	push	{r7, lr}
 800f612:	b088      	sub	sp, #32
 800f614:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f616:	e048      	b.n	800f6aa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f618:	4b2d      	ldr	r3, [pc, #180]	; (800f6d0 <prvSwitchTimerLists+0xc0>)
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	68db      	ldr	r3, [r3, #12]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f622:	4b2b      	ldr	r3, [pc, #172]	; (800f6d0 <prvSwitchTimerLists+0xc0>)
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	68db      	ldr	r3, [r3, #12]
 800f628:	68db      	ldr	r3, [r3, #12]
 800f62a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	3304      	adds	r3, #4
 800f630:	4618      	mov	r0, r3
 800f632:	f7fe f905 	bl	800d840 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	6a1b      	ldr	r3, [r3, #32]
 800f63a:	68f8      	ldr	r0, [r7, #12]
 800f63c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f644:	f003 0304 	and.w	r3, r3, #4
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d02e      	beq.n	800f6aa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	699b      	ldr	r3, [r3, #24]
 800f650:	693a      	ldr	r2, [r7, #16]
 800f652:	4413      	add	r3, r2
 800f654:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f656:	68ba      	ldr	r2, [r7, #8]
 800f658:	693b      	ldr	r3, [r7, #16]
 800f65a:	429a      	cmp	r2, r3
 800f65c:	d90e      	bls.n	800f67c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	68ba      	ldr	r2, [r7, #8]
 800f662:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	68fa      	ldr	r2, [r7, #12]
 800f668:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f66a:	4b19      	ldr	r3, [pc, #100]	; (800f6d0 <prvSwitchTimerLists+0xc0>)
 800f66c:	681a      	ldr	r2, [r3, #0]
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	3304      	adds	r3, #4
 800f672:	4619      	mov	r1, r3
 800f674:	4610      	mov	r0, r2
 800f676:	f7fe f8aa 	bl	800d7ce <vListInsert>
 800f67a:	e016      	b.n	800f6aa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f67c:	2300      	movs	r3, #0
 800f67e:	9300      	str	r3, [sp, #0]
 800f680:	2300      	movs	r3, #0
 800f682:	693a      	ldr	r2, [r7, #16]
 800f684:	2100      	movs	r1, #0
 800f686:	68f8      	ldr	r0, [r7, #12]
 800f688:	f7ff fd60 	bl	800f14c <xTimerGenericCommand>
 800f68c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d10a      	bne.n	800f6aa <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f698:	f383 8811 	msr	BASEPRI, r3
 800f69c:	f3bf 8f6f 	isb	sy
 800f6a0:	f3bf 8f4f 	dsb	sy
 800f6a4:	603b      	str	r3, [r7, #0]
}
 800f6a6:	bf00      	nop
 800f6a8:	e7fe      	b.n	800f6a8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f6aa:	4b09      	ldr	r3, [pc, #36]	; (800f6d0 <prvSwitchTimerLists+0xc0>)
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d1b1      	bne.n	800f618 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f6b4:	4b06      	ldr	r3, [pc, #24]	; (800f6d0 <prvSwitchTimerLists+0xc0>)
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f6ba:	4b06      	ldr	r3, [pc, #24]	; (800f6d4 <prvSwitchTimerLists+0xc4>)
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	4a04      	ldr	r2, [pc, #16]	; (800f6d0 <prvSwitchTimerLists+0xc0>)
 800f6c0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f6c2:	4a04      	ldr	r2, [pc, #16]	; (800f6d4 <prvSwitchTimerLists+0xc4>)
 800f6c4:	697b      	ldr	r3, [r7, #20]
 800f6c6:	6013      	str	r3, [r2, #0]
}
 800f6c8:	bf00      	nop
 800f6ca:	3718      	adds	r7, #24
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	bd80      	pop	{r7, pc}
 800f6d0:	200042ac 	.word	0x200042ac
 800f6d4:	200042b0 	.word	0x200042b0

0800f6d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f6d8:	b580      	push	{r7, lr}
 800f6da:	b082      	sub	sp, #8
 800f6dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f6de:	f000 f969 	bl	800f9b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f6e2:	4b15      	ldr	r3, [pc, #84]	; (800f738 <prvCheckForValidListAndQueue+0x60>)
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d120      	bne.n	800f72c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f6ea:	4814      	ldr	r0, [pc, #80]	; (800f73c <prvCheckForValidListAndQueue+0x64>)
 800f6ec:	f7fe f81e 	bl	800d72c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f6f0:	4813      	ldr	r0, [pc, #76]	; (800f740 <prvCheckForValidListAndQueue+0x68>)
 800f6f2:	f7fe f81b 	bl	800d72c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f6f6:	4b13      	ldr	r3, [pc, #76]	; (800f744 <prvCheckForValidListAndQueue+0x6c>)
 800f6f8:	4a10      	ldr	r2, [pc, #64]	; (800f73c <prvCheckForValidListAndQueue+0x64>)
 800f6fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f6fc:	4b12      	ldr	r3, [pc, #72]	; (800f748 <prvCheckForValidListAndQueue+0x70>)
 800f6fe:	4a10      	ldr	r2, [pc, #64]	; (800f740 <prvCheckForValidListAndQueue+0x68>)
 800f700:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f702:	2300      	movs	r3, #0
 800f704:	9300      	str	r3, [sp, #0]
 800f706:	4b11      	ldr	r3, [pc, #68]	; (800f74c <prvCheckForValidListAndQueue+0x74>)
 800f708:	4a11      	ldr	r2, [pc, #68]	; (800f750 <prvCheckForValidListAndQueue+0x78>)
 800f70a:	2110      	movs	r1, #16
 800f70c:	200a      	movs	r0, #10
 800f70e:	f7fe f929 	bl	800d964 <xQueueGenericCreateStatic>
 800f712:	4603      	mov	r3, r0
 800f714:	4a08      	ldr	r2, [pc, #32]	; (800f738 <prvCheckForValidListAndQueue+0x60>)
 800f716:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f718:	4b07      	ldr	r3, [pc, #28]	; (800f738 <prvCheckForValidListAndQueue+0x60>)
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d005      	beq.n	800f72c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f720:	4b05      	ldr	r3, [pc, #20]	; (800f738 <prvCheckForValidListAndQueue+0x60>)
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	490b      	ldr	r1, [pc, #44]	; (800f754 <prvCheckForValidListAndQueue+0x7c>)
 800f726:	4618      	mov	r0, r3
 800f728:	f7fe fd42 	bl	800e1b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f72c:	f000 f972 	bl	800fa14 <vPortExitCritical>
}
 800f730:	bf00      	nop
 800f732:	46bd      	mov	sp, r7
 800f734:	bd80      	pop	{r7, pc}
 800f736:	bf00      	nop
 800f738:	200042b4 	.word	0x200042b4
 800f73c:	20004284 	.word	0x20004284
 800f740:	20004298 	.word	0x20004298
 800f744:	200042ac 	.word	0x200042ac
 800f748:	200042b0 	.word	0x200042b0
 800f74c:	20004360 	.word	0x20004360
 800f750:	200042c0 	.word	0x200042c0
 800f754:	08015338 	.word	0x08015338

0800f758 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f758:	b480      	push	{r7}
 800f75a:	b085      	sub	sp, #20
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	60f8      	str	r0, [r7, #12]
 800f760:	60b9      	str	r1, [r7, #8]
 800f762:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	3b04      	subs	r3, #4
 800f768:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f770:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	3b04      	subs	r3, #4
 800f776:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f778:	68bb      	ldr	r3, [r7, #8]
 800f77a:	f023 0201 	bic.w	r2, r3, #1
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	3b04      	subs	r3, #4
 800f786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f788:	4a0c      	ldr	r2, [pc, #48]	; (800f7bc <pxPortInitialiseStack+0x64>)
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	3b14      	subs	r3, #20
 800f792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f794:	687a      	ldr	r2, [r7, #4]
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	3b04      	subs	r3, #4
 800f79e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	f06f 0202 	mvn.w	r2, #2
 800f7a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	3b20      	subs	r3, #32
 800f7ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f7ae:	68fb      	ldr	r3, [r7, #12]
}
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	3714      	adds	r7, #20
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ba:	4770      	bx	lr
 800f7bc:	0800f7c1 	.word	0x0800f7c1

0800f7c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f7c0:	b480      	push	{r7}
 800f7c2:	b085      	sub	sp, #20
 800f7c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f7ca:	4b12      	ldr	r3, [pc, #72]	; (800f814 <prvTaskExitError+0x54>)
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7d2:	d00a      	beq.n	800f7ea <prvTaskExitError+0x2a>
	__asm volatile
 800f7d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7d8:	f383 8811 	msr	BASEPRI, r3
 800f7dc:	f3bf 8f6f 	isb	sy
 800f7e0:	f3bf 8f4f 	dsb	sy
 800f7e4:	60fb      	str	r3, [r7, #12]
}
 800f7e6:	bf00      	nop
 800f7e8:	e7fe      	b.n	800f7e8 <prvTaskExitError+0x28>
	__asm volatile
 800f7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7ee:	f383 8811 	msr	BASEPRI, r3
 800f7f2:	f3bf 8f6f 	isb	sy
 800f7f6:	f3bf 8f4f 	dsb	sy
 800f7fa:	60bb      	str	r3, [r7, #8]
}
 800f7fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f7fe:	bf00      	nop
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d0fc      	beq.n	800f800 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f806:	bf00      	nop
 800f808:	bf00      	nop
 800f80a:	3714      	adds	r7, #20
 800f80c:	46bd      	mov	sp, r7
 800f80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f812:	4770      	bx	lr
 800f814:	20000018 	.word	0x20000018
	...

0800f820 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f820:	4b07      	ldr	r3, [pc, #28]	; (800f840 <pxCurrentTCBConst2>)
 800f822:	6819      	ldr	r1, [r3, #0]
 800f824:	6808      	ldr	r0, [r1, #0]
 800f826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f82a:	f380 8809 	msr	PSP, r0
 800f82e:	f3bf 8f6f 	isb	sy
 800f832:	f04f 0000 	mov.w	r0, #0
 800f836:	f380 8811 	msr	BASEPRI, r0
 800f83a:	4770      	bx	lr
 800f83c:	f3af 8000 	nop.w

0800f840 <pxCurrentTCBConst2>:
 800f840:	20003d84 	.word	0x20003d84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f844:	bf00      	nop
 800f846:	bf00      	nop

0800f848 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f848:	4808      	ldr	r0, [pc, #32]	; (800f86c <prvPortStartFirstTask+0x24>)
 800f84a:	6800      	ldr	r0, [r0, #0]
 800f84c:	6800      	ldr	r0, [r0, #0]
 800f84e:	f380 8808 	msr	MSP, r0
 800f852:	f04f 0000 	mov.w	r0, #0
 800f856:	f380 8814 	msr	CONTROL, r0
 800f85a:	b662      	cpsie	i
 800f85c:	b661      	cpsie	f
 800f85e:	f3bf 8f4f 	dsb	sy
 800f862:	f3bf 8f6f 	isb	sy
 800f866:	df00      	svc	0
 800f868:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f86a:	bf00      	nop
 800f86c:	e000ed08 	.word	0xe000ed08

0800f870 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f870:	b580      	push	{r7, lr}
 800f872:	b086      	sub	sp, #24
 800f874:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f876:	4b46      	ldr	r3, [pc, #280]	; (800f990 <xPortStartScheduler+0x120>)
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	4a46      	ldr	r2, [pc, #280]	; (800f994 <xPortStartScheduler+0x124>)
 800f87c:	4293      	cmp	r3, r2
 800f87e:	d10a      	bne.n	800f896 <xPortStartScheduler+0x26>
	__asm volatile
 800f880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f884:	f383 8811 	msr	BASEPRI, r3
 800f888:	f3bf 8f6f 	isb	sy
 800f88c:	f3bf 8f4f 	dsb	sy
 800f890:	613b      	str	r3, [r7, #16]
}
 800f892:	bf00      	nop
 800f894:	e7fe      	b.n	800f894 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f896:	4b3e      	ldr	r3, [pc, #248]	; (800f990 <xPortStartScheduler+0x120>)
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	4a3f      	ldr	r2, [pc, #252]	; (800f998 <xPortStartScheduler+0x128>)
 800f89c:	4293      	cmp	r3, r2
 800f89e:	d10a      	bne.n	800f8b6 <xPortStartScheduler+0x46>
	__asm volatile
 800f8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8a4:	f383 8811 	msr	BASEPRI, r3
 800f8a8:	f3bf 8f6f 	isb	sy
 800f8ac:	f3bf 8f4f 	dsb	sy
 800f8b0:	60fb      	str	r3, [r7, #12]
}
 800f8b2:	bf00      	nop
 800f8b4:	e7fe      	b.n	800f8b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f8b6:	4b39      	ldr	r3, [pc, #228]	; (800f99c <xPortStartScheduler+0x12c>)
 800f8b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f8ba:	697b      	ldr	r3, [r7, #20]
 800f8bc:	781b      	ldrb	r3, [r3, #0]
 800f8be:	b2db      	uxtb	r3, r3
 800f8c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f8c2:	697b      	ldr	r3, [r7, #20]
 800f8c4:	22ff      	movs	r2, #255	; 0xff
 800f8c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f8c8:	697b      	ldr	r3, [r7, #20]
 800f8ca:	781b      	ldrb	r3, [r3, #0]
 800f8cc:	b2db      	uxtb	r3, r3
 800f8ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f8d0:	78fb      	ldrb	r3, [r7, #3]
 800f8d2:	b2db      	uxtb	r3, r3
 800f8d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f8d8:	b2da      	uxtb	r2, r3
 800f8da:	4b31      	ldr	r3, [pc, #196]	; (800f9a0 <xPortStartScheduler+0x130>)
 800f8dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f8de:	4b31      	ldr	r3, [pc, #196]	; (800f9a4 <xPortStartScheduler+0x134>)
 800f8e0:	2207      	movs	r2, #7
 800f8e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f8e4:	e009      	b.n	800f8fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f8e6:	4b2f      	ldr	r3, [pc, #188]	; (800f9a4 <xPortStartScheduler+0x134>)
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	3b01      	subs	r3, #1
 800f8ec:	4a2d      	ldr	r2, [pc, #180]	; (800f9a4 <xPortStartScheduler+0x134>)
 800f8ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f8f0:	78fb      	ldrb	r3, [r7, #3]
 800f8f2:	b2db      	uxtb	r3, r3
 800f8f4:	005b      	lsls	r3, r3, #1
 800f8f6:	b2db      	uxtb	r3, r3
 800f8f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f8fa:	78fb      	ldrb	r3, [r7, #3]
 800f8fc:	b2db      	uxtb	r3, r3
 800f8fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f902:	2b80      	cmp	r3, #128	; 0x80
 800f904:	d0ef      	beq.n	800f8e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f906:	4b27      	ldr	r3, [pc, #156]	; (800f9a4 <xPortStartScheduler+0x134>)
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	f1c3 0307 	rsb	r3, r3, #7
 800f90e:	2b04      	cmp	r3, #4
 800f910:	d00a      	beq.n	800f928 <xPortStartScheduler+0xb8>
	__asm volatile
 800f912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f916:	f383 8811 	msr	BASEPRI, r3
 800f91a:	f3bf 8f6f 	isb	sy
 800f91e:	f3bf 8f4f 	dsb	sy
 800f922:	60bb      	str	r3, [r7, #8]
}
 800f924:	bf00      	nop
 800f926:	e7fe      	b.n	800f926 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f928:	4b1e      	ldr	r3, [pc, #120]	; (800f9a4 <xPortStartScheduler+0x134>)
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	021b      	lsls	r3, r3, #8
 800f92e:	4a1d      	ldr	r2, [pc, #116]	; (800f9a4 <xPortStartScheduler+0x134>)
 800f930:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f932:	4b1c      	ldr	r3, [pc, #112]	; (800f9a4 <xPortStartScheduler+0x134>)
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f93a:	4a1a      	ldr	r2, [pc, #104]	; (800f9a4 <xPortStartScheduler+0x134>)
 800f93c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	b2da      	uxtb	r2, r3
 800f942:	697b      	ldr	r3, [r7, #20]
 800f944:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f946:	4b18      	ldr	r3, [pc, #96]	; (800f9a8 <xPortStartScheduler+0x138>)
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	4a17      	ldr	r2, [pc, #92]	; (800f9a8 <xPortStartScheduler+0x138>)
 800f94c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f950:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f952:	4b15      	ldr	r3, [pc, #84]	; (800f9a8 <xPortStartScheduler+0x138>)
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	4a14      	ldr	r2, [pc, #80]	; (800f9a8 <xPortStartScheduler+0x138>)
 800f958:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f95c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f95e:	f000 f8dd 	bl	800fb1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f962:	4b12      	ldr	r3, [pc, #72]	; (800f9ac <xPortStartScheduler+0x13c>)
 800f964:	2200      	movs	r2, #0
 800f966:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f968:	f000 f8fc 	bl	800fb64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f96c:	4b10      	ldr	r3, [pc, #64]	; (800f9b0 <xPortStartScheduler+0x140>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	4a0f      	ldr	r2, [pc, #60]	; (800f9b0 <xPortStartScheduler+0x140>)
 800f972:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f976:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f978:	f7ff ff66 	bl	800f848 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f97c:	f7ff f848 	bl	800ea10 <vTaskSwitchContext>
	prvTaskExitError();
 800f980:	f7ff ff1e 	bl	800f7c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f984:	2300      	movs	r3, #0
}
 800f986:	4618      	mov	r0, r3
 800f988:	3718      	adds	r7, #24
 800f98a:	46bd      	mov	sp, r7
 800f98c:	bd80      	pop	{r7, pc}
 800f98e:	bf00      	nop
 800f990:	e000ed00 	.word	0xe000ed00
 800f994:	410fc271 	.word	0x410fc271
 800f998:	410fc270 	.word	0x410fc270
 800f99c:	e000e400 	.word	0xe000e400
 800f9a0:	200043b0 	.word	0x200043b0
 800f9a4:	200043b4 	.word	0x200043b4
 800f9a8:	e000ed20 	.word	0xe000ed20
 800f9ac:	20000018 	.word	0x20000018
 800f9b0:	e000ef34 	.word	0xe000ef34

0800f9b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f9b4:	b480      	push	{r7}
 800f9b6:	b083      	sub	sp, #12
 800f9b8:	af00      	add	r7, sp, #0
	__asm volatile
 800f9ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9be:	f383 8811 	msr	BASEPRI, r3
 800f9c2:	f3bf 8f6f 	isb	sy
 800f9c6:	f3bf 8f4f 	dsb	sy
 800f9ca:	607b      	str	r3, [r7, #4]
}
 800f9cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f9ce:	4b0f      	ldr	r3, [pc, #60]	; (800fa0c <vPortEnterCritical+0x58>)
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	3301      	adds	r3, #1
 800f9d4:	4a0d      	ldr	r2, [pc, #52]	; (800fa0c <vPortEnterCritical+0x58>)
 800f9d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f9d8:	4b0c      	ldr	r3, [pc, #48]	; (800fa0c <vPortEnterCritical+0x58>)
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	2b01      	cmp	r3, #1
 800f9de:	d10f      	bne.n	800fa00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f9e0:	4b0b      	ldr	r3, [pc, #44]	; (800fa10 <vPortEnterCritical+0x5c>)
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	b2db      	uxtb	r3, r3
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d00a      	beq.n	800fa00 <vPortEnterCritical+0x4c>
	__asm volatile
 800f9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9ee:	f383 8811 	msr	BASEPRI, r3
 800f9f2:	f3bf 8f6f 	isb	sy
 800f9f6:	f3bf 8f4f 	dsb	sy
 800f9fa:	603b      	str	r3, [r7, #0]
}
 800f9fc:	bf00      	nop
 800f9fe:	e7fe      	b.n	800f9fe <vPortEnterCritical+0x4a>
	}
}
 800fa00:	bf00      	nop
 800fa02:	370c      	adds	r7, #12
 800fa04:	46bd      	mov	sp, r7
 800fa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0a:	4770      	bx	lr
 800fa0c:	20000018 	.word	0x20000018
 800fa10:	e000ed04 	.word	0xe000ed04

0800fa14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fa14:	b480      	push	{r7}
 800fa16:	b083      	sub	sp, #12
 800fa18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fa1a:	4b12      	ldr	r3, [pc, #72]	; (800fa64 <vPortExitCritical+0x50>)
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d10a      	bne.n	800fa38 <vPortExitCritical+0x24>
	__asm volatile
 800fa22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa26:	f383 8811 	msr	BASEPRI, r3
 800fa2a:	f3bf 8f6f 	isb	sy
 800fa2e:	f3bf 8f4f 	dsb	sy
 800fa32:	607b      	str	r3, [r7, #4]
}
 800fa34:	bf00      	nop
 800fa36:	e7fe      	b.n	800fa36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fa38:	4b0a      	ldr	r3, [pc, #40]	; (800fa64 <vPortExitCritical+0x50>)
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	3b01      	subs	r3, #1
 800fa3e:	4a09      	ldr	r2, [pc, #36]	; (800fa64 <vPortExitCritical+0x50>)
 800fa40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fa42:	4b08      	ldr	r3, [pc, #32]	; (800fa64 <vPortExitCritical+0x50>)
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d105      	bne.n	800fa56 <vPortExitCritical+0x42>
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fa4e:	683b      	ldr	r3, [r7, #0]
 800fa50:	f383 8811 	msr	BASEPRI, r3
}
 800fa54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fa56:	bf00      	nop
 800fa58:	370c      	adds	r7, #12
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa60:	4770      	bx	lr
 800fa62:	bf00      	nop
 800fa64:	20000018 	.word	0x20000018
	...

0800fa70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fa70:	f3ef 8009 	mrs	r0, PSP
 800fa74:	f3bf 8f6f 	isb	sy
 800fa78:	4b15      	ldr	r3, [pc, #84]	; (800fad0 <pxCurrentTCBConst>)
 800fa7a:	681a      	ldr	r2, [r3, #0]
 800fa7c:	f01e 0f10 	tst.w	lr, #16
 800fa80:	bf08      	it	eq
 800fa82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fa86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa8a:	6010      	str	r0, [r2, #0]
 800fa8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fa90:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fa94:	f380 8811 	msr	BASEPRI, r0
 800fa98:	f3bf 8f4f 	dsb	sy
 800fa9c:	f3bf 8f6f 	isb	sy
 800faa0:	f7fe ffb6 	bl	800ea10 <vTaskSwitchContext>
 800faa4:	f04f 0000 	mov.w	r0, #0
 800faa8:	f380 8811 	msr	BASEPRI, r0
 800faac:	bc09      	pop	{r0, r3}
 800faae:	6819      	ldr	r1, [r3, #0]
 800fab0:	6808      	ldr	r0, [r1, #0]
 800fab2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fab6:	f01e 0f10 	tst.w	lr, #16
 800faba:	bf08      	it	eq
 800fabc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fac0:	f380 8809 	msr	PSP, r0
 800fac4:	f3bf 8f6f 	isb	sy
 800fac8:	4770      	bx	lr
 800faca:	bf00      	nop
 800facc:	f3af 8000 	nop.w

0800fad0 <pxCurrentTCBConst>:
 800fad0:	20003d84 	.word	0x20003d84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fad4:	bf00      	nop
 800fad6:	bf00      	nop

0800fad8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b082      	sub	sp, #8
 800fadc:	af00      	add	r7, sp, #0
	__asm volatile
 800fade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fae2:	f383 8811 	msr	BASEPRI, r3
 800fae6:	f3bf 8f6f 	isb	sy
 800faea:	f3bf 8f4f 	dsb	sy
 800faee:	607b      	str	r3, [r7, #4]
}
 800faf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800faf2:	f7fe fed3 	bl	800e89c <xTaskIncrementTick>
 800faf6:	4603      	mov	r3, r0
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d003      	beq.n	800fb04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fafc:	4b06      	ldr	r3, [pc, #24]	; (800fb18 <xPortSysTickHandler+0x40>)
 800fafe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb02:	601a      	str	r2, [r3, #0]
 800fb04:	2300      	movs	r3, #0
 800fb06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fb08:	683b      	ldr	r3, [r7, #0]
 800fb0a:	f383 8811 	msr	BASEPRI, r3
}
 800fb0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fb10:	bf00      	nop
 800fb12:	3708      	adds	r7, #8
 800fb14:	46bd      	mov	sp, r7
 800fb16:	bd80      	pop	{r7, pc}
 800fb18:	e000ed04 	.word	0xe000ed04

0800fb1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fb1c:	b480      	push	{r7}
 800fb1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fb20:	4b0b      	ldr	r3, [pc, #44]	; (800fb50 <vPortSetupTimerInterrupt+0x34>)
 800fb22:	2200      	movs	r2, #0
 800fb24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fb26:	4b0b      	ldr	r3, [pc, #44]	; (800fb54 <vPortSetupTimerInterrupt+0x38>)
 800fb28:	2200      	movs	r2, #0
 800fb2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fb2c:	4b0a      	ldr	r3, [pc, #40]	; (800fb58 <vPortSetupTimerInterrupt+0x3c>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	4a0a      	ldr	r2, [pc, #40]	; (800fb5c <vPortSetupTimerInterrupt+0x40>)
 800fb32:	fba2 2303 	umull	r2, r3, r2, r3
 800fb36:	099b      	lsrs	r3, r3, #6
 800fb38:	4a09      	ldr	r2, [pc, #36]	; (800fb60 <vPortSetupTimerInterrupt+0x44>)
 800fb3a:	3b01      	subs	r3, #1
 800fb3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fb3e:	4b04      	ldr	r3, [pc, #16]	; (800fb50 <vPortSetupTimerInterrupt+0x34>)
 800fb40:	2207      	movs	r2, #7
 800fb42:	601a      	str	r2, [r3, #0]
}
 800fb44:	bf00      	nop
 800fb46:	46bd      	mov	sp, r7
 800fb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4c:	4770      	bx	lr
 800fb4e:	bf00      	nop
 800fb50:	e000e010 	.word	0xe000e010
 800fb54:	e000e018 	.word	0xe000e018
 800fb58:	2000000c 	.word	0x2000000c
 800fb5c:	10624dd3 	.word	0x10624dd3
 800fb60:	e000e014 	.word	0xe000e014

0800fb64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fb64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fb74 <vPortEnableVFP+0x10>
 800fb68:	6801      	ldr	r1, [r0, #0]
 800fb6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fb6e:	6001      	str	r1, [r0, #0]
 800fb70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fb72:	bf00      	nop
 800fb74:	e000ed88 	.word	0xe000ed88

0800fb78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fb78:	b480      	push	{r7}
 800fb7a:	b085      	sub	sp, #20
 800fb7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fb7e:	f3ef 8305 	mrs	r3, IPSR
 800fb82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	2b0f      	cmp	r3, #15
 800fb88:	d914      	bls.n	800fbb4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fb8a:	4a17      	ldr	r2, [pc, #92]	; (800fbe8 <vPortValidateInterruptPriority+0x70>)
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	4413      	add	r3, r2
 800fb90:	781b      	ldrb	r3, [r3, #0]
 800fb92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fb94:	4b15      	ldr	r3, [pc, #84]	; (800fbec <vPortValidateInterruptPriority+0x74>)
 800fb96:	781b      	ldrb	r3, [r3, #0]
 800fb98:	7afa      	ldrb	r2, [r7, #11]
 800fb9a:	429a      	cmp	r2, r3
 800fb9c:	d20a      	bcs.n	800fbb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800fb9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fba2:	f383 8811 	msr	BASEPRI, r3
 800fba6:	f3bf 8f6f 	isb	sy
 800fbaa:	f3bf 8f4f 	dsb	sy
 800fbae:	607b      	str	r3, [r7, #4]
}
 800fbb0:	bf00      	nop
 800fbb2:	e7fe      	b.n	800fbb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fbb4:	4b0e      	ldr	r3, [pc, #56]	; (800fbf0 <vPortValidateInterruptPriority+0x78>)
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fbbc:	4b0d      	ldr	r3, [pc, #52]	; (800fbf4 <vPortValidateInterruptPriority+0x7c>)
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	429a      	cmp	r2, r3
 800fbc2:	d90a      	bls.n	800fbda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800fbc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbc8:	f383 8811 	msr	BASEPRI, r3
 800fbcc:	f3bf 8f6f 	isb	sy
 800fbd0:	f3bf 8f4f 	dsb	sy
 800fbd4:	603b      	str	r3, [r7, #0]
}
 800fbd6:	bf00      	nop
 800fbd8:	e7fe      	b.n	800fbd8 <vPortValidateInterruptPriority+0x60>
	}
 800fbda:	bf00      	nop
 800fbdc:	3714      	adds	r7, #20
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe4:	4770      	bx	lr
 800fbe6:	bf00      	nop
 800fbe8:	e000e3f0 	.word	0xe000e3f0
 800fbec:	200043b0 	.word	0x200043b0
 800fbf0:	e000ed0c 	.word	0xe000ed0c
 800fbf4:	200043b4 	.word	0x200043b4

0800fbf8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b08a      	sub	sp, #40	; 0x28
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fc00:	2300      	movs	r3, #0
 800fc02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fc04:	f7fe fd8e 	bl	800e724 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fc08:	4b5b      	ldr	r3, [pc, #364]	; (800fd78 <pvPortMalloc+0x180>)
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d101      	bne.n	800fc14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fc10:	f000 f920 	bl	800fe54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fc14:	4b59      	ldr	r3, [pc, #356]	; (800fd7c <pvPortMalloc+0x184>)
 800fc16:	681a      	ldr	r2, [r3, #0]
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	4013      	ands	r3, r2
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	f040 8093 	bne.w	800fd48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d01d      	beq.n	800fc64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800fc28:	2208      	movs	r2, #8
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	4413      	add	r3, r2
 800fc2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	f003 0307 	and.w	r3, r3, #7
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d014      	beq.n	800fc64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	f023 0307 	bic.w	r3, r3, #7
 800fc40:	3308      	adds	r3, #8
 800fc42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	f003 0307 	and.w	r3, r3, #7
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d00a      	beq.n	800fc64 <pvPortMalloc+0x6c>
	__asm volatile
 800fc4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc52:	f383 8811 	msr	BASEPRI, r3
 800fc56:	f3bf 8f6f 	isb	sy
 800fc5a:	f3bf 8f4f 	dsb	sy
 800fc5e:	617b      	str	r3, [r7, #20]
}
 800fc60:	bf00      	nop
 800fc62:	e7fe      	b.n	800fc62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d06e      	beq.n	800fd48 <pvPortMalloc+0x150>
 800fc6a:	4b45      	ldr	r3, [pc, #276]	; (800fd80 <pvPortMalloc+0x188>)
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	687a      	ldr	r2, [r7, #4]
 800fc70:	429a      	cmp	r2, r3
 800fc72:	d869      	bhi.n	800fd48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fc74:	4b43      	ldr	r3, [pc, #268]	; (800fd84 <pvPortMalloc+0x18c>)
 800fc76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fc78:	4b42      	ldr	r3, [pc, #264]	; (800fd84 <pvPortMalloc+0x18c>)
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fc7e:	e004      	b.n	800fc8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800fc80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc8c:	685b      	ldr	r3, [r3, #4]
 800fc8e:	687a      	ldr	r2, [r7, #4]
 800fc90:	429a      	cmp	r2, r3
 800fc92:	d903      	bls.n	800fc9c <pvPortMalloc+0xa4>
 800fc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d1f1      	bne.n	800fc80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fc9c:	4b36      	ldr	r3, [pc, #216]	; (800fd78 <pvPortMalloc+0x180>)
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fca2:	429a      	cmp	r2, r3
 800fca4:	d050      	beq.n	800fd48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fca6:	6a3b      	ldr	r3, [r7, #32]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	2208      	movs	r2, #8
 800fcac:	4413      	add	r3, r2
 800fcae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fcb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcb2:	681a      	ldr	r2, [r3, #0]
 800fcb4:	6a3b      	ldr	r3, [r7, #32]
 800fcb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fcb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcba:	685a      	ldr	r2, [r3, #4]
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	1ad2      	subs	r2, r2, r3
 800fcc0:	2308      	movs	r3, #8
 800fcc2:	005b      	lsls	r3, r3, #1
 800fcc4:	429a      	cmp	r2, r3
 800fcc6:	d91f      	bls.n	800fd08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fcc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	4413      	add	r3, r2
 800fcce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fcd0:	69bb      	ldr	r3, [r7, #24]
 800fcd2:	f003 0307 	and.w	r3, r3, #7
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d00a      	beq.n	800fcf0 <pvPortMalloc+0xf8>
	__asm volatile
 800fcda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcde:	f383 8811 	msr	BASEPRI, r3
 800fce2:	f3bf 8f6f 	isb	sy
 800fce6:	f3bf 8f4f 	dsb	sy
 800fcea:	613b      	str	r3, [r7, #16]
}
 800fcec:	bf00      	nop
 800fcee:	e7fe      	b.n	800fcee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fcf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcf2:	685a      	ldr	r2, [r3, #4]
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	1ad2      	subs	r2, r2, r3
 800fcf8:	69bb      	ldr	r3, [r7, #24]
 800fcfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fcfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcfe:	687a      	ldr	r2, [r7, #4]
 800fd00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fd02:	69b8      	ldr	r0, [r7, #24]
 800fd04:	f000 f908 	bl	800ff18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fd08:	4b1d      	ldr	r3, [pc, #116]	; (800fd80 <pvPortMalloc+0x188>)
 800fd0a:	681a      	ldr	r2, [r3, #0]
 800fd0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd0e:	685b      	ldr	r3, [r3, #4]
 800fd10:	1ad3      	subs	r3, r2, r3
 800fd12:	4a1b      	ldr	r2, [pc, #108]	; (800fd80 <pvPortMalloc+0x188>)
 800fd14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fd16:	4b1a      	ldr	r3, [pc, #104]	; (800fd80 <pvPortMalloc+0x188>)
 800fd18:	681a      	ldr	r2, [r3, #0]
 800fd1a:	4b1b      	ldr	r3, [pc, #108]	; (800fd88 <pvPortMalloc+0x190>)
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	429a      	cmp	r2, r3
 800fd20:	d203      	bcs.n	800fd2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fd22:	4b17      	ldr	r3, [pc, #92]	; (800fd80 <pvPortMalloc+0x188>)
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	4a18      	ldr	r2, [pc, #96]	; (800fd88 <pvPortMalloc+0x190>)
 800fd28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd2c:	685a      	ldr	r2, [r3, #4]
 800fd2e:	4b13      	ldr	r3, [pc, #76]	; (800fd7c <pvPortMalloc+0x184>)
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	431a      	orrs	r2, r3
 800fd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fd38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fd3e:	4b13      	ldr	r3, [pc, #76]	; (800fd8c <pvPortMalloc+0x194>)
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	3301      	adds	r3, #1
 800fd44:	4a11      	ldr	r2, [pc, #68]	; (800fd8c <pvPortMalloc+0x194>)
 800fd46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fd48:	f7fe fcfa 	bl	800e740 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fd4c:	69fb      	ldr	r3, [r7, #28]
 800fd4e:	f003 0307 	and.w	r3, r3, #7
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d00a      	beq.n	800fd6c <pvPortMalloc+0x174>
	__asm volatile
 800fd56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd5a:	f383 8811 	msr	BASEPRI, r3
 800fd5e:	f3bf 8f6f 	isb	sy
 800fd62:	f3bf 8f4f 	dsb	sy
 800fd66:	60fb      	str	r3, [r7, #12]
}
 800fd68:	bf00      	nop
 800fd6a:	e7fe      	b.n	800fd6a <pvPortMalloc+0x172>
	return pvReturn;
 800fd6c:	69fb      	ldr	r3, [r7, #28]
}
 800fd6e:	4618      	mov	r0, r3
 800fd70:	3728      	adds	r7, #40	; 0x28
 800fd72:	46bd      	mov	sp, r7
 800fd74:	bd80      	pop	{r7, pc}
 800fd76:	bf00      	nop
 800fd78:	20007fc0 	.word	0x20007fc0
 800fd7c:	20007fd4 	.word	0x20007fd4
 800fd80:	20007fc4 	.word	0x20007fc4
 800fd84:	20007fb8 	.word	0x20007fb8
 800fd88:	20007fc8 	.word	0x20007fc8
 800fd8c:	20007fcc 	.word	0x20007fcc

0800fd90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fd90:	b580      	push	{r7, lr}
 800fd92:	b086      	sub	sp, #24
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d04d      	beq.n	800fe3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fda2:	2308      	movs	r3, #8
 800fda4:	425b      	negs	r3, r3
 800fda6:	697a      	ldr	r2, [r7, #20]
 800fda8:	4413      	add	r3, r2
 800fdaa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fdac:	697b      	ldr	r3, [r7, #20]
 800fdae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fdb0:	693b      	ldr	r3, [r7, #16]
 800fdb2:	685a      	ldr	r2, [r3, #4]
 800fdb4:	4b24      	ldr	r3, [pc, #144]	; (800fe48 <vPortFree+0xb8>)
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	4013      	ands	r3, r2
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d10a      	bne.n	800fdd4 <vPortFree+0x44>
	__asm volatile
 800fdbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdc2:	f383 8811 	msr	BASEPRI, r3
 800fdc6:	f3bf 8f6f 	isb	sy
 800fdca:	f3bf 8f4f 	dsb	sy
 800fdce:	60fb      	str	r3, [r7, #12]
}
 800fdd0:	bf00      	nop
 800fdd2:	e7fe      	b.n	800fdd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fdd4:	693b      	ldr	r3, [r7, #16]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d00a      	beq.n	800fdf2 <vPortFree+0x62>
	__asm volatile
 800fddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fde0:	f383 8811 	msr	BASEPRI, r3
 800fde4:	f3bf 8f6f 	isb	sy
 800fde8:	f3bf 8f4f 	dsb	sy
 800fdec:	60bb      	str	r3, [r7, #8]
}
 800fdee:	bf00      	nop
 800fdf0:	e7fe      	b.n	800fdf0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fdf2:	693b      	ldr	r3, [r7, #16]
 800fdf4:	685a      	ldr	r2, [r3, #4]
 800fdf6:	4b14      	ldr	r3, [pc, #80]	; (800fe48 <vPortFree+0xb8>)
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	4013      	ands	r3, r2
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d01e      	beq.n	800fe3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fe00:	693b      	ldr	r3, [r7, #16]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d11a      	bne.n	800fe3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fe08:	693b      	ldr	r3, [r7, #16]
 800fe0a:	685a      	ldr	r2, [r3, #4]
 800fe0c:	4b0e      	ldr	r3, [pc, #56]	; (800fe48 <vPortFree+0xb8>)
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	43db      	mvns	r3, r3
 800fe12:	401a      	ands	r2, r3
 800fe14:	693b      	ldr	r3, [r7, #16]
 800fe16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fe18:	f7fe fc84 	bl	800e724 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fe1c:	693b      	ldr	r3, [r7, #16]
 800fe1e:	685a      	ldr	r2, [r3, #4]
 800fe20:	4b0a      	ldr	r3, [pc, #40]	; (800fe4c <vPortFree+0xbc>)
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	4413      	add	r3, r2
 800fe26:	4a09      	ldr	r2, [pc, #36]	; (800fe4c <vPortFree+0xbc>)
 800fe28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fe2a:	6938      	ldr	r0, [r7, #16]
 800fe2c:	f000 f874 	bl	800ff18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fe30:	4b07      	ldr	r3, [pc, #28]	; (800fe50 <vPortFree+0xc0>)
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	3301      	adds	r3, #1
 800fe36:	4a06      	ldr	r2, [pc, #24]	; (800fe50 <vPortFree+0xc0>)
 800fe38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fe3a:	f7fe fc81 	bl	800e740 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fe3e:	bf00      	nop
 800fe40:	3718      	adds	r7, #24
 800fe42:	46bd      	mov	sp, r7
 800fe44:	bd80      	pop	{r7, pc}
 800fe46:	bf00      	nop
 800fe48:	20007fd4 	.word	0x20007fd4
 800fe4c:	20007fc4 	.word	0x20007fc4
 800fe50:	20007fd0 	.word	0x20007fd0

0800fe54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fe54:	b480      	push	{r7}
 800fe56:	b085      	sub	sp, #20
 800fe58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fe5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800fe5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fe60:	4b27      	ldr	r3, [pc, #156]	; (800ff00 <prvHeapInit+0xac>)
 800fe62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	f003 0307 	and.w	r3, r3, #7
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d00c      	beq.n	800fe88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	3307      	adds	r3, #7
 800fe72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	f023 0307 	bic.w	r3, r3, #7
 800fe7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fe7c:	68ba      	ldr	r2, [r7, #8]
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	1ad3      	subs	r3, r2, r3
 800fe82:	4a1f      	ldr	r2, [pc, #124]	; (800ff00 <prvHeapInit+0xac>)
 800fe84:	4413      	add	r3, r2
 800fe86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fe8c:	4a1d      	ldr	r2, [pc, #116]	; (800ff04 <prvHeapInit+0xb0>)
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fe92:	4b1c      	ldr	r3, [pc, #112]	; (800ff04 <prvHeapInit+0xb0>)
 800fe94:	2200      	movs	r2, #0
 800fe96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	68ba      	ldr	r2, [r7, #8]
 800fe9c:	4413      	add	r3, r2
 800fe9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fea0:	2208      	movs	r2, #8
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	1a9b      	subs	r3, r3, r2
 800fea6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	f023 0307 	bic.w	r3, r3, #7
 800feae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	4a15      	ldr	r2, [pc, #84]	; (800ff08 <prvHeapInit+0xb4>)
 800feb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800feb6:	4b14      	ldr	r3, [pc, #80]	; (800ff08 <prvHeapInit+0xb4>)
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	2200      	movs	r2, #0
 800febc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800febe:	4b12      	ldr	r3, [pc, #72]	; (800ff08 <prvHeapInit+0xb4>)
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	2200      	movs	r2, #0
 800fec4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800feca:	683b      	ldr	r3, [r7, #0]
 800fecc:	68fa      	ldr	r2, [r7, #12]
 800fece:	1ad2      	subs	r2, r2, r3
 800fed0:	683b      	ldr	r3, [r7, #0]
 800fed2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fed4:	4b0c      	ldr	r3, [pc, #48]	; (800ff08 <prvHeapInit+0xb4>)
 800fed6:	681a      	ldr	r2, [r3, #0]
 800fed8:	683b      	ldr	r3, [r7, #0]
 800feda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fedc:	683b      	ldr	r3, [r7, #0]
 800fede:	685b      	ldr	r3, [r3, #4]
 800fee0:	4a0a      	ldr	r2, [pc, #40]	; (800ff0c <prvHeapInit+0xb8>)
 800fee2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fee4:	683b      	ldr	r3, [r7, #0]
 800fee6:	685b      	ldr	r3, [r3, #4]
 800fee8:	4a09      	ldr	r2, [pc, #36]	; (800ff10 <prvHeapInit+0xbc>)
 800feea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800feec:	4b09      	ldr	r3, [pc, #36]	; (800ff14 <prvHeapInit+0xc0>)
 800feee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fef2:	601a      	str	r2, [r3, #0]
}
 800fef4:	bf00      	nop
 800fef6:	3714      	adds	r7, #20
 800fef8:	46bd      	mov	sp, r7
 800fefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefe:	4770      	bx	lr
 800ff00:	200043b8 	.word	0x200043b8
 800ff04:	20007fb8 	.word	0x20007fb8
 800ff08:	20007fc0 	.word	0x20007fc0
 800ff0c:	20007fc8 	.word	0x20007fc8
 800ff10:	20007fc4 	.word	0x20007fc4
 800ff14:	20007fd4 	.word	0x20007fd4

0800ff18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ff18:	b480      	push	{r7}
 800ff1a:	b085      	sub	sp, #20
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ff20:	4b28      	ldr	r3, [pc, #160]	; (800ffc4 <prvInsertBlockIntoFreeList+0xac>)
 800ff22:	60fb      	str	r3, [r7, #12]
 800ff24:	e002      	b.n	800ff2c <prvInsertBlockIntoFreeList+0x14>
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	60fb      	str	r3, [r7, #12]
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	687a      	ldr	r2, [r7, #4]
 800ff32:	429a      	cmp	r2, r3
 800ff34:	d8f7      	bhi.n	800ff26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	685b      	ldr	r3, [r3, #4]
 800ff3e:	68ba      	ldr	r2, [r7, #8]
 800ff40:	4413      	add	r3, r2
 800ff42:	687a      	ldr	r2, [r7, #4]
 800ff44:	429a      	cmp	r2, r3
 800ff46:	d108      	bne.n	800ff5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	685a      	ldr	r2, [r3, #4]
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	685b      	ldr	r3, [r3, #4]
 800ff50:	441a      	add	r2, r3
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	685b      	ldr	r3, [r3, #4]
 800ff62:	68ba      	ldr	r2, [r7, #8]
 800ff64:	441a      	add	r2, r3
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	429a      	cmp	r2, r3
 800ff6c:	d118      	bne.n	800ffa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	681a      	ldr	r2, [r3, #0]
 800ff72:	4b15      	ldr	r3, [pc, #84]	; (800ffc8 <prvInsertBlockIntoFreeList+0xb0>)
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	429a      	cmp	r2, r3
 800ff78:	d00d      	beq.n	800ff96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	685a      	ldr	r2, [r3, #4]
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	685b      	ldr	r3, [r3, #4]
 800ff84:	441a      	add	r2, r3
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	681a      	ldr	r2, [r3, #0]
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	601a      	str	r2, [r3, #0]
 800ff94:	e008      	b.n	800ffa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ff96:	4b0c      	ldr	r3, [pc, #48]	; (800ffc8 <prvInsertBlockIntoFreeList+0xb0>)
 800ff98:	681a      	ldr	r2, [r3, #0]
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	601a      	str	r2, [r3, #0]
 800ff9e:	e003      	b.n	800ffa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	681a      	ldr	r2, [r3, #0]
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ffa8:	68fa      	ldr	r2, [r7, #12]
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	429a      	cmp	r2, r3
 800ffae:	d002      	beq.n	800ffb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	687a      	ldr	r2, [r7, #4]
 800ffb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ffb6:	bf00      	nop
 800ffb8:	3714      	adds	r7, #20
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc0:	4770      	bx	lr
 800ffc2:	bf00      	nop
 800ffc4:	20007fb8 	.word	0x20007fb8
 800ffc8:	20007fc0 	.word	0x20007fc0

0800ffcc <pow>:
 800ffcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffce:	ed2d 8b02 	vpush	{d8}
 800ffd2:	eeb0 8a40 	vmov.f32	s16, s0
 800ffd6:	eef0 8a60 	vmov.f32	s17, s1
 800ffda:	ec55 4b11 	vmov	r4, r5, d1
 800ffde:	f000 fbaf 	bl	8010740 <__ieee754_pow>
 800ffe2:	4622      	mov	r2, r4
 800ffe4:	462b      	mov	r3, r5
 800ffe6:	4620      	mov	r0, r4
 800ffe8:	4629      	mov	r1, r5
 800ffea:	ec57 6b10 	vmov	r6, r7, d0
 800ffee:	f7f0 fdad 	bl	8000b4c <__aeabi_dcmpun>
 800fff2:	2800      	cmp	r0, #0
 800fff4:	d13b      	bne.n	801006e <pow+0xa2>
 800fff6:	ec51 0b18 	vmov	r0, r1, d8
 800fffa:	2200      	movs	r2, #0
 800fffc:	2300      	movs	r3, #0
 800fffe:	f7f0 fd73 	bl	8000ae8 <__aeabi_dcmpeq>
 8010002:	b1b8      	cbz	r0, 8010034 <pow+0x68>
 8010004:	2200      	movs	r2, #0
 8010006:	2300      	movs	r3, #0
 8010008:	4620      	mov	r0, r4
 801000a:	4629      	mov	r1, r5
 801000c:	f7f0 fd6c 	bl	8000ae8 <__aeabi_dcmpeq>
 8010010:	2800      	cmp	r0, #0
 8010012:	d146      	bne.n	80100a2 <pow+0xd6>
 8010014:	ec45 4b10 	vmov	d0, r4, r5
 8010018:	f000 f922 	bl	8010260 <finite>
 801001c:	b338      	cbz	r0, 801006e <pow+0xa2>
 801001e:	2200      	movs	r2, #0
 8010020:	2300      	movs	r3, #0
 8010022:	4620      	mov	r0, r4
 8010024:	4629      	mov	r1, r5
 8010026:	f7f0 fd69 	bl	8000afc <__aeabi_dcmplt>
 801002a:	b300      	cbz	r0, 801006e <pow+0xa2>
 801002c:	f002 feb2 	bl	8012d94 <__errno>
 8010030:	2322      	movs	r3, #34	; 0x22
 8010032:	e01b      	b.n	801006c <pow+0xa0>
 8010034:	ec47 6b10 	vmov	d0, r6, r7
 8010038:	f000 f912 	bl	8010260 <finite>
 801003c:	b9e0      	cbnz	r0, 8010078 <pow+0xac>
 801003e:	eeb0 0a48 	vmov.f32	s0, s16
 8010042:	eef0 0a68 	vmov.f32	s1, s17
 8010046:	f000 f90b 	bl	8010260 <finite>
 801004a:	b1a8      	cbz	r0, 8010078 <pow+0xac>
 801004c:	ec45 4b10 	vmov	d0, r4, r5
 8010050:	f000 f906 	bl	8010260 <finite>
 8010054:	b180      	cbz	r0, 8010078 <pow+0xac>
 8010056:	4632      	mov	r2, r6
 8010058:	463b      	mov	r3, r7
 801005a:	4630      	mov	r0, r6
 801005c:	4639      	mov	r1, r7
 801005e:	f7f0 fd75 	bl	8000b4c <__aeabi_dcmpun>
 8010062:	2800      	cmp	r0, #0
 8010064:	d0e2      	beq.n	801002c <pow+0x60>
 8010066:	f002 fe95 	bl	8012d94 <__errno>
 801006a:	2321      	movs	r3, #33	; 0x21
 801006c:	6003      	str	r3, [r0, #0]
 801006e:	ecbd 8b02 	vpop	{d8}
 8010072:	ec47 6b10 	vmov	d0, r6, r7
 8010076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010078:	2200      	movs	r2, #0
 801007a:	2300      	movs	r3, #0
 801007c:	4630      	mov	r0, r6
 801007e:	4639      	mov	r1, r7
 8010080:	f7f0 fd32 	bl	8000ae8 <__aeabi_dcmpeq>
 8010084:	2800      	cmp	r0, #0
 8010086:	d0f2      	beq.n	801006e <pow+0xa2>
 8010088:	eeb0 0a48 	vmov.f32	s0, s16
 801008c:	eef0 0a68 	vmov.f32	s1, s17
 8010090:	f000 f8e6 	bl	8010260 <finite>
 8010094:	2800      	cmp	r0, #0
 8010096:	d0ea      	beq.n	801006e <pow+0xa2>
 8010098:	ec45 4b10 	vmov	d0, r4, r5
 801009c:	f000 f8e0 	bl	8010260 <finite>
 80100a0:	e7c3      	b.n	801002a <pow+0x5e>
 80100a2:	4f01      	ldr	r7, [pc, #4]	; (80100a8 <pow+0xdc>)
 80100a4:	2600      	movs	r6, #0
 80100a6:	e7e2      	b.n	801006e <pow+0xa2>
 80100a8:	3ff00000 	.word	0x3ff00000

080100ac <sqrt>:
 80100ac:	b538      	push	{r3, r4, r5, lr}
 80100ae:	ed2d 8b02 	vpush	{d8}
 80100b2:	ec55 4b10 	vmov	r4, r5, d0
 80100b6:	f000 f8df 	bl	8010278 <__ieee754_sqrt>
 80100ba:	4622      	mov	r2, r4
 80100bc:	462b      	mov	r3, r5
 80100be:	4620      	mov	r0, r4
 80100c0:	4629      	mov	r1, r5
 80100c2:	eeb0 8a40 	vmov.f32	s16, s0
 80100c6:	eef0 8a60 	vmov.f32	s17, s1
 80100ca:	f7f0 fd3f 	bl	8000b4c <__aeabi_dcmpun>
 80100ce:	b990      	cbnz	r0, 80100f6 <sqrt+0x4a>
 80100d0:	2200      	movs	r2, #0
 80100d2:	2300      	movs	r3, #0
 80100d4:	4620      	mov	r0, r4
 80100d6:	4629      	mov	r1, r5
 80100d8:	f7f0 fd10 	bl	8000afc <__aeabi_dcmplt>
 80100dc:	b158      	cbz	r0, 80100f6 <sqrt+0x4a>
 80100de:	f002 fe59 	bl	8012d94 <__errno>
 80100e2:	2321      	movs	r3, #33	; 0x21
 80100e4:	6003      	str	r3, [r0, #0]
 80100e6:	2200      	movs	r2, #0
 80100e8:	2300      	movs	r3, #0
 80100ea:	4610      	mov	r0, r2
 80100ec:	4619      	mov	r1, r3
 80100ee:	f7f0 fbbd 	bl	800086c <__aeabi_ddiv>
 80100f2:	ec41 0b18 	vmov	d8, r0, r1
 80100f6:	eeb0 0a48 	vmov.f32	s0, s16
 80100fa:	eef0 0a68 	vmov.f32	s1, s17
 80100fe:	ecbd 8b02 	vpop	{d8}
 8010102:	bd38      	pop	{r3, r4, r5, pc}
 8010104:	0000      	movs	r0, r0
	...

08010108 <cos>:
 8010108:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801010a:	ec53 2b10 	vmov	r2, r3, d0
 801010e:	4826      	ldr	r0, [pc, #152]	; (80101a8 <cos+0xa0>)
 8010110:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010114:	4281      	cmp	r1, r0
 8010116:	dc06      	bgt.n	8010126 <cos+0x1e>
 8010118:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80101a0 <cos+0x98>
 801011c:	b005      	add	sp, #20
 801011e:	f85d eb04 	ldr.w	lr, [sp], #4
 8010122:	f000 b985 	b.w	8010430 <__kernel_cos>
 8010126:	4821      	ldr	r0, [pc, #132]	; (80101ac <cos+0xa4>)
 8010128:	4281      	cmp	r1, r0
 801012a:	dd09      	ble.n	8010140 <cos+0x38>
 801012c:	ee10 0a10 	vmov	r0, s0
 8010130:	4619      	mov	r1, r3
 8010132:	f7f0 f8b9 	bl	80002a8 <__aeabi_dsub>
 8010136:	ec41 0b10 	vmov	d0, r0, r1
 801013a:	b005      	add	sp, #20
 801013c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010140:	4668      	mov	r0, sp
 8010142:	f001 f829 	bl	8011198 <__ieee754_rem_pio2>
 8010146:	f000 0003 	and.w	r0, r0, #3
 801014a:	2801      	cmp	r0, #1
 801014c:	d00b      	beq.n	8010166 <cos+0x5e>
 801014e:	2802      	cmp	r0, #2
 8010150:	d016      	beq.n	8010180 <cos+0x78>
 8010152:	b9e0      	cbnz	r0, 801018e <cos+0x86>
 8010154:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010158:	ed9d 0b00 	vldr	d0, [sp]
 801015c:	f000 f968 	bl	8010430 <__kernel_cos>
 8010160:	ec51 0b10 	vmov	r0, r1, d0
 8010164:	e7e7      	b.n	8010136 <cos+0x2e>
 8010166:	ed9d 1b02 	vldr	d1, [sp, #8]
 801016a:	ed9d 0b00 	vldr	d0, [sp]
 801016e:	f000 fa27 	bl	80105c0 <__kernel_sin>
 8010172:	ec53 2b10 	vmov	r2, r3, d0
 8010176:	ee10 0a10 	vmov	r0, s0
 801017a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801017e:	e7da      	b.n	8010136 <cos+0x2e>
 8010180:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010184:	ed9d 0b00 	vldr	d0, [sp]
 8010188:	f000 f952 	bl	8010430 <__kernel_cos>
 801018c:	e7f1      	b.n	8010172 <cos+0x6a>
 801018e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010192:	ed9d 0b00 	vldr	d0, [sp]
 8010196:	2001      	movs	r0, #1
 8010198:	f000 fa12 	bl	80105c0 <__kernel_sin>
 801019c:	e7e0      	b.n	8010160 <cos+0x58>
 801019e:	bf00      	nop
	...
 80101a8:	3fe921fb 	.word	0x3fe921fb
 80101ac:	7fefffff 	.word	0x7fefffff

080101b0 <sin>:
 80101b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80101b2:	ec53 2b10 	vmov	r2, r3, d0
 80101b6:	4828      	ldr	r0, [pc, #160]	; (8010258 <sin+0xa8>)
 80101b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80101bc:	4281      	cmp	r1, r0
 80101be:	dc07      	bgt.n	80101d0 <sin+0x20>
 80101c0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8010250 <sin+0xa0>
 80101c4:	2000      	movs	r0, #0
 80101c6:	b005      	add	sp, #20
 80101c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80101cc:	f000 b9f8 	b.w	80105c0 <__kernel_sin>
 80101d0:	4822      	ldr	r0, [pc, #136]	; (801025c <sin+0xac>)
 80101d2:	4281      	cmp	r1, r0
 80101d4:	dd09      	ble.n	80101ea <sin+0x3a>
 80101d6:	ee10 0a10 	vmov	r0, s0
 80101da:	4619      	mov	r1, r3
 80101dc:	f7f0 f864 	bl	80002a8 <__aeabi_dsub>
 80101e0:	ec41 0b10 	vmov	d0, r0, r1
 80101e4:	b005      	add	sp, #20
 80101e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80101ea:	4668      	mov	r0, sp
 80101ec:	f000 ffd4 	bl	8011198 <__ieee754_rem_pio2>
 80101f0:	f000 0003 	and.w	r0, r0, #3
 80101f4:	2801      	cmp	r0, #1
 80101f6:	d00c      	beq.n	8010212 <sin+0x62>
 80101f8:	2802      	cmp	r0, #2
 80101fa:	d011      	beq.n	8010220 <sin+0x70>
 80101fc:	b9f0      	cbnz	r0, 801023c <sin+0x8c>
 80101fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010202:	ed9d 0b00 	vldr	d0, [sp]
 8010206:	2001      	movs	r0, #1
 8010208:	f000 f9da 	bl	80105c0 <__kernel_sin>
 801020c:	ec51 0b10 	vmov	r0, r1, d0
 8010210:	e7e6      	b.n	80101e0 <sin+0x30>
 8010212:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010216:	ed9d 0b00 	vldr	d0, [sp]
 801021a:	f000 f909 	bl	8010430 <__kernel_cos>
 801021e:	e7f5      	b.n	801020c <sin+0x5c>
 8010220:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010224:	ed9d 0b00 	vldr	d0, [sp]
 8010228:	2001      	movs	r0, #1
 801022a:	f000 f9c9 	bl	80105c0 <__kernel_sin>
 801022e:	ec53 2b10 	vmov	r2, r3, d0
 8010232:	ee10 0a10 	vmov	r0, s0
 8010236:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801023a:	e7d1      	b.n	80101e0 <sin+0x30>
 801023c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010240:	ed9d 0b00 	vldr	d0, [sp]
 8010244:	f000 f8f4 	bl	8010430 <__kernel_cos>
 8010248:	e7f1      	b.n	801022e <sin+0x7e>
 801024a:	bf00      	nop
 801024c:	f3af 8000 	nop.w
	...
 8010258:	3fe921fb 	.word	0x3fe921fb
 801025c:	7fefffff 	.word	0x7fefffff

08010260 <finite>:
 8010260:	b082      	sub	sp, #8
 8010262:	ed8d 0b00 	vstr	d0, [sp]
 8010266:	9801      	ldr	r0, [sp, #4]
 8010268:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801026c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8010270:	0fc0      	lsrs	r0, r0, #31
 8010272:	b002      	add	sp, #8
 8010274:	4770      	bx	lr
	...

08010278 <__ieee754_sqrt>:
 8010278:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801027c:	ec55 4b10 	vmov	r4, r5, d0
 8010280:	4e67      	ldr	r6, [pc, #412]	; (8010420 <__ieee754_sqrt+0x1a8>)
 8010282:	43ae      	bics	r6, r5
 8010284:	ee10 0a10 	vmov	r0, s0
 8010288:	ee10 2a10 	vmov	r2, s0
 801028c:	4629      	mov	r1, r5
 801028e:	462b      	mov	r3, r5
 8010290:	d10d      	bne.n	80102ae <__ieee754_sqrt+0x36>
 8010292:	f7f0 f9c1 	bl	8000618 <__aeabi_dmul>
 8010296:	4602      	mov	r2, r0
 8010298:	460b      	mov	r3, r1
 801029a:	4620      	mov	r0, r4
 801029c:	4629      	mov	r1, r5
 801029e:	f7f0 f805 	bl	80002ac <__adddf3>
 80102a2:	4604      	mov	r4, r0
 80102a4:	460d      	mov	r5, r1
 80102a6:	ec45 4b10 	vmov	d0, r4, r5
 80102aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102ae:	2d00      	cmp	r5, #0
 80102b0:	dc0b      	bgt.n	80102ca <__ieee754_sqrt+0x52>
 80102b2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80102b6:	4326      	orrs	r6, r4
 80102b8:	d0f5      	beq.n	80102a6 <__ieee754_sqrt+0x2e>
 80102ba:	b135      	cbz	r5, 80102ca <__ieee754_sqrt+0x52>
 80102bc:	f7ef fff4 	bl	80002a8 <__aeabi_dsub>
 80102c0:	4602      	mov	r2, r0
 80102c2:	460b      	mov	r3, r1
 80102c4:	f7f0 fad2 	bl	800086c <__aeabi_ddiv>
 80102c8:	e7eb      	b.n	80102a2 <__ieee754_sqrt+0x2a>
 80102ca:	1509      	asrs	r1, r1, #20
 80102cc:	f000 808d 	beq.w	80103ea <__ieee754_sqrt+0x172>
 80102d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80102d4:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80102d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80102dc:	07c9      	lsls	r1, r1, #31
 80102de:	bf5c      	itt	pl
 80102e0:	005b      	lslpl	r3, r3, #1
 80102e2:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80102e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80102ea:	bf58      	it	pl
 80102ec:	0052      	lslpl	r2, r2, #1
 80102ee:	2500      	movs	r5, #0
 80102f0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80102f4:	1076      	asrs	r6, r6, #1
 80102f6:	0052      	lsls	r2, r2, #1
 80102f8:	f04f 0e16 	mov.w	lr, #22
 80102fc:	46ac      	mov	ip, r5
 80102fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010302:	eb0c 0001 	add.w	r0, ip, r1
 8010306:	4298      	cmp	r0, r3
 8010308:	bfde      	ittt	le
 801030a:	1a1b      	suble	r3, r3, r0
 801030c:	eb00 0c01 	addle.w	ip, r0, r1
 8010310:	186d      	addle	r5, r5, r1
 8010312:	005b      	lsls	r3, r3, #1
 8010314:	f1be 0e01 	subs.w	lr, lr, #1
 8010318:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801031c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8010320:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8010324:	d1ed      	bne.n	8010302 <__ieee754_sqrt+0x8a>
 8010326:	4674      	mov	r4, lr
 8010328:	2720      	movs	r7, #32
 801032a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801032e:	4563      	cmp	r3, ip
 8010330:	eb01 000e 	add.w	r0, r1, lr
 8010334:	dc02      	bgt.n	801033c <__ieee754_sqrt+0xc4>
 8010336:	d113      	bne.n	8010360 <__ieee754_sqrt+0xe8>
 8010338:	4290      	cmp	r0, r2
 801033a:	d811      	bhi.n	8010360 <__ieee754_sqrt+0xe8>
 801033c:	2800      	cmp	r0, #0
 801033e:	eb00 0e01 	add.w	lr, r0, r1
 8010342:	da57      	bge.n	80103f4 <__ieee754_sqrt+0x17c>
 8010344:	f1be 0f00 	cmp.w	lr, #0
 8010348:	db54      	blt.n	80103f4 <__ieee754_sqrt+0x17c>
 801034a:	f10c 0801 	add.w	r8, ip, #1
 801034e:	eba3 030c 	sub.w	r3, r3, ip
 8010352:	4290      	cmp	r0, r2
 8010354:	bf88      	it	hi
 8010356:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801035a:	1a12      	subs	r2, r2, r0
 801035c:	440c      	add	r4, r1
 801035e:	46c4      	mov	ip, r8
 8010360:	005b      	lsls	r3, r3, #1
 8010362:	3f01      	subs	r7, #1
 8010364:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8010368:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801036c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8010370:	d1dd      	bne.n	801032e <__ieee754_sqrt+0xb6>
 8010372:	4313      	orrs	r3, r2
 8010374:	d01b      	beq.n	80103ae <__ieee754_sqrt+0x136>
 8010376:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8010424 <__ieee754_sqrt+0x1ac>
 801037a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8010428 <__ieee754_sqrt+0x1b0>
 801037e:	e9da 0100 	ldrd	r0, r1, [sl]
 8010382:	e9db 2300 	ldrd	r2, r3, [fp]
 8010386:	f7ef ff8f 	bl	80002a8 <__aeabi_dsub>
 801038a:	e9da 8900 	ldrd	r8, r9, [sl]
 801038e:	4602      	mov	r2, r0
 8010390:	460b      	mov	r3, r1
 8010392:	4640      	mov	r0, r8
 8010394:	4649      	mov	r1, r9
 8010396:	f7f0 fbbb 	bl	8000b10 <__aeabi_dcmple>
 801039a:	b140      	cbz	r0, 80103ae <__ieee754_sqrt+0x136>
 801039c:	f1b4 3fff 	cmp.w	r4, #4294967295
 80103a0:	e9da 0100 	ldrd	r0, r1, [sl]
 80103a4:	e9db 2300 	ldrd	r2, r3, [fp]
 80103a8:	d126      	bne.n	80103f8 <__ieee754_sqrt+0x180>
 80103aa:	3501      	adds	r5, #1
 80103ac:	463c      	mov	r4, r7
 80103ae:	106a      	asrs	r2, r5, #1
 80103b0:	0863      	lsrs	r3, r4, #1
 80103b2:	07e9      	lsls	r1, r5, #31
 80103b4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80103b8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80103bc:	bf48      	it	mi
 80103be:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80103c2:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80103c6:	461c      	mov	r4, r3
 80103c8:	e76d      	b.n	80102a6 <__ieee754_sqrt+0x2e>
 80103ca:	0ad3      	lsrs	r3, r2, #11
 80103cc:	3815      	subs	r0, #21
 80103ce:	0552      	lsls	r2, r2, #21
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d0fa      	beq.n	80103ca <__ieee754_sqrt+0x152>
 80103d4:	02dc      	lsls	r4, r3, #11
 80103d6:	d50a      	bpl.n	80103ee <__ieee754_sqrt+0x176>
 80103d8:	f1c1 0420 	rsb	r4, r1, #32
 80103dc:	fa22 f404 	lsr.w	r4, r2, r4
 80103e0:	1e4d      	subs	r5, r1, #1
 80103e2:	408a      	lsls	r2, r1
 80103e4:	4323      	orrs	r3, r4
 80103e6:	1b41      	subs	r1, r0, r5
 80103e8:	e772      	b.n	80102d0 <__ieee754_sqrt+0x58>
 80103ea:	4608      	mov	r0, r1
 80103ec:	e7f0      	b.n	80103d0 <__ieee754_sqrt+0x158>
 80103ee:	005b      	lsls	r3, r3, #1
 80103f0:	3101      	adds	r1, #1
 80103f2:	e7ef      	b.n	80103d4 <__ieee754_sqrt+0x15c>
 80103f4:	46e0      	mov	r8, ip
 80103f6:	e7aa      	b.n	801034e <__ieee754_sqrt+0xd6>
 80103f8:	f7ef ff58 	bl	80002ac <__adddf3>
 80103fc:	e9da 8900 	ldrd	r8, r9, [sl]
 8010400:	4602      	mov	r2, r0
 8010402:	460b      	mov	r3, r1
 8010404:	4640      	mov	r0, r8
 8010406:	4649      	mov	r1, r9
 8010408:	f7f0 fb78 	bl	8000afc <__aeabi_dcmplt>
 801040c:	b120      	cbz	r0, 8010418 <__ieee754_sqrt+0x1a0>
 801040e:	1ca0      	adds	r0, r4, #2
 8010410:	bf08      	it	eq
 8010412:	3501      	addeq	r5, #1
 8010414:	3402      	adds	r4, #2
 8010416:	e7ca      	b.n	80103ae <__ieee754_sqrt+0x136>
 8010418:	3401      	adds	r4, #1
 801041a:	f024 0401 	bic.w	r4, r4, #1
 801041e:	e7c6      	b.n	80103ae <__ieee754_sqrt+0x136>
 8010420:	7ff00000 	.word	0x7ff00000
 8010424:	20000020 	.word	0x20000020
 8010428:	20000028 	.word	0x20000028
 801042c:	00000000 	.word	0x00000000

08010430 <__kernel_cos>:
 8010430:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010434:	ec57 6b10 	vmov	r6, r7, d0
 8010438:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801043c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8010440:	ed8d 1b00 	vstr	d1, [sp]
 8010444:	da07      	bge.n	8010456 <__kernel_cos+0x26>
 8010446:	ee10 0a10 	vmov	r0, s0
 801044a:	4639      	mov	r1, r7
 801044c:	f7f0 fb94 	bl	8000b78 <__aeabi_d2iz>
 8010450:	2800      	cmp	r0, #0
 8010452:	f000 8088 	beq.w	8010566 <__kernel_cos+0x136>
 8010456:	4632      	mov	r2, r6
 8010458:	463b      	mov	r3, r7
 801045a:	4630      	mov	r0, r6
 801045c:	4639      	mov	r1, r7
 801045e:	f7f0 f8db 	bl	8000618 <__aeabi_dmul>
 8010462:	4b51      	ldr	r3, [pc, #324]	; (80105a8 <__kernel_cos+0x178>)
 8010464:	2200      	movs	r2, #0
 8010466:	4604      	mov	r4, r0
 8010468:	460d      	mov	r5, r1
 801046a:	f7f0 f8d5 	bl	8000618 <__aeabi_dmul>
 801046e:	a340      	add	r3, pc, #256	; (adr r3, 8010570 <__kernel_cos+0x140>)
 8010470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010474:	4682      	mov	sl, r0
 8010476:	468b      	mov	fp, r1
 8010478:	4620      	mov	r0, r4
 801047a:	4629      	mov	r1, r5
 801047c:	f7f0 f8cc 	bl	8000618 <__aeabi_dmul>
 8010480:	a33d      	add	r3, pc, #244	; (adr r3, 8010578 <__kernel_cos+0x148>)
 8010482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010486:	f7ef ff11 	bl	80002ac <__adddf3>
 801048a:	4622      	mov	r2, r4
 801048c:	462b      	mov	r3, r5
 801048e:	f7f0 f8c3 	bl	8000618 <__aeabi_dmul>
 8010492:	a33b      	add	r3, pc, #236	; (adr r3, 8010580 <__kernel_cos+0x150>)
 8010494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010498:	f7ef ff06 	bl	80002a8 <__aeabi_dsub>
 801049c:	4622      	mov	r2, r4
 801049e:	462b      	mov	r3, r5
 80104a0:	f7f0 f8ba 	bl	8000618 <__aeabi_dmul>
 80104a4:	a338      	add	r3, pc, #224	; (adr r3, 8010588 <__kernel_cos+0x158>)
 80104a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104aa:	f7ef feff 	bl	80002ac <__adddf3>
 80104ae:	4622      	mov	r2, r4
 80104b0:	462b      	mov	r3, r5
 80104b2:	f7f0 f8b1 	bl	8000618 <__aeabi_dmul>
 80104b6:	a336      	add	r3, pc, #216	; (adr r3, 8010590 <__kernel_cos+0x160>)
 80104b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104bc:	f7ef fef4 	bl	80002a8 <__aeabi_dsub>
 80104c0:	4622      	mov	r2, r4
 80104c2:	462b      	mov	r3, r5
 80104c4:	f7f0 f8a8 	bl	8000618 <__aeabi_dmul>
 80104c8:	a333      	add	r3, pc, #204	; (adr r3, 8010598 <__kernel_cos+0x168>)
 80104ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ce:	f7ef feed 	bl	80002ac <__adddf3>
 80104d2:	4622      	mov	r2, r4
 80104d4:	462b      	mov	r3, r5
 80104d6:	f7f0 f89f 	bl	8000618 <__aeabi_dmul>
 80104da:	4622      	mov	r2, r4
 80104dc:	462b      	mov	r3, r5
 80104de:	f7f0 f89b 	bl	8000618 <__aeabi_dmul>
 80104e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80104e6:	4604      	mov	r4, r0
 80104e8:	460d      	mov	r5, r1
 80104ea:	4630      	mov	r0, r6
 80104ec:	4639      	mov	r1, r7
 80104ee:	f7f0 f893 	bl	8000618 <__aeabi_dmul>
 80104f2:	460b      	mov	r3, r1
 80104f4:	4602      	mov	r2, r0
 80104f6:	4629      	mov	r1, r5
 80104f8:	4620      	mov	r0, r4
 80104fa:	f7ef fed5 	bl	80002a8 <__aeabi_dsub>
 80104fe:	4b2b      	ldr	r3, [pc, #172]	; (80105ac <__kernel_cos+0x17c>)
 8010500:	4598      	cmp	r8, r3
 8010502:	4606      	mov	r6, r0
 8010504:	460f      	mov	r7, r1
 8010506:	dc10      	bgt.n	801052a <__kernel_cos+0xfa>
 8010508:	4602      	mov	r2, r0
 801050a:	460b      	mov	r3, r1
 801050c:	4650      	mov	r0, sl
 801050e:	4659      	mov	r1, fp
 8010510:	f7ef feca 	bl	80002a8 <__aeabi_dsub>
 8010514:	460b      	mov	r3, r1
 8010516:	4926      	ldr	r1, [pc, #152]	; (80105b0 <__kernel_cos+0x180>)
 8010518:	4602      	mov	r2, r0
 801051a:	2000      	movs	r0, #0
 801051c:	f7ef fec4 	bl	80002a8 <__aeabi_dsub>
 8010520:	ec41 0b10 	vmov	d0, r0, r1
 8010524:	b003      	add	sp, #12
 8010526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801052a:	4b22      	ldr	r3, [pc, #136]	; (80105b4 <__kernel_cos+0x184>)
 801052c:	4920      	ldr	r1, [pc, #128]	; (80105b0 <__kernel_cos+0x180>)
 801052e:	4598      	cmp	r8, r3
 8010530:	bfcc      	ite	gt
 8010532:	4d21      	ldrgt	r5, [pc, #132]	; (80105b8 <__kernel_cos+0x188>)
 8010534:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8010538:	2400      	movs	r4, #0
 801053a:	4622      	mov	r2, r4
 801053c:	462b      	mov	r3, r5
 801053e:	2000      	movs	r0, #0
 8010540:	f7ef feb2 	bl	80002a8 <__aeabi_dsub>
 8010544:	4622      	mov	r2, r4
 8010546:	4680      	mov	r8, r0
 8010548:	4689      	mov	r9, r1
 801054a:	462b      	mov	r3, r5
 801054c:	4650      	mov	r0, sl
 801054e:	4659      	mov	r1, fp
 8010550:	f7ef feaa 	bl	80002a8 <__aeabi_dsub>
 8010554:	4632      	mov	r2, r6
 8010556:	463b      	mov	r3, r7
 8010558:	f7ef fea6 	bl	80002a8 <__aeabi_dsub>
 801055c:	4602      	mov	r2, r0
 801055e:	460b      	mov	r3, r1
 8010560:	4640      	mov	r0, r8
 8010562:	4649      	mov	r1, r9
 8010564:	e7da      	b.n	801051c <__kernel_cos+0xec>
 8010566:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80105a0 <__kernel_cos+0x170>
 801056a:	e7db      	b.n	8010524 <__kernel_cos+0xf4>
 801056c:	f3af 8000 	nop.w
 8010570:	be8838d4 	.word	0xbe8838d4
 8010574:	bda8fae9 	.word	0xbda8fae9
 8010578:	bdb4b1c4 	.word	0xbdb4b1c4
 801057c:	3e21ee9e 	.word	0x3e21ee9e
 8010580:	809c52ad 	.word	0x809c52ad
 8010584:	3e927e4f 	.word	0x3e927e4f
 8010588:	19cb1590 	.word	0x19cb1590
 801058c:	3efa01a0 	.word	0x3efa01a0
 8010590:	16c15177 	.word	0x16c15177
 8010594:	3f56c16c 	.word	0x3f56c16c
 8010598:	5555554c 	.word	0x5555554c
 801059c:	3fa55555 	.word	0x3fa55555
 80105a0:	00000000 	.word	0x00000000
 80105a4:	3ff00000 	.word	0x3ff00000
 80105a8:	3fe00000 	.word	0x3fe00000
 80105ac:	3fd33332 	.word	0x3fd33332
 80105b0:	3ff00000 	.word	0x3ff00000
 80105b4:	3fe90000 	.word	0x3fe90000
 80105b8:	3fd20000 	.word	0x3fd20000
 80105bc:	00000000 	.word	0x00000000

080105c0 <__kernel_sin>:
 80105c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105c4:	ed2d 8b04 	vpush	{d8-d9}
 80105c8:	eeb0 8a41 	vmov.f32	s16, s2
 80105cc:	eef0 8a61 	vmov.f32	s17, s3
 80105d0:	ec55 4b10 	vmov	r4, r5, d0
 80105d4:	b083      	sub	sp, #12
 80105d6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80105da:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80105de:	9001      	str	r0, [sp, #4]
 80105e0:	da06      	bge.n	80105f0 <__kernel_sin+0x30>
 80105e2:	ee10 0a10 	vmov	r0, s0
 80105e6:	4629      	mov	r1, r5
 80105e8:	f7f0 fac6 	bl	8000b78 <__aeabi_d2iz>
 80105ec:	2800      	cmp	r0, #0
 80105ee:	d051      	beq.n	8010694 <__kernel_sin+0xd4>
 80105f0:	4622      	mov	r2, r4
 80105f2:	462b      	mov	r3, r5
 80105f4:	4620      	mov	r0, r4
 80105f6:	4629      	mov	r1, r5
 80105f8:	f7f0 f80e 	bl	8000618 <__aeabi_dmul>
 80105fc:	4682      	mov	sl, r0
 80105fe:	468b      	mov	fp, r1
 8010600:	4602      	mov	r2, r0
 8010602:	460b      	mov	r3, r1
 8010604:	4620      	mov	r0, r4
 8010606:	4629      	mov	r1, r5
 8010608:	f7f0 f806 	bl	8000618 <__aeabi_dmul>
 801060c:	a341      	add	r3, pc, #260	; (adr r3, 8010714 <__kernel_sin+0x154>)
 801060e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010612:	4680      	mov	r8, r0
 8010614:	4689      	mov	r9, r1
 8010616:	4650      	mov	r0, sl
 8010618:	4659      	mov	r1, fp
 801061a:	f7ef fffd 	bl	8000618 <__aeabi_dmul>
 801061e:	a33f      	add	r3, pc, #252	; (adr r3, 801071c <__kernel_sin+0x15c>)
 8010620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010624:	f7ef fe40 	bl	80002a8 <__aeabi_dsub>
 8010628:	4652      	mov	r2, sl
 801062a:	465b      	mov	r3, fp
 801062c:	f7ef fff4 	bl	8000618 <__aeabi_dmul>
 8010630:	a33c      	add	r3, pc, #240	; (adr r3, 8010724 <__kernel_sin+0x164>)
 8010632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010636:	f7ef fe39 	bl	80002ac <__adddf3>
 801063a:	4652      	mov	r2, sl
 801063c:	465b      	mov	r3, fp
 801063e:	f7ef ffeb 	bl	8000618 <__aeabi_dmul>
 8010642:	a33a      	add	r3, pc, #232	; (adr r3, 801072c <__kernel_sin+0x16c>)
 8010644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010648:	f7ef fe2e 	bl	80002a8 <__aeabi_dsub>
 801064c:	4652      	mov	r2, sl
 801064e:	465b      	mov	r3, fp
 8010650:	f7ef ffe2 	bl	8000618 <__aeabi_dmul>
 8010654:	a337      	add	r3, pc, #220	; (adr r3, 8010734 <__kernel_sin+0x174>)
 8010656:	e9d3 2300 	ldrd	r2, r3, [r3]
 801065a:	f7ef fe27 	bl	80002ac <__adddf3>
 801065e:	9b01      	ldr	r3, [sp, #4]
 8010660:	4606      	mov	r6, r0
 8010662:	460f      	mov	r7, r1
 8010664:	b9eb      	cbnz	r3, 80106a2 <__kernel_sin+0xe2>
 8010666:	4602      	mov	r2, r0
 8010668:	460b      	mov	r3, r1
 801066a:	4650      	mov	r0, sl
 801066c:	4659      	mov	r1, fp
 801066e:	f7ef ffd3 	bl	8000618 <__aeabi_dmul>
 8010672:	a325      	add	r3, pc, #148	; (adr r3, 8010708 <__kernel_sin+0x148>)
 8010674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010678:	f7ef fe16 	bl	80002a8 <__aeabi_dsub>
 801067c:	4642      	mov	r2, r8
 801067e:	464b      	mov	r3, r9
 8010680:	f7ef ffca 	bl	8000618 <__aeabi_dmul>
 8010684:	4602      	mov	r2, r0
 8010686:	460b      	mov	r3, r1
 8010688:	4620      	mov	r0, r4
 801068a:	4629      	mov	r1, r5
 801068c:	f7ef fe0e 	bl	80002ac <__adddf3>
 8010690:	4604      	mov	r4, r0
 8010692:	460d      	mov	r5, r1
 8010694:	ec45 4b10 	vmov	d0, r4, r5
 8010698:	b003      	add	sp, #12
 801069a:	ecbd 8b04 	vpop	{d8-d9}
 801069e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106a2:	4b1b      	ldr	r3, [pc, #108]	; (8010710 <__kernel_sin+0x150>)
 80106a4:	ec51 0b18 	vmov	r0, r1, d8
 80106a8:	2200      	movs	r2, #0
 80106aa:	f7ef ffb5 	bl	8000618 <__aeabi_dmul>
 80106ae:	4632      	mov	r2, r6
 80106b0:	ec41 0b19 	vmov	d9, r0, r1
 80106b4:	463b      	mov	r3, r7
 80106b6:	4640      	mov	r0, r8
 80106b8:	4649      	mov	r1, r9
 80106ba:	f7ef ffad 	bl	8000618 <__aeabi_dmul>
 80106be:	4602      	mov	r2, r0
 80106c0:	460b      	mov	r3, r1
 80106c2:	ec51 0b19 	vmov	r0, r1, d9
 80106c6:	f7ef fdef 	bl	80002a8 <__aeabi_dsub>
 80106ca:	4652      	mov	r2, sl
 80106cc:	465b      	mov	r3, fp
 80106ce:	f7ef ffa3 	bl	8000618 <__aeabi_dmul>
 80106d2:	ec53 2b18 	vmov	r2, r3, d8
 80106d6:	f7ef fde7 	bl	80002a8 <__aeabi_dsub>
 80106da:	a30b      	add	r3, pc, #44	; (adr r3, 8010708 <__kernel_sin+0x148>)
 80106dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106e0:	4606      	mov	r6, r0
 80106e2:	460f      	mov	r7, r1
 80106e4:	4640      	mov	r0, r8
 80106e6:	4649      	mov	r1, r9
 80106e8:	f7ef ff96 	bl	8000618 <__aeabi_dmul>
 80106ec:	4602      	mov	r2, r0
 80106ee:	460b      	mov	r3, r1
 80106f0:	4630      	mov	r0, r6
 80106f2:	4639      	mov	r1, r7
 80106f4:	f7ef fdda 	bl	80002ac <__adddf3>
 80106f8:	4602      	mov	r2, r0
 80106fa:	460b      	mov	r3, r1
 80106fc:	4620      	mov	r0, r4
 80106fe:	4629      	mov	r1, r5
 8010700:	f7ef fdd2 	bl	80002a8 <__aeabi_dsub>
 8010704:	e7c4      	b.n	8010690 <__kernel_sin+0xd0>
 8010706:	bf00      	nop
 8010708:	55555549 	.word	0x55555549
 801070c:	3fc55555 	.word	0x3fc55555
 8010710:	3fe00000 	.word	0x3fe00000
 8010714:	5acfd57c 	.word	0x5acfd57c
 8010718:	3de5d93a 	.word	0x3de5d93a
 801071c:	8a2b9ceb 	.word	0x8a2b9ceb
 8010720:	3e5ae5e6 	.word	0x3e5ae5e6
 8010724:	57b1fe7d 	.word	0x57b1fe7d
 8010728:	3ec71de3 	.word	0x3ec71de3
 801072c:	19c161d5 	.word	0x19c161d5
 8010730:	3f2a01a0 	.word	0x3f2a01a0
 8010734:	1110f8a6 	.word	0x1110f8a6
 8010738:	3f811111 	.word	0x3f811111
 801073c:	00000000 	.word	0x00000000

08010740 <__ieee754_pow>:
 8010740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010744:	ed2d 8b06 	vpush	{d8-d10}
 8010748:	b089      	sub	sp, #36	; 0x24
 801074a:	ed8d 1b00 	vstr	d1, [sp]
 801074e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8010752:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8010756:	ea58 0102 	orrs.w	r1, r8, r2
 801075a:	ec57 6b10 	vmov	r6, r7, d0
 801075e:	d115      	bne.n	801078c <__ieee754_pow+0x4c>
 8010760:	19b3      	adds	r3, r6, r6
 8010762:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8010766:	4152      	adcs	r2, r2
 8010768:	4299      	cmp	r1, r3
 801076a:	4b89      	ldr	r3, [pc, #548]	; (8010990 <__ieee754_pow+0x250>)
 801076c:	4193      	sbcs	r3, r2
 801076e:	f080 84d1 	bcs.w	8011114 <__ieee754_pow+0x9d4>
 8010772:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010776:	4630      	mov	r0, r6
 8010778:	4639      	mov	r1, r7
 801077a:	f7ef fd97 	bl	80002ac <__adddf3>
 801077e:	ec41 0b10 	vmov	d0, r0, r1
 8010782:	b009      	add	sp, #36	; 0x24
 8010784:	ecbd 8b06 	vpop	{d8-d10}
 8010788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801078c:	4b81      	ldr	r3, [pc, #516]	; (8010994 <__ieee754_pow+0x254>)
 801078e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8010792:	429c      	cmp	r4, r3
 8010794:	ee10 aa10 	vmov	sl, s0
 8010798:	463d      	mov	r5, r7
 801079a:	dc06      	bgt.n	80107aa <__ieee754_pow+0x6a>
 801079c:	d101      	bne.n	80107a2 <__ieee754_pow+0x62>
 801079e:	2e00      	cmp	r6, #0
 80107a0:	d1e7      	bne.n	8010772 <__ieee754_pow+0x32>
 80107a2:	4598      	cmp	r8, r3
 80107a4:	dc01      	bgt.n	80107aa <__ieee754_pow+0x6a>
 80107a6:	d10f      	bne.n	80107c8 <__ieee754_pow+0x88>
 80107a8:	b172      	cbz	r2, 80107c8 <__ieee754_pow+0x88>
 80107aa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80107ae:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80107b2:	ea55 050a 	orrs.w	r5, r5, sl
 80107b6:	d1dc      	bne.n	8010772 <__ieee754_pow+0x32>
 80107b8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80107bc:	18db      	adds	r3, r3, r3
 80107be:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80107c2:	4152      	adcs	r2, r2
 80107c4:	429d      	cmp	r5, r3
 80107c6:	e7d0      	b.n	801076a <__ieee754_pow+0x2a>
 80107c8:	2d00      	cmp	r5, #0
 80107ca:	da3b      	bge.n	8010844 <__ieee754_pow+0x104>
 80107cc:	4b72      	ldr	r3, [pc, #456]	; (8010998 <__ieee754_pow+0x258>)
 80107ce:	4598      	cmp	r8, r3
 80107d0:	dc51      	bgt.n	8010876 <__ieee754_pow+0x136>
 80107d2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80107d6:	4598      	cmp	r8, r3
 80107d8:	f340 84ab 	ble.w	8011132 <__ieee754_pow+0x9f2>
 80107dc:	ea4f 5328 	mov.w	r3, r8, asr #20
 80107e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80107e4:	2b14      	cmp	r3, #20
 80107e6:	dd0f      	ble.n	8010808 <__ieee754_pow+0xc8>
 80107e8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80107ec:	fa22 f103 	lsr.w	r1, r2, r3
 80107f0:	fa01 f303 	lsl.w	r3, r1, r3
 80107f4:	4293      	cmp	r3, r2
 80107f6:	f040 849c 	bne.w	8011132 <__ieee754_pow+0x9f2>
 80107fa:	f001 0101 	and.w	r1, r1, #1
 80107fe:	f1c1 0302 	rsb	r3, r1, #2
 8010802:	9304      	str	r3, [sp, #16]
 8010804:	b182      	cbz	r2, 8010828 <__ieee754_pow+0xe8>
 8010806:	e05f      	b.n	80108c8 <__ieee754_pow+0x188>
 8010808:	2a00      	cmp	r2, #0
 801080a:	d15b      	bne.n	80108c4 <__ieee754_pow+0x184>
 801080c:	f1c3 0314 	rsb	r3, r3, #20
 8010810:	fa48 f103 	asr.w	r1, r8, r3
 8010814:	fa01 f303 	lsl.w	r3, r1, r3
 8010818:	4543      	cmp	r3, r8
 801081a:	f040 8487 	bne.w	801112c <__ieee754_pow+0x9ec>
 801081e:	f001 0101 	and.w	r1, r1, #1
 8010822:	f1c1 0302 	rsb	r3, r1, #2
 8010826:	9304      	str	r3, [sp, #16]
 8010828:	4b5c      	ldr	r3, [pc, #368]	; (801099c <__ieee754_pow+0x25c>)
 801082a:	4598      	cmp	r8, r3
 801082c:	d132      	bne.n	8010894 <__ieee754_pow+0x154>
 801082e:	f1b9 0f00 	cmp.w	r9, #0
 8010832:	f280 8477 	bge.w	8011124 <__ieee754_pow+0x9e4>
 8010836:	4959      	ldr	r1, [pc, #356]	; (801099c <__ieee754_pow+0x25c>)
 8010838:	4632      	mov	r2, r6
 801083a:	463b      	mov	r3, r7
 801083c:	2000      	movs	r0, #0
 801083e:	f7f0 f815 	bl	800086c <__aeabi_ddiv>
 8010842:	e79c      	b.n	801077e <__ieee754_pow+0x3e>
 8010844:	2300      	movs	r3, #0
 8010846:	9304      	str	r3, [sp, #16]
 8010848:	2a00      	cmp	r2, #0
 801084a:	d13d      	bne.n	80108c8 <__ieee754_pow+0x188>
 801084c:	4b51      	ldr	r3, [pc, #324]	; (8010994 <__ieee754_pow+0x254>)
 801084e:	4598      	cmp	r8, r3
 8010850:	d1ea      	bne.n	8010828 <__ieee754_pow+0xe8>
 8010852:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010856:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801085a:	ea53 030a 	orrs.w	r3, r3, sl
 801085e:	f000 8459 	beq.w	8011114 <__ieee754_pow+0x9d4>
 8010862:	4b4f      	ldr	r3, [pc, #316]	; (80109a0 <__ieee754_pow+0x260>)
 8010864:	429c      	cmp	r4, r3
 8010866:	dd08      	ble.n	801087a <__ieee754_pow+0x13a>
 8010868:	f1b9 0f00 	cmp.w	r9, #0
 801086c:	f2c0 8456 	blt.w	801111c <__ieee754_pow+0x9dc>
 8010870:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010874:	e783      	b.n	801077e <__ieee754_pow+0x3e>
 8010876:	2302      	movs	r3, #2
 8010878:	e7e5      	b.n	8010846 <__ieee754_pow+0x106>
 801087a:	f1b9 0f00 	cmp.w	r9, #0
 801087e:	f04f 0000 	mov.w	r0, #0
 8010882:	f04f 0100 	mov.w	r1, #0
 8010886:	f6bf af7a 	bge.w	801077e <__ieee754_pow+0x3e>
 801088a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801088e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010892:	e774      	b.n	801077e <__ieee754_pow+0x3e>
 8010894:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8010898:	d106      	bne.n	80108a8 <__ieee754_pow+0x168>
 801089a:	4632      	mov	r2, r6
 801089c:	463b      	mov	r3, r7
 801089e:	4630      	mov	r0, r6
 80108a0:	4639      	mov	r1, r7
 80108a2:	f7ef feb9 	bl	8000618 <__aeabi_dmul>
 80108a6:	e76a      	b.n	801077e <__ieee754_pow+0x3e>
 80108a8:	4b3e      	ldr	r3, [pc, #248]	; (80109a4 <__ieee754_pow+0x264>)
 80108aa:	4599      	cmp	r9, r3
 80108ac:	d10c      	bne.n	80108c8 <__ieee754_pow+0x188>
 80108ae:	2d00      	cmp	r5, #0
 80108b0:	db0a      	blt.n	80108c8 <__ieee754_pow+0x188>
 80108b2:	ec47 6b10 	vmov	d0, r6, r7
 80108b6:	b009      	add	sp, #36	; 0x24
 80108b8:	ecbd 8b06 	vpop	{d8-d10}
 80108bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108c0:	f7ff bcda 	b.w	8010278 <__ieee754_sqrt>
 80108c4:	2300      	movs	r3, #0
 80108c6:	9304      	str	r3, [sp, #16]
 80108c8:	ec47 6b10 	vmov	d0, r6, r7
 80108cc:	f000 fe6a 	bl	80115a4 <fabs>
 80108d0:	ec51 0b10 	vmov	r0, r1, d0
 80108d4:	f1ba 0f00 	cmp.w	sl, #0
 80108d8:	d129      	bne.n	801092e <__ieee754_pow+0x1ee>
 80108da:	b124      	cbz	r4, 80108e6 <__ieee754_pow+0x1a6>
 80108dc:	4b2f      	ldr	r3, [pc, #188]	; (801099c <__ieee754_pow+0x25c>)
 80108de:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80108e2:	429a      	cmp	r2, r3
 80108e4:	d123      	bne.n	801092e <__ieee754_pow+0x1ee>
 80108e6:	f1b9 0f00 	cmp.w	r9, #0
 80108ea:	da05      	bge.n	80108f8 <__ieee754_pow+0x1b8>
 80108ec:	4602      	mov	r2, r0
 80108ee:	460b      	mov	r3, r1
 80108f0:	2000      	movs	r0, #0
 80108f2:	492a      	ldr	r1, [pc, #168]	; (801099c <__ieee754_pow+0x25c>)
 80108f4:	f7ef ffba 	bl	800086c <__aeabi_ddiv>
 80108f8:	2d00      	cmp	r5, #0
 80108fa:	f6bf af40 	bge.w	801077e <__ieee754_pow+0x3e>
 80108fe:	9b04      	ldr	r3, [sp, #16]
 8010900:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010904:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010908:	431c      	orrs	r4, r3
 801090a:	d108      	bne.n	801091e <__ieee754_pow+0x1de>
 801090c:	4602      	mov	r2, r0
 801090e:	460b      	mov	r3, r1
 8010910:	4610      	mov	r0, r2
 8010912:	4619      	mov	r1, r3
 8010914:	f7ef fcc8 	bl	80002a8 <__aeabi_dsub>
 8010918:	4602      	mov	r2, r0
 801091a:	460b      	mov	r3, r1
 801091c:	e78f      	b.n	801083e <__ieee754_pow+0xfe>
 801091e:	9b04      	ldr	r3, [sp, #16]
 8010920:	2b01      	cmp	r3, #1
 8010922:	f47f af2c 	bne.w	801077e <__ieee754_pow+0x3e>
 8010926:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801092a:	4619      	mov	r1, r3
 801092c:	e727      	b.n	801077e <__ieee754_pow+0x3e>
 801092e:	0feb      	lsrs	r3, r5, #31
 8010930:	3b01      	subs	r3, #1
 8010932:	9306      	str	r3, [sp, #24]
 8010934:	9a06      	ldr	r2, [sp, #24]
 8010936:	9b04      	ldr	r3, [sp, #16]
 8010938:	4313      	orrs	r3, r2
 801093a:	d102      	bne.n	8010942 <__ieee754_pow+0x202>
 801093c:	4632      	mov	r2, r6
 801093e:	463b      	mov	r3, r7
 8010940:	e7e6      	b.n	8010910 <__ieee754_pow+0x1d0>
 8010942:	4b19      	ldr	r3, [pc, #100]	; (80109a8 <__ieee754_pow+0x268>)
 8010944:	4598      	cmp	r8, r3
 8010946:	f340 80fb 	ble.w	8010b40 <__ieee754_pow+0x400>
 801094a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801094e:	4598      	cmp	r8, r3
 8010950:	4b13      	ldr	r3, [pc, #76]	; (80109a0 <__ieee754_pow+0x260>)
 8010952:	dd0c      	ble.n	801096e <__ieee754_pow+0x22e>
 8010954:	429c      	cmp	r4, r3
 8010956:	dc0f      	bgt.n	8010978 <__ieee754_pow+0x238>
 8010958:	f1b9 0f00 	cmp.w	r9, #0
 801095c:	da0f      	bge.n	801097e <__ieee754_pow+0x23e>
 801095e:	2000      	movs	r0, #0
 8010960:	b009      	add	sp, #36	; 0x24
 8010962:	ecbd 8b06 	vpop	{d8-d10}
 8010966:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801096a:	f000 beca 	b.w	8011702 <__math_oflow>
 801096e:	429c      	cmp	r4, r3
 8010970:	dbf2      	blt.n	8010958 <__ieee754_pow+0x218>
 8010972:	4b0a      	ldr	r3, [pc, #40]	; (801099c <__ieee754_pow+0x25c>)
 8010974:	429c      	cmp	r4, r3
 8010976:	dd19      	ble.n	80109ac <__ieee754_pow+0x26c>
 8010978:	f1b9 0f00 	cmp.w	r9, #0
 801097c:	dcef      	bgt.n	801095e <__ieee754_pow+0x21e>
 801097e:	2000      	movs	r0, #0
 8010980:	b009      	add	sp, #36	; 0x24
 8010982:	ecbd 8b06 	vpop	{d8-d10}
 8010986:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801098a:	f000 beb1 	b.w	80116f0 <__math_uflow>
 801098e:	bf00      	nop
 8010990:	fff00000 	.word	0xfff00000
 8010994:	7ff00000 	.word	0x7ff00000
 8010998:	433fffff 	.word	0x433fffff
 801099c:	3ff00000 	.word	0x3ff00000
 80109a0:	3fefffff 	.word	0x3fefffff
 80109a4:	3fe00000 	.word	0x3fe00000
 80109a8:	41e00000 	.word	0x41e00000
 80109ac:	4b60      	ldr	r3, [pc, #384]	; (8010b30 <__ieee754_pow+0x3f0>)
 80109ae:	2200      	movs	r2, #0
 80109b0:	f7ef fc7a 	bl	80002a8 <__aeabi_dsub>
 80109b4:	a354      	add	r3, pc, #336	; (adr r3, 8010b08 <__ieee754_pow+0x3c8>)
 80109b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109ba:	4604      	mov	r4, r0
 80109bc:	460d      	mov	r5, r1
 80109be:	f7ef fe2b 	bl	8000618 <__aeabi_dmul>
 80109c2:	a353      	add	r3, pc, #332	; (adr r3, 8010b10 <__ieee754_pow+0x3d0>)
 80109c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109c8:	4606      	mov	r6, r0
 80109ca:	460f      	mov	r7, r1
 80109cc:	4620      	mov	r0, r4
 80109ce:	4629      	mov	r1, r5
 80109d0:	f7ef fe22 	bl	8000618 <__aeabi_dmul>
 80109d4:	4b57      	ldr	r3, [pc, #348]	; (8010b34 <__ieee754_pow+0x3f4>)
 80109d6:	4682      	mov	sl, r0
 80109d8:	468b      	mov	fp, r1
 80109da:	2200      	movs	r2, #0
 80109dc:	4620      	mov	r0, r4
 80109de:	4629      	mov	r1, r5
 80109e0:	f7ef fe1a 	bl	8000618 <__aeabi_dmul>
 80109e4:	4602      	mov	r2, r0
 80109e6:	460b      	mov	r3, r1
 80109e8:	a14b      	add	r1, pc, #300	; (adr r1, 8010b18 <__ieee754_pow+0x3d8>)
 80109ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80109ee:	f7ef fc5b 	bl	80002a8 <__aeabi_dsub>
 80109f2:	4622      	mov	r2, r4
 80109f4:	462b      	mov	r3, r5
 80109f6:	f7ef fe0f 	bl	8000618 <__aeabi_dmul>
 80109fa:	4602      	mov	r2, r0
 80109fc:	460b      	mov	r3, r1
 80109fe:	2000      	movs	r0, #0
 8010a00:	494d      	ldr	r1, [pc, #308]	; (8010b38 <__ieee754_pow+0x3f8>)
 8010a02:	f7ef fc51 	bl	80002a8 <__aeabi_dsub>
 8010a06:	4622      	mov	r2, r4
 8010a08:	4680      	mov	r8, r0
 8010a0a:	4689      	mov	r9, r1
 8010a0c:	462b      	mov	r3, r5
 8010a0e:	4620      	mov	r0, r4
 8010a10:	4629      	mov	r1, r5
 8010a12:	f7ef fe01 	bl	8000618 <__aeabi_dmul>
 8010a16:	4602      	mov	r2, r0
 8010a18:	460b      	mov	r3, r1
 8010a1a:	4640      	mov	r0, r8
 8010a1c:	4649      	mov	r1, r9
 8010a1e:	f7ef fdfb 	bl	8000618 <__aeabi_dmul>
 8010a22:	a33f      	add	r3, pc, #252	; (adr r3, 8010b20 <__ieee754_pow+0x3e0>)
 8010a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a28:	f7ef fdf6 	bl	8000618 <__aeabi_dmul>
 8010a2c:	4602      	mov	r2, r0
 8010a2e:	460b      	mov	r3, r1
 8010a30:	4650      	mov	r0, sl
 8010a32:	4659      	mov	r1, fp
 8010a34:	f7ef fc38 	bl	80002a8 <__aeabi_dsub>
 8010a38:	4602      	mov	r2, r0
 8010a3a:	460b      	mov	r3, r1
 8010a3c:	4680      	mov	r8, r0
 8010a3e:	4689      	mov	r9, r1
 8010a40:	4630      	mov	r0, r6
 8010a42:	4639      	mov	r1, r7
 8010a44:	f7ef fc32 	bl	80002ac <__adddf3>
 8010a48:	2000      	movs	r0, #0
 8010a4a:	4632      	mov	r2, r6
 8010a4c:	463b      	mov	r3, r7
 8010a4e:	4604      	mov	r4, r0
 8010a50:	460d      	mov	r5, r1
 8010a52:	f7ef fc29 	bl	80002a8 <__aeabi_dsub>
 8010a56:	4602      	mov	r2, r0
 8010a58:	460b      	mov	r3, r1
 8010a5a:	4640      	mov	r0, r8
 8010a5c:	4649      	mov	r1, r9
 8010a5e:	f7ef fc23 	bl	80002a8 <__aeabi_dsub>
 8010a62:	9b04      	ldr	r3, [sp, #16]
 8010a64:	9a06      	ldr	r2, [sp, #24]
 8010a66:	3b01      	subs	r3, #1
 8010a68:	4313      	orrs	r3, r2
 8010a6a:	4682      	mov	sl, r0
 8010a6c:	468b      	mov	fp, r1
 8010a6e:	f040 81e7 	bne.w	8010e40 <__ieee754_pow+0x700>
 8010a72:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8010b28 <__ieee754_pow+0x3e8>
 8010a76:	eeb0 8a47 	vmov.f32	s16, s14
 8010a7a:	eef0 8a67 	vmov.f32	s17, s15
 8010a7e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010a82:	2600      	movs	r6, #0
 8010a84:	4632      	mov	r2, r6
 8010a86:	463b      	mov	r3, r7
 8010a88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010a8c:	f7ef fc0c 	bl	80002a8 <__aeabi_dsub>
 8010a90:	4622      	mov	r2, r4
 8010a92:	462b      	mov	r3, r5
 8010a94:	f7ef fdc0 	bl	8000618 <__aeabi_dmul>
 8010a98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010a9c:	4680      	mov	r8, r0
 8010a9e:	4689      	mov	r9, r1
 8010aa0:	4650      	mov	r0, sl
 8010aa2:	4659      	mov	r1, fp
 8010aa4:	f7ef fdb8 	bl	8000618 <__aeabi_dmul>
 8010aa8:	4602      	mov	r2, r0
 8010aaa:	460b      	mov	r3, r1
 8010aac:	4640      	mov	r0, r8
 8010aae:	4649      	mov	r1, r9
 8010ab0:	f7ef fbfc 	bl	80002ac <__adddf3>
 8010ab4:	4632      	mov	r2, r6
 8010ab6:	463b      	mov	r3, r7
 8010ab8:	4680      	mov	r8, r0
 8010aba:	4689      	mov	r9, r1
 8010abc:	4620      	mov	r0, r4
 8010abe:	4629      	mov	r1, r5
 8010ac0:	f7ef fdaa 	bl	8000618 <__aeabi_dmul>
 8010ac4:	460b      	mov	r3, r1
 8010ac6:	4604      	mov	r4, r0
 8010ac8:	460d      	mov	r5, r1
 8010aca:	4602      	mov	r2, r0
 8010acc:	4649      	mov	r1, r9
 8010ace:	4640      	mov	r0, r8
 8010ad0:	f7ef fbec 	bl	80002ac <__adddf3>
 8010ad4:	4b19      	ldr	r3, [pc, #100]	; (8010b3c <__ieee754_pow+0x3fc>)
 8010ad6:	4299      	cmp	r1, r3
 8010ad8:	ec45 4b19 	vmov	d9, r4, r5
 8010adc:	4606      	mov	r6, r0
 8010ade:	460f      	mov	r7, r1
 8010ae0:	468b      	mov	fp, r1
 8010ae2:	f340 82f0 	ble.w	80110c6 <__ieee754_pow+0x986>
 8010ae6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8010aea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8010aee:	4303      	orrs	r3, r0
 8010af0:	f000 81e4 	beq.w	8010ebc <__ieee754_pow+0x77c>
 8010af4:	ec51 0b18 	vmov	r0, r1, d8
 8010af8:	2200      	movs	r2, #0
 8010afa:	2300      	movs	r3, #0
 8010afc:	f7ef fffe 	bl	8000afc <__aeabi_dcmplt>
 8010b00:	3800      	subs	r0, #0
 8010b02:	bf18      	it	ne
 8010b04:	2001      	movne	r0, #1
 8010b06:	e72b      	b.n	8010960 <__ieee754_pow+0x220>
 8010b08:	60000000 	.word	0x60000000
 8010b0c:	3ff71547 	.word	0x3ff71547
 8010b10:	f85ddf44 	.word	0xf85ddf44
 8010b14:	3e54ae0b 	.word	0x3e54ae0b
 8010b18:	55555555 	.word	0x55555555
 8010b1c:	3fd55555 	.word	0x3fd55555
 8010b20:	652b82fe 	.word	0x652b82fe
 8010b24:	3ff71547 	.word	0x3ff71547
 8010b28:	00000000 	.word	0x00000000
 8010b2c:	bff00000 	.word	0xbff00000
 8010b30:	3ff00000 	.word	0x3ff00000
 8010b34:	3fd00000 	.word	0x3fd00000
 8010b38:	3fe00000 	.word	0x3fe00000
 8010b3c:	408fffff 	.word	0x408fffff
 8010b40:	4bd5      	ldr	r3, [pc, #852]	; (8010e98 <__ieee754_pow+0x758>)
 8010b42:	402b      	ands	r3, r5
 8010b44:	2200      	movs	r2, #0
 8010b46:	b92b      	cbnz	r3, 8010b54 <__ieee754_pow+0x414>
 8010b48:	4bd4      	ldr	r3, [pc, #848]	; (8010e9c <__ieee754_pow+0x75c>)
 8010b4a:	f7ef fd65 	bl	8000618 <__aeabi_dmul>
 8010b4e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8010b52:	460c      	mov	r4, r1
 8010b54:	1523      	asrs	r3, r4, #20
 8010b56:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010b5a:	4413      	add	r3, r2
 8010b5c:	9305      	str	r3, [sp, #20]
 8010b5e:	4bd0      	ldr	r3, [pc, #832]	; (8010ea0 <__ieee754_pow+0x760>)
 8010b60:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010b64:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8010b68:	429c      	cmp	r4, r3
 8010b6a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010b6e:	dd08      	ble.n	8010b82 <__ieee754_pow+0x442>
 8010b70:	4bcc      	ldr	r3, [pc, #816]	; (8010ea4 <__ieee754_pow+0x764>)
 8010b72:	429c      	cmp	r4, r3
 8010b74:	f340 8162 	ble.w	8010e3c <__ieee754_pow+0x6fc>
 8010b78:	9b05      	ldr	r3, [sp, #20]
 8010b7a:	3301      	adds	r3, #1
 8010b7c:	9305      	str	r3, [sp, #20]
 8010b7e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8010b82:	2400      	movs	r4, #0
 8010b84:	00e3      	lsls	r3, r4, #3
 8010b86:	9307      	str	r3, [sp, #28]
 8010b88:	4bc7      	ldr	r3, [pc, #796]	; (8010ea8 <__ieee754_pow+0x768>)
 8010b8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010b8e:	ed93 7b00 	vldr	d7, [r3]
 8010b92:	4629      	mov	r1, r5
 8010b94:	ec53 2b17 	vmov	r2, r3, d7
 8010b98:	eeb0 9a47 	vmov.f32	s18, s14
 8010b9c:	eef0 9a67 	vmov.f32	s19, s15
 8010ba0:	4682      	mov	sl, r0
 8010ba2:	f7ef fb81 	bl	80002a8 <__aeabi_dsub>
 8010ba6:	4652      	mov	r2, sl
 8010ba8:	4606      	mov	r6, r0
 8010baa:	460f      	mov	r7, r1
 8010bac:	462b      	mov	r3, r5
 8010bae:	ec51 0b19 	vmov	r0, r1, d9
 8010bb2:	f7ef fb7b 	bl	80002ac <__adddf3>
 8010bb6:	4602      	mov	r2, r0
 8010bb8:	460b      	mov	r3, r1
 8010bba:	2000      	movs	r0, #0
 8010bbc:	49bb      	ldr	r1, [pc, #748]	; (8010eac <__ieee754_pow+0x76c>)
 8010bbe:	f7ef fe55 	bl	800086c <__aeabi_ddiv>
 8010bc2:	ec41 0b1a 	vmov	d10, r0, r1
 8010bc6:	4602      	mov	r2, r0
 8010bc8:	460b      	mov	r3, r1
 8010bca:	4630      	mov	r0, r6
 8010bcc:	4639      	mov	r1, r7
 8010bce:	f7ef fd23 	bl	8000618 <__aeabi_dmul>
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010bd8:	9302      	str	r3, [sp, #8]
 8010bda:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010bde:	46ab      	mov	fp, r5
 8010be0:	106d      	asrs	r5, r5, #1
 8010be2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8010be6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8010bea:	ec41 0b18 	vmov	d8, r0, r1
 8010bee:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8010bf2:	2200      	movs	r2, #0
 8010bf4:	4640      	mov	r0, r8
 8010bf6:	4649      	mov	r1, r9
 8010bf8:	4614      	mov	r4, r2
 8010bfa:	461d      	mov	r5, r3
 8010bfc:	f7ef fd0c 	bl	8000618 <__aeabi_dmul>
 8010c00:	4602      	mov	r2, r0
 8010c02:	460b      	mov	r3, r1
 8010c04:	4630      	mov	r0, r6
 8010c06:	4639      	mov	r1, r7
 8010c08:	f7ef fb4e 	bl	80002a8 <__aeabi_dsub>
 8010c0c:	ec53 2b19 	vmov	r2, r3, d9
 8010c10:	4606      	mov	r6, r0
 8010c12:	460f      	mov	r7, r1
 8010c14:	4620      	mov	r0, r4
 8010c16:	4629      	mov	r1, r5
 8010c18:	f7ef fb46 	bl	80002a8 <__aeabi_dsub>
 8010c1c:	4602      	mov	r2, r0
 8010c1e:	460b      	mov	r3, r1
 8010c20:	4650      	mov	r0, sl
 8010c22:	4659      	mov	r1, fp
 8010c24:	f7ef fb40 	bl	80002a8 <__aeabi_dsub>
 8010c28:	4642      	mov	r2, r8
 8010c2a:	464b      	mov	r3, r9
 8010c2c:	f7ef fcf4 	bl	8000618 <__aeabi_dmul>
 8010c30:	4602      	mov	r2, r0
 8010c32:	460b      	mov	r3, r1
 8010c34:	4630      	mov	r0, r6
 8010c36:	4639      	mov	r1, r7
 8010c38:	f7ef fb36 	bl	80002a8 <__aeabi_dsub>
 8010c3c:	ec53 2b1a 	vmov	r2, r3, d10
 8010c40:	f7ef fcea 	bl	8000618 <__aeabi_dmul>
 8010c44:	ec53 2b18 	vmov	r2, r3, d8
 8010c48:	ec41 0b19 	vmov	d9, r0, r1
 8010c4c:	ec51 0b18 	vmov	r0, r1, d8
 8010c50:	f7ef fce2 	bl	8000618 <__aeabi_dmul>
 8010c54:	a37c      	add	r3, pc, #496	; (adr r3, 8010e48 <__ieee754_pow+0x708>)
 8010c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c5a:	4604      	mov	r4, r0
 8010c5c:	460d      	mov	r5, r1
 8010c5e:	f7ef fcdb 	bl	8000618 <__aeabi_dmul>
 8010c62:	a37b      	add	r3, pc, #492	; (adr r3, 8010e50 <__ieee754_pow+0x710>)
 8010c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c68:	f7ef fb20 	bl	80002ac <__adddf3>
 8010c6c:	4622      	mov	r2, r4
 8010c6e:	462b      	mov	r3, r5
 8010c70:	f7ef fcd2 	bl	8000618 <__aeabi_dmul>
 8010c74:	a378      	add	r3, pc, #480	; (adr r3, 8010e58 <__ieee754_pow+0x718>)
 8010c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c7a:	f7ef fb17 	bl	80002ac <__adddf3>
 8010c7e:	4622      	mov	r2, r4
 8010c80:	462b      	mov	r3, r5
 8010c82:	f7ef fcc9 	bl	8000618 <__aeabi_dmul>
 8010c86:	a376      	add	r3, pc, #472	; (adr r3, 8010e60 <__ieee754_pow+0x720>)
 8010c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c8c:	f7ef fb0e 	bl	80002ac <__adddf3>
 8010c90:	4622      	mov	r2, r4
 8010c92:	462b      	mov	r3, r5
 8010c94:	f7ef fcc0 	bl	8000618 <__aeabi_dmul>
 8010c98:	a373      	add	r3, pc, #460	; (adr r3, 8010e68 <__ieee754_pow+0x728>)
 8010c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c9e:	f7ef fb05 	bl	80002ac <__adddf3>
 8010ca2:	4622      	mov	r2, r4
 8010ca4:	462b      	mov	r3, r5
 8010ca6:	f7ef fcb7 	bl	8000618 <__aeabi_dmul>
 8010caa:	a371      	add	r3, pc, #452	; (adr r3, 8010e70 <__ieee754_pow+0x730>)
 8010cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cb0:	f7ef fafc 	bl	80002ac <__adddf3>
 8010cb4:	4622      	mov	r2, r4
 8010cb6:	4606      	mov	r6, r0
 8010cb8:	460f      	mov	r7, r1
 8010cba:	462b      	mov	r3, r5
 8010cbc:	4620      	mov	r0, r4
 8010cbe:	4629      	mov	r1, r5
 8010cc0:	f7ef fcaa 	bl	8000618 <__aeabi_dmul>
 8010cc4:	4602      	mov	r2, r0
 8010cc6:	460b      	mov	r3, r1
 8010cc8:	4630      	mov	r0, r6
 8010cca:	4639      	mov	r1, r7
 8010ccc:	f7ef fca4 	bl	8000618 <__aeabi_dmul>
 8010cd0:	4642      	mov	r2, r8
 8010cd2:	4604      	mov	r4, r0
 8010cd4:	460d      	mov	r5, r1
 8010cd6:	464b      	mov	r3, r9
 8010cd8:	ec51 0b18 	vmov	r0, r1, d8
 8010cdc:	f7ef fae6 	bl	80002ac <__adddf3>
 8010ce0:	ec53 2b19 	vmov	r2, r3, d9
 8010ce4:	f7ef fc98 	bl	8000618 <__aeabi_dmul>
 8010ce8:	4622      	mov	r2, r4
 8010cea:	462b      	mov	r3, r5
 8010cec:	f7ef fade 	bl	80002ac <__adddf3>
 8010cf0:	4642      	mov	r2, r8
 8010cf2:	4682      	mov	sl, r0
 8010cf4:	468b      	mov	fp, r1
 8010cf6:	464b      	mov	r3, r9
 8010cf8:	4640      	mov	r0, r8
 8010cfa:	4649      	mov	r1, r9
 8010cfc:	f7ef fc8c 	bl	8000618 <__aeabi_dmul>
 8010d00:	4b6b      	ldr	r3, [pc, #428]	; (8010eb0 <__ieee754_pow+0x770>)
 8010d02:	2200      	movs	r2, #0
 8010d04:	4606      	mov	r6, r0
 8010d06:	460f      	mov	r7, r1
 8010d08:	f7ef fad0 	bl	80002ac <__adddf3>
 8010d0c:	4652      	mov	r2, sl
 8010d0e:	465b      	mov	r3, fp
 8010d10:	f7ef facc 	bl	80002ac <__adddf3>
 8010d14:	2000      	movs	r0, #0
 8010d16:	4604      	mov	r4, r0
 8010d18:	460d      	mov	r5, r1
 8010d1a:	4602      	mov	r2, r0
 8010d1c:	460b      	mov	r3, r1
 8010d1e:	4640      	mov	r0, r8
 8010d20:	4649      	mov	r1, r9
 8010d22:	f7ef fc79 	bl	8000618 <__aeabi_dmul>
 8010d26:	4b62      	ldr	r3, [pc, #392]	; (8010eb0 <__ieee754_pow+0x770>)
 8010d28:	4680      	mov	r8, r0
 8010d2a:	4689      	mov	r9, r1
 8010d2c:	2200      	movs	r2, #0
 8010d2e:	4620      	mov	r0, r4
 8010d30:	4629      	mov	r1, r5
 8010d32:	f7ef fab9 	bl	80002a8 <__aeabi_dsub>
 8010d36:	4632      	mov	r2, r6
 8010d38:	463b      	mov	r3, r7
 8010d3a:	f7ef fab5 	bl	80002a8 <__aeabi_dsub>
 8010d3e:	4602      	mov	r2, r0
 8010d40:	460b      	mov	r3, r1
 8010d42:	4650      	mov	r0, sl
 8010d44:	4659      	mov	r1, fp
 8010d46:	f7ef faaf 	bl	80002a8 <__aeabi_dsub>
 8010d4a:	ec53 2b18 	vmov	r2, r3, d8
 8010d4e:	f7ef fc63 	bl	8000618 <__aeabi_dmul>
 8010d52:	4622      	mov	r2, r4
 8010d54:	4606      	mov	r6, r0
 8010d56:	460f      	mov	r7, r1
 8010d58:	462b      	mov	r3, r5
 8010d5a:	ec51 0b19 	vmov	r0, r1, d9
 8010d5e:	f7ef fc5b 	bl	8000618 <__aeabi_dmul>
 8010d62:	4602      	mov	r2, r0
 8010d64:	460b      	mov	r3, r1
 8010d66:	4630      	mov	r0, r6
 8010d68:	4639      	mov	r1, r7
 8010d6a:	f7ef fa9f 	bl	80002ac <__adddf3>
 8010d6e:	4606      	mov	r6, r0
 8010d70:	460f      	mov	r7, r1
 8010d72:	4602      	mov	r2, r0
 8010d74:	460b      	mov	r3, r1
 8010d76:	4640      	mov	r0, r8
 8010d78:	4649      	mov	r1, r9
 8010d7a:	f7ef fa97 	bl	80002ac <__adddf3>
 8010d7e:	a33e      	add	r3, pc, #248	; (adr r3, 8010e78 <__ieee754_pow+0x738>)
 8010d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d84:	2000      	movs	r0, #0
 8010d86:	4604      	mov	r4, r0
 8010d88:	460d      	mov	r5, r1
 8010d8a:	f7ef fc45 	bl	8000618 <__aeabi_dmul>
 8010d8e:	4642      	mov	r2, r8
 8010d90:	ec41 0b18 	vmov	d8, r0, r1
 8010d94:	464b      	mov	r3, r9
 8010d96:	4620      	mov	r0, r4
 8010d98:	4629      	mov	r1, r5
 8010d9a:	f7ef fa85 	bl	80002a8 <__aeabi_dsub>
 8010d9e:	4602      	mov	r2, r0
 8010da0:	460b      	mov	r3, r1
 8010da2:	4630      	mov	r0, r6
 8010da4:	4639      	mov	r1, r7
 8010da6:	f7ef fa7f 	bl	80002a8 <__aeabi_dsub>
 8010daa:	a335      	add	r3, pc, #212	; (adr r3, 8010e80 <__ieee754_pow+0x740>)
 8010dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010db0:	f7ef fc32 	bl	8000618 <__aeabi_dmul>
 8010db4:	a334      	add	r3, pc, #208	; (adr r3, 8010e88 <__ieee754_pow+0x748>)
 8010db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dba:	4606      	mov	r6, r0
 8010dbc:	460f      	mov	r7, r1
 8010dbe:	4620      	mov	r0, r4
 8010dc0:	4629      	mov	r1, r5
 8010dc2:	f7ef fc29 	bl	8000618 <__aeabi_dmul>
 8010dc6:	4602      	mov	r2, r0
 8010dc8:	460b      	mov	r3, r1
 8010dca:	4630      	mov	r0, r6
 8010dcc:	4639      	mov	r1, r7
 8010dce:	f7ef fa6d 	bl	80002ac <__adddf3>
 8010dd2:	9a07      	ldr	r2, [sp, #28]
 8010dd4:	4b37      	ldr	r3, [pc, #220]	; (8010eb4 <__ieee754_pow+0x774>)
 8010dd6:	4413      	add	r3, r2
 8010dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ddc:	f7ef fa66 	bl	80002ac <__adddf3>
 8010de0:	4682      	mov	sl, r0
 8010de2:	9805      	ldr	r0, [sp, #20]
 8010de4:	468b      	mov	fp, r1
 8010de6:	f7ef fbad 	bl	8000544 <__aeabi_i2d>
 8010dea:	9a07      	ldr	r2, [sp, #28]
 8010dec:	4b32      	ldr	r3, [pc, #200]	; (8010eb8 <__ieee754_pow+0x778>)
 8010dee:	4413      	add	r3, r2
 8010df0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010df4:	4606      	mov	r6, r0
 8010df6:	460f      	mov	r7, r1
 8010df8:	4652      	mov	r2, sl
 8010dfa:	465b      	mov	r3, fp
 8010dfc:	ec51 0b18 	vmov	r0, r1, d8
 8010e00:	f7ef fa54 	bl	80002ac <__adddf3>
 8010e04:	4642      	mov	r2, r8
 8010e06:	464b      	mov	r3, r9
 8010e08:	f7ef fa50 	bl	80002ac <__adddf3>
 8010e0c:	4632      	mov	r2, r6
 8010e0e:	463b      	mov	r3, r7
 8010e10:	f7ef fa4c 	bl	80002ac <__adddf3>
 8010e14:	2000      	movs	r0, #0
 8010e16:	4632      	mov	r2, r6
 8010e18:	463b      	mov	r3, r7
 8010e1a:	4604      	mov	r4, r0
 8010e1c:	460d      	mov	r5, r1
 8010e1e:	f7ef fa43 	bl	80002a8 <__aeabi_dsub>
 8010e22:	4642      	mov	r2, r8
 8010e24:	464b      	mov	r3, r9
 8010e26:	f7ef fa3f 	bl	80002a8 <__aeabi_dsub>
 8010e2a:	ec53 2b18 	vmov	r2, r3, d8
 8010e2e:	f7ef fa3b 	bl	80002a8 <__aeabi_dsub>
 8010e32:	4602      	mov	r2, r0
 8010e34:	460b      	mov	r3, r1
 8010e36:	4650      	mov	r0, sl
 8010e38:	4659      	mov	r1, fp
 8010e3a:	e610      	b.n	8010a5e <__ieee754_pow+0x31e>
 8010e3c:	2401      	movs	r4, #1
 8010e3e:	e6a1      	b.n	8010b84 <__ieee754_pow+0x444>
 8010e40:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8010e90 <__ieee754_pow+0x750>
 8010e44:	e617      	b.n	8010a76 <__ieee754_pow+0x336>
 8010e46:	bf00      	nop
 8010e48:	4a454eef 	.word	0x4a454eef
 8010e4c:	3fca7e28 	.word	0x3fca7e28
 8010e50:	93c9db65 	.word	0x93c9db65
 8010e54:	3fcd864a 	.word	0x3fcd864a
 8010e58:	a91d4101 	.word	0xa91d4101
 8010e5c:	3fd17460 	.word	0x3fd17460
 8010e60:	518f264d 	.word	0x518f264d
 8010e64:	3fd55555 	.word	0x3fd55555
 8010e68:	db6fabff 	.word	0xdb6fabff
 8010e6c:	3fdb6db6 	.word	0x3fdb6db6
 8010e70:	33333303 	.word	0x33333303
 8010e74:	3fe33333 	.word	0x3fe33333
 8010e78:	e0000000 	.word	0xe0000000
 8010e7c:	3feec709 	.word	0x3feec709
 8010e80:	dc3a03fd 	.word	0xdc3a03fd
 8010e84:	3feec709 	.word	0x3feec709
 8010e88:	145b01f5 	.word	0x145b01f5
 8010e8c:	be3e2fe0 	.word	0xbe3e2fe0
 8010e90:	00000000 	.word	0x00000000
 8010e94:	3ff00000 	.word	0x3ff00000
 8010e98:	7ff00000 	.word	0x7ff00000
 8010e9c:	43400000 	.word	0x43400000
 8010ea0:	0003988e 	.word	0x0003988e
 8010ea4:	000bb679 	.word	0x000bb679
 8010ea8:	080155a0 	.word	0x080155a0
 8010eac:	3ff00000 	.word	0x3ff00000
 8010eb0:	40080000 	.word	0x40080000
 8010eb4:	080155c0 	.word	0x080155c0
 8010eb8:	080155b0 	.word	0x080155b0
 8010ebc:	a3b3      	add	r3, pc, #716	; (adr r3, 801118c <__ieee754_pow+0xa4c>)
 8010ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ec2:	4640      	mov	r0, r8
 8010ec4:	4649      	mov	r1, r9
 8010ec6:	f7ef f9f1 	bl	80002ac <__adddf3>
 8010eca:	4622      	mov	r2, r4
 8010ecc:	ec41 0b1a 	vmov	d10, r0, r1
 8010ed0:	462b      	mov	r3, r5
 8010ed2:	4630      	mov	r0, r6
 8010ed4:	4639      	mov	r1, r7
 8010ed6:	f7ef f9e7 	bl	80002a8 <__aeabi_dsub>
 8010eda:	4602      	mov	r2, r0
 8010edc:	460b      	mov	r3, r1
 8010ede:	ec51 0b1a 	vmov	r0, r1, d10
 8010ee2:	f7ef fe29 	bl	8000b38 <__aeabi_dcmpgt>
 8010ee6:	2800      	cmp	r0, #0
 8010ee8:	f47f ae04 	bne.w	8010af4 <__ieee754_pow+0x3b4>
 8010eec:	4aa2      	ldr	r2, [pc, #648]	; (8011178 <__ieee754_pow+0xa38>)
 8010eee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010ef2:	4293      	cmp	r3, r2
 8010ef4:	f340 8107 	ble.w	8011106 <__ieee754_pow+0x9c6>
 8010ef8:	151b      	asrs	r3, r3, #20
 8010efa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8010efe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8010f02:	fa4a fa03 	asr.w	sl, sl, r3
 8010f06:	44da      	add	sl, fp
 8010f08:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8010f0c:	489b      	ldr	r0, [pc, #620]	; (801117c <__ieee754_pow+0xa3c>)
 8010f0e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8010f12:	4108      	asrs	r0, r1
 8010f14:	ea00 030a 	and.w	r3, r0, sl
 8010f18:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8010f1c:	f1c1 0114 	rsb	r1, r1, #20
 8010f20:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8010f24:	fa4a fa01 	asr.w	sl, sl, r1
 8010f28:	f1bb 0f00 	cmp.w	fp, #0
 8010f2c:	f04f 0200 	mov.w	r2, #0
 8010f30:	4620      	mov	r0, r4
 8010f32:	4629      	mov	r1, r5
 8010f34:	bfb8      	it	lt
 8010f36:	f1ca 0a00 	rsblt	sl, sl, #0
 8010f3a:	f7ef f9b5 	bl	80002a8 <__aeabi_dsub>
 8010f3e:	ec41 0b19 	vmov	d9, r0, r1
 8010f42:	4642      	mov	r2, r8
 8010f44:	464b      	mov	r3, r9
 8010f46:	ec51 0b19 	vmov	r0, r1, d9
 8010f4a:	f7ef f9af 	bl	80002ac <__adddf3>
 8010f4e:	a37a      	add	r3, pc, #488	; (adr r3, 8011138 <__ieee754_pow+0x9f8>)
 8010f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f54:	2000      	movs	r0, #0
 8010f56:	4604      	mov	r4, r0
 8010f58:	460d      	mov	r5, r1
 8010f5a:	f7ef fb5d 	bl	8000618 <__aeabi_dmul>
 8010f5e:	ec53 2b19 	vmov	r2, r3, d9
 8010f62:	4606      	mov	r6, r0
 8010f64:	460f      	mov	r7, r1
 8010f66:	4620      	mov	r0, r4
 8010f68:	4629      	mov	r1, r5
 8010f6a:	f7ef f99d 	bl	80002a8 <__aeabi_dsub>
 8010f6e:	4602      	mov	r2, r0
 8010f70:	460b      	mov	r3, r1
 8010f72:	4640      	mov	r0, r8
 8010f74:	4649      	mov	r1, r9
 8010f76:	f7ef f997 	bl	80002a8 <__aeabi_dsub>
 8010f7a:	a371      	add	r3, pc, #452	; (adr r3, 8011140 <__ieee754_pow+0xa00>)
 8010f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f80:	f7ef fb4a 	bl	8000618 <__aeabi_dmul>
 8010f84:	a370      	add	r3, pc, #448	; (adr r3, 8011148 <__ieee754_pow+0xa08>)
 8010f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f8a:	4680      	mov	r8, r0
 8010f8c:	4689      	mov	r9, r1
 8010f8e:	4620      	mov	r0, r4
 8010f90:	4629      	mov	r1, r5
 8010f92:	f7ef fb41 	bl	8000618 <__aeabi_dmul>
 8010f96:	4602      	mov	r2, r0
 8010f98:	460b      	mov	r3, r1
 8010f9a:	4640      	mov	r0, r8
 8010f9c:	4649      	mov	r1, r9
 8010f9e:	f7ef f985 	bl	80002ac <__adddf3>
 8010fa2:	4604      	mov	r4, r0
 8010fa4:	460d      	mov	r5, r1
 8010fa6:	4602      	mov	r2, r0
 8010fa8:	460b      	mov	r3, r1
 8010faa:	4630      	mov	r0, r6
 8010fac:	4639      	mov	r1, r7
 8010fae:	f7ef f97d 	bl	80002ac <__adddf3>
 8010fb2:	4632      	mov	r2, r6
 8010fb4:	463b      	mov	r3, r7
 8010fb6:	4680      	mov	r8, r0
 8010fb8:	4689      	mov	r9, r1
 8010fba:	f7ef f975 	bl	80002a8 <__aeabi_dsub>
 8010fbe:	4602      	mov	r2, r0
 8010fc0:	460b      	mov	r3, r1
 8010fc2:	4620      	mov	r0, r4
 8010fc4:	4629      	mov	r1, r5
 8010fc6:	f7ef f96f 	bl	80002a8 <__aeabi_dsub>
 8010fca:	4642      	mov	r2, r8
 8010fcc:	4606      	mov	r6, r0
 8010fce:	460f      	mov	r7, r1
 8010fd0:	464b      	mov	r3, r9
 8010fd2:	4640      	mov	r0, r8
 8010fd4:	4649      	mov	r1, r9
 8010fd6:	f7ef fb1f 	bl	8000618 <__aeabi_dmul>
 8010fda:	a35d      	add	r3, pc, #372	; (adr r3, 8011150 <__ieee754_pow+0xa10>)
 8010fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fe0:	4604      	mov	r4, r0
 8010fe2:	460d      	mov	r5, r1
 8010fe4:	f7ef fb18 	bl	8000618 <__aeabi_dmul>
 8010fe8:	a35b      	add	r3, pc, #364	; (adr r3, 8011158 <__ieee754_pow+0xa18>)
 8010fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fee:	f7ef f95b 	bl	80002a8 <__aeabi_dsub>
 8010ff2:	4622      	mov	r2, r4
 8010ff4:	462b      	mov	r3, r5
 8010ff6:	f7ef fb0f 	bl	8000618 <__aeabi_dmul>
 8010ffa:	a359      	add	r3, pc, #356	; (adr r3, 8011160 <__ieee754_pow+0xa20>)
 8010ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011000:	f7ef f954 	bl	80002ac <__adddf3>
 8011004:	4622      	mov	r2, r4
 8011006:	462b      	mov	r3, r5
 8011008:	f7ef fb06 	bl	8000618 <__aeabi_dmul>
 801100c:	a356      	add	r3, pc, #344	; (adr r3, 8011168 <__ieee754_pow+0xa28>)
 801100e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011012:	f7ef f949 	bl	80002a8 <__aeabi_dsub>
 8011016:	4622      	mov	r2, r4
 8011018:	462b      	mov	r3, r5
 801101a:	f7ef fafd 	bl	8000618 <__aeabi_dmul>
 801101e:	a354      	add	r3, pc, #336	; (adr r3, 8011170 <__ieee754_pow+0xa30>)
 8011020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011024:	f7ef f942 	bl	80002ac <__adddf3>
 8011028:	4622      	mov	r2, r4
 801102a:	462b      	mov	r3, r5
 801102c:	f7ef faf4 	bl	8000618 <__aeabi_dmul>
 8011030:	4602      	mov	r2, r0
 8011032:	460b      	mov	r3, r1
 8011034:	4640      	mov	r0, r8
 8011036:	4649      	mov	r1, r9
 8011038:	f7ef f936 	bl	80002a8 <__aeabi_dsub>
 801103c:	4604      	mov	r4, r0
 801103e:	460d      	mov	r5, r1
 8011040:	4602      	mov	r2, r0
 8011042:	460b      	mov	r3, r1
 8011044:	4640      	mov	r0, r8
 8011046:	4649      	mov	r1, r9
 8011048:	f7ef fae6 	bl	8000618 <__aeabi_dmul>
 801104c:	2200      	movs	r2, #0
 801104e:	ec41 0b19 	vmov	d9, r0, r1
 8011052:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011056:	4620      	mov	r0, r4
 8011058:	4629      	mov	r1, r5
 801105a:	f7ef f925 	bl	80002a8 <__aeabi_dsub>
 801105e:	4602      	mov	r2, r0
 8011060:	460b      	mov	r3, r1
 8011062:	ec51 0b19 	vmov	r0, r1, d9
 8011066:	f7ef fc01 	bl	800086c <__aeabi_ddiv>
 801106a:	4632      	mov	r2, r6
 801106c:	4604      	mov	r4, r0
 801106e:	460d      	mov	r5, r1
 8011070:	463b      	mov	r3, r7
 8011072:	4640      	mov	r0, r8
 8011074:	4649      	mov	r1, r9
 8011076:	f7ef facf 	bl	8000618 <__aeabi_dmul>
 801107a:	4632      	mov	r2, r6
 801107c:	463b      	mov	r3, r7
 801107e:	f7ef f915 	bl	80002ac <__adddf3>
 8011082:	4602      	mov	r2, r0
 8011084:	460b      	mov	r3, r1
 8011086:	4620      	mov	r0, r4
 8011088:	4629      	mov	r1, r5
 801108a:	f7ef f90d 	bl	80002a8 <__aeabi_dsub>
 801108e:	4642      	mov	r2, r8
 8011090:	464b      	mov	r3, r9
 8011092:	f7ef f909 	bl	80002a8 <__aeabi_dsub>
 8011096:	460b      	mov	r3, r1
 8011098:	4602      	mov	r2, r0
 801109a:	4939      	ldr	r1, [pc, #228]	; (8011180 <__ieee754_pow+0xa40>)
 801109c:	2000      	movs	r0, #0
 801109e:	f7ef f903 	bl	80002a8 <__aeabi_dsub>
 80110a2:	ec41 0b10 	vmov	d0, r0, r1
 80110a6:	ee10 3a90 	vmov	r3, s1
 80110aa:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80110ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80110b2:	da2b      	bge.n	801110c <__ieee754_pow+0x9cc>
 80110b4:	4650      	mov	r0, sl
 80110b6:	f000 fa7f 	bl	80115b8 <scalbn>
 80110ba:	ec51 0b10 	vmov	r0, r1, d0
 80110be:	ec53 2b18 	vmov	r2, r3, d8
 80110c2:	f7ff bbee 	b.w	80108a2 <__ieee754_pow+0x162>
 80110c6:	4b2f      	ldr	r3, [pc, #188]	; (8011184 <__ieee754_pow+0xa44>)
 80110c8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80110cc:	429e      	cmp	r6, r3
 80110ce:	f77f af0d 	ble.w	8010eec <__ieee754_pow+0x7ac>
 80110d2:	4b2d      	ldr	r3, [pc, #180]	; (8011188 <__ieee754_pow+0xa48>)
 80110d4:	440b      	add	r3, r1
 80110d6:	4303      	orrs	r3, r0
 80110d8:	d009      	beq.n	80110ee <__ieee754_pow+0x9ae>
 80110da:	ec51 0b18 	vmov	r0, r1, d8
 80110de:	2200      	movs	r2, #0
 80110e0:	2300      	movs	r3, #0
 80110e2:	f7ef fd0b 	bl	8000afc <__aeabi_dcmplt>
 80110e6:	3800      	subs	r0, #0
 80110e8:	bf18      	it	ne
 80110ea:	2001      	movne	r0, #1
 80110ec:	e448      	b.n	8010980 <__ieee754_pow+0x240>
 80110ee:	4622      	mov	r2, r4
 80110f0:	462b      	mov	r3, r5
 80110f2:	f7ef f8d9 	bl	80002a8 <__aeabi_dsub>
 80110f6:	4642      	mov	r2, r8
 80110f8:	464b      	mov	r3, r9
 80110fa:	f7ef fd13 	bl	8000b24 <__aeabi_dcmpge>
 80110fe:	2800      	cmp	r0, #0
 8011100:	f43f aef4 	beq.w	8010eec <__ieee754_pow+0x7ac>
 8011104:	e7e9      	b.n	80110da <__ieee754_pow+0x99a>
 8011106:	f04f 0a00 	mov.w	sl, #0
 801110a:	e71a      	b.n	8010f42 <__ieee754_pow+0x802>
 801110c:	ec51 0b10 	vmov	r0, r1, d0
 8011110:	4619      	mov	r1, r3
 8011112:	e7d4      	b.n	80110be <__ieee754_pow+0x97e>
 8011114:	491a      	ldr	r1, [pc, #104]	; (8011180 <__ieee754_pow+0xa40>)
 8011116:	2000      	movs	r0, #0
 8011118:	f7ff bb31 	b.w	801077e <__ieee754_pow+0x3e>
 801111c:	2000      	movs	r0, #0
 801111e:	2100      	movs	r1, #0
 8011120:	f7ff bb2d 	b.w	801077e <__ieee754_pow+0x3e>
 8011124:	4630      	mov	r0, r6
 8011126:	4639      	mov	r1, r7
 8011128:	f7ff bb29 	b.w	801077e <__ieee754_pow+0x3e>
 801112c:	9204      	str	r2, [sp, #16]
 801112e:	f7ff bb7b 	b.w	8010828 <__ieee754_pow+0xe8>
 8011132:	2300      	movs	r3, #0
 8011134:	f7ff bb65 	b.w	8010802 <__ieee754_pow+0xc2>
 8011138:	00000000 	.word	0x00000000
 801113c:	3fe62e43 	.word	0x3fe62e43
 8011140:	fefa39ef 	.word	0xfefa39ef
 8011144:	3fe62e42 	.word	0x3fe62e42
 8011148:	0ca86c39 	.word	0x0ca86c39
 801114c:	be205c61 	.word	0xbe205c61
 8011150:	72bea4d0 	.word	0x72bea4d0
 8011154:	3e663769 	.word	0x3e663769
 8011158:	c5d26bf1 	.word	0xc5d26bf1
 801115c:	3ebbbd41 	.word	0x3ebbbd41
 8011160:	af25de2c 	.word	0xaf25de2c
 8011164:	3f11566a 	.word	0x3f11566a
 8011168:	16bebd93 	.word	0x16bebd93
 801116c:	3f66c16c 	.word	0x3f66c16c
 8011170:	5555553e 	.word	0x5555553e
 8011174:	3fc55555 	.word	0x3fc55555
 8011178:	3fe00000 	.word	0x3fe00000
 801117c:	fff00000 	.word	0xfff00000
 8011180:	3ff00000 	.word	0x3ff00000
 8011184:	4090cbff 	.word	0x4090cbff
 8011188:	3f6f3400 	.word	0x3f6f3400
 801118c:	652b82fe 	.word	0x652b82fe
 8011190:	3c971547 	.word	0x3c971547
 8011194:	00000000 	.word	0x00000000

08011198 <__ieee754_rem_pio2>:
 8011198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801119c:	ed2d 8b02 	vpush	{d8}
 80111a0:	ec55 4b10 	vmov	r4, r5, d0
 80111a4:	4bca      	ldr	r3, [pc, #808]	; (80114d0 <__ieee754_rem_pio2+0x338>)
 80111a6:	b08b      	sub	sp, #44	; 0x2c
 80111a8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80111ac:	4598      	cmp	r8, r3
 80111ae:	4682      	mov	sl, r0
 80111b0:	9502      	str	r5, [sp, #8]
 80111b2:	dc08      	bgt.n	80111c6 <__ieee754_rem_pio2+0x2e>
 80111b4:	2200      	movs	r2, #0
 80111b6:	2300      	movs	r3, #0
 80111b8:	ed80 0b00 	vstr	d0, [r0]
 80111bc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80111c0:	f04f 0b00 	mov.w	fp, #0
 80111c4:	e028      	b.n	8011218 <__ieee754_rem_pio2+0x80>
 80111c6:	4bc3      	ldr	r3, [pc, #780]	; (80114d4 <__ieee754_rem_pio2+0x33c>)
 80111c8:	4598      	cmp	r8, r3
 80111ca:	dc78      	bgt.n	80112be <__ieee754_rem_pio2+0x126>
 80111cc:	9b02      	ldr	r3, [sp, #8]
 80111ce:	4ec2      	ldr	r6, [pc, #776]	; (80114d8 <__ieee754_rem_pio2+0x340>)
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	ee10 0a10 	vmov	r0, s0
 80111d6:	a3b0      	add	r3, pc, #704	; (adr r3, 8011498 <__ieee754_rem_pio2+0x300>)
 80111d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111dc:	4629      	mov	r1, r5
 80111de:	dd39      	ble.n	8011254 <__ieee754_rem_pio2+0xbc>
 80111e0:	f7ef f862 	bl	80002a8 <__aeabi_dsub>
 80111e4:	45b0      	cmp	r8, r6
 80111e6:	4604      	mov	r4, r0
 80111e8:	460d      	mov	r5, r1
 80111ea:	d01b      	beq.n	8011224 <__ieee754_rem_pio2+0x8c>
 80111ec:	a3ac      	add	r3, pc, #688	; (adr r3, 80114a0 <__ieee754_rem_pio2+0x308>)
 80111ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111f2:	f7ef f859 	bl	80002a8 <__aeabi_dsub>
 80111f6:	4602      	mov	r2, r0
 80111f8:	460b      	mov	r3, r1
 80111fa:	e9ca 2300 	strd	r2, r3, [sl]
 80111fe:	4620      	mov	r0, r4
 8011200:	4629      	mov	r1, r5
 8011202:	f7ef f851 	bl	80002a8 <__aeabi_dsub>
 8011206:	a3a6      	add	r3, pc, #664	; (adr r3, 80114a0 <__ieee754_rem_pio2+0x308>)
 8011208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801120c:	f7ef f84c 	bl	80002a8 <__aeabi_dsub>
 8011210:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011214:	f04f 0b01 	mov.w	fp, #1
 8011218:	4658      	mov	r0, fp
 801121a:	b00b      	add	sp, #44	; 0x2c
 801121c:	ecbd 8b02 	vpop	{d8}
 8011220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011224:	a3a0      	add	r3, pc, #640	; (adr r3, 80114a8 <__ieee754_rem_pio2+0x310>)
 8011226:	e9d3 2300 	ldrd	r2, r3, [r3]
 801122a:	f7ef f83d 	bl	80002a8 <__aeabi_dsub>
 801122e:	a3a0      	add	r3, pc, #640	; (adr r3, 80114b0 <__ieee754_rem_pio2+0x318>)
 8011230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011234:	4604      	mov	r4, r0
 8011236:	460d      	mov	r5, r1
 8011238:	f7ef f836 	bl	80002a8 <__aeabi_dsub>
 801123c:	4602      	mov	r2, r0
 801123e:	460b      	mov	r3, r1
 8011240:	e9ca 2300 	strd	r2, r3, [sl]
 8011244:	4620      	mov	r0, r4
 8011246:	4629      	mov	r1, r5
 8011248:	f7ef f82e 	bl	80002a8 <__aeabi_dsub>
 801124c:	a398      	add	r3, pc, #608	; (adr r3, 80114b0 <__ieee754_rem_pio2+0x318>)
 801124e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011252:	e7db      	b.n	801120c <__ieee754_rem_pio2+0x74>
 8011254:	f7ef f82a 	bl	80002ac <__adddf3>
 8011258:	45b0      	cmp	r8, r6
 801125a:	4604      	mov	r4, r0
 801125c:	460d      	mov	r5, r1
 801125e:	d016      	beq.n	801128e <__ieee754_rem_pio2+0xf6>
 8011260:	a38f      	add	r3, pc, #572	; (adr r3, 80114a0 <__ieee754_rem_pio2+0x308>)
 8011262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011266:	f7ef f821 	bl	80002ac <__adddf3>
 801126a:	4602      	mov	r2, r0
 801126c:	460b      	mov	r3, r1
 801126e:	e9ca 2300 	strd	r2, r3, [sl]
 8011272:	4620      	mov	r0, r4
 8011274:	4629      	mov	r1, r5
 8011276:	f7ef f817 	bl	80002a8 <__aeabi_dsub>
 801127a:	a389      	add	r3, pc, #548	; (adr r3, 80114a0 <__ieee754_rem_pio2+0x308>)
 801127c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011280:	f7ef f814 	bl	80002ac <__adddf3>
 8011284:	f04f 3bff 	mov.w	fp, #4294967295
 8011288:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801128c:	e7c4      	b.n	8011218 <__ieee754_rem_pio2+0x80>
 801128e:	a386      	add	r3, pc, #536	; (adr r3, 80114a8 <__ieee754_rem_pio2+0x310>)
 8011290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011294:	f7ef f80a 	bl	80002ac <__adddf3>
 8011298:	a385      	add	r3, pc, #532	; (adr r3, 80114b0 <__ieee754_rem_pio2+0x318>)
 801129a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801129e:	4604      	mov	r4, r0
 80112a0:	460d      	mov	r5, r1
 80112a2:	f7ef f803 	bl	80002ac <__adddf3>
 80112a6:	4602      	mov	r2, r0
 80112a8:	460b      	mov	r3, r1
 80112aa:	e9ca 2300 	strd	r2, r3, [sl]
 80112ae:	4620      	mov	r0, r4
 80112b0:	4629      	mov	r1, r5
 80112b2:	f7ee fff9 	bl	80002a8 <__aeabi_dsub>
 80112b6:	a37e      	add	r3, pc, #504	; (adr r3, 80114b0 <__ieee754_rem_pio2+0x318>)
 80112b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112bc:	e7e0      	b.n	8011280 <__ieee754_rem_pio2+0xe8>
 80112be:	4b87      	ldr	r3, [pc, #540]	; (80114dc <__ieee754_rem_pio2+0x344>)
 80112c0:	4598      	cmp	r8, r3
 80112c2:	f300 80d8 	bgt.w	8011476 <__ieee754_rem_pio2+0x2de>
 80112c6:	f000 f96d 	bl	80115a4 <fabs>
 80112ca:	ec55 4b10 	vmov	r4, r5, d0
 80112ce:	ee10 0a10 	vmov	r0, s0
 80112d2:	a379      	add	r3, pc, #484	; (adr r3, 80114b8 <__ieee754_rem_pio2+0x320>)
 80112d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112d8:	4629      	mov	r1, r5
 80112da:	f7ef f99d 	bl	8000618 <__aeabi_dmul>
 80112de:	4b80      	ldr	r3, [pc, #512]	; (80114e0 <__ieee754_rem_pio2+0x348>)
 80112e0:	2200      	movs	r2, #0
 80112e2:	f7ee ffe3 	bl	80002ac <__adddf3>
 80112e6:	f7ef fc47 	bl	8000b78 <__aeabi_d2iz>
 80112ea:	4683      	mov	fp, r0
 80112ec:	f7ef f92a 	bl	8000544 <__aeabi_i2d>
 80112f0:	4602      	mov	r2, r0
 80112f2:	460b      	mov	r3, r1
 80112f4:	ec43 2b18 	vmov	d8, r2, r3
 80112f8:	a367      	add	r3, pc, #412	; (adr r3, 8011498 <__ieee754_rem_pio2+0x300>)
 80112fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112fe:	f7ef f98b 	bl	8000618 <__aeabi_dmul>
 8011302:	4602      	mov	r2, r0
 8011304:	460b      	mov	r3, r1
 8011306:	4620      	mov	r0, r4
 8011308:	4629      	mov	r1, r5
 801130a:	f7ee ffcd 	bl	80002a8 <__aeabi_dsub>
 801130e:	a364      	add	r3, pc, #400	; (adr r3, 80114a0 <__ieee754_rem_pio2+0x308>)
 8011310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011314:	4606      	mov	r6, r0
 8011316:	460f      	mov	r7, r1
 8011318:	ec51 0b18 	vmov	r0, r1, d8
 801131c:	f7ef f97c 	bl	8000618 <__aeabi_dmul>
 8011320:	f1bb 0f1f 	cmp.w	fp, #31
 8011324:	4604      	mov	r4, r0
 8011326:	460d      	mov	r5, r1
 8011328:	dc0d      	bgt.n	8011346 <__ieee754_rem_pio2+0x1ae>
 801132a:	4b6e      	ldr	r3, [pc, #440]	; (80114e4 <__ieee754_rem_pio2+0x34c>)
 801132c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8011330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011334:	4543      	cmp	r3, r8
 8011336:	d006      	beq.n	8011346 <__ieee754_rem_pio2+0x1ae>
 8011338:	4622      	mov	r2, r4
 801133a:	462b      	mov	r3, r5
 801133c:	4630      	mov	r0, r6
 801133e:	4639      	mov	r1, r7
 8011340:	f7ee ffb2 	bl	80002a8 <__aeabi_dsub>
 8011344:	e00e      	b.n	8011364 <__ieee754_rem_pio2+0x1cc>
 8011346:	462b      	mov	r3, r5
 8011348:	4622      	mov	r2, r4
 801134a:	4630      	mov	r0, r6
 801134c:	4639      	mov	r1, r7
 801134e:	f7ee ffab 	bl	80002a8 <__aeabi_dsub>
 8011352:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011356:	9303      	str	r3, [sp, #12]
 8011358:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801135c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8011360:	2b10      	cmp	r3, #16
 8011362:	dc02      	bgt.n	801136a <__ieee754_rem_pio2+0x1d2>
 8011364:	e9ca 0100 	strd	r0, r1, [sl]
 8011368:	e039      	b.n	80113de <__ieee754_rem_pio2+0x246>
 801136a:	a34f      	add	r3, pc, #316	; (adr r3, 80114a8 <__ieee754_rem_pio2+0x310>)
 801136c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011370:	ec51 0b18 	vmov	r0, r1, d8
 8011374:	f7ef f950 	bl	8000618 <__aeabi_dmul>
 8011378:	4604      	mov	r4, r0
 801137a:	460d      	mov	r5, r1
 801137c:	4602      	mov	r2, r0
 801137e:	460b      	mov	r3, r1
 8011380:	4630      	mov	r0, r6
 8011382:	4639      	mov	r1, r7
 8011384:	f7ee ff90 	bl	80002a8 <__aeabi_dsub>
 8011388:	4602      	mov	r2, r0
 801138a:	460b      	mov	r3, r1
 801138c:	4680      	mov	r8, r0
 801138e:	4689      	mov	r9, r1
 8011390:	4630      	mov	r0, r6
 8011392:	4639      	mov	r1, r7
 8011394:	f7ee ff88 	bl	80002a8 <__aeabi_dsub>
 8011398:	4622      	mov	r2, r4
 801139a:	462b      	mov	r3, r5
 801139c:	f7ee ff84 	bl	80002a8 <__aeabi_dsub>
 80113a0:	a343      	add	r3, pc, #268	; (adr r3, 80114b0 <__ieee754_rem_pio2+0x318>)
 80113a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113a6:	4604      	mov	r4, r0
 80113a8:	460d      	mov	r5, r1
 80113aa:	ec51 0b18 	vmov	r0, r1, d8
 80113ae:	f7ef f933 	bl	8000618 <__aeabi_dmul>
 80113b2:	4622      	mov	r2, r4
 80113b4:	462b      	mov	r3, r5
 80113b6:	f7ee ff77 	bl	80002a8 <__aeabi_dsub>
 80113ba:	4602      	mov	r2, r0
 80113bc:	460b      	mov	r3, r1
 80113be:	4604      	mov	r4, r0
 80113c0:	460d      	mov	r5, r1
 80113c2:	4640      	mov	r0, r8
 80113c4:	4649      	mov	r1, r9
 80113c6:	f7ee ff6f 	bl	80002a8 <__aeabi_dsub>
 80113ca:	9a03      	ldr	r2, [sp, #12]
 80113cc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80113d0:	1ad3      	subs	r3, r2, r3
 80113d2:	2b31      	cmp	r3, #49	; 0x31
 80113d4:	dc24      	bgt.n	8011420 <__ieee754_rem_pio2+0x288>
 80113d6:	e9ca 0100 	strd	r0, r1, [sl]
 80113da:	4646      	mov	r6, r8
 80113dc:	464f      	mov	r7, r9
 80113de:	e9da 8900 	ldrd	r8, r9, [sl]
 80113e2:	4630      	mov	r0, r6
 80113e4:	4642      	mov	r2, r8
 80113e6:	464b      	mov	r3, r9
 80113e8:	4639      	mov	r1, r7
 80113ea:	f7ee ff5d 	bl	80002a8 <__aeabi_dsub>
 80113ee:	462b      	mov	r3, r5
 80113f0:	4622      	mov	r2, r4
 80113f2:	f7ee ff59 	bl	80002a8 <__aeabi_dsub>
 80113f6:	9b02      	ldr	r3, [sp, #8]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80113fe:	f6bf af0b 	bge.w	8011218 <__ieee754_rem_pio2+0x80>
 8011402:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011406:	f8ca 3004 	str.w	r3, [sl, #4]
 801140a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801140e:	f8ca 8000 	str.w	r8, [sl]
 8011412:	f8ca 0008 	str.w	r0, [sl, #8]
 8011416:	f8ca 300c 	str.w	r3, [sl, #12]
 801141a:	f1cb 0b00 	rsb	fp, fp, #0
 801141e:	e6fb      	b.n	8011218 <__ieee754_rem_pio2+0x80>
 8011420:	a327      	add	r3, pc, #156	; (adr r3, 80114c0 <__ieee754_rem_pio2+0x328>)
 8011422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011426:	ec51 0b18 	vmov	r0, r1, d8
 801142a:	f7ef f8f5 	bl	8000618 <__aeabi_dmul>
 801142e:	4604      	mov	r4, r0
 8011430:	460d      	mov	r5, r1
 8011432:	4602      	mov	r2, r0
 8011434:	460b      	mov	r3, r1
 8011436:	4640      	mov	r0, r8
 8011438:	4649      	mov	r1, r9
 801143a:	f7ee ff35 	bl	80002a8 <__aeabi_dsub>
 801143e:	4602      	mov	r2, r0
 8011440:	460b      	mov	r3, r1
 8011442:	4606      	mov	r6, r0
 8011444:	460f      	mov	r7, r1
 8011446:	4640      	mov	r0, r8
 8011448:	4649      	mov	r1, r9
 801144a:	f7ee ff2d 	bl	80002a8 <__aeabi_dsub>
 801144e:	4622      	mov	r2, r4
 8011450:	462b      	mov	r3, r5
 8011452:	f7ee ff29 	bl	80002a8 <__aeabi_dsub>
 8011456:	a31c      	add	r3, pc, #112	; (adr r3, 80114c8 <__ieee754_rem_pio2+0x330>)
 8011458:	e9d3 2300 	ldrd	r2, r3, [r3]
 801145c:	4604      	mov	r4, r0
 801145e:	460d      	mov	r5, r1
 8011460:	ec51 0b18 	vmov	r0, r1, d8
 8011464:	f7ef f8d8 	bl	8000618 <__aeabi_dmul>
 8011468:	4622      	mov	r2, r4
 801146a:	462b      	mov	r3, r5
 801146c:	f7ee ff1c 	bl	80002a8 <__aeabi_dsub>
 8011470:	4604      	mov	r4, r0
 8011472:	460d      	mov	r5, r1
 8011474:	e760      	b.n	8011338 <__ieee754_rem_pio2+0x1a0>
 8011476:	4b1c      	ldr	r3, [pc, #112]	; (80114e8 <__ieee754_rem_pio2+0x350>)
 8011478:	4598      	cmp	r8, r3
 801147a:	dd37      	ble.n	80114ec <__ieee754_rem_pio2+0x354>
 801147c:	ee10 2a10 	vmov	r2, s0
 8011480:	462b      	mov	r3, r5
 8011482:	4620      	mov	r0, r4
 8011484:	4629      	mov	r1, r5
 8011486:	f7ee ff0f 	bl	80002a8 <__aeabi_dsub>
 801148a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801148e:	e9ca 0100 	strd	r0, r1, [sl]
 8011492:	e695      	b.n	80111c0 <__ieee754_rem_pio2+0x28>
 8011494:	f3af 8000 	nop.w
 8011498:	54400000 	.word	0x54400000
 801149c:	3ff921fb 	.word	0x3ff921fb
 80114a0:	1a626331 	.word	0x1a626331
 80114a4:	3dd0b461 	.word	0x3dd0b461
 80114a8:	1a600000 	.word	0x1a600000
 80114ac:	3dd0b461 	.word	0x3dd0b461
 80114b0:	2e037073 	.word	0x2e037073
 80114b4:	3ba3198a 	.word	0x3ba3198a
 80114b8:	6dc9c883 	.word	0x6dc9c883
 80114bc:	3fe45f30 	.word	0x3fe45f30
 80114c0:	2e000000 	.word	0x2e000000
 80114c4:	3ba3198a 	.word	0x3ba3198a
 80114c8:	252049c1 	.word	0x252049c1
 80114cc:	397b839a 	.word	0x397b839a
 80114d0:	3fe921fb 	.word	0x3fe921fb
 80114d4:	4002d97b 	.word	0x4002d97b
 80114d8:	3ff921fb 	.word	0x3ff921fb
 80114dc:	413921fb 	.word	0x413921fb
 80114e0:	3fe00000 	.word	0x3fe00000
 80114e4:	080155d0 	.word	0x080155d0
 80114e8:	7fefffff 	.word	0x7fefffff
 80114ec:	ea4f 5628 	mov.w	r6, r8, asr #20
 80114f0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80114f4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80114f8:	4620      	mov	r0, r4
 80114fa:	460d      	mov	r5, r1
 80114fc:	f7ef fb3c 	bl	8000b78 <__aeabi_d2iz>
 8011500:	f7ef f820 	bl	8000544 <__aeabi_i2d>
 8011504:	4602      	mov	r2, r0
 8011506:	460b      	mov	r3, r1
 8011508:	4620      	mov	r0, r4
 801150a:	4629      	mov	r1, r5
 801150c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011510:	f7ee feca 	bl	80002a8 <__aeabi_dsub>
 8011514:	4b21      	ldr	r3, [pc, #132]	; (801159c <__ieee754_rem_pio2+0x404>)
 8011516:	2200      	movs	r2, #0
 8011518:	f7ef f87e 	bl	8000618 <__aeabi_dmul>
 801151c:	460d      	mov	r5, r1
 801151e:	4604      	mov	r4, r0
 8011520:	f7ef fb2a 	bl	8000b78 <__aeabi_d2iz>
 8011524:	f7ef f80e 	bl	8000544 <__aeabi_i2d>
 8011528:	4602      	mov	r2, r0
 801152a:	460b      	mov	r3, r1
 801152c:	4620      	mov	r0, r4
 801152e:	4629      	mov	r1, r5
 8011530:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011534:	f7ee feb8 	bl	80002a8 <__aeabi_dsub>
 8011538:	4b18      	ldr	r3, [pc, #96]	; (801159c <__ieee754_rem_pio2+0x404>)
 801153a:	2200      	movs	r2, #0
 801153c:	f7ef f86c 	bl	8000618 <__aeabi_dmul>
 8011540:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011544:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8011548:	2703      	movs	r7, #3
 801154a:	2400      	movs	r4, #0
 801154c:	2500      	movs	r5, #0
 801154e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8011552:	4622      	mov	r2, r4
 8011554:	462b      	mov	r3, r5
 8011556:	46b9      	mov	r9, r7
 8011558:	3f01      	subs	r7, #1
 801155a:	f7ef fac5 	bl	8000ae8 <__aeabi_dcmpeq>
 801155e:	2800      	cmp	r0, #0
 8011560:	d1f5      	bne.n	801154e <__ieee754_rem_pio2+0x3b6>
 8011562:	4b0f      	ldr	r3, [pc, #60]	; (80115a0 <__ieee754_rem_pio2+0x408>)
 8011564:	9301      	str	r3, [sp, #4]
 8011566:	2302      	movs	r3, #2
 8011568:	9300      	str	r3, [sp, #0]
 801156a:	4632      	mov	r2, r6
 801156c:	464b      	mov	r3, r9
 801156e:	4651      	mov	r1, sl
 8011570:	a804      	add	r0, sp, #16
 8011572:	f000 f8d1 	bl	8011718 <__kernel_rem_pio2>
 8011576:	9b02      	ldr	r3, [sp, #8]
 8011578:	2b00      	cmp	r3, #0
 801157a:	4683      	mov	fp, r0
 801157c:	f6bf ae4c 	bge.w	8011218 <__ieee754_rem_pio2+0x80>
 8011580:	e9da 2100 	ldrd	r2, r1, [sl]
 8011584:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011588:	e9ca 2300 	strd	r2, r3, [sl]
 801158c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8011590:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011594:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8011598:	e73f      	b.n	801141a <__ieee754_rem_pio2+0x282>
 801159a:	bf00      	nop
 801159c:	41700000 	.word	0x41700000
 80115a0:	08015650 	.word	0x08015650

080115a4 <fabs>:
 80115a4:	ec51 0b10 	vmov	r0, r1, d0
 80115a8:	ee10 2a10 	vmov	r2, s0
 80115ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80115b0:	ec43 2b10 	vmov	d0, r2, r3
 80115b4:	4770      	bx	lr
	...

080115b8 <scalbn>:
 80115b8:	b570      	push	{r4, r5, r6, lr}
 80115ba:	ec55 4b10 	vmov	r4, r5, d0
 80115be:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80115c2:	4606      	mov	r6, r0
 80115c4:	462b      	mov	r3, r5
 80115c6:	b999      	cbnz	r1, 80115f0 <scalbn+0x38>
 80115c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80115cc:	4323      	orrs	r3, r4
 80115ce:	d03f      	beq.n	8011650 <scalbn+0x98>
 80115d0:	4b35      	ldr	r3, [pc, #212]	; (80116a8 <scalbn+0xf0>)
 80115d2:	4629      	mov	r1, r5
 80115d4:	ee10 0a10 	vmov	r0, s0
 80115d8:	2200      	movs	r2, #0
 80115da:	f7ef f81d 	bl	8000618 <__aeabi_dmul>
 80115de:	4b33      	ldr	r3, [pc, #204]	; (80116ac <scalbn+0xf4>)
 80115e0:	429e      	cmp	r6, r3
 80115e2:	4604      	mov	r4, r0
 80115e4:	460d      	mov	r5, r1
 80115e6:	da10      	bge.n	801160a <scalbn+0x52>
 80115e8:	a327      	add	r3, pc, #156	; (adr r3, 8011688 <scalbn+0xd0>)
 80115ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115ee:	e01f      	b.n	8011630 <scalbn+0x78>
 80115f0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80115f4:	4291      	cmp	r1, r2
 80115f6:	d10c      	bne.n	8011612 <scalbn+0x5a>
 80115f8:	ee10 2a10 	vmov	r2, s0
 80115fc:	4620      	mov	r0, r4
 80115fe:	4629      	mov	r1, r5
 8011600:	f7ee fe54 	bl	80002ac <__adddf3>
 8011604:	4604      	mov	r4, r0
 8011606:	460d      	mov	r5, r1
 8011608:	e022      	b.n	8011650 <scalbn+0x98>
 801160a:	460b      	mov	r3, r1
 801160c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011610:	3936      	subs	r1, #54	; 0x36
 8011612:	f24c 3250 	movw	r2, #50000	; 0xc350
 8011616:	4296      	cmp	r6, r2
 8011618:	dd0d      	ble.n	8011636 <scalbn+0x7e>
 801161a:	2d00      	cmp	r5, #0
 801161c:	a11c      	add	r1, pc, #112	; (adr r1, 8011690 <scalbn+0xd8>)
 801161e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011622:	da02      	bge.n	801162a <scalbn+0x72>
 8011624:	a11c      	add	r1, pc, #112	; (adr r1, 8011698 <scalbn+0xe0>)
 8011626:	e9d1 0100 	ldrd	r0, r1, [r1]
 801162a:	a319      	add	r3, pc, #100	; (adr r3, 8011690 <scalbn+0xd8>)
 801162c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011630:	f7ee fff2 	bl	8000618 <__aeabi_dmul>
 8011634:	e7e6      	b.n	8011604 <scalbn+0x4c>
 8011636:	1872      	adds	r2, r6, r1
 8011638:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801163c:	428a      	cmp	r2, r1
 801163e:	dcec      	bgt.n	801161a <scalbn+0x62>
 8011640:	2a00      	cmp	r2, #0
 8011642:	dd08      	ble.n	8011656 <scalbn+0x9e>
 8011644:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011648:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801164c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011650:	ec45 4b10 	vmov	d0, r4, r5
 8011654:	bd70      	pop	{r4, r5, r6, pc}
 8011656:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801165a:	da08      	bge.n	801166e <scalbn+0xb6>
 801165c:	2d00      	cmp	r5, #0
 801165e:	a10a      	add	r1, pc, #40	; (adr r1, 8011688 <scalbn+0xd0>)
 8011660:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011664:	dac0      	bge.n	80115e8 <scalbn+0x30>
 8011666:	a10e      	add	r1, pc, #56	; (adr r1, 80116a0 <scalbn+0xe8>)
 8011668:	e9d1 0100 	ldrd	r0, r1, [r1]
 801166c:	e7bc      	b.n	80115e8 <scalbn+0x30>
 801166e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011672:	3236      	adds	r2, #54	; 0x36
 8011674:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011678:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801167c:	4620      	mov	r0, r4
 801167e:	4b0c      	ldr	r3, [pc, #48]	; (80116b0 <scalbn+0xf8>)
 8011680:	2200      	movs	r2, #0
 8011682:	e7d5      	b.n	8011630 <scalbn+0x78>
 8011684:	f3af 8000 	nop.w
 8011688:	c2f8f359 	.word	0xc2f8f359
 801168c:	01a56e1f 	.word	0x01a56e1f
 8011690:	8800759c 	.word	0x8800759c
 8011694:	7e37e43c 	.word	0x7e37e43c
 8011698:	8800759c 	.word	0x8800759c
 801169c:	fe37e43c 	.word	0xfe37e43c
 80116a0:	c2f8f359 	.word	0xc2f8f359
 80116a4:	81a56e1f 	.word	0x81a56e1f
 80116a8:	43500000 	.word	0x43500000
 80116ac:	ffff3cb0 	.word	0xffff3cb0
 80116b0:	3c900000 	.word	0x3c900000

080116b4 <with_errno>:
 80116b4:	b570      	push	{r4, r5, r6, lr}
 80116b6:	4604      	mov	r4, r0
 80116b8:	460d      	mov	r5, r1
 80116ba:	4616      	mov	r6, r2
 80116bc:	f001 fb6a 	bl	8012d94 <__errno>
 80116c0:	4629      	mov	r1, r5
 80116c2:	6006      	str	r6, [r0, #0]
 80116c4:	4620      	mov	r0, r4
 80116c6:	bd70      	pop	{r4, r5, r6, pc}

080116c8 <xflow>:
 80116c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80116ca:	4614      	mov	r4, r2
 80116cc:	461d      	mov	r5, r3
 80116ce:	b108      	cbz	r0, 80116d4 <xflow+0xc>
 80116d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80116d4:	e9cd 2300 	strd	r2, r3, [sp]
 80116d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80116dc:	4620      	mov	r0, r4
 80116de:	4629      	mov	r1, r5
 80116e0:	f7ee ff9a 	bl	8000618 <__aeabi_dmul>
 80116e4:	2222      	movs	r2, #34	; 0x22
 80116e6:	b003      	add	sp, #12
 80116e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80116ec:	f7ff bfe2 	b.w	80116b4 <with_errno>

080116f0 <__math_uflow>:
 80116f0:	b508      	push	{r3, lr}
 80116f2:	2200      	movs	r2, #0
 80116f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80116f8:	f7ff ffe6 	bl	80116c8 <xflow>
 80116fc:	ec41 0b10 	vmov	d0, r0, r1
 8011700:	bd08      	pop	{r3, pc}

08011702 <__math_oflow>:
 8011702:	b508      	push	{r3, lr}
 8011704:	2200      	movs	r2, #0
 8011706:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801170a:	f7ff ffdd 	bl	80116c8 <xflow>
 801170e:	ec41 0b10 	vmov	d0, r0, r1
 8011712:	bd08      	pop	{r3, pc}
 8011714:	0000      	movs	r0, r0
	...

08011718 <__kernel_rem_pio2>:
 8011718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801171c:	ed2d 8b02 	vpush	{d8}
 8011720:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8011724:	f112 0f14 	cmn.w	r2, #20
 8011728:	9306      	str	r3, [sp, #24]
 801172a:	9104      	str	r1, [sp, #16]
 801172c:	4bc2      	ldr	r3, [pc, #776]	; (8011a38 <__kernel_rem_pio2+0x320>)
 801172e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8011730:	9009      	str	r0, [sp, #36]	; 0x24
 8011732:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011736:	9300      	str	r3, [sp, #0]
 8011738:	9b06      	ldr	r3, [sp, #24]
 801173a:	f103 33ff 	add.w	r3, r3, #4294967295
 801173e:	bfa8      	it	ge
 8011740:	1ed4      	subge	r4, r2, #3
 8011742:	9305      	str	r3, [sp, #20]
 8011744:	bfb2      	itee	lt
 8011746:	2400      	movlt	r4, #0
 8011748:	2318      	movge	r3, #24
 801174a:	fb94 f4f3 	sdivge	r4, r4, r3
 801174e:	f06f 0317 	mvn.w	r3, #23
 8011752:	fb04 3303 	mla	r3, r4, r3, r3
 8011756:	eb03 0a02 	add.w	sl, r3, r2
 801175a:	9b00      	ldr	r3, [sp, #0]
 801175c:	9a05      	ldr	r2, [sp, #20]
 801175e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8011a28 <__kernel_rem_pio2+0x310>
 8011762:	eb03 0802 	add.w	r8, r3, r2
 8011766:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8011768:	1aa7      	subs	r7, r4, r2
 801176a:	ae20      	add	r6, sp, #128	; 0x80
 801176c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011770:	2500      	movs	r5, #0
 8011772:	4545      	cmp	r5, r8
 8011774:	dd13      	ble.n	801179e <__kernel_rem_pio2+0x86>
 8011776:	9b06      	ldr	r3, [sp, #24]
 8011778:	aa20      	add	r2, sp, #128	; 0x80
 801177a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801177e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8011782:	f04f 0800 	mov.w	r8, #0
 8011786:	9b00      	ldr	r3, [sp, #0]
 8011788:	4598      	cmp	r8, r3
 801178a:	dc31      	bgt.n	80117f0 <__kernel_rem_pio2+0xd8>
 801178c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8011a28 <__kernel_rem_pio2+0x310>
 8011790:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8011794:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011798:	462f      	mov	r7, r5
 801179a:	2600      	movs	r6, #0
 801179c:	e01b      	b.n	80117d6 <__kernel_rem_pio2+0xbe>
 801179e:	42ef      	cmn	r7, r5
 80117a0:	d407      	bmi.n	80117b2 <__kernel_rem_pio2+0x9a>
 80117a2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80117a6:	f7ee fecd 	bl	8000544 <__aeabi_i2d>
 80117aa:	e8e6 0102 	strd	r0, r1, [r6], #8
 80117ae:	3501      	adds	r5, #1
 80117b0:	e7df      	b.n	8011772 <__kernel_rem_pio2+0x5a>
 80117b2:	ec51 0b18 	vmov	r0, r1, d8
 80117b6:	e7f8      	b.n	80117aa <__kernel_rem_pio2+0x92>
 80117b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80117bc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80117c0:	f7ee ff2a 	bl	8000618 <__aeabi_dmul>
 80117c4:	4602      	mov	r2, r0
 80117c6:	460b      	mov	r3, r1
 80117c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80117cc:	f7ee fd6e 	bl	80002ac <__adddf3>
 80117d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80117d4:	3601      	adds	r6, #1
 80117d6:	9b05      	ldr	r3, [sp, #20]
 80117d8:	429e      	cmp	r6, r3
 80117da:	f1a7 0708 	sub.w	r7, r7, #8
 80117de:	ddeb      	ble.n	80117b8 <__kernel_rem_pio2+0xa0>
 80117e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80117e4:	f108 0801 	add.w	r8, r8, #1
 80117e8:	ecab 7b02 	vstmia	fp!, {d7}
 80117ec:	3508      	adds	r5, #8
 80117ee:	e7ca      	b.n	8011786 <__kernel_rem_pio2+0x6e>
 80117f0:	9b00      	ldr	r3, [sp, #0]
 80117f2:	aa0c      	add	r2, sp, #48	; 0x30
 80117f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80117f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80117fa:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80117fc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011800:	9c00      	ldr	r4, [sp, #0]
 8011802:	930a      	str	r3, [sp, #40]	; 0x28
 8011804:	00e3      	lsls	r3, r4, #3
 8011806:	9308      	str	r3, [sp, #32]
 8011808:	ab98      	add	r3, sp, #608	; 0x260
 801180a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801180e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8011812:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8011816:	ab70      	add	r3, sp, #448	; 0x1c0
 8011818:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801181c:	46c3      	mov	fp, r8
 801181e:	46a1      	mov	r9, r4
 8011820:	f1b9 0f00 	cmp.w	r9, #0
 8011824:	f1a5 0508 	sub.w	r5, r5, #8
 8011828:	dc77      	bgt.n	801191a <__kernel_rem_pio2+0x202>
 801182a:	ec47 6b10 	vmov	d0, r6, r7
 801182e:	4650      	mov	r0, sl
 8011830:	f7ff fec2 	bl	80115b8 <scalbn>
 8011834:	ec57 6b10 	vmov	r6, r7, d0
 8011838:	2200      	movs	r2, #0
 801183a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801183e:	ee10 0a10 	vmov	r0, s0
 8011842:	4639      	mov	r1, r7
 8011844:	f7ee fee8 	bl	8000618 <__aeabi_dmul>
 8011848:	ec41 0b10 	vmov	d0, r0, r1
 801184c:	f000 fab4 	bl	8011db8 <floor>
 8011850:	4b7a      	ldr	r3, [pc, #488]	; (8011a3c <__kernel_rem_pio2+0x324>)
 8011852:	ec51 0b10 	vmov	r0, r1, d0
 8011856:	2200      	movs	r2, #0
 8011858:	f7ee fede 	bl	8000618 <__aeabi_dmul>
 801185c:	4602      	mov	r2, r0
 801185e:	460b      	mov	r3, r1
 8011860:	4630      	mov	r0, r6
 8011862:	4639      	mov	r1, r7
 8011864:	f7ee fd20 	bl	80002a8 <__aeabi_dsub>
 8011868:	460f      	mov	r7, r1
 801186a:	4606      	mov	r6, r0
 801186c:	f7ef f984 	bl	8000b78 <__aeabi_d2iz>
 8011870:	9002      	str	r0, [sp, #8]
 8011872:	f7ee fe67 	bl	8000544 <__aeabi_i2d>
 8011876:	4602      	mov	r2, r0
 8011878:	460b      	mov	r3, r1
 801187a:	4630      	mov	r0, r6
 801187c:	4639      	mov	r1, r7
 801187e:	f7ee fd13 	bl	80002a8 <__aeabi_dsub>
 8011882:	f1ba 0f00 	cmp.w	sl, #0
 8011886:	4606      	mov	r6, r0
 8011888:	460f      	mov	r7, r1
 801188a:	dd6d      	ble.n	8011968 <__kernel_rem_pio2+0x250>
 801188c:	1e61      	subs	r1, r4, #1
 801188e:	ab0c      	add	r3, sp, #48	; 0x30
 8011890:	9d02      	ldr	r5, [sp, #8]
 8011892:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011896:	f1ca 0018 	rsb	r0, sl, #24
 801189a:	fa43 f200 	asr.w	r2, r3, r0
 801189e:	4415      	add	r5, r2
 80118a0:	4082      	lsls	r2, r0
 80118a2:	1a9b      	subs	r3, r3, r2
 80118a4:	aa0c      	add	r2, sp, #48	; 0x30
 80118a6:	9502      	str	r5, [sp, #8]
 80118a8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80118ac:	f1ca 0217 	rsb	r2, sl, #23
 80118b0:	fa43 fb02 	asr.w	fp, r3, r2
 80118b4:	f1bb 0f00 	cmp.w	fp, #0
 80118b8:	dd65      	ble.n	8011986 <__kernel_rem_pio2+0x26e>
 80118ba:	9b02      	ldr	r3, [sp, #8]
 80118bc:	2200      	movs	r2, #0
 80118be:	3301      	adds	r3, #1
 80118c0:	9302      	str	r3, [sp, #8]
 80118c2:	4615      	mov	r5, r2
 80118c4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80118c8:	4294      	cmp	r4, r2
 80118ca:	f300 809f 	bgt.w	8011a0c <__kernel_rem_pio2+0x2f4>
 80118ce:	f1ba 0f00 	cmp.w	sl, #0
 80118d2:	dd07      	ble.n	80118e4 <__kernel_rem_pio2+0x1cc>
 80118d4:	f1ba 0f01 	cmp.w	sl, #1
 80118d8:	f000 80c1 	beq.w	8011a5e <__kernel_rem_pio2+0x346>
 80118dc:	f1ba 0f02 	cmp.w	sl, #2
 80118e0:	f000 80c7 	beq.w	8011a72 <__kernel_rem_pio2+0x35a>
 80118e4:	f1bb 0f02 	cmp.w	fp, #2
 80118e8:	d14d      	bne.n	8011986 <__kernel_rem_pio2+0x26e>
 80118ea:	4632      	mov	r2, r6
 80118ec:	463b      	mov	r3, r7
 80118ee:	4954      	ldr	r1, [pc, #336]	; (8011a40 <__kernel_rem_pio2+0x328>)
 80118f0:	2000      	movs	r0, #0
 80118f2:	f7ee fcd9 	bl	80002a8 <__aeabi_dsub>
 80118f6:	4606      	mov	r6, r0
 80118f8:	460f      	mov	r7, r1
 80118fa:	2d00      	cmp	r5, #0
 80118fc:	d043      	beq.n	8011986 <__kernel_rem_pio2+0x26e>
 80118fe:	4650      	mov	r0, sl
 8011900:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8011a30 <__kernel_rem_pio2+0x318>
 8011904:	f7ff fe58 	bl	80115b8 <scalbn>
 8011908:	4630      	mov	r0, r6
 801190a:	4639      	mov	r1, r7
 801190c:	ec53 2b10 	vmov	r2, r3, d0
 8011910:	f7ee fcca 	bl	80002a8 <__aeabi_dsub>
 8011914:	4606      	mov	r6, r0
 8011916:	460f      	mov	r7, r1
 8011918:	e035      	b.n	8011986 <__kernel_rem_pio2+0x26e>
 801191a:	4b4a      	ldr	r3, [pc, #296]	; (8011a44 <__kernel_rem_pio2+0x32c>)
 801191c:	2200      	movs	r2, #0
 801191e:	4630      	mov	r0, r6
 8011920:	4639      	mov	r1, r7
 8011922:	f7ee fe79 	bl	8000618 <__aeabi_dmul>
 8011926:	f7ef f927 	bl	8000b78 <__aeabi_d2iz>
 801192a:	f7ee fe0b 	bl	8000544 <__aeabi_i2d>
 801192e:	4602      	mov	r2, r0
 8011930:	460b      	mov	r3, r1
 8011932:	ec43 2b18 	vmov	d8, r2, r3
 8011936:	4b44      	ldr	r3, [pc, #272]	; (8011a48 <__kernel_rem_pio2+0x330>)
 8011938:	2200      	movs	r2, #0
 801193a:	f7ee fe6d 	bl	8000618 <__aeabi_dmul>
 801193e:	4602      	mov	r2, r0
 8011940:	460b      	mov	r3, r1
 8011942:	4630      	mov	r0, r6
 8011944:	4639      	mov	r1, r7
 8011946:	f7ee fcaf 	bl	80002a8 <__aeabi_dsub>
 801194a:	f7ef f915 	bl	8000b78 <__aeabi_d2iz>
 801194e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011952:	f84b 0b04 	str.w	r0, [fp], #4
 8011956:	ec51 0b18 	vmov	r0, r1, d8
 801195a:	f7ee fca7 	bl	80002ac <__adddf3>
 801195e:	f109 39ff 	add.w	r9, r9, #4294967295
 8011962:	4606      	mov	r6, r0
 8011964:	460f      	mov	r7, r1
 8011966:	e75b      	b.n	8011820 <__kernel_rem_pio2+0x108>
 8011968:	d106      	bne.n	8011978 <__kernel_rem_pio2+0x260>
 801196a:	1e63      	subs	r3, r4, #1
 801196c:	aa0c      	add	r2, sp, #48	; 0x30
 801196e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011972:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8011976:	e79d      	b.n	80118b4 <__kernel_rem_pio2+0x19c>
 8011978:	4b34      	ldr	r3, [pc, #208]	; (8011a4c <__kernel_rem_pio2+0x334>)
 801197a:	2200      	movs	r2, #0
 801197c:	f7ef f8d2 	bl	8000b24 <__aeabi_dcmpge>
 8011980:	2800      	cmp	r0, #0
 8011982:	d140      	bne.n	8011a06 <__kernel_rem_pio2+0x2ee>
 8011984:	4683      	mov	fp, r0
 8011986:	2200      	movs	r2, #0
 8011988:	2300      	movs	r3, #0
 801198a:	4630      	mov	r0, r6
 801198c:	4639      	mov	r1, r7
 801198e:	f7ef f8ab 	bl	8000ae8 <__aeabi_dcmpeq>
 8011992:	2800      	cmp	r0, #0
 8011994:	f000 80c1 	beq.w	8011b1a <__kernel_rem_pio2+0x402>
 8011998:	1e65      	subs	r5, r4, #1
 801199a:	462b      	mov	r3, r5
 801199c:	2200      	movs	r2, #0
 801199e:	9900      	ldr	r1, [sp, #0]
 80119a0:	428b      	cmp	r3, r1
 80119a2:	da6d      	bge.n	8011a80 <__kernel_rem_pio2+0x368>
 80119a4:	2a00      	cmp	r2, #0
 80119a6:	f000 808a 	beq.w	8011abe <__kernel_rem_pio2+0x3a6>
 80119aa:	ab0c      	add	r3, sp, #48	; 0x30
 80119ac:	f1aa 0a18 	sub.w	sl, sl, #24
 80119b0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	f000 80ae 	beq.w	8011b16 <__kernel_rem_pio2+0x3fe>
 80119ba:	4650      	mov	r0, sl
 80119bc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8011a30 <__kernel_rem_pio2+0x318>
 80119c0:	f7ff fdfa 	bl	80115b8 <scalbn>
 80119c4:	1c6b      	adds	r3, r5, #1
 80119c6:	00da      	lsls	r2, r3, #3
 80119c8:	9205      	str	r2, [sp, #20]
 80119ca:	ec57 6b10 	vmov	r6, r7, d0
 80119ce:	aa70      	add	r2, sp, #448	; 0x1c0
 80119d0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8011a44 <__kernel_rem_pio2+0x32c>
 80119d4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80119d8:	462c      	mov	r4, r5
 80119da:	f04f 0800 	mov.w	r8, #0
 80119de:	2c00      	cmp	r4, #0
 80119e0:	f280 80d4 	bge.w	8011b8c <__kernel_rem_pio2+0x474>
 80119e4:	462c      	mov	r4, r5
 80119e6:	2c00      	cmp	r4, #0
 80119e8:	f2c0 8102 	blt.w	8011bf0 <__kernel_rem_pio2+0x4d8>
 80119ec:	4b18      	ldr	r3, [pc, #96]	; (8011a50 <__kernel_rem_pio2+0x338>)
 80119ee:	461e      	mov	r6, r3
 80119f0:	ab70      	add	r3, sp, #448	; 0x1c0
 80119f2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80119f6:	1b2b      	subs	r3, r5, r4
 80119f8:	f04f 0900 	mov.w	r9, #0
 80119fc:	f04f 0a00 	mov.w	sl, #0
 8011a00:	2700      	movs	r7, #0
 8011a02:	9306      	str	r3, [sp, #24]
 8011a04:	e0e6      	b.n	8011bd4 <__kernel_rem_pio2+0x4bc>
 8011a06:	f04f 0b02 	mov.w	fp, #2
 8011a0a:	e756      	b.n	80118ba <__kernel_rem_pio2+0x1a2>
 8011a0c:	f8d8 3000 	ldr.w	r3, [r8]
 8011a10:	bb05      	cbnz	r5, 8011a54 <__kernel_rem_pio2+0x33c>
 8011a12:	b123      	cbz	r3, 8011a1e <__kernel_rem_pio2+0x306>
 8011a14:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8011a18:	f8c8 3000 	str.w	r3, [r8]
 8011a1c:	2301      	movs	r3, #1
 8011a1e:	3201      	adds	r2, #1
 8011a20:	f108 0804 	add.w	r8, r8, #4
 8011a24:	461d      	mov	r5, r3
 8011a26:	e74f      	b.n	80118c8 <__kernel_rem_pio2+0x1b0>
	...
 8011a34:	3ff00000 	.word	0x3ff00000
 8011a38:	08015798 	.word	0x08015798
 8011a3c:	40200000 	.word	0x40200000
 8011a40:	3ff00000 	.word	0x3ff00000
 8011a44:	3e700000 	.word	0x3e700000
 8011a48:	41700000 	.word	0x41700000
 8011a4c:	3fe00000 	.word	0x3fe00000
 8011a50:	08015758 	.word	0x08015758
 8011a54:	1acb      	subs	r3, r1, r3
 8011a56:	f8c8 3000 	str.w	r3, [r8]
 8011a5a:	462b      	mov	r3, r5
 8011a5c:	e7df      	b.n	8011a1e <__kernel_rem_pio2+0x306>
 8011a5e:	1e62      	subs	r2, r4, #1
 8011a60:	ab0c      	add	r3, sp, #48	; 0x30
 8011a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a66:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011a6a:	a90c      	add	r1, sp, #48	; 0x30
 8011a6c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011a70:	e738      	b.n	80118e4 <__kernel_rem_pio2+0x1cc>
 8011a72:	1e62      	subs	r2, r4, #1
 8011a74:	ab0c      	add	r3, sp, #48	; 0x30
 8011a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a7a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011a7e:	e7f4      	b.n	8011a6a <__kernel_rem_pio2+0x352>
 8011a80:	a90c      	add	r1, sp, #48	; 0x30
 8011a82:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011a86:	3b01      	subs	r3, #1
 8011a88:	430a      	orrs	r2, r1
 8011a8a:	e788      	b.n	801199e <__kernel_rem_pio2+0x286>
 8011a8c:	3301      	adds	r3, #1
 8011a8e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8011a92:	2900      	cmp	r1, #0
 8011a94:	d0fa      	beq.n	8011a8c <__kernel_rem_pio2+0x374>
 8011a96:	9a08      	ldr	r2, [sp, #32]
 8011a98:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8011a9c:	446a      	add	r2, sp
 8011a9e:	3a98      	subs	r2, #152	; 0x98
 8011aa0:	9208      	str	r2, [sp, #32]
 8011aa2:	9a06      	ldr	r2, [sp, #24]
 8011aa4:	a920      	add	r1, sp, #128	; 0x80
 8011aa6:	18a2      	adds	r2, r4, r2
 8011aa8:	18e3      	adds	r3, r4, r3
 8011aaa:	f104 0801 	add.w	r8, r4, #1
 8011aae:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8011ab2:	9302      	str	r3, [sp, #8]
 8011ab4:	9b02      	ldr	r3, [sp, #8]
 8011ab6:	4543      	cmp	r3, r8
 8011ab8:	da04      	bge.n	8011ac4 <__kernel_rem_pio2+0x3ac>
 8011aba:	461c      	mov	r4, r3
 8011abc:	e6a2      	b.n	8011804 <__kernel_rem_pio2+0xec>
 8011abe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011ac0:	2301      	movs	r3, #1
 8011ac2:	e7e4      	b.n	8011a8e <__kernel_rem_pio2+0x376>
 8011ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ac6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8011aca:	f7ee fd3b 	bl	8000544 <__aeabi_i2d>
 8011ace:	e8e5 0102 	strd	r0, r1, [r5], #8
 8011ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ad4:	46ab      	mov	fp, r5
 8011ad6:	461c      	mov	r4, r3
 8011ad8:	f04f 0900 	mov.w	r9, #0
 8011adc:	2600      	movs	r6, #0
 8011ade:	2700      	movs	r7, #0
 8011ae0:	9b05      	ldr	r3, [sp, #20]
 8011ae2:	4599      	cmp	r9, r3
 8011ae4:	dd06      	ble.n	8011af4 <__kernel_rem_pio2+0x3dc>
 8011ae6:	9b08      	ldr	r3, [sp, #32]
 8011ae8:	e8e3 6702 	strd	r6, r7, [r3], #8
 8011aec:	f108 0801 	add.w	r8, r8, #1
 8011af0:	9308      	str	r3, [sp, #32]
 8011af2:	e7df      	b.n	8011ab4 <__kernel_rem_pio2+0x39c>
 8011af4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8011af8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8011afc:	f7ee fd8c 	bl	8000618 <__aeabi_dmul>
 8011b00:	4602      	mov	r2, r0
 8011b02:	460b      	mov	r3, r1
 8011b04:	4630      	mov	r0, r6
 8011b06:	4639      	mov	r1, r7
 8011b08:	f7ee fbd0 	bl	80002ac <__adddf3>
 8011b0c:	f109 0901 	add.w	r9, r9, #1
 8011b10:	4606      	mov	r6, r0
 8011b12:	460f      	mov	r7, r1
 8011b14:	e7e4      	b.n	8011ae0 <__kernel_rem_pio2+0x3c8>
 8011b16:	3d01      	subs	r5, #1
 8011b18:	e747      	b.n	80119aa <__kernel_rem_pio2+0x292>
 8011b1a:	ec47 6b10 	vmov	d0, r6, r7
 8011b1e:	f1ca 0000 	rsb	r0, sl, #0
 8011b22:	f7ff fd49 	bl	80115b8 <scalbn>
 8011b26:	ec57 6b10 	vmov	r6, r7, d0
 8011b2a:	4ba0      	ldr	r3, [pc, #640]	; (8011dac <__kernel_rem_pio2+0x694>)
 8011b2c:	ee10 0a10 	vmov	r0, s0
 8011b30:	2200      	movs	r2, #0
 8011b32:	4639      	mov	r1, r7
 8011b34:	f7ee fff6 	bl	8000b24 <__aeabi_dcmpge>
 8011b38:	b1f8      	cbz	r0, 8011b7a <__kernel_rem_pio2+0x462>
 8011b3a:	4b9d      	ldr	r3, [pc, #628]	; (8011db0 <__kernel_rem_pio2+0x698>)
 8011b3c:	2200      	movs	r2, #0
 8011b3e:	4630      	mov	r0, r6
 8011b40:	4639      	mov	r1, r7
 8011b42:	f7ee fd69 	bl	8000618 <__aeabi_dmul>
 8011b46:	f7ef f817 	bl	8000b78 <__aeabi_d2iz>
 8011b4a:	4680      	mov	r8, r0
 8011b4c:	f7ee fcfa 	bl	8000544 <__aeabi_i2d>
 8011b50:	4b96      	ldr	r3, [pc, #600]	; (8011dac <__kernel_rem_pio2+0x694>)
 8011b52:	2200      	movs	r2, #0
 8011b54:	f7ee fd60 	bl	8000618 <__aeabi_dmul>
 8011b58:	460b      	mov	r3, r1
 8011b5a:	4602      	mov	r2, r0
 8011b5c:	4639      	mov	r1, r7
 8011b5e:	4630      	mov	r0, r6
 8011b60:	f7ee fba2 	bl	80002a8 <__aeabi_dsub>
 8011b64:	f7ef f808 	bl	8000b78 <__aeabi_d2iz>
 8011b68:	1c65      	adds	r5, r4, #1
 8011b6a:	ab0c      	add	r3, sp, #48	; 0x30
 8011b6c:	f10a 0a18 	add.w	sl, sl, #24
 8011b70:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011b74:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8011b78:	e71f      	b.n	80119ba <__kernel_rem_pio2+0x2a2>
 8011b7a:	4630      	mov	r0, r6
 8011b7c:	4639      	mov	r1, r7
 8011b7e:	f7ee fffb 	bl	8000b78 <__aeabi_d2iz>
 8011b82:	ab0c      	add	r3, sp, #48	; 0x30
 8011b84:	4625      	mov	r5, r4
 8011b86:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011b8a:	e716      	b.n	80119ba <__kernel_rem_pio2+0x2a2>
 8011b8c:	ab0c      	add	r3, sp, #48	; 0x30
 8011b8e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011b92:	f7ee fcd7 	bl	8000544 <__aeabi_i2d>
 8011b96:	4632      	mov	r2, r6
 8011b98:	463b      	mov	r3, r7
 8011b9a:	f7ee fd3d 	bl	8000618 <__aeabi_dmul>
 8011b9e:	4642      	mov	r2, r8
 8011ba0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8011ba4:	464b      	mov	r3, r9
 8011ba6:	4630      	mov	r0, r6
 8011ba8:	4639      	mov	r1, r7
 8011baa:	f7ee fd35 	bl	8000618 <__aeabi_dmul>
 8011bae:	3c01      	subs	r4, #1
 8011bb0:	4606      	mov	r6, r0
 8011bb2:	460f      	mov	r7, r1
 8011bb4:	e713      	b.n	80119de <__kernel_rem_pio2+0x2c6>
 8011bb6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8011bba:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8011bbe:	f7ee fd2b 	bl	8000618 <__aeabi_dmul>
 8011bc2:	4602      	mov	r2, r0
 8011bc4:	460b      	mov	r3, r1
 8011bc6:	4648      	mov	r0, r9
 8011bc8:	4651      	mov	r1, sl
 8011bca:	f7ee fb6f 	bl	80002ac <__adddf3>
 8011bce:	3701      	adds	r7, #1
 8011bd0:	4681      	mov	r9, r0
 8011bd2:	468a      	mov	sl, r1
 8011bd4:	9b00      	ldr	r3, [sp, #0]
 8011bd6:	429f      	cmp	r7, r3
 8011bd8:	dc02      	bgt.n	8011be0 <__kernel_rem_pio2+0x4c8>
 8011bda:	9b06      	ldr	r3, [sp, #24]
 8011bdc:	429f      	cmp	r7, r3
 8011bde:	ddea      	ble.n	8011bb6 <__kernel_rem_pio2+0x49e>
 8011be0:	9a06      	ldr	r2, [sp, #24]
 8011be2:	ab48      	add	r3, sp, #288	; 0x120
 8011be4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8011be8:	e9c6 9a00 	strd	r9, sl, [r6]
 8011bec:	3c01      	subs	r4, #1
 8011bee:	e6fa      	b.n	80119e6 <__kernel_rem_pio2+0x2ce>
 8011bf0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8011bf2:	2b02      	cmp	r3, #2
 8011bf4:	dc0b      	bgt.n	8011c0e <__kernel_rem_pio2+0x4f6>
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	dc39      	bgt.n	8011c6e <__kernel_rem_pio2+0x556>
 8011bfa:	d05d      	beq.n	8011cb8 <__kernel_rem_pio2+0x5a0>
 8011bfc:	9b02      	ldr	r3, [sp, #8]
 8011bfe:	f003 0007 	and.w	r0, r3, #7
 8011c02:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8011c06:	ecbd 8b02 	vpop	{d8}
 8011c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c0e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8011c10:	2b03      	cmp	r3, #3
 8011c12:	d1f3      	bne.n	8011bfc <__kernel_rem_pio2+0x4e4>
 8011c14:	9b05      	ldr	r3, [sp, #20]
 8011c16:	9500      	str	r5, [sp, #0]
 8011c18:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8011c1c:	eb0d 0403 	add.w	r4, sp, r3
 8011c20:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8011c24:	46a2      	mov	sl, r4
 8011c26:	9b00      	ldr	r3, [sp, #0]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	f1aa 0a08 	sub.w	sl, sl, #8
 8011c2e:	dc69      	bgt.n	8011d04 <__kernel_rem_pio2+0x5ec>
 8011c30:	46aa      	mov	sl, r5
 8011c32:	f1ba 0f01 	cmp.w	sl, #1
 8011c36:	f1a4 0408 	sub.w	r4, r4, #8
 8011c3a:	f300 8083 	bgt.w	8011d44 <__kernel_rem_pio2+0x62c>
 8011c3e:	9c05      	ldr	r4, [sp, #20]
 8011c40:	ab48      	add	r3, sp, #288	; 0x120
 8011c42:	441c      	add	r4, r3
 8011c44:	2000      	movs	r0, #0
 8011c46:	2100      	movs	r1, #0
 8011c48:	2d01      	cmp	r5, #1
 8011c4a:	f300 809a 	bgt.w	8011d82 <__kernel_rem_pio2+0x66a>
 8011c4e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8011c52:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8011c56:	f1bb 0f00 	cmp.w	fp, #0
 8011c5a:	f040 8098 	bne.w	8011d8e <__kernel_rem_pio2+0x676>
 8011c5e:	9b04      	ldr	r3, [sp, #16]
 8011c60:	e9c3 7800 	strd	r7, r8, [r3]
 8011c64:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8011c68:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8011c6c:	e7c6      	b.n	8011bfc <__kernel_rem_pio2+0x4e4>
 8011c6e:	9e05      	ldr	r6, [sp, #20]
 8011c70:	ab48      	add	r3, sp, #288	; 0x120
 8011c72:	441e      	add	r6, r3
 8011c74:	462c      	mov	r4, r5
 8011c76:	2000      	movs	r0, #0
 8011c78:	2100      	movs	r1, #0
 8011c7a:	2c00      	cmp	r4, #0
 8011c7c:	da33      	bge.n	8011ce6 <__kernel_rem_pio2+0x5ce>
 8011c7e:	f1bb 0f00 	cmp.w	fp, #0
 8011c82:	d036      	beq.n	8011cf2 <__kernel_rem_pio2+0x5da>
 8011c84:	4602      	mov	r2, r0
 8011c86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011c8a:	9c04      	ldr	r4, [sp, #16]
 8011c8c:	e9c4 2300 	strd	r2, r3, [r4]
 8011c90:	4602      	mov	r2, r0
 8011c92:	460b      	mov	r3, r1
 8011c94:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8011c98:	f7ee fb06 	bl	80002a8 <__aeabi_dsub>
 8011c9c:	ae4a      	add	r6, sp, #296	; 0x128
 8011c9e:	2401      	movs	r4, #1
 8011ca0:	42a5      	cmp	r5, r4
 8011ca2:	da29      	bge.n	8011cf8 <__kernel_rem_pio2+0x5e0>
 8011ca4:	f1bb 0f00 	cmp.w	fp, #0
 8011ca8:	d002      	beq.n	8011cb0 <__kernel_rem_pio2+0x598>
 8011caa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011cae:	4619      	mov	r1, r3
 8011cb0:	9b04      	ldr	r3, [sp, #16]
 8011cb2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011cb6:	e7a1      	b.n	8011bfc <__kernel_rem_pio2+0x4e4>
 8011cb8:	9c05      	ldr	r4, [sp, #20]
 8011cba:	ab48      	add	r3, sp, #288	; 0x120
 8011cbc:	441c      	add	r4, r3
 8011cbe:	2000      	movs	r0, #0
 8011cc0:	2100      	movs	r1, #0
 8011cc2:	2d00      	cmp	r5, #0
 8011cc4:	da09      	bge.n	8011cda <__kernel_rem_pio2+0x5c2>
 8011cc6:	f1bb 0f00 	cmp.w	fp, #0
 8011cca:	d002      	beq.n	8011cd2 <__kernel_rem_pio2+0x5ba>
 8011ccc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011cd0:	4619      	mov	r1, r3
 8011cd2:	9b04      	ldr	r3, [sp, #16]
 8011cd4:	e9c3 0100 	strd	r0, r1, [r3]
 8011cd8:	e790      	b.n	8011bfc <__kernel_rem_pio2+0x4e4>
 8011cda:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011cde:	f7ee fae5 	bl	80002ac <__adddf3>
 8011ce2:	3d01      	subs	r5, #1
 8011ce4:	e7ed      	b.n	8011cc2 <__kernel_rem_pio2+0x5aa>
 8011ce6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8011cea:	f7ee fadf 	bl	80002ac <__adddf3>
 8011cee:	3c01      	subs	r4, #1
 8011cf0:	e7c3      	b.n	8011c7a <__kernel_rem_pio2+0x562>
 8011cf2:	4602      	mov	r2, r0
 8011cf4:	460b      	mov	r3, r1
 8011cf6:	e7c8      	b.n	8011c8a <__kernel_rem_pio2+0x572>
 8011cf8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8011cfc:	f7ee fad6 	bl	80002ac <__adddf3>
 8011d00:	3401      	adds	r4, #1
 8011d02:	e7cd      	b.n	8011ca0 <__kernel_rem_pio2+0x588>
 8011d04:	e9da 8900 	ldrd	r8, r9, [sl]
 8011d08:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8011d0c:	9b00      	ldr	r3, [sp, #0]
 8011d0e:	3b01      	subs	r3, #1
 8011d10:	9300      	str	r3, [sp, #0]
 8011d12:	4632      	mov	r2, r6
 8011d14:	463b      	mov	r3, r7
 8011d16:	4640      	mov	r0, r8
 8011d18:	4649      	mov	r1, r9
 8011d1a:	f7ee fac7 	bl	80002ac <__adddf3>
 8011d1e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011d22:	4602      	mov	r2, r0
 8011d24:	460b      	mov	r3, r1
 8011d26:	4640      	mov	r0, r8
 8011d28:	4649      	mov	r1, r9
 8011d2a:	f7ee fabd 	bl	80002a8 <__aeabi_dsub>
 8011d2e:	4632      	mov	r2, r6
 8011d30:	463b      	mov	r3, r7
 8011d32:	f7ee fabb 	bl	80002ac <__adddf3>
 8011d36:	ed9d 7b06 	vldr	d7, [sp, #24]
 8011d3a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011d3e:	ed8a 7b00 	vstr	d7, [sl]
 8011d42:	e770      	b.n	8011c26 <__kernel_rem_pio2+0x50e>
 8011d44:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011d48:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8011d4c:	4640      	mov	r0, r8
 8011d4e:	4632      	mov	r2, r6
 8011d50:	463b      	mov	r3, r7
 8011d52:	4649      	mov	r1, r9
 8011d54:	f7ee faaa 	bl	80002ac <__adddf3>
 8011d58:	e9cd 0100 	strd	r0, r1, [sp]
 8011d5c:	4602      	mov	r2, r0
 8011d5e:	460b      	mov	r3, r1
 8011d60:	4640      	mov	r0, r8
 8011d62:	4649      	mov	r1, r9
 8011d64:	f7ee faa0 	bl	80002a8 <__aeabi_dsub>
 8011d68:	4632      	mov	r2, r6
 8011d6a:	463b      	mov	r3, r7
 8011d6c:	f7ee fa9e 	bl	80002ac <__adddf3>
 8011d70:	ed9d 7b00 	vldr	d7, [sp]
 8011d74:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011d78:	ed84 7b00 	vstr	d7, [r4]
 8011d7c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011d80:	e757      	b.n	8011c32 <__kernel_rem_pio2+0x51a>
 8011d82:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011d86:	f7ee fa91 	bl	80002ac <__adddf3>
 8011d8a:	3d01      	subs	r5, #1
 8011d8c:	e75c      	b.n	8011c48 <__kernel_rem_pio2+0x530>
 8011d8e:	9b04      	ldr	r3, [sp, #16]
 8011d90:	9a04      	ldr	r2, [sp, #16]
 8011d92:	601f      	str	r7, [r3, #0]
 8011d94:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8011d98:	605c      	str	r4, [r3, #4]
 8011d9a:	609d      	str	r5, [r3, #8]
 8011d9c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8011da0:	60d3      	str	r3, [r2, #12]
 8011da2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011da6:	6110      	str	r0, [r2, #16]
 8011da8:	6153      	str	r3, [r2, #20]
 8011daa:	e727      	b.n	8011bfc <__kernel_rem_pio2+0x4e4>
 8011dac:	41700000 	.word	0x41700000
 8011db0:	3e700000 	.word	0x3e700000
 8011db4:	00000000 	.word	0x00000000

08011db8 <floor>:
 8011db8:	ec51 0b10 	vmov	r0, r1, d0
 8011dbc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dc4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8011dc8:	2e13      	cmp	r6, #19
 8011dca:	ee10 5a10 	vmov	r5, s0
 8011dce:	ee10 8a10 	vmov	r8, s0
 8011dd2:	460c      	mov	r4, r1
 8011dd4:	dc31      	bgt.n	8011e3a <floor+0x82>
 8011dd6:	2e00      	cmp	r6, #0
 8011dd8:	da14      	bge.n	8011e04 <floor+0x4c>
 8011dda:	a333      	add	r3, pc, #204	; (adr r3, 8011ea8 <floor+0xf0>)
 8011ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011de0:	f7ee fa64 	bl	80002ac <__adddf3>
 8011de4:	2200      	movs	r2, #0
 8011de6:	2300      	movs	r3, #0
 8011de8:	f7ee fea6 	bl	8000b38 <__aeabi_dcmpgt>
 8011dec:	b138      	cbz	r0, 8011dfe <floor+0x46>
 8011dee:	2c00      	cmp	r4, #0
 8011df0:	da53      	bge.n	8011e9a <floor+0xe2>
 8011df2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8011df6:	4325      	orrs	r5, r4
 8011df8:	d052      	beq.n	8011ea0 <floor+0xe8>
 8011dfa:	4c2d      	ldr	r4, [pc, #180]	; (8011eb0 <floor+0xf8>)
 8011dfc:	2500      	movs	r5, #0
 8011dfe:	4621      	mov	r1, r4
 8011e00:	4628      	mov	r0, r5
 8011e02:	e024      	b.n	8011e4e <floor+0x96>
 8011e04:	4f2b      	ldr	r7, [pc, #172]	; (8011eb4 <floor+0xfc>)
 8011e06:	4137      	asrs	r7, r6
 8011e08:	ea01 0307 	and.w	r3, r1, r7
 8011e0c:	4303      	orrs	r3, r0
 8011e0e:	d01e      	beq.n	8011e4e <floor+0x96>
 8011e10:	a325      	add	r3, pc, #148	; (adr r3, 8011ea8 <floor+0xf0>)
 8011e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e16:	f7ee fa49 	bl	80002ac <__adddf3>
 8011e1a:	2200      	movs	r2, #0
 8011e1c:	2300      	movs	r3, #0
 8011e1e:	f7ee fe8b 	bl	8000b38 <__aeabi_dcmpgt>
 8011e22:	2800      	cmp	r0, #0
 8011e24:	d0eb      	beq.n	8011dfe <floor+0x46>
 8011e26:	2c00      	cmp	r4, #0
 8011e28:	bfbe      	ittt	lt
 8011e2a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8011e2e:	4133      	asrlt	r3, r6
 8011e30:	18e4      	addlt	r4, r4, r3
 8011e32:	ea24 0407 	bic.w	r4, r4, r7
 8011e36:	2500      	movs	r5, #0
 8011e38:	e7e1      	b.n	8011dfe <floor+0x46>
 8011e3a:	2e33      	cmp	r6, #51	; 0x33
 8011e3c:	dd0b      	ble.n	8011e56 <floor+0x9e>
 8011e3e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8011e42:	d104      	bne.n	8011e4e <floor+0x96>
 8011e44:	ee10 2a10 	vmov	r2, s0
 8011e48:	460b      	mov	r3, r1
 8011e4a:	f7ee fa2f 	bl	80002ac <__adddf3>
 8011e4e:	ec41 0b10 	vmov	d0, r0, r1
 8011e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e56:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8011e5a:	f04f 37ff 	mov.w	r7, #4294967295
 8011e5e:	40df      	lsrs	r7, r3
 8011e60:	4238      	tst	r0, r7
 8011e62:	d0f4      	beq.n	8011e4e <floor+0x96>
 8011e64:	a310      	add	r3, pc, #64	; (adr r3, 8011ea8 <floor+0xf0>)
 8011e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e6a:	f7ee fa1f 	bl	80002ac <__adddf3>
 8011e6e:	2200      	movs	r2, #0
 8011e70:	2300      	movs	r3, #0
 8011e72:	f7ee fe61 	bl	8000b38 <__aeabi_dcmpgt>
 8011e76:	2800      	cmp	r0, #0
 8011e78:	d0c1      	beq.n	8011dfe <floor+0x46>
 8011e7a:	2c00      	cmp	r4, #0
 8011e7c:	da0a      	bge.n	8011e94 <floor+0xdc>
 8011e7e:	2e14      	cmp	r6, #20
 8011e80:	d101      	bne.n	8011e86 <floor+0xce>
 8011e82:	3401      	adds	r4, #1
 8011e84:	e006      	b.n	8011e94 <floor+0xdc>
 8011e86:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8011e8a:	2301      	movs	r3, #1
 8011e8c:	40b3      	lsls	r3, r6
 8011e8e:	441d      	add	r5, r3
 8011e90:	45a8      	cmp	r8, r5
 8011e92:	d8f6      	bhi.n	8011e82 <floor+0xca>
 8011e94:	ea25 0507 	bic.w	r5, r5, r7
 8011e98:	e7b1      	b.n	8011dfe <floor+0x46>
 8011e9a:	2500      	movs	r5, #0
 8011e9c:	462c      	mov	r4, r5
 8011e9e:	e7ae      	b.n	8011dfe <floor+0x46>
 8011ea0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8011ea4:	e7ab      	b.n	8011dfe <floor+0x46>
 8011ea6:	bf00      	nop
 8011ea8:	8800759c 	.word	0x8800759c
 8011eac:	7e37e43c 	.word	0x7e37e43c
 8011eb0:	bff00000 	.word	0xbff00000
 8011eb4:	000fffff 	.word	0x000fffff

08011eb8 <realloc>:
 8011eb8:	4b02      	ldr	r3, [pc, #8]	; (8011ec4 <realloc+0xc>)
 8011eba:	460a      	mov	r2, r1
 8011ebc:	4601      	mov	r1, r0
 8011ebe:	6818      	ldr	r0, [r3, #0]
 8011ec0:	f000 b802 	b.w	8011ec8 <_realloc_r>
 8011ec4:	20000088 	.word	0x20000088

08011ec8 <_realloc_r>:
 8011ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ecc:	4680      	mov	r8, r0
 8011ece:	4614      	mov	r4, r2
 8011ed0:	460e      	mov	r6, r1
 8011ed2:	b921      	cbnz	r1, 8011ede <_realloc_r+0x16>
 8011ed4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ed8:	4611      	mov	r1, r2
 8011eda:	f001 be87 	b.w	8013bec <_malloc_r>
 8011ede:	b92a      	cbnz	r2, 8011eec <_realloc_r+0x24>
 8011ee0:	f001 fe10 	bl	8013b04 <_free_r>
 8011ee4:	4625      	mov	r5, r4
 8011ee6:	4628      	mov	r0, r5
 8011ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011eec:	f002 fa86 	bl	80143fc <_malloc_usable_size_r>
 8011ef0:	4284      	cmp	r4, r0
 8011ef2:	4607      	mov	r7, r0
 8011ef4:	d802      	bhi.n	8011efc <_realloc_r+0x34>
 8011ef6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011efa:	d812      	bhi.n	8011f22 <_realloc_r+0x5a>
 8011efc:	4621      	mov	r1, r4
 8011efe:	4640      	mov	r0, r8
 8011f00:	f001 fe74 	bl	8013bec <_malloc_r>
 8011f04:	4605      	mov	r5, r0
 8011f06:	2800      	cmp	r0, #0
 8011f08:	d0ed      	beq.n	8011ee6 <_realloc_r+0x1e>
 8011f0a:	42bc      	cmp	r4, r7
 8011f0c:	4622      	mov	r2, r4
 8011f0e:	4631      	mov	r1, r6
 8011f10:	bf28      	it	cs
 8011f12:	463a      	movcs	r2, r7
 8011f14:	f000 ff6b 	bl	8012dee <memcpy>
 8011f18:	4631      	mov	r1, r6
 8011f1a:	4640      	mov	r0, r8
 8011f1c:	f001 fdf2 	bl	8013b04 <_free_r>
 8011f20:	e7e1      	b.n	8011ee6 <_realloc_r+0x1e>
 8011f22:	4635      	mov	r5, r6
 8011f24:	e7df      	b.n	8011ee6 <_realloc_r+0x1e>

08011f26 <__cvt>:
 8011f26:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011f2a:	ec55 4b10 	vmov	r4, r5, d0
 8011f2e:	2d00      	cmp	r5, #0
 8011f30:	460e      	mov	r6, r1
 8011f32:	4619      	mov	r1, r3
 8011f34:	462b      	mov	r3, r5
 8011f36:	bfbb      	ittet	lt
 8011f38:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011f3c:	461d      	movlt	r5, r3
 8011f3e:	2300      	movge	r3, #0
 8011f40:	232d      	movlt	r3, #45	; 0x2d
 8011f42:	700b      	strb	r3, [r1, #0]
 8011f44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011f46:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011f4a:	4691      	mov	r9, r2
 8011f4c:	f023 0820 	bic.w	r8, r3, #32
 8011f50:	bfbc      	itt	lt
 8011f52:	4622      	movlt	r2, r4
 8011f54:	4614      	movlt	r4, r2
 8011f56:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011f5a:	d005      	beq.n	8011f68 <__cvt+0x42>
 8011f5c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011f60:	d100      	bne.n	8011f64 <__cvt+0x3e>
 8011f62:	3601      	adds	r6, #1
 8011f64:	2102      	movs	r1, #2
 8011f66:	e000      	b.n	8011f6a <__cvt+0x44>
 8011f68:	2103      	movs	r1, #3
 8011f6a:	ab03      	add	r3, sp, #12
 8011f6c:	9301      	str	r3, [sp, #4]
 8011f6e:	ab02      	add	r3, sp, #8
 8011f70:	9300      	str	r3, [sp, #0]
 8011f72:	ec45 4b10 	vmov	d0, r4, r5
 8011f76:	4653      	mov	r3, sl
 8011f78:	4632      	mov	r2, r6
 8011f7a:	f000 ffd1 	bl	8012f20 <_dtoa_r>
 8011f7e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011f82:	4607      	mov	r7, r0
 8011f84:	d102      	bne.n	8011f8c <__cvt+0x66>
 8011f86:	f019 0f01 	tst.w	r9, #1
 8011f8a:	d022      	beq.n	8011fd2 <__cvt+0xac>
 8011f8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011f90:	eb07 0906 	add.w	r9, r7, r6
 8011f94:	d110      	bne.n	8011fb8 <__cvt+0x92>
 8011f96:	783b      	ldrb	r3, [r7, #0]
 8011f98:	2b30      	cmp	r3, #48	; 0x30
 8011f9a:	d10a      	bne.n	8011fb2 <__cvt+0x8c>
 8011f9c:	2200      	movs	r2, #0
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	4620      	mov	r0, r4
 8011fa2:	4629      	mov	r1, r5
 8011fa4:	f7ee fda0 	bl	8000ae8 <__aeabi_dcmpeq>
 8011fa8:	b918      	cbnz	r0, 8011fb2 <__cvt+0x8c>
 8011faa:	f1c6 0601 	rsb	r6, r6, #1
 8011fae:	f8ca 6000 	str.w	r6, [sl]
 8011fb2:	f8da 3000 	ldr.w	r3, [sl]
 8011fb6:	4499      	add	r9, r3
 8011fb8:	2200      	movs	r2, #0
 8011fba:	2300      	movs	r3, #0
 8011fbc:	4620      	mov	r0, r4
 8011fbe:	4629      	mov	r1, r5
 8011fc0:	f7ee fd92 	bl	8000ae8 <__aeabi_dcmpeq>
 8011fc4:	b108      	cbz	r0, 8011fca <__cvt+0xa4>
 8011fc6:	f8cd 900c 	str.w	r9, [sp, #12]
 8011fca:	2230      	movs	r2, #48	; 0x30
 8011fcc:	9b03      	ldr	r3, [sp, #12]
 8011fce:	454b      	cmp	r3, r9
 8011fd0:	d307      	bcc.n	8011fe2 <__cvt+0xbc>
 8011fd2:	9b03      	ldr	r3, [sp, #12]
 8011fd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011fd6:	1bdb      	subs	r3, r3, r7
 8011fd8:	4638      	mov	r0, r7
 8011fda:	6013      	str	r3, [r2, #0]
 8011fdc:	b004      	add	sp, #16
 8011fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011fe2:	1c59      	adds	r1, r3, #1
 8011fe4:	9103      	str	r1, [sp, #12]
 8011fe6:	701a      	strb	r2, [r3, #0]
 8011fe8:	e7f0      	b.n	8011fcc <__cvt+0xa6>

08011fea <__exponent>:
 8011fea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011fec:	4603      	mov	r3, r0
 8011fee:	2900      	cmp	r1, #0
 8011ff0:	bfb8      	it	lt
 8011ff2:	4249      	neglt	r1, r1
 8011ff4:	f803 2b02 	strb.w	r2, [r3], #2
 8011ff8:	bfb4      	ite	lt
 8011ffa:	222d      	movlt	r2, #45	; 0x2d
 8011ffc:	222b      	movge	r2, #43	; 0x2b
 8011ffe:	2909      	cmp	r1, #9
 8012000:	7042      	strb	r2, [r0, #1]
 8012002:	dd2a      	ble.n	801205a <__exponent+0x70>
 8012004:	f10d 0207 	add.w	r2, sp, #7
 8012008:	4617      	mov	r7, r2
 801200a:	260a      	movs	r6, #10
 801200c:	4694      	mov	ip, r2
 801200e:	fb91 f5f6 	sdiv	r5, r1, r6
 8012012:	fb06 1415 	mls	r4, r6, r5, r1
 8012016:	3430      	adds	r4, #48	; 0x30
 8012018:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801201c:	460c      	mov	r4, r1
 801201e:	2c63      	cmp	r4, #99	; 0x63
 8012020:	f102 32ff 	add.w	r2, r2, #4294967295
 8012024:	4629      	mov	r1, r5
 8012026:	dcf1      	bgt.n	801200c <__exponent+0x22>
 8012028:	3130      	adds	r1, #48	; 0x30
 801202a:	f1ac 0402 	sub.w	r4, ip, #2
 801202e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012032:	1c41      	adds	r1, r0, #1
 8012034:	4622      	mov	r2, r4
 8012036:	42ba      	cmp	r2, r7
 8012038:	d30a      	bcc.n	8012050 <__exponent+0x66>
 801203a:	f10d 0209 	add.w	r2, sp, #9
 801203e:	eba2 020c 	sub.w	r2, r2, ip
 8012042:	42bc      	cmp	r4, r7
 8012044:	bf88      	it	hi
 8012046:	2200      	movhi	r2, #0
 8012048:	4413      	add	r3, r2
 801204a:	1a18      	subs	r0, r3, r0
 801204c:	b003      	add	sp, #12
 801204e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012050:	f812 5b01 	ldrb.w	r5, [r2], #1
 8012054:	f801 5f01 	strb.w	r5, [r1, #1]!
 8012058:	e7ed      	b.n	8012036 <__exponent+0x4c>
 801205a:	2330      	movs	r3, #48	; 0x30
 801205c:	3130      	adds	r1, #48	; 0x30
 801205e:	7083      	strb	r3, [r0, #2]
 8012060:	70c1      	strb	r1, [r0, #3]
 8012062:	1d03      	adds	r3, r0, #4
 8012064:	e7f1      	b.n	801204a <__exponent+0x60>
	...

08012068 <_printf_float>:
 8012068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801206c:	ed2d 8b02 	vpush	{d8}
 8012070:	b08d      	sub	sp, #52	; 0x34
 8012072:	460c      	mov	r4, r1
 8012074:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012078:	4616      	mov	r6, r2
 801207a:	461f      	mov	r7, r3
 801207c:	4605      	mov	r5, r0
 801207e:	f000 fde9 	bl	8012c54 <_localeconv_r>
 8012082:	f8d0 a000 	ldr.w	sl, [r0]
 8012086:	4650      	mov	r0, sl
 8012088:	f7ee f902 	bl	8000290 <strlen>
 801208c:	2300      	movs	r3, #0
 801208e:	930a      	str	r3, [sp, #40]	; 0x28
 8012090:	6823      	ldr	r3, [r4, #0]
 8012092:	9305      	str	r3, [sp, #20]
 8012094:	f8d8 3000 	ldr.w	r3, [r8]
 8012098:	f894 b018 	ldrb.w	fp, [r4, #24]
 801209c:	3307      	adds	r3, #7
 801209e:	f023 0307 	bic.w	r3, r3, #7
 80120a2:	f103 0208 	add.w	r2, r3, #8
 80120a6:	f8c8 2000 	str.w	r2, [r8]
 80120aa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80120ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80120b2:	9307      	str	r3, [sp, #28]
 80120b4:	f8cd 8018 	str.w	r8, [sp, #24]
 80120b8:	ee08 0a10 	vmov	s16, r0
 80120bc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80120c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80120c4:	4b9e      	ldr	r3, [pc, #632]	; (8012340 <_printf_float+0x2d8>)
 80120c6:	f04f 32ff 	mov.w	r2, #4294967295
 80120ca:	f7ee fd3f 	bl	8000b4c <__aeabi_dcmpun>
 80120ce:	bb88      	cbnz	r0, 8012134 <_printf_float+0xcc>
 80120d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80120d4:	4b9a      	ldr	r3, [pc, #616]	; (8012340 <_printf_float+0x2d8>)
 80120d6:	f04f 32ff 	mov.w	r2, #4294967295
 80120da:	f7ee fd19 	bl	8000b10 <__aeabi_dcmple>
 80120de:	bb48      	cbnz	r0, 8012134 <_printf_float+0xcc>
 80120e0:	2200      	movs	r2, #0
 80120e2:	2300      	movs	r3, #0
 80120e4:	4640      	mov	r0, r8
 80120e6:	4649      	mov	r1, r9
 80120e8:	f7ee fd08 	bl	8000afc <__aeabi_dcmplt>
 80120ec:	b110      	cbz	r0, 80120f4 <_printf_float+0x8c>
 80120ee:	232d      	movs	r3, #45	; 0x2d
 80120f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80120f4:	4a93      	ldr	r2, [pc, #588]	; (8012344 <_printf_float+0x2dc>)
 80120f6:	4b94      	ldr	r3, [pc, #592]	; (8012348 <_printf_float+0x2e0>)
 80120f8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80120fc:	bf94      	ite	ls
 80120fe:	4690      	movls	r8, r2
 8012100:	4698      	movhi	r8, r3
 8012102:	2303      	movs	r3, #3
 8012104:	6123      	str	r3, [r4, #16]
 8012106:	9b05      	ldr	r3, [sp, #20]
 8012108:	f023 0304 	bic.w	r3, r3, #4
 801210c:	6023      	str	r3, [r4, #0]
 801210e:	f04f 0900 	mov.w	r9, #0
 8012112:	9700      	str	r7, [sp, #0]
 8012114:	4633      	mov	r3, r6
 8012116:	aa0b      	add	r2, sp, #44	; 0x2c
 8012118:	4621      	mov	r1, r4
 801211a:	4628      	mov	r0, r5
 801211c:	f000 f9da 	bl	80124d4 <_printf_common>
 8012120:	3001      	adds	r0, #1
 8012122:	f040 8090 	bne.w	8012246 <_printf_float+0x1de>
 8012126:	f04f 30ff 	mov.w	r0, #4294967295
 801212a:	b00d      	add	sp, #52	; 0x34
 801212c:	ecbd 8b02 	vpop	{d8}
 8012130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012134:	4642      	mov	r2, r8
 8012136:	464b      	mov	r3, r9
 8012138:	4640      	mov	r0, r8
 801213a:	4649      	mov	r1, r9
 801213c:	f7ee fd06 	bl	8000b4c <__aeabi_dcmpun>
 8012140:	b140      	cbz	r0, 8012154 <_printf_float+0xec>
 8012142:	464b      	mov	r3, r9
 8012144:	2b00      	cmp	r3, #0
 8012146:	bfbc      	itt	lt
 8012148:	232d      	movlt	r3, #45	; 0x2d
 801214a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801214e:	4a7f      	ldr	r2, [pc, #508]	; (801234c <_printf_float+0x2e4>)
 8012150:	4b7f      	ldr	r3, [pc, #508]	; (8012350 <_printf_float+0x2e8>)
 8012152:	e7d1      	b.n	80120f8 <_printf_float+0x90>
 8012154:	6863      	ldr	r3, [r4, #4]
 8012156:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801215a:	9206      	str	r2, [sp, #24]
 801215c:	1c5a      	adds	r2, r3, #1
 801215e:	d13f      	bne.n	80121e0 <_printf_float+0x178>
 8012160:	2306      	movs	r3, #6
 8012162:	6063      	str	r3, [r4, #4]
 8012164:	9b05      	ldr	r3, [sp, #20]
 8012166:	6861      	ldr	r1, [r4, #4]
 8012168:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801216c:	2300      	movs	r3, #0
 801216e:	9303      	str	r3, [sp, #12]
 8012170:	ab0a      	add	r3, sp, #40	; 0x28
 8012172:	e9cd b301 	strd	fp, r3, [sp, #4]
 8012176:	ab09      	add	r3, sp, #36	; 0x24
 8012178:	ec49 8b10 	vmov	d0, r8, r9
 801217c:	9300      	str	r3, [sp, #0]
 801217e:	6022      	str	r2, [r4, #0]
 8012180:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012184:	4628      	mov	r0, r5
 8012186:	f7ff fece 	bl	8011f26 <__cvt>
 801218a:	9b06      	ldr	r3, [sp, #24]
 801218c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801218e:	2b47      	cmp	r3, #71	; 0x47
 8012190:	4680      	mov	r8, r0
 8012192:	d108      	bne.n	80121a6 <_printf_float+0x13e>
 8012194:	1cc8      	adds	r0, r1, #3
 8012196:	db02      	blt.n	801219e <_printf_float+0x136>
 8012198:	6863      	ldr	r3, [r4, #4]
 801219a:	4299      	cmp	r1, r3
 801219c:	dd41      	ble.n	8012222 <_printf_float+0x1ba>
 801219e:	f1ab 0302 	sub.w	r3, fp, #2
 80121a2:	fa5f fb83 	uxtb.w	fp, r3
 80121a6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80121aa:	d820      	bhi.n	80121ee <_printf_float+0x186>
 80121ac:	3901      	subs	r1, #1
 80121ae:	465a      	mov	r2, fp
 80121b0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80121b4:	9109      	str	r1, [sp, #36]	; 0x24
 80121b6:	f7ff ff18 	bl	8011fea <__exponent>
 80121ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80121bc:	1813      	adds	r3, r2, r0
 80121be:	2a01      	cmp	r2, #1
 80121c0:	4681      	mov	r9, r0
 80121c2:	6123      	str	r3, [r4, #16]
 80121c4:	dc02      	bgt.n	80121cc <_printf_float+0x164>
 80121c6:	6822      	ldr	r2, [r4, #0]
 80121c8:	07d2      	lsls	r2, r2, #31
 80121ca:	d501      	bpl.n	80121d0 <_printf_float+0x168>
 80121cc:	3301      	adds	r3, #1
 80121ce:	6123      	str	r3, [r4, #16]
 80121d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d09c      	beq.n	8012112 <_printf_float+0xaa>
 80121d8:	232d      	movs	r3, #45	; 0x2d
 80121da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80121de:	e798      	b.n	8012112 <_printf_float+0xaa>
 80121e0:	9a06      	ldr	r2, [sp, #24]
 80121e2:	2a47      	cmp	r2, #71	; 0x47
 80121e4:	d1be      	bne.n	8012164 <_printf_float+0xfc>
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d1bc      	bne.n	8012164 <_printf_float+0xfc>
 80121ea:	2301      	movs	r3, #1
 80121ec:	e7b9      	b.n	8012162 <_printf_float+0xfa>
 80121ee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80121f2:	d118      	bne.n	8012226 <_printf_float+0x1be>
 80121f4:	2900      	cmp	r1, #0
 80121f6:	6863      	ldr	r3, [r4, #4]
 80121f8:	dd0b      	ble.n	8012212 <_printf_float+0x1aa>
 80121fa:	6121      	str	r1, [r4, #16]
 80121fc:	b913      	cbnz	r3, 8012204 <_printf_float+0x19c>
 80121fe:	6822      	ldr	r2, [r4, #0]
 8012200:	07d0      	lsls	r0, r2, #31
 8012202:	d502      	bpl.n	801220a <_printf_float+0x1a2>
 8012204:	3301      	adds	r3, #1
 8012206:	440b      	add	r3, r1
 8012208:	6123      	str	r3, [r4, #16]
 801220a:	65a1      	str	r1, [r4, #88]	; 0x58
 801220c:	f04f 0900 	mov.w	r9, #0
 8012210:	e7de      	b.n	80121d0 <_printf_float+0x168>
 8012212:	b913      	cbnz	r3, 801221a <_printf_float+0x1b2>
 8012214:	6822      	ldr	r2, [r4, #0]
 8012216:	07d2      	lsls	r2, r2, #31
 8012218:	d501      	bpl.n	801221e <_printf_float+0x1b6>
 801221a:	3302      	adds	r3, #2
 801221c:	e7f4      	b.n	8012208 <_printf_float+0x1a0>
 801221e:	2301      	movs	r3, #1
 8012220:	e7f2      	b.n	8012208 <_printf_float+0x1a0>
 8012222:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8012226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012228:	4299      	cmp	r1, r3
 801222a:	db05      	blt.n	8012238 <_printf_float+0x1d0>
 801222c:	6823      	ldr	r3, [r4, #0]
 801222e:	6121      	str	r1, [r4, #16]
 8012230:	07d8      	lsls	r0, r3, #31
 8012232:	d5ea      	bpl.n	801220a <_printf_float+0x1a2>
 8012234:	1c4b      	adds	r3, r1, #1
 8012236:	e7e7      	b.n	8012208 <_printf_float+0x1a0>
 8012238:	2900      	cmp	r1, #0
 801223a:	bfd4      	ite	le
 801223c:	f1c1 0202 	rsble	r2, r1, #2
 8012240:	2201      	movgt	r2, #1
 8012242:	4413      	add	r3, r2
 8012244:	e7e0      	b.n	8012208 <_printf_float+0x1a0>
 8012246:	6823      	ldr	r3, [r4, #0]
 8012248:	055a      	lsls	r2, r3, #21
 801224a:	d407      	bmi.n	801225c <_printf_float+0x1f4>
 801224c:	6923      	ldr	r3, [r4, #16]
 801224e:	4642      	mov	r2, r8
 8012250:	4631      	mov	r1, r6
 8012252:	4628      	mov	r0, r5
 8012254:	47b8      	blx	r7
 8012256:	3001      	adds	r0, #1
 8012258:	d12c      	bne.n	80122b4 <_printf_float+0x24c>
 801225a:	e764      	b.n	8012126 <_printf_float+0xbe>
 801225c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012260:	f240 80e0 	bls.w	8012424 <_printf_float+0x3bc>
 8012264:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012268:	2200      	movs	r2, #0
 801226a:	2300      	movs	r3, #0
 801226c:	f7ee fc3c 	bl	8000ae8 <__aeabi_dcmpeq>
 8012270:	2800      	cmp	r0, #0
 8012272:	d034      	beq.n	80122de <_printf_float+0x276>
 8012274:	4a37      	ldr	r2, [pc, #220]	; (8012354 <_printf_float+0x2ec>)
 8012276:	2301      	movs	r3, #1
 8012278:	4631      	mov	r1, r6
 801227a:	4628      	mov	r0, r5
 801227c:	47b8      	blx	r7
 801227e:	3001      	adds	r0, #1
 8012280:	f43f af51 	beq.w	8012126 <_printf_float+0xbe>
 8012284:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012288:	429a      	cmp	r2, r3
 801228a:	db02      	blt.n	8012292 <_printf_float+0x22a>
 801228c:	6823      	ldr	r3, [r4, #0]
 801228e:	07d8      	lsls	r0, r3, #31
 8012290:	d510      	bpl.n	80122b4 <_printf_float+0x24c>
 8012292:	ee18 3a10 	vmov	r3, s16
 8012296:	4652      	mov	r2, sl
 8012298:	4631      	mov	r1, r6
 801229a:	4628      	mov	r0, r5
 801229c:	47b8      	blx	r7
 801229e:	3001      	adds	r0, #1
 80122a0:	f43f af41 	beq.w	8012126 <_printf_float+0xbe>
 80122a4:	f04f 0800 	mov.w	r8, #0
 80122a8:	f104 091a 	add.w	r9, r4, #26
 80122ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122ae:	3b01      	subs	r3, #1
 80122b0:	4543      	cmp	r3, r8
 80122b2:	dc09      	bgt.n	80122c8 <_printf_float+0x260>
 80122b4:	6823      	ldr	r3, [r4, #0]
 80122b6:	079b      	lsls	r3, r3, #30
 80122b8:	f100 8107 	bmi.w	80124ca <_printf_float+0x462>
 80122bc:	68e0      	ldr	r0, [r4, #12]
 80122be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80122c0:	4298      	cmp	r0, r3
 80122c2:	bfb8      	it	lt
 80122c4:	4618      	movlt	r0, r3
 80122c6:	e730      	b.n	801212a <_printf_float+0xc2>
 80122c8:	2301      	movs	r3, #1
 80122ca:	464a      	mov	r2, r9
 80122cc:	4631      	mov	r1, r6
 80122ce:	4628      	mov	r0, r5
 80122d0:	47b8      	blx	r7
 80122d2:	3001      	adds	r0, #1
 80122d4:	f43f af27 	beq.w	8012126 <_printf_float+0xbe>
 80122d8:	f108 0801 	add.w	r8, r8, #1
 80122dc:	e7e6      	b.n	80122ac <_printf_float+0x244>
 80122de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	dc39      	bgt.n	8012358 <_printf_float+0x2f0>
 80122e4:	4a1b      	ldr	r2, [pc, #108]	; (8012354 <_printf_float+0x2ec>)
 80122e6:	2301      	movs	r3, #1
 80122e8:	4631      	mov	r1, r6
 80122ea:	4628      	mov	r0, r5
 80122ec:	47b8      	blx	r7
 80122ee:	3001      	adds	r0, #1
 80122f0:	f43f af19 	beq.w	8012126 <_printf_float+0xbe>
 80122f4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80122f8:	4313      	orrs	r3, r2
 80122fa:	d102      	bne.n	8012302 <_printf_float+0x29a>
 80122fc:	6823      	ldr	r3, [r4, #0]
 80122fe:	07d9      	lsls	r1, r3, #31
 8012300:	d5d8      	bpl.n	80122b4 <_printf_float+0x24c>
 8012302:	ee18 3a10 	vmov	r3, s16
 8012306:	4652      	mov	r2, sl
 8012308:	4631      	mov	r1, r6
 801230a:	4628      	mov	r0, r5
 801230c:	47b8      	blx	r7
 801230e:	3001      	adds	r0, #1
 8012310:	f43f af09 	beq.w	8012126 <_printf_float+0xbe>
 8012314:	f04f 0900 	mov.w	r9, #0
 8012318:	f104 0a1a 	add.w	sl, r4, #26
 801231c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801231e:	425b      	negs	r3, r3
 8012320:	454b      	cmp	r3, r9
 8012322:	dc01      	bgt.n	8012328 <_printf_float+0x2c0>
 8012324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012326:	e792      	b.n	801224e <_printf_float+0x1e6>
 8012328:	2301      	movs	r3, #1
 801232a:	4652      	mov	r2, sl
 801232c:	4631      	mov	r1, r6
 801232e:	4628      	mov	r0, r5
 8012330:	47b8      	blx	r7
 8012332:	3001      	adds	r0, #1
 8012334:	f43f aef7 	beq.w	8012126 <_printf_float+0xbe>
 8012338:	f109 0901 	add.w	r9, r9, #1
 801233c:	e7ee      	b.n	801231c <_printf_float+0x2b4>
 801233e:	bf00      	nop
 8012340:	7fefffff 	.word	0x7fefffff
 8012344:	080157a8 	.word	0x080157a8
 8012348:	080157ac 	.word	0x080157ac
 801234c:	080157b0 	.word	0x080157b0
 8012350:	080157b4 	.word	0x080157b4
 8012354:	080157b8 	.word	0x080157b8
 8012358:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801235a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801235c:	429a      	cmp	r2, r3
 801235e:	bfa8      	it	ge
 8012360:	461a      	movge	r2, r3
 8012362:	2a00      	cmp	r2, #0
 8012364:	4691      	mov	r9, r2
 8012366:	dc37      	bgt.n	80123d8 <_printf_float+0x370>
 8012368:	f04f 0b00 	mov.w	fp, #0
 801236c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012370:	f104 021a 	add.w	r2, r4, #26
 8012374:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012376:	9305      	str	r3, [sp, #20]
 8012378:	eba3 0309 	sub.w	r3, r3, r9
 801237c:	455b      	cmp	r3, fp
 801237e:	dc33      	bgt.n	80123e8 <_printf_float+0x380>
 8012380:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012384:	429a      	cmp	r2, r3
 8012386:	db3b      	blt.n	8012400 <_printf_float+0x398>
 8012388:	6823      	ldr	r3, [r4, #0]
 801238a:	07da      	lsls	r2, r3, #31
 801238c:	d438      	bmi.n	8012400 <_printf_float+0x398>
 801238e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012392:	eba2 0903 	sub.w	r9, r2, r3
 8012396:	9b05      	ldr	r3, [sp, #20]
 8012398:	1ad2      	subs	r2, r2, r3
 801239a:	4591      	cmp	r9, r2
 801239c:	bfa8      	it	ge
 801239e:	4691      	movge	r9, r2
 80123a0:	f1b9 0f00 	cmp.w	r9, #0
 80123a4:	dc35      	bgt.n	8012412 <_printf_float+0x3aa>
 80123a6:	f04f 0800 	mov.w	r8, #0
 80123aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80123ae:	f104 0a1a 	add.w	sl, r4, #26
 80123b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80123b6:	1a9b      	subs	r3, r3, r2
 80123b8:	eba3 0309 	sub.w	r3, r3, r9
 80123bc:	4543      	cmp	r3, r8
 80123be:	f77f af79 	ble.w	80122b4 <_printf_float+0x24c>
 80123c2:	2301      	movs	r3, #1
 80123c4:	4652      	mov	r2, sl
 80123c6:	4631      	mov	r1, r6
 80123c8:	4628      	mov	r0, r5
 80123ca:	47b8      	blx	r7
 80123cc:	3001      	adds	r0, #1
 80123ce:	f43f aeaa 	beq.w	8012126 <_printf_float+0xbe>
 80123d2:	f108 0801 	add.w	r8, r8, #1
 80123d6:	e7ec      	b.n	80123b2 <_printf_float+0x34a>
 80123d8:	4613      	mov	r3, r2
 80123da:	4631      	mov	r1, r6
 80123dc:	4642      	mov	r2, r8
 80123de:	4628      	mov	r0, r5
 80123e0:	47b8      	blx	r7
 80123e2:	3001      	adds	r0, #1
 80123e4:	d1c0      	bne.n	8012368 <_printf_float+0x300>
 80123e6:	e69e      	b.n	8012126 <_printf_float+0xbe>
 80123e8:	2301      	movs	r3, #1
 80123ea:	4631      	mov	r1, r6
 80123ec:	4628      	mov	r0, r5
 80123ee:	9205      	str	r2, [sp, #20]
 80123f0:	47b8      	blx	r7
 80123f2:	3001      	adds	r0, #1
 80123f4:	f43f ae97 	beq.w	8012126 <_printf_float+0xbe>
 80123f8:	9a05      	ldr	r2, [sp, #20]
 80123fa:	f10b 0b01 	add.w	fp, fp, #1
 80123fe:	e7b9      	b.n	8012374 <_printf_float+0x30c>
 8012400:	ee18 3a10 	vmov	r3, s16
 8012404:	4652      	mov	r2, sl
 8012406:	4631      	mov	r1, r6
 8012408:	4628      	mov	r0, r5
 801240a:	47b8      	blx	r7
 801240c:	3001      	adds	r0, #1
 801240e:	d1be      	bne.n	801238e <_printf_float+0x326>
 8012410:	e689      	b.n	8012126 <_printf_float+0xbe>
 8012412:	9a05      	ldr	r2, [sp, #20]
 8012414:	464b      	mov	r3, r9
 8012416:	4442      	add	r2, r8
 8012418:	4631      	mov	r1, r6
 801241a:	4628      	mov	r0, r5
 801241c:	47b8      	blx	r7
 801241e:	3001      	adds	r0, #1
 8012420:	d1c1      	bne.n	80123a6 <_printf_float+0x33e>
 8012422:	e680      	b.n	8012126 <_printf_float+0xbe>
 8012424:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012426:	2a01      	cmp	r2, #1
 8012428:	dc01      	bgt.n	801242e <_printf_float+0x3c6>
 801242a:	07db      	lsls	r3, r3, #31
 801242c:	d53a      	bpl.n	80124a4 <_printf_float+0x43c>
 801242e:	2301      	movs	r3, #1
 8012430:	4642      	mov	r2, r8
 8012432:	4631      	mov	r1, r6
 8012434:	4628      	mov	r0, r5
 8012436:	47b8      	blx	r7
 8012438:	3001      	adds	r0, #1
 801243a:	f43f ae74 	beq.w	8012126 <_printf_float+0xbe>
 801243e:	ee18 3a10 	vmov	r3, s16
 8012442:	4652      	mov	r2, sl
 8012444:	4631      	mov	r1, r6
 8012446:	4628      	mov	r0, r5
 8012448:	47b8      	blx	r7
 801244a:	3001      	adds	r0, #1
 801244c:	f43f ae6b 	beq.w	8012126 <_printf_float+0xbe>
 8012450:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012454:	2200      	movs	r2, #0
 8012456:	2300      	movs	r3, #0
 8012458:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801245c:	f7ee fb44 	bl	8000ae8 <__aeabi_dcmpeq>
 8012460:	b9d8      	cbnz	r0, 801249a <_printf_float+0x432>
 8012462:	f10a 33ff 	add.w	r3, sl, #4294967295
 8012466:	f108 0201 	add.w	r2, r8, #1
 801246a:	4631      	mov	r1, r6
 801246c:	4628      	mov	r0, r5
 801246e:	47b8      	blx	r7
 8012470:	3001      	adds	r0, #1
 8012472:	d10e      	bne.n	8012492 <_printf_float+0x42a>
 8012474:	e657      	b.n	8012126 <_printf_float+0xbe>
 8012476:	2301      	movs	r3, #1
 8012478:	4652      	mov	r2, sl
 801247a:	4631      	mov	r1, r6
 801247c:	4628      	mov	r0, r5
 801247e:	47b8      	blx	r7
 8012480:	3001      	adds	r0, #1
 8012482:	f43f ae50 	beq.w	8012126 <_printf_float+0xbe>
 8012486:	f108 0801 	add.w	r8, r8, #1
 801248a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801248c:	3b01      	subs	r3, #1
 801248e:	4543      	cmp	r3, r8
 8012490:	dcf1      	bgt.n	8012476 <_printf_float+0x40e>
 8012492:	464b      	mov	r3, r9
 8012494:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012498:	e6da      	b.n	8012250 <_printf_float+0x1e8>
 801249a:	f04f 0800 	mov.w	r8, #0
 801249e:	f104 0a1a 	add.w	sl, r4, #26
 80124a2:	e7f2      	b.n	801248a <_printf_float+0x422>
 80124a4:	2301      	movs	r3, #1
 80124a6:	4642      	mov	r2, r8
 80124a8:	e7df      	b.n	801246a <_printf_float+0x402>
 80124aa:	2301      	movs	r3, #1
 80124ac:	464a      	mov	r2, r9
 80124ae:	4631      	mov	r1, r6
 80124b0:	4628      	mov	r0, r5
 80124b2:	47b8      	blx	r7
 80124b4:	3001      	adds	r0, #1
 80124b6:	f43f ae36 	beq.w	8012126 <_printf_float+0xbe>
 80124ba:	f108 0801 	add.w	r8, r8, #1
 80124be:	68e3      	ldr	r3, [r4, #12]
 80124c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80124c2:	1a5b      	subs	r3, r3, r1
 80124c4:	4543      	cmp	r3, r8
 80124c6:	dcf0      	bgt.n	80124aa <_printf_float+0x442>
 80124c8:	e6f8      	b.n	80122bc <_printf_float+0x254>
 80124ca:	f04f 0800 	mov.w	r8, #0
 80124ce:	f104 0919 	add.w	r9, r4, #25
 80124d2:	e7f4      	b.n	80124be <_printf_float+0x456>

080124d4 <_printf_common>:
 80124d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80124d8:	4616      	mov	r6, r2
 80124da:	4699      	mov	r9, r3
 80124dc:	688a      	ldr	r2, [r1, #8]
 80124de:	690b      	ldr	r3, [r1, #16]
 80124e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80124e4:	4293      	cmp	r3, r2
 80124e6:	bfb8      	it	lt
 80124e8:	4613      	movlt	r3, r2
 80124ea:	6033      	str	r3, [r6, #0]
 80124ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80124f0:	4607      	mov	r7, r0
 80124f2:	460c      	mov	r4, r1
 80124f4:	b10a      	cbz	r2, 80124fa <_printf_common+0x26>
 80124f6:	3301      	adds	r3, #1
 80124f8:	6033      	str	r3, [r6, #0]
 80124fa:	6823      	ldr	r3, [r4, #0]
 80124fc:	0699      	lsls	r1, r3, #26
 80124fe:	bf42      	ittt	mi
 8012500:	6833      	ldrmi	r3, [r6, #0]
 8012502:	3302      	addmi	r3, #2
 8012504:	6033      	strmi	r3, [r6, #0]
 8012506:	6825      	ldr	r5, [r4, #0]
 8012508:	f015 0506 	ands.w	r5, r5, #6
 801250c:	d106      	bne.n	801251c <_printf_common+0x48>
 801250e:	f104 0a19 	add.w	sl, r4, #25
 8012512:	68e3      	ldr	r3, [r4, #12]
 8012514:	6832      	ldr	r2, [r6, #0]
 8012516:	1a9b      	subs	r3, r3, r2
 8012518:	42ab      	cmp	r3, r5
 801251a:	dc26      	bgt.n	801256a <_printf_common+0x96>
 801251c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012520:	1e13      	subs	r3, r2, #0
 8012522:	6822      	ldr	r2, [r4, #0]
 8012524:	bf18      	it	ne
 8012526:	2301      	movne	r3, #1
 8012528:	0692      	lsls	r2, r2, #26
 801252a:	d42b      	bmi.n	8012584 <_printf_common+0xb0>
 801252c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012530:	4649      	mov	r1, r9
 8012532:	4638      	mov	r0, r7
 8012534:	47c0      	blx	r8
 8012536:	3001      	adds	r0, #1
 8012538:	d01e      	beq.n	8012578 <_printf_common+0xa4>
 801253a:	6823      	ldr	r3, [r4, #0]
 801253c:	6922      	ldr	r2, [r4, #16]
 801253e:	f003 0306 	and.w	r3, r3, #6
 8012542:	2b04      	cmp	r3, #4
 8012544:	bf02      	ittt	eq
 8012546:	68e5      	ldreq	r5, [r4, #12]
 8012548:	6833      	ldreq	r3, [r6, #0]
 801254a:	1aed      	subeq	r5, r5, r3
 801254c:	68a3      	ldr	r3, [r4, #8]
 801254e:	bf0c      	ite	eq
 8012550:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012554:	2500      	movne	r5, #0
 8012556:	4293      	cmp	r3, r2
 8012558:	bfc4      	itt	gt
 801255a:	1a9b      	subgt	r3, r3, r2
 801255c:	18ed      	addgt	r5, r5, r3
 801255e:	2600      	movs	r6, #0
 8012560:	341a      	adds	r4, #26
 8012562:	42b5      	cmp	r5, r6
 8012564:	d11a      	bne.n	801259c <_printf_common+0xc8>
 8012566:	2000      	movs	r0, #0
 8012568:	e008      	b.n	801257c <_printf_common+0xa8>
 801256a:	2301      	movs	r3, #1
 801256c:	4652      	mov	r2, sl
 801256e:	4649      	mov	r1, r9
 8012570:	4638      	mov	r0, r7
 8012572:	47c0      	blx	r8
 8012574:	3001      	adds	r0, #1
 8012576:	d103      	bne.n	8012580 <_printf_common+0xac>
 8012578:	f04f 30ff 	mov.w	r0, #4294967295
 801257c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012580:	3501      	adds	r5, #1
 8012582:	e7c6      	b.n	8012512 <_printf_common+0x3e>
 8012584:	18e1      	adds	r1, r4, r3
 8012586:	1c5a      	adds	r2, r3, #1
 8012588:	2030      	movs	r0, #48	; 0x30
 801258a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801258e:	4422      	add	r2, r4
 8012590:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012594:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012598:	3302      	adds	r3, #2
 801259a:	e7c7      	b.n	801252c <_printf_common+0x58>
 801259c:	2301      	movs	r3, #1
 801259e:	4622      	mov	r2, r4
 80125a0:	4649      	mov	r1, r9
 80125a2:	4638      	mov	r0, r7
 80125a4:	47c0      	blx	r8
 80125a6:	3001      	adds	r0, #1
 80125a8:	d0e6      	beq.n	8012578 <_printf_common+0xa4>
 80125aa:	3601      	adds	r6, #1
 80125ac:	e7d9      	b.n	8012562 <_printf_common+0x8e>
	...

080125b0 <_printf_i>:
 80125b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80125b4:	7e0f      	ldrb	r7, [r1, #24]
 80125b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80125b8:	2f78      	cmp	r7, #120	; 0x78
 80125ba:	4691      	mov	r9, r2
 80125bc:	4680      	mov	r8, r0
 80125be:	460c      	mov	r4, r1
 80125c0:	469a      	mov	sl, r3
 80125c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80125c6:	d807      	bhi.n	80125d8 <_printf_i+0x28>
 80125c8:	2f62      	cmp	r7, #98	; 0x62
 80125ca:	d80a      	bhi.n	80125e2 <_printf_i+0x32>
 80125cc:	2f00      	cmp	r7, #0
 80125ce:	f000 80d4 	beq.w	801277a <_printf_i+0x1ca>
 80125d2:	2f58      	cmp	r7, #88	; 0x58
 80125d4:	f000 80c0 	beq.w	8012758 <_printf_i+0x1a8>
 80125d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80125dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80125e0:	e03a      	b.n	8012658 <_printf_i+0xa8>
 80125e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80125e6:	2b15      	cmp	r3, #21
 80125e8:	d8f6      	bhi.n	80125d8 <_printf_i+0x28>
 80125ea:	a101      	add	r1, pc, #4	; (adr r1, 80125f0 <_printf_i+0x40>)
 80125ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80125f0:	08012649 	.word	0x08012649
 80125f4:	0801265d 	.word	0x0801265d
 80125f8:	080125d9 	.word	0x080125d9
 80125fc:	080125d9 	.word	0x080125d9
 8012600:	080125d9 	.word	0x080125d9
 8012604:	080125d9 	.word	0x080125d9
 8012608:	0801265d 	.word	0x0801265d
 801260c:	080125d9 	.word	0x080125d9
 8012610:	080125d9 	.word	0x080125d9
 8012614:	080125d9 	.word	0x080125d9
 8012618:	080125d9 	.word	0x080125d9
 801261c:	08012761 	.word	0x08012761
 8012620:	08012689 	.word	0x08012689
 8012624:	0801271b 	.word	0x0801271b
 8012628:	080125d9 	.word	0x080125d9
 801262c:	080125d9 	.word	0x080125d9
 8012630:	08012783 	.word	0x08012783
 8012634:	080125d9 	.word	0x080125d9
 8012638:	08012689 	.word	0x08012689
 801263c:	080125d9 	.word	0x080125d9
 8012640:	080125d9 	.word	0x080125d9
 8012644:	08012723 	.word	0x08012723
 8012648:	682b      	ldr	r3, [r5, #0]
 801264a:	1d1a      	adds	r2, r3, #4
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	602a      	str	r2, [r5, #0]
 8012650:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012654:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012658:	2301      	movs	r3, #1
 801265a:	e09f      	b.n	801279c <_printf_i+0x1ec>
 801265c:	6820      	ldr	r0, [r4, #0]
 801265e:	682b      	ldr	r3, [r5, #0]
 8012660:	0607      	lsls	r7, r0, #24
 8012662:	f103 0104 	add.w	r1, r3, #4
 8012666:	6029      	str	r1, [r5, #0]
 8012668:	d501      	bpl.n	801266e <_printf_i+0xbe>
 801266a:	681e      	ldr	r6, [r3, #0]
 801266c:	e003      	b.n	8012676 <_printf_i+0xc6>
 801266e:	0646      	lsls	r6, r0, #25
 8012670:	d5fb      	bpl.n	801266a <_printf_i+0xba>
 8012672:	f9b3 6000 	ldrsh.w	r6, [r3]
 8012676:	2e00      	cmp	r6, #0
 8012678:	da03      	bge.n	8012682 <_printf_i+0xd2>
 801267a:	232d      	movs	r3, #45	; 0x2d
 801267c:	4276      	negs	r6, r6
 801267e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012682:	485a      	ldr	r0, [pc, #360]	; (80127ec <_printf_i+0x23c>)
 8012684:	230a      	movs	r3, #10
 8012686:	e012      	b.n	80126ae <_printf_i+0xfe>
 8012688:	682b      	ldr	r3, [r5, #0]
 801268a:	6820      	ldr	r0, [r4, #0]
 801268c:	1d19      	adds	r1, r3, #4
 801268e:	6029      	str	r1, [r5, #0]
 8012690:	0605      	lsls	r5, r0, #24
 8012692:	d501      	bpl.n	8012698 <_printf_i+0xe8>
 8012694:	681e      	ldr	r6, [r3, #0]
 8012696:	e002      	b.n	801269e <_printf_i+0xee>
 8012698:	0641      	lsls	r1, r0, #25
 801269a:	d5fb      	bpl.n	8012694 <_printf_i+0xe4>
 801269c:	881e      	ldrh	r6, [r3, #0]
 801269e:	4853      	ldr	r0, [pc, #332]	; (80127ec <_printf_i+0x23c>)
 80126a0:	2f6f      	cmp	r7, #111	; 0x6f
 80126a2:	bf0c      	ite	eq
 80126a4:	2308      	moveq	r3, #8
 80126a6:	230a      	movne	r3, #10
 80126a8:	2100      	movs	r1, #0
 80126aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80126ae:	6865      	ldr	r5, [r4, #4]
 80126b0:	60a5      	str	r5, [r4, #8]
 80126b2:	2d00      	cmp	r5, #0
 80126b4:	bfa2      	ittt	ge
 80126b6:	6821      	ldrge	r1, [r4, #0]
 80126b8:	f021 0104 	bicge.w	r1, r1, #4
 80126bc:	6021      	strge	r1, [r4, #0]
 80126be:	b90e      	cbnz	r6, 80126c4 <_printf_i+0x114>
 80126c0:	2d00      	cmp	r5, #0
 80126c2:	d04b      	beq.n	801275c <_printf_i+0x1ac>
 80126c4:	4615      	mov	r5, r2
 80126c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80126ca:	fb03 6711 	mls	r7, r3, r1, r6
 80126ce:	5dc7      	ldrb	r7, [r0, r7]
 80126d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80126d4:	4637      	mov	r7, r6
 80126d6:	42bb      	cmp	r3, r7
 80126d8:	460e      	mov	r6, r1
 80126da:	d9f4      	bls.n	80126c6 <_printf_i+0x116>
 80126dc:	2b08      	cmp	r3, #8
 80126de:	d10b      	bne.n	80126f8 <_printf_i+0x148>
 80126e0:	6823      	ldr	r3, [r4, #0]
 80126e2:	07de      	lsls	r6, r3, #31
 80126e4:	d508      	bpl.n	80126f8 <_printf_i+0x148>
 80126e6:	6923      	ldr	r3, [r4, #16]
 80126e8:	6861      	ldr	r1, [r4, #4]
 80126ea:	4299      	cmp	r1, r3
 80126ec:	bfde      	ittt	le
 80126ee:	2330      	movle	r3, #48	; 0x30
 80126f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80126f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80126f8:	1b52      	subs	r2, r2, r5
 80126fa:	6122      	str	r2, [r4, #16]
 80126fc:	f8cd a000 	str.w	sl, [sp]
 8012700:	464b      	mov	r3, r9
 8012702:	aa03      	add	r2, sp, #12
 8012704:	4621      	mov	r1, r4
 8012706:	4640      	mov	r0, r8
 8012708:	f7ff fee4 	bl	80124d4 <_printf_common>
 801270c:	3001      	adds	r0, #1
 801270e:	d14a      	bne.n	80127a6 <_printf_i+0x1f6>
 8012710:	f04f 30ff 	mov.w	r0, #4294967295
 8012714:	b004      	add	sp, #16
 8012716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801271a:	6823      	ldr	r3, [r4, #0]
 801271c:	f043 0320 	orr.w	r3, r3, #32
 8012720:	6023      	str	r3, [r4, #0]
 8012722:	4833      	ldr	r0, [pc, #204]	; (80127f0 <_printf_i+0x240>)
 8012724:	2778      	movs	r7, #120	; 0x78
 8012726:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801272a:	6823      	ldr	r3, [r4, #0]
 801272c:	6829      	ldr	r1, [r5, #0]
 801272e:	061f      	lsls	r7, r3, #24
 8012730:	f851 6b04 	ldr.w	r6, [r1], #4
 8012734:	d402      	bmi.n	801273c <_printf_i+0x18c>
 8012736:	065f      	lsls	r7, r3, #25
 8012738:	bf48      	it	mi
 801273a:	b2b6      	uxthmi	r6, r6
 801273c:	07df      	lsls	r7, r3, #31
 801273e:	bf48      	it	mi
 8012740:	f043 0320 	orrmi.w	r3, r3, #32
 8012744:	6029      	str	r1, [r5, #0]
 8012746:	bf48      	it	mi
 8012748:	6023      	strmi	r3, [r4, #0]
 801274a:	b91e      	cbnz	r6, 8012754 <_printf_i+0x1a4>
 801274c:	6823      	ldr	r3, [r4, #0]
 801274e:	f023 0320 	bic.w	r3, r3, #32
 8012752:	6023      	str	r3, [r4, #0]
 8012754:	2310      	movs	r3, #16
 8012756:	e7a7      	b.n	80126a8 <_printf_i+0xf8>
 8012758:	4824      	ldr	r0, [pc, #144]	; (80127ec <_printf_i+0x23c>)
 801275a:	e7e4      	b.n	8012726 <_printf_i+0x176>
 801275c:	4615      	mov	r5, r2
 801275e:	e7bd      	b.n	80126dc <_printf_i+0x12c>
 8012760:	682b      	ldr	r3, [r5, #0]
 8012762:	6826      	ldr	r6, [r4, #0]
 8012764:	6961      	ldr	r1, [r4, #20]
 8012766:	1d18      	adds	r0, r3, #4
 8012768:	6028      	str	r0, [r5, #0]
 801276a:	0635      	lsls	r5, r6, #24
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	d501      	bpl.n	8012774 <_printf_i+0x1c4>
 8012770:	6019      	str	r1, [r3, #0]
 8012772:	e002      	b.n	801277a <_printf_i+0x1ca>
 8012774:	0670      	lsls	r0, r6, #25
 8012776:	d5fb      	bpl.n	8012770 <_printf_i+0x1c0>
 8012778:	8019      	strh	r1, [r3, #0]
 801277a:	2300      	movs	r3, #0
 801277c:	6123      	str	r3, [r4, #16]
 801277e:	4615      	mov	r5, r2
 8012780:	e7bc      	b.n	80126fc <_printf_i+0x14c>
 8012782:	682b      	ldr	r3, [r5, #0]
 8012784:	1d1a      	adds	r2, r3, #4
 8012786:	602a      	str	r2, [r5, #0]
 8012788:	681d      	ldr	r5, [r3, #0]
 801278a:	6862      	ldr	r2, [r4, #4]
 801278c:	2100      	movs	r1, #0
 801278e:	4628      	mov	r0, r5
 8012790:	f7ed fd2e 	bl	80001f0 <memchr>
 8012794:	b108      	cbz	r0, 801279a <_printf_i+0x1ea>
 8012796:	1b40      	subs	r0, r0, r5
 8012798:	6060      	str	r0, [r4, #4]
 801279a:	6863      	ldr	r3, [r4, #4]
 801279c:	6123      	str	r3, [r4, #16]
 801279e:	2300      	movs	r3, #0
 80127a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80127a4:	e7aa      	b.n	80126fc <_printf_i+0x14c>
 80127a6:	6923      	ldr	r3, [r4, #16]
 80127a8:	462a      	mov	r2, r5
 80127aa:	4649      	mov	r1, r9
 80127ac:	4640      	mov	r0, r8
 80127ae:	47d0      	blx	sl
 80127b0:	3001      	adds	r0, #1
 80127b2:	d0ad      	beq.n	8012710 <_printf_i+0x160>
 80127b4:	6823      	ldr	r3, [r4, #0]
 80127b6:	079b      	lsls	r3, r3, #30
 80127b8:	d413      	bmi.n	80127e2 <_printf_i+0x232>
 80127ba:	68e0      	ldr	r0, [r4, #12]
 80127bc:	9b03      	ldr	r3, [sp, #12]
 80127be:	4298      	cmp	r0, r3
 80127c0:	bfb8      	it	lt
 80127c2:	4618      	movlt	r0, r3
 80127c4:	e7a6      	b.n	8012714 <_printf_i+0x164>
 80127c6:	2301      	movs	r3, #1
 80127c8:	4632      	mov	r2, r6
 80127ca:	4649      	mov	r1, r9
 80127cc:	4640      	mov	r0, r8
 80127ce:	47d0      	blx	sl
 80127d0:	3001      	adds	r0, #1
 80127d2:	d09d      	beq.n	8012710 <_printf_i+0x160>
 80127d4:	3501      	adds	r5, #1
 80127d6:	68e3      	ldr	r3, [r4, #12]
 80127d8:	9903      	ldr	r1, [sp, #12]
 80127da:	1a5b      	subs	r3, r3, r1
 80127dc:	42ab      	cmp	r3, r5
 80127de:	dcf2      	bgt.n	80127c6 <_printf_i+0x216>
 80127e0:	e7eb      	b.n	80127ba <_printf_i+0x20a>
 80127e2:	2500      	movs	r5, #0
 80127e4:	f104 0619 	add.w	r6, r4, #25
 80127e8:	e7f5      	b.n	80127d6 <_printf_i+0x226>
 80127ea:	bf00      	nop
 80127ec:	080157ba 	.word	0x080157ba
 80127f0:	080157cb 	.word	0x080157cb

080127f4 <std>:
 80127f4:	2300      	movs	r3, #0
 80127f6:	b510      	push	{r4, lr}
 80127f8:	4604      	mov	r4, r0
 80127fa:	e9c0 3300 	strd	r3, r3, [r0]
 80127fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012802:	6083      	str	r3, [r0, #8]
 8012804:	8181      	strh	r1, [r0, #12]
 8012806:	6643      	str	r3, [r0, #100]	; 0x64
 8012808:	81c2      	strh	r2, [r0, #14]
 801280a:	6183      	str	r3, [r0, #24]
 801280c:	4619      	mov	r1, r3
 801280e:	2208      	movs	r2, #8
 8012810:	305c      	adds	r0, #92	; 0x5c
 8012812:	f000 fa17 	bl	8012c44 <memset>
 8012816:	4b0d      	ldr	r3, [pc, #52]	; (801284c <std+0x58>)
 8012818:	6263      	str	r3, [r4, #36]	; 0x24
 801281a:	4b0d      	ldr	r3, [pc, #52]	; (8012850 <std+0x5c>)
 801281c:	62a3      	str	r3, [r4, #40]	; 0x28
 801281e:	4b0d      	ldr	r3, [pc, #52]	; (8012854 <std+0x60>)
 8012820:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012822:	4b0d      	ldr	r3, [pc, #52]	; (8012858 <std+0x64>)
 8012824:	6323      	str	r3, [r4, #48]	; 0x30
 8012826:	4b0d      	ldr	r3, [pc, #52]	; (801285c <std+0x68>)
 8012828:	6224      	str	r4, [r4, #32]
 801282a:	429c      	cmp	r4, r3
 801282c:	d006      	beq.n	801283c <std+0x48>
 801282e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8012832:	4294      	cmp	r4, r2
 8012834:	d002      	beq.n	801283c <std+0x48>
 8012836:	33d0      	adds	r3, #208	; 0xd0
 8012838:	429c      	cmp	r4, r3
 801283a:	d105      	bne.n	8012848 <std+0x54>
 801283c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012844:	f000 bad0 	b.w	8012de8 <__retarget_lock_init_recursive>
 8012848:	bd10      	pop	{r4, pc}
 801284a:	bf00      	nop
 801284c:	08012a95 	.word	0x08012a95
 8012850:	08012ab7 	.word	0x08012ab7
 8012854:	08012aef 	.word	0x08012aef
 8012858:	08012b13 	.word	0x08012b13
 801285c:	20007fd8 	.word	0x20007fd8

08012860 <stdio_exit_handler>:
 8012860:	4a02      	ldr	r2, [pc, #8]	; (801286c <stdio_exit_handler+0xc>)
 8012862:	4903      	ldr	r1, [pc, #12]	; (8012870 <stdio_exit_handler+0x10>)
 8012864:	4803      	ldr	r0, [pc, #12]	; (8012874 <stdio_exit_handler+0x14>)
 8012866:	f000 b869 	b.w	801293c <_fwalk_sglue>
 801286a:	bf00      	nop
 801286c:	20000030 	.word	0x20000030
 8012870:	08014a51 	.word	0x08014a51
 8012874:	2000003c 	.word	0x2000003c

08012878 <cleanup_stdio>:
 8012878:	6841      	ldr	r1, [r0, #4]
 801287a:	4b0c      	ldr	r3, [pc, #48]	; (80128ac <cleanup_stdio+0x34>)
 801287c:	4299      	cmp	r1, r3
 801287e:	b510      	push	{r4, lr}
 8012880:	4604      	mov	r4, r0
 8012882:	d001      	beq.n	8012888 <cleanup_stdio+0x10>
 8012884:	f002 f8e4 	bl	8014a50 <_fflush_r>
 8012888:	68a1      	ldr	r1, [r4, #8]
 801288a:	4b09      	ldr	r3, [pc, #36]	; (80128b0 <cleanup_stdio+0x38>)
 801288c:	4299      	cmp	r1, r3
 801288e:	d002      	beq.n	8012896 <cleanup_stdio+0x1e>
 8012890:	4620      	mov	r0, r4
 8012892:	f002 f8dd 	bl	8014a50 <_fflush_r>
 8012896:	68e1      	ldr	r1, [r4, #12]
 8012898:	4b06      	ldr	r3, [pc, #24]	; (80128b4 <cleanup_stdio+0x3c>)
 801289a:	4299      	cmp	r1, r3
 801289c:	d004      	beq.n	80128a8 <cleanup_stdio+0x30>
 801289e:	4620      	mov	r0, r4
 80128a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80128a4:	f002 b8d4 	b.w	8014a50 <_fflush_r>
 80128a8:	bd10      	pop	{r4, pc}
 80128aa:	bf00      	nop
 80128ac:	20007fd8 	.word	0x20007fd8
 80128b0:	20008040 	.word	0x20008040
 80128b4:	200080a8 	.word	0x200080a8

080128b8 <global_stdio_init.part.0>:
 80128b8:	b510      	push	{r4, lr}
 80128ba:	4b0b      	ldr	r3, [pc, #44]	; (80128e8 <global_stdio_init.part.0+0x30>)
 80128bc:	4c0b      	ldr	r4, [pc, #44]	; (80128ec <global_stdio_init.part.0+0x34>)
 80128be:	4a0c      	ldr	r2, [pc, #48]	; (80128f0 <global_stdio_init.part.0+0x38>)
 80128c0:	601a      	str	r2, [r3, #0]
 80128c2:	4620      	mov	r0, r4
 80128c4:	2200      	movs	r2, #0
 80128c6:	2104      	movs	r1, #4
 80128c8:	f7ff ff94 	bl	80127f4 <std>
 80128cc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80128d0:	2201      	movs	r2, #1
 80128d2:	2109      	movs	r1, #9
 80128d4:	f7ff ff8e 	bl	80127f4 <std>
 80128d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80128dc:	2202      	movs	r2, #2
 80128de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80128e2:	2112      	movs	r1, #18
 80128e4:	f7ff bf86 	b.w	80127f4 <std>
 80128e8:	20008110 	.word	0x20008110
 80128ec:	20007fd8 	.word	0x20007fd8
 80128f0:	08012861 	.word	0x08012861

080128f4 <__sfp_lock_acquire>:
 80128f4:	4801      	ldr	r0, [pc, #4]	; (80128fc <__sfp_lock_acquire+0x8>)
 80128f6:	f000 ba78 	b.w	8012dea <__retarget_lock_acquire_recursive>
 80128fa:	bf00      	nop
 80128fc:	20008119 	.word	0x20008119

08012900 <__sfp_lock_release>:
 8012900:	4801      	ldr	r0, [pc, #4]	; (8012908 <__sfp_lock_release+0x8>)
 8012902:	f000 ba73 	b.w	8012dec <__retarget_lock_release_recursive>
 8012906:	bf00      	nop
 8012908:	20008119 	.word	0x20008119

0801290c <__sinit>:
 801290c:	b510      	push	{r4, lr}
 801290e:	4604      	mov	r4, r0
 8012910:	f7ff fff0 	bl	80128f4 <__sfp_lock_acquire>
 8012914:	6a23      	ldr	r3, [r4, #32]
 8012916:	b11b      	cbz	r3, 8012920 <__sinit+0x14>
 8012918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801291c:	f7ff bff0 	b.w	8012900 <__sfp_lock_release>
 8012920:	4b04      	ldr	r3, [pc, #16]	; (8012934 <__sinit+0x28>)
 8012922:	6223      	str	r3, [r4, #32]
 8012924:	4b04      	ldr	r3, [pc, #16]	; (8012938 <__sinit+0x2c>)
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	2b00      	cmp	r3, #0
 801292a:	d1f5      	bne.n	8012918 <__sinit+0xc>
 801292c:	f7ff ffc4 	bl	80128b8 <global_stdio_init.part.0>
 8012930:	e7f2      	b.n	8012918 <__sinit+0xc>
 8012932:	bf00      	nop
 8012934:	08012879 	.word	0x08012879
 8012938:	20008110 	.word	0x20008110

0801293c <_fwalk_sglue>:
 801293c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012940:	4607      	mov	r7, r0
 8012942:	4688      	mov	r8, r1
 8012944:	4614      	mov	r4, r2
 8012946:	2600      	movs	r6, #0
 8012948:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801294c:	f1b9 0901 	subs.w	r9, r9, #1
 8012950:	d505      	bpl.n	801295e <_fwalk_sglue+0x22>
 8012952:	6824      	ldr	r4, [r4, #0]
 8012954:	2c00      	cmp	r4, #0
 8012956:	d1f7      	bne.n	8012948 <_fwalk_sglue+0xc>
 8012958:	4630      	mov	r0, r6
 801295a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801295e:	89ab      	ldrh	r3, [r5, #12]
 8012960:	2b01      	cmp	r3, #1
 8012962:	d907      	bls.n	8012974 <_fwalk_sglue+0x38>
 8012964:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012968:	3301      	adds	r3, #1
 801296a:	d003      	beq.n	8012974 <_fwalk_sglue+0x38>
 801296c:	4629      	mov	r1, r5
 801296e:	4638      	mov	r0, r7
 8012970:	47c0      	blx	r8
 8012972:	4306      	orrs	r6, r0
 8012974:	3568      	adds	r5, #104	; 0x68
 8012976:	e7e9      	b.n	801294c <_fwalk_sglue+0x10>

08012978 <iprintf>:
 8012978:	b40f      	push	{r0, r1, r2, r3}
 801297a:	b507      	push	{r0, r1, r2, lr}
 801297c:	4906      	ldr	r1, [pc, #24]	; (8012998 <iprintf+0x20>)
 801297e:	ab04      	add	r3, sp, #16
 8012980:	6808      	ldr	r0, [r1, #0]
 8012982:	f853 2b04 	ldr.w	r2, [r3], #4
 8012986:	6881      	ldr	r1, [r0, #8]
 8012988:	9301      	str	r3, [sp, #4]
 801298a:	f001 fec1 	bl	8014710 <_vfiprintf_r>
 801298e:	b003      	add	sp, #12
 8012990:	f85d eb04 	ldr.w	lr, [sp], #4
 8012994:	b004      	add	sp, #16
 8012996:	4770      	bx	lr
 8012998:	20000088 	.word	0x20000088

0801299c <_puts_r>:
 801299c:	6a03      	ldr	r3, [r0, #32]
 801299e:	b570      	push	{r4, r5, r6, lr}
 80129a0:	6884      	ldr	r4, [r0, #8]
 80129a2:	4605      	mov	r5, r0
 80129a4:	460e      	mov	r6, r1
 80129a6:	b90b      	cbnz	r3, 80129ac <_puts_r+0x10>
 80129a8:	f7ff ffb0 	bl	801290c <__sinit>
 80129ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80129ae:	07db      	lsls	r3, r3, #31
 80129b0:	d405      	bmi.n	80129be <_puts_r+0x22>
 80129b2:	89a3      	ldrh	r3, [r4, #12]
 80129b4:	0598      	lsls	r0, r3, #22
 80129b6:	d402      	bmi.n	80129be <_puts_r+0x22>
 80129b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80129ba:	f000 fa16 	bl	8012dea <__retarget_lock_acquire_recursive>
 80129be:	89a3      	ldrh	r3, [r4, #12]
 80129c0:	0719      	lsls	r1, r3, #28
 80129c2:	d513      	bpl.n	80129ec <_puts_r+0x50>
 80129c4:	6923      	ldr	r3, [r4, #16]
 80129c6:	b18b      	cbz	r3, 80129ec <_puts_r+0x50>
 80129c8:	3e01      	subs	r6, #1
 80129ca:	68a3      	ldr	r3, [r4, #8]
 80129cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80129d0:	3b01      	subs	r3, #1
 80129d2:	60a3      	str	r3, [r4, #8]
 80129d4:	b9e9      	cbnz	r1, 8012a12 <_puts_r+0x76>
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	da2e      	bge.n	8012a38 <_puts_r+0x9c>
 80129da:	4622      	mov	r2, r4
 80129dc:	210a      	movs	r1, #10
 80129de:	4628      	mov	r0, r5
 80129e0:	f000 f89b 	bl	8012b1a <__swbuf_r>
 80129e4:	3001      	adds	r0, #1
 80129e6:	d007      	beq.n	80129f8 <_puts_r+0x5c>
 80129e8:	250a      	movs	r5, #10
 80129ea:	e007      	b.n	80129fc <_puts_r+0x60>
 80129ec:	4621      	mov	r1, r4
 80129ee:	4628      	mov	r0, r5
 80129f0:	f000 f8d0 	bl	8012b94 <__swsetup_r>
 80129f4:	2800      	cmp	r0, #0
 80129f6:	d0e7      	beq.n	80129c8 <_puts_r+0x2c>
 80129f8:	f04f 35ff 	mov.w	r5, #4294967295
 80129fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80129fe:	07da      	lsls	r2, r3, #31
 8012a00:	d405      	bmi.n	8012a0e <_puts_r+0x72>
 8012a02:	89a3      	ldrh	r3, [r4, #12]
 8012a04:	059b      	lsls	r3, r3, #22
 8012a06:	d402      	bmi.n	8012a0e <_puts_r+0x72>
 8012a08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012a0a:	f000 f9ef 	bl	8012dec <__retarget_lock_release_recursive>
 8012a0e:	4628      	mov	r0, r5
 8012a10:	bd70      	pop	{r4, r5, r6, pc}
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	da04      	bge.n	8012a20 <_puts_r+0x84>
 8012a16:	69a2      	ldr	r2, [r4, #24]
 8012a18:	429a      	cmp	r2, r3
 8012a1a:	dc06      	bgt.n	8012a2a <_puts_r+0x8e>
 8012a1c:	290a      	cmp	r1, #10
 8012a1e:	d004      	beq.n	8012a2a <_puts_r+0x8e>
 8012a20:	6823      	ldr	r3, [r4, #0]
 8012a22:	1c5a      	adds	r2, r3, #1
 8012a24:	6022      	str	r2, [r4, #0]
 8012a26:	7019      	strb	r1, [r3, #0]
 8012a28:	e7cf      	b.n	80129ca <_puts_r+0x2e>
 8012a2a:	4622      	mov	r2, r4
 8012a2c:	4628      	mov	r0, r5
 8012a2e:	f000 f874 	bl	8012b1a <__swbuf_r>
 8012a32:	3001      	adds	r0, #1
 8012a34:	d1c9      	bne.n	80129ca <_puts_r+0x2e>
 8012a36:	e7df      	b.n	80129f8 <_puts_r+0x5c>
 8012a38:	6823      	ldr	r3, [r4, #0]
 8012a3a:	250a      	movs	r5, #10
 8012a3c:	1c5a      	adds	r2, r3, #1
 8012a3e:	6022      	str	r2, [r4, #0]
 8012a40:	701d      	strb	r5, [r3, #0]
 8012a42:	e7db      	b.n	80129fc <_puts_r+0x60>

08012a44 <puts>:
 8012a44:	4b02      	ldr	r3, [pc, #8]	; (8012a50 <puts+0xc>)
 8012a46:	4601      	mov	r1, r0
 8012a48:	6818      	ldr	r0, [r3, #0]
 8012a4a:	f7ff bfa7 	b.w	801299c <_puts_r>
 8012a4e:	bf00      	nop
 8012a50:	20000088 	.word	0x20000088

08012a54 <siprintf>:
 8012a54:	b40e      	push	{r1, r2, r3}
 8012a56:	b500      	push	{lr}
 8012a58:	b09c      	sub	sp, #112	; 0x70
 8012a5a:	ab1d      	add	r3, sp, #116	; 0x74
 8012a5c:	9002      	str	r0, [sp, #8]
 8012a5e:	9006      	str	r0, [sp, #24]
 8012a60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012a64:	4809      	ldr	r0, [pc, #36]	; (8012a8c <siprintf+0x38>)
 8012a66:	9107      	str	r1, [sp, #28]
 8012a68:	9104      	str	r1, [sp, #16]
 8012a6a:	4909      	ldr	r1, [pc, #36]	; (8012a90 <siprintf+0x3c>)
 8012a6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012a70:	9105      	str	r1, [sp, #20]
 8012a72:	6800      	ldr	r0, [r0, #0]
 8012a74:	9301      	str	r3, [sp, #4]
 8012a76:	a902      	add	r1, sp, #8
 8012a78:	f001 fd22 	bl	80144c0 <_svfiprintf_r>
 8012a7c:	9b02      	ldr	r3, [sp, #8]
 8012a7e:	2200      	movs	r2, #0
 8012a80:	701a      	strb	r2, [r3, #0]
 8012a82:	b01c      	add	sp, #112	; 0x70
 8012a84:	f85d eb04 	ldr.w	lr, [sp], #4
 8012a88:	b003      	add	sp, #12
 8012a8a:	4770      	bx	lr
 8012a8c:	20000088 	.word	0x20000088
 8012a90:	ffff0208 	.word	0xffff0208

08012a94 <__sread>:
 8012a94:	b510      	push	{r4, lr}
 8012a96:	460c      	mov	r4, r1
 8012a98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a9c:	f000 f956 	bl	8012d4c <_read_r>
 8012aa0:	2800      	cmp	r0, #0
 8012aa2:	bfab      	itete	ge
 8012aa4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012aa6:	89a3      	ldrhlt	r3, [r4, #12]
 8012aa8:	181b      	addge	r3, r3, r0
 8012aaa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012aae:	bfac      	ite	ge
 8012ab0:	6563      	strge	r3, [r4, #84]	; 0x54
 8012ab2:	81a3      	strhlt	r3, [r4, #12]
 8012ab4:	bd10      	pop	{r4, pc}

08012ab6 <__swrite>:
 8012ab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012aba:	461f      	mov	r7, r3
 8012abc:	898b      	ldrh	r3, [r1, #12]
 8012abe:	05db      	lsls	r3, r3, #23
 8012ac0:	4605      	mov	r5, r0
 8012ac2:	460c      	mov	r4, r1
 8012ac4:	4616      	mov	r6, r2
 8012ac6:	d505      	bpl.n	8012ad4 <__swrite+0x1e>
 8012ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012acc:	2302      	movs	r3, #2
 8012ace:	2200      	movs	r2, #0
 8012ad0:	f000 f92a 	bl	8012d28 <_lseek_r>
 8012ad4:	89a3      	ldrh	r3, [r4, #12]
 8012ad6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012ada:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012ade:	81a3      	strh	r3, [r4, #12]
 8012ae0:	4632      	mov	r2, r6
 8012ae2:	463b      	mov	r3, r7
 8012ae4:	4628      	mov	r0, r5
 8012ae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012aea:	f000 b941 	b.w	8012d70 <_write_r>

08012aee <__sseek>:
 8012aee:	b510      	push	{r4, lr}
 8012af0:	460c      	mov	r4, r1
 8012af2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012af6:	f000 f917 	bl	8012d28 <_lseek_r>
 8012afa:	1c43      	adds	r3, r0, #1
 8012afc:	89a3      	ldrh	r3, [r4, #12]
 8012afe:	bf15      	itete	ne
 8012b00:	6560      	strne	r0, [r4, #84]	; 0x54
 8012b02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012b06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012b0a:	81a3      	strheq	r3, [r4, #12]
 8012b0c:	bf18      	it	ne
 8012b0e:	81a3      	strhne	r3, [r4, #12]
 8012b10:	bd10      	pop	{r4, pc}

08012b12 <__sclose>:
 8012b12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b16:	f000 b8a1 	b.w	8012c5c <_close_r>

08012b1a <__swbuf_r>:
 8012b1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b1c:	460e      	mov	r6, r1
 8012b1e:	4614      	mov	r4, r2
 8012b20:	4605      	mov	r5, r0
 8012b22:	b118      	cbz	r0, 8012b2c <__swbuf_r+0x12>
 8012b24:	6a03      	ldr	r3, [r0, #32]
 8012b26:	b90b      	cbnz	r3, 8012b2c <__swbuf_r+0x12>
 8012b28:	f7ff fef0 	bl	801290c <__sinit>
 8012b2c:	69a3      	ldr	r3, [r4, #24]
 8012b2e:	60a3      	str	r3, [r4, #8]
 8012b30:	89a3      	ldrh	r3, [r4, #12]
 8012b32:	071a      	lsls	r2, r3, #28
 8012b34:	d525      	bpl.n	8012b82 <__swbuf_r+0x68>
 8012b36:	6923      	ldr	r3, [r4, #16]
 8012b38:	b31b      	cbz	r3, 8012b82 <__swbuf_r+0x68>
 8012b3a:	6823      	ldr	r3, [r4, #0]
 8012b3c:	6922      	ldr	r2, [r4, #16]
 8012b3e:	1a98      	subs	r0, r3, r2
 8012b40:	6963      	ldr	r3, [r4, #20]
 8012b42:	b2f6      	uxtb	r6, r6
 8012b44:	4283      	cmp	r3, r0
 8012b46:	4637      	mov	r7, r6
 8012b48:	dc04      	bgt.n	8012b54 <__swbuf_r+0x3a>
 8012b4a:	4621      	mov	r1, r4
 8012b4c:	4628      	mov	r0, r5
 8012b4e:	f001 ff7f 	bl	8014a50 <_fflush_r>
 8012b52:	b9e0      	cbnz	r0, 8012b8e <__swbuf_r+0x74>
 8012b54:	68a3      	ldr	r3, [r4, #8]
 8012b56:	3b01      	subs	r3, #1
 8012b58:	60a3      	str	r3, [r4, #8]
 8012b5a:	6823      	ldr	r3, [r4, #0]
 8012b5c:	1c5a      	adds	r2, r3, #1
 8012b5e:	6022      	str	r2, [r4, #0]
 8012b60:	701e      	strb	r6, [r3, #0]
 8012b62:	6962      	ldr	r2, [r4, #20]
 8012b64:	1c43      	adds	r3, r0, #1
 8012b66:	429a      	cmp	r2, r3
 8012b68:	d004      	beq.n	8012b74 <__swbuf_r+0x5a>
 8012b6a:	89a3      	ldrh	r3, [r4, #12]
 8012b6c:	07db      	lsls	r3, r3, #31
 8012b6e:	d506      	bpl.n	8012b7e <__swbuf_r+0x64>
 8012b70:	2e0a      	cmp	r6, #10
 8012b72:	d104      	bne.n	8012b7e <__swbuf_r+0x64>
 8012b74:	4621      	mov	r1, r4
 8012b76:	4628      	mov	r0, r5
 8012b78:	f001 ff6a 	bl	8014a50 <_fflush_r>
 8012b7c:	b938      	cbnz	r0, 8012b8e <__swbuf_r+0x74>
 8012b7e:	4638      	mov	r0, r7
 8012b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b82:	4621      	mov	r1, r4
 8012b84:	4628      	mov	r0, r5
 8012b86:	f000 f805 	bl	8012b94 <__swsetup_r>
 8012b8a:	2800      	cmp	r0, #0
 8012b8c:	d0d5      	beq.n	8012b3a <__swbuf_r+0x20>
 8012b8e:	f04f 37ff 	mov.w	r7, #4294967295
 8012b92:	e7f4      	b.n	8012b7e <__swbuf_r+0x64>

08012b94 <__swsetup_r>:
 8012b94:	b538      	push	{r3, r4, r5, lr}
 8012b96:	4b2a      	ldr	r3, [pc, #168]	; (8012c40 <__swsetup_r+0xac>)
 8012b98:	4605      	mov	r5, r0
 8012b9a:	6818      	ldr	r0, [r3, #0]
 8012b9c:	460c      	mov	r4, r1
 8012b9e:	b118      	cbz	r0, 8012ba8 <__swsetup_r+0x14>
 8012ba0:	6a03      	ldr	r3, [r0, #32]
 8012ba2:	b90b      	cbnz	r3, 8012ba8 <__swsetup_r+0x14>
 8012ba4:	f7ff feb2 	bl	801290c <__sinit>
 8012ba8:	89a3      	ldrh	r3, [r4, #12]
 8012baa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012bae:	0718      	lsls	r0, r3, #28
 8012bb0:	d422      	bmi.n	8012bf8 <__swsetup_r+0x64>
 8012bb2:	06d9      	lsls	r1, r3, #27
 8012bb4:	d407      	bmi.n	8012bc6 <__swsetup_r+0x32>
 8012bb6:	2309      	movs	r3, #9
 8012bb8:	602b      	str	r3, [r5, #0]
 8012bba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012bbe:	81a3      	strh	r3, [r4, #12]
 8012bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8012bc4:	e034      	b.n	8012c30 <__swsetup_r+0x9c>
 8012bc6:	0758      	lsls	r0, r3, #29
 8012bc8:	d512      	bpl.n	8012bf0 <__swsetup_r+0x5c>
 8012bca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012bcc:	b141      	cbz	r1, 8012be0 <__swsetup_r+0x4c>
 8012bce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012bd2:	4299      	cmp	r1, r3
 8012bd4:	d002      	beq.n	8012bdc <__swsetup_r+0x48>
 8012bd6:	4628      	mov	r0, r5
 8012bd8:	f000 ff94 	bl	8013b04 <_free_r>
 8012bdc:	2300      	movs	r3, #0
 8012bde:	6363      	str	r3, [r4, #52]	; 0x34
 8012be0:	89a3      	ldrh	r3, [r4, #12]
 8012be2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012be6:	81a3      	strh	r3, [r4, #12]
 8012be8:	2300      	movs	r3, #0
 8012bea:	6063      	str	r3, [r4, #4]
 8012bec:	6923      	ldr	r3, [r4, #16]
 8012bee:	6023      	str	r3, [r4, #0]
 8012bf0:	89a3      	ldrh	r3, [r4, #12]
 8012bf2:	f043 0308 	orr.w	r3, r3, #8
 8012bf6:	81a3      	strh	r3, [r4, #12]
 8012bf8:	6923      	ldr	r3, [r4, #16]
 8012bfa:	b94b      	cbnz	r3, 8012c10 <__swsetup_r+0x7c>
 8012bfc:	89a3      	ldrh	r3, [r4, #12]
 8012bfe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012c02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012c06:	d003      	beq.n	8012c10 <__swsetup_r+0x7c>
 8012c08:	4621      	mov	r1, r4
 8012c0a:	4628      	mov	r0, r5
 8012c0c:	f001 ff6e 	bl	8014aec <__smakebuf_r>
 8012c10:	89a0      	ldrh	r0, [r4, #12]
 8012c12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012c16:	f010 0301 	ands.w	r3, r0, #1
 8012c1a:	d00a      	beq.n	8012c32 <__swsetup_r+0x9e>
 8012c1c:	2300      	movs	r3, #0
 8012c1e:	60a3      	str	r3, [r4, #8]
 8012c20:	6963      	ldr	r3, [r4, #20]
 8012c22:	425b      	negs	r3, r3
 8012c24:	61a3      	str	r3, [r4, #24]
 8012c26:	6923      	ldr	r3, [r4, #16]
 8012c28:	b943      	cbnz	r3, 8012c3c <__swsetup_r+0xa8>
 8012c2a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012c2e:	d1c4      	bne.n	8012bba <__swsetup_r+0x26>
 8012c30:	bd38      	pop	{r3, r4, r5, pc}
 8012c32:	0781      	lsls	r1, r0, #30
 8012c34:	bf58      	it	pl
 8012c36:	6963      	ldrpl	r3, [r4, #20]
 8012c38:	60a3      	str	r3, [r4, #8]
 8012c3a:	e7f4      	b.n	8012c26 <__swsetup_r+0x92>
 8012c3c:	2000      	movs	r0, #0
 8012c3e:	e7f7      	b.n	8012c30 <__swsetup_r+0x9c>
 8012c40:	20000088 	.word	0x20000088

08012c44 <memset>:
 8012c44:	4402      	add	r2, r0
 8012c46:	4603      	mov	r3, r0
 8012c48:	4293      	cmp	r3, r2
 8012c4a:	d100      	bne.n	8012c4e <memset+0xa>
 8012c4c:	4770      	bx	lr
 8012c4e:	f803 1b01 	strb.w	r1, [r3], #1
 8012c52:	e7f9      	b.n	8012c48 <memset+0x4>

08012c54 <_localeconv_r>:
 8012c54:	4800      	ldr	r0, [pc, #0]	; (8012c58 <_localeconv_r+0x4>)
 8012c56:	4770      	bx	lr
 8012c58:	2000017c 	.word	0x2000017c

08012c5c <_close_r>:
 8012c5c:	b538      	push	{r3, r4, r5, lr}
 8012c5e:	4d06      	ldr	r5, [pc, #24]	; (8012c78 <_close_r+0x1c>)
 8012c60:	2300      	movs	r3, #0
 8012c62:	4604      	mov	r4, r0
 8012c64:	4608      	mov	r0, r1
 8012c66:	602b      	str	r3, [r5, #0]
 8012c68:	f7f5 fc71 	bl	800854e <_close>
 8012c6c:	1c43      	adds	r3, r0, #1
 8012c6e:	d102      	bne.n	8012c76 <_close_r+0x1a>
 8012c70:	682b      	ldr	r3, [r5, #0]
 8012c72:	b103      	cbz	r3, 8012c76 <_close_r+0x1a>
 8012c74:	6023      	str	r3, [r4, #0]
 8012c76:	bd38      	pop	{r3, r4, r5, pc}
 8012c78:	20008114 	.word	0x20008114

08012c7c <_reclaim_reent>:
 8012c7c:	4b29      	ldr	r3, [pc, #164]	; (8012d24 <_reclaim_reent+0xa8>)
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	4283      	cmp	r3, r0
 8012c82:	b570      	push	{r4, r5, r6, lr}
 8012c84:	4604      	mov	r4, r0
 8012c86:	d04b      	beq.n	8012d20 <_reclaim_reent+0xa4>
 8012c88:	69c3      	ldr	r3, [r0, #28]
 8012c8a:	b143      	cbz	r3, 8012c9e <_reclaim_reent+0x22>
 8012c8c:	68db      	ldr	r3, [r3, #12]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d144      	bne.n	8012d1c <_reclaim_reent+0xa0>
 8012c92:	69e3      	ldr	r3, [r4, #28]
 8012c94:	6819      	ldr	r1, [r3, #0]
 8012c96:	b111      	cbz	r1, 8012c9e <_reclaim_reent+0x22>
 8012c98:	4620      	mov	r0, r4
 8012c9a:	f000 ff33 	bl	8013b04 <_free_r>
 8012c9e:	6961      	ldr	r1, [r4, #20]
 8012ca0:	b111      	cbz	r1, 8012ca8 <_reclaim_reent+0x2c>
 8012ca2:	4620      	mov	r0, r4
 8012ca4:	f000 ff2e 	bl	8013b04 <_free_r>
 8012ca8:	69e1      	ldr	r1, [r4, #28]
 8012caa:	b111      	cbz	r1, 8012cb2 <_reclaim_reent+0x36>
 8012cac:	4620      	mov	r0, r4
 8012cae:	f000 ff29 	bl	8013b04 <_free_r>
 8012cb2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012cb4:	b111      	cbz	r1, 8012cbc <_reclaim_reent+0x40>
 8012cb6:	4620      	mov	r0, r4
 8012cb8:	f000 ff24 	bl	8013b04 <_free_r>
 8012cbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012cbe:	b111      	cbz	r1, 8012cc6 <_reclaim_reent+0x4a>
 8012cc0:	4620      	mov	r0, r4
 8012cc2:	f000 ff1f 	bl	8013b04 <_free_r>
 8012cc6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012cc8:	b111      	cbz	r1, 8012cd0 <_reclaim_reent+0x54>
 8012cca:	4620      	mov	r0, r4
 8012ccc:	f000 ff1a 	bl	8013b04 <_free_r>
 8012cd0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012cd2:	b111      	cbz	r1, 8012cda <_reclaim_reent+0x5e>
 8012cd4:	4620      	mov	r0, r4
 8012cd6:	f000 ff15 	bl	8013b04 <_free_r>
 8012cda:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8012cdc:	b111      	cbz	r1, 8012ce4 <_reclaim_reent+0x68>
 8012cde:	4620      	mov	r0, r4
 8012ce0:	f000 ff10 	bl	8013b04 <_free_r>
 8012ce4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8012ce6:	b111      	cbz	r1, 8012cee <_reclaim_reent+0x72>
 8012ce8:	4620      	mov	r0, r4
 8012cea:	f000 ff0b 	bl	8013b04 <_free_r>
 8012cee:	6a23      	ldr	r3, [r4, #32]
 8012cf0:	b1b3      	cbz	r3, 8012d20 <_reclaim_reent+0xa4>
 8012cf2:	4620      	mov	r0, r4
 8012cf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012cf8:	4718      	bx	r3
 8012cfa:	5949      	ldr	r1, [r1, r5]
 8012cfc:	b941      	cbnz	r1, 8012d10 <_reclaim_reent+0x94>
 8012cfe:	3504      	adds	r5, #4
 8012d00:	69e3      	ldr	r3, [r4, #28]
 8012d02:	2d80      	cmp	r5, #128	; 0x80
 8012d04:	68d9      	ldr	r1, [r3, #12]
 8012d06:	d1f8      	bne.n	8012cfa <_reclaim_reent+0x7e>
 8012d08:	4620      	mov	r0, r4
 8012d0a:	f000 fefb 	bl	8013b04 <_free_r>
 8012d0e:	e7c0      	b.n	8012c92 <_reclaim_reent+0x16>
 8012d10:	680e      	ldr	r6, [r1, #0]
 8012d12:	4620      	mov	r0, r4
 8012d14:	f000 fef6 	bl	8013b04 <_free_r>
 8012d18:	4631      	mov	r1, r6
 8012d1a:	e7ef      	b.n	8012cfc <_reclaim_reent+0x80>
 8012d1c:	2500      	movs	r5, #0
 8012d1e:	e7ef      	b.n	8012d00 <_reclaim_reent+0x84>
 8012d20:	bd70      	pop	{r4, r5, r6, pc}
 8012d22:	bf00      	nop
 8012d24:	20000088 	.word	0x20000088

08012d28 <_lseek_r>:
 8012d28:	b538      	push	{r3, r4, r5, lr}
 8012d2a:	4d07      	ldr	r5, [pc, #28]	; (8012d48 <_lseek_r+0x20>)
 8012d2c:	4604      	mov	r4, r0
 8012d2e:	4608      	mov	r0, r1
 8012d30:	4611      	mov	r1, r2
 8012d32:	2200      	movs	r2, #0
 8012d34:	602a      	str	r2, [r5, #0]
 8012d36:	461a      	mov	r2, r3
 8012d38:	f7f5 fc30 	bl	800859c <_lseek>
 8012d3c:	1c43      	adds	r3, r0, #1
 8012d3e:	d102      	bne.n	8012d46 <_lseek_r+0x1e>
 8012d40:	682b      	ldr	r3, [r5, #0]
 8012d42:	b103      	cbz	r3, 8012d46 <_lseek_r+0x1e>
 8012d44:	6023      	str	r3, [r4, #0]
 8012d46:	bd38      	pop	{r3, r4, r5, pc}
 8012d48:	20008114 	.word	0x20008114

08012d4c <_read_r>:
 8012d4c:	b538      	push	{r3, r4, r5, lr}
 8012d4e:	4d07      	ldr	r5, [pc, #28]	; (8012d6c <_read_r+0x20>)
 8012d50:	4604      	mov	r4, r0
 8012d52:	4608      	mov	r0, r1
 8012d54:	4611      	mov	r1, r2
 8012d56:	2200      	movs	r2, #0
 8012d58:	602a      	str	r2, [r5, #0]
 8012d5a:	461a      	mov	r2, r3
 8012d5c:	f7f5 fbbe 	bl	80084dc <_read>
 8012d60:	1c43      	adds	r3, r0, #1
 8012d62:	d102      	bne.n	8012d6a <_read_r+0x1e>
 8012d64:	682b      	ldr	r3, [r5, #0]
 8012d66:	b103      	cbz	r3, 8012d6a <_read_r+0x1e>
 8012d68:	6023      	str	r3, [r4, #0]
 8012d6a:	bd38      	pop	{r3, r4, r5, pc}
 8012d6c:	20008114 	.word	0x20008114

08012d70 <_write_r>:
 8012d70:	b538      	push	{r3, r4, r5, lr}
 8012d72:	4d07      	ldr	r5, [pc, #28]	; (8012d90 <_write_r+0x20>)
 8012d74:	4604      	mov	r4, r0
 8012d76:	4608      	mov	r0, r1
 8012d78:	4611      	mov	r1, r2
 8012d7a:	2200      	movs	r2, #0
 8012d7c:	602a      	str	r2, [r5, #0]
 8012d7e:	461a      	mov	r2, r3
 8012d80:	f7f5 fbc9 	bl	8008516 <_write>
 8012d84:	1c43      	adds	r3, r0, #1
 8012d86:	d102      	bne.n	8012d8e <_write_r+0x1e>
 8012d88:	682b      	ldr	r3, [r5, #0]
 8012d8a:	b103      	cbz	r3, 8012d8e <_write_r+0x1e>
 8012d8c:	6023      	str	r3, [r4, #0]
 8012d8e:	bd38      	pop	{r3, r4, r5, pc}
 8012d90:	20008114 	.word	0x20008114

08012d94 <__errno>:
 8012d94:	4b01      	ldr	r3, [pc, #4]	; (8012d9c <__errno+0x8>)
 8012d96:	6818      	ldr	r0, [r3, #0]
 8012d98:	4770      	bx	lr
 8012d9a:	bf00      	nop
 8012d9c:	20000088 	.word	0x20000088

08012da0 <__libc_init_array>:
 8012da0:	b570      	push	{r4, r5, r6, lr}
 8012da2:	4d0d      	ldr	r5, [pc, #52]	; (8012dd8 <__libc_init_array+0x38>)
 8012da4:	4c0d      	ldr	r4, [pc, #52]	; (8012ddc <__libc_init_array+0x3c>)
 8012da6:	1b64      	subs	r4, r4, r5
 8012da8:	10a4      	asrs	r4, r4, #2
 8012daa:	2600      	movs	r6, #0
 8012dac:	42a6      	cmp	r6, r4
 8012dae:	d109      	bne.n	8012dc4 <__libc_init_array+0x24>
 8012db0:	4d0b      	ldr	r5, [pc, #44]	; (8012de0 <__libc_init_array+0x40>)
 8012db2:	4c0c      	ldr	r4, [pc, #48]	; (8012de4 <__libc_init_array+0x44>)
 8012db4:	f001 ffd4 	bl	8014d60 <_init>
 8012db8:	1b64      	subs	r4, r4, r5
 8012dba:	10a4      	asrs	r4, r4, #2
 8012dbc:	2600      	movs	r6, #0
 8012dbe:	42a6      	cmp	r6, r4
 8012dc0:	d105      	bne.n	8012dce <__libc_init_array+0x2e>
 8012dc2:	bd70      	pop	{r4, r5, r6, pc}
 8012dc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8012dc8:	4798      	blx	r3
 8012dca:	3601      	adds	r6, #1
 8012dcc:	e7ee      	b.n	8012dac <__libc_init_array+0xc>
 8012dce:	f855 3b04 	ldr.w	r3, [r5], #4
 8012dd2:	4798      	blx	r3
 8012dd4:	3601      	adds	r6, #1
 8012dd6:	e7f2      	b.n	8012dbe <__libc_init_array+0x1e>
 8012dd8:	08015b24 	.word	0x08015b24
 8012ddc:	08015b24 	.word	0x08015b24
 8012de0:	08015b24 	.word	0x08015b24
 8012de4:	08015b2c 	.word	0x08015b2c

08012de8 <__retarget_lock_init_recursive>:
 8012de8:	4770      	bx	lr

08012dea <__retarget_lock_acquire_recursive>:
 8012dea:	4770      	bx	lr

08012dec <__retarget_lock_release_recursive>:
 8012dec:	4770      	bx	lr

08012dee <memcpy>:
 8012dee:	440a      	add	r2, r1
 8012df0:	4291      	cmp	r1, r2
 8012df2:	f100 33ff 	add.w	r3, r0, #4294967295
 8012df6:	d100      	bne.n	8012dfa <memcpy+0xc>
 8012df8:	4770      	bx	lr
 8012dfa:	b510      	push	{r4, lr}
 8012dfc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012e00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012e04:	4291      	cmp	r1, r2
 8012e06:	d1f9      	bne.n	8012dfc <memcpy+0xe>
 8012e08:	bd10      	pop	{r4, pc}

08012e0a <quorem>:
 8012e0a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e0e:	6903      	ldr	r3, [r0, #16]
 8012e10:	690c      	ldr	r4, [r1, #16]
 8012e12:	42a3      	cmp	r3, r4
 8012e14:	4607      	mov	r7, r0
 8012e16:	db7e      	blt.n	8012f16 <quorem+0x10c>
 8012e18:	3c01      	subs	r4, #1
 8012e1a:	f101 0814 	add.w	r8, r1, #20
 8012e1e:	f100 0514 	add.w	r5, r0, #20
 8012e22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012e26:	9301      	str	r3, [sp, #4]
 8012e28:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012e2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012e30:	3301      	adds	r3, #1
 8012e32:	429a      	cmp	r2, r3
 8012e34:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012e38:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012e3c:	fbb2 f6f3 	udiv	r6, r2, r3
 8012e40:	d331      	bcc.n	8012ea6 <quorem+0x9c>
 8012e42:	f04f 0e00 	mov.w	lr, #0
 8012e46:	4640      	mov	r0, r8
 8012e48:	46ac      	mov	ip, r5
 8012e4a:	46f2      	mov	sl, lr
 8012e4c:	f850 2b04 	ldr.w	r2, [r0], #4
 8012e50:	b293      	uxth	r3, r2
 8012e52:	fb06 e303 	mla	r3, r6, r3, lr
 8012e56:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012e5a:	0c1a      	lsrs	r2, r3, #16
 8012e5c:	b29b      	uxth	r3, r3
 8012e5e:	ebaa 0303 	sub.w	r3, sl, r3
 8012e62:	f8dc a000 	ldr.w	sl, [ip]
 8012e66:	fa13 f38a 	uxtah	r3, r3, sl
 8012e6a:	fb06 220e 	mla	r2, r6, lr, r2
 8012e6e:	9300      	str	r3, [sp, #0]
 8012e70:	9b00      	ldr	r3, [sp, #0]
 8012e72:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012e76:	b292      	uxth	r2, r2
 8012e78:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012e7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012e80:	f8bd 3000 	ldrh.w	r3, [sp]
 8012e84:	4581      	cmp	r9, r0
 8012e86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012e8a:	f84c 3b04 	str.w	r3, [ip], #4
 8012e8e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012e92:	d2db      	bcs.n	8012e4c <quorem+0x42>
 8012e94:	f855 300b 	ldr.w	r3, [r5, fp]
 8012e98:	b92b      	cbnz	r3, 8012ea6 <quorem+0x9c>
 8012e9a:	9b01      	ldr	r3, [sp, #4]
 8012e9c:	3b04      	subs	r3, #4
 8012e9e:	429d      	cmp	r5, r3
 8012ea0:	461a      	mov	r2, r3
 8012ea2:	d32c      	bcc.n	8012efe <quorem+0xf4>
 8012ea4:	613c      	str	r4, [r7, #16]
 8012ea6:	4638      	mov	r0, r7
 8012ea8:	f001 f9a8 	bl	80141fc <__mcmp>
 8012eac:	2800      	cmp	r0, #0
 8012eae:	db22      	blt.n	8012ef6 <quorem+0xec>
 8012eb0:	3601      	adds	r6, #1
 8012eb2:	4629      	mov	r1, r5
 8012eb4:	2000      	movs	r0, #0
 8012eb6:	f858 2b04 	ldr.w	r2, [r8], #4
 8012eba:	f8d1 c000 	ldr.w	ip, [r1]
 8012ebe:	b293      	uxth	r3, r2
 8012ec0:	1ac3      	subs	r3, r0, r3
 8012ec2:	0c12      	lsrs	r2, r2, #16
 8012ec4:	fa13 f38c 	uxtah	r3, r3, ip
 8012ec8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8012ecc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012ed0:	b29b      	uxth	r3, r3
 8012ed2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012ed6:	45c1      	cmp	r9, r8
 8012ed8:	f841 3b04 	str.w	r3, [r1], #4
 8012edc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012ee0:	d2e9      	bcs.n	8012eb6 <quorem+0xac>
 8012ee2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012ee6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012eea:	b922      	cbnz	r2, 8012ef6 <quorem+0xec>
 8012eec:	3b04      	subs	r3, #4
 8012eee:	429d      	cmp	r5, r3
 8012ef0:	461a      	mov	r2, r3
 8012ef2:	d30a      	bcc.n	8012f0a <quorem+0x100>
 8012ef4:	613c      	str	r4, [r7, #16]
 8012ef6:	4630      	mov	r0, r6
 8012ef8:	b003      	add	sp, #12
 8012efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012efe:	6812      	ldr	r2, [r2, #0]
 8012f00:	3b04      	subs	r3, #4
 8012f02:	2a00      	cmp	r2, #0
 8012f04:	d1ce      	bne.n	8012ea4 <quorem+0x9a>
 8012f06:	3c01      	subs	r4, #1
 8012f08:	e7c9      	b.n	8012e9e <quorem+0x94>
 8012f0a:	6812      	ldr	r2, [r2, #0]
 8012f0c:	3b04      	subs	r3, #4
 8012f0e:	2a00      	cmp	r2, #0
 8012f10:	d1f0      	bne.n	8012ef4 <quorem+0xea>
 8012f12:	3c01      	subs	r4, #1
 8012f14:	e7eb      	b.n	8012eee <quorem+0xe4>
 8012f16:	2000      	movs	r0, #0
 8012f18:	e7ee      	b.n	8012ef8 <quorem+0xee>
 8012f1a:	0000      	movs	r0, r0
 8012f1c:	0000      	movs	r0, r0
	...

08012f20 <_dtoa_r>:
 8012f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f24:	ed2d 8b04 	vpush	{d8-d9}
 8012f28:	69c5      	ldr	r5, [r0, #28]
 8012f2a:	b093      	sub	sp, #76	; 0x4c
 8012f2c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012f30:	ec57 6b10 	vmov	r6, r7, d0
 8012f34:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012f38:	9107      	str	r1, [sp, #28]
 8012f3a:	4604      	mov	r4, r0
 8012f3c:	920a      	str	r2, [sp, #40]	; 0x28
 8012f3e:	930d      	str	r3, [sp, #52]	; 0x34
 8012f40:	b975      	cbnz	r5, 8012f60 <_dtoa_r+0x40>
 8012f42:	2010      	movs	r0, #16
 8012f44:	f000 fe2a 	bl	8013b9c <malloc>
 8012f48:	4602      	mov	r2, r0
 8012f4a:	61e0      	str	r0, [r4, #28]
 8012f4c:	b920      	cbnz	r0, 8012f58 <_dtoa_r+0x38>
 8012f4e:	4bae      	ldr	r3, [pc, #696]	; (8013208 <_dtoa_r+0x2e8>)
 8012f50:	21ef      	movs	r1, #239	; 0xef
 8012f52:	48ae      	ldr	r0, [pc, #696]	; (801320c <_dtoa_r+0x2ec>)
 8012f54:	f001 fe52 	bl	8014bfc <__assert_func>
 8012f58:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012f5c:	6005      	str	r5, [r0, #0]
 8012f5e:	60c5      	str	r5, [r0, #12]
 8012f60:	69e3      	ldr	r3, [r4, #28]
 8012f62:	6819      	ldr	r1, [r3, #0]
 8012f64:	b151      	cbz	r1, 8012f7c <_dtoa_r+0x5c>
 8012f66:	685a      	ldr	r2, [r3, #4]
 8012f68:	604a      	str	r2, [r1, #4]
 8012f6a:	2301      	movs	r3, #1
 8012f6c:	4093      	lsls	r3, r2
 8012f6e:	608b      	str	r3, [r1, #8]
 8012f70:	4620      	mov	r0, r4
 8012f72:	f000 ff07 	bl	8013d84 <_Bfree>
 8012f76:	69e3      	ldr	r3, [r4, #28]
 8012f78:	2200      	movs	r2, #0
 8012f7a:	601a      	str	r2, [r3, #0]
 8012f7c:	1e3b      	subs	r3, r7, #0
 8012f7e:	bfbb      	ittet	lt
 8012f80:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012f84:	9303      	strlt	r3, [sp, #12]
 8012f86:	2300      	movge	r3, #0
 8012f88:	2201      	movlt	r2, #1
 8012f8a:	bfac      	ite	ge
 8012f8c:	f8c8 3000 	strge.w	r3, [r8]
 8012f90:	f8c8 2000 	strlt.w	r2, [r8]
 8012f94:	4b9e      	ldr	r3, [pc, #632]	; (8013210 <_dtoa_r+0x2f0>)
 8012f96:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8012f9a:	ea33 0308 	bics.w	r3, r3, r8
 8012f9e:	d11b      	bne.n	8012fd8 <_dtoa_r+0xb8>
 8012fa0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012fa2:	f242 730f 	movw	r3, #9999	; 0x270f
 8012fa6:	6013      	str	r3, [r2, #0]
 8012fa8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8012fac:	4333      	orrs	r3, r6
 8012fae:	f000 8593 	beq.w	8013ad8 <_dtoa_r+0xbb8>
 8012fb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012fb4:	b963      	cbnz	r3, 8012fd0 <_dtoa_r+0xb0>
 8012fb6:	4b97      	ldr	r3, [pc, #604]	; (8013214 <_dtoa_r+0x2f4>)
 8012fb8:	e027      	b.n	801300a <_dtoa_r+0xea>
 8012fba:	4b97      	ldr	r3, [pc, #604]	; (8013218 <_dtoa_r+0x2f8>)
 8012fbc:	9300      	str	r3, [sp, #0]
 8012fbe:	3308      	adds	r3, #8
 8012fc0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012fc2:	6013      	str	r3, [r2, #0]
 8012fc4:	9800      	ldr	r0, [sp, #0]
 8012fc6:	b013      	add	sp, #76	; 0x4c
 8012fc8:	ecbd 8b04 	vpop	{d8-d9}
 8012fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fd0:	4b90      	ldr	r3, [pc, #576]	; (8013214 <_dtoa_r+0x2f4>)
 8012fd2:	9300      	str	r3, [sp, #0]
 8012fd4:	3303      	adds	r3, #3
 8012fd6:	e7f3      	b.n	8012fc0 <_dtoa_r+0xa0>
 8012fd8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012fdc:	2200      	movs	r2, #0
 8012fde:	ec51 0b17 	vmov	r0, r1, d7
 8012fe2:	eeb0 8a47 	vmov.f32	s16, s14
 8012fe6:	eef0 8a67 	vmov.f32	s17, s15
 8012fea:	2300      	movs	r3, #0
 8012fec:	f7ed fd7c 	bl	8000ae8 <__aeabi_dcmpeq>
 8012ff0:	4681      	mov	r9, r0
 8012ff2:	b160      	cbz	r0, 801300e <_dtoa_r+0xee>
 8012ff4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012ff6:	2301      	movs	r3, #1
 8012ff8:	6013      	str	r3, [r2, #0]
 8012ffa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	f000 8568 	beq.w	8013ad2 <_dtoa_r+0xbb2>
 8013002:	4b86      	ldr	r3, [pc, #536]	; (801321c <_dtoa_r+0x2fc>)
 8013004:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013006:	6013      	str	r3, [r2, #0]
 8013008:	3b01      	subs	r3, #1
 801300a:	9300      	str	r3, [sp, #0]
 801300c:	e7da      	b.n	8012fc4 <_dtoa_r+0xa4>
 801300e:	aa10      	add	r2, sp, #64	; 0x40
 8013010:	a911      	add	r1, sp, #68	; 0x44
 8013012:	4620      	mov	r0, r4
 8013014:	eeb0 0a48 	vmov.f32	s0, s16
 8013018:	eef0 0a68 	vmov.f32	s1, s17
 801301c:	f001 f994 	bl	8014348 <__d2b>
 8013020:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8013024:	4682      	mov	sl, r0
 8013026:	2d00      	cmp	r5, #0
 8013028:	d07f      	beq.n	801312a <_dtoa_r+0x20a>
 801302a:	ee18 3a90 	vmov	r3, s17
 801302e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013032:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8013036:	ec51 0b18 	vmov	r0, r1, d8
 801303a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801303e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013042:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8013046:	4619      	mov	r1, r3
 8013048:	2200      	movs	r2, #0
 801304a:	4b75      	ldr	r3, [pc, #468]	; (8013220 <_dtoa_r+0x300>)
 801304c:	f7ed f92c 	bl	80002a8 <__aeabi_dsub>
 8013050:	a367      	add	r3, pc, #412	; (adr r3, 80131f0 <_dtoa_r+0x2d0>)
 8013052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013056:	f7ed fadf 	bl	8000618 <__aeabi_dmul>
 801305a:	a367      	add	r3, pc, #412	; (adr r3, 80131f8 <_dtoa_r+0x2d8>)
 801305c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013060:	f7ed f924 	bl	80002ac <__adddf3>
 8013064:	4606      	mov	r6, r0
 8013066:	4628      	mov	r0, r5
 8013068:	460f      	mov	r7, r1
 801306a:	f7ed fa6b 	bl	8000544 <__aeabi_i2d>
 801306e:	a364      	add	r3, pc, #400	; (adr r3, 8013200 <_dtoa_r+0x2e0>)
 8013070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013074:	f7ed fad0 	bl	8000618 <__aeabi_dmul>
 8013078:	4602      	mov	r2, r0
 801307a:	460b      	mov	r3, r1
 801307c:	4630      	mov	r0, r6
 801307e:	4639      	mov	r1, r7
 8013080:	f7ed f914 	bl	80002ac <__adddf3>
 8013084:	4606      	mov	r6, r0
 8013086:	460f      	mov	r7, r1
 8013088:	f7ed fd76 	bl	8000b78 <__aeabi_d2iz>
 801308c:	2200      	movs	r2, #0
 801308e:	4683      	mov	fp, r0
 8013090:	2300      	movs	r3, #0
 8013092:	4630      	mov	r0, r6
 8013094:	4639      	mov	r1, r7
 8013096:	f7ed fd31 	bl	8000afc <__aeabi_dcmplt>
 801309a:	b148      	cbz	r0, 80130b0 <_dtoa_r+0x190>
 801309c:	4658      	mov	r0, fp
 801309e:	f7ed fa51 	bl	8000544 <__aeabi_i2d>
 80130a2:	4632      	mov	r2, r6
 80130a4:	463b      	mov	r3, r7
 80130a6:	f7ed fd1f 	bl	8000ae8 <__aeabi_dcmpeq>
 80130aa:	b908      	cbnz	r0, 80130b0 <_dtoa_r+0x190>
 80130ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 80130b0:	f1bb 0f16 	cmp.w	fp, #22
 80130b4:	d857      	bhi.n	8013166 <_dtoa_r+0x246>
 80130b6:	4b5b      	ldr	r3, [pc, #364]	; (8013224 <_dtoa_r+0x304>)
 80130b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80130bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130c0:	ec51 0b18 	vmov	r0, r1, d8
 80130c4:	f7ed fd1a 	bl	8000afc <__aeabi_dcmplt>
 80130c8:	2800      	cmp	r0, #0
 80130ca:	d04e      	beq.n	801316a <_dtoa_r+0x24a>
 80130cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80130d0:	2300      	movs	r3, #0
 80130d2:	930c      	str	r3, [sp, #48]	; 0x30
 80130d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80130d6:	1b5b      	subs	r3, r3, r5
 80130d8:	1e5a      	subs	r2, r3, #1
 80130da:	bf45      	ittet	mi
 80130dc:	f1c3 0301 	rsbmi	r3, r3, #1
 80130e0:	9305      	strmi	r3, [sp, #20]
 80130e2:	2300      	movpl	r3, #0
 80130e4:	2300      	movmi	r3, #0
 80130e6:	9206      	str	r2, [sp, #24]
 80130e8:	bf54      	ite	pl
 80130ea:	9305      	strpl	r3, [sp, #20]
 80130ec:	9306      	strmi	r3, [sp, #24]
 80130ee:	f1bb 0f00 	cmp.w	fp, #0
 80130f2:	db3c      	blt.n	801316e <_dtoa_r+0x24e>
 80130f4:	9b06      	ldr	r3, [sp, #24]
 80130f6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80130fa:	445b      	add	r3, fp
 80130fc:	9306      	str	r3, [sp, #24]
 80130fe:	2300      	movs	r3, #0
 8013100:	9308      	str	r3, [sp, #32]
 8013102:	9b07      	ldr	r3, [sp, #28]
 8013104:	2b09      	cmp	r3, #9
 8013106:	d868      	bhi.n	80131da <_dtoa_r+0x2ba>
 8013108:	2b05      	cmp	r3, #5
 801310a:	bfc4      	itt	gt
 801310c:	3b04      	subgt	r3, #4
 801310e:	9307      	strgt	r3, [sp, #28]
 8013110:	9b07      	ldr	r3, [sp, #28]
 8013112:	f1a3 0302 	sub.w	r3, r3, #2
 8013116:	bfcc      	ite	gt
 8013118:	2500      	movgt	r5, #0
 801311a:	2501      	movle	r5, #1
 801311c:	2b03      	cmp	r3, #3
 801311e:	f200 8085 	bhi.w	801322c <_dtoa_r+0x30c>
 8013122:	e8df f003 	tbb	[pc, r3]
 8013126:	3b2e      	.short	0x3b2e
 8013128:	5839      	.short	0x5839
 801312a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801312e:	441d      	add	r5, r3
 8013130:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8013134:	2b20      	cmp	r3, #32
 8013136:	bfc1      	itttt	gt
 8013138:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801313c:	fa08 f803 	lslgt.w	r8, r8, r3
 8013140:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8013144:	fa26 f303 	lsrgt.w	r3, r6, r3
 8013148:	bfd6      	itet	le
 801314a:	f1c3 0320 	rsble	r3, r3, #32
 801314e:	ea48 0003 	orrgt.w	r0, r8, r3
 8013152:	fa06 f003 	lslle.w	r0, r6, r3
 8013156:	f7ed f9e5 	bl	8000524 <__aeabi_ui2d>
 801315a:	2201      	movs	r2, #1
 801315c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8013160:	3d01      	subs	r5, #1
 8013162:	920e      	str	r2, [sp, #56]	; 0x38
 8013164:	e76f      	b.n	8013046 <_dtoa_r+0x126>
 8013166:	2301      	movs	r3, #1
 8013168:	e7b3      	b.n	80130d2 <_dtoa_r+0x1b2>
 801316a:	900c      	str	r0, [sp, #48]	; 0x30
 801316c:	e7b2      	b.n	80130d4 <_dtoa_r+0x1b4>
 801316e:	9b05      	ldr	r3, [sp, #20]
 8013170:	eba3 030b 	sub.w	r3, r3, fp
 8013174:	9305      	str	r3, [sp, #20]
 8013176:	f1cb 0300 	rsb	r3, fp, #0
 801317a:	9308      	str	r3, [sp, #32]
 801317c:	2300      	movs	r3, #0
 801317e:	930b      	str	r3, [sp, #44]	; 0x2c
 8013180:	e7bf      	b.n	8013102 <_dtoa_r+0x1e2>
 8013182:	2300      	movs	r3, #0
 8013184:	9309      	str	r3, [sp, #36]	; 0x24
 8013186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013188:	2b00      	cmp	r3, #0
 801318a:	dc52      	bgt.n	8013232 <_dtoa_r+0x312>
 801318c:	2301      	movs	r3, #1
 801318e:	9301      	str	r3, [sp, #4]
 8013190:	9304      	str	r3, [sp, #16]
 8013192:	461a      	mov	r2, r3
 8013194:	920a      	str	r2, [sp, #40]	; 0x28
 8013196:	e00b      	b.n	80131b0 <_dtoa_r+0x290>
 8013198:	2301      	movs	r3, #1
 801319a:	e7f3      	b.n	8013184 <_dtoa_r+0x264>
 801319c:	2300      	movs	r3, #0
 801319e:	9309      	str	r3, [sp, #36]	; 0x24
 80131a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80131a2:	445b      	add	r3, fp
 80131a4:	9301      	str	r3, [sp, #4]
 80131a6:	3301      	adds	r3, #1
 80131a8:	2b01      	cmp	r3, #1
 80131aa:	9304      	str	r3, [sp, #16]
 80131ac:	bfb8      	it	lt
 80131ae:	2301      	movlt	r3, #1
 80131b0:	69e0      	ldr	r0, [r4, #28]
 80131b2:	2100      	movs	r1, #0
 80131b4:	2204      	movs	r2, #4
 80131b6:	f102 0614 	add.w	r6, r2, #20
 80131ba:	429e      	cmp	r6, r3
 80131bc:	d93d      	bls.n	801323a <_dtoa_r+0x31a>
 80131be:	6041      	str	r1, [r0, #4]
 80131c0:	4620      	mov	r0, r4
 80131c2:	f000 fd9f 	bl	8013d04 <_Balloc>
 80131c6:	9000      	str	r0, [sp, #0]
 80131c8:	2800      	cmp	r0, #0
 80131ca:	d139      	bne.n	8013240 <_dtoa_r+0x320>
 80131cc:	4b16      	ldr	r3, [pc, #88]	; (8013228 <_dtoa_r+0x308>)
 80131ce:	4602      	mov	r2, r0
 80131d0:	f240 11af 	movw	r1, #431	; 0x1af
 80131d4:	e6bd      	b.n	8012f52 <_dtoa_r+0x32>
 80131d6:	2301      	movs	r3, #1
 80131d8:	e7e1      	b.n	801319e <_dtoa_r+0x27e>
 80131da:	2501      	movs	r5, #1
 80131dc:	2300      	movs	r3, #0
 80131de:	9307      	str	r3, [sp, #28]
 80131e0:	9509      	str	r5, [sp, #36]	; 0x24
 80131e2:	f04f 33ff 	mov.w	r3, #4294967295
 80131e6:	9301      	str	r3, [sp, #4]
 80131e8:	9304      	str	r3, [sp, #16]
 80131ea:	2200      	movs	r2, #0
 80131ec:	2312      	movs	r3, #18
 80131ee:	e7d1      	b.n	8013194 <_dtoa_r+0x274>
 80131f0:	636f4361 	.word	0x636f4361
 80131f4:	3fd287a7 	.word	0x3fd287a7
 80131f8:	8b60c8b3 	.word	0x8b60c8b3
 80131fc:	3fc68a28 	.word	0x3fc68a28
 8013200:	509f79fb 	.word	0x509f79fb
 8013204:	3fd34413 	.word	0x3fd34413
 8013208:	080157e9 	.word	0x080157e9
 801320c:	08015800 	.word	0x08015800
 8013210:	7ff00000 	.word	0x7ff00000
 8013214:	080157e5 	.word	0x080157e5
 8013218:	080157dc 	.word	0x080157dc
 801321c:	080157b9 	.word	0x080157b9
 8013220:	3ff80000 	.word	0x3ff80000
 8013224:	080158f0 	.word	0x080158f0
 8013228:	08015858 	.word	0x08015858
 801322c:	2301      	movs	r3, #1
 801322e:	9309      	str	r3, [sp, #36]	; 0x24
 8013230:	e7d7      	b.n	80131e2 <_dtoa_r+0x2c2>
 8013232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013234:	9301      	str	r3, [sp, #4]
 8013236:	9304      	str	r3, [sp, #16]
 8013238:	e7ba      	b.n	80131b0 <_dtoa_r+0x290>
 801323a:	3101      	adds	r1, #1
 801323c:	0052      	lsls	r2, r2, #1
 801323e:	e7ba      	b.n	80131b6 <_dtoa_r+0x296>
 8013240:	69e3      	ldr	r3, [r4, #28]
 8013242:	9a00      	ldr	r2, [sp, #0]
 8013244:	601a      	str	r2, [r3, #0]
 8013246:	9b04      	ldr	r3, [sp, #16]
 8013248:	2b0e      	cmp	r3, #14
 801324a:	f200 80a8 	bhi.w	801339e <_dtoa_r+0x47e>
 801324e:	2d00      	cmp	r5, #0
 8013250:	f000 80a5 	beq.w	801339e <_dtoa_r+0x47e>
 8013254:	f1bb 0f00 	cmp.w	fp, #0
 8013258:	dd38      	ble.n	80132cc <_dtoa_r+0x3ac>
 801325a:	4bc0      	ldr	r3, [pc, #768]	; (801355c <_dtoa_r+0x63c>)
 801325c:	f00b 020f 	and.w	r2, fp, #15
 8013260:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013264:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8013268:	e9d3 6700 	ldrd	r6, r7, [r3]
 801326c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8013270:	d019      	beq.n	80132a6 <_dtoa_r+0x386>
 8013272:	4bbb      	ldr	r3, [pc, #748]	; (8013560 <_dtoa_r+0x640>)
 8013274:	ec51 0b18 	vmov	r0, r1, d8
 8013278:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801327c:	f7ed faf6 	bl	800086c <__aeabi_ddiv>
 8013280:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013284:	f008 080f 	and.w	r8, r8, #15
 8013288:	2503      	movs	r5, #3
 801328a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8013560 <_dtoa_r+0x640>
 801328e:	f1b8 0f00 	cmp.w	r8, #0
 8013292:	d10a      	bne.n	80132aa <_dtoa_r+0x38a>
 8013294:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013298:	4632      	mov	r2, r6
 801329a:	463b      	mov	r3, r7
 801329c:	f7ed fae6 	bl	800086c <__aeabi_ddiv>
 80132a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80132a4:	e02b      	b.n	80132fe <_dtoa_r+0x3de>
 80132a6:	2502      	movs	r5, #2
 80132a8:	e7ef      	b.n	801328a <_dtoa_r+0x36a>
 80132aa:	f018 0f01 	tst.w	r8, #1
 80132ae:	d008      	beq.n	80132c2 <_dtoa_r+0x3a2>
 80132b0:	4630      	mov	r0, r6
 80132b2:	4639      	mov	r1, r7
 80132b4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80132b8:	f7ed f9ae 	bl	8000618 <__aeabi_dmul>
 80132bc:	3501      	adds	r5, #1
 80132be:	4606      	mov	r6, r0
 80132c0:	460f      	mov	r7, r1
 80132c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80132c6:	f109 0908 	add.w	r9, r9, #8
 80132ca:	e7e0      	b.n	801328e <_dtoa_r+0x36e>
 80132cc:	f000 809f 	beq.w	801340e <_dtoa_r+0x4ee>
 80132d0:	f1cb 0600 	rsb	r6, fp, #0
 80132d4:	4ba1      	ldr	r3, [pc, #644]	; (801355c <_dtoa_r+0x63c>)
 80132d6:	4fa2      	ldr	r7, [pc, #648]	; (8013560 <_dtoa_r+0x640>)
 80132d8:	f006 020f 	and.w	r2, r6, #15
 80132dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80132e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132e4:	ec51 0b18 	vmov	r0, r1, d8
 80132e8:	f7ed f996 	bl	8000618 <__aeabi_dmul>
 80132ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80132f0:	1136      	asrs	r6, r6, #4
 80132f2:	2300      	movs	r3, #0
 80132f4:	2502      	movs	r5, #2
 80132f6:	2e00      	cmp	r6, #0
 80132f8:	d17e      	bne.n	80133f8 <_dtoa_r+0x4d8>
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d1d0      	bne.n	80132a0 <_dtoa_r+0x380>
 80132fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013300:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8013304:	2b00      	cmp	r3, #0
 8013306:	f000 8084 	beq.w	8013412 <_dtoa_r+0x4f2>
 801330a:	4b96      	ldr	r3, [pc, #600]	; (8013564 <_dtoa_r+0x644>)
 801330c:	2200      	movs	r2, #0
 801330e:	4640      	mov	r0, r8
 8013310:	4649      	mov	r1, r9
 8013312:	f7ed fbf3 	bl	8000afc <__aeabi_dcmplt>
 8013316:	2800      	cmp	r0, #0
 8013318:	d07b      	beq.n	8013412 <_dtoa_r+0x4f2>
 801331a:	9b04      	ldr	r3, [sp, #16]
 801331c:	2b00      	cmp	r3, #0
 801331e:	d078      	beq.n	8013412 <_dtoa_r+0x4f2>
 8013320:	9b01      	ldr	r3, [sp, #4]
 8013322:	2b00      	cmp	r3, #0
 8013324:	dd39      	ble.n	801339a <_dtoa_r+0x47a>
 8013326:	4b90      	ldr	r3, [pc, #576]	; (8013568 <_dtoa_r+0x648>)
 8013328:	2200      	movs	r2, #0
 801332a:	4640      	mov	r0, r8
 801332c:	4649      	mov	r1, r9
 801332e:	f7ed f973 	bl	8000618 <__aeabi_dmul>
 8013332:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013336:	9e01      	ldr	r6, [sp, #4]
 8013338:	f10b 37ff 	add.w	r7, fp, #4294967295
 801333c:	3501      	adds	r5, #1
 801333e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8013342:	4628      	mov	r0, r5
 8013344:	f7ed f8fe 	bl	8000544 <__aeabi_i2d>
 8013348:	4642      	mov	r2, r8
 801334a:	464b      	mov	r3, r9
 801334c:	f7ed f964 	bl	8000618 <__aeabi_dmul>
 8013350:	4b86      	ldr	r3, [pc, #536]	; (801356c <_dtoa_r+0x64c>)
 8013352:	2200      	movs	r2, #0
 8013354:	f7ec ffaa 	bl	80002ac <__adddf3>
 8013358:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801335c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013360:	9303      	str	r3, [sp, #12]
 8013362:	2e00      	cmp	r6, #0
 8013364:	d158      	bne.n	8013418 <_dtoa_r+0x4f8>
 8013366:	4b82      	ldr	r3, [pc, #520]	; (8013570 <_dtoa_r+0x650>)
 8013368:	2200      	movs	r2, #0
 801336a:	4640      	mov	r0, r8
 801336c:	4649      	mov	r1, r9
 801336e:	f7ec ff9b 	bl	80002a8 <__aeabi_dsub>
 8013372:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013376:	4680      	mov	r8, r0
 8013378:	4689      	mov	r9, r1
 801337a:	f7ed fbdd 	bl	8000b38 <__aeabi_dcmpgt>
 801337e:	2800      	cmp	r0, #0
 8013380:	f040 8296 	bne.w	80138b0 <_dtoa_r+0x990>
 8013384:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013388:	4640      	mov	r0, r8
 801338a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801338e:	4649      	mov	r1, r9
 8013390:	f7ed fbb4 	bl	8000afc <__aeabi_dcmplt>
 8013394:	2800      	cmp	r0, #0
 8013396:	f040 8289 	bne.w	80138ac <_dtoa_r+0x98c>
 801339a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801339e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	f2c0 814e 	blt.w	8013642 <_dtoa_r+0x722>
 80133a6:	f1bb 0f0e 	cmp.w	fp, #14
 80133aa:	f300 814a 	bgt.w	8013642 <_dtoa_r+0x722>
 80133ae:	4b6b      	ldr	r3, [pc, #428]	; (801355c <_dtoa_r+0x63c>)
 80133b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80133b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80133b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	f280 80dc 	bge.w	8013578 <_dtoa_r+0x658>
 80133c0:	9b04      	ldr	r3, [sp, #16]
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	f300 80d8 	bgt.w	8013578 <_dtoa_r+0x658>
 80133c8:	f040 826f 	bne.w	80138aa <_dtoa_r+0x98a>
 80133cc:	4b68      	ldr	r3, [pc, #416]	; (8013570 <_dtoa_r+0x650>)
 80133ce:	2200      	movs	r2, #0
 80133d0:	4640      	mov	r0, r8
 80133d2:	4649      	mov	r1, r9
 80133d4:	f7ed f920 	bl	8000618 <__aeabi_dmul>
 80133d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80133dc:	f7ed fba2 	bl	8000b24 <__aeabi_dcmpge>
 80133e0:	9e04      	ldr	r6, [sp, #16]
 80133e2:	4637      	mov	r7, r6
 80133e4:	2800      	cmp	r0, #0
 80133e6:	f040 8245 	bne.w	8013874 <_dtoa_r+0x954>
 80133ea:	9d00      	ldr	r5, [sp, #0]
 80133ec:	2331      	movs	r3, #49	; 0x31
 80133ee:	f805 3b01 	strb.w	r3, [r5], #1
 80133f2:	f10b 0b01 	add.w	fp, fp, #1
 80133f6:	e241      	b.n	801387c <_dtoa_r+0x95c>
 80133f8:	07f2      	lsls	r2, r6, #31
 80133fa:	d505      	bpl.n	8013408 <_dtoa_r+0x4e8>
 80133fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013400:	f7ed f90a 	bl	8000618 <__aeabi_dmul>
 8013404:	3501      	adds	r5, #1
 8013406:	2301      	movs	r3, #1
 8013408:	1076      	asrs	r6, r6, #1
 801340a:	3708      	adds	r7, #8
 801340c:	e773      	b.n	80132f6 <_dtoa_r+0x3d6>
 801340e:	2502      	movs	r5, #2
 8013410:	e775      	b.n	80132fe <_dtoa_r+0x3de>
 8013412:	9e04      	ldr	r6, [sp, #16]
 8013414:	465f      	mov	r7, fp
 8013416:	e792      	b.n	801333e <_dtoa_r+0x41e>
 8013418:	9900      	ldr	r1, [sp, #0]
 801341a:	4b50      	ldr	r3, [pc, #320]	; (801355c <_dtoa_r+0x63c>)
 801341c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013420:	4431      	add	r1, r6
 8013422:	9102      	str	r1, [sp, #8]
 8013424:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013426:	eeb0 9a47 	vmov.f32	s18, s14
 801342a:	eef0 9a67 	vmov.f32	s19, s15
 801342e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8013432:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013436:	2900      	cmp	r1, #0
 8013438:	d044      	beq.n	80134c4 <_dtoa_r+0x5a4>
 801343a:	494e      	ldr	r1, [pc, #312]	; (8013574 <_dtoa_r+0x654>)
 801343c:	2000      	movs	r0, #0
 801343e:	f7ed fa15 	bl	800086c <__aeabi_ddiv>
 8013442:	ec53 2b19 	vmov	r2, r3, d9
 8013446:	f7ec ff2f 	bl	80002a8 <__aeabi_dsub>
 801344a:	9d00      	ldr	r5, [sp, #0]
 801344c:	ec41 0b19 	vmov	d9, r0, r1
 8013450:	4649      	mov	r1, r9
 8013452:	4640      	mov	r0, r8
 8013454:	f7ed fb90 	bl	8000b78 <__aeabi_d2iz>
 8013458:	4606      	mov	r6, r0
 801345a:	f7ed f873 	bl	8000544 <__aeabi_i2d>
 801345e:	4602      	mov	r2, r0
 8013460:	460b      	mov	r3, r1
 8013462:	4640      	mov	r0, r8
 8013464:	4649      	mov	r1, r9
 8013466:	f7ec ff1f 	bl	80002a8 <__aeabi_dsub>
 801346a:	3630      	adds	r6, #48	; 0x30
 801346c:	f805 6b01 	strb.w	r6, [r5], #1
 8013470:	ec53 2b19 	vmov	r2, r3, d9
 8013474:	4680      	mov	r8, r0
 8013476:	4689      	mov	r9, r1
 8013478:	f7ed fb40 	bl	8000afc <__aeabi_dcmplt>
 801347c:	2800      	cmp	r0, #0
 801347e:	d164      	bne.n	801354a <_dtoa_r+0x62a>
 8013480:	4642      	mov	r2, r8
 8013482:	464b      	mov	r3, r9
 8013484:	4937      	ldr	r1, [pc, #220]	; (8013564 <_dtoa_r+0x644>)
 8013486:	2000      	movs	r0, #0
 8013488:	f7ec ff0e 	bl	80002a8 <__aeabi_dsub>
 801348c:	ec53 2b19 	vmov	r2, r3, d9
 8013490:	f7ed fb34 	bl	8000afc <__aeabi_dcmplt>
 8013494:	2800      	cmp	r0, #0
 8013496:	f040 80b6 	bne.w	8013606 <_dtoa_r+0x6e6>
 801349a:	9b02      	ldr	r3, [sp, #8]
 801349c:	429d      	cmp	r5, r3
 801349e:	f43f af7c 	beq.w	801339a <_dtoa_r+0x47a>
 80134a2:	4b31      	ldr	r3, [pc, #196]	; (8013568 <_dtoa_r+0x648>)
 80134a4:	ec51 0b19 	vmov	r0, r1, d9
 80134a8:	2200      	movs	r2, #0
 80134aa:	f7ed f8b5 	bl	8000618 <__aeabi_dmul>
 80134ae:	4b2e      	ldr	r3, [pc, #184]	; (8013568 <_dtoa_r+0x648>)
 80134b0:	ec41 0b19 	vmov	d9, r0, r1
 80134b4:	2200      	movs	r2, #0
 80134b6:	4640      	mov	r0, r8
 80134b8:	4649      	mov	r1, r9
 80134ba:	f7ed f8ad 	bl	8000618 <__aeabi_dmul>
 80134be:	4680      	mov	r8, r0
 80134c0:	4689      	mov	r9, r1
 80134c2:	e7c5      	b.n	8013450 <_dtoa_r+0x530>
 80134c4:	ec51 0b17 	vmov	r0, r1, d7
 80134c8:	f7ed f8a6 	bl	8000618 <__aeabi_dmul>
 80134cc:	9b02      	ldr	r3, [sp, #8]
 80134ce:	9d00      	ldr	r5, [sp, #0]
 80134d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80134d2:	ec41 0b19 	vmov	d9, r0, r1
 80134d6:	4649      	mov	r1, r9
 80134d8:	4640      	mov	r0, r8
 80134da:	f7ed fb4d 	bl	8000b78 <__aeabi_d2iz>
 80134de:	4606      	mov	r6, r0
 80134e0:	f7ed f830 	bl	8000544 <__aeabi_i2d>
 80134e4:	3630      	adds	r6, #48	; 0x30
 80134e6:	4602      	mov	r2, r0
 80134e8:	460b      	mov	r3, r1
 80134ea:	4640      	mov	r0, r8
 80134ec:	4649      	mov	r1, r9
 80134ee:	f7ec fedb 	bl	80002a8 <__aeabi_dsub>
 80134f2:	f805 6b01 	strb.w	r6, [r5], #1
 80134f6:	9b02      	ldr	r3, [sp, #8]
 80134f8:	429d      	cmp	r5, r3
 80134fa:	4680      	mov	r8, r0
 80134fc:	4689      	mov	r9, r1
 80134fe:	f04f 0200 	mov.w	r2, #0
 8013502:	d124      	bne.n	801354e <_dtoa_r+0x62e>
 8013504:	4b1b      	ldr	r3, [pc, #108]	; (8013574 <_dtoa_r+0x654>)
 8013506:	ec51 0b19 	vmov	r0, r1, d9
 801350a:	f7ec fecf 	bl	80002ac <__adddf3>
 801350e:	4602      	mov	r2, r0
 8013510:	460b      	mov	r3, r1
 8013512:	4640      	mov	r0, r8
 8013514:	4649      	mov	r1, r9
 8013516:	f7ed fb0f 	bl	8000b38 <__aeabi_dcmpgt>
 801351a:	2800      	cmp	r0, #0
 801351c:	d173      	bne.n	8013606 <_dtoa_r+0x6e6>
 801351e:	ec53 2b19 	vmov	r2, r3, d9
 8013522:	4914      	ldr	r1, [pc, #80]	; (8013574 <_dtoa_r+0x654>)
 8013524:	2000      	movs	r0, #0
 8013526:	f7ec febf 	bl	80002a8 <__aeabi_dsub>
 801352a:	4602      	mov	r2, r0
 801352c:	460b      	mov	r3, r1
 801352e:	4640      	mov	r0, r8
 8013530:	4649      	mov	r1, r9
 8013532:	f7ed fae3 	bl	8000afc <__aeabi_dcmplt>
 8013536:	2800      	cmp	r0, #0
 8013538:	f43f af2f 	beq.w	801339a <_dtoa_r+0x47a>
 801353c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801353e:	1e6b      	subs	r3, r5, #1
 8013540:	930f      	str	r3, [sp, #60]	; 0x3c
 8013542:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013546:	2b30      	cmp	r3, #48	; 0x30
 8013548:	d0f8      	beq.n	801353c <_dtoa_r+0x61c>
 801354a:	46bb      	mov	fp, r7
 801354c:	e04a      	b.n	80135e4 <_dtoa_r+0x6c4>
 801354e:	4b06      	ldr	r3, [pc, #24]	; (8013568 <_dtoa_r+0x648>)
 8013550:	f7ed f862 	bl	8000618 <__aeabi_dmul>
 8013554:	4680      	mov	r8, r0
 8013556:	4689      	mov	r9, r1
 8013558:	e7bd      	b.n	80134d6 <_dtoa_r+0x5b6>
 801355a:	bf00      	nop
 801355c:	080158f0 	.word	0x080158f0
 8013560:	080158c8 	.word	0x080158c8
 8013564:	3ff00000 	.word	0x3ff00000
 8013568:	40240000 	.word	0x40240000
 801356c:	401c0000 	.word	0x401c0000
 8013570:	40140000 	.word	0x40140000
 8013574:	3fe00000 	.word	0x3fe00000
 8013578:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801357c:	9d00      	ldr	r5, [sp, #0]
 801357e:	4642      	mov	r2, r8
 8013580:	464b      	mov	r3, r9
 8013582:	4630      	mov	r0, r6
 8013584:	4639      	mov	r1, r7
 8013586:	f7ed f971 	bl	800086c <__aeabi_ddiv>
 801358a:	f7ed faf5 	bl	8000b78 <__aeabi_d2iz>
 801358e:	9001      	str	r0, [sp, #4]
 8013590:	f7ec ffd8 	bl	8000544 <__aeabi_i2d>
 8013594:	4642      	mov	r2, r8
 8013596:	464b      	mov	r3, r9
 8013598:	f7ed f83e 	bl	8000618 <__aeabi_dmul>
 801359c:	4602      	mov	r2, r0
 801359e:	460b      	mov	r3, r1
 80135a0:	4630      	mov	r0, r6
 80135a2:	4639      	mov	r1, r7
 80135a4:	f7ec fe80 	bl	80002a8 <__aeabi_dsub>
 80135a8:	9e01      	ldr	r6, [sp, #4]
 80135aa:	9f04      	ldr	r7, [sp, #16]
 80135ac:	3630      	adds	r6, #48	; 0x30
 80135ae:	f805 6b01 	strb.w	r6, [r5], #1
 80135b2:	9e00      	ldr	r6, [sp, #0]
 80135b4:	1bae      	subs	r6, r5, r6
 80135b6:	42b7      	cmp	r7, r6
 80135b8:	4602      	mov	r2, r0
 80135ba:	460b      	mov	r3, r1
 80135bc:	d134      	bne.n	8013628 <_dtoa_r+0x708>
 80135be:	f7ec fe75 	bl	80002ac <__adddf3>
 80135c2:	4642      	mov	r2, r8
 80135c4:	464b      	mov	r3, r9
 80135c6:	4606      	mov	r6, r0
 80135c8:	460f      	mov	r7, r1
 80135ca:	f7ed fab5 	bl	8000b38 <__aeabi_dcmpgt>
 80135ce:	b9c8      	cbnz	r0, 8013604 <_dtoa_r+0x6e4>
 80135d0:	4642      	mov	r2, r8
 80135d2:	464b      	mov	r3, r9
 80135d4:	4630      	mov	r0, r6
 80135d6:	4639      	mov	r1, r7
 80135d8:	f7ed fa86 	bl	8000ae8 <__aeabi_dcmpeq>
 80135dc:	b110      	cbz	r0, 80135e4 <_dtoa_r+0x6c4>
 80135de:	9b01      	ldr	r3, [sp, #4]
 80135e0:	07db      	lsls	r3, r3, #31
 80135e2:	d40f      	bmi.n	8013604 <_dtoa_r+0x6e4>
 80135e4:	4651      	mov	r1, sl
 80135e6:	4620      	mov	r0, r4
 80135e8:	f000 fbcc 	bl	8013d84 <_Bfree>
 80135ec:	2300      	movs	r3, #0
 80135ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80135f0:	702b      	strb	r3, [r5, #0]
 80135f2:	f10b 0301 	add.w	r3, fp, #1
 80135f6:	6013      	str	r3, [r2, #0]
 80135f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	f43f ace2 	beq.w	8012fc4 <_dtoa_r+0xa4>
 8013600:	601d      	str	r5, [r3, #0]
 8013602:	e4df      	b.n	8012fc4 <_dtoa_r+0xa4>
 8013604:	465f      	mov	r7, fp
 8013606:	462b      	mov	r3, r5
 8013608:	461d      	mov	r5, r3
 801360a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801360e:	2a39      	cmp	r2, #57	; 0x39
 8013610:	d106      	bne.n	8013620 <_dtoa_r+0x700>
 8013612:	9a00      	ldr	r2, [sp, #0]
 8013614:	429a      	cmp	r2, r3
 8013616:	d1f7      	bne.n	8013608 <_dtoa_r+0x6e8>
 8013618:	9900      	ldr	r1, [sp, #0]
 801361a:	2230      	movs	r2, #48	; 0x30
 801361c:	3701      	adds	r7, #1
 801361e:	700a      	strb	r2, [r1, #0]
 8013620:	781a      	ldrb	r2, [r3, #0]
 8013622:	3201      	adds	r2, #1
 8013624:	701a      	strb	r2, [r3, #0]
 8013626:	e790      	b.n	801354a <_dtoa_r+0x62a>
 8013628:	4ba3      	ldr	r3, [pc, #652]	; (80138b8 <_dtoa_r+0x998>)
 801362a:	2200      	movs	r2, #0
 801362c:	f7ec fff4 	bl	8000618 <__aeabi_dmul>
 8013630:	2200      	movs	r2, #0
 8013632:	2300      	movs	r3, #0
 8013634:	4606      	mov	r6, r0
 8013636:	460f      	mov	r7, r1
 8013638:	f7ed fa56 	bl	8000ae8 <__aeabi_dcmpeq>
 801363c:	2800      	cmp	r0, #0
 801363e:	d09e      	beq.n	801357e <_dtoa_r+0x65e>
 8013640:	e7d0      	b.n	80135e4 <_dtoa_r+0x6c4>
 8013642:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013644:	2a00      	cmp	r2, #0
 8013646:	f000 80ca 	beq.w	80137de <_dtoa_r+0x8be>
 801364a:	9a07      	ldr	r2, [sp, #28]
 801364c:	2a01      	cmp	r2, #1
 801364e:	f300 80ad 	bgt.w	80137ac <_dtoa_r+0x88c>
 8013652:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013654:	2a00      	cmp	r2, #0
 8013656:	f000 80a5 	beq.w	80137a4 <_dtoa_r+0x884>
 801365a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801365e:	9e08      	ldr	r6, [sp, #32]
 8013660:	9d05      	ldr	r5, [sp, #20]
 8013662:	9a05      	ldr	r2, [sp, #20]
 8013664:	441a      	add	r2, r3
 8013666:	9205      	str	r2, [sp, #20]
 8013668:	9a06      	ldr	r2, [sp, #24]
 801366a:	2101      	movs	r1, #1
 801366c:	441a      	add	r2, r3
 801366e:	4620      	mov	r0, r4
 8013670:	9206      	str	r2, [sp, #24]
 8013672:	f000 fc3d 	bl	8013ef0 <__i2b>
 8013676:	4607      	mov	r7, r0
 8013678:	b165      	cbz	r5, 8013694 <_dtoa_r+0x774>
 801367a:	9b06      	ldr	r3, [sp, #24]
 801367c:	2b00      	cmp	r3, #0
 801367e:	dd09      	ble.n	8013694 <_dtoa_r+0x774>
 8013680:	42ab      	cmp	r3, r5
 8013682:	9a05      	ldr	r2, [sp, #20]
 8013684:	bfa8      	it	ge
 8013686:	462b      	movge	r3, r5
 8013688:	1ad2      	subs	r2, r2, r3
 801368a:	9205      	str	r2, [sp, #20]
 801368c:	9a06      	ldr	r2, [sp, #24]
 801368e:	1aed      	subs	r5, r5, r3
 8013690:	1ad3      	subs	r3, r2, r3
 8013692:	9306      	str	r3, [sp, #24]
 8013694:	9b08      	ldr	r3, [sp, #32]
 8013696:	b1f3      	cbz	r3, 80136d6 <_dtoa_r+0x7b6>
 8013698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801369a:	2b00      	cmp	r3, #0
 801369c:	f000 80a3 	beq.w	80137e6 <_dtoa_r+0x8c6>
 80136a0:	2e00      	cmp	r6, #0
 80136a2:	dd10      	ble.n	80136c6 <_dtoa_r+0x7a6>
 80136a4:	4639      	mov	r1, r7
 80136a6:	4632      	mov	r2, r6
 80136a8:	4620      	mov	r0, r4
 80136aa:	f000 fce1 	bl	8014070 <__pow5mult>
 80136ae:	4652      	mov	r2, sl
 80136b0:	4601      	mov	r1, r0
 80136b2:	4607      	mov	r7, r0
 80136b4:	4620      	mov	r0, r4
 80136b6:	f000 fc31 	bl	8013f1c <__multiply>
 80136ba:	4651      	mov	r1, sl
 80136bc:	4680      	mov	r8, r0
 80136be:	4620      	mov	r0, r4
 80136c0:	f000 fb60 	bl	8013d84 <_Bfree>
 80136c4:	46c2      	mov	sl, r8
 80136c6:	9b08      	ldr	r3, [sp, #32]
 80136c8:	1b9a      	subs	r2, r3, r6
 80136ca:	d004      	beq.n	80136d6 <_dtoa_r+0x7b6>
 80136cc:	4651      	mov	r1, sl
 80136ce:	4620      	mov	r0, r4
 80136d0:	f000 fcce 	bl	8014070 <__pow5mult>
 80136d4:	4682      	mov	sl, r0
 80136d6:	2101      	movs	r1, #1
 80136d8:	4620      	mov	r0, r4
 80136da:	f000 fc09 	bl	8013ef0 <__i2b>
 80136de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	4606      	mov	r6, r0
 80136e4:	f340 8081 	ble.w	80137ea <_dtoa_r+0x8ca>
 80136e8:	461a      	mov	r2, r3
 80136ea:	4601      	mov	r1, r0
 80136ec:	4620      	mov	r0, r4
 80136ee:	f000 fcbf 	bl	8014070 <__pow5mult>
 80136f2:	9b07      	ldr	r3, [sp, #28]
 80136f4:	2b01      	cmp	r3, #1
 80136f6:	4606      	mov	r6, r0
 80136f8:	dd7a      	ble.n	80137f0 <_dtoa_r+0x8d0>
 80136fa:	f04f 0800 	mov.w	r8, #0
 80136fe:	6933      	ldr	r3, [r6, #16]
 8013700:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013704:	6918      	ldr	r0, [r3, #16]
 8013706:	f000 fba5 	bl	8013e54 <__hi0bits>
 801370a:	f1c0 0020 	rsb	r0, r0, #32
 801370e:	9b06      	ldr	r3, [sp, #24]
 8013710:	4418      	add	r0, r3
 8013712:	f010 001f 	ands.w	r0, r0, #31
 8013716:	f000 8094 	beq.w	8013842 <_dtoa_r+0x922>
 801371a:	f1c0 0320 	rsb	r3, r0, #32
 801371e:	2b04      	cmp	r3, #4
 8013720:	f340 8085 	ble.w	801382e <_dtoa_r+0x90e>
 8013724:	9b05      	ldr	r3, [sp, #20]
 8013726:	f1c0 001c 	rsb	r0, r0, #28
 801372a:	4403      	add	r3, r0
 801372c:	9305      	str	r3, [sp, #20]
 801372e:	9b06      	ldr	r3, [sp, #24]
 8013730:	4403      	add	r3, r0
 8013732:	4405      	add	r5, r0
 8013734:	9306      	str	r3, [sp, #24]
 8013736:	9b05      	ldr	r3, [sp, #20]
 8013738:	2b00      	cmp	r3, #0
 801373a:	dd05      	ble.n	8013748 <_dtoa_r+0x828>
 801373c:	4651      	mov	r1, sl
 801373e:	461a      	mov	r2, r3
 8013740:	4620      	mov	r0, r4
 8013742:	f000 fcef 	bl	8014124 <__lshift>
 8013746:	4682      	mov	sl, r0
 8013748:	9b06      	ldr	r3, [sp, #24]
 801374a:	2b00      	cmp	r3, #0
 801374c:	dd05      	ble.n	801375a <_dtoa_r+0x83a>
 801374e:	4631      	mov	r1, r6
 8013750:	461a      	mov	r2, r3
 8013752:	4620      	mov	r0, r4
 8013754:	f000 fce6 	bl	8014124 <__lshift>
 8013758:	4606      	mov	r6, r0
 801375a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801375c:	2b00      	cmp	r3, #0
 801375e:	d072      	beq.n	8013846 <_dtoa_r+0x926>
 8013760:	4631      	mov	r1, r6
 8013762:	4650      	mov	r0, sl
 8013764:	f000 fd4a 	bl	80141fc <__mcmp>
 8013768:	2800      	cmp	r0, #0
 801376a:	da6c      	bge.n	8013846 <_dtoa_r+0x926>
 801376c:	2300      	movs	r3, #0
 801376e:	4651      	mov	r1, sl
 8013770:	220a      	movs	r2, #10
 8013772:	4620      	mov	r0, r4
 8013774:	f000 fb28 	bl	8013dc8 <__multadd>
 8013778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801377a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801377e:	4682      	mov	sl, r0
 8013780:	2b00      	cmp	r3, #0
 8013782:	f000 81b0 	beq.w	8013ae6 <_dtoa_r+0xbc6>
 8013786:	2300      	movs	r3, #0
 8013788:	4639      	mov	r1, r7
 801378a:	220a      	movs	r2, #10
 801378c:	4620      	mov	r0, r4
 801378e:	f000 fb1b 	bl	8013dc8 <__multadd>
 8013792:	9b01      	ldr	r3, [sp, #4]
 8013794:	2b00      	cmp	r3, #0
 8013796:	4607      	mov	r7, r0
 8013798:	f300 8096 	bgt.w	80138c8 <_dtoa_r+0x9a8>
 801379c:	9b07      	ldr	r3, [sp, #28]
 801379e:	2b02      	cmp	r3, #2
 80137a0:	dc59      	bgt.n	8013856 <_dtoa_r+0x936>
 80137a2:	e091      	b.n	80138c8 <_dtoa_r+0x9a8>
 80137a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80137a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80137aa:	e758      	b.n	801365e <_dtoa_r+0x73e>
 80137ac:	9b04      	ldr	r3, [sp, #16]
 80137ae:	1e5e      	subs	r6, r3, #1
 80137b0:	9b08      	ldr	r3, [sp, #32]
 80137b2:	42b3      	cmp	r3, r6
 80137b4:	bfbf      	itttt	lt
 80137b6:	9b08      	ldrlt	r3, [sp, #32]
 80137b8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80137ba:	9608      	strlt	r6, [sp, #32]
 80137bc:	1af3      	sublt	r3, r6, r3
 80137be:	bfb4      	ite	lt
 80137c0:	18d2      	addlt	r2, r2, r3
 80137c2:	1b9e      	subge	r6, r3, r6
 80137c4:	9b04      	ldr	r3, [sp, #16]
 80137c6:	bfbc      	itt	lt
 80137c8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80137ca:	2600      	movlt	r6, #0
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	bfb7      	itett	lt
 80137d0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80137d4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80137d8:	1a9d      	sublt	r5, r3, r2
 80137da:	2300      	movlt	r3, #0
 80137dc:	e741      	b.n	8013662 <_dtoa_r+0x742>
 80137de:	9e08      	ldr	r6, [sp, #32]
 80137e0:	9d05      	ldr	r5, [sp, #20]
 80137e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80137e4:	e748      	b.n	8013678 <_dtoa_r+0x758>
 80137e6:	9a08      	ldr	r2, [sp, #32]
 80137e8:	e770      	b.n	80136cc <_dtoa_r+0x7ac>
 80137ea:	9b07      	ldr	r3, [sp, #28]
 80137ec:	2b01      	cmp	r3, #1
 80137ee:	dc19      	bgt.n	8013824 <_dtoa_r+0x904>
 80137f0:	9b02      	ldr	r3, [sp, #8]
 80137f2:	b9bb      	cbnz	r3, 8013824 <_dtoa_r+0x904>
 80137f4:	9b03      	ldr	r3, [sp, #12]
 80137f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80137fa:	b99b      	cbnz	r3, 8013824 <_dtoa_r+0x904>
 80137fc:	9b03      	ldr	r3, [sp, #12]
 80137fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013802:	0d1b      	lsrs	r3, r3, #20
 8013804:	051b      	lsls	r3, r3, #20
 8013806:	b183      	cbz	r3, 801382a <_dtoa_r+0x90a>
 8013808:	9b05      	ldr	r3, [sp, #20]
 801380a:	3301      	adds	r3, #1
 801380c:	9305      	str	r3, [sp, #20]
 801380e:	9b06      	ldr	r3, [sp, #24]
 8013810:	3301      	adds	r3, #1
 8013812:	9306      	str	r3, [sp, #24]
 8013814:	f04f 0801 	mov.w	r8, #1
 8013818:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801381a:	2b00      	cmp	r3, #0
 801381c:	f47f af6f 	bne.w	80136fe <_dtoa_r+0x7de>
 8013820:	2001      	movs	r0, #1
 8013822:	e774      	b.n	801370e <_dtoa_r+0x7ee>
 8013824:	f04f 0800 	mov.w	r8, #0
 8013828:	e7f6      	b.n	8013818 <_dtoa_r+0x8f8>
 801382a:	4698      	mov	r8, r3
 801382c:	e7f4      	b.n	8013818 <_dtoa_r+0x8f8>
 801382e:	d082      	beq.n	8013736 <_dtoa_r+0x816>
 8013830:	9a05      	ldr	r2, [sp, #20]
 8013832:	331c      	adds	r3, #28
 8013834:	441a      	add	r2, r3
 8013836:	9205      	str	r2, [sp, #20]
 8013838:	9a06      	ldr	r2, [sp, #24]
 801383a:	441a      	add	r2, r3
 801383c:	441d      	add	r5, r3
 801383e:	9206      	str	r2, [sp, #24]
 8013840:	e779      	b.n	8013736 <_dtoa_r+0x816>
 8013842:	4603      	mov	r3, r0
 8013844:	e7f4      	b.n	8013830 <_dtoa_r+0x910>
 8013846:	9b04      	ldr	r3, [sp, #16]
 8013848:	2b00      	cmp	r3, #0
 801384a:	dc37      	bgt.n	80138bc <_dtoa_r+0x99c>
 801384c:	9b07      	ldr	r3, [sp, #28]
 801384e:	2b02      	cmp	r3, #2
 8013850:	dd34      	ble.n	80138bc <_dtoa_r+0x99c>
 8013852:	9b04      	ldr	r3, [sp, #16]
 8013854:	9301      	str	r3, [sp, #4]
 8013856:	9b01      	ldr	r3, [sp, #4]
 8013858:	b963      	cbnz	r3, 8013874 <_dtoa_r+0x954>
 801385a:	4631      	mov	r1, r6
 801385c:	2205      	movs	r2, #5
 801385e:	4620      	mov	r0, r4
 8013860:	f000 fab2 	bl	8013dc8 <__multadd>
 8013864:	4601      	mov	r1, r0
 8013866:	4606      	mov	r6, r0
 8013868:	4650      	mov	r0, sl
 801386a:	f000 fcc7 	bl	80141fc <__mcmp>
 801386e:	2800      	cmp	r0, #0
 8013870:	f73f adbb 	bgt.w	80133ea <_dtoa_r+0x4ca>
 8013874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013876:	9d00      	ldr	r5, [sp, #0]
 8013878:	ea6f 0b03 	mvn.w	fp, r3
 801387c:	f04f 0800 	mov.w	r8, #0
 8013880:	4631      	mov	r1, r6
 8013882:	4620      	mov	r0, r4
 8013884:	f000 fa7e 	bl	8013d84 <_Bfree>
 8013888:	2f00      	cmp	r7, #0
 801388a:	f43f aeab 	beq.w	80135e4 <_dtoa_r+0x6c4>
 801388e:	f1b8 0f00 	cmp.w	r8, #0
 8013892:	d005      	beq.n	80138a0 <_dtoa_r+0x980>
 8013894:	45b8      	cmp	r8, r7
 8013896:	d003      	beq.n	80138a0 <_dtoa_r+0x980>
 8013898:	4641      	mov	r1, r8
 801389a:	4620      	mov	r0, r4
 801389c:	f000 fa72 	bl	8013d84 <_Bfree>
 80138a0:	4639      	mov	r1, r7
 80138a2:	4620      	mov	r0, r4
 80138a4:	f000 fa6e 	bl	8013d84 <_Bfree>
 80138a8:	e69c      	b.n	80135e4 <_dtoa_r+0x6c4>
 80138aa:	2600      	movs	r6, #0
 80138ac:	4637      	mov	r7, r6
 80138ae:	e7e1      	b.n	8013874 <_dtoa_r+0x954>
 80138b0:	46bb      	mov	fp, r7
 80138b2:	4637      	mov	r7, r6
 80138b4:	e599      	b.n	80133ea <_dtoa_r+0x4ca>
 80138b6:	bf00      	nop
 80138b8:	40240000 	.word	0x40240000
 80138bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80138be:	2b00      	cmp	r3, #0
 80138c0:	f000 80c8 	beq.w	8013a54 <_dtoa_r+0xb34>
 80138c4:	9b04      	ldr	r3, [sp, #16]
 80138c6:	9301      	str	r3, [sp, #4]
 80138c8:	2d00      	cmp	r5, #0
 80138ca:	dd05      	ble.n	80138d8 <_dtoa_r+0x9b8>
 80138cc:	4639      	mov	r1, r7
 80138ce:	462a      	mov	r2, r5
 80138d0:	4620      	mov	r0, r4
 80138d2:	f000 fc27 	bl	8014124 <__lshift>
 80138d6:	4607      	mov	r7, r0
 80138d8:	f1b8 0f00 	cmp.w	r8, #0
 80138dc:	d05b      	beq.n	8013996 <_dtoa_r+0xa76>
 80138de:	6879      	ldr	r1, [r7, #4]
 80138e0:	4620      	mov	r0, r4
 80138e2:	f000 fa0f 	bl	8013d04 <_Balloc>
 80138e6:	4605      	mov	r5, r0
 80138e8:	b928      	cbnz	r0, 80138f6 <_dtoa_r+0x9d6>
 80138ea:	4b83      	ldr	r3, [pc, #524]	; (8013af8 <_dtoa_r+0xbd8>)
 80138ec:	4602      	mov	r2, r0
 80138ee:	f240 21ef 	movw	r1, #751	; 0x2ef
 80138f2:	f7ff bb2e 	b.w	8012f52 <_dtoa_r+0x32>
 80138f6:	693a      	ldr	r2, [r7, #16]
 80138f8:	3202      	adds	r2, #2
 80138fa:	0092      	lsls	r2, r2, #2
 80138fc:	f107 010c 	add.w	r1, r7, #12
 8013900:	300c      	adds	r0, #12
 8013902:	f7ff fa74 	bl	8012dee <memcpy>
 8013906:	2201      	movs	r2, #1
 8013908:	4629      	mov	r1, r5
 801390a:	4620      	mov	r0, r4
 801390c:	f000 fc0a 	bl	8014124 <__lshift>
 8013910:	9b00      	ldr	r3, [sp, #0]
 8013912:	3301      	adds	r3, #1
 8013914:	9304      	str	r3, [sp, #16]
 8013916:	e9dd 2300 	ldrd	r2, r3, [sp]
 801391a:	4413      	add	r3, r2
 801391c:	9308      	str	r3, [sp, #32]
 801391e:	9b02      	ldr	r3, [sp, #8]
 8013920:	f003 0301 	and.w	r3, r3, #1
 8013924:	46b8      	mov	r8, r7
 8013926:	9306      	str	r3, [sp, #24]
 8013928:	4607      	mov	r7, r0
 801392a:	9b04      	ldr	r3, [sp, #16]
 801392c:	4631      	mov	r1, r6
 801392e:	3b01      	subs	r3, #1
 8013930:	4650      	mov	r0, sl
 8013932:	9301      	str	r3, [sp, #4]
 8013934:	f7ff fa69 	bl	8012e0a <quorem>
 8013938:	4641      	mov	r1, r8
 801393a:	9002      	str	r0, [sp, #8]
 801393c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8013940:	4650      	mov	r0, sl
 8013942:	f000 fc5b 	bl	80141fc <__mcmp>
 8013946:	463a      	mov	r2, r7
 8013948:	9005      	str	r0, [sp, #20]
 801394a:	4631      	mov	r1, r6
 801394c:	4620      	mov	r0, r4
 801394e:	f000 fc71 	bl	8014234 <__mdiff>
 8013952:	68c2      	ldr	r2, [r0, #12]
 8013954:	4605      	mov	r5, r0
 8013956:	bb02      	cbnz	r2, 801399a <_dtoa_r+0xa7a>
 8013958:	4601      	mov	r1, r0
 801395a:	4650      	mov	r0, sl
 801395c:	f000 fc4e 	bl	80141fc <__mcmp>
 8013960:	4602      	mov	r2, r0
 8013962:	4629      	mov	r1, r5
 8013964:	4620      	mov	r0, r4
 8013966:	9209      	str	r2, [sp, #36]	; 0x24
 8013968:	f000 fa0c 	bl	8013d84 <_Bfree>
 801396c:	9b07      	ldr	r3, [sp, #28]
 801396e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013970:	9d04      	ldr	r5, [sp, #16]
 8013972:	ea43 0102 	orr.w	r1, r3, r2
 8013976:	9b06      	ldr	r3, [sp, #24]
 8013978:	4319      	orrs	r1, r3
 801397a:	d110      	bne.n	801399e <_dtoa_r+0xa7e>
 801397c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013980:	d029      	beq.n	80139d6 <_dtoa_r+0xab6>
 8013982:	9b05      	ldr	r3, [sp, #20]
 8013984:	2b00      	cmp	r3, #0
 8013986:	dd02      	ble.n	801398e <_dtoa_r+0xa6e>
 8013988:	9b02      	ldr	r3, [sp, #8]
 801398a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801398e:	9b01      	ldr	r3, [sp, #4]
 8013990:	f883 9000 	strb.w	r9, [r3]
 8013994:	e774      	b.n	8013880 <_dtoa_r+0x960>
 8013996:	4638      	mov	r0, r7
 8013998:	e7ba      	b.n	8013910 <_dtoa_r+0x9f0>
 801399a:	2201      	movs	r2, #1
 801399c:	e7e1      	b.n	8013962 <_dtoa_r+0xa42>
 801399e:	9b05      	ldr	r3, [sp, #20]
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	db04      	blt.n	80139ae <_dtoa_r+0xa8e>
 80139a4:	9907      	ldr	r1, [sp, #28]
 80139a6:	430b      	orrs	r3, r1
 80139a8:	9906      	ldr	r1, [sp, #24]
 80139aa:	430b      	orrs	r3, r1
 80139ac:	d120      	bne.n	80139f0 <_dtoa_r+0xad0>
 80139ae:	2a00      	cmp	r2, #0
 80139b0:	dded      	ble.n	801398e <_dtoa_r+0xa6e>
 80139b2:	4651      	mov	r1, sl
 80139b4:	2201      	movs	r2, #1
 80139b6:	4620      	mov	r0, r4
 80139b8:	f000 fbb4 	bl	8014124 <__lshift>
 80139bc:	4631      	mov	r1, r6
 80139be:	4682      	mov	sl, r0
 80139c0:	f000 fc1c 	bl	80141fc <__mcmp>
 80139c4:	2800      	cmp	r0, #0
 80139c6:	dc03      	bgt.n	80139d0 <_dtoa_r+0xab0>
 80139c8:	d1e1      	bne.n	801398e <_dtoa_r+0xa6e>
 80139ca:	f019 0f01 	tst.w	r9, #1
 80139ce:	d0de      	beq.n	801398e <_dtoa_r+0xa6e>
 80139d0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80139d4:	d1d8      	bne.n	8013988 <_dtoa_r+0xa68>
 80139d6:	9a01      	ldr	r2, [sp, #4]
 80139d8:	2339      	movs	r3, #57	; 0x39
 80139da:	7013      	strb	r3, [r2, #0]
 80139dc:	462b      	mov	r3, r5
 80139de:	461d      	mov	r5, r3
 80139e0:	3b01      	subs	r3, #1
 80139e2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80139e6:	2a39      	cmp	r2, #57	; 0x39
 80139e8:	d06c      	beq.n	8013ac4 <_dtoa_r+0xba4>
 80139ea:	3201      	adds	r2, #1
 80139ec:	701a      	strb	r2, [r3, #0]
 80139ee:	e747      	b.n	8013880 <_dtoa_r+0x960>
 80139f0:	2a00      	cmp	r2, #0
 80139f2:	dd07      	ble.n	8013a04 <_dtoa_r+0xae4>
 80139f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80139f8:	d0ed      	beq.n	80139d6 <_dtoa_r+0xab6>
 80139fa:	9a01      	ldr	r2, [sp, #4]
 80139fc:	f109 0301 	add.w	r3, r9, #1
 8013a00:	7013      	strb	r3, [r2, #0]
 8013a02:	e73d      	b.n	8013880 <_dtoa_r+0x960>
 8013a04:	9b04      	ldr	r3, [sp, #16]
 8013a06:	9a08      	ldr	r2, [sp, #32]
 8013a08:	f803 9c01 	strb.w	r9, [r3, #-1]
 8013a0c:	4293      	cmp	r3, r2
 8013a0e:	d043      	beq.n	8013a98 <_dtoa_r+0xb78>
 8013a10:	4651      	mov	r1, sl
 8013a12:	2300      	movs	r3, #0
 8013a14:	220a      	movs	r2, #10
 8013a16:	4620      	mov	r0, r4
 8013a18:	f000 f9d6 	bl	8013dc8 <__multadd>
 8013a1c:	45b8      	cmp	r8, r7
 8013a1e:	4682      	mov	sl, r0
 8013a20:	f04f 0300 	mov.w	r3, #0
 8013a24:	f04f 020a 	mov.w	r2, #10
 8013a28:	4641      	mov	r1, r8
 8013a2a:	4620      	mov	r0, r4
 8013a2c:	d107      	bne.n	8013a3e <_dtoa_r+0xb1e>
 8013a2e:	f000 f9cb 	bl	8013dc8 <__multadd>
 8013a32:	4680      	mov	r8, r0
 8013a34:	4607      	mov	r7, r0
 8013a36:	9b04      	ldr	r3, [sp, #16]
 8013a38:	3301      	adds	r3, #1
 8013a3a:	9304      	str	r3, [sp, #16]
 8013a3c:	e775      	b.n	801392a <_dtoa_r+0xa0a>
 8013a3e:	f000 f9c3 	bl	8013dc8 <__multadd>
 8013a42:	4639      	mov	r1, r7
 8013a44:	4680      	mov	r8, r0
 8013a46:	2300      	movs	r3, #0
 8013a48:	220a      	movs	r2, #10
 8013a4a:	4620      	mov	r0, r4
 8013a4c:	f000 f9bc 	bl	8013dc8 <__multadd>
 8013a50:	4607      	mov	r7, r0
 8013a52:	e7f0      	b.n	8013a36 <_dtoa_r+0xb16>
 8013a54:	9b04      	ldr	r3, [sp, #16]
 8013a56:	9301      	str	r3, [sp, #4]
 8013a58:	9d00      	ldr	r5, [sp, #0]
 8013a5a:	4631      	mov	r1, r6
 8013a5c:	4650      	mov	r0, sl
 8013a5e:	f7ff f9d4 	bl	8012e0a <quorem>
 8013a62:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8013a66:	9b00      	ldr	r3, [sp, #0]
 8013a68:	f805 9b01 	strb.w	r9, [r5], #1
 8013a6c:	1aea      	subs	r2, r5, r3
 8013a6e:	9b01      	ldr	r3, [sp, #4]
 8013a70:	4293      	cmp	r3, r2
 8013a72:	dd07      	ble.n	8013a84 <_dtoa_r+0xb64>
 8013a74:	4651      	mov	r1, sl
 8013a76:	2300      	movs	r3, #0
 8013a78:	220a      	movs	r2, #10
 8013a7a:	4620      	mov	r0, r4
 8013a7c:	f000 f9a4 	bl	8013dc8 <__multadd>
 8013a80:	4682      	mov	sl, r0
 8013a82:	e7ea      	b.n	8013a5a <_dtoa_r+0xb3a>
 8013a84:	9b01      	ldr	r3, [sp, #4]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	bfc8      	it	gt
 8013a8a:	461d      	movgt	r5, r3
 8013a8c:	9b00      	ldr	r3, [sp, #0]
 8013a8e:	bfd8      	it	le
 8013a90:	2501      	movle	r5, #1
 8013a92:	441d      	add	r5, r3
 8013a94:	f04f 0800 	mov.w	r8, #0
 8013a98:	4651      	mov	r1, sl
 8013a9a:	2201      	movs	r2, #1
 8013a9c:	4620      	mov	r0, r4
 8013a9e:	f000 fb41 	bl	8014124 <__lshift>
 8013aa2:	4631      	mov	r1, r6
 8013aa4:	4682      	mov	sl, r0
 8013aa6:	f000 fba9 	bl	80141fc <__mcmp>
 8013aaa:	2800      	cmp	r0, #0
 8013aac:	dc96      	bgt.n	80139dc <_dtoa_r+0xabc>
 8013aae:	d102      	bne.n	8013ab6 <_dtoa_r+0xb96>
 8013ab0:	f019 0f01 	tst.w	r9, #1
 8013ab4:	d192      	bne.n	80139dc <_dtoa_r+0xabc>
 8013ab6:	462b      	mov	r3, r5
 8013ab8:	461d      	mov	r5, r3
 8013aba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013abe:	2a30      	cmp	r2, #48	; 0x30
 8013ac0:	d0fa      	beq.n	8013ab8 <_dtoa_r+0xb98>
 8013ac2:	e6dd      	b.n	8013880 <_dtoa_r+0x960>
 8013ac4:	9a00      	ldr	r2, [sp, #0]
 8013ac6:	429a      	cmp	r2, r3
 8013ac8:	d189      	bne.n	80139de <_dtoa_r+0xabe>
 8013aca:	f10b 0b01 	add.w	fp, fp, #1
 8013ace:	2331      	movs	r3, #49	; 0x31
 8013ad0:	e796      	b.n	8013a00 <_dtoa_r+0xae0>
 8013ad2:	4b0a      	ldr	r3, [pc, #40]	; (8013afc <_dtoa_r+0xbdc>)
 8013ad4:	f7ff ba99 	b.w	801300a <_dtoa_r+0xea>
 8013ad8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	f47f aa6d 	bne.w	8012fba <_dtoa_r+0x9a>
 8013ae0:	4b07      	ldr	r3, [pc, #28]	; (8013b00 <_dtoa_r+0xbe0>)
 8013ae2:	f7ff ba92 	b.w	801300a <_dtoa_r+0xea>
 8013ae6:	9b01      	ldr	r3, [sp, #4]
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	dcb5      	bgt.n	8013a58 <_dtoa_r+0xb38>
 8013aec:	9b07      	ldr	r3, [sp, #28]
 8013aee:	2b02      	cmp	r3, #2
 8013af0:	f73f aeb1 	bgt.w	8013856 <_dtoa_r+0x936>
 8013af4:	e7b0      	b.n	8013a58 <_dtoa_r+0xb38>
 8013af6:	bf00      	nop
 8013af8:	08015858 	.word	0x08015858
 8013afc:	080157b8 	.word	0x080157b8
 8013b00:	080157dc 	.word	0x080157dc

08013b04 <_free_r>:
 8013b04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013b06:	2900      	cmp	r1, #0
 8013b08:	d044      	beq.n	8013b94 <_free_r+0x90>
 8013b0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013b0e:	9001      	str	r0, [sp, #4]
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	f1a1 0404 	sub.w	r4, r1, #4
 8013b16:	bfb8      	it	lt
 8013b18:	18e4      	addlt	r4, r4, r3
 8013b1a:	f000 f8e7 	bl	8013cec <__malloc_lock>
 8013b1e:	4a1e      	ldr	r2, [pc, #120]	; (8013b98 <_free_r+0x94>)
 8013b20:	9801      	ldr	r0, [sp, #4]
 8013b22:	6813      	ldr	r3, [r2, #0]
 8013b24:	b933      	cbnz	r3, 8013b34 <_free_r+0x30>
 8013b26:	6063      	str	r3, [r4, #4]
 8013b28:	6014      	str	r4, [r2, #0]
 8013b2a:	b003      	add	sp, #12
 8013b2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013b30:	f000 b8e2 	b.w	8013cf8 <__malloc_unlock>
 8013b34:	42a3      	cmp	r3, r4
 8013b36:	d908      	bls.n	8013b4a <_free_r+0x46>
 8013b38:	6825      	ldr	r5, [r4, #0]
 8013b3a:	1961      	adds	r1, r4, r5
 8013b3c:	428b      	cmp	r3, r1
 8013b3e:	bf01      	itttt	eq
 8013b40:	6819      	ldreq	r1, [r3, #0]
 8013b42:	685b      	ldreq	r3, [r3, #4]
 8013b44:	1949      	addeq	r1, r1, r5
 8013b46:	6021      	streq	r1, [r4, #0]
 8013b48:	e7ed      	b.n	8013b26 <_free_r+0x22>
 8013b4a:	461a      	mov	r2, r3
 8013b4c:	685b      	ldr	r3, [r3, #4]
 8013b4e:	b10b      	cbz	r3, 8013b54 <_free_r+0x50>
 8013b50:	42a3      	cmp	r3, r4
 8013b52:	d9fa      	bls.n	8013b4a <_free_r+0x46>
 8013b54:	6811      	ldr	r1, [r2, #0]
 8013b56:	1855      	adds	r5, r2, r1
 8013b58:	42a5      	cmp	r5, r4
 8013b5a:	d10b      	bne.n	8013b74 <_free_r+0x70>
 8013b5c:	6824      	ldr	r4, [r4, #0]
 8013b5e:	4421      	add	r1, r4
 8013b60:	1854      	adds	r4, r2, r1
 8013b62:	42a3      	cmp	r3, r4
 8013b64:	6011      	str	r1, [r2, #0]
 8013b66:	d1e0      	bne.n	8013b2a <_free_r+0x26>
 8013b68:	681c      	ldr	r4, [r3, #0]
 8013b6a:	685b      	ldr	r3, [r3, #4]
 8013b6c:	6053      	str	r3, [r2, #4]
 8013b6e:	440c      	add	r4, r1
 8013b70:	6014      	str	r4, [r2, #0]
 8013b72:	e7da      	b.n	8013b2a <_free_r+0x26>
 8013b74:	d902      	bls.n	8013b7c <_free_r+0x78>
 8013b76:	230c      	movs	r3, #12
 8013b78:	6003      	str	r3, [r0, #0]
 8013b7a:	e7d6      	b.n	8013b2a <_free_r+0x26>
 8013b7c:	6825      	ldr	r5, [r4, #0]
 8013b7e:	1961      	adds	r1, r4, r5
 8013b80:	428b      	cmp	r3, r1
 8013b82:	bf04      	itt	eq
 8013b84:	6819      	ldreq	r1, [r3, #0]
 8013b86:	685b      	ldreq	r3, [r3, #4]
 8013b88:	6063      	str	r3, [r4, #4]
 8013b8a:	bf04      	itt	eq
 8013b8c:	1949      	addeq	r1, r1, r5
 8013b8e:	6021      	streq	r1, [r4, #0]
 8013b90:	6054      	str	r4, [r2, #4]
 8013b92:	e7ca      	b.n	8013b2a <_free_r+0x26>
 8013b94:	b003      	add	sp, #12
 8013b96:	bd30      	pop	{r4, r5, pc}
 8013b98:	2000811c 	.word	0x2000811c

08013b9c <malloc>:
 8013b9c:	4b02      	ldr	r3, [pc, #8]	; (8013ba8 <malloc+0xc>)
 8013b9e:	4601      	mov	r1, r0
 8013ba0:	6818      	ldr	r0, [r3, #0]
 8013ba2:	f000 b823 	b.w	8013bec <_malloc_r>
 8013ba6:	bf00      	nop
 8013ba8:	20000088 	.word	0x20000088

08013bac <sbrk_aligned>:
 8013bac:	b570      	push	{r4, r5, r6, lr}
 8013bae:	4e0e      	ldr	r6, [pc, #56]	; (8013be8 <sbrk_aligned+0x3c>)
 8013bb0:	460c      	mov	r4, r1
 8013bb2:	6831      	ldr	r1, [r6, #0]
 8013bb4:	4605      	mov	r5, r0
 8013bb6:	b911      	cbnz	r1, 8013bbe <sbrk_aligned+0x12>
 8013bb8:	f001 f810 	bl	8014bdc <_sbrk_r>
 8013bbc:	6030      	str	r0, [r6, #0]
 8013bbe:	4621      	mov	r1, r4
 8013bc0:	4628      	mov	r0, r5
 8013bc2:	f001 f80b 	bl	8014bdc <_sbrk_r>
 8013bc6:	1c43      	adds	r3, r0, #1
 8013bc8:	d00a      	beq.n	8013be0 <sbrk_aligned+0x34>
 8013bca:	1cc4      	adds	r4, r0, #3
 8013bcc:	f024 0403 	bic.w	r4, r4, #3
 8013bd0:	42a0      	cmp	r0, r4
 8013bd2:	d007      	beq.n	8013be4 <sbrk_aligned+0x38>
 8013bd4:	1a21      	subs	r1, r4, r0
 8013bd6:	4628      	mov	r0, r5
 8013bd8:	f001 f800 	bl	8014bdc <_sbrk_r>
 8013bdc:	3001      	adds	r0, #1
 8013bde:	d101      	bne.n	8013be4 <sbrk_aligned+0x38>
 8013be0:	f04f 34ff 	mov.w	r4, #4294967295
 8013be4:	4620      	mov	r0, r4
 8013be6:	bd70      	pop	{r4, r5, r6, pc}
 8013be8:	20008120 	.word	0x20008120

08013bec <_malloc_r>:
 8013bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013bf0:	1ccd      	adds	r5, r1, #3
 8013bf2:	f025 0503 	bic.w	r5, r5, #3
 8013bf6:	3508      	adds	r5, #8
 8013bf8:	2d0c      	cmp	r5, #12
 8013bfa:	bf38      	it	cc
 8013bfc:	250c      	movcc	r5, #12
 8013bfe:	2d00      	cmp	r5, #0
 8013c00:	4607      	mov	r7, r0
 8013c02:	db01      	blt.n	8013c08 <_malloc_r+0x1c>
 8013c04:	42a9      	cmp	r1, r5
 8013c06:	d905      	bls.n	8013c14 <_malloc_r+0x28>
 8013c08:	230c      	movs	r3, #12
 8013c0a:	603b      	str	r3, [r7, #0]
 8013c0c:	2600      	movs	r6, #0
 8013c0e:	4630      	mov	r0, r6
 8013c10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c14:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8013ce8 <_malloc_r+0xfc>
 8013c18:	f000 f868 	bl	8013cec <__malloc_lock>
 8013c1c:	f8d8 3000 	ldr.w	r3, [r8]
 8013c20:	461c      	mov	r4, r3
 8013c22:	bb5c      	cbnz	r4, 8013c7c <_malloc_r+0x90>
 8013c24:	4629      	mov	r1, r5
 8013c26:	4638      	mov	r0, r7
 8013c28:	f7ff ffc0 	bl	8013bac <sbrk_aligned>
 8013c2c:	1c43      	adds	r3, r0, #1
 8013c2e:	4604      	mov	r4, r0
 8013c30:	d155      	bne.n	8013cde <_malloc_r+0xf2>
 8013c32:	f8d8 4000 	ldr.w	r4, [r8]
 8013c36:	4626      	mov	r6, r4
 8013c38:	2e00      	cmp	r6, #0
 8013c3a:	d145      	bne.n	8013cc8 <_malloc_r+0xdc>
 8013c3c:	2c00      	cmp	r4, #0
 8013c3e:	d048      	beq.n	8013cd2 <_malloc_r+0xe6>
 8013c40:	6823      	ldr	r3, [r4, #0]
 8013c42:	4631      	mov	r1, r6
 8013c44:	4638      	mov	r0, r7
 8013c46:	eb04 0903 	add.w	r9, r4, r3
 8013c4a:	f000 ffc7 	bl	8014bdc <_sbrk_r>
 8013c4e:	4581      	cmp	r9, r0
 8013c50:	d13f      	bne.n	8013cd2 <_malloc_r+0xe6>
 8013c52:	6821      	ldr	r1, [r4, #0]
 8013c54:	1a6d      	subs	r5, r5, r1
 8013c56:	4629      	mov	r1, r5
 8013c58:	4638      	mov	r0, r7
 8013c5a:	f7ff ffa7 	bl	8013bac <sbrk_aligned>
 8013c5e:	3001      	adds	r0, #1
 8013c60:	d037      	beq.n	8013cd2 <_malloc_r+0xe6>
 8013c62:	6823      	ldr	r3, [r4, #0]
 8013c64:	442b      	add	r3, r5
 8013c66:	6023      	str	r3, [r4, #0]
 8013c68:	f8d8 3000 	ldr.w	r3, [r8]
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d038      	beq.n	8013ce2 <_malloc_r+0xf6>
 8013c70:	685a      	ldr	r2, [r3, #4]
 8013c72:	42a2      	cmp	r2, r4
 8013c74:	d12b      	bne.n	8013cce <_malloc_r+0xe2>
 8013c76:	2200      	movs	r2, #0
 8013c78:	605a      	str	r2, [r3, #4]
 8013c7a:	e00f      	b.n	8013c9c <_malloc_r+0xb0>
 8013c7c:	6822      	ldr	r2, [r4, #0]
 8013c7e:	1b52      	subs	r2, r2, r5
 8013c80:	d41f      	bmi.n	8013cc2 <_malloc_r+0xd6>
 8013c82:	2a0b      	cmp	r2, #11
 8013c84:	d917      	bls.n	8013cb6 <_malloc_r+0xca>
 8013c86:	1961      	adds	r1, r4, r5
 8013c88:	42a3      	cmp	r3, r4
 8013c8a:	6025      	str	r5, [r4, #0]
 8013c8c:	bf18      	it	ne
 8013c8e:	6059      	strne	r1, [r3, #4]
 8013c90:	6863      	ldr	r3, [r4, #4]
 8013c92:	bf08      	it	eq
 8013c94:	f8c8 1000 	streq.w	r1, [r8]
 8013c98:	5162      	str	r2, [r4, r5]
 8013c9a:	604b      	str	r3, [r1, #4]
 8013c9c:	4638      	mov	r0, r7
 8013c9e:	f104 060b 	add.w	r6, r4, #11
 8013ca2:	f000 f829 	bl	8013cf8 <__malloc_unlock>
 8013ca6:	f026 0607 	bic.w	r6, r6, #7
 8013caa:	1d23      	adds	r3, r4, #4
 8013cac:	1af2      	subs	r2, r6, r3
 8013cae:	d0ae      	beq.n	8013c0e <_malloc_r+0x22>
 8013cb0:	1b9b      	subs	r3, r3, r6
 8013cb2:	50a3      	str	r3, [r4, r2]
 8013cb4:	e7ab      	b.n	8013c0e <_malloc_r+0x22>
 8013cb6:	42a3      	cmp	r3, r4
 8013cb8:	6862      	ldr	r2, [r4, #4]
 8013cba:	d1dd      	bne.n	8013c78 <_malloc_r+0x8c>
 8013cbc:	f8c8 2000 	str.w	r2, [r8]
 8013cc0:	e7ec      	b.n	8013c9c <_malloc_r+0xb0>
 8013cc2:	4623      	mov	r3, r4
 8013cc4:	6864      	ldr	r4, [r4, #4]
 8013cc6:	e7ac      	b.n	8013c22 <_malloc_r+0x36>
 8013cc8:	4634      	mov	r4, r6
 8013cca:	6876      	ldr	r6, [r6, #4]
 8013ccc:	e7b4      	b.n	8013c38 <_malloc_r+0x4c>
 8013cce:	4613      	mov	r3, r2
 8013cd0:	e7cc      	b.n	8013c6c <_malloc_r+0x80>
 8013cd2:	230c      	movs	r3, #12
 8013cd4:	603b      	str	r3, [r7, #0]
 8013cd6:	4638      	mov	r0, r7
 8013cd8:	f000 f80e 	bl	8013cf8 <__malloc_unlock>
 8013cdc:	e797      	b.n	8013c0e <_malloc_r+0x22>
 8013cde:	6025      	str	r5, [r4, #0]
 8013ce0:	e7dc      	b.n	8013c9c <_malloc_r+0xb0>
 8013ce2:	605b      	str	r3, [r3, #4]
 8013ce4:	deff      	udf	#255	; 0xff
 8013ce6:	bf00      	nop
 8013ce8:	2000811c 	.word	0x2000811c

08013cec <__malloc_lock>:
 8013cec:	4801      	ldr	r0, [pc, #4]	; (8013cf4 <__malloc_lock+0x8>)
 8013cee:	f7ff b87c 	b.w	8012dea <__retarget_lock_acquire_recursive>
 8013cf2:	bf00      	nop
 8013cf4:	20008118 	.word	0x20008118

08013cf8 <__malloc_unlock>:
 8013cf8:	4801      	ldr	r0, [pc, #4]	; (8013d00 <__malloc_unlock+0x8>)
 8013cfa:	f7ff b877 	b.w	8012dec <__retarget_lock_release_recursive>
 8013cfe:	bf00      	nop
 8013d00:	20008118 	.word	0x20008118

08013d04 <_Balloc>:
 8013d04:	b570      	push	{r4, r5, r6, lr}
 8013d06:	69c6      	ldr	r6, [r0, #28]
 8013d08:	4604      	mov	r4, r0
 8013d0a:	460d      	mov	r5, r1
 8013d0c:	b976      	cbnz	r6, 8013d2c <_Balloc+0x28>
 8013d0e:	2010      	movs	r0, #16
 8013d10:	f7ff ff44 	bl	8013b9c <malloc>
 8013d14:	4602      	mov	r2, r0
 8013d16:	61e0      	str	r0, [r4, #28]
 8013d18:	b920      	cbnz	r0, 8013d24 <_Balloc+0x20>
 8013d1a:	4b18      	ldr	r3, [pc, #96]	; (8013d7c <_Balloc+0x78>)
 8013d1c:	4818      	ldr	r0, [pc, #96]	; (8013d80 <_Balloc+0x7c>)
 8013d1e:	216b      	movs	r1, #107	; 0x6b
 8013d20:	f000 ff6c 	bl	8014bfc <__assert_func>
 8013d24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013d28:	6006      	str	r6, [r0, #0]
 8013d2a:	60c6      	str	r6, [r0, #12]
 8013d2c:	69e6      	ldr	r6, [r4, #28]
 8013d2e:	68f3      	ldr	r3, [r6, #12]
 8013d30:	b183      	cbz	r3, 8013d54 <_Balloc+0x50>
 8013d32:	69e3      	ldr	r3, [r4, #28]
 8013d34:	68db      	ldr	r3, [r3, #12]
 8013d36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013d3a:	b9b8      	cbnz	r0, 8013d6c <_Balloc+0x68>
 8013d3c:	2101      	movs	r1, #1
 8013d3e:	fa01 f605 	lsl.w	r6, r1, r5
 8013d42:	1d72      	adds	r2, r6, #5
 8013d44:	0092      	lsls	r2, r2, #2
 8013d46:	4620      	mov	r0, r4
 8013d48:	f000 ff76 	bl	8014c38 <_calloc_r>
 8013d4c:	b160      	cbz	r0, 8013d68 <_Balloc+0x64>
 8013d4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013d52:	e00e      	b.n	8013d72 <_Balloc+0x6e>
 8013d54:	2221      	movs	r2, #33	; 0x21
 8013d56:	2104      	movs	r1, #4
 8013d58:	4620      	mov	r0, r4
 8013d5a:	f000 ff6d 	bl	8014c38 <_calloc_r>
 8013d5e:	69e3      	ldr	r3, [r4, #28]
 8013d60:	60f0      	str	r0, [r6, #12]
 8013d62:	68db      	ldr	r3, [r3, #12]
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d1e4      	bne.n	8013d32 <_Balloc+0x2e>
 8013d68:	2000      	movs	r0, #0
 8013d6a:	bd70      	pop	{r4, r5, r6, pc}
 8013d6c:	6802      	ldr	r2, [r0, #0]
 8013d6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013d72:	2300      	movs	r3, #0
 8013d74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013d78:	e7f7      	b.n	8013d6a <_Balloc+0x66>
 8013d7a:	bf00      	nop
 8013d7c:	080157e9 	.word	0x080157e9
 8013d80:	08015869 	.word	0x08015869

08013d84 <_Bfree>:
 8013d84:	b570      	push	{r4, r5, r6, lr}
 8013d86:	69c6      	ldr	r6, [r0, #28]
 8013d88:	4605      	mov	r5, r0
 8013d8a:	460c      	mov	r4, r1
 8013d8c:	b976      	cbnz	r6, 8013dac <_Bfree+0x28>
 8013d8e:	2010      	movs	r0, #16
 8013d90:	f7ff ff04 	bl	8013b9c <malloc>
 8013d94:	4602      	mov	r2, r0
 8013d96:	61e8      	str	r0, [r5, #28]
 8013d98:	b920      	cbnz	r0, 8013da4 <_Bfree+0x20>
 8013d9a:	4b09      	ldr	r3, [pc, #36]	; (8013dc0 <_Bfree+0x3c>)
 8013d9c:	4809      	ldr	r0, [pc, #36]	; (8013dc4 <_Bfree+0x40>)
 8013d9e:	218f      	movs	r1, #143	; 0x8f
 8013da0:	f000 ff2c 	bl	8014bfc <__assert_func>
 8013da4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013da8:	6006      	str	r6, [r0, #0]
 8013daa:	60c6      	str	r6, [r0, #12]
 8013dac:	b13c      	cbz	r4, 8013dbe <_Bfree+0x3a>
 8013dae:	69eb      	ldr	r3, [r5, #28]
 8013db0:	6862      	ldr	r2, [r4, #4]
 8013db2:	68db      	ldr	r3, [r3, #12]
 8013db4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013db8:	6021      	str	r1, [r4, #0]
 8013dba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013dbe:	bd70      	pop	{r4, r5, r6, pc}
 8013dc0:	080157e9 	.word	0x080157e9
 8013dc4:	08015869 	.word	0x08015869

08013dc8 <__multadd>:
 8013dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dcc:	690d      	ldr	r5, [r1, #16]
 8013dce:	4607      	mov	r7, r0
 8013dd0:	460c      	mov	r4, r1
 8013dd2:	461e      	mov	r6, r3
 8013dd4:	f101 0c14 	add.w	ip, r1, #20
 8013dd8:	2000      	movs	r0, #0
 8013dda:	f8dc 3000 	ldr.w	r3, [ip]
 8013dde:	b299      	uxth	r1, r3
 8013de0:	fb02 6101 	mla	r1, r2, r1, r6
 8013de4:	0c1e      	lsrs	r6, r3, #16
 8013de6:	0c0b      	lsrs	r3, r1, #16
 8013de8:	fb02 3306 	mla	r3, r2, r6, r3
 8013dec:	b289      	uxth	r1, r1
 8013dee:	3001      	adds	r0, #1
 8013df0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013df4:	4285      	cmp	r5, r0
 8013df6:	f84c 1b04 	str.w	r1, [ip], #4
 8013dfa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013dfe:	dcec      	bgt.n	8013dda <__multadd+0x12>
 8013e00:	b30e      	cbz	r6, 8013e46 <__multadd+0x7e>
 8013e02:	68a3      	ldr	r3, [r4, #8]
 8013e04:	42ab      	cmp	r3, r5
 8013e06:	dc19      	bgt.n	8013e3c <__multadd+0x74>
 8013e08:	6861      	ldr	r1, [r4, #4]
 8013e0a:	4638      	mov	r0, r7
 8013e0c:	3101      	adds	r1, #1
 8013e0e:	f7ff ff79 	bl	8013d04 <_Balloc>
 8013e12:	4680      	mov	r8, r0
 8013e14:	b928      	cbnz	r0, 8013e22 <__multadd+0x5a>
 8013e16:	4602      	mov	r2, r0
 8013e18:	4b0c      	ldr	r3, [pc, #48]	; (8013e4c <__multadd+0x84>)
 8013e1a:	480d      	ldr	r0, [pc, #52]	; (8013e50 <__multadd+0x88>)
 8013e1c:	21ba      	movs	r1, #186	; 0xba
 8013e1e:	f000 feed 	bl	8014bfc <__assert_func>
 8013e22:	6922      	ldr	r2, [r4, #16]
 8013e24:	3202      	adds	r2, #2
 8013e26:	f104 010c 	add.w	r1, r4, #12
 8013e2a:	0092      	lsls	r2, r2, #2
 8013e2c:	300c      	adds	r0, #12
 8013e2e:	f7fe ffde 	bl	8012dee <memcpy>
 8013e32:	4621      	mov	r1, r4
 8013e34:	4638      	mov	r0, r7
 8013e36:	f7ff ffa5 	bl	8013d84 <_Bfree>
 8013e3a:	4644      	mov	r4, r8
 8013e3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013e40:	3501      	adds	r5, #1
 8013e42:	615e      	str	r6, [r3, #20]
 8013e44:	6125      	str	r5, [r4, #16]
 8013e46:	4620      	mov	r0, r4
 8013e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e4c:	08015858 	.word	0x08015858
 8013e50:	08015869 	.word	0x08015869

08013e54 <__hi0bits>:
 8013e54:	0c03      	lsrs	r3, r0, #16
 8013e56:	041b      	lsls	r3, r3, #16
 8013e58:	b9d3      	cbnz	r3, 8013e90 <__hi0bits+0x3c>
 8013e5a:	0400      	lsls	r0, r0, #16
 8013e5c:	2310      	movs	r3, #16
 8013e5e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013e62:	bf04      	itt	eq
 8013e64:	0200      	lsleq	r0, r0, #8
 8013e66:	3308      	addeq	r3, #8
 8013e68:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013e6c:	bf04      	itt	eq
 8013e6e:	0100      	lsleq	r0, r0, #4
 8013e70:	3304      	addeq	r3, #4
 8013e72:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013e76:	bf04      	itt	eq
 8013e78:	0080      	lsleq	r0, r0, #2
 8013e7a:	3302      	addeq	r3, #2
 8013e7c:	2800      	cmp	r0, #0
 8013e7e:	db05      	blt.n	8013e8c <__hi0bits+0x38>
 8013e80:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013e84:	f103 0301 	add.w	r3, r3, #1
 8013e88:	bf08      	it	eq
 8013e8a:	2320      	moveq	r3, #32
 8013e8c:	4618      	mov	r0, r3
 8013e8e:	4770      	bx	lr
 8013e90:	2300      	movs	r3, #0
 8013e92:	e7e4      	b.n	8013e5e <__hi0bits+0xa>

08013e94 <__lo0bits>:
 8013e94:	6803      	ldr	r3, [r0, #0]
 8013e96:	f013 0207 	ands.w	r2, r3, #7
 8013e9a:	d00c      	beq.n	8013eb6 <__lo0bits+0x22>
 8013e9c:	07d9      	lsls	r1, r3, #31
 8013e9e:	d422      	bmi.n	8013ee6 <__lo0bits+0x52>
 8013ea0:	079a      	lsls	r2, r3, #30
 8013ea2:	bf49      	itett	mi
 8013ea4:	085b      	lsrmi	r3, r3, #1
 8013ea6:	089b      	lsrpl	r3, r3, #2
 8013ea8:	6003      	strmi	r3, [r0, #0]
 8013eaa:	2201      	movmi	r2, #1
 8013eac:	bf5c      	itt	pl
 8013eae:	6003      	strpl	r3, [r0, #0]
 8013eb0:	2202      	movpl	r2, #2
 8013eb2:	4610      	mov	r0, r2
 8013eb4:	4770      	bx	lr
 8013eb6:	b299      	uxth	r1, r3
 8013eb8:	b909      	cbnz	r1, 8013ebe <__lo0bits+0x2a>
 8013eba:	0c1b      	lsrs	r3, r3, #16
 8013ebc:	2210      	movs	r2, #16
 8013ebe:	b2d9      	uxtb	r1, r3
 8013ec0:	b909      	cbnz	r1, 8013ec6 <__lo0bits+0x32>
 8013ec2:	3208      	adds	r2, #8
 8013ec4:	0a1b      	lsrs	r3, r3, #8
 8013ec6:	0719      	lsls	r1, r3, #28
 8013ec8:	bf04      	itt	eq
 8013eca:	091b      	lsreq	r3, r3, #4
 8013ecc:	3204      	addeq	r2, #4
 8013ece:	0799      	lsls	r1, r3, #30
 8013ed0:	bf04      	itt	eq
 8013ed2:	089b      	lsreq	r3, r3, #2
 8013ed4:	3202      	addeq	r2, #2
 8013ed6:	07d9      	lsls	r1, r3, #31
 8013ed8:	d403      	bmi.n	8013ee2 <__lo0bits+0x4e>
 8013eda:	085b      	lsrs	r3, r3, #1
 8013edc:	f102 0201 	add.w	r2, r2, #1
 8013ee0:	d003      	beq.n	8013eea <__lo0bits+0x56>
 8013ee2:	6003      	str	r3, [r0, #0]
 8013ee4:	e7e5      	b.n	8013eb2 <__lo0bits+0x1e>
 8013ee6:	2200      	movs	r2, #0
 8013ee8:	e7e3      	b.n	8013eb2 <__lo0bits+0x1e>
 8013eea:	2220      	movs	r2, #32
 8013eec:	e7e1      	b.n	8013eb2 <__lo0bits+0x1e>
	...

08013ef0 <__i2b>:
 8013ef0:	b510      	push	{r4, lr}
 8013ef2:	460c      	mov	r4, r1
 8013ef4:	2101      	movs	r1, #1
 8013ef6:	f7ff ff05 	bl	8013d04 <_Balloc>
 8013efa:	4602      	mov	r2, r0
 8013efc:	b928      	cbnz	r0, 8013f0a <__i2b+0x1a>
 8013efe:	4b05      	ldr	r3, [pc, #20]	; (8013f14 <__i2b+0x24>)
 8013f00:	4805      	ldr	r0, [pc, #20]	; (8013f18 <__i2b+0x28>)
 8013f02:	f240 1145 	movw	r1, #325	; 0x145
 8013f06:	f000 fe79 	bl	8014bfc <__assert_func>
 8013f0a:	2301      	movs	r3, #1
 8013f0c:	6144      	str	r4, [r0, #20]
 8013f0e:	6103      	str	r3, [r0, #16]
 8013f10:	bd10      	pop	{r4, pc}
 8013f12:	bf00      	nop
 8013f14:	08015858 	.word	0x08015858
 8013f18:	08015869 	.word	0x08015869

08013f1c <__multiply>:
 8013f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f20:	4691      	mov	r9, r2
 8013f22:	690a      	ldr	r2, [r1, #16]
 8013f24:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013f28:	429a      	cmp	r2, r3
 8013f2a:	bfb8      	it	lt
 8013f2c:	460b      	movlt	r3, r1
 8013f2e:	460c      	mov	r4, r1
 8013f30:	bfbc      	itt	lt
 8013f32:	464c      	movlt	r4, r9
 8013f34:	4699      	movlt	r9, r3
 8013f36:	6927      	ldr	r7, [r4, #16]
 8013f38:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013f3c:	68a3      	ldr	r3, [r4, #8]
 8013f3e:	6861      	ldr	r1, [r4, #4]
 8013f40:	eb07 060a 	add.w	r6, r7, sl
 8013f44:	42b3      	cmp	r3, r6
 8013f46:	b085      	sub	sp, #20
 8013f48:	bfb8      	it	lt
 8013f4a:	3101      	addlt	r1, #1
 8013f4c:	f7ff feda 	bl	8013d04 <_Balloc>
 8013f50:	b930      	cbnz	r0, 8013f60 <__multiply+0x44>
 8013f52:	4602      	mov	r2, r0
 8013f54:	4b44      	ldr	r3, [pc, #272]	; (8014068 <__multiply+0x14c>)
 8013f56:	4845      	ldr	r0, [pc, #276]	; (801406c <__multiply+0x150>)
 8013f58:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8013f5c:	f000 fe4e 	bl	8014bfc <__assert_func>
 8013f60:	f100 0514 	add.w	r5, r0, #20
 8013f64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013f68:	462b      	mov	r3, r5
 8013f6a:	2200      	movs	r2, #0
 8013f6c:	4543      	cmp	r3, r8
 8013f6e:	d321      	bcc.n	8013fb4 <__multiply+0x98>
 8013f70:	f104 0314 	add.w	r3, r4, #20
 8013f74:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013f78:	f109 0314 	add.w	r3, r9, #20
 8013f7c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013f80:	9202      	str	r2, [sp, #8]
 8013f82:	1b3a      	subs	r2, r7, r4
 8013f84:	3a15      	subs	r2, #21
 8013f86:	f022 0203 	bic.w	r2, r2, #3
 8013f8a:	3204      	adds	r2, #4
 8013f8c:	f104 0115 	add.w	r1, r4, #21
 8013f90:	428f      	cmp	r7, r1
 8013f92:	bf38      	it	cc
 8013f94:	2204      	movcc	r2, #4
 8013f96:	9201      	str	r2, [sp, #4]
 8013f98:	9a02      	ldr	r2, [sp, #8]
 8013f9a:	9303      	str	r3, [sp, #12]
 8013f9c:	429a      	cmp	r2, r3
 8013f9e:	d80c      	bhi.n	8013fba <__multiply+0x9e>
 8013fa0:	2e00      	cmp	r6, #0
 8013fa2:	dd03      	ble.n	8013fac <__multiply+0x90>
 8013fa4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d05b      	beq.n	8014064 <__multiply+0x148>
 8013fac:	6106      	str	r6, [r0, #16]
 8013fae:	b005      	add	sp, #20
 8013fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fb4:	f843 2b04 	str.w	r2, [r3], #4
 8013fb8:	e7d8      	b.n	8013f6c <__multiply+0x50>
 8013fba:	f8b3 a000 	ldrh.w	sl, [r3]
 8013fbe:	f1ba 0f00 	cmp.w	sl, #0
 8013fc2:	d024      	beq.n	801400e <__multiply+0xf2>
 8013fc4:	f104 0e14 	add.w	lr, r4, #20
 8013fc8:	46a9      	mov	r9, r5
 8013fca:	f04f 0c00 	mov.w	ip, #0
 8013fce:	f85e 2b04 	ldr.w	r2, [lr], #4
 8013fd2:	f8d9 1000 	ldr.w	r1, [r9]
 8013fd6:	fa1f fb82 	uxth.w	fp, r2
 8013fda:	b289      	uxth	r1, r1
 8013fdc:	fb0a 110b 	mla	r1, sl, fp, r1
 8013fe0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013fe4:	f8d9 2000 	ldr.w	r2, [r9]
 8013fe8:	4461      	add	r1, ip
 8013fea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013fee:	fb0a c20b 	mla	r2, sl, fp, ip
 8013ff2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013ff6:	b289      	uxth	r1, r1
 8013ff8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013ffc:	4577      	cmp	r7, lr
 8013ffe:	f849 1b04 	str.w	r1, [r9], #4
 8014002:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014006:	d8e2      	bhi.n	8013fce <__multiply+0xb2>
 8014008:	9a01      	ldr	r2, [sp, #4]
 801400a:	f845 c002 	str.w	ip, [r5, r2]
 801400e:	9a03      	ldr	r2, [sp, #12]
 8014010:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014014:	3304      	adds	r3, #4
 8014016:	f1b9 0f00 	cmp.w	r9, #0
 801401a:	d021      	beq.n	8014060 <__multiply+0x144>
 801401c:	6829      	ldr	r1, [r5, #0]
 801401e:	f104 0c14 	add.w	ip, r4, #20
 8014022:	46ae      	mov	lr, r5
 8014024:	f04f 0a00 	mov.w	sl, #0
 8014028:	f8bc b000 	ldrh.w	fp, [ip]
 801402c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8014030:	fb09 220b 	mla	r2, r9, fp, r2
 8014034:	4452      	add	r2, sl
 8014036:	b289      	uxth	r1, r1
 8014038:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801403c:	f84e 1b04 	str.w	r1, [lr], #4
 8014040:	f85c 1b04 	ldr.w	r1, [ip], #4
 8014044:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014048:	f8be 1000 	ldrh.w	r1, [lr]
 801404c:	fb09 110a 	mla	r1, r9, sl, r1
 8014050:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8014054:	4567      	cmp	r7, ip
 8014056:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801405a:	d8e5      	bhi.n	8014028 <__multiply+0x10c>
 801405c:	9a01      	ldr	r2, [sp, #4]
 801405e:	50a9      	str	r1, [r5, r2]
 8014060:	3504      	adds	r5, #4
 8014062:	e799      	b.n	8013f98 <__multiply+0x7c>
 8014064:	3e01      	subs	r6, #1
 8014066:	e79b      	b.n	8013fa0 <__multiply+0x84>
 8014068:	08015858 	.word	0x08015858
 801406c:	08015869 	.word	0x08015869

08014070 <__pow5mult>:
 8014070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014074:	4615      	mov	r5, r2
 8014076:	f012 0203 	ands.w	r2, r2, #3
 801407a:	4606      	mov	r6, r0
 801407c:	460f      	mov	r7, r1
 801407e:	d007      	beq.n	8014090 <__pow5mult+0x20>
 8014080:	4c25      	ldr	r4, [pc, #148]	; (8014118 <__pow5mult+0xa8>)
 8014082:	3a01      	subs	r2, #1
 8014084:	2300      	movs	r3, #0
 8014086:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801408a:	f7ff fe9d 	bl	8013dc8 <__multadd>
 801408e:	4607      	mov	r7, r0
 8014090:	10ad      	asrs	r5, r5, #2
 8014092:	d03d      	beq.n	8014110 <__pow5mult+0xa0>
 8014094:	69f4      	ldr	r4, [r6, #28]
 8014096:	b97c      	cbnz	r4, 80140b8 <__pow5mult+0x48>
 8014098:	2010      	movs	r0, #16
 801409a:	f7ff fd7f 	bl	8013b9c <malloc>
 801409e:	4602      	mov	r2, r0
 80140a0:	61f0      	str	r0, [r6, #28]
 80140a2:	b928      	cbnz	r0, 80140b0 <__pow5mult+0x40>
 80140a4:	4b1d      	ldr	r3, [pc, #116]	; (801411c <__pow5mult+0xac>)
 80140a6:	481e      	ldr	r0, [pc, #120]	; (8014120 <__pow5mult+0xb0>)
 80140a8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80140ac:	f000 fda6 	bl	8014bfc <__assert_func>
 80140b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80140b4:	6004      	str	r4, [r0, #0]
 80140b6:	60c4      	str	r4, [r0, #12]
 80140b8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80140bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80140c0:	b94c      	cbnz	r4, 80140d6 <__pow5mult+0x66>
 80140c2:	f240 2171 	movw	r1, #625	; 0x271
 80140c6:	4630      	mov	r0, r6
 80140c8:	f7ff ff12 	bl	8013ef0 <__i2b>
 80140cc:	2300      	movs	r3, #0
 80140ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80140d2:	4604      	mov	r4, r0
 80140d4:	6003      	str	r3, [r0, #0]
 80140d6:	f04f 0900 	mov.w	r9, #0
 80140da:	07eb      	lsls	r3, r5, #31
 80140dc:	d50a      	bpl.n	80140f4 <__pow5mult+0x84>
 80140de:	4639      	mov	r1, r7
 80140e0:	4622      	mov	r2, r4
 80140e2:	4630      	mov	r0, r6
 80140e4:	f7ff ff1a 	bl	8013f1c <__multiply>
 80140e8:	4639      	mov	r1, r7
 80140ea:	4680      	mov	r8, r0
 80140ec:	4630      	mov	r0, r6
 80140ee:	f7ff fe49 	bl	8013d84 <_Bfree>
 80140f2:	4647      	mov	r7, r8
 80140f4:	106d      	asrs	r5, r5, #1
 80140f6:	d00b      	beq.n	8014110 <__pow5mult+0xa0>
 80140f8:	6820      	ldr	r0, [r4, #0]
 80140fa:	b938      	cbnz	r0, 801410c <__pow5mult+0x9c>
 80140fc:	4622      	mov	r2, r4
 80140fe:	4621      	mov	r1, r4
 8014100:	4630      	mov	r0, r6
 8014102:	f7ff ff0b 	bl	8013f1c <__multiply>
 8014106:	6020      	str	r0, [r4, #0]
 8014108:	f8c0 9000 	str.w	r9, [r0]
 801410c:	4604      	mov	r4, r0
 801410e:	e7e4      	b.n	80140da <__pow5mult+0x6a>
 8014110:	4638      	mov	r0, r7
 8014112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014116:	bf00      	nop
 8014118:	080159b8 	.word	0x080159b8
 801411c:	080157e9 	.word	0x080157e9
 8014120:	08015869 	.word	0x08015869

08014124 <__lshift>:
 8014124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014128:	460c      	mov	r4, r1
 801412a:	6849      	ldr	r1, [r1, #4]
 801412c:	6923      	ldr	r3, [r4, #16]
 801412e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014132:	68a3      	ldr	r3, [r4, #8]
 8014134:	4607      	mov	r7, r0
 8014136:	4691      	mov	r9, r2
 8014138:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801413c:	f108 0601 	add.w	r6, r8, #1
 8014140:	42b3      	cmp	r3, r6
 8014142:	db0b      	blt.n	801415c <__lshift+0x38>
 8014144:	4638      	mov	r0, r7
 8014146:	f7ff fddd 	bl	8013d04 <_Balloc>
 801414a:	4605      	mov	r5, r0
 801414c:	b948      	cbnz	r0, 8014162 <__lshift+0x3e>
 801414e:	4602      	mov	r2, r0
 8014150:	4b28      	ldr	r3, [pc, #160]	; (80141f4 <__lshift+0xd0>)
 8014152:	4829      	ldr	r0, [pc, #164]	; (80141f8 <__lshift+0xd4>)
 8014154:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8014158:	f000 fd50 	bl	8014bfc <__assert_func>
 801415c:	3101      	adds	r1, #1
 801415e:	005b      	lsls	r3, r3, #1
 8014160:	e7ee      	b.n	8014140 <__lshift+0x1c>
 8014162:	2300      	movs	r3, #0
 8014164:	f100 0114 	add.w	r1, r0, #20
 8014168:	f100 0210 	add.w	r2, r0, #16
 801416c:	4618      	mov	r0, r3
 801416e:	4553      	cmp	r3, sl
 8014170:	db33      	blt.n	80141da <__lshift+0xb6>
 8014172:	6920      	ldr	r0, [r4, #16]
 8014174:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014178:	f104 0314 	add.w	r3, r4, #20
 801417c:	f019 091f 	ands.w	r9, r9, #31
 8014180:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014184:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014188:	d02b      	beq.n	80141e2 <__lshift+0xbe>
 801418a:	f1c9 0e20 	rsb	lr, r9, #32
 801418e:	468a      	mov	sl, r1
 8014190:	2200      	movs	r2, #0
 8014192:	6818      	ldr	r0, [r3, #0]
 8014194:	fa00 f009 	lsl.w	r0, r0, r9
 8014198:	4310      	orrs	r0, r2
 801419a:	f84a 0b04 	str.w	r0, [sl], #4
 801419e:	f853 2b04 	ldr.w	r2, [r3], #4
 80141a2:	459c      	cmp	ip, r3
 80141a4:	fa22 f20e 	lsr.w	r2, r2, lr
 80141a8:	d8f3      	bhi.n	8014192 <__lshift+0x6e>
 80141aa:	ebac 0304 	sub.w	r3, ip, r4
 80141ae:	3b15      	subs	r3, #21
 80141b0:	f023 0303 	bic.w	r3, r3, #3
 80141b4:	3304      	adds	r3, #4
 80141b6:	f104 0015 	add.w	r0, r4, #21
 80141ba:	4584      	cmp	ip, r0
 80141bc:	bf38      	it	cc
 80141be:	2304      	movcc	r3, #4
 80141c0:	50ca      	str	r2, [r1, r3]
 80141c2:	b10a      	cbz	r2, 80141c8 <__lshift+0xa4>
 80141c4:	f108 0602 	add.w	r6, r8, #2
 80141c8:	3e01      	subs	r6, #1
 80141ca:	4638      	mov	r0, r7
 80141cc:	612e      	str	r6, [r5, #16]
 80141ce:	4621      	mov	r1, r4
 80141d0:	f7ff fdd8 	bl	8013d84 <_Bfree>
 80141d4:	4628      	mov	r0, r5
 80141d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141da:	f842 0f04 	str.w	r0, [r2, #4]!
 80141de:	3301      	adds	r3, #1
 80141e0:	e7c5      	b.n	801416e <__lshift+0x4a>
 80141e2:	3904      	subs	r1, #4
 80141e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80141e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80141ec:	459c      	cmp	ip, r3
 80141ee:	d8f9      	bhi.n	80141e4 <__lshift+0xc0>
 80141f0:	e7ea      	b.n	80141c8 <__lshift+0xa4>
 80141f2:	bf00      	nop
 80141f4:	08015858 	.word	0x08015858
 80141f8:	08015869 	.word	0x08015869

080141fc <__mcmp>:
 80141fc:	b530      	push	{r4, r5, lr}
 80141fe:	6902      	ldr	r2, [r0, #16]
 8014200:	690c      	ldr	r4, [r1, #16]
 8014202:	1b12      	subs	r2, r2, r4
 8014204:	d10e      	bne.n	8014224 <__mcmp+0x28>
 8014206:	f100 0314 	add.w	r3, r0, #20
 801420a:	3114      	adds	r1, #20
 801420c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014210:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014214:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014218:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801421c:	42a5      	cmp	r5, r4
 801421e:	d003      	beq.n	8014228 <__mcmp+0x2c>
 8014220:	d305      	bcc.n	801422e <__mcmp+0x32>
 8014222:	2201      	movs	r2, #1
 8014224:	4610      	mov	r0, r2
 8014226:	bd30      	pop	{r4, r5, pc}
 8014228:	4283      	cmp	r3, r0
 801422a:	d3f3      	bcc.n	8014214 <__mcmp+0x18>
 801422c:	e7fa      	b.n	8014224 <__mcmp+0x28>
 801422e:	f04f 32ff 	mov.w	r2, #4294967295
 8014232:	e7f7      	b.n	8014224 <__mcmp+0x28>

08014234 <__mdiff>:
 8014234:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014238:	460c      	mov	r4, r1
 801423a:	4606      	mov	r6, r0
 801423c:	4611      	mov	r1, r2
 801423e:	4620      	mov	r0, r4
 8014240:	4690      	mov	r8, r2
 8014242:	f7ff ffdb 	bl	80141fc <__mcmp>
 8014246:	1e05      	subs	r5, r0, #0
 8014248:	d110      	bne.n	801426c <__mdiff+0x38>
 801424a:	4629      	mov	r1, r5
 801424c:	4630      	mov	r0, r6
 801424e:	f7ff fd59 	bl	8013d04 <_Balloc>
 8014252:	b930      	cbnz	r0, 8014262 <__mdiff+0x2e>
 8014254:	4b3a      	ldr	r3, [pc, #232]	; (8014340 <__mdiff+0x10c>)
 8014256:	4602      	mov	r2, r0
 8014258:	f240 2137 	movw	r1, #567	; 0x237
 801425c:	4839      	ldr	r0, [pc, #228]	; (8014344 <__mdiff+0x110>)
 801425e:	f000 fccd 	bl	8014bfc <__assert_func>
 8014262:	2301      	movs	r3, #1
 8014264:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014268:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801426c:	bfa4      	itt	ge
 801426e:	4643      	movge	r3, r8
 8014270:	46a0      	movge	r8, r4
 8014272:	4630      	mov	r0, r6
 8014274:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014278:	bfa6      	itte	ge
 801427a:	461c      	movge	r4, r3
 801427c:	2500      	movge	r5, #0
 801427e:	2501      	movlt	r5, #1
 8014280:	f7ff fd40 	bl	8013d04 <_Balloc>
 8014284:	b920      	cbnz	r0, 8014290 <__mdiff+0x5c>
 8014286:	4b2e      	ldr	r3, [pc, #184]	; (8014340 <__mdiff+0x10c>)
 8014288:	4602      	mov	r2, r0
 801428a:	f240 2145 	movw	r1, #581	; 0x245
 801428e:	e7e5      	b.n	801425c <__mdiff+0x28>
 8014290:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014294:	6926      	ldr	r6, [r4, #16]
 8014296:	60c5      	str	r5, [r0, #12]
 8014298:	f104 0914 	add.w	r9, r4, #20
 801429c:	f108 0514 	add.w	r5, r8, #20
 80142a0:	f100 0e14 	add.w	lr, r0, #20
 80142a4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80142a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80142ac:	f108 0210 	add.w	r2, r8, #16
 80142b0:	46f2      	mov	sl, lr
 80142b2:	2100      	movs	r1, #0
 80142b4:	f859 3b04 	ldr.w	r3, [r9], #4
 80142b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80142bc:	fa11 f88b 	uxtah	r8, r1, fp
 80142c0:	b299      	uxth	r1, r3
 80142c2:	0c1b      	lsrs	r3, r3, #16
 80142c4:	eba8 0801 	sub.w	r8, r8, r1
 80142c8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80142cc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80142d0:	fa1f f888 	uxth.w	r8, r8
 80142d4:	1419      	asrs	r1, r3, #16
 80142d6:	454e      	cmp	r6, r9
 80142d8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80142dc:	f84a 3b04 	str.w	r3, [sl], #4
 80142e0:	d8e8      	bhi.n	80142b4 <__mdiff+0x80>
 80142e2:	1b33      	subs	r3, r6, r4
 80142e4:	3b15      	subs	r3, #21
 80142e6:	f023 0303 	bic.w	r3, r3, #3
 80142ea:	3304      	adds	r3, #4
 80142ec:	3415      	adds	r4, #21
 80142ee:	42a6      	cmp	r6, r4
 80142f0:	bf38      	it	cc
 80142f2:	2304      	movcc	r3, #4
 80142f4:	441d      	add	r5, r3
 80142f6:	4473      	add	r3, lr
 80142f8:	469e      	mov	lr, r3
 80142fa:	462e      	mov	r6, r5
 80142fc:	4566      	cmp	r6, ip
 80142fe:	d30e      	bcc.n	801431e <__mdiff+0xea>
 8014300:	f10c 0203 	add.w	r2, ip, #3
 8014304:	1b52      	subs	r2, r2, r5
 8014306:	f022 0203 	bic.w	r2, r2, #3
 801430a:	3d03      	subs	r5, #3
 801430c:	45ac      	cmp	ip, r5
 801430e:	bf38      	it	cc
 8014310:	2200      	movcc	r2, #0
 8014312:	4413      	add	r3, r2
 8014314:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8014318:	b17a      	cbz	r2, 801433a <__mdiff+0x106>
 801431a:	6107      	str	r7, [r0, #16]
 801431c:	e7a4      	b.n	8014268 <__mdiff+0x34>
 801431e:	f856 8b04 	ldr.w	r8, [r6], #4
 8014322:	fa11 f288 	uxtah	r2, r1, r8
 8014326:	1414      	asrs	r4, r2, #16
 8014328:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801432c:	b292      	uxth	r2, r2
 801432e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8014332:	f84e 2b04 	str.w	r2, [lr], #4
 8014336:	1421      	asrs	r1, r4, #16
 8014338:	e7e0      	b.n	80142fc <__mdiff+0xc8>
 801433a:	3f01      	subs	r7, #1
 801433c:	e7ea      	b.n	8014314 <__mdiff+0xe0>
 801433e:	bf00      	nop
 8014340:	08015858 	.word	0x08015858
 8014344:	08015869 	.word	0x08015869

08014348 <__d2b>:
 8014348:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801434c:	460f      	mov	r7, r1
 801434e:	2101      	movs	r1, #1
 8014350:	ec59 8b10 	vmov	r8, r9, d0
 8014354:	4616      	mov	r6, r2
 8014356:	f7ff fcd5 	bl	8013d04 <_Balloc>
 801435a:	4604      	mov	r4, r0
 801435c:	b930      	cbnz	r0, 801436c <__d2b+0x24>
 801435e:	4602      	mov	r2, r0
 8014360:	4b24      	ldr	r3, [pc, #144]	; (80143f4 <__d2b+0xac>)
 8014362:	4825      	ldr	r0, [pc, #148]	; (80143f8 <__d2b+0xb0>)
 8014364:	f240 310f 	movw	r1, #783	; 0x30f
 8014368:	f000 fc48 	bl	8014bfc <__assert_func>
 801436c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014370:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014374:	bb2d      	cbnz	r5, 80143c2 <__d2b+0x7a>
 8014376:	9301      	str	r3, [sp, #4]
 8014378:	f1b8 0300 	subs.w	r3, r8, #0
 801437c:	d026      	beq.n	80143cc <__d2b+0x84>
 801437e:	4668      	mov	r0, sp
 8014380:	9300      	str	r3, [sp, #0]
 8014382:	f7ff fd87 	bl	8013e94 <__lo0bits>
 8014386:	e9dd 1200 	ldrd	r1, r2, [sp]
 801438a:	b1e8      	cbz	r0, 80143c8 <__d2b+0x80>
 801438c:	f1c0 0320 	rsb	r3, r0, #32
 8014390:	fa02 f303 	lsl.w	r3, r2, r3
 8014394:	430b      	orrs	r3, r1
 8014396:	40c2      	lsrs	r2, r0
 8014398:	6163      	str	r3, [r4, #20]
 801439a:	9201      	str	r2, [sp, #4]
 801439c:	9b01      	ldr	r3, [sp, #4]
 801439e:	61a3      	str	r3, [r4, #24]
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	bf14      	ite	ne
 80143a4:	2202      	movne	r2, #2
 80143a6:	2201      	moveq	r2, #1
 80143a8:	6122      	str	r2, [r4, #16]
 80143aa:	b1bd      	cbz	r5, 80143dc <__d2b+0x94>
 80143ac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80143b0:	4405      	add	r5, r0
 80143b2:	603d      	str	r5, [r7, #0]
 80143b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80143b8:	6030      	str	r0, [r6, #0]
 80143ba:	4620      	mov	r0, r4
 80143bc:	b003      	add	sp, #12
 80143be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80143c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80143c6:	e7d6      	b.n	8014376 <__d2b+0x2e>
 80143c8:	6161      	str	r1, [r4, #20]
 80143ca:	e7e7      	b.n	801439c <__d2b+0x54>
 80143cc:	a801      	add	r0, sp, #4
 80143ce:	f7ff fd61 	bl	8013e94 <__lo0bits>
 80143d2:	9b01      	ldr	r3, [sp, #4]
 80143d4:	6163      	str	r3, [r4, #20]
 80143d6:	3020      	adds	r0, #32
 80143d8:	2201      	movs	r2, #1
 80143da:	e7e5      	b.n	80143a8 <__d2b+0x60>
 80143dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80143e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80143e4:	6038      	str	r0, [r7, #0]
 80143e6:	6918      	ldr	r0, [r3, #16]
 80143e8:	f7ff fd34 	bl	8013e54 <__hi0bits>
 80143ec:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80143f0:	e7e2      	b.n	80143b8 <__d2b+0x70>
 80143f2:	bf00      	nop
 80143f4:	08015858 	.word	0x08015858
 80143f8:	08015869 	.word	0x08015869

080143fc <_malloc_usable_size_r>:
 80143fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014400:	1f18      	subs	r0, r3, #4
 8014402:	2b00      	cmp	r3, #0
 8014404:	bfbc      	itt	lt
 8014406:	580b      	ldrlt	r3, [r1, r0]
 8014408:	18c0      	addlt	r0, r0, r3
 801440a:	4770      	bx	lr

0801440c <__ssputs_r>:
 801440c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014410:	688e      	ldr	r6, [r1, #8]
 8014412:	461f      	mov	r7, r3
 8014414:	42be      	cmp	r6, r7
 8014416:	680b      	ldr	r3, [r1, #0]
 8014418:	4682      	mov	sl, r0
 801441a:	460c      	mov	r4, r1
 801441c:	4690      	mov	r8, r2
 801441e:	d82c      	bhi.n	801447a <__ssputs_r+0x6e>
 8014420:	898a      	ldrh	r2, [r1, #12]
 8014422:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014426:	d026      	beq.n	8014476 <__ssputs_r+0x6a>
 8014428:	6965      	ldr	r5, [r4, #20]
 801442a:	6909      	ldr	r1, [r1, #16]
 801442c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014430:	eba3 0901 	sub.w	r9, r3, r1
 8014434:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014438:	1c7b      	adds	r3, r7, #1
 801443a:	444b      	add	r3, r9
 801443c:	106d      	asrs	r5, r5, #1
 801443e:	429d      	cmp	r5, r3
 8014440:	bf38      	it	cc
 8014442:	461d      	movcc	r5, r3
 8014444:	0553      	lsls	r3, r2, #21
 8014446:	d527      	bpl.n	8014498 <__ssputs_r+0x8c>
 8014448:	4629      	mov	r1, r5
 801444a:	f7ff fbcf 	bl	8013bec <_malloc_r>
 801444e:	4606      	mov	r6, r0
 8014450:	b360      	cbz	r0, 80144ac <__ssputs_r+0xa0>
 8014452:	6921      	ldr	r1, [r4, #16]
 8014454:	464a      	mov	r2, r9
 8014456:	f7fe fcca 	bl	8012dee <memcpy>
 801445a:	89a3      	ldrh	r3, [r4, #12]
 801445c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014464:	81a3      	strh	r3, [r4, #12]
 8014466:	6126      	str	r6, [r4, #16]
 8014468:	6165      	str	r5, [r4, #20]
 801446a:	444e      	add	r6, r9
 801446c:	eba5 0509 	sub.w	r5, r5, r9
 8014470:	6026      	str	r6, [r4, #0]
 8014472:	60a5      	str	r5, [r4, #8]
 8014474:	463e      	mov	r6, r7
 8014476:	42be      	cmp	r6, r7
 8014478:	d900      	bls.n	801447c <__ssputs_r+0x70>
 801447a:	463e      	mov	r6, r7
 801447c:	6820      	ldr	r0, [r4, #0]
 801447e:	4632      	mov	r2, r6
 8014480:	4641      	mov	r1, r8
 8014482:	f000 fb6f 	bl	8014b64 <memmove>
 8014486:	68a3      	ldr	r3, [r4, #8]
 8014488:	1b9b      	subs	r3, r3, r6
 801448a:	60a3      	str	r3, [r4, #8]
 801448c:	6823      	ldr	r3, [r4, #0]
 801448e:	4433      	add	r3, r6
 8014490:	6023      	str	r3, [r4, #0]
 8014492:	2000      	movs	r0, #0
 8014494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014498:	462a      	mov	r2, r5
 801449a:	f7fd fd15 	bl	8011ec8 <_realloc_r>
 801449e:	4606      	mov	r6, r0
 80144a0:	2800      	cmp	r0, #0
 80144a2:	d1e0      	bne.n	8014466 <__ssputs_r+0x5a>
 80144a4:	6921      	ldr	r1, [r4, #16]
 80144a6:	4650      	mov	r0, sl
 80144a8:	f7ff fb2c 	bl	8013b04 <_free_r>
 80144ac:	230c      	movs	r3, #12
 80144ae:	f8ca 3000 	str.w	r3, [sl]
 80144b2:	89a3      	ldrh	r3, [r4, #12]
 80144b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80144b8:	81a3      	strh	r3, [r4, #12]
 80144ba:	f04f 30ff 	mov.w	r0, #4294967295
 80144be:	e7e9      	b.n	8014494 <__ssputs_r+0x88>

080144c0 <_svfiprintf_r>:
 80144c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144c4:	4698      	mov	r8, r3
 80144c6:	898b      	ldrh	r3, [r1, #12]
 80144c8:	061b      	lsls	r3, r3, #24
 80144ca:	b09d      	sub	sp, #116	; 0x74
 80144cc:	4607      	mov	r7, r0
 80144ce:	460d      	mov	r5, r1
 80144d0:	4614      	mov	r4, r2
 80144d2:	d50e      	bpl.n	80144f2 <_svfiprintf_r+0x32>
 80144d4:	690b      	ldr	r3, [r1, #16]
 80144d6:	b963      	cbnz	r3, 80144f2 <_svfiprintf_r+0x32>
 80144d8:	2140      	movs	r1, #64	; 0x40
 80144da:	f7ff fb87 	bl	8013bec <_malloc_r>
 80144de:	6028      	str	r0, [r5, #0]
 80144e0:	6128      	str	r0, [r5, #16]
 80144e2:	b920      	cbnz	r0, 80144ee <_svfiprintf_r+0x2e>
 80144e4:	230c      	movs	r3, #12
 80144e6:	603b      	str	r3, [r7, #0]
 80144e8:	f04f 30ff 	mov.w	r0, #4294967295
 80144ec:	e0d0      	b.n	8014690 <_svfiprintf_r+0x1d0>
 80144ee:	2340      	movs	r3, #64	; 0x40
 80144f0:	616b      	str	r3, [r5, #20]
 80144f2:	2300      	movs	r3, #0
 80144f4:	9309      	str	r3, [sp, #36]	; 0x24
 80144f6:	2320      	movs	r3, #32
 80144f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80144fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8014500:	2330      	movs	r3, #48	; 0x30
 8014502:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80146a8 <_svfiprintf_r+0x1e8>
 8014506:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801450a:	f04f 0901 	mov.w	r9, #1
 801450e:	4623      	mov	r3, r4
 8014510:	469a      	mov	sl, r3
 8014512:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014516:	b10a      	cbz	r2, 801451c <_svfiprintf_r+0x5c>
 8014518:	2a25      	cmp	r2, #37	; 0x25
 801451a:	d1f9      	bne.n	8014510 <_svfiprintf_r+0x50>
 801451c:	ebba 0b04 	subs.w	fp, sl, r4
 8014520:	d00b      	beq.n	801453a <_svfiprintf_r+0x7a>
 8014522:	465b      	mov	r3, fp
 8014524:	4622      	mov	r2, r4
 8014526:	4629      	mov	r1, r5
 8014528:	4638      	mov	r0, r7
 801452a:	f7ff ff6f 	bl	801440c <__ssputs_r>
 801452e:	3001      	adds	r0, #1
 8014530:	f000 80a9 	beq.w	8014686 <_svfiprintf_r+0x1c6>
 8014534:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014536:	445a      	add	r2, fp
 8014538:	9209      	str	r2, [sp, #36]	; 0x24
 801453a:	f89a 3000 	ldrb.w	r3, [sl]
 801453e:	2b00      	cmp	r3, #0
 8014540:	f000 80a1 	beq.w	8014686 <_svfiprintf_r+0x1c6>
 8014544:	2300      	movs	r3, #0
 8014546:	f04f 32ff 	mov.w	r2, #4294967295
 801454a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801454e:	f10a 0a01 	add.w	sl, sl, #1
 8014552:	9304      	str	r3, [sp, #16]
 8014554:	9307      	str	r3, [sp, #28]
 8014556:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801455a:	931a      	str	r3, [sp, #104]	; 0x68
 801455c:	4654      	mov	r4, sl
 801455e:	2205      	movs	r2, #5
 8014560:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014564:	4850      	ldr	r0, [pc, #320]	; (80146a8 <_svfiprintf_r+0x1e8>)
 8014566:	f7eb fe43 	bl	80001f0 <memchr>
 801456a:	9a04      	ldr	r2, [sp, #16]
 801456c:	b9d8      	cbnz	r0, 80145a6 <_svfiprintf_r+0xe6>
 801456e:	06d0      	lsls	r0, r2, #27
 8014570:	bf44      	itt	mi
 8014572:	2320      	movmi	r3, #32
 8014574:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014578:	0711      	lsls	r1, r2, #28
 801457a:	bf44      	itt	mi
 801457c:	232b      	movmi	r3, #43	; 0x2b
 801457e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014582:	f89a 3000 	ldrb.w	r3, [sl]
 8014586:	2b2a      	cmp	r3, #42	; 0x2a
 8014588:	d015      	beq.n	80145b6 <_svfiprintf_r+0xf6>
 801458a:	9a07      	ldr	r2, [sp, #28]
 801458c:	4654      	mov	r4, sl
 801458e:	2000      	movs	r0, #0
 8014590:	f04f 0c0a 	mov.w	ip, #10
 8014594:	4621      	mov	r1, r4
 8014596:	f811 3b01 	ldrb.w	r3, [r1], #1
 801459a:	3b30      	subs	r3, #48	; 0x30
 801459c:	2b09      	cmp	r3, #9
 801459e:	d94d      	bls.n	801463c <_svfiprintf_r+0x17c>
 80145a0:	b1b0      	cbz	r0, 80145d0 <_svfiprintf_r+0x110>
 80145a2:	9207      	str	r2, [sp, #28]
 80145a4:	e014      	b.n	80145d0 <_svfiprintf_r+0x110>
 80145a6:	eba0 0308 	sub.w	r3, r0, r8
 80145aa:	fa09 f303 	lsl.w	r3, r9, r3
 80145ae:	4313      	orrs	r3, r2
 80145b0:	9304      	str	r3, [sp, #16]
 80145b2:	46a2      	mov	sl, r4
 80145b4:	e7d2      	b.n	801455c <_svfiprintf_r+0x9c>
 80145b6:	9b03      	ldr	r3, [sp, #12]
 80145b8:	1d19      	adds	r1, r3, #4
 80145ba:	681b      	ldr	r3, [r3, #0]
 80145bc:	9103      	str	r1, [sp, #12]
 80145be:	2b00      	cmp	r3, #0
 80145c0:	bfbb      	ittet	lt
 80145c2:	425b      	neglt	r3, r3
 80145c4:	f042 0202 	orrlt.w	r2, r2, #2
 80145c8:	9307      	strge	r3, [sp, #28]
 80145ca:	9307      	strlt	r3, [sp, #28]
 80145cc:	bfb8      	it	lt
 80145ce:	9204      	strlt	r2, [sp, #16]
 80145d0:	7823      	ldrb	r3, [r4, #0]
 80145d2:	2b2e      	cmp	r3, #46	; 0x2e
 80145d4:	d10c      	bne.n	80145f0 <_svfiprintf_r+0x130>
 80145d6:	7863      	ldrb	r3, [r4, #1]
 80145d8:	2b2a      	cmp	r3, #42	; 0x2a
 80145da:	d134      	bne.n	8014646 <_svfiprintf_r+0x186>
 80145dc:	9b03      	ldr	r3, [sp, #12]
 80145de:	1d1a      	adds	r2, r3, #4
 80145e0:	681b      	ldr	r3, [r3, #0]
 80145e2:	9203      	str	r2, [sp, #12]
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	bfb8      	it	lt
 80145e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80145ec:	3402      	adds	r4, #2
 80145ee:	9305      	str	r3, [sp, #20]
 80145f0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80146b8 <_svfiprintf_r+0x1f8>
 80145f4:	7821      	ldrb	r1, [r4, #0]
 80145f6:	2203      	movs	r2, #3
 80145f8:	4650      	mov	r0, sl
 80145fa:	f7eb fdf9 	bl	80001f0 <memchr>
 80145fe:	b138      	cbz	r0, 8014610 <_svfiprintf_r+0x150>
 8014600:	9b04      	ldr	r3, [sp, #16]
 8014602:	eba0 000a 	sub.w	r0, r0, sl
 8014606:	2240      	movs	r2, #64	; 0x40
 8014608:	4082      	lsls	r2, r0
 801460a:	4313      	orrs	r3, r2
 801460c:	3401      	adds	r4, #1
 801460e:	9304      	str	r3, [sp, #16]
 8014610:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014614:	4825      	ldr	r0, [pc, #148]	; (80146ac <_svfiprintf_r+0x1ec>)
 8014616:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801461a:	2206      	movs	r2, #6
 801461c:	f7eb fde8 	bl	80001f0 <memchr>
 8014620:	2800      	cmp	r0, #0
 8014622:	d038      	beq.n	8014696 <_svfiprintf_r+0x1d6>
 8014624:	4b22      	ldr	r3, [pc, #136]	; (80146b0 <_svfiprintf_r+0x1f0>)
 8014626:	bb1b      	cbnz	r3, 8014670 <_svfiprintf_r+0x1b0>
 8014628:	9b03      	ldr	r3, [sp, #12]
 801462a:	3307      	adds	r3, #7
 801462c:	f023 0307 	bic.w	r3, r3, #7
 8014630:	3308      	adds	r3, #8
 8014632:	9303      	str	r3, [sp, #12]
 8014634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014636:	4433      	add	r3, r6
 8014638:	9309      	str	r3, [sp, #36]	; 0x24
 801463a:	e768      	b.n	801450e <_svfiprintf_r+0x4e>
 801463c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014640:	460c      	mov	r4, r1
 8014642:	2001      	movs	r0, #1
 8014644:	e7a6      	b.n	8014594 <_svfiprintf_r+0xd4>
 8014646:	2300      	movs	r3, #0
 8014648:	3401      	adds	r4, #1
 801464a:	9305      	str	r3, [sp, #20]
 801464c:	4619      	mov	r1, r3
 801464e:	f04f 0c0a 	mov.w	ip, #10
 8014652:	4620      	mov	r0, r4
 8014654:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014658:	3a30      	subs	r2, #48	; 0x30
 801465a:	2a09      	cmp	r2, #9
 801465c:	d903      	bls.n	8014666 <_svfiprintf_r+0x1a6>
 801465e:	2b00      	cmp	r3, #0
 8014660:	d0c6      	beq.n	80145f0 <_svfiprintf_r+0x130>
 8014662:	9105      	str	r1, [sp, #20]
 8014664:	e7c4      	b.n	80145f0 <_svfiprintf_r+0x130>
 8014666:	fb0c 2101 	mla	r1, ip, r1, r2
 801466a:	4604      	mov	r4, r0
 801466c:	2301      	movs	r3, #1
 801466e:	e7f0      	b.n	8014652 <_svfiprintf_r+0x192>
 8014670:	ab03      	add	r3, sp, #12
 8014672:	9300      	str	r3, [sp, #0]
 8014674:	462a      	mov	r2, r5
 8014676:	4b0f      	ldr	r3, [pc, #60]	; (80146b4 <_svfiprintf_r+0x1f4>)
 8014678:	a904      	add	r1, sp, #16
 801467a:	4638      	mov	r0, r7
 801467c:	f7fd fcf4 	bl	8012068 <_printf_float>
 8014680:	1c42      	adds	r2, r0, #1
 8014682:	4606      	mov	r6, r0
 8014684:	d1d6      	bne.n	8014634 <_svfiprintf_r+0x174>
 8014686:	89ab      	ldrh	r3, [r5, #12]
 8014688:	065b      	lsls	r3, r3, #25
 801468a:	f53f af2d 	bmi.w	80144e8 <_svfiprintf_r+0x28>
 801468e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014690:	b01d      	add	sp, #116	; 0x74
 8014692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014696:	ab03      	add	r3, sp, #12
 8014698:	9300      	str	r3, [sp, #0]
 801469a:	462a      	mov	r2, r5
 801469c:	4b05      	ldr	r3, [pc, #20]	; (80146b4 <_svfiprintf_r+0x1f4>)
 801469e:	a904      	add	r1, sp, #16
 80146a0:	4638      	mov	r0, r7
 80146a2:	f7fd ff85 	bl	80125b0 <_printf_i>
 80146a6:	e7eb      	b.n	8014680 <_svfiprintf_r+0x1c0>
 80146a8:	080159c4 	.word	0x080159c4
 80146ac:	080159ce 	.word	0x080159ce
 80146b0:	08012069 	.word	0x08012069
 80146b4:	0801440d 	.word	0x0801440d
 80146b8:	080159ca 	.word	0x080159ca

080146bc <__sfputc_r>:
 80146bc:	6893      	ldr	r3, [r2, #8]
 80146be:	3b01      	subs	r3, #1
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	b410      	push	{r4}
 80146c4:	6093      	str	r3, [r2, #8]
 80146c6:	da08      	bge.n	80146da <__sfputc_r+0x1e>
 80146c8:	6994      	ldr	r4, [r2, #24]
 80146ca:	42a3      	cmp	r3, r4
 80146cc:	db01      	blt.n	80146d2 <__sfputc_r+0x16>
 80146ce:	290a      	cmp	r1, #10
 80146d0:	d103      	bne.n	80146da <__sfputc_r+0x1e>
 80146d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80146d6:	f7fe ba20 	b.w	8012b1a <__swbuf_r>
 80146da:	6813      	ldr	r3, [r2, #0]
 80146dc:	1c58      	adds	r0, r3, #1
 80146de:	6010      	str	r0, [r2, #0]
 80146e0:	7019      	strb	r1, [r3, #0]
 80146e2:	4608      	mov	r0, r1
 80146e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80146e8:	4770      	bx	lr

080146ea <__sfputs_r>:
 80146ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146ec:	4606      	mov	r6, r0
 80146ee:	460f      	mov	r7, r1
 80146f0:	4614      	mov	r4, r2
 80146f2:	18d5      	adds	r5, r2, r3
 80146f4:	42ac      	cmp	r4, r5
 80146f6:	d101      	bne.n	80146fc <__sfputs_r+0x12>
 80146f8:	2000      	movs	r0, #0
 80146fa:	e007      	b.n	801470c <__sfputs_r+0x22>
 80146fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014700:	463a      	mov	r2, r7
 8014702:	4630      	mov	r0, r6
 8014704:	f7ff ffda 	bl	80146bc <__sfputc_r>
 8014708:	1c43      	adds	r3, r0, #1
 801470a:	d1f3      	bne.n	80146f4 <__sfputs_r+0xa>
 801470c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014710 <_vfiprintf_r>:
 8014710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014714:	460d      	mov	r5, r1
 8014716:	b09d      	sub	sp, #116	; 0x74
 8014718:	4614      	mov	r4, r2
 801471a:	4698      	mov	r8, r3
 801471c:	4606      	mov	r6, r0
 801471e:	b118      	cbz	r0, 8014728 <_vfiprintf_r+0x18>
 8014720:	6a03      	ldr	r3, [r0, #32]
 8014722:	b90b      	cbnz	r3, 8014728 <_vfiprintf_r+0x18>
 8014724:	f7fe f8f2 	bl	801290c <__sinit>
 8014728:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801472a:	07d9      	lsls	r1, r3, #31
 801472c:	d405      	bmi.n	801473a <_vfiprintf_r+0x2a>
 801472e:	89ab      	ldrh	r3, [r5, #12]
 8014730:	059a      	lsls	r2, r3, #22
 8014732:	d402      	bmi.n	801473a <_vfiprintf_r+0x2a>
 8014734:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014736:	f7fe fb58 	bl	8012dea <__retarget_lock_acquire_recursive>
 801473a:	89ab      	ldrh	r3, [r5, #12]
 801473c:	071b      	lsls	r3, r3, #28
 801473e:	d501      	bpl.n	8014744 <_vfiprintf_r+0x34>
 8014740:	692b      	ldr	r3, [r5, #16]
 8014742:	b99b      	cbnz	r3, 801476c <_vfiprintf_r+0x5c>
 8014744:	4629      	mov	r1, r5
 8014746:	4630      	mov	r0, r6
 8014748:	f7fe fa24 	bl	8012b94 <__swsetup_r>
 801474c:	b170      	cbz	r0, 801476c <_vfiprintf_r+0x5c>
 801474e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014750:	07dc      	lsls	r4, r3, #31
 8014752:	d504      	bpl.n	801475e <_vfiprintf_r+0x4e>
 8014754:	f04f 30ff 	mov.w	r0, #4294967295
 8014758:	b01d      	add	sp, #116	; 0x74
 801475a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801475e:	89ab      	ldrh	r3, [r5, #12]
 8014760:	0598      	lsls	r0, r3, #22
 8014762:	d4f7      	bmi.n	8014754 <_vfiprintf_r+0x44>
 8014764:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014766:	f7fe fb41 	bl	8012dec <__retarget_lock_release_recursive>
 801476a:	e7f3      	b.n	8014754 <_vfiprintf_r+0x44>
 801476c:	2300      	movs	r3, #0
 801476e:	9309      	str	r3, [sp, #36]	; 0x24
 8014770:	2320      	movs	r3, #32
 8014772:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014776:	f8cd 800c 	str.w	r8, [sp, #12]
 801477a:	2330      	movs	r3, #48	; 0x30
 801477c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8014930 <_vfiprintf_r+0x220>
 8014780:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014784:	f04f 0901 	mov.w	r9, #1
 8014788:	4623      	mov	r3, r4
 801478a:	469a      	mov	sl, r3
 801478c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014790:	b10a      	cbz	r2, 8014796 <_vfiprintf_r+0x86>
 8014792:	2a25      	cmp	r2, #37	; 0x25
 8014794:	d1f9      	bne.n	801478a <_vfiprintf_r+0x7a>
 8014796:	ebba 0b04 	subs.w	fp, sl, r4
 801479a:	d00b      	beq.n	80147b4 <_vfiprintf_r+0xa4>
 801479c:	465b      	mov	r3, fp
 801479e:	4622      	mov	r2, r4
 80147a0:	4629      	mov	r1, r5
 80147a2:	4630      	mov	r0, r6
 80147a4:	f7ff ffa1 	bl	80146ea <__sfputs_r>
 80147a8:	3001      	adds	r0, #1
 80147aa:	f000 80a9 	beq.w	8014900 <_vfiprintf_r+0x1f0>
 80147ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80147b0:	445a      	add	r2, fp
 80147b2:	9209      	str	r2, [sp, #36]	; 0x24
 80147b4:	f89a 3000 	ldrb.w	r3, [sl]
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	f000 80a1 	beq.w	8014900 <_vfiprintf_r+0x1f0>
 80147be:	2300      	movs	r3, #0
 80147c0:	f04f 32ff 	mov.w	r2, #4294967295
 80147c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80147c8:	f10a 0a01 	add.w	sl, sl, #1
 80147cc:	9304      	str	r3, [sp, #16]
 80147ce:	9307      	str	r3, [sp, #28]
 80147d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80147d4:	931a      	str	r3, [sp, #104]	; 0x68
 80147d6:	4654      	mov	r4, sl
 80147d8:	2205      	movs	r2, #5
 80147da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80147de:	4854      	ldr	r0, [pc, #336]	; (8014930 <_vfiprintf_r+0x220>)
 80147e0:	f7eb fd06 	bl	80001f0 <memchr>
 80147e4:	9a04      	ldr	r2, [sp, #16]
 80147e6:	b9d8      	cbnz	r0, 8014820 <_vfiprintf_r+0x110>
 80147e8:	06d1      	lsls	r1, r2, #27
 80147ea:	bf44      	itt	mi
 80147ec:	2320      	movmi	r3, #32
 80147ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80147f2:	0713      	lsls	r3, r2, #28
 80147f4:	bf44      	itt	mi
 80147f6:	232b      	movmi	r3, #43	; 0x2b
 80147f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80147fc:	f89a 3000 	ldrb.w	r3, [sl]
 8014800:	2b2a      	cmp	r3, #42	; 0x2a
 8014802:	d015      	beq.n	8014830 <_vfiprintf_r+0x120>
 8014804:	9a07      	ldr	r2, [sp, #28]
 8014806:	4654      	mov	r4, sl
 8014808:	2000      	movs	r0, #0
 801480a:	f04f 0c0a 	mov.w	ip, #10
 801480e:	4621      	mov	r1, r4
 8014810:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014814:	3b30      	subs	r3, #48	; 0x30
 8014816:	2b09      	cmp	r3, #9
 8014818:	d94d      	bls.n	80148b6 <_vfiprintf_r+0x1a6>
 801481a:	b1b0      	cbz	r0, 801484a <_vfiprintf_r+0x13a>
 801481c:	9207      	str	r2, [sp, #28]
 801481e:	e014      	b.n	801484a <_vfiprintf_r+0x13a>
 8014820:	eba0 0308 	sub.w	r3, r0, r8
 8014824:	fa09 f303 	lsl.w	r3, r9, r3
 8014828:	4313      	orrs	r3, r2
 801482a:	9304      	str	r3, [sp, #16]
 801482c:	46a2      	mov	sl, r4
 801482e:	e7d2      	b.n	80147d6 <_vfiprintf_r+0xc6>
 8014830:	9b03      	ldr	r3, [sp, #12]
 8014832:	1d19      	adds	r1, r3, #4
 8014834:	681b      	ldr	r3, [r3, #0]
 8014836:	9103      	str	r1, [sp, #12]
 8014838:	2b00      	cmp	r3, #0
 801483a:	bfbb      	ittet	lt
 801483c:	425b      	neglt	r3, r3
 801483e:	f042 0202 	orrlt.w	r2, r2, #2
 8014842:	9307      	strge	r3, [sp, #28]
 8014844:	9307      	strlt	r3, [sp, #28]
 8014846:	bfb8      	it	lt
 8014848:	9204      	strlt	r2, [sp, #16]
 801484a:	7823      	ldrb	r3, [r4, #0]
 801484c:	2b2e      	cmp	r3, #46	; 0x2e
 801484e:	d10c      	bne.n	801486a <_vfiprintf_r+0x15a>
 8014850:	7863      	ldrb	r3, [r4, #1]
 8014852:	2b2a      	cmp	r3, #42	; 0x2a
 8014854:	d134      	bne.n	80148c0 <_vfiprintf_r+0x1b0>
 8014856:	9b03      	ldr	r3, [sp, #12]
 8014858:	1d1a      	adds	r2, r3, #4
 801485a:	681b      	ldr	r3, [r3, #0]
 801485c:	9203      	str	r2, [sp, #12]
 801485e:	2b00      	cmp	r3, #0
 8014860:	bfb8      	it	lt
 8014862:	f04f 33ff 	movlt.w	r3, #4294967295
 8014866:	3402      	adds	r4, #2
 8014868:	9305      	str	r3, [sp, #20]
 801486a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8014940 <_vfiprintf_r+0x230>
 801486e:	7821      	ldrb	r1, [r4, #0]
 8014870:	2203      	movs	r2, #3
 8014872:	4650      	mov	r0, sl
 8014874:	f7eb fcbc 	bl	80001f0 <memchr>
 8014878:	b138      	cbz	r0, 801488a <_vfiprintf_r+0x17a>
 801487a:	9b04      	ldr	r3, [sp, #16]
 801487c:	eba0 000a 	sub.w	r0, r0, sl
 8014880:	2240      	movs	r2, #64	; 0x40
 8014882:	4082      	lsls	r2, r0
 8014884:	4313      	orrs	r3, r2
 8014886:	3401      	adds	r4, #1
 8014888:	9304      	str	r3, [sp, #16]
 801488a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801488e:	4829      	ldr	r0, [pc, #164]	; (8014934 <_vfiprintf_r+0x224>)
 8014890:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014894:	2206      	movs	r2, #6
 8014896:	f7eb fcab 	bl	80001f0 <memchr>
 801489a:	2800      	cmp	r0, #0
 801489c:	d03f      	beq.n	801491e <_vfiprintf_r+0x20e>
 801489e:	4b26      	ldr	r3, [pc, #152]	; (8014938 <_vfiprintf_r+0x228>)
 80148a0:	bb1b      	cbnz	r3, 80148ea <_vfiprintf_r+0x1da>
 80148a2:	9b03      	ldr	r3, [sp, #12]
 80148a4:	3307      	adds	r3, #7
 80148a6:	f023 0307 	bic.w	r3, r3, #7
 80148aa:	3308      	adds	r3, #8
 80148ac:	9303      	str	r3, [sp, #12]
 80148ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148b0:	443b      	add	r3, r7
 80148b2:	9309      	str	r3, [sp, #36]	; 0x24
 80148b4:	e768      	b.n	8014788 <_vfiprintf_r+0x78>
 80148b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80148ba:	460c      	mov	r4, r1
 80148bc:	2001      	movs	r0, #1
 80148be:	e7a6      	b.n	801480e <_vfiprintf_r+0xfe>
 80148c0:	2300      	movs	r3, #0
 80148c2:	3401      	adds	r4, #1
 80148c4:	9305      	str	r3, [sp, #20]
 80148c6:	4619      	mov	r1, r3
 80148c8:	f04f 0c0a 	mov.w	ip, #10
 80148cc:	4620      	mov	r0, r4
 80148ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80148d2:	3a30      	subs	r2, #48	; 0x30
 80148d4:	2a09      	cmp	r2, #9
 80148d6:	d903      	bls.n	80148e0 <_vfiprintf_r+0x1d0>
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d0c6      	beq.n	801486a <_vfiprintf_r+0x15a>
 80148dc:	9105      	str	r1, [sp, #20]
 80148de:	e7c4      	b.n	801486a <_vfiprintf_r+0x15a>
 80148e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80148e4:	4604      	mov	r4, r0
 80148e6:	2301      	movs	r3, #1
 80148e8:	e7f0      	b.n	80148cc <_vfiprintf_r+0x1bc>
 80148ea:	ab03      	add	r3, sp, #12
 80148ec:	9300      	str	r3, [sp, #0]
 80148ee:	462a      	mov	r2, r5
 80148f0:	4b12      	ldr	r3, [pc, #72]	; (801493c <_vfiprintf_r+0x22c>)
 80148f2:	a904      	add	r1, sp, #16
 80148f4:	4630      	mov	r0, r6
 80148f6:	f7fd fbb7 	bl	8012068 <_printf_float>
 80148fa:	4607      	mov	r7, r0
 80148fc:	1c78      	adds	r0, r7, #1
 80148fe:	d1d6      	bne.n	80148ae <_vfiprintf_r+0x19e>
 8014900:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014902:	07d9      	lsls	r1, r3, #31
 8014904:	d405      	bmi.n	8014912 <_vfiprintf_r+0x202>
 8014906:	89ab      	ldrh	r3, [r5, #12]
 8014908:	059a      	lsls	r2, r3, #22
 801490a:	d402      	bmi.n	8014912 <_vfiprintf_r+0x202>
 801490c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801490e:	f7fe fa6d 	bl	8012dec <__retarget_lock_release_recursive>
 8014912:	89ab      	ldrh	r3, [r5, #12]
 8014914:	065b      	lsls	r3, r3, #25
 8014916:	f53f af1d 	bmi.w	8014754 <_vfiprintf_r+0x44>
 801491a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801491c:	e71c      	b.n	8014758 <_vfiprintf_r+0x48>
 801491e:	ab03      	add	r3, sp, #12
 8014920:	9300      	str	r3, [sp, #0]
 8014922:	462a      	mov	r2, r5
 8014924:	4b05      	ldr	r3, [pc, #20]	; (801493c <_vfiprintf_r+0x22c>)
 8014926:	a904      	add	r1, sp, #16
 8014928:	4630      	mov	r0, r6
 801492a:	f7fd fe41 	bl	80125b0 <_printf_i>
 801492e:	e7e4      	b.n	80148fa <_vfiprintf_r+0x1ea>
 8014930:	080159c4 	.word	0x080159c4
 8014934:	080159ce 	.word	0x080159ce
 8014938:	08012069 	.word	0x08012069
 801493c:	080146eb 	.word	0x080146eb
 8014940:	080159ca 	.word	0x080159ca

08014944 <__sflush_r>:
 8014944:	898a      	ldrh	r2, [r1, #12]
 8014946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801494a:	4605      	mov	r5, r0
 801494c:	0710      	lsls	r0, r2, #28
 801494e:	460c      	mov	r4, r1
 8014950:	d458      	bmi.n	8014a04 <__sflush_r+0xc0>
 8014952:	684b      	ldr	r3, [r1, #4]
 8014954:	2b00      	cmp	r3, #0
 8014956:	dc05      	bgt.n	8014964 <__sflush_r+0x20>
 8014958:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801495a:	2b00      	cmp	r3, #0
 801495c:	dc02      	bgt.n	8014964 <__sflush_r+0x20>
 801495e:	2000      	movs	r0, #0
 8014960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014964:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014966:	2e00      	cmp	r6, #0
 8014968:	d0f9      	beq.n	801495e <__sflush_r+0x1a>
 801496a:	2300      	movs	r3, #0
 801496c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014970:	682f      	ldr	r7, [r5, #0]
 8014972:	6a21      	ldr	r1, [r4, #32]
 8014974:	602b      	str	r3, [r5, #0]
 8014976:	d032      	beq.n	80149de <__sflush_r+0x9a>
 8014978:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801497a:	89a3      	ldrh	r3, [r4, #12]
 801497c:	075a      	lsls	r2, r3, #29
 801497e:	d505      	bpl.n	801498c <__sflush_r+0x48>
 8014980:	6863      	ldr	r3, [r4, #4]
 8014982:	1ac0      	subs	r0, r0, r3
 8014984:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014986:	b10b      	cbz	r3, 801498c <__sflush_r+0x48>
 8014988:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801498a:	1ac0      	subs	r0, r0, r3
 801498c:	2300      	movs	r3, #0
 801498e:	4602      	mov	r2, r0
 8014990:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014992:	6a21      	ldr	r1, [r4, #32]
 8014994:	4628      	mov	r0, r5
 8014996:	47b0      	blx	r6
 8014998:	1c43      	adds	r3, r0, #1
 801499a:	89a3      	ldrh	r3, [r4, #12]
 801499c:	d106      	bne.n	80149ac <__sflush_r+0x68>
 801499e:	6829      	ldr	r1, [r5, #0]
 80149a0:	291d      	cmp	r1, #29
 80149a2:	d82b      	bhi.n	80149fc <__sflush_r+0xb8>
 80149a4:	4a29      	ldr	r2, [pc, #164]	; (8014a4c <__sflush_r+0x108>)
 80149a6:	410a      	asrs	r2, r1
 80149a8:	07d6      	lsls	r6, r2, #31
 80149aa:	d427      	bmi.n	80149fc <__sflush_r+0xb8>
 80149ac:	2200      	movs	r2, #0
 80149ae:	6062      	str	r2, [r4, #4]
 80149b0:	04d9      	lsls	r1, r3, #19
 80149b2:	6922      	ldr	r2, [r4, #16]
 80149b4:	6022      	str	r2, [r4, #0]
 80149b6:	d504      	bpl.n	80149c2 <__sflush_r+0x7e>
 80149b8:	1c42      	adds	r2, r0, #1
 80149ba:	d101      	bne.n	80149c0 <__sflush_r+0x7c>
 80149bc:	682b      	ldr	r3, [r5, #0]
 80149be:	b903      	cbnz	r3, 80149c2 <__sflush_r+0x7e>
 80149c0:	6560      	str	r0, [r4, #84]	; 0x54
 80149c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80149c4:	602f      	str	r7, [r5, #0]
 80149c6:	2900      	cmp	r1, #0
 80149c8:	d0c9      	beq.n	801495e <__sflush_r+0x1a>
 80149ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80149ce:	4299      	cmp	r1, r3
 80149d0:	d002      	beq.n	80149d8 <__sflush_r+0x94>
 80149d2:	4628      	mov	r0, r5
 80149d4:	f7ff f896 	bl	8013b04 <_free_r>
 80149d8:	2000      	movs	r0, #0
 80149da:	6360      	str	r0, [r4, #52]	; 0x34
 80149dc:	e7c0      	b.n	8014960 <__sflush_r+0x1c>
 80149de:	2301      	movs	r3, #1
 80149e0:	4628      	mov	r0, r5
 80149e2:	47b0      	blx	r6
 80149e4:	1c41      	adds	r1, r0, #1
 80149e6:	d1c8      	bne.n	801497a <__sflush_r+0x36>
 80149e8:	682b      	ldr	r3, [r5, #0]
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d0c5      	beq.n	801497a <__sflush_r+0x36>
 80149ee:	2b1d      	cmp	r3, #29
 80149f0:	d001      	beq.n	80149f6 <__sflush_r+0xb2>
 80149f2:	2b16      	cmp	r3, #22
 80149f4:	d101      	bne.n	80149fa <__sflush_r+0xb6>
 80149f6:	602f      	str	r7, [r5, #0]
 80149f8:	e7b1      	b.n	801495e <__sflush_r+0x1a>
 80149fa:	89a3      	ldrh	r3, [r4, #12]
 80149fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a00:	81a3      	strh	r3, [r4, #12]
 8014a02:	e7ad      	b.n	8014960 <__sflush_r+0x1c>
 8014a04:	690f      	ldr	r7, [r1, #16]
 8014a06:	2f00      	cmp	r7, #0
 8014a08:	d0a9      	beq.n	801495e <__sflush_r+0x1a>
 8014a0a:	0793      	lsls	r3, r2, #30
 8014a0c:	680e      	ldr	r6, [r1, #0]
 8014a0e:	bf08      	it	eq
 8014a10:	694b      	ldreq	r3, [r1, #20]
 8014a12:	600f      	str	r7, [r1, #0]
 8014a14:	bf18      	it	ne
 8014a16:	2300      	movne	r3, #0
 8014a18:	eba6 0807 	sub.w	r8, r6, r7
 8014a1c:	608b      	str	r3, [r1, #8]
 8014a1e:	f1b8 0f00 	cmp.w	r8, #0
 8014a22:	dd9c      	ble.n	801495e <__sflush_r+0x1a>
 8014a24:	6a21      	ldr	r1, [r4, #32]
 8014a26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014a28:	4643      	mov	r3, r8
 8014a2a:	463a      	mov	r2, r7
 8014a2c:	4628      	mov	r0, r5
 8014a2e:	47b0      	blx	r6
 8014a30:	2800      	cmp	r0, #0
 8014a32:	dc06      	bgt.n	8014a42 <__sflush_r+0xfe>
 8014a34:	89a3      	ldrh	r3, [r4, #12]
 8014a36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a3a:	81a3      	strh	r3, [r4, #12]
 8014a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8014a40:	e78e      	b.n	8014960 <__sflush_r+0x1c>
 8014a42:	4407      	add	r7, r0
 8014a44:	eba8 0800 	sub.w	r8, r8, r0
 8014a48:	e7e9      	b.n	8014a1e <__sflush_r+0xda>
 8014a4a:	bf00      	nop
 8014a4c:	dfbffffe 	.word	0xdfbffffe

08014a50 <_fflush_r>:
 8014a50:	b538      	push	{r3, r4, r5, lr}
 8014a52:	690b      	ldr	r3, [r1, #16]
 8014a54:	4605      	mov	r5, r0
 8014a56:	460c      	mov	r4, r1
 8014a58:	b913      	cbnz	r3, 8014a60 <_fflush_r+0x10>
 8014a5a:	2500      	movs	r5, #0
 8014a5c:	4628      	mov	r0, r5
 8014a5e:	bd38      	pop	{r3, r4, r5, pc}
 8014a60:	b118      	cbz	r0, 8014a6a <_fflush_r+0x1a>
 8014a62:	6a03      	ldr	r3, [r0, #32]
 8014a64:	b90b      	cbnz	r3, 8014a6a <_fflush_r+0x1a>
 8014a66:	f7fd ff51 	bl	801290c <__sinit>
 8014a6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d0f3      	beq.n	8014a5a <_fflush_r+0xa>
 8014a72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014a74:	07d0      	lsls	r0, r2, #31
 8014a76:	d404      	bmi.n	8014a82 <_fflush_r+0x32>
 8014a78:	0599      	lsls	r1, r3, #22
 8014a7a:	d402      	bmi.n	8014a82 <_fflush_r+0x32>
 8014a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014a7e:	f7fe f9b4 	bl	8012dea <__retarget_lock_acquire_recursive>
 8014a82:	4628      	mov	r0, r5
 8014a84:	4621      	mov	r1, r4
 8014a86:	f7ff ff5d 	bl	8014944 <__sflush_r>
 8014a8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014a8c:	07da      	lsls	r2, r3, #31
 8014a8e:	4605      	mov	r5, r0
 8014a90:	d4e4      	bmi.n	8014a5c <_fflush_r+0xc>
 8014a92:	89a3      	ldrh	r3, [r4, #12]
 8014a94:	059b      	lsls	r3, r3, #22
 8014a96:	d4e1      	bmi.n	8014a5c <_fflush_r+0xc>
 8014a98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014a9a:	f7fe f9a7 	bl	8012dec <__retarget_lock_release_recursive>
 8014a9e:	e7dd      	b.n	8014a5c <_fflush_r+0xc>

08014aa0 <__swhatbuf_r>:
 8014aa0:	b570      	push	{r4, r5, r6, lr}
 8014aa2:	460c      	mov	r4, r1
 8014aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014aa8:	2900      	cmp	r1, #0
 8014aaa:	b096      	sub	sp, #88	; 0x58
 8014aac:	4615      	mov	r5, r2
 8014aae:	461e      	mov	r6, r3
 8014ab0:	da0d      	bge.n	8014ace <__swhatbuf_r+0x2e>
 8014ab2:	89a3      	ldrh	r3, [r4, #12]
 8014ab4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8014ab8:	f04f 0100 	mov.w	r1, #0
 8014abc:	bf0c      	ite	eq
 8014abe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8014ac2:	2340      	movne	r3, #64	; 0x40
 8014ac4:	2000      	movs	r0, #0
 8014ac6:	6031      	str	r1, [r6, #0]
 8014ac8:	602b      	str	r3, [r5, #0]
 8014aca:	b016      	add	sp, #88	; 0x58
 8014acc:	bd70      	pop	{r4, r5, r6, pc}
 8014ace:	466a      	mov	r2, sp
 8014ad0:	f000 f862 	bl	8014b98 <_fstat_r>
 8014ad4:	2800      	cmp	r0, #0
 8014ad6:	dbec      	blt.n	8014ab2 <__swhatbuf_r+0x12>
 8014ad8:	9901      	ldr	r1, [sp, #4]
 8014ada:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8014ade:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8014ae2:	4259      	negs	r1, r3
 8014ae4:	4159      	adcs	r1, r3
 8014ae6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014aea:	e7eb      	b.n	8014ac4 <__swhatbuf_r+0x24>

08014aec <__smakebuf_r>:
 8014aec:	898b      	ldrh	r3, [r1, #12]
 8014aee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014af0:	079d      	lsls	r5, r3, #30
 8014af2:	4606      	mov	r6, r0
 8014af4:	460c      	mov	r4, r1
 8014af6:	d507      	bpl.n	8014b08 <__smakebuf_r+0x1c>
 8014af8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014afc:	6023      	str	r3, [r4, #0]
 8014afe:	6123      	str	r3, [r4, #16]
 8014b00:	2301      	movs	r3, #1
 8014b02:	6163      	str	r3, [r4, #20]
 8014b04:	b002      	add	sp, #8
 8014b06:	bd70      	pop	{r4, r5, r6, pc}
 8014b08:	ab01      	add	r3, sp, #4
 8014b0a:	466a      	mov	r2, sp
 8014b0c:	f7ff ffc8 	bl	8014aa0 <__swhatbuf_r>
 8014b10:	9900      	ldr	r1, [sp, #0]
 8014b12:	4605      	mov	r5, r0
 8014b14:	4630      	mov	r0, r6
 8014b16:	f7ff f869 	bl	8013bec <_malloc_r>
 8014b1a:	b948      	cbnz	r0, 8014b30 <__smakebuf_r+0x44>
 8014b1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b20:	059a      	lsls	r2, r3, #22
 8014b22:	d4ef      	bmi.n	8014b04 <__smakebuf_r+0x18>
 8014b24:	f023 0303 	bic.w	r3, r3, #3
 8014b28:	f043 0302 	orr.w	r3, r3, #2
 8014b2c:	81a3      	strh	r3, [r4, #12]
 8014b2e:	e7e3      	b.n	8014af8 <__smakebuf_r+0xc>
 8014b30:	89a3      	ldrh	r3, [r4, #12]
 8014b32:	6020      	str	r0, [r4, #0]
 8014b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014b38:	81a3      	strh	r3, [r4, #12]
 8014b3a:	9b00      	ldr	r3, [sp, #0]
 8014b3c:	6163      	str	r3, [r4, #20]
 8014b3e:	9b01      	ldr	r3, [sp, #4]
 8014b40:	6120      	str	r0, [r4, #16]
 8014b42:	b15b      	cbz	r3, 8014b5c <__smakebuf_r+0x70>
 8014b44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014b48:	4630      	mov	r0, r6
 8014b4a:	f000 f837 	bl	8014bbc <_isatty_r>
 8014b4e:	b128      	cbz	r0, 8014b5c <__smakebuf_r+0x70>
 8014b50:	89a3      	ldrh	r3, [r4, #12]
 8014b52:	f023 0303 	bic.w	r3, r3, #3
 8014b56:	f043 0301 	orr.w	r3, r3, #1
 8014b5a:	81a3      	strh	r3, [r4, #12]
 8014b5c:	89a3      	ldrh	r3, [r4, #12]
 8014b5e:	431d      	orrs	r5, r3
 8014b60:	81a5      	strh	r5, [r4, #12]
 8014b62:	e7cf      	b.n	8014b04 <__smakebuf_r+0x18>

08014b64 <memmove>:
 8014b64:	4288      	cmp	r0, r1
 8014b66:	b510      	push	{r4, lr}
 8014b68:	eb01 0402 	add.w	r4, r1, r2
 8014b6c:	d902      	bls.n	8014b74 <memmove+0x10>
 8014b6e:	4284      	cmp	r4, r0
 8014b70:	4623      	mov	r3, r4
 8014b72:	d807      	bhi.n	8014b84 <memmove+0x20>
 8014b74:	1e43      	subs	r3, r0, #1
 8014b76:	42a1      	cmp	r1, r4
 8014b78:	d008      	beq.n	8014b8c <memmove+0x28>
 8014b7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014b7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014b82:	e7f8      	b.n	8014b76 <memmove+0x12>
 8014b84:	4402      	add	r2, r0
 8014b86:	4601      	mov	r1, r0
 8014b88:	428a      	cmp	r2, r1
 8014b8a:	d100      	bne.n	8014b8e <memmove+0x2a>
 8014b8c:	bd10      	pop	{r4, pc}
 8014b8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014b92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014b96:	e7f7      	b.n	8014b88 <memmove+0x24>

08014b98 <_fstat_r>:
 8014b98:	b538      	push	{r3, r4, r5, lr}
 8014b9a:	4d07      	ldr	r5, [pc, #28]	; (8014bb8 <_fstat_r+0x20>)
 8014b9c:	2300      	movs	r3, #0
 8014b9e:	4604      	mov	r4, r0
 8014ba0:	4608      	mov	r0, r1
 8014ba2:	4611      	mov	r1, r2
 8014ba4:	602b      	str	r3, [r5, #0]
 8014ba6:	f7f3 fcde 	bl	8008566 <_fstat>
 8014baa:	1c43      	adds	r3, r0, #1
 8014bac:	d102      	bne.n	8014bb4 <_fstat_r+0x1c>
 8014bae:	682b      	ldr	r3, [r5, #0]
 8014bb0:	b103      	cbz	r3, 8014bb4 <_fstat_r+0x1c>
 8014bb2:	6023      	str	r3, [r4, #0]
 8014bb4:	bd38      	pop	{r3, r4, r5, pc}
 8014bb6:	bf00      	nop
 8014bb8:	20008114 	.word	0x20008114

08014bbc <_isatty_r>:
 8014bbc:	b538      	push	{r3, r4, r5, lr}
 8014bbe:	4d06      	ldr	r5, [pc, #24]	; (8014bd8 <_isatty_r+0x1c>)
 8014bc0:	2300      	movs	r3, #0
 8014bc2:	4604      	mov	r4, r0
 8014bc4:	4608      	mov	r0, r1
 8014bc6:	602b      	str	r3, [r5, #0]
 8014bc8:	f7f3 fcdd 	bl	8008586 <_isatty>
 8014bcc:	1c43      	adds	r3, r0, #1
 8014bce:	d102      	bne.n	8014bd6 <_isatty_r+0x1a>
 8014bd0:	682b      	ldr	r3, [r5, #0]
 8014bd2:	b103      	cbz	r3, 8014bd6 <_isatty_r+0x1a>
 8014bd4:	6023      	str	r3, [r4, #0]
 8014bd6:	bd38      	pop	{r3, r4, r5, pc}
 8014bd8:	20008114 	.word	0x20008114

08014bdc <_sbrk_r>:
 8014bdc:	b538      	push	{r3, r4, r5, lr}
 8014bde:	4d06      	ldr	r5, [pc, #24]	; (8014bf8 <_sbrk_r+0x1c>)
 8014be0:	2300      	movs	r3, #0
 8014be2:	4604      	mov	r4, r0
 8014be4:	4608      	mov	r0, r1
 8014be6:	602b      	str	r3, [r5, #0]
 8014be8:	f7f3 fce6 	bl	80085b8 <_sbrk>
 8014bec:	1c43      	adds	r3, r0, #1
 8014bee:	d102      	bne.n	8014bf6 <_sbrk_r+0x1a>
 8014bf0:	682b      	ldr	r3, [r5, #0]
 8014bf2:	b103      	cbz	r3, 8014bf6 <_sbrk_r+0x1a>
 8014bf4:	6023      	str	r3, [r4, #0]
 8014bf6:	bd38      	pop	{r3, r4, r5, pc}
 8014bf8:	20008114 	.word	0x20008114

08014bfc <__assert_func>:
 8014bfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014bfe:	4614      	mov	r4, r2
 8014c00:	461a      	mov	r2, r3
 8014c02:	4b09      	ldr	r3, [pc, #36]	; (8014c28 <__assert_func+0x2c>)
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	4605      	mov	r5, r0
 8014c08:	68d8      	ldr	r0, [r3, #12]
 8014c0a:	b14c      	cbz	r4, 8014c20 <__assert_func+0x24>
 8014c0c:	4b07      	ldr	r3, [pc, #28]	; (8014c2c <__assert_func+0x30>)
 8014c0e:	9100      	str	r1, [sp, #0]
 8014c10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014c14:	4906      	ldr	r1, [pc, #24]	; (8014c30 <__assert_func+0x34>)
 8014c16:	462b      	mov	r3, r5
 8014c18:	f000 f844 	bl	8014ca4 <fiprintf>
 8014c1c:	f000 f854 	bl	8014cc8 <abort>
 8014c20:	4b04      	ldr	r3, [pc, #16]	; (8014c34 <__assert_func+0x38>)
 8014c22:	461c      	mov	r4, r3
 8014c24:	e7f3      	b.n	8014c0e <__assert_func+0x12>
 8014c26:	bf00      	nop
 8014c28:	20000088 	.word	0x20000088
 8014c2c:	080159df 	.word	0x080159df
 8014c30:	080159ec 	.word	0x080159ec
 8014c34:	08015a1a 	.word	0x08015a1a

08014c38 <_calloc_r>:
 8014c38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014c3a:	fba1 2402 	umull	r2, r4, r1, r2
 8014c3e:	b94c      	cbnz	r4, 8014c54 <_calloc_r+0x1c>
 8014c40:	4611      	mov	r1, r2
 8014c42:	9201      	str	r2, [sp, #4]
 8014c44:	f7fe ffd2 	bl	8013bec <_malloc_r>
 8014c48:	9a01      	ldr	r2, [sp, #4]
 8014c4a:	4605      	mov	r5, r0
 8014c4c:	b930      	cbnz	r0, 8014c5c <_calloc_r+0x24>
 8014c4e:	4628      	mov	r0, r5
 8014c50:	b003      	add	sp, #12
 8014c52:	bd30      	pop	{r4, r5, pc}
 8014c54:	220c      	movs	r2, #12
 8014c56:	6002      	str	r2, [r0, #0]
 8014c58:	2500      	movs	r5, #0
 8014c5a:	e7f8      	b.n	8014c4e <_calloc_r+0x16>
 8014c5c:	4621      	mov	r1, r4
 8014c5e:	f7fd fff1 	bl	8012c44 <memset>
 8014c62:	e7f4      	b.n	8014c4e <_calloc_r+0x16>

08014c64 <__ascii_mbtowc>:
 8014c64:	b082      	sub	sp, #8
 8014c66:	b901      	cbnz	r1, 8014c6a <__ascii_mbtowc+0x6>
 8014c68:	a901      	add	r1, sp, #4
 8014c6a:	b142      	cbz	r2, 8014c7e <__ascii_mbtowc+0x1a>
 8014c6c:	b14b      	cbz	r3, 8014c82 <__ascii_mbtowc+0x1e>
 8014c6e:	7813      	ldrb	r3, [r2, #0]
 8014c70:	600b      	str	r3, [r1, #0]
 8014c72:	7812      	ldrb	r2, [r2, #0]
 8014c74:	1e10      	subs	r0, r2, #0
 8014c76:	bf18      	it	ne
 8014c78:	2001      	movne	r0, #1
 8014c7a:	b002      	add	sp, #8
 8014c7c:	4770      	bx	lr
 8014c7e:	4610      	mov	r0, r2
 8014c80:	e7fb      	b.n	8014c7a <__ascii_mbtowc+0x16>
 8014c82:	f06f 0001 	mvn.w	r0, #1
 8014c86:	e7f8      	b.n	8014c7a <__ascii_mbtowc+0x16>

08014c88 <__ascii_wctomb>:
 8014c88:	b149      	cbz	r1, 8014c9e <__ascii_wctomb+0x16>
 8014c8a:	2aff      	cmp	r2, #255	; 0xff
 8014c8c:	bf85      	ittet	hi
 8014c8e:	238a      	movhi	r3, #138	; 0x8a
 8014c90:	6003      	strhi	r3, [r0, #0]
 8014c92:	700a      	strbls	r2, [r1, #0]
 8014c94:	f04f 30ff 	movhi.w	r0, #4294967295
 8014c98:	bf98      	it	ls
 8014c9a:	2001      	movls	r0, #1
 8014c9c:	4770      	bx	lr
 8014c9e:	4608      	mov	r0, r1
 8014ca0:	4770      	bx	lr
	...

08014ca4 <fiprintf>:
 8014ca4:	b40e      	push	{r1, r2, r3}
 8014ca6:	b503      	push	{r0, r1, lr}
 8014ca8:	4601      	mov	r1, r0
 8014caa:	ab03      	add	r3, sp, #12
 8014cac:	4805      	ldr	r0, [pc, #20]	; (8014cc4 <fiprintf+0x20>)
 8014cae:	f853 2b04 	ldr.w	r2, [r3], #4
 8014cb2:	6800      	ldr	r0, [r0, #0]
 8014cb4:	9301      	str	r3, [sp, #4]
 8014cb6:	f7ff fd2b 	bl	8014710 <_vfiprintf_r>
 8014cba:	b002      	add	sp, #8
 8014cbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8014cc0:	b003      	add	sp, #12
 8014cc2:	4770      	bx	lr
 8014cc4:	20000088 	.word	0x20000088

08014cc8 <abort>:
 8014cc8:	b508      	push	{r3, lr}
 8014cca:	2006      	movs	r0, #6
 8014ccc:	f000 f82c 	bl	8014d28 <raise>
 8014cd0:	2001      	movs	r0, #1
 8014cd2:	f7f3 fbf9 	bl	80084c8 <_exit>

08014cd6 <_raise_r>:
 8014cd6:	291f      	cmp	r1, #31
 8014cd8:	b538      	push	{r3, r4, r5, lr}
 8014cda:	4604      	mov	r4, r0
 8014cdc:	460d      	mov	r5, r1
 8014cde:	d904      	bls.n	8014cea <_raise_r+0x14>
 8014ce0:	2316      	movs	r3, #22
 8014ce2:	6003      	str	r3, [r0, #0]
 8014ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8014ce8:	bd38      	pop	{r3, r4, r5, pc}
 8014cea:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8014cec:	b112      	cbz	r2, 8014cf4 <_raise_r+0x1e>
 8014cee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014cf2:	b94b      	cbnz	r3, 8014d08 <_raise_r+0x32>
 8014cf4:	4620      	mov	r0, r4
 8014cf6:	f000 f831 	bl	8014d5c <_getpid_r>
 8014cfa:	462a      	mov	r2, r5
 8014cfc:	4601      	mov	r1, r0
 8014cfe:	4620      	mov	r0, r4
 8014d00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014d04:	f000 b818 	b.w	8014d38 <_kill_r>
 8014d08:	2b01      	cmp	r3, #1
 8014d0a:	d00a      	beq.n	8014d22 <_raise_r+0x4c>
 8014d0c:	1c59      	adds	r1, r3, #1
 8014d0e:	d103      	bne.n	8014d18 <_raise_r+0x42>
 8014d10:	2316      	movs	r3, #22
 8014d12:	6003      	str	r3, [r0, #0]
 8014d14:	2001      	movs	r0, #1
 8014d16:	e7e7      	b.n	8014ce8 <_raise_r+0x12>
 8014d18:	2400      	movs	r4, #0
 8014d1a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014d1e:	4628      	mov	r0, r5
 8014d20:	4798      	blx	r3
 8014d22:	2000      	movs	r0, #0
 8014d24:	e7e0      	b.n	8014ce8 <_raise_r+0x12>
	...

08014d28 <raise>:
 8014d28:	4b02      	ldr	r3, [pc, #8]	; (8014d34 <raise+0xc>)
 8014d2a:	4601      	mov	r1, r0
 8014d2c:	6818      	ldr	r0, [r3, #0]
 8014d2e:	f7ff bfd2 	b.w	8014cd6 <_raise_r>
 8014d32:	bf00      	nop
 8014d34:	20000088 	.word	0x20000088

08014d38 <_kill_r>:
 8014d38:	b538      	push	{r3, r4, r5, lr}
 8014d3a:	4d07      	ldr	r5, [pc, #28]	; (8014d58 <_kill_r+0x20>)
 8014d3c:	2300      	movs	r3, #0
 8014d3e:	4604      	mov	r4, r0
 8014d40:	4608      	mov	r0, r1
 8014d42:	4611      	mov	r1, r2
 8014d44:	602b      	str	r3, [r5, #0]
 8014d46:	f7f3 fbaf 	bl	80084a8 <_kill>
 8014d4a:	1c43      	adds	r3, r0, #1
 8014d4c:	d102      	bne.n	8014d54 <_kill_r+0x1c>
 8014d4e:	682b      	ldr	r3, [r5, #0]
 8014d50:	b103      	cbz	r3, 8014d54 <_kill_r+0x1c>
 8014d52:	6023      	str	r3, [r4, #0]
 8014d54:	bd38      	pop	{r3, r4, r5, pc}
 8014d56:	bf00      	nop
 8014d58:	20008114 	.word	0x20008114

08014d5c <_getpid_r>:
 8014d5c:	f7f3 bb9c 	b.w	8008498 <_getpid>

08014d60 <_init>:
 8014d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d62:	bf00      	nop
 8014d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014d66:	bc08      	pop	{r3}
 8014d68:	469e      	mov	lr, r3
 8014d6a:	4770      	bx	lr

08014d6c <_fini>:
 8014d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d6e:	bf00      	nop
 8014d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014d72:	bc08      	pop	{r3}
 8014d74:	469e      	mov	lr, r3
 8014d76:	4770      	bx	lr
