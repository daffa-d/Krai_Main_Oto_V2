
Krai_Main_Oto_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014c78  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dac  08014e28  08014e28  00024e28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015bd4  08015bd4  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  08015bd4  08015bd4  00025bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015bdc  08015bdc  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08015bdc  08015bdc  00025bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015be4  08015be4  00025be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08015be8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301f8  2**0
                  CONTENTS
 10 .bss          00007f68  200001f8  200001f8  000301f8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20008160  20008160  000301f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002968f  00000000  00000000  0003026b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004f00  00000000  00000000  000598fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001e00  00000000  00000000  0005e800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001773  00000000  00000000  00060600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000a65b  00000000  00000000  00061d73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002347d  00000000  00000000  0006c3ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f2ea9  00000000  00000000  0008f84b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000977c  00000000  00000000  001826f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0018be70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08014e10 	.word	0x08014e10

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	08014e10 	.word	0x08014e10

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b970 	b.w	8000f60 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	460d      	mov	r5, r1
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	460f      	mov	r7, r1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d14a      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4694      	mov	ip, r2
 8000cac:	d965      	bls.n	8000d7a <__udivmoddi4+0xe2>
 8000cae:	fab2 f382 	clz	r3, r2
 8000cb2:	b143      	cbz	r3, 8000cc6 <__udivmoddi4+0x2e>
 8000cb4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cb8:	f1c3 0220 	rsb	r2, r3, #32
 8000cbc:	409f      	lsls	r7, r3
 8000cbe:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc2:	4317      	orrs	r7, r2
 8000cc4:	409c      	lsls	r4, r3
 8000cc6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cca:	fa1f f58c 	uxth.w	r5, ip
 8000cce:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cd2:	0c22      	lsrs	r2, r4, #16
 8000cd4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cd8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cdc:	fb01 f005 	mul.w	r0, r1, r5
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	d90a      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ce8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cec:	f080 811c 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	f240 8119 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4462      	add	r2, ip
 8000cfa:	1a12      	subs	r2, r2, r0
 8000cfc:	b2a4      	uxth	r4, r4
 8000cfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0a:	fb00 f505 	mul.w	r5, r0, r5
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	d90a      	bls.n	8000d28 <__udivmoddi4+0x90>
 8000d12:	eb1c 0404 	adds.w	r4, ip, r4
 8000d16:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1a:	f080 8107 	bcs.w	8000f2c <__udivmoddi4+0x294>
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	f240 8104 	bls.w	8000f2c <__udivmoddi4+0x294>
 8000d24:	4464      	add	r4, ip
 8000d26:	3802      	subs	r0, #2
 8000d28:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2c:	1b64      	subs	r4, r4, r5
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b11e      	cbz	r6, 8000d3a <__udivmoddi4+0xa2>
 8000d32:	40dc      	lsrs	r4, r3
 8000d34:	2300      	movs	r3, #0
 8000d36:	e9c6 4300 	strd	r4, r3, [r6]
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0xbc>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80ed 	beq.w	8000f22 <__udivmoddi4+0x28a>
 8000d48:	2100      	movs	r1, #0
 8000d4a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d54:	fab3 f183 	clz	r1, r3
 8000d58:	2900      	cmp	r1, #0
 8000d5a:	d149      	bne.n	8000df0 <__udivmoddi4+0x158>
 8000d5c:	42ab      	cmp	r3, r5
 8000d5e:	d302      	bcc.n	8000d66 <__udivmoddi4+0xce>
 8000d60:	4282      	cmp	r2, r0
 8000d62:	f200 80f8 	bhi.w	8000f56 <__udivmoddi4+0x2be>
 8000d66:	1a84      	subs	r4, r0, r2
 8000d68:	eb65 0203 	sbc.w	r2, r5, r3
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	4617      	mov	r7, r2
 8000d70:	2e00      	cmp	r6, #0
 8000d72:	d0e2      	beq.n	8000d3a <__udivmoddi4+0xa2>
 8000d74:	e9c6 4700 	strd	r4, r7, [r6]
 8000d78:	e7df      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d7a:	b902      	cbnz	r2, 8000d7e <__udivmoddi4+0xe6>
 8000d7c:	deff      	udf	#255	; 0xff
 8000d7e:	fab2 f382 	clz	r3, r2
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f040 8090 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d88:	1a8a      	subs	r2, r1, r2
 8000d8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8e:	fa1f fe8c 	uxth.w	lr, ip
 8000d92:	2101      	movs	r1, #1
 8000d94:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d98:	fb07 2015 	mls	r0, r7, r5, r2
 8000d9c:	0c22      	lsrs	r2, r4, #16
 8000d9e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000da2:	fb0e f005 	mul.w	r0, lr, r5
 8000da6:	4290      	cmp	r0, r2
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000daa:	eb1c 0202 	adds.w	r2, ip, r2
 8000dae:	f105 38ff 	add.w	r8, r5, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4290      	cmp	r0, r2
 8000db6:	f200 80cb 	bhi.w	8000f50 <__udivmoddi4+0x2b8>
 8000dba:	4645      	mov	r5, r8
 8000dbc:	1a12      	subs	r2, r2, r0
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dc4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dc8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dcc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd0:	45a6      	cmp	lr, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x14e>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ddc:	d202      	bcs.n	8000de4 <__udivmoddi4+0x14c>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	f200 80bb 	bhi.w	8000f5a <__udivmoddi4+0x2c2>
 8000de4:	4610      	mov	r0, r2
 8000de6:	eba4 040e 	sub.w	r4, r4, lr
 8000dea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dee:	e79f      	b.n	8000d30 <__udivmoddi4+0x98>
 8000df0:	f1c1 0720 	rsb	r7, r1, #32
 8000df4:	408b      	lsls	r3, r1
 8000df6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dfa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dfe:	fa05 f401 	lsl.w	r4, r5, r1
 8000e02:	fa20 f307 	lsr.w	r3, r0, r7
 8000e06:	40fd      	lsrs	r5, r7
 8000e08:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e0c:	4323      	orrs	r3, r4
 8000e0e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e12:	fa1f fe8c 	uxth.w	lr, ip
 8000e16:	fb09 5518 	mls	r5, r9, r8, r5
 8000e1a:	0c1c      	lsrs	r4, r3, #16
 8000e1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e20:	fb08 f50e 	mul.w	r5, r8, lr
 8000e24:	42a5      	cmp	r5, r4
 8000e26:	fa02 f201 	lsl.w	r2, r2, r1
 8000e2a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e38:	f080 8088 	bcs.w	8000f4c <__udivmoddi4+0x2b4>
 8000e3c:	42a5      	cmp	r5, r4
 8000e3e:	f240 8085 	bls.w	8000f4c <__udivmoddi4+0x2b4>
 8000e42:	f1a8 0802 	sub.w	r8, r8, #2
 8000e46:	4464      	add	r4, ip
 8000e48:	1b64      	subs	r4, r4, r5
 8000e4a:	b29d      	uxth	r5, r3
 8000e4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e50:	fb09 4413 	mls	r4, r9, r3, r4
 8000e54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e68:	d26c      	bcs.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	d96a      	bls.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6e:	3b02      	subs	r3, #2
 8000e70:	4464      	add	r4, ip
 8000e72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e76:	fba3 9502 	umull	r9, r5, r3, r2
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	42ac      	cmp	r4, r5
 8000e80:	46c8      	mov	r8, r9
 8000e82:	46ae      	mov	lr, r5
 8000e84:	d356      	bcc.n	8000f34 <__udivmoddi4+0x29c>
 8000e86:	d053      	beq.n	8000f30 <__udivmoddi4+0x298>
 8000e88:	b156      	cbz	r6, 8000ea0 <__udivmoddi4+0x208>
 8000e8a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e8e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e92:	fa04 f707 	lsl.w	r7, r4, r7
 8000e96:	40ca      	lsrs	r2, r1
 8000e98:	40cc      	lsrs	r4, r1
 8000e9a:	4317      	orrs	r7, r2
 8000e9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea8:	f1c3 0120 	rsb	r1, r3, #32
 8000eac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eb0:	fa20 f201 	lsr.w	r2, r0, r1
 8000eb4:	fa25 f101 	lsr.w	r1, r5, r1
 8000eb8:	409d      	lsls	r5, r3
 8000eba:	432a      	orrs	r2, r5
 8000ebc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec0:	fa1f fe8c 	uxth.w	lr, ip
 8000ec4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ec8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ed2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ed6:	428d      	cmp	r5, r1
 8000ed8:	fa04 f403 	lsl.w	r4, r4, r3
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x258>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ee6:	d22f      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000ee8:	428d      	cmp	r5, r1
 8000eea:	d92d      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000eec:	3802      	subs	r0, #2
 8000eee:	4461      	add	r1, ip
 8000ef0:	1b49      	subs	r1, r1, r5
 8000ef2:	b292      	uxth	r2, r2
 8000ef4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ef8:	fb07 1115 	mls	r1, r7, r5, r1
 8000efc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f00:	fb05 f10e 	mul.w	r1, r5, lr
 8000f04:	4291      	cmp	r1, r2
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x282>
 8000f08:	eb1c 0202 	adds.w	r2, ip, r2
 8000f0c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f10:	d216      	bcs.n	8000f40 <__udivmoddi4+0x2a8>
 8000f12:	4291      	cmp	r1, r2
 8000f14:	d914      	bls.n	8000f40 <__udivmoddi4+0x2a8>
 8000f16:	3d02      	subs	r5, #2
 8000f18:	4462      	add	r2, ip
 8000f1a:	1a52      	subs	r2, r2, r1
 8000f1c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f20:	e738      	b.n	8000d94 <__udivmoddi4+0xfc>
 8000f22:	4631      	mov	r1, r6
 8000f24:	4630      	mov	r0, r6
 8000f26:	e708      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000f28:	4639      	mov	r1, r7
 8000f2a:	e6e6      	b.n	8000cfa <__udivmoddi4+0x62>
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	e6fb      	b.n	8000d28 <__udivmoddi4+0x90>
 8000f30:	4548      	cmp	r0, r9
 8000f32:	d2a9      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f34:	ebb9 0802 	subs.w	r8, r9, r2
 8000f38:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	e7a3      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f40:	4645      	mov	r5, r8
 8000f42:	e7ea      	b.n	8000f1a <__udivmoddi4+0x282>
 8000f44:	462b      	mov	r3, r5
 8000f46:	e794      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f48:	4640      	mov	r0, r8
 8000f4a:	e7d1      	b.n	8000ef0 <__udivmoddi4+0x258>
 8000f4c:	46d0      	mov	r8, sl
 8000f4e:	e77b      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f50:	3d02      	subs	r5, #2
 8000f52:	4462      	add	r2, ip
 8000f54:	e732      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e70a      	b.n	8000d70 <__udivmoddi4+0xd8>
 8000f5a:	4464      	add	r4, ip
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	e742      	b.n	8000de6 <__udivmoddi4+0x14e>

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	4619      	mov	r1, r3
 8000f72:	2007      	movs	r0, #7
 8000f74:	f001 fb90 	bl	8002698 <bno055_writeData>
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	203d      	movs	r0, #61	; 0x3d
 8000f90:	f001 fb82 	bl	8002698 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d103      	bne.n	8000fa2 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8000f9a:	2013      	movs	r0, #19
 8000f9c:	f001 fb70 	bl	8002680 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8000fa0:	e002      	b.n	8000fa8 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8000fa2:	2007      	movs	r0, #7
 8000fa4:	f001 fb6c 	bl	8002680 <bno055_delay>
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	f7ff ffe3 	bl	8000f80 <bno055_setOperationMode>
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8000fc2:	200c      	movs	r0, #12
 8000fc4:	f7ff ffdc 	bl	8000f80 <bno055_setOperationMode>
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8000fd0:	2120      	movs	r1, #32
 8000fd2:	203f      	movs	r0, #63	; 0x3f
 8000fd4:	f001 fb60 	bl	8002698 <bno055_writeData>
  bno055_delay(700);
 8000fd8:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000fdc:	f001 fb50 	bl	8002680 <bno055_delay>
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
  bno055_reset();
 8000fea:	f7ff ffef 	bl	8000fcc <bno055_reset>

  uint8_t id = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8000ff2:	1dfb      	adds	r3, r7, #7
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f001 fc39 	bl	8002870 <bno055_readData>
  if (id != BNO055_ID) {
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2ba0      	cmp	r3, #160	; 0xa0
 8001002:	d004      	beq.n	800100e <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	4619      	mov	r1, r3
 8001008:	4809      	ldr	r0, [pc, #36]	; (8001030 <bno055_setup+0x4c>)
 800100a:	f011 fd0d 	bl	8012a28 <iprintf>
  }
  bno055_setPage(0);
 800100e:	2000      	movs	r0, #0
 8001010:	f7ff ffa8 	bl	8000f64 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8001014:	2100      	movs	r1, #0
 8001016:	203f      	movs	r0, #63	; 0x3f
 8001018:	f001 fb3e 	bl	8002698 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 800101c:	f7ff ffc8 	bl	8000fb0 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8001020:	200a      	movs	r0, #10
 8001022:	f001 fb2d 	bl	8002680 <bno055_delay>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	08014e28 	.word	0x08014e28

08001034 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8001034:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001038:	b09e      	sub	sp, #120	; 0x78
 800103a:	af00      	add	r7, sp, #0
 800103c:	4603      	mov	r3, r0
 800103e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 8001042:	2000      	movs	r0, #0
 8001044:	f7ff ff8e 	bl	8000f64 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8001048:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800104c:	2b20      	cmp	r3, #32
 800104e:	d108      	bne.n	8001062 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8001050:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001054:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001058:	2208      	movs	r2, #8
 800105a:	4618      	mov	r0, r3
 800105c:	f001 fc08 	bl	8002870 <bno055_readData>
 8001060:	e007      	b.n	8001072 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8001062:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001066:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800106a:	2206      	movs	r2, #6
 800106c:	4618      	mov	r0, r3
 800106e:	f001 fbff 	bl	8002870 <bno055_readData>

  double scale = 1;
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	4b8b      	ldr	r3, [pc, #556]	; (80012a4 <bno055_getVector+0x270>)
 8001078:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 800107c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001080:	2b0e      	cmp	r3, #14
 8001082:	d109      	bne.n	8001098 <bno055_getVector+0x64>
    scale = magScale;
 8001084:	4b88      	ldr	r3, [pc, #544]	; (80012a8 <bno055_getVector+0x274>)
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fa4b 	bl	8000524 <__aeabi_ui2d>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8001096:	e03e      	b.n	8001116 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8001098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800109c:	2b08      	cmp	r3, #8
 800109e:	d007      	beq.n	80010b0 <bno055_getVector+0x7c>
 80010a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010a4:	2b28      	cmp	r3, #40	; 0x28
 80010a6:	d003      	beq.n	80010b0 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 80010a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010ac:	2b2e      	cmp	r3, #46	; 0x2e
 80010ae:	d109      	bne.n	80010c4 <bno055_getVector+0x90>
    scale = accelScale;
 80010b0:	4b7e      	ldr	r3, [pc, #504]	; (80012ac <bno055_getVector+0x278>)
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff fa35 	bl	8000524 <__aeabi_ui2d>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80010c2:	e028      	b.n	8001116 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 80010c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010c8:	2b14      	cmp	r3, #20
 80010ca:	d109      	bne.n	80010e0 <bno055_getVector+0xac>
    scale = angularRateScale;
 80010cc:	4b78      	ldr	r3, [pc, #480]	; (80012b0 <bno055_getVector+0x27c>)
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff fa27 	bl	8000524 <__aeabi_ui2d>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80010de:	e01a      	b.n	8001116 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 80010e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010e4:	2b1a      	cmp	r3, #26
 80010e6:	d109      	bne.n	80010fc <bno055_getVector+0xc8>
    scale = eulerScale;
 80010e8:	4b72      	ldr	r3, [pc, #456]	; (80012b4 <bno055_getVector+0x280>)
 80010ea:	881b      	ldrh	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fa19 	bl	8000524 <__aeabi_ui2d>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80010fa:	e00c      	b.n	8001116 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 80010fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001100:	2b20      	cmp	r3, #32
 8001102:	d108      	bne.n	8001116 <bno055_getVector+0xe2>
    scale = quaScale;
 8001104:	4b6c      	ldr	r3, [pc, #432]	; (80012b8 <bno055_getVector+0x284>)
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fa0b 	bl	8000524 <__aeabi_ui2d>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8001116:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800111a:	2220      	movs	r2, #32
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f011 fde8 	bl	8012cf4 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8001124:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001128:	2b20      	cmp	r3, #32
 800112a:	d150      	bne.n	80011ce <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 800112c:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	b21a      	sxth	r2, r3
 8001134:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001138:	b21b      	sxth	r3, r3
 800113a:	4313      	orrs	r3, r2
 800113c:	b21b      	sxth	r3, r3
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fa00 	bl	8000544 <__aeabi_i2d>
 8001144:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001148:	f7ff fb90 	bl	800086c <__aeabi_ddiv>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001154:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	b21a      	sxth	r2, r3
 800115c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001160:	b21b      	sxth	r3, r3
 8001162:	4313      	orrs	r3, r2
 8001164:	b21b      	sxth	r3, r3
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff f9ec 	bl	8000544 <__aeabi_i2d>
 800116c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001170:	f7ff fb7c 	bl	800086c <__aeabi_ddiv>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 800117c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001180:	021b      	lsls	r3, r3, #8
 8001182:	b21a      	sxth	r2, r3
 8001184:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001188:	b21b      	sxth	r3, r3
 800118a:	4313      	orrs	r3, r2
 800118c:	b21b      	sxth	r3, r3
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff f9d8 	bl	8000544 <__aeabi_i2d>
 8001194:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001198:	f7ff fb68 	bl	800086c <__aeabi_ddiv>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 80011a4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	b21a      	sxth	r2, r3
 80011ac:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80011b0:	b21b      	sxth	r3, r3
 80011b2:	4313      	orrs	r3, r2
 80011b4:	b21b      	sxth	r3, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f9c4 	bl	8000544 <__aeabi_i2d>
 80011bc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80011c0:	f7ff fb54 	bl	800086c <__aeabi_ddiv>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80011cc:	e03b      	b.n	8001246 <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80011ce:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80011d2:	021b      	lsls	r3, r3, #8
 80011d4:	b21a      	sxth	r2, r3
 80011d6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80011da:	b21b      	sxth	r3, r3
 80011dc:	4313      	orrs	r3, r2
 80011de:	b21b      	sxth	r3, r3
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff f9af 	bl	8000544 <__aeabi_i2d>
 80011e6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80011ea:	f7ff fb3f 	bl	800086c <__aeabi_ddiv>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80011f6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80011fa:	021b      	lsls	r3, r3, #8
 80011fc:	b21a      	sxth	r2, r3
 80011fe:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001202:	b21b      	sxth	r3, r3
 8001204:	4313      	orrs	r3, r2
 8001206:	b21b      	sxth	r3, r3
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f99b 	bl	8000544 <__aeabi_i2d>
 800120e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001212:	f7ff fb2b 	bl	800086c <__aeabi_ddiv>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 800121e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001222:	021b      	lsls	r3, r3, #8
 8001224:	b21a      	sxth	r2, r3
 8001226:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800122a:	b21b      	sxth	r3, r3
 800122c:	4313      	orrs	r3, r2
 800122e:	b21b      	sxth	r3, r3
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f987 	bl	8000544 <__aeabi_i2d>
 8001236:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800123a:	f7ff fb17 	bl	800086c <__aeabi_ddiv>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 8001246:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800124a:	f107 0528 	add.w	r5, r7, #40	; 0x28
 800124e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001250:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001252:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001256:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800125a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800125e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001262:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001266:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800126a:	ec49 8b14 	vmov	d4, r8, r9
 800126e:	ec45 4b15 	vmov	d5, r4, r5
 8001272:	ec41 0b16 	vmov	d6, r0, r1
 8001276:	ec43 2b17 	vmov	d7, r2, r3
}
 800127a:	eeb0 0a44 	vmov.f32	s0, s8
 800127e:	eef0 0a64 	vmov.f32	s1, s9
 8001282:	eeb0 1a45 	vmov.f32	s2, s10
 8001286:	eef0 1a65 	vmov.f32	s3, s11
 800128a:	eeb0 2a46 	vmov.f32	s4, s12
 800128e:	eef0 2a66 	vmov.f32	s5, s13
 8001292:	eeb0 3a47 	vmov.f32	s6, s14
 8001296:	eef0 3a67 	vmov.f32	s7, s15
 800129a:	3778      	adds	r7, #120	; 0x78
 800129c:	46bd      	mov	sp, r7
 800129e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80012a2:	bf00      	nop
 80012a4:	3ff00000 	.word	0x3ff00000
 80012a8:	20000006 	.word	0x20000006
 80012ac:	20000000 	.word	0x20000000
 80012b0:	20000002 	.word	0x20000002
 80012b4:	20000004 	.word	0x20000004
 80012b8:	20000008 	.word	0x20000008

080012bc <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 80012bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012c0:	b090      	sub	sp, #64	; 0x40
 80012c2:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 80012c4:	201a      	movs	r0, #26
 80012c6:	f7ff feb5 	bl	8001034 <bno055_getVector>
 80012ca:	eeb0 4a40 	vmov.f32	s8, s0
 80012ce:	eef0 4a60 	vmov.f32	s9, s1
 80012d2:	eeb0 5a41 	vmov.f32	s10, s2
 80012d6:	eef0 5a61 	vmov.f32	s11, s3
 80012da:	eeb0 6a42 	vmov.f32	s12, s4
 80012de:	eef0 6a62 	vmov.f32	s13, s5
 80012e2:	eeb0 7a43 	vmov.f32	s14, s6
 80012e6:	eef0 7a63 	vmov.f32	s15, s7
 80012ea:	ed87 4b08 	vstr	d4, [r7, #32]
 80012ee:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 80012f2:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 80012f6:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 80012fa:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80012fe:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001302:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001306:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800130a:	ec49 8b14 	vmov	d4, r8, r9
 800130e:	ec45 4b15 	vmov	d5, r4, r5
 8001312:	ec41 0b16 	vmov	d6, r0, r1
 8001316:	ec43 2b17 	vmov	d7, r2, r3
}
 800131a:	eeb0 0a44 	vmov.f32	s0, s8
 800131e:	eef0 0a64 	vmov.f32	s1, s9
 8001322:	eeb0 1a45 	vmov.f32	s2, s10
 8001326:	eef0 1a65 	vmov.f32	s3, s11
 800132a:	eeb0 2a46 	vmov.f32	s4, s12
 800132e:	eef0 2a66 	vmov.f32	s5, s13
 8001332:	eeb0 3a47 	vmov.f32	s6, s14
 8001336:	eef0 3a67 	vmov.f32	s7, s15
 800133a:	3740      	adds	r7, #64	; 0x40
 800133c:	46bd      	mov	sp, r7
 800133e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001342 <bno055_getVectorLinearAccel>:
bno055_vector_t bno055_getVectorLinearAccel() {
 8001342:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001346:	b090      	sub	sp, #64	; 0x40
 8001348:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
 800134a:	2028      	movs	r0, #40	; 0x28
 800134c:	f7ff fe72 	bl	8001034 <bno055_getVector>
 8001350:	eeb0 4a40 	vmov.f32	s8, s0
 8001354:	eef0 4a60 	vmov.f32	s9, s1
 8001358:	eeb0 5a41 	vmov.f32	s10, s2
 800135c:	eef0 5a61 	vmov.f32	s11, s3
 8001360:	eeb0 6a42 	vmov.f32	s12, s4
 8001364:	eef0 6a62 	vmov.f32	s13, s5
 8001368:	eeb0 7a43 	vmov.f32	s14, s6
 800136c:	eef0 7a63 	vmov.f32	s15, s7
 8001370:	ed87 4b08 	vstr	d4, [r7, #32]
 8001374:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8001378:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 800137c:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8001380:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001384:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001388:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800138c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001390:	ec49 8b14 	vmov	d4, r8, r9
 8001394:	ec45 4b15 	vmov	d5, r4, r5
 8001398:	ec41 0b16 	vmov	d6, r0, r1
 800139c:	ec43 2b17 	vmov	d7, r2, r3
}
 80013a0:	eeb0 0a44 	vmov.f32	s0, s8
 80013a4:	eef0 0a64 	vmov.f32	s1, s9
 80013a8:	eeb0 1a45 	vmov.f32	s2, s10
 80013ac:	eef0 1a65 	vmov.f32	s3, s11
 80013b0:	eeb0 2a46 	vmov.f32	s4, s12
 80013b4:	eef0 2a66 	vmov.f32	s5, s13
 80013b8:	eeb0 3a47 	vmov.f32	s6, s14
 80013bc:	eef0 3a67 	vmov.f32	s7, s15
 80013c0:	3740      	adds	r7, #64	; 0x40
 80013c2:	46bd      	mov	sp, r7
 80013c4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080013c8 <bno055_getVectorQuaternion>:
bno055_vector_t bno055_getVectorGravity() {
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
}
bno055_vector_t bno055_getVectorQuaternion() {
 80013c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013cc:	b090      	sub	sp, #64	; 0x40
 80013ce:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_QUATERNION);
 80013d0:	2020      	movs	r0, #32
 80013d2:	f7ff fe2f 	bl	8001034 <bno055_getVector>
 80013d6:	eeb0 4a40 	vmov.f32	s8, s0
 80013da:	eef0 4a60 	vmov.f32	s9, s1
 80013de:	eeb0 5a41 	vmov.f32	s10, s2
 80013e2:	eef0 5a61 	vmov.f32	s11, s3
 80013e6:	eeb0 6a42 	vmov.f32	s12, s4
 80013ea:	eef0 6a62 	vmov.f32	s13, s5
 80013ee:	eeb0 7a43 	vmov.f32	s14, s6
 80013f2:	eef0 7a63 	vmov.f32	s15, s7
 80013f6:	ed87 4b08 	vstr	d4, [r7, #32]
 80013fa:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 80013fe:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8001402:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8001406:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800140a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800140e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001412:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001416:	ec49 8b14 	vmov	d4, r8, r9
 800141a:	ec45 4b15 	vmov	d5, r4, r5
 800141e:	ec41 0b16 	vmov	d6, r0, r1
 8001422:	ec43 2b17 	vmov	d7, r2, r3
}
 8001426:	eeb0 0a44 	vmov.f32	s0, s8
 800142a:	eef0 0a64 	vmov.f32	s1, s9
 800142e:	eeb0 1a45 	vmov.f32	s2, s10
 8001432:	eef0 1a65 	vmov.f32	s3, s11
 8001436:	eeb0 2a46 	vmov.f32	s4, s12
 800143a:	eef0 2a66 	vmov.f32	s5, s13
 800143e:	eeb0 3a47 	vmov.f32	s6, s14
 8001442:	eef0 3a67 	vmov.f32	s7, s15
 8001446:	3740      	adds	r7, #64	; 0x40
 8001448:	46bd      	mov	sp, r7
 800144a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001450 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af02      	add	r7, sp, #8
 8001456:	4603      	mov	r3, r0
 8001458:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	f023 030f 	bic.w	r3, r3, #15
 8001460:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	011b      	lsls	r3, r3, #4
 8001466:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	f043 030c 	orr.w	r3, r3, #12
 800146e:	b2db      	uxtb	r3, r3
 8001470:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	f043 0308 	orr.w	r3, r3, #8
 8001478:	b2db      	uxtb	r3, r3
 800147a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800147c:	7bbb      	ldrb	r3, [r7, #14]
 800147e:	f043 030c 	orr.w	r3, r3, #12
 8001482:	b2db      	uxtb	r3, r3
 8001484:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001486:	7bbb      	ldrb	r3, [r7, #14]
 8001488:	f043 0308 	orr.w	r3, r3, #8
 800148c:	b2db      	uxtb	r3, r3
 800148e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001490:	f107 0208 	add.w	r2, r7, #8
 8001494:	2364      	movs	r3, #100	; 0x64
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	2304      	movs	r3, #4
 800149a:	214e      	movs	r1, #78	; 0x4e
 800149c:	4803      	ldr	r0, [pc, #12]	; (80014ac <lcd_send_cmd+0x5c>)
 800149e:	f008 fa07 	bl	80098b0 <HAL_I2C_Master_Transmit>
}
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000298 	.word	0x20000298

080014b0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af02      	add	r7, sp, #8
 80014b6:	4603      	mov	r3, r0
 80014b8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	f023 030f 	bic.w	r3, r3, #15
 80014c0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	011b      	lsls	r3, r3, #4
 80014c6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	f043 030d 	orr.w	r3, r3, #13
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	f043 0309 	orr.w	r3, r3, #9
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80014dc:	7bbb      	ldrb	r3, [r7, #14]
 80014de:	f043 030d 	orr.w	r3, r3, #13
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80014e6:	7bbb      	ldrb	r3, [r7, #14]
 80014e8:	f043 0309 	orr.w	r3, r3, #9
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80014f0:	f107 0208 	add.w	r2, r7, #8
 80014f4:	2364      	movs	r3, #100	; 0x64
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	2304      	movs	r3, #4
 80014fa:	214e      	movs	r1, #78	; 0x4e
 80014fc:	4803      	ldr	r0, [pc, #12]	; (800150c <lcd_send_data+0x5c>)
 80014fe:	f008 f9d7 	bl	80098b0 <HAL_I2C_Master_Transmit>
}
 8001502:	bf00      	nop
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000298 	.word	0x20000298

08001510 <lcd_clear>:

void lcd_clear (void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x00);
 8001516:	2000      	movs	r0, #0
 8001518:	f7ff ff9a 	bl	8001450 <lcd_send_cmd>
	for (int i=0; i<100; i++)
 800151c:	2300      	movs	r3, #0
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	e005      	b.n	800152e <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8001522:	2020      	movs	r0, #32
 8001524:	f7ff ffc4 	bl	80014b0 <lcd_send_data>
	for (int i=0; i<100; i++)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3301      	adds	r3, #1
 800152c:	607b      	str	r3, [r7, #4]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2b63      	cmp	r3, #99	; 0x63
 8001532:	ddf6      	ble.n	8001522 <lcd_clear+0x12>
	}
}
 8001534:	bf00      	nop
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <lcd_init>:

void lcd_init (void)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	af00      	add	r7, sp, #0
	// 4 bit initialisation
//	HAL_Delay(50);  // wait for >40ms
	vTaskDelay(50);
 8001542:	2032      	movs	r0, #50	; 0x32
 8001544:	f00d f8a4 	bl	800e690 <vTaskDelay>
	lcd_send_cmd (0x30);
 8001548:	2030      	movs	r0, #48	; 0x30
 800154a:	f7ff ff81 	bl	8001450 <lcd_send_cmd>
//	HAL_Delay(5);  // wait for >4.1ms
	vTaskDelay(5);
 800154e:	2005      	movs	r0, #5
 8001550:	f00d f89e 	bl	800e690 <vTaskDelay>
	lcd_send_cmd (0x30);
 8001554:	2030      	movs	r0, #48	; 0x30
 8001556:	f7ff ff7b 	bl	8001450 <lcd_send_cmd>
//	HAL_Delay(1);  // wait for >100us
	vTaskDelay(1);
 800155a:	2001      	movs	r0, #1
 800155c:	f00d f898 	bl	800e690 <vTaskDelay>
	lcd_send_cmd (0x30);
 8001560:	2030      	movs	r0, #48	; 0x30
 8001562:	f7ff ff75 	bl	8001450 <lcd_send_cmd>
//	HAL_Delay(10);
	vTaskDelay(10);
 8001566:	200a      	movs	r0, #10
 8001568:	f00d f892 	bl	800e690 <vTaskDelay>
	lcd_send_cmd (0x20);  // 4bit mode
 800156c:	2020      	movs	r0, #32
 800156e:	f7ff ff6f 	bl	8001450 <lcd_send_cmd>
//	HAL_Delay(10);
	vTaskDelay(10);
 8001572:	200a      	movs	r0, #10
 8001574:	f00d f88c 	bl	800e690 <vTaskDelay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001578:	2028      	movs	r0, #40	; 0x28
 800157a:	f7ff ff69 	bl	8001450 <lcd_send_cmd>
//	HAL_Delay(1);
	vTaskDelay(1);
 800157e:	2001      	movs	r0, #1
 8001580:	f00d f886 	bl	800e690 <vTaskDelay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001584:	2008      	movs	r0, #8
 8001586:	f7ff ff63 	bl	8001450 <lcd_send_cmd>
//	HAL_Delay(1);
	vTaskDelay(1);
 800158a:	2001      	movs	r0, #1
 800158c:	f00d f880 	bl	800e690 <vTaskDelay>
	lcd_send_cmd (0x01);  // clear display
 8001590:	2001      	movs	r0, #1
 8001592:	f7ff ff5d 	bl	8001450 <lcd_send_cmd>
//	HAL_Delay(1);
	vTaskDelay(1);
 8001596:	2001      	movs	r0, #1
 8001598:	f00d f87a 	bl	800e690 <vTaskDelay>
//	HAL_Delay(1);
	vTaskDelay(1);
 800159c:	2001      	movs	r0, #1
 800159e:	f00d f877 	bl	800e690 <vTaskDelay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80015a2:	2006      	movs	r0, #6
 80015a4:	f7ff ff54 	bl	8001450 <lcd_send_cmd>
//	HAL_Delay(1);
	vTaskDelay(1);
 80015a8:	2001      	movs	r0, #1
 80015aa:	f00d f871 	bl	800e690 <vTaskDelay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80015ae:	200c      	movs	r0, #12
 80015b0:	f7ff ff4e 	bl	8001450 <lcd_send_cmd>
}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80015c0:	e006      	b.n	80015d0 <lcd_send_string+0x18>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	1c5a      	adds	r2, r3, #1
 80015c6:	607a      	str	r2, [r7, #4]
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff ff70 	bl	80014b0 <lcd_send_data>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1f4      	bne.n	80015c2 <lcd_send_string+0xa>
}
 80015d8:	bf00      	nop
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
	...

080015e4 <Lcd_send_int>:

void Lcd_send_int(int number) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	char buffer[11];
	sprintf(buffer, "%d", number);
 80015ec:	f107 030c 	add.w	r3, r7, #12
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	4906      	ldr	r1, [pc, #24]	; (800160c <Lcd_send_int+0x28>)
 80015f4:	4618      	mov	r0, r3
 80015f6:	f011 fa85 	bl	8012b04 <siprintf>
	lcd_send_string(buffer);
 80015fa:	f107 030c 	add.w	r3, r7, #12
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff ffda 	bl	80015b8 <lcd_send_string>
}
 8001604:	bf00      	nop
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	08014e64 	.word	0x08014e64

08001610 <ForwardKin>:
unsigned long prevTime;
double last_outDot[3];
float error_arrived; // Variable only kin.cpp


vector3Kin ForwardKin(float xStar, float yStar, float thStar){
 8001610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001614:	b08e      	sub	sp, #56	; 0x38
 8001616:	af00      	add	r7, sp, #0
 8001618:	ed87 0a07 	vstr	s0, [r7, #28]
 800161c:	edc7 0a06 	vstr	s1, [r7, #24]
 8001620:	ed87 1a05 	vstr	s2, [r7, #20]
	vector3Kin calOut = {
 8001624:	f04f 0300 	mov.w	r3, #0
 8001628:	623b      	str	r3, [r7, #32]
 800162a:	f04f 0300 	mov.w	r3, #0
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
 8001630:	f04f 0300 	mov.w	r3, #0
 8001634:	62bb      	str	r3, [r7, #40]	; 0x28
			.x = 0, .y = 0, .th = 0
	};

	outDot[0] = cos(d2r(yawVal)) * (cos(d2r(ENC_1)) * rpmExt[0] + cos(d2r(ENC_2)) * rpmExt[1] + cos(d2r(ENC_3)) * rpmExt[2]) +
 8001636:	4be2      	ldr	r3, [pc, #904]	; (80019c0 <ForwardKin+0x3b0>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f7fe ff82 	bl	8000544 <__aeabi_i2d>
 8001640:	a3d3      	add	r3, pc, #844	; (adr r3, 8001990 <ForwardKin+0x380>)
 8001642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001646:	f7fe ffe7 	bl	8000618 <__aeabi_dmul>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	ec43 2b17 	vmov	d7, r2, r3
 8001652:	eeb0 0a47 	vmov.f32	s0, s14
 8001656:	eef0 0a67 	vmov.f32	s1, s15
 800165a:	f00e fdad 	bl	80101b8 <cos>
 800165e:	ec5b ab10 	vmov	sl, fp, d0
 8001662:	4bd8      	ldr	r3, [pc, #864]	; (80019c4 <ForwardKin+0x3b4>)
 8001664:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001668:	4618      	mov	r0, r3
 800166a:	f7fe ff6b 	bl	8000544 <__aeabi_i2d>
 800166e:	a3ca      	add	r3, pc, #808	; (adr r3, 8001998 <ForwardKin+0x388>)
 8001670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001674:	f7fe ffd0 	bl	8000618 <__aeabi_dmul>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4690      	mov	r8, r2
 800167e:	4699      	mov	r9, r3
 8001680:	4bd0      	ldr	r3, [pc, #832]	; (80019c4 <ForwardKin+0x3b4>)
 8001682:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001686:	4618      	mov	r0, r3
 8001688:	f7fe ff5c 	bl	8000544 <__aeabi_i2d>
 800168c:	a3c4      	add	r3, pc, #784	; (adr r3, 80019a0 <ForwardKin+0x390>)
 800168e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001692:	f7fe ffc1 	bl	8000618 <__aeabi_dmul>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	4640      	mov	r0, r8
 800169c:	4649      	mov	r1, r9
 800169e:	f7fe fe05 	bl	80002ac <__adddf3>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	4690      	mov	r8, r2
 80016a8:	4699      	mov	r9, r3
 80016aa:	4bc6      	ldr	r3, [pc, #792]	; (80019c4 <ForwardKin+0x3b4>)
 80016ac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7fe ff47 	bl	8000544 <__aeabi_i2d>
 80016b6:	a3bc      	add	r3, pc, #752	; (adr r3, 80019a8 <ForwardKin+0x398>)
 80016b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016bc:	f7fe ffac 	bl	8000618 <__aeabi_dmul>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	4640      	mov	r0, r8
 80016c6:	4649      	mov	r1, r9
 80016c8:	f7fe fdf0 	bl	80002ac <__adddf3>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4650      	mov	r0, sl
 80016d2:	4659      	mov	r1, fp
 80016d4:	f7fe ffa0 	bl	8000618 <__aeabi_dmul>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4690      	mov	r8, r2
 80016de:	4699      	mov	r9, r3
				-sin(d2r(yawVal)) * (sin(d2r(ENC_1)) * rpmExt[0] + sin(d2r(ENC_2)) * rpmExt[1] + sin(d2r(ENC_3)) * rpmExt[2]); // X
 80016e0:	4bb7      	ldr	r3, [pc, #732]	; (80019c0 <ForwardKin+0x3b0>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe ff2d 	bl	8000544 <__aeabi_i2d>
 80016ea:	a3a9      	add	r3, pc, #676	; (adr r3, 8001990 <ForwardKin+0x380>)
 80016ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f0:	f7fe ff92 	bl	8000618 <__aeabi_dmul>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	ec43 2b17 	vmov	d7, r2, r3
 80016fc:	eeb0 0a47 	vmov.f32	s0, s14
 8001700:	eef0 0a67 	vmov.f32	s1, s15
 8001704:	f00e fdac 	bl	8010260 <sin>
 8001708:	ec53 2b10 	vmov	r2, r3, d0
 800170c:	4614      	mov	r4, r2
 800170e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001712:	4bac      	ldr	r3, [pc, #688]	; (80019c4 <ForwardKin+0x3b4>)
 8001714:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001718:	4618      	mov	r0, r3
 800171a:	f7fe ff13 	bl	8000544 <__aeabi_i2d>
 800171e:	a3a0      	add	r3, pc, #640	; (adr r3, 80019a0 <ForwardKin+0x390>)
 8001720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001724:	f7fe ff78 	bl	8000618 <__aeabi_dmul>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	4692      	mov	sl, r2
 800172e:	469b      	mov	fp, r3
 8001730:	4ba4      	ldr	r3, [pc, #656]	; (80019c4 <ForwardKin+0x3b4>)
 8001732:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001736:	4618      	mov	r0, r3
 8001738:	f7fe ff04 	bl	8000544 <__aeabi_i2d>
 800173c:	a39c      	add	r3, pc, #624	; (adr r3, 80019b0 <ForwardKin+0x3a0>)
 800173e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001742:	f7fe ff69 	bl	8000618 <__aeabi_dmul>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4650      	mov	r0, sl
 800174c:	4659      	mov	r1, fp
 800174e:	f7fe fdad 	bl	80002ac <__adddf3>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	4692      	mov	sl, r2
 8001758:	469b      	mov	fp, r3
 800175a:	4b9a      	ldr	r3, [pc, #616]	; (80019c4 <ForwardKin+0x3b4>)
 800175c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001760:	4618      	mov	r0, r3
 8001762:	f7fe feef 	bl	8000544 <__aeabi_i2d>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4650      	mov	r0, sl
 800176c:	4659      	mov	r1, fp
 800176e:	f7fe fd9b 	bl	80002a8 <__aeabi_dsub>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4620      	mov	r0, r4
 8001778:	4629      	mov	r1, r5
 800177a:	f7fe ff4d 	bl	8000618 <__aeabi_dmul>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
	outDot[0] = cos(d2r(yawVal)) * (cos(d2r(ENC_1)) * rpmExt[0] + cos(d2r(ENC_2)) * rpmExt[1] + cos(d2r(ENC_3)) * rpmExt[2]) +
 8001782:	4640      	mov	r0, r8
 8001784:	4649      	mov	r1, r9
 8001786:	f7fe fd91 	bl	80002ac <__adddf3>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4610      	mov	r0, r2
 8001790:	4619      	mov	r1, r3
 8001792:	f7ff fa19 	bl	8000bc8 <__aeabi_d2f>
 8001796:	4603      	mov	r3, r0
 8001798:	4a8b      	ldr	r2, [pc, #556]	; (80019c8 <ForwardKin+0x3b8>)
 800179a:	6013      	str	r3, [r2, #0]
	outDot[1] = sin(d2r(yawVal)) * (cos(d2r(ENC_1)) * rpmExt[0] + cos(d2r(ENC_2)) * rpmExt[1] + cos(d2r(ENC_3)) * rpmExt[2]) +
 800179c:	4b88      	ldr	r3, [pc, #544]	; (80019c0 <ForwardKin+0x3b0>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7fe fecf 	bl	8000544 <__aeabi_i2d>
 80017a6:	a37a      	add	r3, pc, #488	; (adr r3, 8001990 <ForwardKin+0x380>)
 80017a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ac:	f7fe ff34 	bl	8000618 <__aeabi_dmul>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	ec43 2b17 	vmov	d7, r2, r3
 80017b8:	eeb0 0a47 	vmov.f32	s0, s14
 80017bc:	eef0 0a67 	vmov.f32	s1, s15
 80017c0:	f00e fd4e 	bl	8010260 <sin>
 80017c4:	ec59 8b10 	vmov	r8, r9, d0
 80017c8:	4b7e      	ldr	r3, [pc, #504]	; (80019c4 <ForwardKin+0x3b4>)
 80017ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe feb8 	bl	8000544 <__aeabi_i2d>
 80017d4:	a370      	add	r3, pc, #448	; (adr r3, 8001998 <ForwardKin+0x388>)
 80017d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017da:	f7fe ff1d 	bl	8000618 <__aeabi_dmul>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4614      	mov	r4, r2
 80017e4:	461d      	mov	r5, r3
 80017e6:	4b77      	ldr	r3, [pc, #476]	; (80019c4 <ForwardKin+0x3b4>)
 80017e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7fe fea9 	bl	8000544 <__aeabi_i2d>
 80017f2:	a36b      	add	r3, pc, #428	; (adr r3, 80019a0 <ForwardKin+0x390>)
 80017f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f8:	f7fe ff0e 	bl	8000618 <__aeabi_dmul>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4620      	mov	r0, r4
 8001802:	4629      	mov	r1, r5
 8001804:	f7fe fd52 	bl	80002ac <__adddf3>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4614      	mov	r4, r2
 800180e:	461d      	mov	r5, r3
 8001810:	4b6c      	ldr	r3, [pc, #432]	; (80019c4 <ForwardKin+0x3b4>)
 8001812:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001816:	4618      	mov	r0, r3
 8001818:	f7fe fe94 	bl	8000544 <__aeabi_i2d>
 800181c:	a362      	add	r3, pc, #392	; (adr r3, 80019a8 <ForwardKin+0x398>)
 800181e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001822:	f7fe fef9 	bl	8000618 <__aeabi_dmul>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	4620      	mov	r0, r4
 800182c:	4629      	mov	r1, r5
 800182e:	f7fe fd3d 	bl	80002ac <__adddf3>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4640      	mov	r0, r8
 8001838:	4649      	mov	r1, r9
 800183a:	f7fe feed 	bl	8000618 <__aeabi_dmul>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4614      	mov	r4, r2
 8001844:	461d      	mov	r5, r3
				cos(d2r(yawVal)) * (sin(d2r(ENC_1)) * rpmExt[0] + sin(d2r(ENC_2)) * rpmExt[1] + sin(d2r(ENC_3)) * rpmExt[2]); // Y
 8001846:	4b5e      	ldr	r3, [pc, #376]	; (80019c0 <ForwardKin+0x3b0>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f7fe fe7a 	bl	8000544 <__aeabi_i2d>
 8001850:	a34f      	add	r3, pc, #316	; (adr r3, 8001990 <ForwardKin+0x380>)
 8001852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001856:	f7fe fedf 	bl	8000618 <__aeabi_dmul>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	ec43 2b17 	vmov	d7, r2, r3
 8001862:	eeb0 0a47 	vmov.f32	s0, s14
 8001866:	eef0 0a67 	vmov.f32	s1, s15
 800186a:	f00e fca5 	bl	80101b8 <cos>
 800186e:	ec5b ab10 	vmov	sl, fp, d0
 8001872:	4b54      	ldr	r3, [pc, #336]	; (80019c4 <ForwardKin+0x3b4>)
 8001874:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe fe63 	bl	8000544 <__aeabi_i2d>
 800187e:	a348      	add	r3, pc, #288	; (adr r3, 80019a0 <ForwardKin+0x390>)
 8001880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001884:	f7fe fec8 	bl	8000618 <__aeabi_dmul>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4690      	mov	r8, r2
 800188e:	4699      	mov	r9, r3
 8001890:	4b4c      	ldr	r3, [pc, #304]	; (80019c4 <ForwardKin+0x3b4>)
 8001892:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001896:	4618      	mov	r0, r3
 8001898:	f7fe fe54 	bl	8000544 <__aeabi_i2d>
 800189c:	a344      	add	r3, pc, #272	; (adr r3, 80019b0 <ForwardKin+0x3a0>)
 800189e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a2:	f7fe feb9 	bl	8000618 <__aeabi_dmul>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4640      	mov	r0, r8
 80018ac:	4649      	mov	r1, r9
 80018ae:	f7fe fcfd 	bl	80002ac <__adddf3>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4690      	mov	r8, r2
 80018b8:	4699      	mov	r9, r3
 80018ba:	4b42      	ldr	r3, [pc, #264]	; (80019c4 <ForwardKin+0x3b4>)
 80018bc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7fe fe3f 	bl	8000544 <__aeabi_i2d>
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	4640      	mov	r0, r8
 80018cc:	4649      	mov	r1, r9
 80018ce:	f7fe fceb 	bl	80002a8 <__aeabi_dsub>
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	4650      	mov	r0, sl
 80018d8:	4659      	mov	r1, fp
 80018da:	f7fe fe9d 	bl	8000618 <__aeabi_dmul>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
	outDot[1] = sin(d2r(yawVal)) * (cos(d2r(ENC_1)) * rpmExt[0] + cos(d2r(ENC_2)) * rpmExt[1] + cos(d2r(ENC_3)) * rpmExt[2]) +
 80018e2:	4620      	mov	r0, r4
 80018e4:	4629      	mov	r1, r5
 80018e6:	f7fe fce1 	bl	80002ac <__adddf3>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	4610      	mov	r0, r2
 80018f0:	4619      	mov	r1, r3
 80018f2:	f7ff f969 	bl	8000bc8 <__aeabi_d2f>
 80018f6:	4603      	mov	r3, r0
 80018f8:	4a33      	ldr	r2, [pc, #204]	; (80019c8 <ForwardKin+0x3b8>)
 80018fa:	6053      	str	r3, [r2, #4]
	outDot[2] = lengthAlpha * rpmExt[0] + lengthAlpha * rpmExt[1] + lengthAlpha * rpmExt[2]; // TH
 80018fc:	4b31      	ldr	r3, [pc, #196]	; (80019c4 <ForwardKin+0x3b4>)
 80018fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001902:	4618      	mov	r0, r3
 8001904:	f7fe fe1e 	bl	8000544 <__aeabi_i2d>
 8001908:	a32b      	add	r3, pc, #172	; (adr r3, 80019b8 <ForwardKin+0x3a8>)
 800190a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190e:	f7fe fe83 	bl	8000618 <__aeabi_dmul>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4614      	mov	r4, r2
 8001918:	461d      	mov	r5, r3
 800191a:	4b2a      	ldr	r3, [pc, #168]	; (80019c4 <ForwardKin+0x3b4>)
 800191c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001920:	4618      	mov	r0, r3
 8001922:	f7fe fe0f 	bl	8000544 <__aeabi_i2d>
 8001926:	a324      	add	r3, pc, #144	; (adr r3, 80019b8 <ForwardKin+0x3a8>)
 8001928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192c:	f7fe fe74 	bl	8000618 <__aeabi_dmul>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4620      	mov	r0, r4
 8001936:	4629      	mov	r1, r5
 8001938:	f7fe fcb8 	bl	80002ac <__adddf3>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4614      	mov	r4, r2
 8001942:	461d      	mov	r5, r3
 8001944:	4b1f      	ldr	r3, [pc, #124]	; (80019c4 <ForwardKin+0x3b4>)
 8001946:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800194a:	4618      	mov	r0, r3
 800194c:	f7fe fdfa 	bl	8000544 <__aeabi_i2d>
 8001950:	a319      	add	r3, pc, #100	; (adr r3, 80019b8 <ForwardKin+0x3a8>)
 8001952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001956:	f7fe fe5f 	bl	8000618 <__aeabi_dmul>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	4620      	mov	r0, r4
 8001960:	4629      	mov	r1, r5
 8001962:	f7fe fca3 	bl	80002ac <__adddf3>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	4610      	mov	r0, r2
 800196c:	4619      	mov	r1, r3
 800196e:	f7ff f92b 	bl	8000bc8 <__aeabi_d2f>
 8001972:	4603      	mov	r3, r0
 8001974:	4a14      	ldr	r2, [pc, #80]	; (80019c8 <ForwardKin+0x3b8>)
 8001976:	6093      	str	r3, [r2, #8]

	if(HAL_GetTick() - prevTime >= 100){
 8001978:	f006 ff4c 	bl	8008814 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	4b13      	ldr	r3, [pc, #76]	; (80019cc <ForwardKin+0x3bc>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b63      	cmp	r3, #99	; 0x63
 8001986:	bf8c      	ite	hi
 8001988:	2301      	movhi	r3, #1
 800198a:	2300      	movls	r3, #0
 800198c:	e020      	b.n	80019d0 <ForwardKin+0x3c0>
 800198e:	bf00      	nop
 8001990:	a2529d39 	.word	0xa2529d39
 8001994:	3f91df46 	.word	0x3f91df46
 8001998:	667f3bcc 	.word	0x667f3bcc
 800199c:	bfe6a09e 	.word	0xbfe6a09e
 80019a0:	667f3bcd 	.word	0x667f3bcd
 80019a4:	3fe6a09e 	.word	0x3fe6a09e
 80019a8:	33145c07 	.word	0x33145c07
 80019ac:	3c91a626 	.word	0x3c91a626
 80019b0:	667f3bcc 	.word	0x667f3bcc
 80019b4:	3fe6a09e 	.word	0x3fe6a09e
 80019b8:	70a3d70a 	.word	0x70a3d70a
 80019bc:	3fc70a3d 	.word	0x3fc70a3d
 80019c0:	20000214 	.word	0x20000214
 80019c4:	20000218 	.word	0x20000218
 80019c8:	20000220 	.word	0x20000220
 80019cc:	20000238 	.word	0x20000238
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d059      	beq.n	8001a8a <ForwardKin+0x47a>
		Aksen[0] = Aksen[0] + outDot[0] * 100 * scale1; // X
 80019d6:	4b4c      	ldr	r3, [pc, #304]	; (8001b08 <ForwardKin+0x4f8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7fe fdc4 	bl	8000568 <__aeabi_f2d>
 80019e0:	4604      	mov	r4, r0
 80019e2:	460d      	mov	r5, r1
 80019e4:	4b49      	ldr	r3, [pc, #292]	; (8001b0c <ForwardKin+0x4fc>)
 80019e6:	edd3 7a00 	vldr	s15, [r3]
 80019ea:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8001b10 <ForwardKin+0x500>
 80019ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019f2:	ee17 0a90 	vmov	r0, s15
 80019f6:	f7fe fdb7 	bl	8000568 <__aeabi_f2d>
 80019fa:	a33f      	add	r3, pc, #252	; (adr r3, 8001af8 <ForwardKin+0x4e8>)
 80019fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a00:	f7fe fe0a 	bl	8000618 <__aeabi_dmul>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4620      	mov	r0, r4
 8001a0a:	4629      	mov	r1, r5
 8001a0c:	f7fe fc4e 	bl	80002ac <__adddf3>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4610      	mov	r0, r2
 8001a16:	4619      	mov	r1, r3
 8001a18:	f7ff f8d6 	bl	8000bc8 <__aeabi_d2f>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	4a3a      	ldr	r2, [pc, #232]	; (8001b08 <ForwardKin+0x4f8>)
 8001a20:	6013      	str	r3, [r2, #0]
		Aksen[1] = Aksen[1] + outDot[1] * 100 * scale2; // Y
 8001a22:	4b39      	ldr	r3, [pc, #228]	; (8001b08 <ForwardKin+0x4f8>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7fe fd9e 	bl	8000568 <__aeabi_f2d>
 8001a2c:	4604      	mov	r4, r0
 8001a2e:	460d      	mov	r5, r1
 8001a30:	4b36      	ldr	r3, [pc, #216]	; (8001b0c <ForwardKin+0x4fc>)
 8001a32:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a36:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001b10 <ForwardKin+0x500>
 8001a3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a3e:	ee17 0a90 	vmov	r0, s15
 8001a42:	f7fe fd91 	bl	8000568 <__aeabi_f2d>
 8001a46:	a32e      	add	r3, pc, #184	; (adr r3, 8001b00 <ForwardKin+0x4f0>)
 8001a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4c:	f7fe fde4 	bl	8000618 <__aeabi_dmul>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4620      	mov	r0, r4
 8001a56:	4629      	mov	r1, r5
 8001a58:	f7fe fc28 	bl	80002ac <__adddf3>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4610      	mov	r0, r2
 8001a62:	4619      	mov	r1, r3
 8001a64:	f7ff f8b0 	bl	8000bc8 <__aeabi_d2f>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	4a27      	ldr	r2, [pc, #156]	; (8001b08 <ForwardKin+0x4f8>)
 8001a6c:	6053      	str	r3, [r2, #4]
	//	Aksen[2] = (Aksen[2] + outDot[2] * 100) * scale3; // theta
		Aksen[2] = yawVal; // theta diambil dari heading imu
 8001a6e:	4b29      	ldr	r3, [pc, #164]	; (8001b14 <ForwardKin+0x504>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	ee07 3a90 	vmov	s15, r3
 8001a76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a7a:	4b23      	ldr	r3, [pc, #140]	; (8001b08 <ForwardKin+0x4f8>)
 8001a7c:	edc3 7a02 	vstr	s15, [r3, #8]
		prevTime = HAL_GetTick();
 8001a80:	f006 fec8 	bl	8008814 <HAL_GetTick>
 8001a84:	4603      	mov	r3, r0
 8001a86:	4a24      	ldr	r2, [pc, #144]	; (8001b18 <ForwardKin+0x508>)
 8001a88:	6013      	str	r3, [r2, #0]
	}

	calOut.x = xStar - Aksen[0];
 8001a8a:	4b1f      	ldr	r3, [pc, #124]	; (8001b08 <ForwardKin+0x4f8>)
 8001a8c:	edd3 7a00 	vldr	s15, [r3]
 8001a90:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a98:	edc7 7a08 	vstr	s15, [r7, #32]
	calOut.y = yStar - Aksen[1];
 8001a9c:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <ForwardKin+0x4f8>)
 8001a9e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001aa2:	ed97 7a06 	vldr	s14, [r7, #24]
 8001aa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aaa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	calOut.th = thStar - Aksen[2];
 8001aae:	4b16      	ldr	r3, [pc, #88]	; (8001b08 <ForwardKin+0x4f8>)
 8001ab0:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ab4:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ab8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001abc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	return calOut;
 8001ac0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ac4:	f107 0220 	add.w	r2, r7, #32
 8001ac8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001aca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001ace:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ad4:	ee06 1a90 	vmov	s13, r1
 8001ad8:	ee07 2a10 	vmov	s14, r2
 8001adc:	ee07 3a90 	vmov	s15, r3
}
 8001ae0:	eeb0 0a66 	vmov.f32	s0, s13
 8001ae4:	eef0 0a47 	vmov.f32	s1, s14
 8001ae8:	eeb0 1a67 	vmov.f32	s2, s15
 8001aec:	3738      	adds	r7, #56	; 0x38
 8001aee:	46bd      	mov	sp, r7
 8001af0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001af4:	f3af 8000 	nop.w
 8001af8:	88dfb80c 	.word	0x88dfb80c
 8001afc:	3ecc2f8b 	.word	0x3ecc2f8b
 8001b00:	416f8bff 	.word	0x416f8bff
 8001b04:	3eba5719 	.word	0x3eba5719
 8001b08:	2000022c 	.word	0x2000022c
 8001b0c:	20000220 	.word	0x20000220
 8001b10:	42c80000 	.word	0x42c80000
 8001b14:	20000214 	.word	0x20000214
 8001b18:	20000238 	.word	0x20000238

08001b1c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8001b1c:	b5b0      	push	{r4, r5, r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b26:	6038      	str	r0, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f7fe fd1d 	bl	8000568 <__aeabi_f2d>
 8001b2e:	4604      	mov	r4, r0
 8001b30:	460d      	mov	r5, r1
 8001b32:	6838      	ldr	r0, [r7, #0]
 8001b34:	f7fe fd06 	bl	8000544 <__aeabi_i2d>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	ec43 2b11 	vmov	d1, r2, r3
 8001b40:	ec45 4b10 	vmov	d0, r4, r5
 8001b44:	f00e fa9a 	bl	801007c <pow>
 8001b48:	eeb0 7a40 	vmov.f32	s14, s0
 8001b4c:	eef0 7a60 	vmov.f32	s15, s1
    }
 8001b50:	eeb0 0a47 	vmov.f32	s0, s14
 8001b54:	eef0 0a67 	vmov.f32	s1, s15
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001b60 <InverseKin>:

MotorKin InverseKin(vector3Kin *calOut){
 8001b60:	b5b0      	push	{r4, r5, r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
	MotorKin mtr = {
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	2300      	movs	r3, #0
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	6053      	str	r3, [r2, #4]
 8001b74:	6093      	str	r3, [r2, #8]
 8001b76:	60d3      	str	r3, [r2, #12]
			.w1=0, .w2=0, .w3=0, .w4=0
	};

	error_arrived = sqrt(pow(calOut->x, 2) + pow(calOut->y, 2) + pow(calOut->th, 2));
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	edd3 7a00 	vldr	s15, [r3]
 8001b7e:	2002      	movs	r0, #2
 8001b80:	eeb0 0a67 	vmov.f32	s0, s15
 8001b84:	f7ff ffca 	bl	8001b1c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001b88:	ec55 4b10 	vmov	r4, r5, d0
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b92:	2002      	movs	r0, #2
 8001b94:	eeb0 0a67 	vmov.f32	s0, s15
 8001b98:	f7ff ffc0 	bl	8001b1c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001b9c:	ec53 2b10 	vmov	r2, r3, d0
 8001ba0:	4620      	mov	r0, r4
 8001ba2:	4629      	mov	r1, r5
 8001ba4:	f7fe fb82 	bl	80002ac <__adddf3>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4614      	mov	r4, r2
 8001bae:	461d      	mov	r5, r3
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bb6:	2002      	movs	r0, #2
 8001bb8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bbc:	f7ff ffae 	bl	8001b1c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001bc0:	ec53 2b10 	vmov	r2, r3, d0
 8001bc4:	4620      	mov	r0, r4
 8001bc6:	4629      	mov	r1, r5
 8001bc8:	f7fe fb70 	bl	80002ac <__adddf3>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	ec43 2b17 	vmov	d7, r2, r3
 8001bd4:	eeb0 0a47 	vmov.f32	s0, s14
 8001bd8:	eef0 0a67 	vmov.f32	s1, s15
 8001bdc:	f00e fabe 	bl	801015c <sqrt>
 8001be0:	ec53 2b10 	vmov	r2, r3, d0
 8001be4:	4610      	mov	r0, r2
 8001be6:	4619      	mov	r1, r3
 8001be8:	f7fe ffee 	bl	8000bc8 <__aeabi_d2f>
 8001bec:	4603      	mov	r3, r0
 8001bee:	4a1e      	ldr	r2, [pc, #120]	; (8001c68 <InverseKin+0x108>)
 8001bf0:	6013      	str	r3, [r2, #0]
	errorPub = error_arrived;
 8001bf2:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <InverseKin+0x108>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a1d      	ldr	r2, [pc, #116]	; (8001c6c <InverseKin+0x10c>)
 8001bf8:	6013      	str	r3, [r2, #0]

	if(error_arrived < 0.2)
 8001bfa:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <InverseKin+0x108>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe fcb2 	bl	8000568 <__aeabi_f2d>
 8001c04:	a316      	add	r3, pc, #88	; (adr r3, 8001c60 <InverseKin+0x100>)
 8001c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0a:	f7fe ff77 	bl	8000afc <__aeabi_dcmplt>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d00c      	beq.n	8001c2e <InverseKin+0xce>
	{
		calOut->x = 0;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	f04f 0200 	mov.w	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
		calOut->y = 0;
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	f04f 0200 	mov.w	r2, #0
 8001c22:	605a      	str	r2, [r3, #4]
		calOut->th = 0; // klo pake ini jgn lupa tambahin yg theta juga di normnya
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	609a      	str	r2, [r3, #8]
	else
	{
		kinMotor_V3(&mtr, calOut->x, calOut->y, calOut->th);
	}

	return mtr;
 8001c2c:	e011      	b.n	8001c52 <InverseKin+0xf2>
		kinMotor_V3(&mtr, calOut->x, calOut->y, calOut->th);
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	edd3 7a00 	vldr	s15, [r3]
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001c40:	eeb0 1a66 	vmov.f32	s2, s13
 8001c44:	eef0 0a47 	vmov.f32	s1, s14
 8001c48:	eeb0 0a67 	vmov.f32	s0, s15
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f80f 	bl	8001c70 <kinMotor_V3>
	return mtr;
 8001c52:	bf00      	nop
}
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c5c:	f3af 8000 	nop.w
 8001c60:	9999999a 	.word	0x9999999a
 8001c64:	3fc99999 	.word	0x3fc99999
 8001c68:	2000023c 	.word	0x2000023c
 8001c6c:	20000ae8 	.word	0x20000ae8

08001c70 <kinMotor_V3>:

void kinMotor_V3(MotorKin *mtrKin, float Ex, float Ey, float Eth)
{
 8001c70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c74:	b08a      	sub	sp, #40	; 0x28
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6278      	str	r0, [r7, #36]	; 0x24
 8001c7a:	ed87 0a08 	vstr	s0, [r7, #32]
 8001c7e:	edc7 0a07 	vstr	s1, [r7, #28]
 8001c82:	ed87 1a06 	vstr	s2, [r7, #24]
	mtrKin->w1 = (lambdaX * cos(d2r(135)) * (cos(d2r(yawVal)) * Ex + sin(d2r(yawVal)) * Ey)) +
 8001c86:	4be4      	ldr	r3, [pc, #912]	; (8002018 <kinMotor_V3+0x3a8>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7fe fc5a 	bl	8000544 <__aeabi_i2d>
 8001c90:	a3d7      	add	r3, pc, #860	; (adr r3, 8001ff0 <kinMotor_V3+0x380>)
 8001c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c96:	f7fe fcbf 	bl	8000618 <__aeabi_dmul>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	ec43 2b17 	vmov	d7, r2, r3
 8001ca2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ca6:	eef0 0a67 	vmov.f32	s1, s15
 8001caa:	f00e fa85 	bl	80101b8 <cos>
 8001cae:	ec55 4b10 	vmov	r4, r5, d0
 8001cb2:	6a38      	ldr	r0, [r7, #32]
 8001cb4:	f7fe fc58 	bl	8000568 <__aeabi_f2d>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4620      	mov	r0, r4
 8001cbe:	4629      	mov	r1, r5
 8001cc0:	f7fe fcaa 	bl	8000618 <__aeabi_dmul>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4614      	mov	r4, r2
 8001cca:	461d      	mov	r5, r3
 8001ccc:	4bd2      	ldr	r3, [pc, #840]	; (8002018 <kinMotor_V3+0x3a8>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7fe fc37 	bl	8000544 <__aeabi_i2d>
 8001cd6:	a3c6      	add	r3, pc, #792	; (adr r3, 8001ff0 <kinMotor_V3+0x380>)
 8001cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cdc:	f7fe fc9c 	bl	8000618 <__aeabi_dmul>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	ec43 2b17 	vmov	d7, r2, r3
 8001ce8:	eeb0 0a47 	vmov.f32	s0, s14
 8001cec:	eef0 0a67 	vmov.f32	s1, s15
 8001cf0:	f00e fab6 	bl	8010260 <sin>
 8001cf4:	ec5b ab10 	vmov	sl, fp, d0
 8001cf8:	69f8      	ldr	r0, [r7, #28]
 8001cfa:	f7fe fc35 	bl	8000568 <__aeabi_f2d>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4650      	mov	r0, sl
 8001d04:	4659      	mov	r1, fp
 8001d06:	f7fe fc87 	bl	8000618 <__aeabi_dmul>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	4620      	mov	r0, r4
 8001d10:	4629      	mov	r1, r5
 8001d12:	f7fe facb 	bl	80002ac <__adddf3>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	4610      	mov	r0, r2
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	a3b6      	add	r3, pc, #728	; (adr r3, 8001ff8 <kinMotor_V3+0x388>)
 8001d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d24:	f7fe fc78 	bl	8000618 <__aeabi_dmul>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4692      	mov	sl, r2
 8001d2e:	469b      	mov	fp, r3
				 (lambdaY * sin(d2r(135)) * (-sin(d2r(yawVal)) * Ex + cos(d2r(yawVal)) * Ey)) +
 8001d30:	4bb9      	ldr	r3, [pc, #740]	; (8002018 <kinMotor_V3+0x3a8>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7fe fc05 	bl	8000544 <__aeabi_i2d>
 8001d3a:	a3ad      	add	r3, pc, #692	; (adr r3, 8001ff0 <kinMotor_V3+0x380>)
 8001d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d40:	f7fe fc6a 	bl	8000618 <__aeabi_dmul>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	ec43 2b17 	vmov	d7, r2, r3
 8001d4c:	eeb0 0a47 	vmov.f32	s0, s14
 8001d50:	eef0 0a67 	vmov.f32	s1, s15
 8001d54:	f00e fa84 	bl	8010260 <sin>
 8001d58:	ec53 2b10 	vmov	r2, r3, d0
 8001d5c:	4690      	mov	r8, r2
 8001d5e:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001d62:	6a38      	ldr	r0, [r7, #32]
 8001d64:	f7fe fc00 	bl	8000568 <__aeabi_f2d>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	4640      	mov	r0, r8
 8001d6e:	4649      	mov	r1, r9
 8001d70:	f7fe fc52 	bl	8000618 <__aeabi_dmul>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4614      	mov	r4, r2
 8001d7a:	461d      	mov	r5, r3
 8001d7c:	4ba6      	ldr	r3, [pc, #664]	; (8002018 <kinMotor_V3+0x3a8>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe fbdf 	bl	8000544 <__aeabi_i2d>
 8001d86:	a39a      	add	r3, pc, #616	; (adr r3, 8001ff0 <kinMotor_V3+0x380>)
 8001d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8c:	f7fe fc44 	bl	8000618 <__aeabi_dmul>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	ec43 2b17 	vmov	d7, r2, r3
 8001d98:	eeb0 0a47 	vmov.f32	s0, s14
 8001d9c:	eef0 0a67 	vmov.f32	s1, s15
 8001da0:	f00e fa0a 	bl	80101b8 <cos>
 8001da4:	ec59 8b10 	vmov	r8, r9, d0
 8001da8:	69f8      	ldr	r0, [r7, #28]
 8001daa:	f7fe fbdd 	bl	8000568 <__aeabi_f2d>
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	4640      	mov	r0, r8
 8001db4:	4649      	mov	r1, r9
 8001db6:	f7fe fc2f 	bl	8000618 <__aeabi_dmul>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4620      	mov	r0, r4
 8001dc0:	4629      	mov	r1, r5
 8001dc2:	f7fe fa73 	bl	80002ac <__adddf3>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	4610      	mov	r0, r2
 8001dcc:	4619      	mov	r1, r3
 8001dce:	a38c      	add	r3, pc, #560	; (adr r3, 8002000 <kinMotor_V3+0x390>)
 8001dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd4:	f7fe fc20 	bl	8000618 <__aeabi_dmul>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
	mtrKin->w1 = (lambdaX * cos(d2r(135)) * (cos(d2r(yawVal)) * Ex + sin(d2r(yawVal)) * Ey)) +
 8001ddc:	4650      	mov	r0, sl
 8001dde:	4659      	mov	r1, fp
 8001de0:	f7fe fa64 	bl	80002ac <__adddf3>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4614      	mov	r4, r2
 8001dea:	461d      	mov	r5, r3
				 (lambdaTH * alphaLengthMotor * Eth);
 8001dec:	69b8      	ldr	r0, [r7, #24]
 8001dee:	f7fe fbbb 	bl	8000568 <__aeabi_f2d>
 8001df2:	a385      	add	r3, pc, #532	; (adr r3, 8002008 <kinMotor_V3+0x398>)
 8001df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df8:	f7fe fc0e 	bl	8000618 <__aeabi_dmul>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
				 (lambdaY * sin(d2r(135)) * (-sin(d2r(yawVal)) * Ex + cos(d2r(yawVal)) * Ey)) +
 8001e00:	4620      	mov	r0, r4
 8001e02:	4629      	mov	r1, r5
 8001e04:	f7fe fa52 	bl	80002ac <__adddf3>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
	mtrKin->w1 = (lambdaX * cos(d2r(135)) * (cos(d2r(yawVal)) * Ex + sin(d2r(yawVal)) * Ey)) +
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	4619      	mov	r1, r3
 8001e10:	f7fe feb2 	bl	8000b78 <__aeabi_d2iz>
 8001e14:	4602      	mov	r2, r0
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	601a      	str	r2, [r3, #0]
	mtrKin->w2 = (lambdaX * cos(d2r(-135)) * (cos(d2r(yawVal)) * Ex + sin(d2r(yawVal)) * Ey)) +
 8001e1a:	4b7f      	ldr	r3, [pc, #508]	; (8002018 <kinMotor_V3+0x3a8>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe fb90 	bl	8000544 <__aeabi_i2d>
 8001e24:	a372      	add	r3, pc, #456	; (adr r3, 8001ff0 <kinMotor_V3+0x380>)
 8001e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2a:	f7fe fbf5 	bl	8000618 <__aeabi_dmul>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	ec43 2b17 	vmov	d7, r2, r3
 8001e36:	eeb0 0a47 	vmov.f32	s0, s14
 8001e3a:	eef0 0a67 	vmov.f32	s1, s15
 8001e3e:	f00e f9bb 	bl	80101b8 <cos>
 8001e42:	ec55 4b10 	vmov	r4, r5, d0
 8001e46:	6a38      	ldr	r0, [r7, #32]
 8001e48:	f7fe fb8e 	bl	8000568 <__aeabi_f2d>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	4620      	mov	r0, r4
 8001e52:	4629      	mov	r1, r5
 8001e54:	f7fe fbe0 	bl	8000618 <__aeabi_dmul>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	4614      	mov	r4, r2
 8001e5e:	461d      	mov	r5, r3
 8001e60:	4b6d      	ldr	r3, [pc, #436]	; (8002018 <kinMotor_V3+0x3a8>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7fe fb6d 	bl	8000544 <__aeabi_i2d>
 8001e6a:	a361      	add	r3, pc, #388	; (adr r3, 8001ff0 <kinMotor_V3+0x380>)
 8001e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e70:	f7fe fbd2 	bl	8000618 <__aeabi_dmul>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	ec43 2b17 	vmov	d7, r2, r3
 8001e7c:	eeb0 0a47 	vmov.f32	s0, s14
 8001e80:	eef0 0a67 	vmov.f32	s1, s15
 8001e84:	f00e f9ec 	bl	8010260 <sin>
 8001e88:	ec59 8b10 	vmov	r8, r9, d0
 8001e8c:	69f8      	ldr	r0, [r7, #28]
 8001e8e:	f7fe fb6b 	bl	8000568 <__aeabi_f2d>
 8001e92:	4602      	mov	r2, r0
 8001e94:	460b      	mov	r3, r1
 8001e96:	4640      	mov	r0, r8
 8001e98:	4649      	mov	r1, r9
 8001e9a:	f7fe fbbd 	bl	8000618 <__aeabi_dmul>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	4620      	mov	r0, r4
 8001ea4:	4629      	mov	r1, r5
 8001ea6:	f7fe fa01 	bl	80002ac <__adddf3>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	4610      	mov	r0, r2
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	a351      	add	r3, pc, #324	; (adr r3, 8001ff8 <kinMotor_V3+0x388>)
 8001eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb8:	f7fe fbae 	bl	8000618 <__aeabi_dmul>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	4692      	mov	sl, r2
 8001ec2:	469b      	mov	fp, r3
				 (lambdaY * sin(d2r(-135)) * (-sin(d2r(yawVal)) * Ex + cos(d2r(yawVal)) * Ey)) +
 8001ec4:	4b54      	ldr	r3, [pc, #336]	; (8002018 <kinMotor_V3+0x3a8>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7fe fb3b 	bl	8000544 <__aeabi_i2d>
 8001ece:	a348      	add	r3, pc, #288	; (adr r3, 8001ff0 <kinMotor_V3+0x380>)
 8001ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed4:	f7fe fba0 	bl	8000618 <__aeabi_dmul>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	ec43 2b17 	vmov	d7, r2, r3
 8001ee0:	eeb0 0a47 	vmov.f32	s0, s14
 8001ee4:	eef0 0a67 	vmov.f32	s1, s15
 8001ee8:	f00e f9ba 	bl	8010260 <sin>
 8001eec:	ec53 2b10 	vmov	r2, r3, d0
 8001ef0:	613a      	str	r2, [r7, #16]
 8001ef2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001ef6:	617b      	str	r3, [r7, #20]
 8001ef8:	6a38      	ldr	r0, [r7, #32]
 8001efa:	f7fe fb35 	bl	8000568 <__aeabi_f2d>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f06:	f7fe fb87 	bl	8000618 <__aeabi_dmul>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	4614      	mov	r4, r2
 8001f10:	461d      	mov	r5, r3
 8001f12:	4b41      	ldr	r3, [pc, #260]	; (8002018 <kinMotor_V3+0x3a8>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe fb14 	bl	8000544 <__aeabi_i2d>
 8001f1c:	a334      	add	r3, pc, #208	; (adr r3, 8001ff0 <kinMotor_V3+0x380>)
 8001f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f22:	f7fe fb79 	bl	8000618 <__aeabi_dmul>
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	ec43 2b17 	vmov	d7, r2, r3
 8001f2e:	eeb0 0a47 	vmov.f32	s0, s14
 8001f32:	eef0 0a67 	vmov.f32	s1, s15
 8001f36:	f00e f93f 	bl	80101b8 <cos>
 8001f3a:	ec59 8b10 	vmov	r8, r9, d0
 8001f3e:	69f8      	ldr	r0, [r7, #28]
 8001f40:	f7fe fb12 	bl	8000568 <__aeabi_f2d>
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	4640      	mov	r0, r8
 8001f4a:	4649      	mov	r1, r9
 8001f4c:	f7fe fb64 	bl	8000618 <__aeabi_dmul>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4620      	mov	r0, r4
 8001f56:	4629      	mov	r1, r5
 8001f58:	f7fe f9a8 	bl	80002ac <__adddf3>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	4610      	mov	r0, r2
 8001f62:	4619      	mov	r1, r3
 8001f64:	a32a      	add	r3, pc, #168	; (adr r3, 8002010 <kinMotor_V3+0x3a0>)
 8001f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6a:	f7fe fb55 	bl	8000618 <__aeabi_dmul>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
	mtrKin->w2 = (lambdaX * cos(d2r(-135)) * (cos(d2r(yawVal)) * Ex + sin(d2r(yawVal)) * Ey)) +
 8001f72:	4650      	mov	r0, sl
 8001f74:	4659      	mov	r1, fp
 8001f76:	f7fe f999 	bl	80002ac <__adddf3>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4614      	mov	r4, r2
 8001f80:	461d      	mov	r5, r3
				 (lambdaTH * alphaLengthMotor * Eth);
 8001f82:	69b8      	ldr	r0, [r7, #24]
 8001f84:	f7fe faf0 	bl	8000568 <__aeabi_f2d>
 8001f88:	a31f      	add	r3, pc, #124	; (adr r3, 8002008 <kinMotor_V3+0x398>)
 8001f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8e:	f7fe fb43 	bl	8000618 <__aeabi_dmul>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
				 (lambdaY * sin(d2r(-135)) * (-sin(d2r(yawVal)) * Ex + cos(d2r(yawVal)) * Ey)) +
 8001f96:	4620      	mov	r0, r4
 8001f98:	4629      	mov	r1, r5
 8001f9a:	f7fe f987 	bl	80002ac <__adddf3>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
	mtrKin->w2 = (lambdaX * cos(d2r(-135)) * (cos(d2r(yawVal)) * Ex + sin(d2r(yawVal)) * Ey)) +
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f7fe fde7 	bl	8000b78 <__aeabi_d2iz>
 8001faa:	4602      	mov	r2, r0
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	605a      	str	r2, [r3, #4]
	mtrKin->w3 = (lambdaX * cos(d2r(-45)) * (cos(d2r(yawVal)) * Ex + sin(d2r(yawVal)) * Ey)) +
 8001fb0:	4b19      	ldr	r3, [pc, #100]	; (8002018 <kinMotor_V3+0x3a8>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe fac5 	bl	8000544 <__aeabi_i2d>
 8001fba:	a30d      	add	r3, pc, #52	; (adr r3, 8001ff0 <kinMotor_V3+0x380>)
 8001fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc0:	f7fe fb2a 	bl	8000618 <__aeabi_dmul>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	ec43 2b17 	vmov	d7, r2, r3
 8001fcc:	eeb0 0a47 	vmov.f32	s0, s14
 8001fd0:	eef0 0a67 	vmov.f32	s1, s15
 8001fd4:	f00e f8f0 	bl	80101b8 <cos>
 8001fd8:	ec55 4b10 	vmov	r4, r5, d0
 8001fdc:	6a38      	ldr	r0, [r7, #32]
 8001fde:	f7fe fac3 	bl	8000568 <__aeabi_f2d>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	4620      	mov	r0, r4
 8001fe8:	4629      	mov	r1, r5
 8001fea:	e017      	b.n	800201c <kinMotor_V3+0x3ac>
 8001fec:	f3af 8000 	nop.w
 8001ff0:	a2529d39 	.word	0xa2529d39
 8001ff4:	3f91df46 	.word	0x3f91df46
 8001ff8:	3815d38e 	.word	0x3815d38e
 8001ffc:	c083e32b 	.word	0xc083e32b
 8002000:	3815d38f 	.word	0x3815d38f
 8002004:	4083e32b 	.word	0x4083e32b
 8002008:	33333334 	.word	0x33333334
 800200c:	402f3333 	.word	0x402f3333
 8002010:	3815d38f 	.word	0x3815d38f
 8002014:	c083e32b 	.word	0xc083e32b
 8002018:	20000214 	.word	0x20000214
 800201c:	f7fe fafc 	bl	8000618 <__aeabi_dmul>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4614      	mov	r4, r2
 8002026:	461d      	mov	r5, r3
 8002028:	4bd1      	ldr	r3, [pc, #836]	; (8002370 <kinMotor_V3+0x700>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	f7fe fa89 	bl	8000544 <__aeabi_i2d>
 8002032:	a3c5      	add	r3, pc, #788	; (adr r3, 8002348 <kinMotor_V3+0x6d8>)
 8002034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002038:	f7fe faee 	bl	8000618 <__aeabi_dmul>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	ec43 2b17 	vmov	d7, r2, r3
 8002044:	eeb0 0a47 	vmov.f32	s0, s14
 8002048:	eef0 0a67 	vmov.f32	s1, s15
 800204c:	f00e f908 	bl	8010260 <sin>
 8002050:	ec59 8b10 	vmov	r8, r9, d0
 8002054:	69f8      	ldr	r0, [r7, #28]
 8002056:	f7fe fa87 	bl	8000568 <__aeabi_f2d>
 800205a:	4602      	mov	r2, r0
 800205c:	460b      	mov	r3, r1
 800205e:	4640      	mov	r0, r8
 8002060:	4649      	mov	r1, r9
 8002062:	f7fe fad9 	bl	8000618 <__aeabi_dmul>
 8002066:	4602      	mov	r2, r0
 8002068:	460b      	mov	r3, r1
 800206a:	4620      	mov	r0, r4
 800206c:	4629      	mov	r1, r5
 800206e:	f7fe f91d 	bl	80002ac <__adddf3>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	4610      	mov	r0, r2
 8002078:	4619      	mov	r1, r3
 800207a:	a3b5      	add	r3, pc, #724	; (adr r3, 8002350 <kinMotor_V3+0x6e0>)
 800207c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002080:	f7fe faca 	bl	8000618 <__aeabi_dmul>
 8002084:	4602      	mov	r2, r0
 8002086:	460b      	mov	r3, r1
 8002088:	4614      	mov	r4, r2
 800208a:	461d      	mov	r5, r3
			     (lambdaY * sin(d2r(-45)) * (-sin(d2r(yawVal)) * Ex + cos(d2r(yawVal)) * Ey)) +
 800208c:	4bb8      	ldr	r3, [pc, #736]	; (8002370 <kinMotor_V3+0x700>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe fa57 	bl	8000544 <__aeabi_i2d>
 8002096:	a3ac      	add	r3, pc, #688	; (adr r3, 8002348 <kinMotor_V3+0x6d8>)
 8002098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209c:	f7fe fabc 	bl	8000618 <__aeabi_dmul>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	ec43 2b17 	vmov	d7, r2, r3
 80020a8:	eeb0 0a47 	vmov.f32	s0, s14
 80020ac:	eef0 0a67 	vmov.f32	s1, s15
 80020b0:	f00e f8d6 	bl	8010260 <sin>
 80020b4:	ec53 2b10 	vmov	r2, r3, d0
 80020b8:	60ba      	str	r2, [r7, #8]
 80020ba:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	6a38      	ldr	r0, [r7, #32]
 80020c2:	f7fe fa51 	bl	8000568 <__aeabi_f2d>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80020ce:	f7fe faa3 	bl	8000618 <__aeabi_dmul>
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	4690      	mov	r8, r2
 80020d8:	4699      	mov	r9, r3
 80020da:	4ba5      	ldr	r3, [pc, #660]	; (8002370 <kinMotor_V3+0x700>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe fa30 	bl	8000544 <__aeabi_i2d>
 80020e4:	a398      	add	r3, pc, #608	; (adr r3, 8002348 <kinMotor_V3+0x6d8>)
 80020e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ea:	f7fe fa95 	bl	8000618 <__aeabi_dmul>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	ec43 2b17 	vmov	d7, r2, r3
 80020f6:	eeb0 0a47 	vmov.f32	s0, s14
 80020fa:	eef0 0a67 	vmov.f32	s1, s15
 80020fe:	f00e f85b 	bl	80101b8 <cos>
 8002102:	ec5b ab10 	vmov	sl, fp, d0
 8002106:	69f8      	ldr	r0, [r7, #28]
 8002108:	f7fe fa2e 	bl	8000568 <__aeabi_f2d>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	4650      	mov	r0, sl
 8002112:	4659      	mov	r1, fp
 8002114:	f7fe fa80 	bl	8000618 <__aeabi_dmul>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	4640      	mov	r0, r8
 800211e:	4649      	mov	r1, r9
 8002120:	f7fe f8c4 	bl	80002ac <__adddf3>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	4610      	mov	r0, r2
 800212a:	4619      	mov	r1, r3
 800212c:	a38a      	add	r3, pc, #552	; (adr r3, 8002358 <kinMotor_V3+0x6e8>)
 800212e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002132:	f7fe fa71 	bl	8000618 <__aeabi_dmul>
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
	mtrKin->w3 = (lambdaX * cos(d2r(-45)) * (cos(d2r(yawVal)) * Ex + sin(d2r(yawVal)) * Ey)) +
 800213a:	4620      	mov	r0, r4
 800213c:	4629      	mov	r1, r5
 800213e:	f7fe f8b5 	bl	80002ac <__adddf3>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	4614      	mov	r4, r2
 8002148:	461d      	mov	r5, r3
				 (lambdaTH * alphaLengthMotor * Eth);
 800214a:	69b8      	ldr	r0, [r7, #24]
 800214c:	f7fe fa0c 	bl	8000568 <__aeabi_f2d>
 8002150:	a383      	add	r3, pc, #524	; (adr r3, 8002360 <kinMotor_V3+0x6f0>)
 8002152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002156:	f7fe fa5f 	bl	8000618 <__aeabi_dmul>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
			     (lambdaY * sin(d2r(-45)) * (-sin(d2r(yawVal)) * Ex + cos(d2r(yawVal)) * Ey)) +
 800215e:	4620      	mov	r0, r4
 8002160:	4629      	mov	r1, r5
 8002162:	f7fe f8a3 	bl	80002ac <__adddf3>
 8002166:	4602      	mov	r2, r0
 8002168:	460b      	mov	r3, r1
	mtrKin->w3 = (lambdaX * cos(d2r(-45)) * (cos(d2r(yawVal)) * Ex + sin(d2r(yawVal)) * Ey)) +
 800216a:	4610      	mov	r0, r2
 800216c:	4619      	mov	r1, r3
 800216e:	f7fe fd03 	bl	8000b78 <__aeabi_d2iz>
 8002172:	4602      	mov	r2, r0
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	609a      	str	r2, [r3, #8]
	mtrKin->w4 = (lambdaX * cos(d2r(45)) * (cos(d2r(yawVal)) * Ex + sin(d2r(yawVal)) * Ey)) +
 8002178:	4b7d      	ldr	r3, [pc, #500]	; (8002370 <kinMotor_V3+0x700>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe f9e1 	bl	8000544 <__aeabi_i2d>
 8002182:	a371      	add	r3, pc, #452	; (adr r3, 8002348 <kinMotor_V3+0x6d8>)
 8002184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002188:	f7fe fa46 	bl	8000618 <__aeabi_dmul>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	ec43 2b17 	vmov	d7, r2, r3
 8002194:	eeb0 0a47 	vmov.f32	s0, s14
 8002198:	eef0 0a67 	vmov.f32	s1, s15
 800219c:	f00e f80c 	bl	80101b8 <cos>
 80021a0:	ec55 4b10 	vmov	r4, r5, d0
 80021a4:	6a38      	ldr	r0, [r7, #32]
 80021a6:	f7fe f9df 	bl	8000568 <__aeabi_f2d>
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	4620      	mov	r0, r4
 80021b0:	4629      	mov	r1, r5
 80021b2:	f7fe fa31 	bl	8000618 <__aeabi_dmul>
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	4614      	mov	r4, r2
 80021bc:	461d      	mov	r5, r3
 80021be:	4b6c      	ldr	r3, [pc, #432]	; (8002370 <kinMotor_V3+0x700>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7fe f9be 	bl	8000544 <__aeabi_i2d>
 80021c8:	a35f      	add	r3, pc, #380	; (adr r3, 8002348 <kinMotor_V3+0x6d8>)
 80021ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ce:	f7fe fa23 	bl	8000618 <__aeabi_dmul>
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	ec43 2b17 	vmov	d7, r2, r3
 80021da:	eeb0 0a47 	vmov.f32	s0, s14
 80021de:	eef0 0a67 	vmov.f32	s1, s15
 80021e2:	f00e f83d 	bl	8010260 <sin>
 80021e6:	ec59 8b10 	vmov	r8, r9, d0
 80021ea:	69f8      	ldr	r0, [r7, #28]
 80021ec:	f7fe f9bc 	bl	8000568 <__aeabi_f2d>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4640      	mov	r0, r8
 80021f6:	4649      	mov	r1, r9
 80021f8:	f7fe fa0e 	bl	8000618 <__aeabi_dmul>
 80021fc:	4602      	mov	r2, r0
 80021fe:	460b      	mov	r3, r1
 8002200:	4620      	mov	r0, r4
 8002202:	4629      	mov	r1, r5
 8002204:	f7fe f852 	bl	80002ac <__adddf3>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	4610      	mov	r0, r2
 800220e:	4619      	mov	r1, r3
 8002210:	a34f      	add	r3, pc, #316	; (adr r3, 8002350 <kinMotor_V3+0x6e0>)
 8002212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002216:	f7fe f9ff 	bl	8000618 <__aeabi_dmul>
 800221a:	4602      	mov	r2, r0
 800221c:	460b      	mov	r3, r1
 800221e:	4614      	mov	r4, r2
 8002220:	461d      	mov	r5, r3
			     (lambdaY * sin(d2r(45)) * (-sin(d2r(yawVal)) * Ex + cos(d2r(yawVal)) * Ey)) +
 8002222:	4b53      	ldr	r3, [pc, #332]	; (8002370 <kinMotor_V3+0x700>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f7fe f98c 	bl	8000544 <__aeabi_i2d>
 800222c:	a346      	add	r3, pc, #280	; (adr r3, 8002348 <kinMotor_V3+0x6d8>)
 800222e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002232:	f7fe f9f1 	bl	8000618 <__aeabi_dmul>
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	ec43 2b17 	vmov	d7, r2, r3
 800223e:	eeb0 0a47 	vmov.f32	s0, s14
 8002242:	eef0 0a67 	vmov.f32	s1, s15
 8002246:	f00e f80b 	bl	8010260 <sin>
 800224a:	ec53 2b10 	vmov	r2, r3, d0
 800224e:	603a      	str	r2, [r7, #0]
 8002250:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002254:	607b      	str	r3, [r7, #4]
 8002256:	6a38      	ldr	r0, [r7, #32]
 8002258:	f7fe f986 	bl	8000568 <__aeabi_f2d>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002264:	f7fe f9d8 	bl	8000618 <__aeabi_dmul>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4690      	mov	r8, r2
 800226e:	4699      	mov	r9, r3
 8002270:	4b3f      	ldr	r3, [pc, #252]	; (8002370 <kinMotor_V3+0x700>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f7fe f965 	bl	8000544 <__aeabi_i2d>
 800227a:	a333      	add	r3, pc, #204	; (adr r3, 8002348 <kinMotor_V3+0x6d8>)
 800227c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002280:	f7fe f9ca 	bl	8000618 <__aeabi_dmul>
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	ec43 2b17 	vmov	d7, r2, r3
 800228c:	eeb0 0a47 	vmov.f32	s0, s14
 8002290:	eef0 0a67 	vmov.f32	s1, s15
 8002294:	f00d ff90 	bl	80101b8 <cos>
 8002298:	ec5b ab10 	vmov	sl, fp, d0
 800229c:	69f8      	ldr	r0, [r7, #28]
 800229e:	f7fe f963 	bl	8000568 <__aeabi_f2d>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	4650      	mov	r0, sl
 80022a8:	4659      	mov	r1, fp
 80022aa:	f7fe f9b5 	bl	8000618 <__aeabi_dmul>
 80022ae:	4602      	mov	r2, r0
 80022b0:	460b      	mov	r3, r1
 80022b2:	4640      	mov	r0, r8
 80022b4:	4649      	mov	r1, r9
 80022b6:	f7fd fff9 	bl	80002ac <__adddf3>
 80022ba:	4602      	mov	r2, r0
 80022bc:	460b      	mov	r3, r1
 80022be:	4610      	mov	r0, r2
 80022c0:	4619      	mov	r1, r3
 80022c2:	a329      	add	r3, pc, #164	; (adr r3, 8002368 <kinMotor_V3+0x6f8>)
 80022c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c8:	f7fe f9a6 	bl	8000618 <__aeabi_dmul>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
	mtrKin->w4 = (lambdaX * cos(d2r(45)) * (cos(d2r(yawVal)) * Ex + sin(d2r(yawVal)) * Ey)) +
 80022d0:	4620      	mov	r0, r4
 80022d2:	4629      	mov	r1, r5
 80022d4:	f7fd ffea 	bl	80002ac <__adddf3>
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	4614      	mov	r4, r2
 80022de:	461d      	mov	r5, r3
			     (lambdaTH * alphaLengthMotor * Eth);
 80022e0:	69b8      	ldr	r0, [r7, #24]
 80022e2:	f7fe f941 	bl	8000568 <__aeabi_f2d>
 80022e6:	a31e      	add	r3, pc, #120	; (adr r3, 8002360 <kinMotor_V3+0x6f0>)
 80022e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ec:	f7fe f994 	bl	8000618 <__aeabi_dmul>
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
			     (lambdaY * sin(d2r(45)) * (-sin(d2r(yawVal)) * Ex + cos(d2r(yawVal)) * Ey)) +
 80022f4:	4620      	mov	r0, r4
 80022f6:	4629      	mov	r1, r5
 80022f8:	f7fd ffd8 	bl	80002ac <__adddf3>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
	mtrKin->w4 = (lambdaX * cos(d2r(45)) * (cos(d2r(yawVal)) * Ex + sin(d2r(yawVal)) * Ey)) +
 8002300:	4610      	mov	r0, r2
 8002302:	4619      	mov	r1, r3
 8002304:	f7fe fc38 	bl	8000b78 <__aeabi_d2iz>
 8002308:	4602      	mov	r2, r0
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	60da      	str	r2, [r3, #12]

	if(mtrKin->w1 > Max_Cutoff_Mtr) mtrKin->w1 = Max_Cutoff_Mtr;
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002316:	dd04      	ble.n	8002322 <kinMotor_V3+0x6b2>
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	e007      	b.n	8002332 <kinMotor_V3+0x6c2>
	else if(mtrKin->w1 < Min_Cutoff_Mtr) mtrKin->w1 = Min_Cutoff_Mtr;
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f513 7f16 	cmn.w	r3, #600	; 0x258
 800232a:	da02      	bge.n	8002332 <kinMotor_V3+0x6c2>
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	4a11      	ldr	r2, [pc, #68]	; (8002374 <kinMotor_V3+0x704>)
 8002330:	601a      	str	r2, [r3, #0]

	if(mtrKin->w2 > Max_Cutoff_Mtr) mtrKin->w2 = Max_Cutoff_Mtr;
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800233a:	dd1d      	ble.n	8002378 <kinMotor_V3+0x708>
 800233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002342:	605a      	str	r2, [r3, #4]
 8002344:	e020      	b.n	8002388 <kinMotor_V3+0x718>
 8002346:	bf00      	nop
 8002348:	a2529d39 	.word	0xa2529d39
 800234c:	3f91df46 	.word	0x3f91df46
 8002350:	3815d38f 	.word	0x3815d38f
 8002354:	4083e32b 	.word	0x4083e32b
 8002358:	3815d38e 	.word	0x3815d38e
 800235c:	c083e32b 	.word	0xc083e32b
 8002360:	33333334 	.word	0x33333334
 8002364:	402f3333 	.word	0x402f3333
 8002368:	3815d38e 	.word	0x3815d38e
 800236c:	4083e32b 	.word	0x4083e32b
 8002370:	20000214 	.word	0x20000214
 8002374:	fffffda8 	.word	0xfffffda8
	else if(mtrKin->w2 < Min_Cutoff_Mtr) mtrKin->w2 = Min_Cutoff_Mtr;
 8002378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f513 7f16 	cmn.w	r3, #600	; 0x258
 8002380:	da02      	bge.n	8002388 <kinMotor_V3+0x718>
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	4a15      	ldr	r2, [pc, #84]	; (80023dc <kinMotor_V3+0x76c>)
 8002386:	605a      	str	r2, [r3, #4]

	if(mtrKin->w3 > Max_Cutoff_Mtr) mtrKin->w3 = Max_Cutoff_Mtr;
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002390:	dd04      	ble.n	800239c <kinMotor_V3+0x72c>
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002398:	609a      	str	r2, [r3, #8]
 800239a:	e007      	b.n	80023ac <kinMotor_V3+0x73c>
	else if(mtrKin->w3 < Min_Cutoff_Mtr) mtrKin->w3 = Min_Cutoff_Mtr;
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f513 7f16 	cmn.w	r3, #600	; 0x258
 80023a4:	da02      	bge.n	80023ac <kinMotor_V3+0x73c>
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	4a0c      	ldr	r2, [pc, #48]	; (80023dc <kinMotor_V3+0x76c>)
 80023aa:	609a      	str	r2, [r3, #8]

	if(mtrKin->w4 > Max_Cutoff_Mtr) mtrKin->w4 = Max_Cutoff_Mtr;
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80023b4:	dd04      	ble.n	80023c0 <kinMotor_V3+0x750>
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	f44f 7216 	mov.w	r2, #600	; 0x258
 80023bc:	60da      	str	r2, [r3, #12]
	else if(mtrKin->w4 < Min_Cutoff_Mtr) mtrKin->w4 = Min_Cutoff_Mtr;
}
 80023be:	e007      	b.n	80023d0 <kinMotor_V3+0x760>
	else if(mtrKin->w4 < Min_Cutoff_Mtr) mtrKin->w4 = Min_Cutoff_Mtr;
 80023c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	f513 7f16 	cmn.w	r3, #600	; 0x258
 80023c8:	da02      	bge.n	80023d0 <kinMotor_V3+0x760>
 80023ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023cc:	4a03      	ldr	r2, [pc, #12]	; (80023dc <kinMotor_V3+0x76c>)
 80023ce:	60da      	str	r2, [r3, #12]
}
 80023d0:	bf00      	nop
 80023d2:	3728      	adds	r7, #40	; 0x28
 80023d4:	46bd      	mov	sp, r7
 80023d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023da:	bf00      	nop
 80023dc:	fffffda8 	.word	0xfffffda8

080023e0 <kinMotor>:

	if(mtrKin->w4 > Max_Cutoff_Mtr) mtrKin->w4 = Max_Cutoff_Mtr;
	else if(mtrKin->w4 < Min_Cutoff_Mtr) mtrKin->w4 = Min_Cutoff_Mtr;
}

void kinMotor(MotorKin *mtrKin, float x, float y, float th) {
 80023e0:	b5b0      	push	{r4, r5, r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	ed87 0a02 	vstr	s0, [r7, #8]
 80023ec:	edc7 0a01 	vstr	s1, [r7, #4]
 80023f0:	ed87 1a00 	vstr	s2, [r7]
	mtrKin->w1 = (lambdaInv_X * cos(d2r(135)) * x) +
 80023f4:	68b8      	ldr	r0, [r7, #8]
 80023f6:	f7fe f8b7 	bl	8000568 <__aeabi_f2d>
 80023fa:	a38f      	add	r3, pc, #572	; (adr r3, 8002638 <kinMotor+0x258>)
 80023fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002400:	f7fe f90a 	bl	8000618 <__aeabi_dmul>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	4614      	mov	r4, r2
 800240a:	461d      	mov	r5, r3
				 (lambdaInv_Y * sin(d2r(135)) * y) +
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f7fe f8ab 	bl	8000568 <__aeabi_f2d>
 8002412:	a38d      	add	r3, pc, #564	; (adr r3, 8002648 <kinMotor+0x268>)
 8002414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002418:	f7fe f8fe 	bl	8000618 <__aeabi_dmul>
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
	mtrKin->w1 = (lambdaInv_X * cos(d2r(135)) * x) +
 8002420:	4620      	mov	r0, r4
 8002422:	4629      	mov	r1, r5
 8002424:	f7fd ff42 	bl	80002ac <__adddf3>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4614      	mov	r4, r2
 800242e:	461d      	mov	r5, r3
				 (lambdaInv_TH * lengthAlpha * th);
 8002430:	6838      	ldr	r0, [r7, #0]
 8002432:	f7fe f899 	bl	8000568 <__aeabi_f2d>
 8002436:	f04f 0200 	mov.w	r2, #0
 800243a:	4b87      	ldr	r3, [pc, #540]	; (8002658 <kinMotor+0x278>)
 800243c:	f7fe f8ec 	bl	8000618 <__aeabi_dmul>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
				 (lambdaInv_Y * sin(d2r(135)) * y) +
 8002444:	4620      	mov	r0, r4
 8002446:	4629      	mov	r1, r5
 8002448:	f7fd ff30 	bl	80002ac <__adddf3>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
	mtrKin->w1 = (lambdaInv_X * cos(d2r(135)) * x) +
 8002450:	4610      	mov	r0, r2
 8002452:	4619      	mov	r1, r3
 8002454:	f7fe fb90 	bl	8000b78 <__aeabi_d2iz>
 8002458:	4602      	mov	r2, r0
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	601a      	str	r2, [r3, #0]
	mtrKin->w2 = (lambdaInv_X * cos(d2r(-135)) * x) +
 800245e:	68b8      	ldr	r0, [r7, #8]
 8002460:	f7fe f882 	bl	8000568 <__aeabi_f2d>
 8002464:	a374      	add	r3, pc, #464	; (adr r3, 8002638 <kinMotor+0x258>)
 8002466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246a:	f7fe f8d5 	bl	8000618 <__aeabi_dmul>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4614      	mov	r4, r2
 8002474:	461d      	mov	r5, r3
				 (lambdaInv_Y * sin(d2r(-135)) * y) +
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7fe f876 	bl	8000568 <__aeabi_f2d>
 800247c:	a370      	add	r3, pc, #448	; (adr r3, 8002640 <kinMotor+0x260>)
 800247e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002482:	f7fe f8c9 	bl	8000618 <__aeabi_dmul>
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
	mtrKin->w2 = (lambdaInv_X * cos(d2r(-135)) * x) +
 800248a:	4620      	mov	r0, r4
 800248c:	4629      	mov	r1, r5
 800248e:	f7fd ff0d 	bl	80002ac <__adddf3>
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	4614      	mov	r4, r2
 8002498:	461d      	mov	r5, r3
				 (lambdaInv_TH * lengthAlpha * th);
 800249a:	6838      	ldr	r0, [r7, #0]
 800249c:	f7fe f864 	bl	8000568 <__aeabi_f2d>
 80024a0:	f04f 0200 	mov.w	r2, #0
 80024a4:	4b6c      	ldr	r3, [pc, #432]	; (8002658 <kinMotor+0x278>)
 80024a6:	f7fe f8b7 	bl	8000618 <__aeabi_dmul>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
				 (lambdaInv_Y * sin(d2r(-135)) * y) +
 80024ae:	4620      	mov	r0, r4
 80024b0:	4629      	mov	r1, r5
 80024b2:	f7fd fefb 	bl	80002ac <__adddf3>
 80024b6:	4602      	mov	r2, r0
 80024b8:	460b      	mov	r3, r1
	mtrKin->w2 = (lambdaInv_X * cos(d2r(-135)) * x) +
 80024ba:	4610      	mov	r0, r2
 80024bc:	4619      	mov	r1, r3
 80024be:	f7fe fb5b 	bl	8000b78 <__aeabi_d2iz>
 80024c2:	4602      	mov	r2, r0
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	605a      	str	r2, [r3, #4]
	mtrKin->w3 = (lambdaInv_X * cos(d2r(-45)) * x) +
 80024c8:	68b8      	ldr	r0, [r7, #8]
 80024ca:	f7fe f84d 	bl	8000568 <__aeabi_f2d>
 80024ce:	a35e      	add	r3, pc, #376	; (adr r3, 8002648 <kinMotor+0x268>)
 80024d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d4:	f7fe f8a0 	bl	8000618 <__aeabi_dmul>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	4614      	mov	r4, r2
 80024de:	461d      	mov	r5, r3
			     (lambdaInv_Y * sin(d2r(-45)) * y) +
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f7fe f841 	bl	8000568 <__aeabi_f2d>
 80024e6:	a354      	add	r3, pc, #336	; (adr r3, 8002638 <kinMotor+0x258>)
 80024e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ec:	f7fe f894 	bl	8000618 <__aeabi_dmul>
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
	mtrKin->w3 = (lambdaInv_X * cos(d2r(-45)) * x) +
 80024f4:	4620      	mov	r0, r4
 80024f6:	4629      	mov	r1, r5
 80024f8:	f7fd fed8 	bl	80002ac <__adddf3>
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	4614      	mov	r4, r2
 8002502:	461d      	mov	r5, r3
				 (lambdaInv_TH * lengthAlpha * th);
 8002504:	6838      	ldr	r0, [r7, #0]
 8002506:	f7fe f82f 	bl	8000568 <__aeabi_f2d>
 800250a:	f04f 0200 	mov.w	r2, #0
 800250e:	4b52      	ldr	r3, [pc, #328]	; (8002658 <kinMotor+0x278>)
 8002510:	f7fe f882 	bl	8000618 <__aeabi_dmul>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
			     (lambdaInv_Y * sin(d2r(-45)) * y) +
 8002518:	4620      	mov	r0, r4
 800251a:	4629      	mov	r1, r5
 800251c:	f7fd fec6 	bl	80002ac <__adddf3>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
	mtrKin->w3 = (lambdaInv_X * cos(d2r(-45)) * x) +
 8002524:	4610      	mov	r0, r2
 8002526:	4619      	mov	r1, r3
 8002528:	f7fe fb26 	bl	8000b78 <__aeabi_d2iz>
 800252c:	4602      	mov	r2, r0
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	609a      	str	r2, [r3, #8]
	mtrKin->w4 = (lambdaInv_X * cos(d2r(45)) * x) +
 8002532:	68b8      	ldr	r0, [r7, #8]
 8002534:	f7fe f818 	bl	8000568 <__aeabi_f2d>
 8002538:	a343      	add	r3, pc, #268	; (adr r3, 8002648 <kinMotor+0x268>)
 800253a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253e:	f7fe f86b 	bl	8000618 <__aeabi_dmul>
 8002542:	4602      	mov	r2, r0
 8002544:	460b      	mov	r3, r1
 8002546:	4614      	mov	r4, r2
 8002548:	461d      	mov	r5, r3
				 (lambdaInv_Y * sin(d2r(45)) * y) +
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7fe f80c 	bl	8000568 <__aeabi_f2d>
 8002550:	a33f      	add	r3, pc, #252	; (adr r3, 8002650 <kinMotor+0x270>)
 8002552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002556:	f7fe f85f 	bl	8000618 <__aeabi_dmul>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
	mtrKin->w4 = (lambdaInv_X * cos(d2r(45)) * x) +
 800255e:	4620      	mov	r0, r4
 8002560:	4629      	mov	r1, r5
 8002562:	f7fd fea3 	bl	80002ac <__adddf3>
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	4614      	mov	r4, r2
 800256c:	461d      	mov	r5, r3
				 (lambdaInv_TH * lengthAlpha * th);
 800256e:	6838      	ldr	r0, [r7, #0]
 8002570:	f7fd fffa 	bl	8000568 <__aeabi_f2d>
 8002574:	f04f 0200 	mov.w	r2, #0
 8002578:	4b37      	ldr	r3, [pc, #220]	; (8002658 <kinMotor+0x278>)
 800257a:	f7fe f84d 	bl	8000618 <__aeabi_dmul>
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
				 (lambdaInv_Y * sin(d2r(45)) * y) +
 8002582:	4620      	mov	r0, r4
 8002584:	4629      	mov	r1, r5
 8002586:	f7fd fe91 	bl	80002ac <__adddf3>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
	mtrKin->w4 = (lambdaInv_X * cos(d2r(45)) * x) +
 800258e:	4610      	mov	r0, r2
 8002590:	4619      	mov	r1, r3
 8002592:	f7fe faf1 	bl	8000b78 <__aeabi_d2iz>
 8002596:	4602      	mov	r2, r0
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	60da      	str	r2, [r3, #12]

	if(mtrKin->w1 > Max_Cutoff_Mtr_Inv) mtrKin->w1 = Max_Cutoff_Mtr_Inv;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80025a4:	dd04      	ble.n	80025b0 <kinMotor+0x1d0>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	e007      	b.n	80025c0 <kinMotor+0x1e0>
	else if(mtrKin->w1 < Min_Cutoff_Mtr_Inv) mtrKin->w1 = Min_Cutoff_Mtr_Inv;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f513 7fc8 	cmn.w	r3, #400	; 0x190
 80025b8:	da02      	bge.n	80025c0 <kinMotor+0x1e0>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	4a27      	ldr	r2, [pc, #156]	; (800265c <kinMotor+0x27c>)
 80025be:	601a      	str	r2, [r3, #0]

	if(mtrKin->w2 > Max_Cutoff_Mtr_Inv) mtrKin->w2 = Max_Cutoff_Mtr_Inv;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80025c8:	dd04      	ble.n	80025d4 <kinMotor+0x1f4>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	e007      	b.n	80025e4 <kinMotor+0x204>
	else if(mtrKin->w2 < Min_Cutoff_Mtr_Inv) mtrKin->w2 = Min_Cutoff_Mtr_Inv;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f513 7fc8 	cmn.w	r3, #400	; 0x190
 80025dc:	da02      	bge.n	80025e4 <kinMotor+0x204>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	4a1e      	ldr	r2, [pc, #120]	; (800265c <kinMotor+0x27c>)
 80025e2:	605a      	str	r2, [r3, #4]

	if(mtrKin->w3 > Max_Cutoff_Mtr_Inv) mtrKin->w3 = Max_Cutoff_Mtr_Inv;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80025ec:	dd04      	ble.n	80025f8 <kinMotor+0x218>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80025f4:	609a      	str	r2, [r3, #8]
 80025f6:	e007      	b.n	8002608 <kinMotor+0x228>
	else if(mtrKin->w3 < Min_Cutoff_Mtr_Inv) mtrKin->w3 = Min_Cutoff_Mtr_Inv;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f513 7fc8 	cmn.w	r3, #400	; 0x190
 8002600:	da02      	bge.n	8002608 <kinMotor+0x228>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	4a15      	ldr	r2, [pc, #84]	; (800265c <kinMotor+0x27c>)
 8002606:	609a      	str	r2, [r3, #8]

	if(mtrKin->w4 > Max_Cutoff_Mtr_Inv) mtrKin->w4 = Max_Cutoff_Mtr_Inv;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002610:	dd04      	ble.n	800261c <kinMotor+0x23c>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002618:	60da      	str	r2, [r3, #12]
	else if(mtrKin->w4 < Min_Cutoff_Mtr_Inv) mtrKin->w4 = Min_Cutoff_Mtr_Inv;
}
 800261a:	e007      	b.n	800262c <kinMotor+0x24c>
	else if(mtrKin->w4 < Min_Cutoff_Mtr_Inv) mtrKin->w4 = Min_Cutoff_Mtr_Inv;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	f513 7fc8 	cmn.w	r3, #400	; 0x190
 8002624:	da02      	bge.n	800262c <kinMotor+0x24c>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	4a0c      	ldr	r2, [pc, #48]	; (800265c <kinMotor+0x27c>)
 800262a:	60da      	str	r2, [r3, #12]
}
 800262c:	bf00      	nop
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bdb0      	pop	{r4, r5, r7, pc}
 8002634:	f3af 8000 	nop.w
 8002638:	b0184065 	.word	0xb0184065
 800263c:	c08618da 	.word	0xc08618da
 8002640:	b0184066 	.word	0xb0184066
 8002644:	c08618da 	.word	0xc08618da
 8002648:	b0184066 	.word	0xb0184066
 800264c:	408618da 	.word	0x408618da
 8002650:	b0184065 	.word	0xb0184065
 8002654:	408618da 	.word	0x408618da
 8002658:	40568000 	.word	0x40568000
 800265c:	fffffe70 	.word	0xfffffe70

08002660 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8002668:	4a04      	ldr	r2, [pc, #16]	; (800267c <bno055_assignI2C+0x1c>)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6013      	str	r3, [r2, #0]
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	20000240 	.word	0x20000240

08002680 <bno055_delay>:

void bno055_delay(int time) {
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4618      	mov	r0, r3
 800268c:	f00b f858 	bl	800d740 <osDelay>
#else
  HAL_Delay(time);
#endif
}
 8002690:	bf00      	nop
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8002698:	b580      	push	{r7, lr}
 800269a:	b088      	sub	sp, #32
 800269c:	af02      	add	r7, sp, #8
 800269e:	4603      	mov	r3, r0
 80026a0:	460a      	mov	r2, r1
 80026a2:	71fb      	strb	r3, [r7, #7]
 80026a4:	4613      	mov	r3, r2
 80026a6:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	733b      	strb	r3, [r7, #12]
 80026ac:	79bb      	ldrb	r3, [r7, #6]
 80026ae:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 80026b0:	4b5a      	ldr	r3, [pc, #360]	; (800281c <bno055_writeData+0x184>)
 80026b2:	6818      	ldr	r0, [r3, #0]
 80026b4:	f107 020c 	add.w	r2, r7, #12
 80026b8:	230a      	movs	r3, #10
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	2302      	movs	r3, #2
 80026be:	2150      	movs	r1, #80	; 0x50
 80026c0:	f007 f8f6 	bl	80098b0 <HAL_I2C_Master_Transmit>
 80026c4:	4603      	mov	r3, r0
 80026c6:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 80026c8:	7dfb      	ldrb	r3, [r7, #23]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 80a0 	beq.w	8002810 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 80026d0:	7dfb      	ldrb	r3, [r7, #23]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d103      	bne.n	80026de <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 80026d6:	4852      	ldr	r0, [pc, #328]	; (8002820 <bno055_writeData+0x188>)
 80026d8:	f010 fa0c 	bl	8012af4 <puts>
 80026dc:	e012      	b.n	8002704 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 80026de:	7dfb      	ldrb	r3, [r7, #23]
 80026e0:	2b03      	cmp	r3, #3
 80026e2:	d103      	bne.n	80026ec <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 80026e4:	484f      	ldr	r0, [pc, #316]	; (8002824 <bno055_writeData+0x18c>)
 80026e6:	f010 fa05 	bl	8012af4 <puts>
 80026ea:	e00b      	b.n	8002704 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 80026ec:	7dfb      	ldrb	r3, [r7, #23]
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d103      	bne.n	80026fa <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 80026f2:	484d      	ldr	r0, [pc, #308]	; (8002828 <bno055_writeData+0x190>)
 80026f4:	f010 f9fe 	bl	8012af4 <puts>
 80026f8:	e004      	b.n	8002704 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 80026fa:	7dfb      	ldrb	r3, [r7, #23]
 80026fc:	4619      	mov	r1, r3
 80026fe:	484b      	ldr	r0, [pc, #300]	; (800282c <bno055_writeData+0x194>)
 8002700:	f010 f992 	bl	8012a28 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8002704:	4b45      	ldr	r3, [pc, #276]	; (800281c <bno055_writeData+0x184>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f007 fc0f 	bl	8009f2c <HAL_I2C_GetError>
 800270e:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d07e      	beq.n	8002814 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d103      	bne.n	8002724 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 800271c:	4844      	ldr	r0, [pc, #272]	; (8002830 <bno055_writeData+0x198>)
 800271e:	f010 f9e9 	bl	8012af4 <puts>
 8002722:	e021      	b.n	8002768 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	2b02      	cmp	r3, #2
 8002728:	d103      	bne.n	8002732 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 800272a:	4842      	ldr	r0, [pc, #264]	; (8002834 <bno055_writeData+0x19c>)
 800272c:	f010 f9e2 	bl	8012af4 <puts>
 8002730:	e01a      	b.n	8002768 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	2b04      	cmp	r3, #4
 8002736:	d103      	bne.n	8002740 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8002738:	483f      	ldr	r0, [pc, #252]	; (8002838 <bno055_writeData+0x1a0>)
 800273a:	f010 f9db 	bl	8012af4 <puts>
 800273e:	e013      	b.n	8002768 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	2b08      	cmp	r3, #8
 8002744:	d103      	bne.n	800274e <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8002746:	483d      	ldr	r0, [pc, #244]	; (800283c <bno055_writeData+0x1a4>)
 8002748:	f010 f9d4 	bl	8012af4 <puts>
 800274c:	e00c      	b.n	8002768 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	2b10      	cmp	r3, #16
 8002752:	d103      	bne.n	800275c <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8002754:	483a      	ldr	r0, [pc, #232]	; (8002840 <bno055_writeData+0x1a8>)
 8002756:	f010 f9cd 	bl	8012af4 <puts>
 800275a:	e005      	b.n	8002768 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	2b20      	cmp	r3, #32
 8002760:	d102      	bne.n	8002768 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8002762:	4838      	ldr	r0, [pc, #224]	; (8002844 <bno055_writeData+0x1ac>)
 8002764:	f010 f9c6 	bl	8012af4 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8002768:	4b2c      	ldr	r3, [pc, #176]	; (800281c <bno055_writeData+0x184>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f007 fbcf 	bl	8009f10 <HAL_I2C_GetState>
 8002772:	4603      	mov	r3, r0
 8002774:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8002776:	7bfb      	ldrb	r3, [r7, #15]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d103      	bne.n	8002784 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 800277c:	4832      	ldr	r0, [pc, #200]	; (8002848 <bno055_writeData+0x1b0>)
 800277e:	f010 f9b9 	bl	8012af4 <puts>
 8002782:	e048      	b.n	8002816 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8002784:	7bfb      	ldrb	r3, [r7, #15]
 8002786:	2b20      	cmp	r3, #32
 8002788:	d103      	bne.n	8002792 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 800278a:	482f      	ldr	r0, [pc, #188]	; (8002848 <bno055_writeData+0x1b0>)
 800278c:	f010 f9b2 	bl	8012af4 <puts>
 8002790:	e041      	b.n	8002816 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8002792:	7bfb      	ldrb	r3, [r7, #15]
 8002794:	2b24      	cmp	r3, #36	; 0x24
 8002796:	d103      	bne.n	80027a0 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8002798:	482c      	ldr	r0, [pc, #176]	; (800284c <bno055_writeData+0x1b4>)
 800279a:	f010 f9ab 	bl	8012af4 <puts>
 800279e:	e03a      	b.n	8002816 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
 80027a2:	2b21      	cmp	r3, #33	; 0x21
 80027a4:	d103      	bne.n	80027ae <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 80027a6:	482a      	ldr	r0, [pc, #168]	; (8002850 <bno055_writeData+0x1b8>)
 80027a8:	f010 f9a4 	bl	8012af4 <puts>
 80027ac:	e033      	b.n	8002816 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 80027ae:	7bfb      	ldrb	r3, [r7, #15]
 80027b0:	2b22      	cmp	r3, #34	; 0x22
 80027b2:	d103      	bne.n	80027bc <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 80027b4:	4827      	ldr	r0, [pc, #156]	; (8002854 <bno055_writeData+0x1bc>)
 80027b6:	f010 f99d 	bl	8012af4 <puts>
 80027ba:	e02c      	b.n	8002816 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
 80027be:	2b28      	cmp	r3, #40	; 0x28
 80027c0:	d103      	bne.n	80027ca <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 80027c2:	4825      	ldr	r0, [pc, #148]	; (8002858 <bno055_writeData+0x1c0>)
 80027c4:	f010 f996 	bl	8012af4 <puts>
 80027c8:	e025      	b.n	8002816 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
 80027cc:	2b29      	cmp	r3, #41	; 0x29
 80027ce:	d103      	bne.n	80027d8 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 80027d0:	4822      	ldr	r0, [pc, #136]	; (800285c <bno055_writeData+0x1c4>)
 80027d2:	f010 f98f 	bl	8012af4 <puts>
 80027d6:	e01e      	b.n	8002816 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
 80027da:	2b2a      	cmp	r3, #42	; 0x2a
 80027dc:	d103      	bne.n	80027e6 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 80027de:	4820      	ldr	r0, [pc, #128]	; (8002860 <bno055_writeData+0x1c8>)
 80027e0:	f010 f988 	bl	8012af4 <puts>
 80027e4:	e017      	b.n	8002816 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
 80027e8:	2b60      	cmp	r3, #96	; 0x60
 80027ea:	d103      	bne.n	80027f4 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 80027ec:	481d      	ldr	r0, [pc, #116]	; (8002864 <bno055_writeData+0x1cc>)
 80027ee:	f010 f981 	bl	8012af4 <puts>
 80027f2:	e010      	b.n	8002816 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
 80027f6:	2ba0      	cmp	r3, #160	; 0xa0
 80027f8:	d103      	bne.n	8002802 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 80027fa:	481b      	ldr	r0, [pc, #108]	; (8002868 <bno055_writeData+0x1d0>)
 80027fc:	f010 f97a 	bl	8012af4 <puts>
 8002800:	e009      	b.n	8002816 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8002802:	7bfb      	ldrb	r3, [r7, #15]
 8002804:	2be0      	cmp	r3, #224	; 0xe0
 8002806:	d106      	bne.n	8002816 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8002808:	4818      	ldr	r0, [pc, #96]	; (800286c <bno055_writeData+0x1d4>)
 800280a:	f010 f973 	bl	8012af4 <puts>
 800280e:	e002      	b.n	8002816 <bno055_writeData+0x17e>
    return;
 8002810:	bf00      	nop
 8002812:	e000      	b.n	8002816 <bno055_writeData+0x17e>
    return;
 8002814:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	20000240 	.word	0x20000240
 8002820:	08014e68 	.word	0x08014e68
 8002824:	08014e8c 	.word	0x08014e8c
 8002828:	08014eb4 	.word	0x08014eb4
 800282c:	08014ed8 	.word	0x08014ed8
 8002830:	08014ef0 	.word	0x08014ef0
 8002834:	08014f04 	.word	0x08014f04
 8002838:	08014f18 	.word	0x08014f18
 800283c:	08014f2c 	.word	0x08014f2c
 8002840:	08014f40 	.word	0x08014f40
 8002844:	08014f54 	.word	0x08014f54
 8002848:	08014f6c 	.word	0x08014f6c
 800284c:	08014f84 	.word	0x08014f84
 8002850:	08014f98 	.word	0x08014f98
 8002854:	08014fb0 	.word	0x08014fb0
 8002858:	08014fc8 	.word	0x08014fc8
 800285c:	08014fe0 	.word	0x08014fe0
 8002860:	08015000 	.word	0x08015000
 8002864:	08015020 	.word	0x08015020
 8002868:	08015038 	.word	0x08015038
 800286c:	08015050 	.word	0x08015050

08002870 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af02      	add	r7, sp, #8
 8002876:	4603      	mov	r3, r0
 8002878:	6039      	str	r1, [r7, #0]
 800287a:	71fb      	strb	r3, [r7, #7]
 800287c:	4613      	mov	r3, r2
 800287e:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8002880:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <bno055_readData+0x40>)
 8002882:	6818      	ldr	r0, [r3, #0]
 8002884:	1dfa      	adds	r2, r7, #7
 8002886:	2364      	movs	r3, #100	; 0x64
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	2301      	movs	r3, #1
 800288c:	2150      	movs	r1, #80	; 0x50
 800288e:	f007 f80f 	bl	80098b0 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8002892:	4b07      	ldr	r3, [pc, #28]	; (80028b0 <bno055_readData+0x40>)
 8002894:	6818      	ldr	r0, [r3, #0]
 8002896:	79bb      	ldrb	r3, [r7, #6]
 8002898:	b29b      	uxth	r3, r3
 800289a:	2264      	movs	r2, #100	; 0x64
 800289c:	9200      	str	r2, [sp, #0]
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	2150      	movs	r1, #80	; 0x50
 80028a2:	f007 f903 	bl	8009aac <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 80028a6:	bf00      	nop
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20000240 	.word	0x20000240

080028b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028b8:	f005 ff76 	bl	80087a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028bc:	f000 f852 	bl	8002964 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028c0:	f000 fb1c 	bl	8002efc <MX_GPIO_Init>
  MX_DMA_Init();
 80028c4:	f000 fae2 	bl	8002e8c <MX_DMA_Init>
  MX_I2C1_Init();
 80028c8:	f000 f8b6 	bl	8002a38 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80028cc:	f000 fab4 	bl	8002e38 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80028d0:	f000 f932 	bl	8002b38 <MX_TIM1_Init>
  MX_TIM3_Init();
 80028d4:	f000 f9f4 	bl	8002cc0 <MX_TIM3_Init>
  MX_TIM13_Init();
 80028d8:	f000 fa8a 	bl	8002df0 <MX_TIM13_Init>
  MX_I2C2_Init();
 80028dc:	f000 f8ec 	bl	8002ab8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim13);
 80028e0:	4813      	ldr	r0, [pc, #76]	; (8002930 <main+0x7c>)
 80028e2:	f008 fc0b 	bl	800b0fc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80028e6:	f00a fe4f 	bl	800d588 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of myTask01 */
  myTask01Handle = osThreadNew(StartDefaultTask, NULL, &myTask01_attributes);
 80028ea:	4a12      	ldr	r2, [pc, #72]	; (8002934 <main+0x80>)
 80028ec:	2100      	movs	r1, #0
 80028ee:	4812      	ldr	r0, [pc, #72]	; (8002938 <main+0x84>)
 80028f0:	f00a fe94 	bl	800d61c <osThreadNew>
 80028f4:	4603      	mov	r3, r0
 80028f6:	4a11      	ldr	r2, [pc, #68]	; (800293c <main+0x88>)
 80028f8:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(commTask, NULL, &myTask02_attributes);
 80028fa:	4a11      	ldr	r2, [pc, #68]	; (8002940 <main+0x8c>)
 80028fc:	2100      	movs	r1, #0
 80028fe:	4811      	ldr	r0, [pc, #68]	; (8002944 <main+0x90>)
 8002900:	f00a fe8c 	bl	800d61c <osThreadNew>
 8002904:	4603      	mov	r3, r0
 8002906:	4a10      	ldr	r2, [pc, #64]	; (8002948 <main+0x94>)
 8002908:	6013      	str	r3, [r2, #0]

  /* creation of ImuTask */
  ImuTaskHandle = osThreadNew(ImuTask_Function, NULL, &ImuTask_attributes);
 800290a:	4a10      	ldr	r2, [pc, #64]	; (800294c <main+0x98>)
 800290c:	2100      	movs	r1, #0
 800290e:	4810      	ldr	r0, [pc, #64]	; (8002950 <main+0x9c>)
 8002910:	f00a fe84 	bl	800d61c <osThreadNew>
 8002914:	4603      	mov	r3, r0
 8002916:	4a0f      	ldr	r2, [pc, #60]	; (8002954 <main+0xa0>)
 8002918:	6013      	str	r3, [r2, #0]

  /* creation of myTask04 */
  myTask04Handle = osThreadNew(GUI_Task, NULL, &myTask04_attributes);
 800291a:	4a0f      	ldr	r2, [pc, #60]	; (8002958 <main+0xa4>)
 800291c:	2100      	movs	r1, #0
 800291e:	480f      	ldr	r0, [pc, #60]	; (800295c <main+0xa8>)
 8002920:	f00a fe7c 	bl	800d61c <osThreadNew>
 8002924:	4603      	mov	r3, r0
 8002926:	4a0e      	ldr	r2, [pc, #56]	; (8002960 <main+0xac>)
 8002928:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800292a:	f00a fe51 	bl	800d5d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800292e:	e7fe      	b.n	800292e <main+0x7a>
 8002930:	2000043c 	.word	0x2000043c
 8002934:	080153fc 	.word	0x080153fc
 8002938:	08003701 	.word	0x08003701
 800293c:	2000058c 	.word	0x2000058c
 8002940:	08015420 	.word	0x08015420
 8002944:	080037ed 	.word	0x080037ed
 8002948:	20000590 	.word	0x20000590
 800294c:	08015444 	.word	0x08015444
 8002950:	08003805 	.word	0x08003805
 8002954:	20000594 	.word	0x20000594
 8002958:	08015468 	.word	0x08015468
 800295c:	080039d9 	.word	0x080039d9
 8002960:	20000598 	.word	0x20000598

08002964 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b094      	sub	sp, #80	; 0x50
 8002968:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800296a:	f107 0320 	add.w	r3, r7, #32
 800296e:	2230      	movs	r2, #48	; 0x30
 8002970:	2100      	movs	r1, #0
 8002972:	4618      	mov	r0, r3
 8002974:	f010 f9be 	bl	8012cf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002978:	f107 030c 	add.w	r3, r7, #12
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	605a      	str	r2, [r3, #4]
 8002982:	609a      	str	r2, [r3, #8]
 8002984:	60da      	str	r2, [r3, #12]
 8002986:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002988:	2300      	movs	r3, #0
 800298a:	60bb      	str	r3, [r7, #8]
 800298c:	4b28      	ldr	r3, [pc, #160]	; (8002a30 <SystemClock_Config+0xcc>)
 800298e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002990:	4a27      	ldr	r2, [pc, #156]	; (8002a30 <SystemClock_Config+0xcc>)
 8002992:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002996:	6413      	str	r3, [r2, #64]	; 0x40
 8002998:	4b25      	ldr	r3, [pc, #148]	; (8002a30 <SystemClock_Config+0xcc>)
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a0:	60bb      	str	r3, [r7, #8]
 80029a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029a4:	2300      	movs	r3, #0
 80029a6:	607b      	str	r3, [r7, #4]
 80029a8:	4b22      	ldr	r3, [pc, #136]	; (8002a34 <SystemClock_Config+0xd0>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a21      	ldr	r2, [pc, #132]	; (8002a34 <SystemClock_Config+0xd0>)
 80029ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029b2:	6013      	str	r3, [r2, #0]
 80029b4:	4b1f      	ldr	r3, [pc, #124]	; (8002a34 <SystemClock_Config+0xd0>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80029bc:	607b      	str	r3, [r7, #4]
 80029be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029c0:	2302      	movs	r3, #2
 80029c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029c4:	2301      	movs	r3, #1
 80029c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029c8:	2310      	movs	r3, #16
 80029ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029cc:	2302      	movs	r3, #2
 80029ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80029d0:	2300      	movs	r3, #0
 80029d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80029d4:	2308      	movs	r3, #8
 80029d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80029d8:	23a8      	movs	r3, #168	; 0xa8
 80029da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80029dc:	2302      	movs	r3, #2
 80029de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80029e0:	2304      	movs	r3, #4
 80029e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029e4:	f107 0320 	add.w	r3, r7, #32
 80029e8:	4618      	mov	r0, r3
 80029ea:	f007 fead 	bl	800a748 <HAL_RCC_OscConfig>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80029f4:	f001 f8d6 	bl	8003ba4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029f8:	230f      	movs	r3, #15
 80029fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029fc:	2302      	movs	r3, #2
 80029fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a00:	2300      	movs	r3, #0
 8002a02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002a04:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002a08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002a0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a0e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002a10:	f107 030c 	add.w	r3, r7, #12
 8002a14:	2105      	movs	r1, #5
 8002a16:	4618      	mov	r0, r3
 8002a18:	f008 f90e 	bl	800ac38 <HAL_RCC_ClockConfig>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002a22:	f001 f8bf 	bl	8003ba4 <Error_Handler>
  }
}
 8002a26:	bf00      	nop
 8002a28:	3750      	adds	r7, #80	; 0x50
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40023800 	.word	0x40023800
 8002a34:	40007000 	.word	0x40007000

08002a38 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a3c:	4b1b      	ldr	r3, [pc, #108]	; (8002aac <MX_I2C1_Init+0x74>)
 8002a3e:	4a1c      	ldr	r2, [pc, #112]	; (8002ab0 <MX_I2C1_Init+0x78>)
 8002a40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002a42:	4b1a      	ldr	r3, [pc, #104]	; (8002aac <MX_I2C1_Init+0x74>)
 8002a44:	4a1b      	ldr	r2, [pc, #108]	; (8002ab4 <MX_I2C1_Init+0x7c>)
 8002a46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a48:	4b18      	ldr	r3, [pc, #96]	; (8002aac <MX_I2C1_Init+0x74>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002a4e:	4b17      	ldr	r3, [pc, #92]	; (8002aac <MX_I2C1_Init+0x74>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a54:	4b15      	ldr	r3, [pc, #84]	; (8002aac <MX_I2C1_Init+0x74>)
 8002a56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a5a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a5c:	4b13      	ldr	r3, [pc, #76]	; (8002aac <MX_I2C1_Init+0x74>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002a62:	4b12      	ldr	r3, [pc, #72]	; (8002aac <MX_I2C1_Init+0x74>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a68:	4b10      	ldr	r3, [pc, #64]	; (8002aac <MX_I2C1_Init+0x74>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a6e:	4b0f      	ldr	r3, [pc, #60]	; (8002aac <MX_I2C1_Init+0x74>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a74:	480d      	ldr	r0, [pc, #52]	; (8002aac <MX_I2C1_Init+0x74>)
 8002a76:	f006 fdd7 	bl	8009628 <HAL_I2C_Init>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002a80:	f001 f890 	bl	8003ba4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002a84:	2100      	movs	r1, #0
 8002a86:	4809      	ldr	r0, [pc, #36]	; (8002aac <MX_I2C1_Init+0x74>)
 8002a88:	f007 fde2 	bl	800a650 <HAL_I2CEx_ConfigAnalogFilter>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002a92:	f001 f887 	bl	8003ba4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002a96:	2100      	movs	r1, #0
 8002a98:	4804      	ldr	r0, [pc, #16]	; (8002aac <MX_I2C1_Init+0x74>)
 8002a9a:	f007 fe15 	bl	800a6c8 <HAL_I2CEx_ConfigDigitalFilter>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002aa4:	f001 f87e 	bl	8003ba4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002aa8:	bf00      	nop
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	20000244 	.word	0x20000244
 8002ab0:	40005400 	.word	0x40005400
 8002ab4:	000186a0 	.word	0x000186a0

08002ab8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002abc:	4b1b      	ldr	r3, [pc, #108]	; (8002b2c <MX_I2C2_Init+0x74>)
 8002abe:	4a1c      	ldr	r2, [pc, #112]	; (8002b30 <MX_I2C2_Init+0x78>)
 8002ac0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002ac2:	4b1a      	ldr	r3, [pc, #104]	; (8002b2c <MX_I2C2_Init+0x74>)
 8002ac4:	4a1b      	ldr	r2, [pc, #108]	; (8002b34 <MX_I2C2_Init+0x7c>)
 8002ac6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002ac8:	4b18      	ldr	r3, [pc, #96]	; (8002b2c <MX_I2C2_Init+0x74>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002ace:	4b17      	ldr	r3, [pc, #92]	; (8002b2c <MX_I2C2_Init+0x74>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ad4:	4b15      	ldr	r3, [pc, #84]	; (8002b2c <MX_I2C2_Init+0x74>)
 8002ad6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ada:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002adc:	4b13      	ldr	r3, [pc, #76]	; (8002b2c <MX_I2C2_Init+0x74>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002ae2:	4b12      	ldr	r3, [pc, #72]	; (8002b2c <MX_I2C2_Init+0x74>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ae8:	4b10      	ldr	r3, [pc, #64]	; (8002b2c <MX_I2C2_Init+0x74>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002aee:	4b0f      	ldr	r3, [pc, #60]	; (8002b2c <MX_I2C2_Init+0x74>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002af4:	480d      	ldr	r0, [pc, #52]	; (8002b2c <MX_I2C2_Init+0x74>)
 8002af6:	f006 fd97 	bl	8009628 <HAL_I2C_Init>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002b00:	f001 f850 	bl	8003ba4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b04:	2100      	movs	r1, #0
 8002b06:	4809      	ldr	r0, [pc, #36]	; (8002b2c <MX_I2C2_Init+0x74>)
 8002b08:	f007 fda2 	bl	800a650 <HAL_I2CEx_ConfigAnalogFilter>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8002b12:	f001 f847 	bl	8003ba4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002b16:	2100      	movs	r1, #0
 8002b18:	4804      	ldr	r0, [pc, #16]	; (8002b2c <MX_I2C2_Init+0x74>)
 8002b1a:	f007 fdd5 	bl	800a6c8 <HAL_I2CEx_ConfigDigitalFilter>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8002b24:	f001 f83e 	bl	8003ba4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002b28:	bf00      	nop
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	20000298 	.word	0x20000298
 8002b30:	40005800 	.word	0x40005800
 8002b34:	000186a0 	.word	0x000186a0

08002b38 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b096      	sub	sp, #88	; 0x58
 8002b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b3e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b42:	2200      	movs	r2, #0
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	605a      	str	r2, [r3, #4]
 8002b48:	609a      	str	r2, [r3, #8]
 8002b4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b4c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	605a      	str	r2, [r3, #4]
 8002b60:	609a      	str	r2, [r3, #8]
 8002b62:	60da      	str	r2, [r3, #12]
 8002b64:	611a      	str	r2, [r3, #16]
 8002b66:	615a      	str	r2, [r3, #20]
 8002b68:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b6a:	1d3b      	adds	r3, r7, #4
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	2100      	movs	r1, #0
 8002b70:	4618      	mov	r0, r3
 8002b72:	f010 f8bf 	bl	8012cf4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b76:	4b50      	ldr	r3, [pc, #320]	; (8002cb8 <MX_TIM1_Init+0x180>)
 8002b78:	4a50      	ldr	r2, [pc, #320]	; (8002cbc <MX_TIM1_Init+0x184>)
 8002b7a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7-1;
 8002b7c:	4b4e      	ldr	r3, [pc, #312]	; (8002cb8 <MX_TIM1_Init+0x180>)
 8002b7e:	2206      	movs	r2, #6
 8002b80:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b82:	4b4d      	ldr	r3, [pc, #308]	; (8002cb8 <MX_TIM1_Init+0x180>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002b88:	4b4b      	ldr	r3, [pc, #300]	; (8002cb8 <MX_TIM1_Init+0x180>)
 8002b8a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b8e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b90:	4b49      	ldr	r3, [pc, #292]	; (8002cb8 <MX_TIM1_Init+0x180>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b96:	4b48      	ldr	r3, [pc, #288]	; (8002cb8 <MX_TIM1_Init+0x180>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b9c:	4b46      	ldr	r3, [pc, #280]	; (8002cb8 <MX_TIM1_Init+0x180>)
 8002b9e:	2280      	movs	r2, #128	; 0x80
 8002ba0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002ba2:	4845      	ldr	r0, [pc, #276]	; (8002cb8 <MX_TIM1_Init+0x180>)
 8002ba4:	f008 fa5a 	bl	800b05c <HAL_TIM_Base_Init>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002bae:	f000 fff9 	bl	8003ba4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bb6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002bb8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	483e      	ldr	r0, [pc, #248]	; (8002cb8 <MX_TIM1_Init+0x180>)
 8002bc0:	f008 fde0 	bl	800b784 <HAL_TIM_ConfigClockSource>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002bca:	f000 ffeb 	bl	8003ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002bce:	483a      	ldr	r0, [pc, #232]	; (8002cb8 <MX_TIM1_Init+0x180>)
 8002bd0:	f008 fb04 	bl	800b1dc <HAL_TIM_PWM_Init>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002bda:	f000 ffe3 	bl	8003ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bde:	2300      	movs	r3, #0
 8002be0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002be2:	2300      	movs	r3, #0
 8002be4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002be6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002bea:	4619      	mov	r1, r3
 8002bec:	4832      	ldr	r0, [pc, #200]	; (8002cb8 <MX_TIM1_Init+0x180>)
 8002bee:	f009 f9d5 	bl	800bf9c <HAL_TIMEx_MasterConfigSynchronization>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002bf8:	f000 ffd4 	bl	8003ba4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bfc:	2360      	movs	r3, #96	; 0x60
 8002bfe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002c00:	2300      	movs	r3, #0
 8002c02:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c04:	2300      	movs	r3, #0
 8002c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c10:	2300      	movs	r3, #0
 8002c12:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c14:	2300      	movs	r3, #0
 8002c16:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4825      	ldr	r0, [pc, #148]	; (8002cb8 <MX_TIM1_Init+0x180>)
 8002c22:	f008 fced 	bl	800b600 <HAL_TIM_PWM_ConfigChannel>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002c2c:	f000 ffba 	bl	8003ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c34:	2204      	movs	r2, #4
 8002c36:	4619      	mov	r1, r3
 8002c38:	481f      	ldr	r0, [pc, #124]	; (8002cb8 <MX_TIM1_Init+0x180>)
 8002c3a:	f008 fce1 	bl	800b600 <HAL_TIM_PWM_ConfigChannel>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002c44:	f000 ffae 	bl	8003ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c4c:	2208      	movs	r2, #8
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4819      	ldr	r0, [pc, #100]	; (8002cb8 <MX_TIM1_Init+0x180>)
 8002c52:	f008 fcd5 	bl	800b600 <HAL_TIM_PWM_ConfigChannel>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002c5c:	f000 ffa2 	bl	8003ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c64:	220c      	movs	r2, #12
 8002c66:	4619      	mov	r1, r3
 8002c68:	4813      	ldr	r0, [pc, #76]	; (8002cb8 <MX_TIM1_Init+0x180>)
 8002c6a:	f008 fcc9 	bl	800b600 <HAL_TIM_PWM_ConfigChannel>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002c74:	f000 ff96 	bl	8003ba4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c84:	2300      	movs	r3, #0
 8002c86:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c90:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c92:	2300      	movs	r3, #0
 8002c94:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002c96:	1d3b      	adds	r3, r7, #4
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4807      	ldr	r0, [pc, #28]	; (8002cb8 <MX_TIM1_Init+0x180>)
 8002c9c:	f009 f9fa 	bl	800c094 <HAL_TIMEx_ConfigBreakDeadTime>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8002ca6:	f000 ff7d 	bl	8003ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002caa:	4803      	ldr	r0, [pc, #12]	; (8002cb8 <MX_TIM1_Init+0x180>)
 8002cac:	f005 f9fa 	bl	80080a4 <HAL_TIM_MspPostInit>

}
 8002cb0:	bf00      	nop
 8002cb2:	3758      	adds	r7, #88	; 0x58
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	200003ac 	.word	0x200003ac
 8002cbc:	40010000 	.word	0x40010000

08002cc0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b08e      	sub	sp, #56	; 0x38
 8002cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cca:	2200      	movs	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]
 8002cce:	605a      	str	r2, [r3, #4]
 8002cd0:	609a      	str	r2, [r3, #8]
 8002cd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cd4:	f107 0320 	add.w	r3, r7, #32
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cde:	1d3b      	adds	r3, r7, #4
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	605a      	str	r2, [r3, #4]
 8002ce6:	609a      	str	r2, [r3, #8]
 8002ce8:	60da      	str	r2, [r3, #12]
 8002cea:	611a      	str	r2, [r3, #16]
 8002cec:	615a      	str	r2, [r3, #20]
 8002cee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002cf0:	4b3d      	ldr	r3, [pc, #244]	; (8002de8 <MX_TIM3_Init+0x128>)
 8002cf2:	4a3e      	ldr	r2, [pc, #248]	; (8002dec <MX_TIM3_Init+0x12c>)
 8002cf4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4-1;
 8002cf6:	4b3c      	ldr	r3, [pc, #240]	; (8002de8 <MX_TIM3_Init+0x128>)
 8002cf8:	2203      	movs	r2, #3
 8002cfa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cfc:	4b3a      	ldr	r3, [pc, #232]	; (8002de8 <MX_TIM3_Init+0x128>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8002d02:	4b39      	ldr	r3, [pc, #228]	; (8002de8 <MX_TIM3_Init+0x128>)
 8002d04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d08:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d0a:	4b37      	ldr	r3, [pc, #220]	; (8002de8 <MX_TIM3_Init+0x128>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d10:	4b35      	ldr	r3, [pc, #212]	; (8002de8 <MX_TIM3_Init+0x128>)
 8002d12:	2280      	movs	r2, #128	; 0x80
 8002d14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d16:	4834      	ldr	r0, [pc, #208]	; (8002de8 <MX_TIM3_Init+0x128>)
 8002d18:	f008 f9a0 	bl	800b05c <HAL_TIM_Base_Init>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002d22:	f000 ff3f 	bl	8003ba4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d30:	4619      	mov	r1, r3
 8002d32:	482d      	ldr	r0, [pc, #180]	; (8002de8 <MX_TIM3_Init+0x128>)
 8002d34:	f008 fd26 	bl	800b784 <HAL_TIM_ConfigClockSource>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002d3e:	f000 ff31 	bl	8003ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002d42:	4829      	ldr	r0, [pc, #164]	; (8002de8 <MX_TIM3_Init+0x128>)
 8002d44:	f008 fa4a 	bl	800b1dc <HAL_TIM_PWM_Init>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002d4e:	f000 ff29 	bl	8003ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d52:	2300      	movs	r3, #0
 8002d54:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d56:	2300      	movs	r3, #0
 8002d58:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d5a:	f107 0320 	add.w	r3, r7, #32
 8002d5e:	4619      	mov	r1, r3
 8002d60:	4821      	ldr	r0, [pc, #132]	; (8002de8 <MX_TIM3_Init+0x128>)
 8002d62:	f009 f91b 	bl	800bf9c <HAL_TIMEx_MasterConfigSynchronization>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002d6c:	f000 ff1a 	bl	8003ba4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d70:	2360      	movs	r3, #96	; 0x60
 8002d72:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002d74:	2300      	movs	r3, #0
 8002d76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d80:	1d3b      	adds	r3, r7, #4
 8002d82:	2200      	movs	r2, #0
 8002d84:	4619      	mov	r1, r3
 8002d86:	4818      	ldr	r0, [pc, #96]	; (8002de8 <MX_TIM3_Init+0x128>)
 8002d88:	f008 fc3a 	bl	800b600 <HAL_TIM_PWM_ConfigChannel>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002d92:	f000 ff07 	bl	8003ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d96:	1d3b      	adds	r3, r7, #4
 8002d98:	2204      	movs	r2, #4
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4812      	ldr	r0, [pc, #72]	; (8002de8 <MX_TIM3_Init+0x128>)
 8002d9e:	f008 fc2f 	bl	800b600 <HAL_TIM_PWM_ConfigChannel>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002da8:	f000 fefc 	bl	8003ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002dac:	1d3b      	adds	r3, r7, #4
 8002dae:	2208      	movs	r2, #8
 8002db0:	4619      	mov	r1, r3
 8002db2:	480d      	ldr	r0, [pc, #52]	; (8002de8 <MX_TIM3_Init+0x128>)
 8002db4:	f008 fc24 	bl	800b600 <HAL_TIM_PWM_ConfigChannel>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8002dbe:	f000 fef1 	bl	8003ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002dc2:	1d3b      	adds	r3, r7, #4
 8002dc4:	220c      	movs	r2, #12
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4807      	ldr	r0, [pc, #28]	; (8002de8 <MX_TIM3_Init+0x128>)
 8002dca:	f008 fc19 	bl	800b600 <HAL_TIM_PWM_ConfigChannel>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8002dd4:	f000 fee6 	bl	8003ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002dd8:	4803      	ldr	r0, [pc, #12]	; (8002de8 <MX_TIM3_Init+0x128>)
 8002dda:	f005 f963 	bl	80080a4 <HAL_TIM_MspPostInit>

}
 8002dde:	bf00      	nop
 8002de0:	3738      	adds	r7, #56	; 0x38
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	200003f4 	.word	0x200003f4
 8002dec:	40000400 	.word	0x40000400

08002df0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002df4:	4b0e      	ldr	r3, [pc, #56]	; (8002e30 <MX_TIM13_Init+0x40>)
 8002df6:	4a0f      	ldr	r2, [pc, #60]	; (8002e34 <MX_TIM13_Init+0x44>)
 8002df8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 13;
 8002dfa:	4b0d      	ldr	r3, [pc, #52]	; (8002e30 <MX_TIM13_Init+0x40>)
 8002dfc:	220d      	movs	r2, #13
 8002dfe:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e00:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <MX_TIM13_Init+0x40>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 59999;
 8002e06:	4b0a      	ldr	r3, [pc, #40]	; (8002e30 <MX_TIM13_Init+0x40>)
 8002e08:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8002e0c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e0e:	4b08      	ldr	r3, [pc, #32]	; (8002e30 <MX_TIM13_Init+0x40>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e14:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <MX_TIM13_Init+0x40>)
 8002e16:	2280      	movs	r2, #128	; 0x80
 8002e18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002e1a:	4805      	ldr	r0, [pc, #20]	; (8002e30 <MX_TIM13_Init+0x40>)
 8002e1c:	f008 f91e 	bl	800b05c <HAL_TIM_Base_Init>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8002e26:	f000 febd 	bl	8003ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002e2a:	bf00      	nop
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	2000043c 	.word	0x2000043c
 8002e34:	40001c00 	.word	0x40001c00

08002e38 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002e3c:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <MX_USART3_UART_Init+0x4c>)
 8002e3e:	4a12      	ldr	r2, [pc, #72]	; (8002e88 <MX_USART3_UART_Init+0x50>)
 8002e40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002e42:	4b10      	ldr	r3, [pc, #64]	; (8002e84 <MX_USART3_UART_Init+0x4c>)
 8002e44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e4a:	4b0e      	ldr	r3, [pc, #56]	; (8002e84 <MX_USART3_UART_Init+0x4c>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e50:	4b0c      	ldr	r3, [pc, #48]	; (8002e84 <MX_USART3_UART_Init+0x4c>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e56:	4b0b      	ldr	r3, [pc, #44]	; (8002e84 <MX_USART3_UART_Init+0x4c>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e5c:	4b09      	ldr	r3, [pc, #36]	; (8002e84 <MX_USART3_UART_Init+0x4c>)
 8002e5e:	220c      	movs	r2, #12
 8002e60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e62:	4b08      	ldr	r3, [pc, #32]	; (8002e84 <MX_USART3_UART_Init+0x4c>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e68:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <MX_USART3_UART_Init+0x4c>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e6e:	4805      	ldr	r0, [pc, #20]	; (8002e84 <MX_USART3_UART_Init+0x4c>)
 8002e70:	f009 f976 	bl	800c160 <HAL_UART_Init>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002e7a:	f000 fe93 	bl	8003ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002e7e:	bf00      	nop
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	20000484 	.word	0x20000484
 8002e88:	40004800 	.word	0x40004800

08002e8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e92:	2300      	movs	r3, #0
 8002e94:	607b      	str	r3, [r7, #4]
 8002e96:	4b18      	ldr	r3, [pc, #96]	; (8002ef8 <MX_DMA_Init+0x6c>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	4a17      	ldr	r2, [pc, #92]	; (8002ef8 <MX_DMA_Init+0x6c>)
 8002e9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ea2:	4b15      	ldr	r3, [pc, #84]	; (8002ef8 <MX_DMA_Init+0x6c>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eaa:	607b      	str	r3, [r7, #4]
 8002eac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002eae:	2200      	movs	r2, #0
 8002eb0:	2105      	movs	r1, #5
 8002eb2:	200b      	movs	r0, #11
 8002eb4:	f005 fd96 	bl	80089e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002eb8:	200b      	movs	r0, #11
 8002eba:	f005 fdaf 	bl	8008a1c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2105      	movs	r1, #5
 8002ec2:	200c      	movs	r0, #12
 8002ec4:	f005 fd8e 	bl	80089e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002ec8:	200c      	movs	r0, #12
 8002eca:	f005 fda7 	bl	8008a1c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8002ece:	2200      	movs	r2, #0
 8002ed0:	2105      	movs	r1, #5
 8002ed2:	200e      	movs	r0, #14
 8002ed4:	f005 fd86 	bl	80089e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002ed8:	200e      	movs	r0, #14
 8002eda:	f005 fd9f 	bl	8008a1c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8002ede:	2200      	movs	r2, #0
 8002ee0:	2105      	movs	r1, #5
 8002ee2:	2011      	movs	r0, #17
 8002ee4:	f005 fd7e 	bl	80089e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002ee8:	2011      	movs	r0, #17
 8002eea:	f005 fd97 	bl	8008a1c <HAL_NVIC_EnableIRQ>

}
 8002eee:	bf00      	nop
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40023800 	.word	0x40023800

08002efc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b08e      	sub	sp, #56	; 0x38
 8002f00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	605a      	str	r2, [r3, #4]
 8002f0c:	609a      	str	r2, [r3, #8]
 8002f0e:	60da      	str	r2, [r3, #12]
 8002f10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f12:	2300      	movs	r3, #0
 8002f14:	623b      	str	r3, [r7, #32]
 8002f16:	4b6d      	ldr	r3, [pc, #436]	; (80030cc <MX_GPIO_Init+0x1d0>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	4a6c      	ldr	r2, [pc, #432]	; (80030cc <MX_GPIO_Init+0x1d0>)
 8002f1c:	f043 0304 	orr.w	r3, r3, #4
 8002f20:	6313      	str	r3, [r2, #48]	; 0x30
 8002f22:	4b6a      	ldr	r3, [pc, #424]	; (80030cc <MX_GPIO_Init+0x1d0>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	f003 0304 	and.w	r3, r3, #4
 8002f2a:	623b      	str	r3, [r7, #32]
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61fb      	str	r3, [r7, #28]
 8002f32:	4b66      	ldr	r3, [pc, #408]	; (80030cc <MX_GPIO_Init+0x1d0>)
 8002f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f36:	4a65      	ldr	r2, [pc, #404]	; (80030cc <MX_GPIO_Init+0x1d0>)
 8002f38:	f043 0320 	orr.w	r3, r3, #32
 8002f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f3e:	4b63      	ldr	r3, [pc, #396]	; (80030cc <MX_GPIO_Init+0x1d0>)
 8002f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f42:	f003 0320 	and.w	r3, r3, #32
 8002f46:	61fb      	str	r3, [r7, #28]
 8002f48:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	61bb      	str	r3, [r7, #24]
 8002f4e:	4b5f      	ldr	r3, [pc, #380]	; (80030cc <MX_GPIO_Init+0x1d0>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	4a5e      	ldr	r2, [pc, #376]	; (80030cc <MX_GPIO_Init+0x1d0>)
 8002f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f58:	6313      	str	r3, [r2, #48]	; 0x30
 8002f5a:	4b5c      	ldr	r3, [pc, #368]	; (80030cc <MX_GPIO_Init+0x1d0>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f62:	61bb      	str	r3, [r7, #24]
 8002f64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f66:	2300      	movs	r3, #0
 8002f68:	617b      	str	r3, [r7, #20]
 8002f6a:	4b58      	ldr	r3, [pc, #352]	; (80030cc <MX_GPIO_Init+0x1d0>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	4a57      	ldr	r2, [pc, #348]	; (80030cc <MX_GPIO_Init+0x1d0>)
 8002f70:	f043 0301 	orr.w	r3, r3, #1
 8002f74:	6313      	str	r3, [r2, #48]	; 0x30
 8002f76:	4b55      	ldr	r3, [pc, #340]	; (80030cc <MX_GPIO_Init+0x1d0>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	617b      	str	r3, [r7, #20]
 8002f80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f82:	2300      	movs	r3, #0
 8002f84:	613b      	str	r3, [r7, #16]
 8002f86:	4b51      	ldr	r3, [pc, #324]	; (80030cc <MX_GPIO_Init+0x1d0>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	4a50      	ldr	r2, [pc, #320]	; (80030cc <MX_GPIO_Init+0x1d0>)
 8002f8c:	f043 0302 	orr.w	r3, r3, #2
 8002f90:	6313      	str	r3, [r2, #48]	; 0x30
 8002f92:	4b4e      	ldr	r3, [pc, #312]	; (80030cc <MX_GPIO_Init+0x1d0>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	613b      	str	r3, [r7, #16]
 8002f9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	4b4a      	ldr	r3, [pc, #296]	; (80030cc <MX_GPIO_Init+0x1d0>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	4a49      	ldr	r2, [pc, #292]	; (80030cc <MX_GPIO_Init+0x1d0>)
 8002fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fac:	6313      	str	r3, [r2, #48]	; 0x30
 8002fae:	4b47      	ldr	r3, [pc, #284]	; (80030cc <MX_GPIO_Init+0x1d0>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002fba:	2300      	movs	r3, #0
 8002fbc:	60bb      	str	r3, [r7, #8]
 8002fbe:	4b43      	ldr	r3, [pc, #268]	; (80030cc <MX_GPIO_Init+0x1d0>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc2:	4a42      	ldr	r2, [pc, #264]	; (80030cc <MX_GPIO_Init+0x1d0>)
 8002fc4:	f043 0310 	orr.w	r3, r3, #16
 8002fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fca:	4b40      	ldr	r3, [pc, #256]	; (80030cc <MX_GPIO_Init+0x1d0>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	f003 0310 	and.w	r3, r3, #16
 8002fd2:	60bb      	str	r3, [r7, #8]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	607b      	str	r3, [r7, #4]
 8002fda:	4b3c      	ldr	r3, [pc, #240]	; (80030cc <MX_GPIO_Init+0x1d0>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fde:	4a3b      	ldr	r2, [pc, #236]	; (80030cc <MX_GPIO_Init+0x1d0>)
 8002fe0:	f043 0308 	orr.w	r3, r3, #8
 8002fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe6:	4b39      	ldr	r3, [pc, #228]	; (80030cc <MX_GPIO_Init+0x1d0>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	f003 0308 	and.w	r3, r3, #8
 8002fee:	607b      	str	r3, [r7, #4]
 8002ff0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ENB2_Pin|ENB3_Pin|ENB4_Pin, GPIO_PIN_RESET);
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f241 4102 	movw	r1, #5122	; 0x1402
 8002ff8:	4835      	ldr	r0, [pc, #212]	; (80030d0 <MX_GPIO_Init+0x1d4>)
 8002ffa:	f006 fae3 	bl	80095c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_RED_GPIO_Port, LD_RED_Pin, GPIO_PIN_RESET);
 8002ffe:	2200      	movs	r2, #0
 8003000:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003004:	4833      	ldr	r0, [pc, #204]	; (80030d4 <MX_GPIO_Init+0x1d8>)
 8003006:	f006 fadd 	bl	80095c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENB1_GPIO_Port, ENB1_Pin, GPIO_PIN_RESET);
 800300a:	2200      	movs	r2, #0
 800300c:	2101      	movs	r1, #1
 800300e:	4832      	ldr	r0, [pc, #200]	; (80030d8 <MX_GPIO_Init+0x1dc>)
 8003010:	f006 fad8 	bl	80095c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENC_EXT3_B_Pin ENC_EXT1_A_Pin ENC_EXT2_A_Pin ENC_EXT3_A_Pin
                           ENC_EXT2_B_Pin */
  GPIO_InitStruct.Pin = ENC_EXT3_B_Pin|ENC_EXT1_A_Pin|ENC_EXT2_A_Pin|ENC_EXT3_A_Pin
 8003014:	f64b 0308 	movw	r3, #47112	; 0xb808
 8003018:	627b      	str	r3, [r7, #36]	; 0x24
                          |ENC_EXT2_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800301a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800301e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003020:	2301      	movs	r3, #1
 8003022:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003024:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003028:	4619      	mov	r1, r3
 800302a:	482c      	ldr	r0, [pc, #176]	; (80030dc <MX_GPIO_Init+0x1e0>)
 800302c:	f006 f906 	bl	800923c <HAL_GPIO_Init>

  /*Configure GPIO pins : ENB2_Pin ENB3_Pin ENB4_Pin */
  GPIO_InitStruct.Pin = ENB2_Pin|ENB3_Pin|ENB4_Pin;
 8003030:	f241 4302 	movw	r3, #5122	; 0x1402
 8003034:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003036:	2301      	movs	r3, #1
 8003038:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303a:	2300      	movs	r3, #0
 800303c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800303e:	2300      	movs	r3, #0
 8003040:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003046:	4619      	mov	r1, r3
 8003048:	4821      	ldr	r0, [pc, #132]	; (80030d0 <MX_GPIO_Init+0x1d4>)
 800304a:	f006 f8f7 	bl	800923c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_RED_Pin */
  GPIO_InitStruct.Pin = LD_RED_Pin;
 800304e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003052:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003054:	2301      	movs	r3, #1
 8003056:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003058:	2300      	movs	r3, #0
 800305a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800305c:	2300      	movs	r3, #0
 800305e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD_RED_GPIO_Port, &GPIO_InitStruct);
 8003060:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003064:	4619      	mov	r1, r3
 8003066:	481b      	ldr	r0, [pc, #108]	; (80030d4 <MX_GPIO_Init+0x1d8>)
 8003068:	f006 f8e8 	bl	800923c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENB1_Pin */
  GPIO_InitStruct.Pin = ENB1_Pin;
 800306c:	2301      	movs	r3, #1
 800306e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003070:	2301      	movs	r3, #1
 8003072:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003074:	2300      	movs	r3, #0
 8003076:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003078:	2300      	movs	r3, #0
 800307a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ENB1_GPIO_Port, &GPIO_InitStruct);
 800307c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003080:	4619      	mov	r1, r3
 8003082:	4815      	ldr	r0, [pc, #84]	; (80030d8 <MX_GPIO_Init+0x1dc>)
 8003084:	f006 f8da 	bl	800923c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_EXT1_B_Pin */
  GPIO_InitStruct.Pin = ENC_EXT1_B_Pin;
 8003088:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800308c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800308e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003092:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003094:	2301      	movs	r3, #1
 8003096:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENC_EXT1_B_GPIO_Port, &GPIO_InitStruct);
 8003098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800309c:	4619      	mov	r1, r3
 800309e:	480c      	ldr	r0, [pc, #48]	; (80030d0 <MX_GPIO_Init+0x1d4>)
 80030a0:	f006 f8cc 	bl	800923c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80030a4:	2200      	movs	r2, #0
 80030a6:	2105      	movs	r1, #5
 80030a8:	2009      	movs	r0, #9
 80030aa:	f005 fc9b 	bl	80089e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80030ae:	2009      	movs	r0, #9
 80030b0:	f005 fcb4 	bl	8008a1c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80030b4:	2200      	movs	r2, #0
 80030b6:	2105      	movs	r1, #5
 80030b8:	2028      	movs	r0, #40	; 0x28
 80030ba:	f005 fc93 	bl	80089e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80030be:	2028      	movs	r0, #40	; 0x28
 80030c0:	f005 fcac 	bl	8008a1c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80030c4:	bf00      	nop
 80030c6:	3738      	adds	r7, #56	; 0x38
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40023800 	.word	0x40023800
 80030d0:	40021800 	.word	0x40021800
 80030d4:	40020400 	.word	0x40020400
 80030d8:	40020c00 	.word	0x40020c00
 80030dc:	40021400 	.word	0x40021400

080030e0 <imuCallback>:

/* USER CODE BEGIN 4 */

int imuCallback(int degree){
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
	int theta = 0;
 80030e8:	2300      	movs	r3, #0
 80030ea:	60fb      	str	r3, [r7, #12]
	int z = degree;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	60bb      	str	r3, [r7, #8]
	if(z > 180) z -= 360;
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	2bb4      	cmp	r3, #180	; 0xb4
 80030f4:	dd03      	ble.n	80030fe <imuCallback+0x1e>
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80030fc:	60bb      	str	r3, [r7, #8]
	if(yawRef > 180) yawRef -= yawRef;
 80030fe:	4b11      	ldr	r3, [pc, #68]	; (8003144 <imuCallback+0x64>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2bb4      	cmp	r3, #180	; 0xb4
 8003104:	dd02      	ble.n	800310c <imuCallback+0x2c>
 8003106:	4b0f      	ldr	r3, [pc, #60]	; (8003144 <imuCallback+0x64>)
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
	theta = -z + yawRef;
 800310c:	4b0d      	ldr	r3, [pc, #52]	; (8003144 <imuCallback+0x64>)
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	60fb      	str	r3, [r7, #12]
	if(theta < -180) theta += 360;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 800311c:	da04      	bge.n	8003128 <imuCallback+0x48>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003124:	60fb      	str	r3, [r7, #12]
 8003126:	e006      	b.n	8003136 <imuCallback+0x56>
	else if(theta > 180) theta -= 360;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2bb4      	cmp	r3, #180	; 0xb4
 800312c:	dd03      	ble.n	8003136 <imuCallback+0x56>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003134:	60fb      	str	r3, [r7, #12]

	return theta;
 8003136:	68fb      	ldr	r3, [r7, #12]
}
 8003138:	4618      	mov	r0, r3
 800313a:	3714      	adds	r7, #20
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	20000a48 	.word	0x20000a48

08003148 <initializeMotor>:

void initializeMotor() {
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800314c:	2100      	movs	r1, #0
 800314e:	481b      	ldr	r0, [pc, #108]	; (80031bc <initializeMotor+0x74>)
 8003150:	f008 f89e 	bl	800b290 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003154:	2104      	movs	r1, #4
 8003156:	4819      	ldr	r0, [pc, #100]	; (80031bc <initializeMotor+0x74>)
 8003158:	f008 f89a 	bl	800b290 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800315c:	2108      	movs	r1, #8
 800315e:	4817      	ldr	r0, [pc, #92]	; (80031bc <initializeMotor+0x74>)
 8003160:	f008 f896 	bl	800b290 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8003164:	210c      	movs	r1, #12
 8003166:	4815      	ldr	r0, [pc, #84]	; (80031bc <initializeMotor+0x74>)
 8003168:	f008 f892 	bl	800b290 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800316c:	2100      	movs	r1, #0
 800316e:	4814      	ldr	r0, [pc, #80]	; (80031c0 <initializeMotor+0x78>)
 8003170:	f008 f88e 	bl	800b290 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003174:	2104      	movs	r1, #4
 8003176:	4812      	ldr	r0, [pc, #72]	; (80031c0 <initializeMotor+0x78>)
 8003178:	f008 f88a 	bl	800b290 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800317c:	2108      	movs	r1, #8
 800317e:	4810      	ldr	r0, [pc, #64]	; (80031c0 <initializeMotor+0x78>)
 8003180:	f008 f886 	bl	800b290 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003184:	210c      	movs	r1, #12
 8003186:	480e      	ldr	r0, [pc, #56]	; (80031c0 <initializeMotor+0x78>)
 8003188:	f008 f882 	bl	800b290 <HAL_TIM_PWM_Start>

	HAL_GPIO_WritePin(ENB1_GPIO_Port, ENB1_Pin, GPIO_PIN_SET);
 800318c:	2201      	movs	r2, #1
 800318e:	2101      	movs	r1, #1
 8003190:	480c      	ldr	r0, [pc, #48]	; (80031c4 <initializeMotor+0x7c>)
 8003192:	f006 fa17 	bl	80095c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENB2_GPIO_Port, ENB2_Pin, GPIO_PIN_SET);
 8003196:	2201      	movs	r2, #1
 8003198:	2102      	movs	r1, #2
 800319a:	480b      	ldr	r0, [pc, #44]	; (80031c8 <initializeMotor+0x80>)
 800319c:	f006 fa12 	bl	80095c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENB3_GPIO_Port, ENB3_Pin, GPIO_PIN_SET);
 80031a0:	2201      	movs	r2, #1
 80031a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80031a6:	4808      	ldr	r0, [pc, #32]	; (80031c8 <initializeMotor+0x80>)
 80031a8:	f006 fa0c 	bl	80095c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENB4_GPIO_Port, ENB4_Pin, GPIO_PIN_SET);
 80031ac:	2201      	movs	r2, #1
 80031ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80031b2:	4805      	ldr	r0, [pc, #20]	; (80031c8 <initializeMotor+0x80>)
 80031b4:	f006 fa06 	bl	80095c4 <HAL_GPIO_WritePin>
}
 80031b8:	bf00      	nop
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	200003ac 	.word	0x200003ac
 80031c0:	200003f4 	.word	0x200003f4
 80031c4:	40020c00 	.word	0x40020c00
 80031c8:	40021800 	.word	0x40021800

080031cc <setPwm>:

void setPwm(uint8_t Motor, int pwm) {
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	4603      	mov	r3, r0
 80031d4:	6039      	str	r1, [r7, #0]
 80031d6:	71fb      	strb	r3, [r7, #7]
	switch (Motor) {
 80031d8:	79fb      	ldrb	r3, [r7, #7]
 80031da:	2b03      	cmp	r3, #3
 80031dc:	f200 8088 	bhi.w	80032f0 <setPwm+0x124>
 80031e0:	a201      	add	r2, pc, #4	; (adr r2, 80031e8 <setPwm+0x1c>)
 80031e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e6:	bf00      	nop
 80031e8:	080031f9 	.word	0x080031f9
 80031ec:	08003237 	.word	0x08003237
 80031f0:	08003275 	.word	0x08003275
 80031f4:	080032b3 	.word	0x080032b3
	case 0: // LEFT FRONT
		if (pwm > 0) {
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	dd06      	ble.n	800320c <setPwm+0x40>
			TIM3->CCR1 = pwm;
 80031fe:	4a4c      	ldr	r2, [pc, #304]	; (8003330 <setPwm+0x164>)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	6353      	str	r3, [r2, #52]	; 0x34
			TIM3->CCR4 = 0;
 8003204:	4b4a      	ldr	r3, [pc, #296]	; (8003330 <setPwm+0x164>)
 8003206:	2200      	movs	r2, #0
 8003208:	641a      	str	r2, [r3, #64]	; 0x40
			TIM3->CCR4 = abs(pwm);
		} else {
			TIM3->CCR1 = 0;
			TIM3->CCR4 = 0;
		}
		break;
 800320a:	e08a      	b.n	8003322 <setPwm+0x156>
		} else if (pwm < 0) {
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	da0a      	bge.n	8003228 <setPwm+0x5c>
			TIM3->CCR1 = 0;
 8003212:	4b47      	ldr	r3, [pc, #284]	; (8003330 <setPwm+0x164>)
 8003214:	2200      	movs	r2, #0
 8003216:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR4 = abs(pwm);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800321e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003222:	4b43      	ldr	r3, [pc, #268]	; (8003330 <setPwm+0x164>)
 8003224:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8003226:	e07c      	b.n	8003322 <setPwm+0x156>
			TIM3->CCR1 = 0;
 8003228:	4b41      	ldr	r3, [pc, #260]	; (8003330 <setPwm+0x164>)
 800322a:	2200      	movs	r2, #0
 800322c:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR4 = 0;
 800322e:	4b40      	ldr	r3, [pc, #256]	; (8003330 <setPwm+0x164>)
 8003230:	2200      	movs	r2, #0
 8003232:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8003234:	e075      	b.n	8003322 <setPwm+0x156>
	case 1: // LEFT BACK
		if (pwm > 0) {
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	dd06      	ble.n	800324a <setPwm+0x7e>
			TIM1->CCR1 = pwm;
 800323c:	4a3d      	ldr	r2, [pc, #244]	; (8003334 <setPwm+0x168>)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	6353      	str	r3, [r2, #52]	; 0x34
			TIM1->CCR2 = 0;
 8003242:	4b3c      	ldr	r3, [pc, #240]	; (8003334 <setPwm+0x168>)
 8003244:	2200      	movs	r2, #0
 8003246:	639a      	str	r2, [r3, #56]	; 0x38
		} else {
			TIM1->CCR1 = 0;
			TIM1->CCR2 = 0;
		}

		break;
 8003248:	e06b      	b.n	8003322 <setPwm+0x156>
		} else if (pwm < 0) {
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	da0a      	bge.n	8003266 <setPwm+0x9a>
			TIM1->CCR1 = 0;
 8003250:	4b38      	ldr	r3, [pc, #224]	; (8003334 <setPwm+0x168>)
 8003252:	2200      	movs	r2, #0
 8003254:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = abs(pwm);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800325c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003260:	4b34      	ldr	r3, [pc, #208]	; (8003334 <setPwm+0x168>)
 8003262:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8003264:	e05d      	b.n	8003322 <setPwm+0x156>
			TIM1->CCR1 = 0;
 8003266:	4b33      	ldr	r3, [pc, #204]	; (8003334 <setPwm+0x168>)
 8003268:	2200      	movs	r2, #0
 800326a:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = 0;
 800326c:	4b31      	ldr	r3, [pc, #196]	; (8003334 <setPwm+0x168>)
 800326e:	2200      	movs	r2, #0
 8003270:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8003272:	e056      	b.n	8003322 <setPwm+0x156>
	case 2: // RIGHT BACK
		if (pwm > 0) {
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	dd06      	ble.n	8003288 <setPwm+0xbc>
			TIM1->CCR3 = 0;
 800327a:	4b2e      	ldr	r3, [pc, #184]	; (8003334 <setPwm+0x168>)
 800327c:	2200      	movs	r2, #0
 800327e:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM1->CCR4 = pwm;
 8003280:	4a2c      	ldr	r2, [pc, #176]	; (8003334 <setPwm+0x168>)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	6413      	str	r3, [r2, #64]	; 0x40
		} else {
			TIM1->CCR3 = 0;
			TIM1->CCR4 = 0;
		}

		break;
 8003286:	e04c      	b.n	8003322 <setPwm+0x156>
		} else if (pwm < 0) {
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	da0a      	bge.n	80032a4 <setPwm+0xd8>
			TIM1->CCR3 = abs(pwm);
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003294:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003298:	4b26      	ldr	r3, [pc, #152]	; (8003334 <setPwm+0x168>)
 800329a:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM1->CCR4 = 0;
 800329c:	4b25      	ldr	r3, [pc, #148]	; (8003334 <setPwm+0x168>)
 800329e:	2200      	movs	r2, #0
 80032a0:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 80032a2:	e03e      	b.n	8003322 <setPwm+0x156>
			TIM1->CCR3 = 0;
 80032a4:	4b23      	ldr	r3, [pc, #140]	; (8003334 <setPwm+0x168>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM1->CCR4 = 0;
 80032aa:	4b22      	ldr	r3, [pc, #136]	; (8003334 <setPwm+0x168>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 80032b0:	e037      	b.n	8003322 <setPwm+0x156>
	case 3: // RIGHT FRONT
		if (pwm > 0) {
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	dd06      	ble.n	80032c6 <setPwm+0xfa>
			TIM3->CCR2 = pwm;
 80032b8:	4a1d      	ldr	r2, [pc, #116]	; (8003330 <setPwm+0x164>)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	6393      	str	r3, [r2, #56]	; 0x38
			TIM3->CCR3 = 0;
 80032be:	4b1c      	ldr	r3, [pc, #112]	; (8003330 <setPwm+0x164>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM3->CCR3 = abs(pwm);
		} else {
			TIM3->CCR2 = 0;
			TIM3->CCR3 = 0;
		}
		break;
 80032c4:	e02d      	b.n	8003322 <setPwm+0x156>
		} else if (pwm < 0) {
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	da0a      	bge.n	80032e2 <setPwm+0x116>
			TIM3->CCR2 = 0;
 80032cc:	4b18      	ldr	r3, [pc, #96]	; (8003330 <setPwm+0x164>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3->CCR3 = abs(pwm);
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80032d8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80032dc:	4b14      	ldr	r3, [pc, #80]	; (8003330 <setPwm+0x164>)
 80032de:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 80032e0:	e01f      	b.n	8003322 <setPwm+0x156>
			TIM3->CCR2 = 0;
 80032e2:	4b13      	ldr	r3, [pc, #76]	; (8003330 <setPwm+0x164>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3->CCR3 = 0;
 80032e8:	4b11      	ldr	r3, [pc, #68]	; (8003330 <setPwm+0x164>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 80032ee:	e018      	b.n	8003322 <setPwm+0x156>

	default:
		TIM1->CCR1 = 0;
 80032f0:	4b10      	ldr	r3, [pc, #64]	; (8003334 <setPwm+0x168>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 80032f6:	4b0f      	ldr	r3, [pc, #60]	; (8003334 <setPwm+0x168>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 80032fc:	4b0d      	ldr	r3, [pc, #52]	; (8003334 <setPwm+0x168>)
 80032fe:	2200      	movs	r2, #0
 8003300:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR4 = 0;
 8003302:	4b0c      	ldr	r3, [pc, #48]	; (8003334 <setPwm+0x168>)
 8003304:	2200      	movs	r2, #0
 8003306:	641a      	str	r2, [r3, #64]	; 0x40
		TIM3->CCR1 = 0;
 8003308:	4b09      	ldr	r3, [pc, #36]	; (8003330 <setPwm+0x164>)
 800330a:	2200      	movs	r2, #0
 800330c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = 0;
 800330e:	4b08      	ldr	r3, [pc, #32]	; (8003330 <setPwm+0x164>)
 8003310:	2200      	movs	r2, #0
 8003312:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = 0;
 8003314:	4b06      	ldr	r3, [pc, #24]	; (8003330 <setPwm+0x164>)
 8003316:	2200      	movs	r2, #0
 8003318:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM3->CCR4 = 0;
 800331a:	4b05      	ldr	r3, [pc, #20]	; (8003330 <setPwm+0x164>)
 800331c:	2200      	movs	r2, #0
 800331e:	641a      	str	r2, [r3, #64]	; 0x40
	}
}
 8003320:	bf00      	nop
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	40000400 	.word	0x40000400
 8003334:	40010000 	.word	0x40010000

08003338 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	4603      	mov	r3, r0
 8003340:	80fb      	strh	r3, [r7, #6]
	//Encoder External 1
	if (GPIO_Pin == ENC_EXT1_A_Pin) {
 8003342:	88fb      	ldrh	r3, [r7, #6]
 8003344:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003348:	d14a      	bne.n	80033e0 <HAL_GPIO_EXTI_Callback+0xa8>
		if ((ENC1B_HIGH && ENC1A_LOW) || (ENC1B_LOW && ENC1A_HIGH)) {
 800334a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800334e:	4888      	ldr	r0, [pc, #544]	; (8003570 <HAL_GPIO_EXTI_Callback+0x238>)
 8003350:	f006 f920 	bl	8009594 <HAL_GPIO_ReadPin>
 8003354:	4603      	mov	r3, r0
 8003356:	2b01      	cmp	r3, #1
 8003358:	d107      	bne.n	800336a <HAL_GPIO_EXTI_Callback+0x32>
 800335a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800335e:	4885      	ldr	r0, [pc, #532]	; (8003574 <HAL_GPIO_EXTI_Callback+0x23c>)
 8003360:	f006 f918 	bl	8009594 <HAL_GPIO_ReadPin>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00f      	beq.n	800338a <HAL_GPIO_EXTI_Callback+0x52>
 800336a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800336e:	4880      	ldr	r0, [pc, #512]	; (8003570 <HAL_GPIO_EXTI_Callback+0x238>)
 8003370:	f006 f910 	bl	8009594 <HAL_GPIO_ReadPin>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10d      	bne.n	8003396 <HAL_GPIO_EXTI_Callback+0x5e>
 800337a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800337e:	487d      	ldr	r0, [pc, #500]	; (8003574 <HAL_GPIO_EXTI_Callback+0x23c>)
 8003380:	f006 f908 	bl	8009594 <HAL_GPIO_ReadPin>
 8003384:	4603      	mov	r3, r0
 8003386:	2b01      	cmp	r3, #1
 8003388:	d105      	bne.n	8003396 <HAL_GPIO_EXTI_Callback+0x5e>
			valueENC_EXT[0]--;
 800338a:	4b7b      	ldr	r3, [pc, #492]	; (8003578 <HAL_GPIO_EXTI_Callback+0x240>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	3b01      	subs	r3, #1
 8003390:	4a79      	ldr	r2, [pc, #484]	; (8003578 <HAL_GPIO_EXTI_Callback+0x240>)
 8003392:	6013      	str	r3, [r2, #0]
 8003394:	e024      	b.n	80033e0 <HAL_GPIO_EXTI_Callback+0xa8>
		} else if ((ENC1B_HIGH && ENC1A_HIGH) || (ENC1B_LOW && ENC1A_LOW)) {
 8003396:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800339a:	4875      	ldr	r0, [pc, #468]	; (8003570 <HAL_GPIO_EXTI_Callback+0x238>)
 800339c:	f006 f8fa 	bl	8009594 <HAL_GPIO_ReadPin>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d107      	bne.n	80033b6 <HAL_GPIO_EXTI_Callback+0x7e>
 80033a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80033aa:	4872      	ldr	r0, [pc, #456]	; (8003574 <HAL_GPIO_EXTI_Callback+0x23c>)
 80033ac:	f006 f8f2 	bl	8009594 <HAL_GPIO_ReadPin>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d00f      	beq.n	80033d6 <HAL_GPIO_EXTI_Callback+0x9e>
 80033b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80033ba:	486d      	ldr	r0, [pc, #436]	; (8003570 <HAL_GPIO_EXTI_Callback+0x238>)
 80033bc:	f006 f8ea 	bl	8009594 <HAL_GPIO_ReadPin>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10c      	bne.n	80033e0 <HAL_GPIO_EXTI_Callback+0xa8>
 80033c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80033ca:	486a      	ldr	r0, [pc, #424]	; (8003574 <HAL_GPIO_EXTI_Callback+0x23c>)
 80033cc:	f006 f8e2 	bl	8009594 <HAL_GPIO_ReadPin>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d104      	bne.n	80033e0 <HAL_GPIO_EXTI_Callback+0xa8>
			valueENC_EXT[0]++;
 80033d6:	4b68      	ldr	r3, [pc, #416]	; (8003578 <HAL_GPIO_EXTI_Callback+0x240>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	3301      	adds	r3, #1
 80033dc:	4a66      	ldr	r2, [pc, #408]	; (8003578 <HAL_GPIO_EXTI_Callback+0x240>)
 80033de:	6013      	str	r3, [r2, #0]
		}
	}

	if (GPIO_Pin == ENC_EXT1_B_Pin) {
 80033e0:	88fb      	ldrh	r3, [r7, #6]
 80033e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033e6:	d14a      	bne.n	800347e <HAL_GPIO_EXTI_Callback+0x146>
		if ((ENC1B_HIGH && ENC1A_HIGH) || (ENC1B_LOW && ENC1A_LOW)) {
 80033e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80033ec:	4860      	ldr	r0, [pc, #384]	; (8003570 <HAL_GPIO_EXTI_Callback+0x238>)
 80033ee:	f006 f8d1 	bl	8009594 <HAL_GPIO_ReadPin>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d107      	bne.n	8003408 <HAL_GPIO_EXTI_Callback+0xd0>
 80033f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80033fc:	485d      	ldr	r0, [pc, #372]	; (8003574 <HAL_GPIO_EXTI_Callback+0x23c>)
 80033fe:	f006 f8c9 	bl	8009594 <HAL_GPIO_ReadPin>
 8003402:	4603      	mov	r3, r0
 8003404:	2b01      	cmp	r3, #1
 8003406:	d00f      	beq.n	8003428 <HAL_GPIO_EXTI_Callback+0xf0>
 8003408:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800340c:	4858      	ldr	r0, [pc, #352]	; (8003570 <HAL_GPIO_EXTI_Callback+0x238>)
 800340e:	f006 f8c1 	bl	8009594 <HAL_GPIO_ReadPin>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10d      	bne.n	8003434 <HAL_GPIO_EXTI_Callback+0xfc>
 8003418:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800341c:	4855      	ldr	r0, [pc, #340]	; (8003574 <HAL_GPIO_EXTI_Callback+0x23c>)
 800341e:	f006 f8b9 	bl	8009594 <HAL_GPIO_ReadPin>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d105      	bne.n	8003434 <HAL_GPIO_EXTI_Callback+0xfc>
			valueENC_EXT[0]--;
 8003428:	4b53      	ldr	r3, [pc, #332]	; (8003578 <HAL_GPIO_EXTI_Callback+0x240>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	3b01      	subs	r3, #1
 800342e:	4a52      	ldr	r2, [pc, #328]	; (8003578 <HAL_GPIO_EXTI_Callback+0x240>)
 8003430:	6013      	str	r3, [r2, #0]
 8003432:	e024      	b.n	800347e <HAL_GPIO_EXTI_Callback+0x146>
		} else if ((ENC1B_LOW && ENC1A_HIGH) || (ENC1B_HIGH && ENC1A_LOW)) {
 8003434:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003438:	484d      	ldr	r0, [pc, #308]	; (8003570 <HAL_GPIO_EXTI_Callback+0x238>)
 800343a:	f006 f8ab 	bl	8009594 <HAL_GPIO_ReadPin>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d107      	bne.n	8003454 <HAL_GPIO_EXTI_Callback+0x11c>
 8003444:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003448:	484a      	ldr	r0, [pc, #296]	; (8003574 <HAL_GPIO_EXTI_Callback+0x23c>)
 800344a:	f006 f8a3 	bl	8009594 <HAL_GPIO_ReadPin>
 800344e:	4603      	mov	r3, r0
 8003450:	2b01      	cmp	r3, #1
 8003452:	d00f      	beq.n	8003474 <HAL_GPIO_EXTI_Callback+0x13c>
 8003454:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003458:	4845      	ldr	r0, [pc, #276]	; (8003570 <HAL_GPIO_EXTI_Callback+0x238>)
 800345a:	f006 f89b 	bl	8009594 <HAL_GPIO_ReadPin>
 800345e:	4603      	mov	r3, r0
 8003460:	2b01      	cmp	r3, #1
 8003462:	d10c      	bne.n	800347e <HAL_GPIO_EXTI_Callback+0x146>
 8003464:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003468:	4842      	ldr	r0, [pc, #264]	; (8003574 <HAL_GPIO_EXTI_Callback+0x23c>)
 800346a:	f006 f893 	bl	8009594 <HAL_GPIO_ReadPin>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d104      	bne.n	800347e <HAL_GPIO_EXTI_Callback+0x146>
			valueENC_EXT[0]++;
 8003474:	4b40      	ldr	r3, [pc, #256]	; (8003578 <HAL_GPIO_EXTI_Callback+0x240>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	3301      	adds	r3, #1
 800347a:	4a3f      	ldr	r2, [pc, #252]	; (8003578 <HAL_GPIO_EXTI_Callback+0x240>)
 800347c:	6013      	str	r3, [r2, #0]
		}
	}
	//Encoder External 2
	if (GPIO_Pin == ENC_EXT2_A_Pin) {
 800347e:	88fb      	ldrh	r3, [r7, #6]
 8003480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003484:	d14a      	bne.n	800351c <HAL_GPIO_EXTI_Callback+0x1e4>
		if ((ENC2B_HIGH && ENC2A_LOW) || (ENC2B_LOW && ENC2A_HIGH)) {
 8003486:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800348a:	483a      	ldr	r0, [pc, #232]	; (8003574 <HAL_GPIO_EXTI_Callback+0x23c>)
 800348c:	f006 f882 	bl	8009594 <HAL_GPIO_ReadPin>
 8003490:	4603      	mov	r3, r0
 8003492:	2b01      	cmp	r3, #1
 8003494:	d107      	bne.n	80034a6 <HAL_GPIO_EXTI_Callback+0x16e>
 8003496:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800349a:	4836      	ldr	r0, [pc, #216]	; (8003574 <HAL_GPIO_EXTI_Callback+0x23c>)
 800349c:	f006 f87a 	bl	8009594 <HAL_GPIO_ReadPin>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00f      	beq.n	80034c6 <HAL_GPIO_EXTI_Callback+0x18e>
 80034a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034aa:	4832      	ldr	r0, [pc, #200]	; (8003574 <HAL_GPIO_EXTI_Callback+0x23c>)
 80034ac:	f006 f872 	bl	8009594 <HAL_GPIO_ReadPin>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10d      	bne.n	80034d2 <HAL_GPIO_EXTI_Callback+0x19a>
 80034b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80034ba:	482e      	ldr	r0, [pc, #184]	; (8003574 <HAL_GPIO_EXTI_Callback+0x23c>)
 80034bc:	f006 f86a 	bl	8009594 <HAL_GPIO_ReadPin>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d105      	bne.n	80034d2 <HAL_GPIO_EXTI_Callback+0x19a>
			valueENC_EXT[1]--;
 80034c6:	4b2c      	ldr	r3, [pc, #176]	; (8003578 <HAL_GPIO_EXTI_Callback+0x240>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	3b01      	subs	r3, #1
 80034cc:	4a2a      	ldr	r2, [pc, #168]	; (8003578 <HAL_GPIO_EXTI_Callback+0x240>)
 80034ce:	6053      	str	r3, [r2, #4]
 80034d0:	e024      	b.n	800351c <HAL_GPIO_EXTI_Callback+0x1e4>
		} else if ((ENC2B_HIGH && ENC2A_HIGH) || (ENC2B_LOW && ENC2A_LOW)) {
 80034d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034d6:	4827      	ldr	r0, [pc, #156]	; (8003574 <HAL_GPIO_EXTI_Callback+0x23c>)
 80034d8:	f006 f85c 	bl	8009594 <HAL_GPIO_ReadPin>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d107      	bne.n	80034f2 <HAL_GPIO_EXTI_Callback+0x1ba>
 80034e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80034e6:	4823      	ldr	r0, [pc, #140]	; (8003574 <HAL_GPIO_EXTI_Callback+0x23c>)
 80034e8:	f006 f854 	bl	8009594 <HAL_GPIO_ReadPin>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d00f      	beq.n	8003512 <HAL_GPIO_EXTI_Callback+0x1da>
 80034f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034f6:	481f      	ldr	r0, [pc, #124]	; (8003574 <HAL_GPIO_EXTI_Callback+0x23c>)
 80034f8:	f006 f84c 	bl	8009594 <HAL_GPIO_ReadPin>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10c      	bne.n	800351c <HAL_GPIO_EXTI_Callback+0x1e4>
 8003502:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003506:	481b      	ldr	r0, [pc, #108]	; (8003574 <HAL_GPIO_EXTI_Callback+0x23c>)
 8003508:	f006 f844 	bl	8009594 <HAL_GPIO_ReadPin>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d104      	bne.n	800351c <HAL_GPIO_EXTI_Callback+0x1e4>
			valueENC_EXT[1]++;
 8003512:	4b19      	ldr	r3, [pc, #100]	; (8003578 <HAL_GPIO_EXTI_Callback+0x240>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	3301      	adds	r3, #1
 8003518:	4a17      	ldr	r2, [pc, #92]	; (8003578 <HAL_GPIO_EXTI_Callback+0x240>)
 800351a:	6053      	str	r3, [r2, #4]
		}
	}

	if (GPIO_Pin == ENC_EXT2_B_Pin) {
 800351c:	88fb      	ldrh	r3, [r7, #6]
 800351e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003522:	d150      	bne.n	80035c6 <HAL_GPIO_EXTI_Callback+0x28e>
		if ((ENC2B_HIGH && ENC2A_HIGH) || (ENC2B_LOW && ENC2A_LOW)) {
 8003524:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003528:	4812      	ldr	r0, [pc, #72]	; (8003574 <HAL_GPIO_EXTI_Callback+0x23c>)
 800352a:	f006 f833 	bl	8009594 <HAL_GPIO_ReadPin>
 800352e:	4603      	mov	r3, r0
 8003530:	2b01      	cmp	r3, #1
 8003532:	d107      	bne.n	8003544 <HAL_GPIO_EXTI_Callback+0x20c>
 8003534:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003538:	480e      	ldr	r0, [pc, #56]	; (8003574 <HAL_GPIO_EXTI_Callback+0x23c>)
 800353a:	f006 f82b 	bl	8009594 <HAL_GPIO_ReadPin>
 800353e:	4603      	mov	r3, r0
 8003540:	2b01      	cmp	r3, #1
 8003542:	d00f      	beq.n	8003564 <HAL_GPIO_EXTI_Callback+0x22c>
 8003544:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003548:	480a      	ldr	r0, [pc, #40]	; (8003574 <HAL_GPIO_EXTI_Callback+0x23c>)
 800354a:	f006 f823 	bl	8009594 <HAL_GPIO_ReadPin>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d113      	bne.n	800357c <HAL_GPIO_EXTI_Callback+0x244>
 8003554:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003558:	4806      	ldr	r0, [pc, #24]	; (8003574 <HAL_GPIO_EXTI_Callback+0x23c>)
 800355a:	f006 f81b 	bl	8009594 <HAL_GPIO_ReadPin>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10b      	bne.n	800357c <HAL_GPIO_EXTI_Callback+0x244>
			valueENC_EXT[1]--;
 8003564:	4b04      	ldr	r3, [pc, #16]	; (8003578 <HAL_GPIO_EXTI_Callback+0x240>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	3b01      	subs	r3, #1
 800356a:	4a03      	ldr	r2, [pc, #12]	; (8003578 <HAL_GPIO_EXTI_Callback+0x240>)
 800356c:	6053      	str	r3, [r2, #4]
 800356e:	e02a      	b.n	80035c6 <HAL_GPIO_EXTI_Callback+0x28e>
 8003570:	40021800 	.word	0x40021800
 8003574:	40021400 	.word	0x40021400
 8003578:	20000a4c 	.word	0x20000a4c
		} else if ((ENC2B_LOW && ENC2A_HIGH) || (ENC2B_HIGH && ENC2A_LOW)) {
 800357c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003580:	485d      	ldr	r0, [pc, #372]	; (80036f8 <HAL_GPIO_EXTI_Callback+0x3c0>)
 8003582:	f006 f807 	bl	8009594 <HAL_GPIO_ReadPin>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d107      	bne.n	800359c <HAL_GPIO_EXTI_Callback+0x264>
 800358c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003590:	4859      	ldr	r0, [pc, #356]	; (80036f8 <HAL_GPIO_EXTI_Callback+0x3c0>)
 8003592:	f005 ffff 	bl	8009594 <HAL_GPIO_ReadPin>
 8003596:	4603      	mov	r3, r0
 8003598:	2b01      	cmp	r3, #1
 800359a:	d00f      	beq.n	80035bc <HAL_GPIO_EXTI_Callback+0x284>
 800359c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035a0:	4855      	ldr	r0, [pc, #340]	; (80036f8 <HAL_GPIO_EXTI_Callback+0x3c0>)
 80035a2:	f005 fff7 	bl	8009594 <HAL_GPIO_ReadPin>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d10c      	bne.n	80035c6 <HAL_GPIO_EXTI_Callback+0x28e>
 80035ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035b0:	4851      	ldr	r0, [pc, #324]	; (80036f8 <HAL_GPIO_EXTI_Callback+0x3c0>)
 80035b2:	f005 ffef 	bl	8009594 <HAL_GPIO_ReadPin>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d104      	bne.n	80035c6 <HAL_GPIO_EXTI_Callback+0x28e>
			valueENC_EXT[1]++;
 80035bc:	4b4f      	ldr	r3, [pc, #316]	; (80036fc <HAL_GPIO_EXTI_Callback+0x3c4>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	3301      	adds	r3, #1
 80035c2:	4a4e      	ldr	r2, [pc, #312]	; (80036fc <HAL_GPIO_EXTI_Callback+0x3c4>)
 80035c4:	6053      	str	r3, [r2, #4]
		}
	}
	//Encoder External 3
	if (GPIO_Pin == ENC_EXT3_A_Pin) {
 80035c6:	88fb      	ldrh	r3, [r7, #6]
 80035c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035cc:	d146      	bne.n	800365c <HAL_GPIO_EXTI_Callback+0x324>
		if ((ENC3B_HIGH && ENC3A_LOW) || (ENC3B_LOW && ENC3A_HIGH)) {
 80035ce:	2108      	movs	r1, #8
 80035d0:	4849      	ldr	r0, [pc, #292]	; (80036f8 <HAL_GPIO_EXTI_Callback+0x3c0>)
 80035d2:	f005 ffdf 	bl	8009594 <HAL_GPIO_ReadPin>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d107      	bne.n	80035ec <HAL_GPIO_EXTI_Callback+0x2b4>
 80035dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80035e0:	4845      	ldr	r0, [pc, #276]	; (80036f8 <HAL_GPIO_EXTI_Callback+0x3c0>)
 80035e2:	f005 ffd7 	bl	8009594 <HAL_GPIO_ReadPin>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00e      	beq.n	800360a <HAL_GPIO_EXTI_Callback+0x2d2>
 80035ec:	2108      	movs	r1, #8
 80035ee:	4842      	ldr	r0, [pc, #264]	; (80036f8 <HAL_GPIO_EXTI_Callback+0x3c0>)
 80035f0:	f005 ffd0 	bl	8009594 <HAL_GPIO_ReadPin>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10d      	bne.n	8003616 <HAL_GPIO_EXTI_Callback+0x2de>
 80035fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80035fe:	483e      	ldr	r0, [pc, #248]	; (80036f8 <HAL_GPIO_EXTI_Callback+0x3c0>)
 8003600:	f005 ffc8 	bl	8009594 <HAL_GPIO_ReadPin>
 8003604:	4603      	mov	r3, r0
 8003606:	2b01      	cmp	r3, #1
 8003608:	d105      	bne.n	8003616 <HAL_GPIO_EXTI_Callback+0x2de>
			valueENC_EXT[2]--;
 800360a:	4b3c      	ldr	r3, [pc, #240]	; (80036fc <HAL_GPIO_EXTI_Callback+0x3c4>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	3b01      	subs	r3, #1
 8003610:	4a3a      	ldr	r2, [pc, #232]	; (80036fc <HAL_GPIO_EXTI_Callback+0x3c4>)
 8003612:	6093      	str	r3, [r2, #8]
 8003614:	e022      	b.n	800365c <HAL_GPIO_EXTI_Callback+0x324>
		} else if ((ENC3B_HIGH && ENC3A_HIGH) || (ENC3B_LOW && ENC3A_LOW)) {
 8003616:	2108      	movs	r1, #8
 8003618:	4837      	ldr	r0, [pc, #220]	; (80036f8 <HAL_GPIO_EXTI_Callback+0x3c0>)
 800361a:	f005 ffbb 	bl	8009594 <HAL_GPIO_ReadPin>
 800361e:	4603      	mov	r3, r0
 8003620:	2b01      	cmp	r3, #1
 8003622:	d107      	bne.n	8003634 <HAL_GPIO_EXTI_Callback+0x2fc>
 8003624:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003628:	4833      	ldr	r0, [pc, #204]	; (80036f8 <HAL_GPIO_EXTI_Callback+0x3c0>)
 800362a:	f005 ffb3 	bl	8009594 <HAL_GPIO_ReadPin>
 800362e:	4603      	mov	r3, r0
 8003630:	2b01      	cmp	r3, #1
 8003632:	d00e      	beq.n	8003652 <HAL_GPIO_EXTI_Callback+0x31a>
 8003634:	2108      	movs	r1, #8
 8003636:	4830      	ldr	r0, [pc, #192]	; (80036f8 <HAL_GPIO_EXTI_Callback+0x3c0>)
 8003638:	f005 ffac 	bl	8009594 <HAL_GPIO_ReadPin>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10c      	bne.n	800365c <HAL_GPIO_EXTI_Callback+0x324>
 8003642:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003646:	482c      	ldr	r0, [pc, #176]	; (80036f8 <HAL_GPIO_EXTI_Callback+0x3c0>)
 8003648:	f005 ffa4 	bl	8009594 <HAL_GPIO_ReadPin>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d104      	bne.n	800365c <HAL_GPIO_EXTI_Callback+0x324>
			valueENC_EXT[2]++;
 8003652:	4b2a      	ldr	r3, [pc, #168]	; (80036fc <HAL_GPIO_EXTI_Callback+0x3c4>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	3301      	adds	r3, #1
 8003658:	4a28      	ldr	r2, [pc, #160]	; (80036fc <HAL_GPIO_EXTI_Callback+0x3c4>)
 800365a:	6093      	str	r3, [r2, #8]
		}
	}

	if (GPIO_Pin == ENC_EXT3_B_Pin) {
 800365c:	88fb      	ldrh	r3, [r7, #6]
 800365e:	2b08      	cmp	r3, #8
 8003660:	d146      	bne.n	80036f0 <HAL_GPIO_EXTI_Callback+0x3b8>
		if ((ENC3B_HIGH && ENC3A_HIGH) || (ENC3B_LOW && ENC3A_LOW)) {
 8003662:	2108      	movs	r1, #8
 8003664:	4824      	ldr	r0, [pc, #144]	; (80036f8 <HAL_GPIO_EXTI_Callback+0x3c0>)
 8003666:	f005 ff95 	bl	8009594 <HAL_GPIO_ReadPin>
 800366a:	4603      	mov	r3, r0
 800366c:	2b01      	cmp	r3, #1
 800366e:	d107      	bne.n	8003680 <HAL_GPIO_EXTI_Callback+0x348>
 8003670:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003674:	4820      	ldr	r0, [pc, #128]	; (80036f8 <HAL_GPIO_EXTI_Callback+0x3c0>)
 8003676:	f005 ff8d 	bl	8009594 <HAL_GPIO_ReadPin>
 800367a:	4603      	mov	r3, r0
 800367c:	2b01      	cmp	r3, #1
 800367e:	d00e      	beq.n	800369e <HAL_GPIO_EXTI_Callback+0x366>
 8003680:	2108      	movs	r1, #8
 8003682:	481d      	ldr	r0, [pc, #116]	; (80036f8 <HAL_GPIO_EXTI_Callback+0x3c0>)
 8003684:	f005 ff86 	bl	8009594 <HAL_GPIO_ReadPin>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10d      	bne.n	80036aa <HAL_GPIO_EXTI_Callback+0x372>
 800368e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003692:	4819      	ldr	r0, [pc, #100]	; (80036f8 <HAL_GPIO_EXTI_Callback+0x3c0>)
 8003694:	f005 ff7e 	bl	8009594 <HAL_GPIO_ReadPin>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d105      	bne.n	80036aa <HAL_GPIO_EXTI_Callback+0x372>
			valueENC_EXT[2]--;
 800369e:	4b17      	ldr	r3, [pc, #92]	; (80036fc <HAL_GPIO_EXTI_Callback+0x3c4>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	3b01      	subs	r3, #1
 80036a4:	4a15      	ldr	r2, [pc, #84]	; (80036fc <HAL_GPIO_EXTI_Callback+0x3c4>)
 80036a6:	6093      	str	r3, [r2, #8]
		} else if ((ENC3B_LOW && ENC3A_HIGH) || (ENC3B_HIGH && ENC3A_LOW)) {
			valueENC_EXT[2]++;
		}
	}
}
 80036a8:	e022      	b.n	80036f0 <HAL_GPIO_EXTI_Callback+0x3b8>
		} else if ((ENC3B_LOW && ENC3A_HIGH) || (ENC3B_HIGH && ENC3A_LOW)) {
 80036aa:	2108      	movs	r1, #8
 80036ac:	4812      	ldr	r0, [pc, #72]	; (80036f8 <HAL_GPIO_EXTI_Callback+0x3c0>)
 80036ae:	f005 ff71 	bl	8009594 <HAL_GPIO_ReadPin>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d107      	bne.n	80036c8 <HAL_GPIO_EXTI_Callback+0x390>
 80036b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036bc:	480e      	ldr	r0, [pc, #56]	; (80036f8 <HAL_GPIO_EXTI_Callback+0x3c0>)
 80036be:	f005 ff69 	bl	8009594 <HAL_GPIO_ReadPin>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d00e      	beq.n	80036e6 <HAL_GPIO_EXTI_Callback+0x3ae>
 80036c8:	2108      	movs	r1, #8
 80036ca:	480b      	ldr	r0, [pc, #44]	; (80036f8 <HAL_GPIO_EXTI_Callback+0x3c0>)
 80036cc:	f005 ff62 	bl	8009594 <HAL_GPIO_ReadPin>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d10c      	bne.n	80036f0 <HAL_GPIO_EXTI_Callback+0x3b8>
 80036d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036da:	4807      	ldr	r0, [pc, #28]	; (80036f8 <HAL_GPIO_EXTI_Callback+0x3c0>)
 80036dc:	f005 ff5a 	bl	8009594 <HAL_GPIO_ReadPin>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d104      	bne.n	80036f0 <HAL_GPIO_EXTI_Callback+0x3b8>
			valueENC_EXT[2]++;
 80036e6:	4b05      	ldr	r3, [pc, #20]	; (80036fc <HAL_GPIO_EXTI_Callback+0x3c4>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	3301      	adds	r3, #1
 80036ec:	4a03      	ldr	r2, [pc, #12]	; (80036fc <HAL_GPIO_EXTI_Callback+0x3c4>)
 80036ee:	6093      	str	r3, [r2, #8]
}
 80036f0:	bf00      	nop
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	40021400 	.word	0x40021400
 80036fc:	20000a4c 	.word	0x20000a4c

08003700 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003700:	b590      	push	{r4, r7, lr}
 8003702:	b087      	sub	sp, #28
 8003704:	af00      	add	r7, sp, #0
 8003706:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN 5 */
	initializeMotor();
 8003708:	f7ff fd1e 	bl	8003148 <initializeMotor>
	vTaskDelay(10);
 800370c:	200a      	movs	r0, #10
 800370e:	f00a ffbf 	bl	800e690 <vTaskDelay>
	stateInv = false;
 8003712:	4b2f      	ldr	r3, [pc, #188]	; (80037d0 <StartDefaultTask+0xd0>)
 8003714:	2200      	movs	r2, #0
 8003716:	701a      	strb	r2, [r3, #0]
	/* Infinite loop */
	for (;;) {
		if(stateInv == true){
 8003718:	4b2d      	ldr	r3, [pc, #180]	; (80037d0 <StartDefaultTask+0xd0>)
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d012      	beq.n	8003746 <StartDefaultTask+0x46>
			kinMotor(&MotorOut, InvTarget[0], InvTarget[1], InvTarget[2]);
 8003720:	4b2c      	ldr	r3, [pc, #176]	; (80037d4 <StartDefaultTask+0xd4>)
 8003722:	edd3 7a00 	vldr	s15, [r3]
 8003726:	4b2b      	ldr	r3, [pc, #172]	; (80037d4 <StartDefaultTask+0xd4>)
 8003728:	ed93 7a01 	vldr	s14, [r3, #4]
 800372c:	4b29      	ldr	r3, [pc, #164]	; (80037d4 <StartDefaultTask+0xd4>)
 800372e:	edd3 6a02 	vldr	s13, [r3, #8]
 8003732:	eeb0 1a66 	vmov.f32	s2, s13
 8003736:	eef0 0a47 	vmov.f32	s1, s14
 800373a:	eeb0 0a67 	vmov.f32	s0, s15
 800373e:	4826      	ldr	r0, [pc, #152]	; (80037d8 <StartDefaultTask+0xd8>)
 8003740:	f7fe fe4e 	bl	80023e0 <kinMotor>
 8003744:	e027      	b.n	8003796 <StartDefaultTask+0x96>
		}
		else {
			vect3_Kin = ForwardKin(xtarget, ytarget, thtarget);
 8003746:	4b25      	ldr	r3, [pc, #148]	; (80037dc <StartDefaultTask+0xdc>)
 8003748:	edd3 7a00 	vldr	s15, [r3]
 800374c:	4b24      	ldr	r3, [pc, #144]	; (80037e0 <StartDefaultTask+0xe0>)
 800374e:	ed93 7a00 	vldr	s14, [r3]
 8003752:	4b24      	ldr	r3, [pc, #144]	; (80037e4 <StartDefaultTask+0xe4>)
 8003754:	edd3 6a00 	vldr	s13, [r3]
 8003758:	eeb0 1a66 	vmov.f32	s2, s13
 800375c:	eef0 0a47 	vmov.f32	s1, s14
 8003760:	eeb0 0a67 	vmov.f32	s0, s15
 8003764:	f7fd ff54 	bl	8001610 <ForwardKin>
 8003768:	eef0 6a40 	vmov.f32	s13, s0
 800376c:	eeb0 7a60 	vmov.f32	s14, s1
 8003770:	eef0 7a41 	vmov.f32	s15, s2
 8003774:	4b1c      	ldr	r3, [pc, #112]	; (80037e8 <StartDefaultTask+0xe8>)
 8003776:	edc3 6a00 	vstr	s13, [r3]
 800377a:	ed83 7a01 	vstr	s14, [r3, #4]
 800377e:	edc3 7a02 	vstr	s15, [r3, #8]
			MotorOut = InverseKin(&vect3_Kin);
 8003782:	4c15      	ldr	r4, [pc, #84]	; (80037d8 <StartDefaultTask+0xd8>)
 8003784:	463b      	mov	r3, r7
 8003786:	4918      	ldr	r1, [pc, #96]	; (80037e8 <StartDefaultTask+0xe8>)
 8003788:	4618      	mov	r0, r3
 800378a:	f7fe f9e9 	bl	8001b60 <InverseKin>
 800378e:	463b      	mov	r3, r7
 8003790:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003792:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}
		setPwm(0, MotorOut.w1); setPwm(1, MotorOut.w2);
 8003796:	4b10      	ldr	r3, [pc, #64]	; (80037d8 <StartDefaultTask+0xd8>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4619      	mov	r1, r3
 800379c:	2000      	movs	r0, #0
 800379e:	f7ff fd15 	bl	80031cc <setPwm>
 80037a2:	4b0d      	ldr	r3, [pc, #52]	; (80037d8 <StartDefaultTask+0xd8>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	4619      	mov	r1, r3
 80037a8:	2001      	movs	r0, #1
 80037aa:	f7ff fd0f 	bl	80031cc <setPwm>
		setPwm(2, MotorOut.w3); setPwm(3, MotorOut.w4);
 80037ae:	4b0a      	ldr	r3, [pc, #40]	; (80037d8 <StartDefaultTask+0xd8>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	4619      	mov	r1, r3
 80037b4:	2002      	movs	r0, #2
 80037b6:	f7ff fd09 	bl	80031cc <setPwm>
 80037ba:	4b07      	ldr	r3, [pc, #28]	; (80037d8 <StartDefaultTask+0xd8>)
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	4619      	mov	r1, r3
 80037c0:	2003      	movs	r0, #3
 80037c2:	f7ff fd03 	bl	80031cc <setPwm>
		osDelay(1);
 80037c6:	2001      	movs	r0, #1
 80037c8:	f009 ffba 	bl	800d740 <osDelay>
		if(stateInv == true){
 80037cc:	e7a4      	b.n	8003718 <StartDefaultTask+0x18>
 80037ce:	bf00      	nop
 80037d0:	20000b20 	.word	0x20000b20
 80037d4:	20000aec 	.word	0x20000aec
 80037d8:	20000a64 	.word	0x20000a64
 80037dc:	20000adc 	.word	0x20000adc
 80037e0:	20000ae0 	.word	0x20000ae0
 80037e4:	20000ae4 	.word	0x20000ae4
 80037e8:	20000a58 	.word	0x20000a58

080037ec <commTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_commTask */
void commTask(void *argument)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN commTask */
	setup();
 80037f4:	f003 fb56 	bl	8006ea4 <setup>
	/* Infinite loop */
	for (;;) {
		loop();
 80037f8:	f003 fb7e 	bl	8006ef8 <loop>
		osDelay(1);
 80037fc:	2001      	movs	r0, #1
 80037fe:	f009 ff9f 	bl	800d740 <osDelay>
		loop();
 8003802:	e7f9      	b.n	80037f8 <commTask+0xc>

08003804 <ImuTask_Function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ImuTask_Function */
void ImuTask_Function(void *argument)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ImuTask_Function */
	bno055_assignI2C(&hi2c1);
 800380c:	486b      	ldr	r0, [pc, #428]	; (80039bc <ImuTask_Function+0x1b8>)
 800380e:	f7fe ff27 	bl	8002660 <bno055_assignI2C>
	bno055_setup();
 8003812:	f7fd fbe7 	bl	8000fe4 <bno055_setup>
	bno055_setOperationModeNDOF();
 8003816:	f7fd fbd2 	bl	8000fbe <bno055_setOperationModeNDOF>
	vTaskDelay(100);
 800381a:	2064      	movs	r0, #100	; 0x64
 800381c:	f00a ff38 	bl	800e690 <vTaskDelay>
  /* Infinite loop */
  for(;;)
  {
	quat = bno055_getVectorQuaternion();
 8003820:	f7fd fdd2 	bl	80013c8 <bno055_getVectorQuaternion>
 8003824:	eeb0 4a40 	vmov.f32	s8, s0
 8003828:	eef0 4a60 	vmov.f32	s9, s1
 800382c:	eeb0 5a41 	vmov.f32	s10, s2
 8003830:	eef0 5a61 	vmov.f32	s11, s3
 8003834:	eeb0 6a42 	vmov.f32	s12, s4
 8003838:	eef0 6a62 	vmov.f32	s13, s5
 800383c:	eeb0 7a43 	vmov.f32	s14, s6
 8003840:	eef0 7a63 	vmov.f32	s15, s7
 8003844:	4b5e      	ldr	r3, [pc, #376]	; (80039c0 <ImuTask_Function+0x1bc>)
 8003846:	ed83 4b00 	vstr	d4, [r3]
 800384a:	ed83 5b02 	vstr	d5, [r3, #8]
 800384e:	ed83 6b04 	vstr	d6, [r3, #16]
 8003852:	ed83 7b06 	vstr	d7, [r3, #24]
	vector = bno055_getVectorEuler();
 8003856:	f7fd fd31 	bl	80012bc <bno055_getVectorEuler>
 800385a:	eeb0 4a40 	vmov.f32	s8, s0
 800385e:	eef0 4a60 	vmov.f32	s9, s1
 8003862:	eeb0 5a41 	vmov.f32	s10, s2
 8003866:	eef0 5a61 	vmov.f32	s11, s3
 800386a:	eeb0 6a42 	vmov.f32	s12, s4
 800386e:	eef0 6a62 	vmov.f32	s13, s5
 8003872:	eeb0 7a43 	vmov.f32	s14, s6
 8003876:	eef0 7a63 	vmov.f32	s15, s7
 800387a:	4b52      	ldr	r3, [pc, #328]	; (80039c4 <ImuTask_Function+0x1c0>)
 800387c:	ed83 4b00 	vstr	d4, [r3]
 8003880:	ed83 5b02 	vstr	d5, [r3, #8]
 8003884:	ed83 6b04 	vstr	d6, [r3, #16]
 8003888:	ed83 7b06 	vstr	d7, [r3, #24]
	line = bno055_getVectorLinearAccel();
 800388c:	f7fd fd59 	bl	8001342 <bno055_getVectorLinearAccel>
 8003890:	eeb0 4a40 	vmov.f32	s8, s0
 8003894:	eef0 4a60 	vmov.f32	s9, s1
 8003898:	eeb0 5a41 	vmov.f32	s10, s2
 800389c:	eef0 5a61 	vmov.f32	s11, s3
 80038a0:	eeb0 6a42 	vmov.f32	s12, s4
 80038a4:	eef0 6a62 	vmov.f32	s13, s5
 80038a8:	eeb0 7a43 	vmov.f32	s14, s6
 80038ac:	eef0 7a63 	vmov.f32	s15, s7
 80038b0:	4b45      	ldr	r3, [pc, #276]	; (80039c8 <ImuTask_Function+0x1c4>)
 80038b2:	ed83 4b00 	vstr	d4, [r3]
 80038b6:	ed83 5b02 	vstr	d5, [r3, #8]
 80038ba:	ed83 6b04 	vstr	d6, [r3, #16]
 80038be:	ed83 7b06 	vstr	d7, [r3, #24]
	vTaskDelay(10);
 80038c2:	200a      	movs	r0, #10
 80038c4:	f00a fee4 	bl	800e690 <vTaskDelay>
	rawYaw = vector.x;
 80038c8:	4b3e      	ldr	r3, [pc, #248]	; (80039c4 <ImuTask_Function+0x1c0>)
 80038ca:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80038ce:	4610      	mov	r0, r2
 80038d0:	4619      	mov	r1, r3
 80038d2:	f7fd f951 	bl	8000b78 <__aeabi_d2iz>
 80038d6:	4603      	mov	r3, r0
 80038d8:	4a3c      	ldr	r2, [pc, #240]	; (80039cc <ImuTask_Function+0x1c8>)
 80038da:	6013      	str	r3, [r2, #0]
	yawVal = imuCallback(rawYaw);
 80038dc:	4b3b      	ldr	r3, [pc, #236]	; (80039cc <ImuTask_Function+0x1c8>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7ff fbfd 	bl	80030e0 <imuCallback>
 80038e6:	4603      	mov	r3, r0
 80038e8:	4a39      	ldr	r2, [pc, #228]	; (80039d0 <ImuTask_Function+0x1cc>)
 80038ea:	6013      	str	r3, [r2, #0]

	msg_imu[0] = quat.w;
 80038ec:	4b34      	ldr	r3, [pc, #208]	; (80039c0 <ImuTask_Function+0x1bc>)
 80038ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f2:	4610      	mov	r0, r2
 80038f4:	4619      	mov	r1, r3
 80038f6:	f7fd f967 	bl	8000bc8 <__aeabi_d2f>
 80038fa:	4603      	mov	r3, r0
 80038fc:	4a35      	ldr	r2, [pc, #212]	; (80039d4 <ImuTask_Function+0x1d0>)
 80038fe:	6013      	str	r3, [r2, #0]
	msg_imu[1] = quat.x;
 8003900:	4b2f      	ldr	r3, [pc, #188]	; (80039c0 <ImuTask_Function+0x1bc>)
 8003902:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003906:	4610      	mov	r0, r2
 8003908:	4619      	mov	r1, r3
 800390a:	f7fd f95d 	bl	8000bc8 <__aeabi_d2f>
 800390e:	4603      	mov	r3, r0
 8003910:	4a30      	ldr	r2, [pc, #192]	; (80039d4 <ImuTask_Function+0x1d0>)
 8003912:	6053      	str	r3, [r2, #4]
	msg_imu[2] = quat.y;
 8003914:	4b2a      	ldr	r3, [pc, #168]	; (80039c0 <ImuTask_Function+0x1bc>)
 8003916:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800391a:	4610      	mov	r0, r2
 800391c:	4619      	mov	r1, r3
 800391e:	f7fd f953 	bl	8000bc8 <__aeabi_d2f>
 8003922:	4603      	mov	r3, r0
 8003924:	4a2b      	ldr	r2, [pc, #172]	; (80039d4 <ImuTask_Function+0x1d0>)
 8003926:	6093      	str	r3, [r2, #8]
	msg_imu[3] = quat.z;
 8003928:	4b25      	ldr	r3, [pc, #148]	; (80039c0 <ImuTask_Function+0x1bc>)
 800392a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800392e:	4610      	mov	r0, r2
 8003930:	4619      	mov	r1, r3
 8003932:	f7fd f949 	bl	8000bc8 <__aeabi_d2f>
 8003936:	4603      	mov	r3, r0
 8003938:	4a26      	ldr	r2, [pc, #152]	; (80039d4 <ImuTask_Function+0x1d0>)
 800393a:	60d3      	str	r3, [r2, #12]

	msg_imu[4] = line.x;
 800393c:	4b22      	ldr	r3, [pc, #136]	; (80039c8 <ImuTask_Function+0x1c4>)
 800393e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003942:	4610      	mov	r0, r2
 8003944:	4619      	mov	r1, r3
 8003946:	f7fd f93f 	bl	8000bc8 <__aeabi_d2f>
 800394a:	4603      	mov	r3, r0
 800394c:	4a21      	ldr	r2, [pc, #132]	; (80039d4 <ImuTask_Function+0x1d0>)
 800394e:	6113      	str	r3, [r2, #16]
	msg_imu[5] = line.y;
 8003950:	4b1d      	ldr	r3, [pc, #116]	; (80039c8 <ImuTask_Function+0x1c4>)
 8003952:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003956:	4610      	mov	r0, r2
 8003958:	4619      	mov	r1, r3
 800395a:	f7fd f935 	bl	8000bc8 <__aeabi_d2f>
 800395e:	4603      	mov	r3, r0
 8003960:	4a1c      	ldr	r2, [pc, #112]	; (80039d4 <ImuTask_Function+0x1d0>)
 8003962:	6153      	str	r3, [r2, #20]
	msg_imu[6] = line.z;
 8003964:	4b18      	ldr	r3, [pc, #96]	; (80039c8 <ImuTask_Function+0x1c4>)
 8003966:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800396a:	4610      	mov	r0, r2
 800396c:	4619      	mov	r1, r3
 800396e:	f7fd f92b 	bl	8000bc8 <__aeabi_d2f>
 8003972:	4603      	mov	r3, r0
 8003974:	4a17      	ldr	r2, [pc, #92]	; (80039d4 <ImuTask_Function+0x1d0>)
 8003976:	6193      	str	r3, [r2, #24]

	msg_imu[7] = vector.x;
 8003978:	4b12      	ldr	r3, [pc, #72]	; (80039c4 <ImuTask_Function+0x1c0>)
 800397a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800397e:	4610      	mov	r0, r2
 8003980:	4619      	mov	r1, r3
 8003982:	f7fd f921 	bl	8000bc8 <__aeabi_d2f>
 8003986:	4603      	mov	r3, r0
 8003988:	4a12      	ldr	r2, [pc, #72]	; (80039d4 <ImuTask_Function+0x1d0>)
 800398a:	61d3      	str	r3, [r2, #28]
	msg_imu[8] = vector.y;
 800398c:	4b0d      	ldr	r3, [pc, #52]	; (80039c4 <ImuTask_Function+0x1c0>)
 800398e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003992:	4610      	mov	r0, r2
 8003994:	4619      	mov	r1, r3
 8003996:	f7fd f917 	bl	8000bc8 <__aeabi_d2f>
 800399a:	4603      	mov	r3, r0
 800399c:	4a0d      	ldr	r2, [pc, #52]	; (80039d4 <ImuTask_Function+0x1d0>)
 800399e:	6213      	str	r3, [r2, #32]
	msg_imu[9] = vector.z;
 80039a0:	4b08      	ldr	r3, [pc, #32]	; (80039c4 <ImuTask_Function+0x1c0>)
 80039a2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80039a6:	4610      	mov	r0, r2
 80039a8:	4619      	mov	r1, r3
 80039aa:	f7fd f90d 	bl	8000bc8 <__aeabi_d2f>
 80039ae:	4603      	mov	r3, r0
 80039b0:	4a08      	ldr	r2, [pc, #32]	; (80039d4 <ImuTask_Function+0x1d0>)
 80039b2:	6253      	str	r3, [r2, #36]	; 0x24


    osDelay(1);
 80039b4:	2001      	movs	r0, #1
 80039b6:	f009 fec3 	bl	800d740 <osDelay>
	quat = bno055_getVectorQuaternion();
 80039ba:	e731      	b.n	8003820 <ImuTask_Function+0x1c>
 80039bc:	20000244 	.word	0x20000244
 80039c0:	20000a98 	.word	0x20000a98
 80039c4:	20000a78 	.word	0x20000a78
 80039c8:	20000ab8 	.word	0x20000ab8
 80039cc:	20000a44 	.word	0x20000a44
 80039d0:	20000214 	.word	0x20000214
 80039d4:	20000af8 	.word	0x20000af8

080039d8 <GUI_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GUI_Task */
void GUI_Task(void *argument)
{
 80039d8:	b5b0      	push	{r4, r5, r7, lr}
 80039da:	b092      	sub	sp, #72	; 0x48
 80039dc:	af02      	add	r7, sp, #8
 80039de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GUI_Task */
	lcd_init();
 80039e0:	f7fd fdad 	bl	800153e <lcd_init>
	char buff[50];
  /* Infinite loop */
  for(;;)
  {
	lcd_send_cmd (0x80|0x04);
 80039e4:	2084      	movs	r0, #132	; 0x84
 80039e6:	f7fd fd33 	bl	8001450 <lcd_send_cmd>
	lcd_send_string("ABUROBONEMA");
 80039ea:	4847      	ldr	r0, [pc, #284]	; (8003b08 <GUI_Task+0x130>)
 80039ec:	f7fd fde4 	bl	80015b8 <lcd_send_string>

	lcd_send_cmd (0x80|0x40);
 80039f0:	20c0      	movs	r0, #192	; 0xc0
 80039f2:	f7fd fd2d 	bl	8001450 <lcd_send_cmd>
	lcd_send_string("Head:");
 80039f6:	4845      	ldr	r0, [pc, #276]	; (8003b0c <GUI_Task+0x134>)
 80039f8:	f7fd fdde 	bl	80015b8 <lcd_send_string>
	lcd_send_cmd(0x80|0x45);
 80039fc:	20c5      	movs	r0, #197	; 0xc5
 80039fe:	f7fd fd27 	bl	8001450 <lcd_send_cmd>
	Lcd_send_int(yawVal);
 8003a02:	4b43      	ldr	r3, [pc, #268]	; (8003b10 <GUI_Task+0x138>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fd fdec 	bl	80015e4 <Lcd_send_int>
	lcd_send_cmd(0x80|0x14);
 8003a0c:	2094      	movs	r0, #148	; 0x94
 8003a0e:	f7fd fd1f 	bl	8001450 <lcd_send_cmd>
	sprintf(buff, "X:%.2f  Y:%.2f", Aksen[0], Aksen[1]);
 8003a12:	4b40      	ldr	r3, [pc, #256]	; (8003b14 <GUI_Task+0x13c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fc fda6 	bl	8000568 <__aeabi_f2d>
 8003a1c:	4604      	mov	r4, r0
 8003a1e:	460d      	mov	r5, r1
 8003a20:	4b3c      	ldr	r3, [pc, #240]	; (8003b14 <GUI_Task+0x13c>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7fc fd9f 	bl	8000568 <__aeabi_f2d>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	f107 000c 	add.w	r0, r7, #12
 8003a32:	e9cd 2300 	strd	r2, r3, [sp]
 8003a36:	4622      	mov	r2, r4
 8003a38:	462b      	mov	r3, r5
 8003a3a:	4937      	ldr	r1, [pc, #220]	; (8003b18 <GUI_Task+0x140>)
 8003a3c:	f00f f862 	bl	8012b04 <siprintf>
	lcd_send_string(buff);
 8003a40:	f107 030c 	add.w	r3, r7, #12
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7fd fdb7 	bl	80015b8 <lcd_send_string>
	lcd_send_cmd(0x80|0x54);
 8003a4a:	20d4      	movs	r0, #212	; 0xd4
 8003a4c:	f7fd fd00 	bl	8001450 <lcd_send_cmd>
	sprintf(buff, "err:%.3f", sqrt(pow(vect3_Kin.x, 2) + pow(vect3_Kin.y, 2) + pow(vect3_Kin.th, 2)));
 8003a50:	4b32      	ldr	r3, [pc, #200]	; (8003b1c <GUI_Task+0x144>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7fc fd87 	bl	8000568 <__aeabi_f2d>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	ed9f 1b28 	vldr	d1, [pc, #160]	; 8003b00 <GUI_Task+0x128>
 8003a62:	ec43 2b10 	vmov	d0, r2, r3
 8003a66:	f00c fb09 	bl	801007c <pow>
 8003a6a:	ec55 4b10 	vmov	r4, r5, d0
 8003a6e:	4b2b      	ldr	r3, [pc, #172]	; (8003b1c <GUI_Task+0x144>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fc fd78 	bl	8000568 <__aeabi_f2d>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	ed9f 1b20 	vldr	d1, [pc, #128]	; 8003b00 <GUI_Task+0x128>
 8003a80:	ec43 2b10 	vmov	d0, r2, r3
 8003a84:	f00c fafa 	bl	801007c <pow>
 8003a88:	ec53 2b10 	vmov	r2, r3, d0
 8003a8c:	4620      	mov	r0, r4
 8003a8e:	4629      	mov	r1, r5
 8003a90:	f7fc fc0c 	bl	80002ac <__adddf3>
 8003a94:	4602      	mov	r2, r0
 8003a96:	460b      	mov	r3, r1
 8003a98:	4614      	mov	r4, r2
 8003a9a:	461d      	mov	r5, r3
 8003a9c:	4b1f      	ldr	r3, [pc, #124]	; (8003b1c <GUI_Task+0x144>)
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7fc fd61 	bl	8000568 <__aeabi_f2d>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8003b00 <GUI_Task+0x128>
 8003aae:	ec43 2b10 	vmov	d0, r2, r3
 8003ab2:	f00c fae3 	bl	801007c <pow>
 8003ab6:	ec53 2b10 	vmov	r2, r3, d0
 8003aba:	4620      	mov	r0, r4
 8003abc:	4629      	mov	r1, r5
 8003abe:	f7fc fbf5 	bl	80002ac <__adddf3>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	ec43 2b17 	vmov	d7, r2, r3
 8003aca:	eeb0 0a47 	vmov.f32	s0, s14
 8003ace:	eef0 0a67 	vmov.f32	s1, s15
 8003ad2:	f00c fb43 	bl	801015c <sqrt>
 8003ad6:	ec53 2b10 	vmov	r2, r3, d0
 8003ada:	f107 000c 	add.w	r0, r7, #12
 8003ade:	4910      	ldr	r1, [pc, #64]	; (8003b20 <GUI_Task+0x148>)
 8003ae0:	f00f f810 	bl	8012b04 <siprintf>
	lcd_send_string(buff);
 8003ae4:	f107 030c 	add.w	r3, r7, #12
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7fd fd65 	bl	80015b8 <lcd_send_string>
	lcd_clear();
 8003aee:	f7fd fd0f 	bl	8001510 <lcd_clear>
	vTaskDelay(10);
 8003af2:	200a      	movs	r0, #10
 8003af4:	f00a fdcc 	bl	800e690 <vTaskDelay>
    osDelay(1);
 8003af8:	2001      	movs	r0, #1
 8003afa:	f009 fe21 	bl	800d740 <osDelay>
	lcd_send_cmd (0x80|0x04);
 8003afe:	e771      	b.n	80039e4 <GUI_Task+0xc>
 8003b00:	00000000 	.word	0x00000000
 8003b04:	40000000 	.word	0x40000000
 8003b08:	08015094 	.word	0x08015094
 8003b0c:	080150a0 	.word	0x080150a0
 8003b10:	20000214 	.word	0x20000214
 8003b14:	2000022c 	.word	0x2000022c
 8003b18:	080150a8 	.word	0x080150a8
 8003b1c:	20000a58 	.word	0x20000a58
 8003b20:	080150b8 	.word	0x080150b8

08003b24 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a17      	ldr	r2, [pc, #92]	; (8003b90 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d101      	bne.n	8003b3a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003b36:	f004 fe59 	bl	80087ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM13) {
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a15      	ldr	r2, [pc, #84]	; (8003b94 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d120      	bne.n	8003b86 <HAL_TIM_PeriodElapsedCallback+0x62>
	  for (uint8_t i = 0; i < 3; i++) {
 8003b44:	2300      	movs	r3, #0
 8003b46:	73fb      	strb	r3, [r7, #15]
 8003b48:	e01a      	b.n	8003b80 <HAL_TIM_PeriodElapsedCallback+0x5c>
	  	rpmExt[i] = valueENC_EXT[i] * 6000 / 715;
 8003b4a:	7bfb      	ldrb	r3, [r7, #15]
 8003b4c:	4a12      	ldr	r2, [pc, #72]	; (8003b98 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b52:	f241 7270 	movw	r2, #6000	; 0x1770
 8003b56:	fb02 f303 	mul.w	r3, r2, r3
 8003b5a:	4a10      	ldr	r2, [pc, #64]	; (8003b9c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003b5c:	fb82 1203 	smull	r1, r2, r2, r3
 8003b60:	1212      	asrs	r2, r2, #8
 8003b62:	17db      	asrs	r3, r3, #31
 8003b64:	1ad2      	subs	r2, r2, r3
 8003b66:	7bfb      	ldrb	r3, [r7, #15]
 8003b68:	b211      	sxth	r1, r2
 8003b6a:	4a0d      	ldr	r2, [pc, #52]	; (8003ba0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003b6c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  	valueENC_EXT[i] = 0;
 8003b70:	7bfb      	ldrb	r3, [r7, #15]
 8003b72:	4a09      	ldr	r2, [pc, #36]	; (8003b98 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003b74:	2100      	movs	r1, #0
 8003b76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  for (uint8_t i = 0; i < 3; i++) {
 8003b7a:	7bfb      	ldrb	r3, [r7, #15]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	73fb      	strb	r3, [r7, #15]
 8003b80:	7bfb      	ldrb	r3, [r7, #15]
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d9e1      	bls.n	8003b4a <HAL_TIM_PeriodElapsedCallback+0x26>
	 }
  }

  /* USER CODE END Callback 1 */
}
 8003b86:	bf00      	nop
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40002000 	.word	0x40002000
 8003b94:	40001c00 	.word	0x40001c00
 8003b98:	20000a4c 	.word	0x20000a4c
 8003b9c:	5ba8a345 	.word	0x5ba8a345
 8003ba0:	20000218 	.word	0x20000218

08003ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ba8:	b672      	cpsid	i
}
 8003baa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003bac:	e7fe      	b.n	8003bac <Error_Handler+0x8>

08003bae <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	605a      	str	r2, [r3, #4]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	4a04      	ldr	r2, [pc, #16]	; (8003bec <_ZN3ros3MsgC1Ev+0x1c>)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4618      	mov	r0, r3
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr
 8003bec:	08015628 	.word	0x08015628

08003bf0 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
      data()
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7ff ffe8 	bl	8003bd0 <_ZN3ros3MsgC1Ev>
 8003c00:	4a06      	ldr	r2, [pc, #24]	; (8003c1c <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	3304      	adds	r3, #4
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7ff ffcf 	bl	8003bae <_ZN3ros4TimeC1Ev>
    {
    }
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4618      	mov	r0, r3
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	08015610 	.word	0x08015610

08003c20 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6859      	ldr	r1, [r3, #4]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	4413      	add	r3, r2
 8003c38:	b2ca      	uxtb	r2, r1
 8003c3a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	0a19      	lsrs	r1, r3, #8
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	3301      	adds	r3, #1
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	4413      	add	r3, r2
 8003c4a:	b2ca      	uxtb	r2, r1
 8003c4c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	0c19      	lsrs	r1, r3, #16
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	3302      	adds	r3, #2
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	b2ca      	uxtb	r2, r1
 8003c5e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	0e19      	lsrs	r1, r3, #24
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	3303      	adds	r3, #3
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	b2ca      	uxtb	r2, r1
 8003c70:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	3304      	adds	r3, #4
 8003c76:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6899      	ldr	r1, [r3, #8]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	4413      	add	r3, r2
 8003c82:	b2ca      	uxtb	r2, r1
 8003c84:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	0a19      	lsrs	r1, r3, #8
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	3301      	adds	r3, #1
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	4413      	add	r3, r2
 8003c94:	b2ca      	uxtb	r2, r1
 8003c96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	0c19      	lsrs	r1, r3, #16
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	3302      	adds	r3, #2
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	b2ca      	uxtb	r2, r1
 8003ca8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	0e19      	lsrs	r1, r3, #24
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	3303      	adds	r3, #3
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	b2ca      	uxtb	r2, r1
 8003cba:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	3304      	adds	r3, #4
 8003cc0:	60fb      	str	r3, [r7, #12]
      return offset;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
    }
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3714      	adds	r7, #20
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	683a      	ldr	r2, [r7, #0]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	6839      	ldr	r1, [r7, #0]
 8003cf6:	440b      	add	r3, r1
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	021b      	lsls	r3, r3, #8
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	3302      	adds	r3, #2
 8003d0a:	6839      	ldr	r1, [r7, #0]
 8003d0c:	440b      	add	r3, r1
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	041b      	lsls	r3, r3, #16
 8003d12:	431a      	orrs	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	3303      	adds	r3, #3
 8003d20:	6839      	ldr	r1, [r7, #0]
 8003d22:	440b      	add	r3, r1
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	061b      	lsls	r3, r3, #24
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	3304      	adds	r3, #4
 8003d32:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	4413      	add	r3, r2
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	689a      	ldr	r2, [r3, #8]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	6839      	ldr	r1, [r7, #0]
 8003d4c:	440b      	add	r3, r1
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	021b      	lsls	r3, r3, #8
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689a      	ldr	r2, [r3, #8]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	3302      	adds	r3, #2
 8003d60:	6839      	ldr	r1, [r7, #0]
 8003d62:	440b      	add	r3, r1
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	041b      	lsls	r3, r3, #16
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	689a      	ldr	r2, [r3, #8]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	3303      	adds	r3, #3
 8003d76:	6839      	ldr	r1, [r7, #0]
 8003d78:	440b      	add	r3, r1
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	061b      	lsls	r3, r3, #24
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	3304      	adds	r3, #4
 8003d88:	60fb      	str	r3, [r7, #12]
     return offset;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
    }
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	4b03      	ldr	r3, [pc, #12]	; (8003db0 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8003da2:	4618      	mov	r0, r3
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	080150c4 	.word	0x080150c4

08003db4 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	4b03      	ldr	r3, [pc, #12]	; (8003dcc <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	080150d4 	.word	0x080150d4

08003dd0 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7ff fef8 	bl	8003bd0 <_ZN3ros3MsgC1Ev>
 8003de0:	4a0b      	ldr	r2, [pc, #44]	; (8003e10 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a09      	ldr	r2, [pc, #36]	; (8003e14 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003df0:	609a      	str	r2, [r3, #8]
      message_type(""),
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a07      	ldr	r2, [pc, #28]	; (8003e14 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003df6:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a06      	ldr	r2, [pc, #24]	; (8003e14 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003dfc:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	615a      	str	r2, [r3, #20]
    {
    }
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4618      	mov	r0, r3
 8003e08:	3708      	adds	r7, #8
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	080155f8 	.word	0x080155f8
 8003e14:	080150f8 	.word	0x080150f8

08003e18 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b088      	sub	sp, #32
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003e22:	2300      	movs	r3, #0
 8003e24:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	8899      	ldrh	r1, [r3, #4]
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	4413      	add	r3, r2
 8003e30:	b2ca      	uxtb	r2, r1
 8003e32:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	889b      	ldrh	r3, [r3, #4]
 8003e38:	0a1b      	lsrs	r3, r3, #8
 8003e3a:	b299      	uxth	r1, r3
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	4413      	add	r3, r2
 8003e44:	b2ca      	uxtb	r2, r1
 8003e46:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	3302      	adds	r3, #2
 8003e4c:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fc fa1c 	bl	8000290 <strlen>
 8003e58:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	4413      	add	r3, r2
 8003e60:	69b9      	ldr	r1, [r7, #24]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f003 f87e 	bl	8006f64 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	3304      	adds	r3, #4
 8003e6c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	18d0      	adds	r0, r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	f00f f80f 	bl	8012e9e <memcpy>
      offset += length_topic_name;
 8003e80:	69fa      	ldr	r2, [r7, #28]
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	4413      	add	r3, r2
 8003e86:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7fc f9ff 	bl	8000290 <strlen>
 8003e92:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	4413      	add	r3, r2
 8003e9a:	6979      	ldr	r1, [r7, #20]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f003 f861 	bl	8006f64 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	3304      	adds	r3, #4
 8003ea6:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	18d0      	adds	r0, r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	f00e fff2 	bl	8012e9e <memcpy>
      offset += length_message_type;
 8003eba:	69fa      	ldr	r2, [r7, #28]
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fc f9e2 	bl	8000290 <strlen>
 8003ecc:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	6939      	ldr	r1, [r7, #16]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f003 f844 	bl	8006f64 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	3304      	adds	r3, #4
 8003ee0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	18d0      	adds	r0, r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	4619      	mov	r1, r3
 8003ef0:	f00e ffd5 	bl	8012e9e <memcpy>
      offset += length_md5sum;
 8003ef4:	69fa      	ldr	r2, [r7, #28]
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	4413      	add	r3, r2
 8003efa:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8003f02:	68f9      	ldr	r1, [r7, #12]
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	4413      	add	r3, r2
 8003f0a:	b2ca      	uxtb	r2, r1
 8003f0c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	0a19      	lsrs	r1, r3, #8
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	3301      	adds	r3, #1
 8003f16:	683a      	ldr	r2, [r7, #0]
 8003f18:	4413      	add	r3, r2
 8003f1a:	b2ca      	uxtb	r2, r1
 8003f1c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	0c19      	lsrs	r1, r3, #16
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	3302      	adds	r3, #2
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	4413      	add	r3, r2
 8003f2a:	b2ca      	uxtb	r2, r1
 8003f2c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	0e19      	lsrs	r1, r3, #24
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	3303      	adds	r3, #3
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	4413      	add	r3, r2
 8003f3a:	b2ca      	uxtb	r2, r1
 8003f3c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	3304      	adds	r3, #4
 8003f42:	61fb      	str	r3, [r7, #28]
      return offset;
 8003f44:	69fb      	ldr	r3, [r7, #28]
    }
 8003f46:	4618      	mov	r0, r3
 8003f48:	3720      	adds	r7, #32
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b08a      	sub	sp, #40	; 0x28
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
 8003f56:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	4413      	add	r3, r2
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	889b      	ldrh	r3, [r3, #4]
 8003f6e:	b21a      	sxth	r2, r3
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	3301      	adds	r3, #1
 8003f74:	6839      	ldr	r1, [r7, #0]
 8003f76:	440b      	add	r3, r1
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	021b      	lsls	r3, r3, #8
 8003f7c:	b21b      	sxth	r3, r3
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	b21b      	sxth	r3, r3
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	3302      	adds	r3, #2
 8003f8c:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	441a      	add	r2, r3
 8003f94:	f107 0314 	add.w	r3, r7, #20
 8003f98:	4611      	mov	r1, r2
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f003 f801 	bl	8006fa2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	3304      	adds	r3, #4
 8003fa4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8003faa:	e00b      	b.n	8003fc4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb0:	441a      	add	r2, r3
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	6839      	ldr	r1, [r7, #0]
 8003fb8:	440b      	add	r3, r1
 8003fba:	7812      	ldrb	r2, [r2, #0]
 8003fbc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	4413      	add	r3, r2
 8003fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d3ed      	bcc.n	8003fac <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	4413      	add	r3, r2
 8003fdc:	2200      	movs	r2, #0
 8003fde:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	441a      	add	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	441a      	add	r2, r3
 8003ffa:	f107 0310 	add.w	r3, r7, #16
 8003ffe:	4611      	mov	r1, r2
 8004000:	4618      	mov	r0, r3
 8004002:	f002 ffce 	bl	8006fa2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	3304      	adds	r3, #4
 800400a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	623b      	str	r3, [r7, #32]
 8004010:	e00b      	b.n	800402a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	6a3b      	ldr	r3, [r7, #32]
 8004016:	441a      	add	r2, r3
 8004018:	6a3b      	ldr	r3, [r7, #32]
 800401a:	3b01      	subs	r3, #1
 800401c:	6839      	ldr	r1, [r7, #0]
 800401e:	440b      	add	r3, r1
 8004020:	7812      	ldrb	r2, [r2, #0]
 8004022:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	3301      	adds	r3, #1
 8004028:	623b      	str	r3, [r7, #32]
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	4413      	add	r3, r2
 8004030:	6a3a      	ldr	r2, [r7, #32]
 8004032:	429a      	cmp	r2, r3
 8004034:	d3ed      	bcc.n	8004012 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	4413      	add	r3, r2
 800403c:	3b01      	subs	r3, #1
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	4413      	add	r3, r2
 8004042:	2200      	movs	r2, #0
 8004044:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	3b01      	subs	r3, #1
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	441a      	add	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	4413      	add	r3, r2
 8004058:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	441a      	add	r2, r3
 8004060:	f107 030c 	add.w	r3, r7, #12
 8004064:	4611      	mov	r1, r2
 8004066:	4618      	mov	r0, r3
 8004068:	f002 ff9b 	bl	8006fa2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	3304      	adds	r3, #4
 8004070:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	61fb      	str	r3, [r7, #28]
 8004076:	e00b      	b.n	8004090 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	441a      	add	r2, r3
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	3b01      	subs	r3, #1
 8004082:	6839      	ldr	r1, [r7, #0]
 8004084:	440b      	add	r3, r1
 8004086:	7812      	ldrb	r2, [r2, #0]
 8004088:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	3301      	adds	r3, #1
 800408e:	61fb      	str	r3, [r7, #28]
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	4413      	add	r3, r2
 8004096:	69fa      	ldr	r2, [r7, #28]
 8004098:	429a      	cmp	r2, r3
 800409a:	d3ed      	bcc.n	8004078 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	4413      	add	r3, r2
 80040a2:	3b01      	subs	r3, #1
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	4413      	add	r3, r2
 80040a8:	2200      	movs	r2, #0
 80040aa:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	441a      	add	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	4413      	add	r3, r2
 80040be:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80040c0:	2300      	movs	r3, #0
 80040c2:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	6839      	ldr	r1, [r7, #0]
 80040ca:	440a      	add	r2, r1
 80040cc:	7812      	ldrb	r2, [r2, #0]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	3301      	adds	r3, #1
 80040d8:	6839      	ldr	r1, [r7, #0]
 80040da:	440b      	add	r3, r1
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	021b      	lsls	r3, r3, #8
 80040e0:	4313      	orrs	r3, r2
 80040e2:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80040e4:	68ba      	ldr	r2, [r7, #8]
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	3302      	adds	r3, #2
 80040ea:	6839      	ldr	r1, [r7, #0]
 80040ec:	440b      	add	r3, r1
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	041b      	lsls	r3, r3, #16
 80040f2:	4313      	orrs	r3, r2
 80040f4:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	3303      	adds	r3, #3
 80040fc:	6839      	ldr	r1, [r7, #0]
 80040fe:	440b      	add	r3, r1
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	061b      	lsls	r3, r3, #24
 8004104:	4313      	orrs	r3, r2
 8004106:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8004108:	68ba      	ldr	r2, [r7, #8]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	3304      	adds	r3, #4
 8004112:	61bb      	str	r3, [r7, #24]
     return offset;
 8004114:	69bb      	ldr	r3, [r7, #24]
    }
 8004116:	4618      	mov	r0, r3
 8004118:	3728      	adds	r7, #40	; 0x28
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
	...

08004120 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	4b03      	ldr	r3, [pc, #12]	; (8004138 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800412a:	4618      	mov	r0, r3
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	080150fc 	.word	0x080150fc

0800413c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	4b03      	ldr	r3, [pc, #12]	; (8004154 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8004146:	4618      	mov	r0, r3
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	08015118 	.word	0x08015118

08004158 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4618      	mov	r0, r3
 8004164:	f7ff fd34 	bl	8003bd0 <_ZN3ros3MsgC1Ev>
 8004168:	4a06      	ldr	r2, [pc, #24]	; (8004184 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	601a      	str	r2, [r3, #0]
      level(0),
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	711a      	strb	r2, [r3, #4]
      msg("")
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a04      	ldr	r2, [pc, #16]	; (8004188 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8004178:	609a      	str	r2, [r3, #8]
    {
    }
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4618      	mov	r0, r3
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	080155e0 	.word	0x080155e0
 8004188:	080150f8 	.word	0x080150f8

0800418c <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004196:	2300      	movs	r3, #0
 8004198:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	4413      	add	r3, r2
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	7912      	ldrb	r2, [r2, #4]
 80041a4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	3301      	adds	r3, #1
 80041aa:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7fc f86d 	bl	8000290 <strlen>
 80041b6:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	4413      	add	r3, r2
 80041be:	68b9      	ldr	r1, [r7, #8]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f002 fecf 	bl	8006f64 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	3304      	adds	r3, #4
 80041ca:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	18d0      	adds	r0, r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	4619      	mov	r1, r3
 80041da:	f00e fe60 	bl	8012e9e <memcpy>
      offset += length_msg;
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	4413      	add	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]
      return offset;
 80041e6:	68fb      	ldr	r3, [r7, #12]
    }
 80041e8:	4618      	mov	r0, r3
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80041fa:	2300      	movs	r3, #0
 80041fc:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	4413      	add	r3, r2
 8004204:	781a      	ldrb	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	3301      	adds	r3, #1
 800420e:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	441a      	add	r2, r3
 8004216:	f107 030c 	add.w	r3, r7, #12
 800421a:	4611      	mov	r1, r2
 800421c:	4618      	mov	r0, r3
 800421e:	f002 fec0 	bl	8006fa2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	3304      	adds	r3, #4
 8004226:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	617b      	str	r3, [r7, #20]
 800422c:	e00b      	b.n	8004246 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	441a      	add	r2, r3
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	3b01      	subs	r3, #1
 8004238:	6839      	ldr	r1, [r7, #0]
 800423a:	440b      	add	r3, r1
 800423c:	7812      	ldrb	r2, [r2, #0]
 800423e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	3301      	adds	r3, #1
 8004244:	617b      	str	r3, [r7, #20]
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4413      	add	r3, r2
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	429a      	cmp	r2, r3
 8004250:	d3ed      	bcc.n	800422e <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	4413      	add	r3, r2
 8004258:	3b01      	subs	r3, #1
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	4413      	add	r3, r2
 800425e:	2200      	movs	r2, #0
 8004260:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	3b01      	subs	r3, #1
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	441a      	add	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4413      	add	r3, r2
 8004274:	613b      	str	r3, [r7, #16]
     return offset;
 8004276:	693b      	ldr	r3, [r7, #16]
    }
 8004278:	4618      	mov	r0, r3
 800427a:	3718      	adds	r7, #24
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	4b03      	ldr	r3, [pc, #12]	; (8004298 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800428a:	4618      	mov	r0, r3
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	0801513c 	.word	0x0801513c

0800429c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	4b03      	ldr	r3, [pc, #12]	; (80042b4 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80042a6:	4618      	mov	r0, r3
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	08015150 	.word	0x08015150

080042b8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7ff fc84 	bl	8003bd0 <_ZN3ros3MsgC1Ev>
 80042c8:	4a11      	ldr	r2, [pc, #68]	; (8004310 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	605a      	str	r2, [r3, #4]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	609a      	str	r2, [r3, #8]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	611a      	str	r2, [r3, #16]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f04f 0200 	mov.w	r2, #0
 80042ec:	615a      	str	r2, [r3, #20]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	61da      	str	r2, [r3, #28]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	621a      	str	r2, [r3, #32]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4618      	mov	r0, r3
 800430a:	3708      	adds	r7, #8
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	080155c8 	.word	0x080155c8

08004314 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004314:	b580      	push	{r7, lr}
 8004316:	b08a      	sub	sp, #40	; 0x28
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800431e:	2300      	movs	r3, #0
 8004320:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6859      	ldr	r1, [r3, #4]
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	4413      	add	r3, r2
 800432c:	b2ca      	uxtb	r2, r1
 800432e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	0a19      	lsrs	r1, r3, #8
 8004336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004338:	3301      	adds	r3, #1
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	4413      	add	r3, r2
 800433e:	b2ca      	uxtb	r2, r1
 8004340:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	0c19      	lsrs	r1, r3, #16
 8004348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434a:	3302      	adds	r3, #2
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	4413      	add	r3, r2
 8004350:	b2ca      	uxtb	r2, r1
 8004352:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	0e19      	lsrs	r1, r3, #24
 800435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435c:	3303      	adds	r3, #3
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	4413      	add	r3, r2
 8004362:	b2ca      	uxtb	r2, r1
 8004364:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	3304      	adds	r3, #4
 800436a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800436c:	2300      	movs	r3, #0
 800436e:	623b      	str	r3, [r7, #32]
 8004370:	e02a      	b.n	80043c8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68da      	ldr	r2, [r3, #12]
 8004376:	6a3b      	ldr	r3, [r7, #32]
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4413      	add	r3, r2
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8004380:	6939      	ldr	r1, [r7, #16]
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	683a      	ldr	r2, [r7, #0]
 8004386:	4413      	add	r3, r2
 8004388:	b2ca      	uxtb	r2, r1
 800438a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	0a19      	lsrs	r1, r3, #8
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	3301      	adds	r3, #1
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	4413      	add	r3, r2
 8004398:	b2ca      	uxtb	r2, r1
 800439a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	0c19      	lsrs	r1, r3, #16
 80043a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a2:	3302      	adds	r3, #2
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	4413      	add	r3, r2
 80043a8:	b2ca      	uxtb	r2, r1
 80043aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	0e19      	lsrs	r1, r3, #24
 80043b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b2:	3303      	adds	r3, #3
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	4413      	add	r3, r2
 80043b8:	b2ca      	uxtb	r2, r1
 80043ba:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80043bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043be:	3304      	adds	r3, #4
 80043c0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80043c2:	6a3b      	ldr	r3, [r7, #32]
 80043c4:	3301      	adds	r3, #1
 80043c6:	623b      	str	r3, [r7, #32]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	6a3a      	ldr	r2, [r7, #32]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d3cf      	bcc.n	8004372 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6919      	ldr	r1, [r3, #16]
 80043d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	4413      	add	r3, r2
 80043dc:	b2ca      	uxtb	r2, r1
 80043de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	0a19      	lsrs	r1, r3, #8
 80043e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e8:	3301      	adds	r3, #1
 80043ea:	683a      	ldr	r2, [r7, #0]
 80043ec:	4413      	add	r3, r2
 80043ee:	b2ca      	uxtb	r2, r1
 80043f0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	0c19      	lsrs	r1, r3, #16
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fa:	3302      	adds	r3, #2
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	4413      	add	r3, r2
 8004400:	b2ca      	uxtb	r2, r1
 8004402:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	0e19      	lsrs	r1, r3, #24
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	3303      	adds	r3, #3
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	4413      	add	r3, r2
 8004412:	b2ca      	uxtb	r2, r1
 8004414:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	3304      	adds	r3, #4
 800441a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800441c:	2300      	movs	r3, #0
 800441e:	61fb      	str	r3, [r7, #28]
 8004420:	e02a      	b.n	8004478 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	699a      	ldr	r2, [r3, #24]
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4413      	add	r3, r2
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8004430:	68f9      	ldr	r1, [r7, #12]
 8004432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	4413      	add	r3, r2
 8004438:	b2ca      	uxtb	r2, r1
 800443a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	0a19      	lsrs	r1, r3, #8
 8004440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004442:	3301      	adds	r3, #1
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	4413      	add	r3, r2
 8004448:	b2ca      	uxtb	r2, r1
 800444a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	0c19      	lsrs	r1, r3, #16
 8004450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004452:	3302      	adds	r3, #2
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	4413      	add	r3, r2
 8004458:	b2ca      	uxtb	r2, r1
 800445a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	0e19      	lsrs	r1, r3, #24
 8004460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004462:	3303      	adds	r3, #3
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	4413      	add	r3, r2
 8004468:	b2ca      	uxtb	r2, r1
 800446a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 800446c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446e:	3304      	adds	r3, #4
 8004470:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	3301      	adds	r3, #1
 8004476:	61fb      	str	r3, [r7, #28]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	69fa      	ldr	r2, [r7, #28]
 800447e:	429a      	cmp	r2, r3
 8004480:	d3cf      	bcc.n	8004422 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	69d9      	ldr	r1, [r3, #28]
 8004486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	4413      	add	r3, r2
 800448c:	b2ca      	uxtb	r2, r1
 800448e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	69db      	ldr	r3, [r3, #28]
 8004494:	0a19      	lsrs	r1, r3, #8
 8004496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004498:	3301      	adds	r3, #1
 800449a:	683a      	ldr	r2, [r7, #0]
 800449c:	4413      	add	r3, r2
 800449e:	b2ca      	uxtb	r2, r1
 80044a0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	0c19      	lsrs	r1, r3, #16
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	3302      	adds	r3, #2
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	4413      	add	r3, r2
 80044b0:	b2ca      	uxtb	r2, r1
 80044b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	69db      	ldr	r3, [r3, #28]
 80044b8:	0e19      	lsrs	r1, r3, #24
 80044ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044bc:	3303      	adds	r3, #3
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	4413      	add	r3, r2
 80044c2:	b2ca      	uxtb	r2, r1
 80044c4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80044c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c8:	3304      	adds	r3, #4
 80044ca:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80044cc:	2300      	movs	r3, #0
 80044ce:	61bb      	str	r3, [r7, #24]
 80044d0:	e027      	b.n	8004522 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	4413      	add	r3, r2
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fb fed6 	bl	8000290 <strlen>
 80044e4:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	4413      	add	r3, r2
 80044ec:	6979      	ldr	r1, [r7, #20]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f002 fd38 	bl	8006f64 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	3304      	adds	r3, #4
 80044f8:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	683a      	ldr	r2, [r7, #0]
 80044fe:	18d0      	adds	r0, r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4413      	add	r3, r2
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	4619      	mov	r1, r3
 8004510:	f00e fcc5 	bl	8012e9e <memcpy>
      offset += length_stringsi;
 8004514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	4413      	add	r3, r2
 800451a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	3301      	adds	r3, #1
 8004520:	61bb      	str	r3, [r7, #24]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	69ba      	ldr	r2, [r7, #24]
 8004528:	429a      	cmp	r2, r3
 800452a:	d3d2      	bcc.n	80044d2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800452e:	4618      	mov	r0, r3
 8004530:	3728      	adds	r7, #40	; 0x28
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004536:	b580      	push	{r7, lr}
 8004538:	b08e      	sub	sp, #56	; 0x38
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004540:	2300      	movs	r3, #0
 8004542:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8004544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	4413      	add	r3, r2
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800454e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004550:	3301      	adds	r3, #1
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	4413      	add	r3, r2
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	021b      	lsls	r3, r3, #8
 800455a:	6a3a      	ldr	r2, [r7, #32]
 800455c:	4313      	orrs	r3, r2
 800455e:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8004560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004562:	3302      	adds	r3, #2
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	4413      	add	r3, r2
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	041b      	lsls	r3, r3, #16
 800456c:	6a3a      	ldr	r2, [r7, #32]
 800456e:	4313      	orrs	r3, r2
 8004570:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8004572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004574:	3303      	adds	r3, #3
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	4413      	add	r3, r2
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	061b      	lsls	r3, r3, #24
 800457e:	6a3a      	ldr	r2, [r7, #32]
 8004580:	4313      	orrs	r3, r2
 8004582:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8004584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004586:	3304      	adds	r3, #4
 8004588:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	6a3a      	ldr	r2, [r7, #32]
 8004590:	429a      	cmp	r2, r3
 8004592:	d90a      	bls.n	80045aa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68da      	ldr	r2, [r3, #12]
 8004598:	6a3b      	ldr	r3, [r7, #32]
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4619      	mov	r1, r3
 800459e:	4610      	mov	r0, r2
 80045a0:	f00d fce2 	bl	8011f68 <realloc>
 80045a4:	4602      	mov	r2, r0
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a3a      	ldr	r2, [r7, #32]
 80045ae:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80045b0:	2300      	movs	r3, #0
 80045b2:	633b      	str	r3, [r7, #48]	; 0x30
 80045b4:	e035      	b.n	8004622 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80045b6:	2300      	movs	r3, #0
 80045b8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045be:	6839      	ldr	r1, [r7, #0]
 80045c0:	440a      	add	r2, r1
 80045c2:	7812      	ldrb	r2, [r2, #0]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045cc:	3301      	adds	r3, #1
 80045ce:	6839      	ldr	r1, [r7, #0]
 80045d0:	440b      	add	r3, r1
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	021b      	lsls	r3, r3, #8
 80045d6:	4313      	orrs	r3, r2
 80045d8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045de:	3302      	adds	r3, #2
 80045e0:	6839      	ldr	r1, [r7, #0]
 80045e2:	440b      	add	r3, r1
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	041b      	lsls	r3, r3, #16
 80045e8:	4313      	orrs	r3, r2
 80045ea:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045f0:	3303      	adds	r3, #3
 80045f2:	6839      	ldr	r1, [r7, #0]
 80045f4:	440b      	add	r3, r1
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	061b      	lsls	r3, r3, #24
 80045fa:	4313      	orrs	r3, r2
 80045fc:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8004604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004606:	3304      	adds	r3, #4
 8004608:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68da      	ldr	r2, [r3, #12]
 800460e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4413      	add	r3, r2
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	3208      	adds	r2, #8
 8004618:	6812      	ldr	r2, [r2, #0]
 800461a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 800461c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461e:	3301      	adds	r3, #1
 8004620:	633b      	str	r3, [r7, #48]	; 0x30
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004628:	429a      	cmp	r2, r3
 800462a:	d3c4      	bcc.n	80045b6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800462c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	4413      	add	r3, r2
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8004636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004638:	3301      	adds	r3, #1
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	4413      	add	r3, r2
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	021b      	lsls	r3, r3, #8
 8004642:	69fa      	ldr	r2, [r7, #28]
 8004644:	4313      	orrs	r3, r2
 8004646:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8004648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800464a:	3302      	adds	r3, #2
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	4413      	add	r3, r2
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	041b      	lsls	r3, r3, #16
 8004654:	69fa      	ldr	r2, [r7, #28]
 8004656:	4313      	orrs	r3, r2
 8004658:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800465a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800465c:	3303      	adds	r3, #3
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	4413      	add	r3, r2
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	061b      	lsls	r3, r3, #24
 8004666:	69fa      	ldr	r2, [r7, #28]
 8004668:	4313      	orrs	r3, r2
 800466a:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 800466c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800466e:	3304      	adds	r3, #4
 8004670:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	69fa      	ldr	r2, [r7, #28]
 8004678:	429a      	cmp	r2, r3
 800467a:	d90a      	bls.n	8004692 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	699a      	ldr	r2, [r3, #24]
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4619      	mov	r1, r3
 8004686:	4610      	mov	r0, r2
 8004688:	f00d fc6e 	bl	8011f68 <realloc>
 800468c:	4602      	mov	r2, r0
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	69fa      	ldr	r2, [r7, #28]
 8004696:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8004698:	2300      	movs	r3, #0
 800469a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800469c:	e035      	b.n	800470a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800469e:	2300      	movs	r3, #0
 80046a0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046a6:	6839      	ldr	r1, [r7, #0]
 80046a8:	440a      	add	r2, r1
 80046aa:	7812      	ldrb	r2, [r2, #0]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b4:	3301      	adds	r3, #1
 80046b6:	6839      	ldr	r1, [r7, #0]
 80046b8:	440b      	add	r3, r1
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	021b      	lsls	r3, r3, #8
 80046be:	4313      	orrs	r3, r2
 80046c0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046c6:	3302      	adds	r3, #2
 80046c8:	6839      	ldr	r1, [r7, #0]
 80046ca:	440b      	add	r3, r1
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	041b      	lsls	r3, r3, #16
 80046d0:	4313      	orrs	r3, r2
 80046d2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046d8:	3303      	adds	r3, #3
 80046da:	6839      	ldr	r1, [r7, #0]
 80046dc:	440b      	add	r3, r1
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	061b      	lsls	r3, r3, #24
 80046e2:	4313      	orrs	r3, r2
 80046e4:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80046ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ee:	3304      	adds	r3, #4
 80046f0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	699a      	ldr	r2, [r3, #24]
 80046f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	4413      	add	r3, r2
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	3214      	adds	r2, #20
 8004700:	6812      	ldr	r2, [r2, #0]
 8004702:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8004704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004706:	3301      	adds	r3, #1
 8004708:	62fb      	str	r3, [r7, #44]	; 0x2c
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004710:	429a      	cmp	r2, r3
 8004712:	d3c4      	bcc.n	800469e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8004714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004716:	683a      	ldr	r2, [r7, #0]
 8004718:	4413      	add	r3, r2
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800471e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004720:	3301      	adds	r3, #1
 8004722:	683a      	ldr	r2, [r7, #0]
 8004724:	4413      	add	r3, r2
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	021b      	lsls	r3, r3, #8
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	4313      	orrs	r3, r2
 800472e:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8004730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004732:	3302      	adds	r3, #2
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	4413      	add	r3, r2
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	041b      	lsls	r3, r3, #16
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	4313      	orrs	r3, r2
 8004740:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8004742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004744:	3303      	adds	r3, #3
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	4413      	add	r3, r2
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	061b      	lsls	r3, r3, #24
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	4313      	orrs	r3, r2
 8004752:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8004754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004756:	3304      	adds	r3, #4
 8004758:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	429a      	cmp	r2, r3
 8004762:	d90a      	bls.n	800477a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	4619      	mov	r1, r3
 800476e:	4610      	mov	r0, r2
 8004770:	f00d fbfa 	bl	8011f68 <realloc>
 8004774:	4602      	mov	r2, r0
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8004780:	2300      	movs	r3, #0
 8004782:	62bb      	str	r3, [r7, #40]	; 0x28
 8004784:	e03e      	b.n	8004804 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8004786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	441a      	add	r2, r3
 800478c:	f107 030c 	add.w	r3, r7, #12
 8004790:	4611      	mov	r1, r2
 8004792:	4618      	mov	r0, r3
 8004794:	f002 fc05 	bl	8006fa2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8004798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800479a:	3304      	adds	r3, #4
 800479c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800479e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a0:	627b      	str	r3, [r7, #36]	; 0x24
 80047a2:	e00b      	b.n	80047bc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	441a      	add	r2, r3
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	3b01      	subs	r3, #1
 80047ae:	6839      	ldr	r1, [r7, #0]
 80047b0:	440b      	add	r3, r1
 80047b2:	7812      	ldrb	r2, [r2, #0]
 80047b4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80047b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b8:	3301      	adds	r3, #1
 80047ba:	627b      	str	r3, [r7, #36]	; 0x24
 80047bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	4413      	add	r3, r2
 80047c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d3ed      	bcc.n	80047a4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80047c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	4413      	add	r3, r2
 80047ce:	3b01      	subs	r3, #1
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	4413      	add	r3, r2
 80047d4:	2200      	movs	r2, #0
 80047d6:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80047d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047da:	3b01      	subs	r3, #1
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	441a      	add	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80047e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	4413      	add	r3, r2
 80047ea:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4413      	add	r3, r2
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	3220      	adds	r2, #32
 80047fa:	6812      	ldr	r2, [r2, #0]
 80047fc:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80047fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004800:	3301      	adds	r3, #1
 8004802:	62bb      	str	r3, [r7, #40]	; 0x28
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800480a:	429a      	cmp	r2, r3
 800480c:	d3bb      	bcc.n	8004786 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 800480e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8004810:	4618      	mov	r0, r3
 8004812:	3738      	adds	r7, #56	; 0x38
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	4b03      	ldr	r3, [pc, #12]	; (8004830 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8004822:	4618      	mov	r0, r3
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	0801548c 	.word	0x0801548c

08004834 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	4b03      	ldr	r3, [pc, #12]	; (800484c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800483e:	4618      	mov	r0, r3
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	08015174 	.word	0x08015174

08004850 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
 800485c:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	611a      	str	r2, [r3, #16]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4618      	mov	r0, r3
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800487e:	b580      	push	{r7, lr}
 8004880:	b082      	sub	sp, #8
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
 8004886:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68d8      	ldr	r0, [r3, #12]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	6891      	ldr	r1, [r2, #8]
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	4798      	blx	r3
 800489c:	4603      	mov	r3, r0
  };
 800489e:	4618      	mov	r0, r3
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	691b      	ldr	r3, [r3, #16]
  }
 80048b2:	4618      	mov	r0, r3
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 1024;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80048be:	b480      	push	{r7}
 80048c0:	b083      	sub	sp, #12
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80048d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048d8:	4618      	mov	r0, r3
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 1024;//512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a0a      	ldr	r2, [pc, #40]	; (8004918 <_ZN13STM32HardwareC1Ev+0x34>)
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
    }
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4618      	mov	r0, r3
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr
 8004918:	20000484 	.word	0x20000484

0800491c <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 f804 	bl	8004932 <_ZN13STM32Hardware10reset_rbufEv>
    }
 800492a:	bf00      	nop
 800492c:	3708      	adds	r7, #8
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8004932:	b580      	push	{r7, lr}
 8004934:	b082      	sub	sp, #8
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6818      	ldr	r0, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	3304      	adds	r3, #4
 8004942:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004946:	4619      	mov	r1, r3
 8004948:	f007 fcca 	bl	800c2e0 <HAL_UART_Receive_DMA>
    }
 800494c:	bf00      	nop
 800494e:	3708      	adds	r7, #8
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <_ZN13STM32Hardware4readEv>:

    int read(){
 8004954:	b590      	push	{r4, r7, lr}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
      int c = -1;
 800495c:	f04f 33ff 	mov.w	r3, #4294967295
 8004960:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f8d3 4404 	ldr.w	r4, [r3, #1028]	; 0x404
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f7ff ffa8 	bl	80048be <_ZN13STM32Hardware10getRdmaIndEv>
 800496e:	4603      	mov	r3, r0
 8004970:	429c      	cmp	r4, r3
 8004972:	bf14      	ite	ne
 8004974:	2301      	movne	r3, #1
 8004976:	2300      	moveq	r3, #0
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d012      	beq.n	80049a4 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004984:	1c59      	adds	r1, r3, #1
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	4413      	add	r3, r2
 8004990:	791b      	ldrb	r3, [r3, #4]
 8004992:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800499a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      }
      return c;
 80049a4:	68fb      	ldr	r3, [r7, #12]
    }
 80049a6:	4618      	mov	r0, r3
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd90      	pop	{r4, r7, pc}
	...

080049b0 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b20      	cmp	r3, #32
 80049c4:	d108      	bne.n	80049d8 <_ZN13STM32Hardware5flushEv+0x28>
 80049c6:	4b28      	ldr	r3, [pc, #160]	; (8004a68 <_ZN13STM32Hardware5flushEv+0xb8>)
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	f083 0301 	eor.w	r3, r3, #1
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <_ZN13STM32Hardware5flushEv+0x28>
 80049d4:	2301      	movs	r3, #1
 80049d6:	e000      	b.n	80049da <_ZN13STM32Hardware5flushEv+0x2a>
 80049d8:	2300      	movs	r3, #0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d03f      	beq.n	8004a5e <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 80049de:	4b22      	ldr	r3, [pc, #136]	; (8004a68 <_ZN13STM32Hardware5flushEv+0xb8>)
 80049e0:	2201      	movs	r2, #1
 80049e2:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d031      	beq.n	8004a58 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d20a      	bcs.n	8004a1a <_ZN13STM32Hardware5flushEv+0x6a>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	e006      	b.n	8004a28 <_ZN13STM32Hardware5flushEv+0x78>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6818      	ldr	r0, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8004a34:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	89fa      	ldrh	r2, [r7, #14]
 8004a3e:	4619      	mov	r1, r3
 8004a40:	f007 fbde 	bl	800c200 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 8004a4a:	89fb      	ldrh	r3, [r7, #14]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
        }
        mutex = false;
 8004a58:	4b03      	ldr	r3, [pc, #12]	; (8004a68 <_ZN13STM32Hardware5flushEv+0xb8>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	701a      	strb	r2, [r3, #0]
      }
    }
 8004a5e:	bf00      	nop
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	20000ad8 	.word	0x20000ad8

08004a6c <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
          long n = length;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	617b      	str	r3, [r7, #20]
          n = n <= tbuflen ? n : tbuflen;
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a82:	bfa8      	it	ge
 8004a84:	f44f 6380 	movge.w	r3, #1024	; 0x400
 8004a88:	617b      	str	r3, [r7, #20]

          long n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8004a90:	f5c3 6280 	rsb	r2, r3, #1024	; 0x400
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	4293      	cmp	r3, r2
 8004a98:	bf28      	it	cs
 8004a9a:	4613      	movcs	r3, r2
 8004a9c:	613b      	str	r3, [r7, #16]
          memcpy(&(tbuf[twind]), data, n_tail);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8004aa4:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	4413      	add	r3, r2
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	68b9      	ldr	r1, [r7, #8]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f00e f9f4 	bl	8012e9e <memcpy>
          twind = (twind + n) & (tbuflen - 1);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	4413      	add	r3, r2
 8004ac0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808

          if(n != n_tail){
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d00b      	beq.n	8004aea <_ZN13STM32Hardware5writeEPhi+0x7e>
            memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f503 6081 	add.w	r0, r3, #1032	; 0x408
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	18d1      	adds	r1, r2, r3
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	f00e f9da 	bl	8012e9e <memcpy>
          }

          flush();
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f7ff ff60 	bl	80049b0 <_ZN13STM32Hardware5flushEv>
        }
 8004af0:	bf00      	nop
 8004af2:	3718      	adds	r7, #24
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	f003 fe88 	bl	8008814 <HAL_GetTick>
 8004b04:	4603      	mov	r3, r0
 8004b06:	4618      	mov	r0, r3
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
	...

08004b10 <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef double _z_type;
      _z_type z;
      typedef double _w_type;
      _w_type w;

    Quaternion():
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7ff f858 	bl	8003bd0 <_ZN3ros3MsgC1Ev>
 8004b20:	4a11      	ldr	r2, [pc, #68]	; (8004b68 <_ZN13geometry_msgs10QuaternionC1Ev+0x58>)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	601a      	str	r2, [r3, #0]
      x(0),
 8004b26:	6879      	ldr	r1, [r7, #4]
 8004b28:	f04f 0200 	mov.w	r2, #0
 8004b2c:	f04f 0300 	mov.w	r3, #0
 8004b30:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 8004b34:	6879      	ldr	r1, [r7, #4]
 8004b36:	f04f 0200 	mov.w	r2, #0
 8004b3a:	f04f 0300 	mov.w	r3, #0
 8004b3e:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0),
 8004b42:	6879      	ldr	r1, [r7, #4]
 8004b44:	f04f 0200 	mov.w	r2, #0
 8004b48:	f04f 0300 	mov.w	r3, #0
 8004b4c:	e9c1 2306 	strd	r2, r3, [r1, #24]
      w(0)
 8004b50:	6879      	ldr	r1, [r7, #4]
 8004b52:	f04f 0200 	mov.w	r2, #0
 8004b56:	f04f 0300 	mov.w	r3, #0
 8004b5a:	e9c1 2308 	strd	r2, r3, [r1, #32]
    {
    }
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4618      	mov	r0, r3
 8004b62:	3708      	adds	r7, #8
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	08015584 	.word	0x08015584

08004b6c <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004b6c:	b480      	push	{r7}
 8004b6e:	b08d      	sub	sp, #52	; 0x34
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004b76:	2300      	movs	r3, #0
 8004b78:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004b80:	e9c7 2308 	strd	r2, r3, [r7, #32]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8004b84:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b8a:	6838      	ldr	r0, [r7, #0]
 8004b8c:	4401      	add	r1, r0
 8004b8e:	b2d3      	uxtb	r3, r2
 8004b90:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8004b92:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004b96:	f04f 0200 	mov.w	r2, #0
 8004b9a:	f04f 0300 	mov.w	r3, #0
 8004b9e:	0a02      	lsrs	r2, r0, #8
 8004ba0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004ba4:	0a0b      	lsrs	r3, r1, #8
 8004ba6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ba8:	3101      	adds	r1, #1
 8004baa:	6838      	ldr	r0, [r7, #0]
 8004bac:	4401      	add	r1, r0
 8004bae:	b2d3      	uxtb	r3, r2
 8004bb0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8004bb2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004bb6:	f04f 0200 	mov.w	r2, #0
 8004bba:	f04f 0300 	mov.w	r3, #0
 8004bbe:	0c02      	lsrs	r2, r0, #16
 8004bc0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004bc4:	0c0b      	lsrs	r3, r1, #16
 8004bc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bc8:	3102      	adds	r1, #2
 8004bca:	6838      	ldr	r0, [r7, #0]
 8004bcc:	4401      	add	r1, r0
 8004bce:	b2d3      	uxtb	r3, r2
 8004bd0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8004bd2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004bd6:	f04f 0200 	mov.w	r2, #0
 8004bda:	f04f 0300 	mov.w	r3, #0
 8004bde:	0e02      	lsrs	r2, r0, #24
 8004be0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004be4:	0e0b      	lsrs	r3, r1, #24
 8004be6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004be8:	3103      	adds	r1, #3
 8004bea:	6838      	ldr	r0, [r7, #0]
 8004bec:	4401      	add	r1, r0
 8004bee:	b2d3      	uxtb	r3, r2
 8004bf0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8004bf2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004bf6:	f04f 0200 	mov.w	r2, #0
 8004bfa:	f04f 0300 	mov.w	r3, #0
 8004bfe:	000a      	movs	r2, r1
 8004c00:	2300      	movs	r3, #0
 8004c02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c04:	3104      	adds	r1, #4
 8004c06:	6838      	ldr	r0, [r7, #0]
 8004c08:	4401      	add	r1, r0
 8004c0a:	b2d3      	uxtb	r3, r2
 8004c0c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8004c0e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004c12:	f04f 0200 	mov.w	r2, #0
 8004c16:	f04f 0300 	mov.w	r3, #0
 8004c1a:	0a0a      	lsrs	r2, r1, #8
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c20:	3105      	adds	r1, #5
 8004c22:	6838      	ldr	r0, [r7, #0]
 8004c24:	4401      	add	r1, r0
 8004c26:	b2d3      	uxtb	r3, r2
 8004c28:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8004c2a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004c2e:	f04f 0200 	mov.w	r2, #0
 8004c32:	f04f 0300 	mov.w	r3, #0
 8004c36:	0c0a      	lsrs	r2, r1, #16
 8004c38:	2300      	movs	r3, #0
 8004c3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c3c:	3106      	adds	r1, #6
 8004c3e:	6838      	ldr	r0, [r7, #0]
 8004c40:	4401      	add	r1, r0
 8004c42:	b2d3      	uxtb	r3, r2
 8004c44:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8004c46:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004c4a:	f04f 0200 	mov.w	r2, #0
 8004c4e:	f04f 0300 	mov.w	r3, #0
 8004c52:	0e0a      	lsrs	r2, r1, #24
 8004c54:	2300      	movs	r3, #0
 8004c56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c58:	3107      	adds	r1, #7
 8004c5a:	6838      	ldr	r0, [r7, #0]
 8004c5c:	4401      	add	r1, r0
 8004c5e:	b2d3      	uxtb	r3, r2
 8004c60:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8004c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c64:	3308      	adds	r3, #8
 8004c66:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004c6e:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8004c72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c78:	6838      	ldr	r0, [r7, #0]
 8004c7a:	4401      	add	r1, r0
 8004c7c:	b2d3      	uxtb	r3, r2
 8004c7e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8004c80:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004c84:	f04f 0200 	mov.w	r2, #0
 8004c88:	f04f 0300 	mov.w	r3, #0
 8004c8c:	0a02      	lsrs	r2, r0, #8
 8004c8e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004c92:	0a0b      	lsrs	r3, r1, #8
 8004c94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c96:	3101      	adds	r1, #1
 8004c98:	6838      	ldr	r0, [r7, #0]
 8004c9a:	4401      	add	r1, r0
 8004c9c:	b2d3      	uxtb	r3, r2
 8004c9e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8004ca0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004ca4:	f04f 0200 	mov.w	r2, #0
 8004ca8:	f04f 0300 	mov.w	r3, #0
 8004cac:	0c02      	lsrs	r2, r0, #16
 8004cae:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004cb2:	0c0b      	lsrs	r3, r1, #16
 8004cb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cb6:	3102      	adds	r1, #2
 8004cb8:	6838      	ldr	r0, [r7, #0]
 8004cba:	4401      	add	r1, r0
 8004cbc:	b2d3      	uxtb	r3, r2
 8004cbe:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8004cc0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004cc4:	f04f 0200 	mov.w	r2, #0
 8004cc8:	f04f 0300 	mov.w	r3, #0
 8004ccc:	0e02      	lsrs	r2, r0, #24
 8004cce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004cd2:	0e0b      	lsrs	r3, r1, #24
 8004cd4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cd6:	3103      	adds	r1, #3
 8004cd8:	6838      	ldr	r0, [r7, #0]
 8004cda:	4401      	add	r1, r0
 8004cdc:	b2d3      	uxtb	r3, r2
 8004cde:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8004ce0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	f04f 0300 	mov.w	r3, #0
 8004cec:	000a      	movs	r2, r1
 8004cee:	2300      	movs	r3, #0
 8004cf0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cf2:	3104      	adds	r1, #4
 8004cf4:	6838      	ldr	r0, [r7, #0]
 8004cf6:	4401      	add	r1, r0
 8004cf8:	b2d3      	uxtb	r3, r2
 8004cfa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8004cfc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004d00:	f04f 0200 	mov.w	r2, #0
 8004d04:	f04f 0300 	mov.w	r3, #0
 8004d08:	0a0a      	lsrs	r2, r1, #8
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d0e:	3105      	adds	r1, #5
 8004d10:	6838      	ldr	r0, [r7, #0]
 8004d12:	4401      	add	r1, r0
 8004d14:	b2d3      	uxtb	r3, r2
 8004d16:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8004d18:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004d1c:	f04f 0200 	mov.w	r2, #0
 8004d20:	f04f 0300 	mov.w	r3, #0
 8004d24:	0c0a      	lsrs	r2, r1, #16
 8004d26:	2300      	movs	r3, #0
 8004d28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d2a:	3106      	adds	r1, #6
 8004d2c:	6838      	ldr	r0, [r7, #0]
 8004d2e:	4401      	add	r1, r0
 8004d30:	b2d3      	uxtb	r3, r2
 8004d32:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8004d34:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004d38:	f04f 0200 	mov.w	r2, #0
 8004d3c:	f04f 0300 	mov.w	r3, #0
 8004d40:	0e0a      	lsrs	r2, r1, #24
 8004d42:	2300      	movs	r3, #0
 8004d44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d46:	3107      	adds	r1, #7
 8004d48:	6838      	ldr	r0, [r7, #0]
 8004d4a:	4401      	add	r1, r0
 8004d4c:	b2d3      	uxtb	r3, r2
 8004d4e:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8004d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d52:	3308      	adds	r3, #8
 8004d54:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004d5c:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8004d60:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004d64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d66:	6838      	ldr	r0, [r7, #0]
 8004d68:	4401      	add	r1, r0
 8004d6a:	b2d3      	uxtb	r3, r2
 8004d6c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8004d6e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004d72:	f04f 0200 	mov.w	r2, #0
 8004d76:	f04f 0300 	mov.w	r3, #0
 8004d7a:	0a02      	lsrs	r2, r0, #8
 8004d7c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004d80:	0a0b      	lsrs	r3, r1, #8
 8004d82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d84:	3101      	adds	r1, #1
 8004d86:	6838      	ldr	r0, [r7, #0]
 8004d88:	4401      	add	r1, r0
 8004d8a:	b2d3      	uxtb	r3, r2
 8004d8c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8004d8e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004d92:	f04f 0200 	mov.w	r2, #0
 8004d96:	f04f 0300 	mov.w	r3, #0
 8004d9a:	0c02      	lsrs	r2, r0, #16
 8004d9c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004da0:	0c0b      	lsrs	r3, r1, #16
 8004da2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004da4:	3102      	adds	r1, #2
 8004da6:	6838      	ldr	r0, [r7, #0]
 8004da8:	4401      	add	r1, r0
 8004daa:	b2d3      	uxtb	r3, r2
 8004dac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8004dae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004db2:	f04f 0200 	mov.w	r2, #0
 8004db6:	f04f 0300 	mov.w	r3, #0
 8004dba:	0e02      	lsrs	r2, r0, #24
 8004dbc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004dc0:	0e0b      	lsrs	r3, r1, #24
 8004dc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dc4:	3103      	adds	r1, #3
 8004dc6:	6838      	ldr	r0, [r7, #0]
 8004dc8:	4401      	add	r1, r0
 8004dca:	b2d3      	uxtb	r3, r2
 8004dcc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8004dce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004dd2:	f04f 0200 	mov.w	r2, #0
 8004dd6:	f04f 0300 	mov.w	r3, #0
 8004dda:	000a      	movs	r2, r1
 8004ddc:	2300      	movs	r3, #0
 8004dde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004de0:	3104      	adds	r1, #4
 8004de2:	6838      	ldr	r0, [r7, #0]
 8004de4:	4401      	add	r1, r0
 8004de6:	b2d3      	uxtb	r3, r2
 8004de8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8004dea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004dee:	f04f 0200 	mov.w	r2, #0
 8004df2:	f04f 0300 	mov.w	r3, #0
 8004df6:	0a0a      	lsrs	r2, r1, #8
 8004df8:	2300      	movs	r3, #0
 8004dfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dfc:	3105      	adds	r1, #5
 8004dfe:	6838      	ldr	r0, [r7, #0]
 8004e00:	4401      	add	r1, r0
 8004e02:	b2d3      	uxtb	r3, r2
 8004e04:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8004e06:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004e0a:	f04f 0200 	mov.w	r2, #0
 8004e0e:	f04f 0300 	mov.w	r3, #0
 8004e12:	0c0a      	lsrs	r2, r1, #16
 8004e14:	2300      	movs	r3, #0
 8004e16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e18:	3106      	adds	r1, #6
 8004e1a:	6838      	ldr	r0, [r7, #0]
 8004e1c:	4401      	add	r1, r0
 8004e1e:	b2d3      	uxtb	r3, r2
 8004e20:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8004e22:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004e26:	f04f 0200 	mov.w	r2, #0
 8004e2a:	f04f 0300 	mov.w	r3, #0
 8004e2e:	0e0a      	lsrs	r2, r1, #24
 8004e30:	2300      	movs	r3, #0
 8004e32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e34:	3107      	adds	r1, #7
 8004e36:	6838      	ldr	r0, [r7, #0]
 8004e38:	4401      	add	r1, r0
 8004e3a:	b2d3      	uxtb	r3, r2
 8004e3c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8004e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e40:	3308      	adds	r3, #8
 8004e42:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.real = this->w;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004e4a:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_w.base >> (8 * 0)) & 0xFF;
 8004e4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e54:	6838      	ldr	r0, [r7, #0]
 8004e56:	4401      	add	r1, r0
 8004e58:	b2d3      	uxtb	r3, r2
 8004e5a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_w.base >> (8 * 1)) & 0xFF;
 8004e5c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e60:	f04f 0200 	mov.w	r2, #0
 8004e64:	f04f 0300 	mov.w	r3, #0
 8004e68:	0a02      	lsrs	r2, r0, #8
 8004e6a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004e6e:	0a0b      	lsrs	r3, r1, #8
 8004e70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e72:	3101      	adds	r1, #1
 8004e74:	6838      	ldr	r0, [r7, #0]
 8004e76:	4401      	add	r1, r0
 8004e78:	b2d3      	uxtb	r3, r2
 8004e7a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_w.base >> (8 * 2)) & 0xFF;
 8004e7c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e80:	f04f 0200 	mov.w	r2, #0
 8004e84:	f04f 0300 	mov.w	r3, #0
 8004e88:	0c02      	lsrs	r2, r0, #16
 8004e8a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004e8e:	0c0b      	lsrs	r3, r1, #16
 8004e90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e92:	3102      	adds	r1, #2
 8004e94:	6838      	ldr	r0, [r7, #0]
 8004e96:	4401      	add	r1, r0
 8004e98:	b2d3      	uxtb	r3, r2
 8004e9a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_w.base >> (8 * 3)) & 0xFF;
 8004e9c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004ea0:	f04f 0200 	mov.w	r2, #0
 8004ea4:	f04f 0300 	mov.w	r3, #0
 8004ea8:	0e02      	lsrs	r2, r0, #24
 8004eaa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004eae:	0e0b      	lsrs	r3, r1, #24
 8004eb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004eb2:	3103      	adds	r1, #3
 8004eb4:	6838      	ldr	r0, [r7, #0]
 8004eb6:	4401      	add	r1, r0
 8004eb8:	b2d3      	uxtb	r3, r2
 8004eba:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_w.base >> (8 * 4)) & 0xFF;
 8004ebc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004ec0:	f04f 0200 	mov.w	r2, #0
 8004ec4:	f04f 0300 	mov.w	r3, #0
 8004ec8:	000a      	movs	r2, r1
 8004eca:	2300      	movs	r3, #0
 8004ecc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ece:	3104      	adds	r1, #4
 8004ed0:	6838      	ldr	r0, [r7, #0]
 8004ed2:	4401      	add	r1, r0
 8004ed4:	b2d3      	uxtb	r3, r2
 8004ed6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_w.base >> (8 * 5)) & 0xFF;
 8004ed8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004edc:	f04f 0200 	mov.w	r2, #0
 8004ee0:	f04f 0300 	mov.w	r3, #0
 8004ee4:	0a0a      	lsrs	r2, r1, #8
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004eea:	3105      	adds	r1, #5
 8004eec:	6838      	ldr	r0, [r7, #0]
 8004eee:	4401      	add	r1, r0
 8004ef0:	b2d3      	uxtb	r3, r2
 8004ef2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_w.base >> (8 * 6)) & 0xFF;
 8004ef4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004ef8:	f04f 0200 	mov.w	r2, #0
 8004efc:	f04f 0300 	mov.w	r3, #0
 8004f00:	0c0a      	lsrs	r2, r1, #16
 8004f02:	2300      	movs	r3, #0
 8004f04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f06:	3106      	adds	r1, #6
 8004f08:	6838      	ldr	r0, [r7, #0]
 8004f0a:	4401      	add	r1, r0
 8004f0c:	b2d3      	uxtb	r3, r2
 8004f0e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_w.base >> (8 * 7)) & 0xFF;
 8004f10:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f14:	f04f 0200 	mov.w	r2, #0
 8004f18:	f04f 0300 	mov.w	r3, #0
 8004f1c:	0e0a      	lsrs	r2, r1, #24
 8004f1e:	2300      	movs	r3, #0
 8004f20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f22:	3107      	adds	r1, #7
 8004f24:	6838      	ldr	r0, [r7, #0]
 8004f26:	4401      	add	r1, r0
 8004f28:	b2d3      	uxtb	r3, r2
 8004f2a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->w);
 8004f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f2e:	3308      	adds	r3, #8
 8004f30:	62fb      	str	r3, [r7, #44]	; 0x2c
      return offset;
 8004f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8004f34:	4618      	mov	r0, r3
 8004f36:	3734      	adds	r7, #52	; 0x34
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004f40:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004f44:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
 8004f4e:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
    {
      int offset = 0;
 8004f52:	2300      	movs	r3, #0
 8004f54:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8004f58:	f04f 0200 	mov.w	r2, #0
 8004f5c:	f04f 0300 	mov.w	r3, #0
 8004f60:	e9c7 238a 	strd	r2, r3, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004f64:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8004f68:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8004f6c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004f70:	4413      	add	r3, r2
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2200      	movs	r2, #0
 8004f78:	461c      	mov	r4, r3
 8004f7a:	4615      	mov	r5, r2
 8004f7c:	ea40 0804 	orr.w	r8, r0, r4
 8004f80:	ea41 0905 	orr.w	r9, r1, r5
 8004f84:	e9c7 898a 	strd	r8, r9, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004f88:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8004f8c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004f90:	1c5a      	adds	r2, r3, #1
 8004f92:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004f96:	4413      	add	r3, r2
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	469a      	mov	sl, r3
 8004fa0:	4693      	mov	fp, r2
 8004fa2:	f04f 0200 	mov.w	r2, #0
 8004fa6:	f04f 0300 	mov.w	r3, #0
 8004faa:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8004fae:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8004fb2:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8004fb6:	ea40 0402 	orr.w	r4, r0, r2
 8004fba:	f8c7 4200 	str.w	r4, [r7, #512]	; 0x200
 8004fbe:	430b      	orrs	r3, r1
 8004fc0:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8004fc4:	e9d7 3480 	ldrd	r3, r4, [r7, #512]	; 0x200
 8004fc8:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004fcc:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8004fd0:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004fd4:	1c9a      	adds	r2, r3, #2
 8004fd6:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004fda:	4413      	add	r3, r2
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8004fe6:	f8c7 21fc 	str.w	r2, [r7, #508]	; 0x1fc
 8004fea:	f04f 0200 	mov.w	r2, #0
 8004fee:	f04f 0300 	mov.w	r3, #0
 8004ff2:	e9d7 897e 	ldrd	r8, r9, [r7, #504]	; 0x1f8
 8004ff6:	464c      	mov	r4, r9
 8004ff8:	0423      	lsls	r3, r4, #16
 8004ffa:	4644      	mov	r4, r8
 8004ffc:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8005000:	4644      	mov	r4, r8
 8005002:	0422      	lsls	r2, r4, #16
 8005004:	ea40 0402 	orr.w	r4, r0, r2
 8005008:	f8c7 41f0 	str.w	r4, [r7, #496]	; 0x1f0
 800500c:	430b      	orrs	r3, r1
 800500e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8005012:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8005016:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800501a:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 800501e:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005022:	1cda      	adds	r2, r3, #3
 8005024:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8005028:	4413      	add	r3, r2
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2200      	movs	r2, #0
 8005030:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8005034:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
 8005038:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	; 0x1e8
 800503c:	4623      	mov	r3, r4
 800503e:	0a1b      	lsrs	r3, r3, #8
 8005040:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005044:	4623      	mov	r3, r4
 8005046:	061b      	lsls	r3, r3, #24
 8005048:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800504c:	e9d7 4578 	ldrd	r4, r5, [r7, #480]	; 0x1e0
 8005050:	4623      	mov	r3, r4
 8005052:	4303      	orrs	r3, r0
 8005054:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8005058:	462b      	mov	r3, r5
 800505a:	430b      	orrs	r3, r1
 800505c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8005060:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8005064:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005068:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 800506c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005070:	1d1a      	adds	r2, r3, #4
 8005072:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8005076:	4413      	add	r3, r2
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2200      	movs	r2, #0
 800507e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8005082:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
 8005086:	f04f 0200 	mov.w	r2, #0
 800508a:	f04f 0300 	mov.w	r3, #0
 800508e:	f8d7 41d0 	ldr.w	r4, [r7, #464]	; 0x1d0
 8005092:	0023      	movs	r3, r4
 8005094:	2200      	movs	r2, #0
 8005096:	ea40 0402 	orr.w	r4, r0, r2
 800509a:	f8c7 41c8 	str.w	r4, [r7, #456]	; 0x1c8
 800509e:	430b      	orrs	r3, r1
 80050a0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 80050a4:	e9d7 3472 	ldrd	r3, r4, [r7, #456]	; 0x1c8
 80050a8:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80050ac:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 80050b0:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80050b4:	1d5a      	adds	r2, r3, #5
 80050b6:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80050ba:	4413      	add	r3, r2
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2200      	movs	r2, #0
 80050c2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80050c6:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 80050ca:	f04f 0200 	mov.w	r2, #0
 80050ce:	f04f 0300 	mov.w	r3, #0
 80050d2:	f8d7 41c0 	ldr.w	r4, [r7, #448]	; 0x1c0
 80050d6:	0223      	lsls	r3, r4, #8
 80050d8:	2200      	movs	r2, #0
 80050da:	ea40 0402 	orr.w	r4, r0, r2
 80050de:	f8c7 41b8 	str.w	r4, [r7, #440]	; 0x1b8
 80050e2:	430b      	orrs	r3, r1
 80050e4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80050e8:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	; 0x1b8
 80050ec:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80050f0:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 80050f4:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80050f8:	1d9a      	adds	r2, r3, #6
 80050fa:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80050fe:	4413      	add	r3, r2
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2200      	movs	r2, #0
 8005106:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 800510a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 800510e:	f04f 0200 	mov.w	r2, #0
 8005112:	f04f 0300 	mov.w	r3, #0
 8005116:	f8d7 41b0 	ldr.w	r4, [r7, #432]	; 0x1b0
 800511a:	0423      	lsls	r3, r4, #16
 800511c:	2200      	movs	r2, #0
 800511e:	ea40 0402 	orr.w	r4, r0, r2
 8005122:	f8c7 41a8 	str.w	r4, [r7, #424]	; 0x1a8
 8005126:	430b      	orrs	r3, r1
 8005128:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800512c:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 8005130:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005134:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8005138:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800513c:	1dda      	adds	r2, r3, #7
 800513e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8005142:	4413      	add	r3, r2
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	b2db      	uxtb	r3, r3
 8005148:	2200      	movs	r2, #0
 800514a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800514e:	f8c7 21a4 	str.w	r2, [r7, #420]	; 0x1a4
 8005152:	f04f 0200 	mov.w	r2, #0
 8005156:	f04f 0300 	mov.w	r3, #0
 800515a:	f8d7 41a0 	ldr.w	r4, [r7, #416]	; 0x1a0
 800515e:	0623      	lsls	r3, r4, #24
 8005160:	2200      	movs	r2, #0
 8005162:	ea40 0402 	orr.w	r4, r0, r2
 8005166:	f8c7 4198 	str.w	r4, [r7, #408]	; 0x198
 800516a:	430b      	orrs	r3, r1
 800516c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8005170:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	; 0x198
 8005174:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      this->x = u_x.real;
 8005178:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 800517c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005180:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8005184:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005188:	3308      	adds	r3, #8
 800518a:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 800518e:	f04f 0200 	mov.w	r2, #0
 8005192:	f04f 0300 	mov.w	r3, #0
 8005196:	e9c7 2388 	strd	r2, r3, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800519a:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 800519e:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 80051a2:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80051a6:	4413      	add	r3, r2
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2200      	movs	r2, #0
 80051ae:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 80051b2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 80051b6:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	; 0x190
 80051ba:	4623      	mov	r3, r4
 80051bc:	4303      	orrs	r3, r0
 80051be:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80051c2:	462b      	mov	r3, r5
 80051c4:	430b      	orrs	r3, r1
 80051c6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80051ca:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 80051ce:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80051d2:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 80051d6:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80051e0:	4413      	add	r3, r2
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2200      	movs	r2, #0
 80051e8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80051ec:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 80051f0:	f04f 0200 	mov.w	r2, #0
 80051f4:	f04f 0300 	mov.w	r3, #0
 80051f8:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	; 0x180
 80051fc:	464c      	mov	r4, r9
 80051fe:	0223      	lsls	r3, r4, #8
 8005200:	4644      	mov	r4, r8
 8005202:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005206:	4644      	mov	r4, r8
 8005208:	0222      	lsls	r2, r4, #8
 800520a:	ea40 0402 	orr.w	r4, r0, r2
 800520e:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8005212:	430b      	orrs	r3, r1
 8005214:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8005218:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 800521c:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005220:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8005224:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005228:	1c9a      	adds	r2, r3, #2
 800522a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800522e:	4413      	add	r3, r2
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	b2db      	uxtb	r3, r3
 8005234:	2200      	movs	r2, #0
 8005236:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800523a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 800523e:	f04f 0200 	mov.w	r2, #0
 8005242:	f04f 0300 	mov.w	r3, #0
 8005246:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 800524a:	464c      	mov	r4, r9
 800524c:	0423      	lsls	r3, r4, #16
 800524e:	4644      	mov	r4, r8
 8005250:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8005254:	4644      	mov	r4, r8
 8005256:	0422      	lsls	r2, r4, #16
 8005258:	ea40 0402 	orr.w	r4, r0, r2
 800525c:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8005260:	430b      	orrs	r3, r1
 8005262:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005266:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 800526a:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800526e:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8005272:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005276:	1cda      	adds	r2, r3, #3
 8005278:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800527c:	4413      	add	r3, r2
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2200      	movs	r2, #0
 8005284:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8005288:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 800528c:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8005290:	4623      	mov	r3, r4
 8005292:	0a1b      	lsrs	r3, r3, #8
 8005294:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8005298:	4623      	mov	r3, r4
 800529a:	061b      	lsls	r3, r3, #24
 800529c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80052a0:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 80052a4:	4623      	mov	r3, r4
 80052a6:	4303      	orrs	r3, r0
 80052a8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80052ac:	462b      	mov	r3, r5
 80052ae:	430b      	orrs	r3, r1
 80052b0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80052b4:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 80052b8:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80052bc:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 80052c0:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80052c4:	1d1a      	adds	r2, r3, #4
 80052c6:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80052ca:	4413      	add	r3, r2
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	2200      	movs	r2, #0
 80052d2:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80052d6:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80052da:	f04f 0200 	mov.w	r2, #0
 80052de:	f04f 0300 	mov.w	r3, #0
 80052e2:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 80052e6:	0023      	movs	r3, r4
 80052e8:	2200      	movs	r2, #0
 80052ea:	ea40 0402 	orr.w	r4, r0, r2
 80052ee:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 80052f2:	430b      	orrs	r3, r1
 80052f4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80052f8:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80052fc:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005300:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8005304:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005308:	1d5a      	adds	r2, r3, #5
 800530a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800530e:	4413      	add	r3, r2
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2200      	movs	r2, #0
 8005316:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800531a:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800531e:	f04f 0200 	mov.w	r2, #0
 8005322:	f04f 0300 	mov.w	r3, #0
 8005326:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 800532a:	0223      	lsls	r3, r4, #8
 800532c:	2200      	movs	r2, #0
 800532e:	ea40 0402 	orr.w	r4, r0, r2
 8005332:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8005336:	430b      	orrs	r3, r1
 8005338:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800533c:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8005340:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005344:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8005348:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800534c:	1d9a      	adds	r2, r3, #6
 800534e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8005352:	4413      	add	r3, r2
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	b2db      	uxtb	r3, r3
 8005358:	2200      	movs	r2, #0
 800535a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800535e:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8005362:	f04f 0200 	mov.w	r2, #0
 8005366:	f04f 0300 	mov.w	r3, #0
 800536a:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 800536e:	0423      	lsls	r3, r4, #16
 8005370:	2200      	movs	r2, #0
 8005372:	ea40 0402 	orr.w	r4, r0, r2
 8005376:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 800537a:	430b      	orrs	r3, r1
 800537c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005380:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8005384:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005388:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 800538c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005390:	1dda      	adds	r2, r3, #7
 8005392:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8005396:	4413      	add	r3, r2
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	b2db      	uxtb	r3, r3
 800539c:	2200      	movs	r2, #0
 800539e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80053a2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80053a6:	f04f 0200 	mov.w	r2, #0
 80053aa:	f04f 0300 	mov.w	r3, #0
 80053ae:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 80053b2:	0623      	lsls	r3, r4, #24
 80053b4:	2200      	movs	r2, #0
 80053b6:	ea40 0402 	orr.w	r4, r0, r2
 80053ba:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 80053be:	430b      	orrs	r3, r1
 80053c0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80053c4:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 80053c8:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      this->y = u_y.real;
 80053cc:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 80053d0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80053d4:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 80053d8:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80053dc:	3308      	adds	r3, #8
 80053de:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 80053e2:	f04f 0200 	mov.w	r2, #0
 80053e6:	f04f 0300 	mov.w	r3, #0
 80053ea:	e9c7 2386 	strd	r2, r3, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80053ee:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 80053f2:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 80053f6:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80053fa:	4413      	add	r3, r2
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2200      	movs	r2, #0
 8005402:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005406:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800540a:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800540e:	4623      	mov	r3, r4
 8005410:	4303      	orrs	r3, r0
 8005412:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005416:	462b      	mov	r3, r5
 8005418:	430b      	orrs	r3, r1
 800541a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800541e:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8005422:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005426:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 800542a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800542e:	1c5a      	adds	r2, r3, #1
 8005430:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8005434:	4413      	add	r3, r2
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2200      	movs	r2, #0
 800543c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005440:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8005444:	f04f 0200 	mov.w	r2, #0
 8005448:	f04f 0300 	mov.w	r3, #0
 800544c:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8005450:	464c      	mov	r4, r9
 8005452:	0223      	lsls	r3, r4, #8
 8005454:	4644      	mov	r4, r8
 8005456:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800545a:	4644      	mov	r4, r8
 800545c:	0222      	lsls	r2, r4, #8
 800545e:	ea40 0402 	orr.w	r4, r0, r2
 8005462:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8005466:	430b      	orrs	r3, r1
 8005468:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800546c:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8005470:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005474:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8005478:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800547c:	1c9a      	adds	r2, r3, #2
 800547e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8005482:	4413      	add	r3, r2
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2200      	movs	r2, #0
 800548a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800548e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005492:	f04f 0200 	mov.w	r2, #0
 8005496:	f04f 0300 	mov.w	r3, #0
 800549a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800549e:	464c      	mov	r4, r9
 80054a0:	0423      	lsls	r3, r4, #16
 80054a2:	4644      	mov	r4, r8
 80054a4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80054a8:	4644      	mov	r4, r8
 80054aa:	0422      	lsls	r2, r4, #16
 80054ac:	ea40 0402 	orr.w	r4, r0, r2
 80054b0:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 80054b4:	430b      	orrs	r3, r1
 80054b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80054ba:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80054be:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80054c2:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 80054c6:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80054ca:	1cda      	adds	r2, r3, #3
 80054cc:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80054d0:	4413      	add	r3, r2
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2200      	movs	r2, #0
 80054d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80054dc:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80054e0:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80054e4:	4623      	mov	r3, r4
 80054e6:	0a1b      	lsrs	r3, r3, #8
 80054e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80054ec:	4623      	mov	r3, r4
 80054ee:	061b      	lsls	r3, r3, #24
 80054f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054f4:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80054f8:	4623      	mov	r3, r4
 80054fa:	4303      	orrs	r3, r0
 80054fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005500:	462b      	mov	r3, r5
 8005502:	430b      	orrs	r3, r1
 8005504:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005508:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800550c:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005510:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8005514:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005518:	1d1a      	adds	r2, r3, #4
 800551a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800551e:	4413      	add	r3, r2
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	b2db      	uxtb	r3, r3
 8005524:	2200      	movs	r2, #0
 8005526:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800552a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800552e:	f04f 0200 	mov.w	r2, #0
 8005532:	f04f 0300 	mov.w	r3, #0
 8005536:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 800553a:	0023      	movs	r3, r4
 800553c:	2200      	movs	r2, #0
 800553e:	ea40 0402 	orr.w	r4, r0, r2
 8005542:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8005546:	430b      	orrs	r3, r1
 8005548:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800554c:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8005550:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005554:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8005558:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800555c:	1d5a      	adds	r2, r3, #5
 800555e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8005562:	4413      	add	r3, r2
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	b2db      	uxtb	r3, r3
 8005568:	2200      	movs	r2, #0
 800556a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800556e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8005572:	f04f 0200 	mov.w	r2, #0
 8005576:	f04f 0300 	mov.w	r3, #0
 800557a:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 800557e:	0223      	lsls	r3, r4, #8
 8005580:	2200      	movs	r2, #0
 8005582:	ea40 0402 	orr.w	r4, r0, r2
 8005586:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800558a:	430b      	orrs	r3, r1
 800558c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005590:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8005594:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005598:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 800559c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80055a0:	1d9a      	adds	r2, r3, #6
 80055a2:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80055a6:	4413      	add	r3, r2
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2200      	movs	r2, #0
 80055ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80055b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80055b6:	f04f 0200 	mov.w	r2, #0
 80055ba:	f04f 0300 	mov.w	r3, #0
 80055be:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80055c2:	0423      	lsls	r3, r4, #16
 80055c4:	2200      	movs	r2, #0
 80055c6:	ea40 0402 	orr.w	r4, r0, r2
 80055ca:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80055ce:	430b      	orrs	r3, r1
 80055d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80055d4:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80055d8:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80055dc:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 80055e0:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80055e4:	1dda      	adds	r2, r3, #7
 80055e6:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80055ea:	4413      	add	r3, r2
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	2200      	movs	r2, #0
 80055f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80055f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80055fa:	f04f 0200 	mov.w	r2, #0
 80055fe:	f04f 0300 	mov.w	r3, #0
 8005602:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8005606:	0623      	lsls	r3, r4, #24
 8005608:	2200      	movs	r2, #0
 800560a:	ea40 0402 	orr.w	r4, r0, r2
 800560e:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8005612:	430b      	orrs	r3, r1
 8005614:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005618:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 800561c:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      this->z = u_z.real;
 8005620:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8005624:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005628:	e9c3 0106 	strd	r0, r1, [r3, #24]
      offset += sizeof(this->z);
 800562c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005630:	3308      	adds	r3, #8
 8005632:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.base = 0;
 8005636:	f04f 0200 	mov.w	r2, #0
 800563a:	f04f 0300 	mov.w	r3, #0
 800563e:	e9c7 2384 	strd	r2, r3, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005642:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8005646:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 800564a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800564e:	4413      	add	r3, r2
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2200      	movs	r2, #0
 8005656:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800565a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800565e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8005662:	4623      	mov	r3, r4
 8005664:	4303      	orrs	r3, r0
 8005666:	67bb      	str	r3, [r7, #120]	; 0x78
 8005668:	462b      	mov	r3, r5
 800566a:	430b      	orrs	r3, r1
 800566c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800566e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8005672:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005676:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 800567a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800567e:	1c5a      	adds	r2, r3, #1
 8005680:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8005684:	4413      	add	r3, r2
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2200      	movs	r2, #0
 800568c:	673b      	str	r3, [r7, #112]	; 0x70
 800568e:	677a      	str	r2, [r7, #116]	; 0x74
 8005690:	f04f 0200 	mov.w	r2, #0
 8005694:	f04f 0300 	mov.w	r3, #0
 8005698:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800569c:	464c      	mov	r4, r9
 800569e:	0223      	lsls	r3, r4, #8
 80056a0:	4644      	mov	r4, r8
 80056a2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80056a6:	4644      	mov	r4, r8
 80056a8:	0222      	lsls	r2, r4, #8
 80056aa:	ea40 0402 	orr.w	r4, r0, r2
 80056ae:	66bc      	str	r4, [r7, #104]	; 0x68
 80056b0:	430b      	orrs	r3, r1
 80056b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056b4:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80056b8:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80056bc:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 80056c0:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80056c4:	1c9a      	adds	r2, r3, #2
 80056c6:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80056ca:	4413      	add	r3, r2
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	2200      	movs	r2, #0
 80056d2:	663b      	str	r3, [r7, #96]	; 0x60
 80056d4:	667a      	str	r2, [r7, #100]	; 0x64
 80056d6:	f04f 0200 	mov.w	r2, #0
 80056da:	f04f 0300 	mov.w	r3, #0
 80056de:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80056e2:	464c      	mov	r4, r9
 80056e4:	0423      	lsls	r3, r4, #16
 80056e6:	4644      	mov	r4, r8
 80056e8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80056ec:	4644      	mov	r4, r8
 80056ee:	0422      	lsls	r2, r4, #16
 80056f0:	ea40 0402 	orr.w	r4, r0, r2
 80056f4:	65bc      	str	r4, [r7, #88]	; 0x58
 80056f6:	430b      	orrs	r3, r1
 80056f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056fa:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80056fe:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005702:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8005706:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800570a:	1cda      	adds	r2, r3, #3
 800570c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8005710:	4413      	add	r3, r2
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2200      	movs	r2, #0
 8005718:	653b      	str	r3, [r7, #80]	; 0x50
 800571a:	657a      	str	r2, [r7, #84]	; 0x54
 800571c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8005720:	4623      	mov	r3, r4
 8005722:	0a1b      	lsrs	r3, r3, #8
 8005724:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005726:	4623      	mov	r3, r4
 8005728:	061b      	lsls	r3, r3, #24
 800572a:	64bb      	str	r3, [r7, #72]	; 0x48
 800572c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8005730:	4623      	mov	r3, r4
 8005732:	4303      	orrs	r3, r0
 8005734:	643b      	str	r3, [r7, #64]	; 0x40
 8005736:	462b      	mov	r3, r5
 8005738:	430b      	orrs	r3, r1
 800573a:	647b      	str	r3, [r7, #68]	; 0x44
 800573c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8005740:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005744:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8005748:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800574c:	1d1a      	adds	r2, r3, #4
 800574e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8005752:	4413      	add	r3, r2
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2200      	movs	r2, #0
 800575a:	63bb      	str	r3, [r7, #56]	; 0x38
 800575c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800575e:	f04f 0200 	mov.w	r2, #0
 8005762:	f04f 0300 	mov.w	r3, #0
 8005766:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8005768:	0023      	movs	r3, r4
 800576a:	2200      	movs	r2, #0
 800576c:	ea40 0402 	orr.w	r4, r0, r2
 8005770:	633c      	str	r4, [r7, #48]	; 0x30
 8005772:	430b      	orrs	r3, r1
 8005774:	637b      	str	r3, [r7, #52]	; 0x34
 8005776:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800577a:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800577e:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8005782:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005786:	1d5a      	adds	r2, r3, #5
 8005788:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800578c:	4413      	add	r3, r2
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2200      	movs	r2, #0
 8005794:	62bb      	str	r3, [r7, #40]	; 0x28
 8005796:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005798:	f04f 0200 	mov.w	r2, #0
 800579c:	f04f 0300 	mov.w	r3, #0
 80057a0:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80057a2:	0223      	lsls	r3, r4, #8
 80057a4:	2200      	movs	r2, #0
 80057a6:	ea40 0402 	orr.w	r4, r0, r2
 80057aa:	623c      	str	r4, [r7, #32]
 80057ac:	430b      	orrs	r3, r1
 80057ae:	627b      	str	r3, [r7, #36]	; 0x24
 80057b0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80057b4:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80057b8:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 80057bc:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80057c0:	3306      	adds	r3, #6
 80057c2:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 80057c6:	4413      	add	r3, r2
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2200      	movs	r2, #0
 80057ce:	61bb      	str	r3, [r7, #24]
 80057d0:	61fa      	str	r2, [r7, #28]
 80057d2:	f04f 0200 	mov.w	r2, #0
 80057d6:	f04f 0300 	mov.w	r3, #0
 80057da:	69bc      	ldr	r4, [r7, #24]
 80057dc:	0423      	lsls	r3, r4, #16
 80057de:	2200      	movs	r2, #0
 80057e0:	ea40 0402 	orr.w	r4, r0, r2
 80057e4:	613c      	str	r4, [r7, #16]
 80057e6:	430b      	orrs	r3, r1
 80057e8:	617b      	str	r3, [r7, #20]
 80057ea:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80057ee:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80057f2:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 80057f6:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80057fa:	3307      	adds	r3, #7
 80057fc:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8005800:	4413      	add	r3, r2
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2200      	movs	r2, #0
 8005808:	60bb      	str	r3, [r7, #8]
 800580a:	60fa      	str	r2, [r7, #12]
 800580c:	f04f 0200 	mov.w	r2, #0
 8005810:	f04f 0300 	mov.w	r3, #0
 8005814:	68bc      	ldr	r4, [r7, #8]
 8005816:	0623      	lsls	r3, r4, #24
 8005818:	2200      	movs	r2, #0
 800581a:	ea40 0402 	orr.w	r4, r0, r2
 800581e:	603c      	str	r4, [r7, #0]
 8005820:	430b      	orrs	r3, r1
 8005822:	607b      	str	r3, [r7, #4]
 8005824:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005828:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      this->w = u_w.real;
 800582c:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	; 0x210
 8005830:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8005834:	e9c1 2308 	strd	r2, r3, [r1, #32]
      offset += sizeof(this->w);
 8005838:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800583c:	3308      	adds	r3, #8
 800583e:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
     return offset;
 8005842:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
    }
 8005846:	4618      	mov	r0, r3
 8005848:	f507 770f 	add.w	r7, r7, #572	; 0x23c
 800584c:	46bd      	mov	sp, r7
 800584e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8005852:	4770      	bx	lr

08005854 <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Quaternion"; };
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	4b03      	ldr	r3, [pc, #12]	; (800586c <_ZN13geometry_msgs10Quaternion7getTypeEv+0x18>)
 800585e:	4618      	mov	r0, r3
 8005860:	370c      	adds	r7, #12
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	08015198 	.word	0x08015198

08005870 <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    virtual const char * getMD5() override { return "a779879fadf0160734f906b8c19c7004"; };
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	4b03      	ldr	r3, [pc, #12]	; (8005888 <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x18>)
 800587a:	4618      	mov	r0, r3
 800587c:	370c      	adds	r7, #12
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	080151b4 	.word	0x080151b4

0800588c <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4618      	mov	r0, r3
 8005898:	f7fe f99a 	bl	8003bd0 <_ZN3ros3MsgC1Ev>
 800589c:	4a0e      	ldr	r2, [pc, #56]	; (80058d8 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	601a      	str	r2, [r3, #0]
      x(0),
 80058a2:	6879      	ldr	r1, [r7, #4]
 80058a4:	f04f 0200 	mov.w	r2, #0
 80058a8:	f04f 0300 	mov.w	r3, #0
 80058ac:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 80058b0:	6879      	ldr	r1, [r7, #4]
 80058b2:	f04f 0200 	mov.w	r2, #0
 80058b6:	f04f 0300 	mov.w	r3, #0
 80058ba:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0)
 80058be:	6879      	ldr	r1, [r7, #4]
 80058c0:	f04f 0200 	mov.w	r2, #0
 80058c4:	f04f 0300 	mov.w	r3, #0
 80058c8:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4618      	mov	r0, r3
 80058d0:	3708      	adds	r7, #8
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	0801556c 	.word	0x0801556c

080058dc <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80058dc:	b480      	push	{r7}
 80058de:	b08b      	sub	sp, #44	; 0x2c
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80058e6:	2300      	movs	r3, #0
 80058e8:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80058f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80058f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058fa:	6838      	ldr	r0, [r7, #0]
 80058fc:	4401      	add	r1, r0
 80058fe:	b2d3      	uxtb	r3, r2
 8005900:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8005902:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005906:	f04f 0200 	mov.w	r2, #0
 800590a:	f04f 0300 	mov.w	r3, #0
 800590e:	0a02      	lsrs	r2, r0, #8
 8005910:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005914:	0a0b      	lsrs	r3, r1, #8
 8005916:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005918:	3101      	adds	r1, #1
 800591a:	6838      	ldr	r0, [r7, #0]
 800591c:	4401      	add	r1, r0
 800591e:	b2d3      	uxtb	r3, r2
 8005920:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8005922:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005926:	f04f 0200 	mov.w	r2, #0
 800592a:	f04f 0300 	mov.w	r3, #0
 800592e:	0c02      	lsrs	r2, r0, #16
 8005930:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005934:	0c0b      	lsrs	r3, r1, #16
 8005936:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005938:	3102      	adds	r1, #2
 800593a:	6838      	ldr	r0, [r7, #0]
 800593c:	4401      	add	r1, r0
 800593e:	b2d3      	uxtb	r3, r2
 8005940:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8005942:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005946:	f04f 0200 	mov.w	r2, #0
 800594a:	f04f 0300 	mov.w	r3, #0
 800594e:	0e02      	lsrs	r2, r0, #24
 8005950:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005954:	0e0b      	lsrs	r3, r1, #24
 8005956:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005958:	3103      	adds	r1, #3
 800595a:	6838      	ldr	r0, [r7, #0]
 800595c:	4401      	add	r1, r0
 800595e:	b2d3      	uxtb	r3, r2
 8005960:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8005962:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005966:	f04f 0200 	mov.w	r2, #0
 800596a:	f04f 0300 	mov.w	r3, #0
 800596e:	000a      	movs	r2, r1
 8005970:	2300      	movs	r3, #0
 8005972:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005974:	3104      	adds	r1, #4
 8005976:	6838      	ldr	r0, [r7, #0]
 8005978:	4401      	add	r1, r0
 800597a:	b2d3      	uxtb	r3, r2
 800597c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800597e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005982:	f04f 0200 	mov.w	r2, #0
 8005986:	f04f 0300 	mov.w	r3, #0
 800598a:	0a0a      	lsrs	r2, r1, #8
 800598c:	2300      	movs	r3, #0
 800598e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005990:	3105      	adds	r1, #5
 8005992:	6838      	ldr	r0, [r7, #0]
 8005994:	4401      	add	r1, r0
 8005996:	b2d3      	uxtb	r3, r2
 8005998:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 800599a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800599e:	f04f 0200 	mov.w	r2, #0
 80059a2:	f04f 0300 	mov.w	r3, #0
 80059a6:	0c0a      	lsrs	r2, r1, #16
 80059a8:	2300      	movs	r3, #0
 80059aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059ac:	3106      	adds	r1, #6
 80059ae:	6838      	ldr	r0, [r7, #0]
 80059b0:	4401      	add	r1, r0
 80059b2:	b2d3      	uxtb	r3, r2
 80059b4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80059b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80059ba:	f04f 0200 	mov.w	r2, #0
 80059be:	f04f 0300 	mov.w	r3, #0
 80059c2:	0e0a      	lsrs	r2, r1, #24
 80059c4:	2300      	movs	r3, #0
 80059c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059c8:	3107      	adds	r1, #7
 80059ca:	6838      	ldr	r0, [r7, #0]
 80059cc:	4401      	add	r1, r0
 80059ce:	b2d3      	uxtb	r3, r2
 80059d0:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80059d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d4:	3308      	adds	r3, #8
 80059d6:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80059de:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80059e2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80059e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059e8:	6838      	ldr	r0, [r7, #0]
 80059ea:	4401      	add	r1, r0
 80059ec:	b2d3      	uxtb	r3, r2
 80059ee:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80059f0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80059f4:	f04f 0200 	mov.w	r2, #0
 80059f8:	f04f 0300 	mov.w	r3, #0
 80059fc:	0a02      	lsrs	r2, r0, #8
 80059fe:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005a02:	0a0b      	lsrs	r3, r1, #8
 8005a04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a06:	3101      	adds	r1, #1
 8005a08:	6838      	ldr	r0, [r7, #0]
 8005a0a:	4401      	add	r1, r0
 8005a0c:	b2d3      	uxtb	r3, r2
 8005a0e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8005a10:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005a14:	f04f 0200 	mov.w	r2, #0
 8005a18:	f04f 0300 	mov.w	r3, #0
 8005a1c:	0c02      	lsrs	r2, r0, #16
 8005a1e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005a22:	0c0b      	lsrs	r3, r1, #16
 8005a24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a26:	3102      	adds	r1, #2
 8005a28:	6838      	ldr	r0, [r7, #0]
 8005a2a:	4401      	add	r1, r0
 8005a2c:	b2d3      	uxtb	r3, r2
 8005a2e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8005a30:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005a34:	f04f 0200 	mov.w	r2, #0
 8005a38:	f04f 0300 	mov.w	r3, #0
 8005a3c:	0e02      	lsrs	r2, r0, #24
 8005a3e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005a42:	0e0b      	lsrs	r3, r1, #24
 8005a44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a46:	3103      	adds	r1, #3
 8005a48:	6838      	ldr	r0, [r7, #0]
 8005a4a:	4401      	add	r1, r0
 8005a4c:	b2d3      	uxtb	r3, r2
 8005a4e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8005a50:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005a54:	f04f 0200 	mov.w	r2, #0
 8005a58:	f04f 0300 	mov.w	r3, #0
 8005a5c:	000a      	movs	r2, r1
 8005a5e:	2300      	movs	r3, #0
 8005a60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a62:	3104      	adds	r1, #4
 8005a64:	6838      	ldr	r0, [r7, #0]
 8005a66:	4401      	add	r1, r0
 8005a68:	b2d3      	uxtb	r3, r2
 8005a6a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8005a6c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005a70:	f04f 0200 	mov.w	r2, #0
 8005a74:	f04f 0300 	mov.w	r3, #0
 8005a78:	0a0a      	lsrs	r2, r1, #8
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a7e:	3105      	adds	r1, #5
 8005a80:	6838      	ldr	r0, [r7, #0]
 8005a82:	4401      	add	r1, r0
 8005a84:	b2d3      	uxtb	r3, r2
 8005a86:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8005a88:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005a8c:	f04f 0200 	mov.w	r2, #0
 8005a90:	f04f 0300 	mov.w	r3, #0
 8005a94:	0c0a      	lsrs	r2, r1, #16
 8005a96:	2300      	movs	r3, #0
 8005a98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a9a:	3106      	adds	r1, #6
 8005a9c:	6838      	ldr	r0, [r7, #0]
 8005a9e:	4401      	add	r1, r0
 8005aa0:	b2d3      	uxtb	r3, r2
 8005aa2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8005aa4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005aa8:	f04f 0200 	mov.w	r2, #0
 8005aac:	f04f 0300 	mov.w	r3, #0
 8005ab0:	0e0a      	lsrs	r2, r1, #24
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ab6:	3107      	adds	r1, #7
 8005ab8:	6838      	ldr	r0, [r7, #0]
 8005aba:	4401      	add	r1, r0
 8005abc:	b2d3      	uxtb	r3, r2
 8005abe:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac2:	3308      	adds	r3, #8
 8005ac4:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005acc:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8005ad0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ad4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ad6:	6838      	ldr	r0, [r7, #0]
 8005ad8:	4401      	add	r1, r0
 8005ada:	b2d3      	uxtb	r3, r2
 8005adc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8005ade:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005ae2:	f04f 0200 	mov.w	r2, #0
 8005ae6:	f04f 0300 	mov.w	r3, #0
 8005aea:	0a02      	lsrs	r2, r0, #8
 8005aec:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005af0:	0a0b      	lsrs	r3, r1, #8
 8005af2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005af4:	3101      	adds	r1, #1
 8005af6:	6838      	ldr	r0, [r7, #0]
 8005af8:	4401      	add	r1, r0
 8005afa:	b2d3      	uxtb	r3, r2
 8005afc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8005afe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b02:	f04f 0200 	mov.w	r2, #0
 8005b06:	f04f 0300 	mov.w	r3, #0
 8005b0a:	0c02      	lsrs	r2, r0, #16
 8005b0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005b10:	0c0b      	lsrs	r3, r1, #16
 8005b12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b14:	3102      	adds	r1, #2
 8005b16:	6838      	ldr	r0, [r7, #0]
 8005b18:	4401      	add	r1, r0
 8005b1a:	b2d3      	uxtb	r3, r2
 8005b1c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8005b1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b22:	f04f 0200 	mov.w	r2, #0
 8005b26:	f04f 0300 	mov.w	r3, #0
 8005b2a:	0e02      	lsrs	r2, r0, #24
 8005b2c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005b30:	0e0b      	lsrs	r3, r1, #24
 8005b32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b34:	3103      	adds	r1, #3
 8005b36:	6838      	ldr	r0, [r7, #0]
 8005b38:	4401      	add	r1, r0
 8005b3a:	b2d3      	uxtb	r3, r2
 8005b3c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8005b3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b42:	f04f 0200 	mov.w	r2, #0
 8005b46:	f04f 0300 	mov.w	r3, #0
 8005b4a:	000a      	movs	r2, r1
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b50:	3104      	adds	r1, #4
 8005b52:	6838      	ldr	r0, [r7, #0]
 8005b54:	4401      	add	r1, r0
 8005b56:	b2d3      	uxtb	r3, r2
 8005b58:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8005b5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b5e:	f04f 0200 	mov.w	r2, #0
 8005b62:	f04f 0300 	mov.w	r3, #0
 8005b66:	0a0a      	lsrs	r2, r1, #8
 8005b68:	2300      	movs	r3, #0
 8005b6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b6c:	3105      	adds	r1, #5
 8005b6e:	6838      	ldr	r0, [r7, #0]
 8005b70:	4401      	add	r1, r0
 8005b72:	b2d3      	uxtb	r3, r2
 8005b74:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8005b76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b7a:	f04f 0200 	mov.w	r2, #0
 8005b7e:	f04f 0300 	mov.w	r3, #0
 8005b82:	0c0a      	lsrs	r2, r1, #16
 8005b84:	2300      	movs	r3, #0
 8005b86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b88:	3106      	adds	r1, #6
 8005b8a:	6838      	ldr	r0, [r7, #0]
 8005b8c:	4401      	add	r1, r0
 8005b8e:	b2d3      	uxtb	r3, r2
 8005b90:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8005b92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b96:	f04f 0200 	mov.w	r2, #0
 8005b9a:	f04f 0300 	mov.w	r3, #0
 8005b9e:	0e0a      	lsrs	r2, r1, #24
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ba4:	3107      	adds	r1, #7
 8005ba6:	6838      	ldr	r0, [r7, #0]
 8005ba8:	4401      	add	r1, r0
 8005baa:	b2d3      	uxtb	r3, r2
 8005bac:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	3308      	adds	r3, #8
 8005bb2:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	372c      	adds	r7, #44	; 0x2c
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr

08005bc2 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8005bc2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8005bc6:	b0eb      	sub	sp, #428	; 0x1ac
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8005bce:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8005bd8:	f04f 0200 	mov.w	r2, #0
 8005bdc:	f04f 0300 	mov.w	r3, #0
 8005be0:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005be4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8005be8:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8005bec:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005bf0:	4413      	add	r3, r2
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	461c      	mov	r4, r3
 8005bfa:	4615      	mov	r5, r2
 8005bfc:	ea40 0804 	orr.w	r8, r0, r4
 8005c00:	ea41 0905 	orr.w	r9, r1, r5
 8005c04:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005c08:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8005c0c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005c10:	1c5a      	adds	r2, r3, #1
 8005c12:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005c16:	4413      	add	r3, r2
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	469a      	mov	sl, r3
 8005c20:	4693      	mov	fp, r2
 8005c22:	f04f 0200 	mov.w	r2, #0
 8005c26:	f04f 0300 	mov.w	r3, #0
 8005c2a:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8005c2e:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8005c32:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8005c36:	ea40 0402 	orr.w	r4, r0, r2
 8005c3a:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8005c3e:	430b      	orrs	r3, r1
 8005c40:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8005c44:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8005c48:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005c4c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8005c50:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005c54:	1c9a      	adds	r2, r3, #2
 8005c56:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005c5a:	4413      	add	r3, r2
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2200      	movs	r2, #0
 8005c62:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8005c66:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8005c6a:	f04f 0200 	mov.w	r2, #0
 8005c6e:	f04f 0300 	mov.w	r3, #0
 8005c72:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8005c76:	464c      	mov	r4, r9
 8005c78:	0423      	lsls	r3, r4, #16
 8005c7a:	4644      	mov	r4, r8
 8005c7c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8005c80:	4644      	mov	r4, r8
 8005c82:	0422      	lsls	r2, r4, #16
 8005c84:	ea40 0402 	orr.w	r4, r0, r2
 8005c88:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8005c8c:	430b      	orrs	r3, r1
 8005c8e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005c92:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8005c96:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005c9a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8005c9e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005ca2:	1cda      	adds	r2, r3, #3
 8005ca4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005ca8:	4413      	add	r3, r2
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8005cb4:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8005cb8:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8005cbc:	4623      	mov	r3, r4
 8005cbe:	0a1b      	lsrs	r3, r3, #8
 8005cc0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8005cc4:	4623      	mov	r3, r4
 8005cc6:	061b      	lsls	r3, r3, #24
 8005cc8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8005ccc:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8005cd0:	4623      	mov	r3, r4
 8005cd2:	4303      	orrs	r3, r0
 8005cd4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005cd8:	462b      	mov	r3, r5
 8005cda:	430b      	orrs	r3, r1
 8005cdc:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005ce0:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8005ce4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005ce8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8005cec:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005cf0:	1d1a      	adds	r2, r3, #4
 8005cf2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005cf6:	4413      	add	r3, r2
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8005d02:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8005d06:	f04f 0200 	mov.w	r2, #0
 8005d0a:	f04f 0300 	mov.w	r3, #0
 8005d0e:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8005d12:	0023      	movs	r3, r4
 8005d14:	2200      	movs	r2, #0
 8005d16:	ea40 0402 	orr.w	r4, r0, r2
 8005d1a:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8005d1e:	430b      	orrs	r3, r1
 8005d20:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8005d24:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8005d28:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005d2c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8005d30:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005d34:	1d5a      	adds	r2, r3, #5
 8005d36:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005d3a:	4413      	add	r3, r2
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	2200      	movs	r2, #0
 8005d42:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8005d46:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8005d4a:	f04f 0200 	mov.w	r2, #0
 8005d4e:	f04f 0300 	mov.w	r3, #0
 8005d52:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8005d56:	0223      	lsls	r3, r4, #8
 8005d58:	2200      	movs	r2, #0
 8005d5a:	ea40 0402 	orr.w	r4, r0, r2
 8005d5e:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8005d62:	430b      	orrs	r3, r1
 8005d64:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8005d68:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8005d6c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005d70:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8005d74:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005d78:	1d9a      	adds	r2, r3, #6
 8005d7a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005d7e:	4413      	add	r3, r2
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2200      	movs	r2, #0
 8005d86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005d8a:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8005d8e:	f04f 0200 	mov.w	r2, #0
 8005d92:	f04f 0300 	mov.w	r3, #0
 8005d96:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8005d9a:	0423      	lsls	r3, r4, #16
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	ea40 0402 	orr.w	r4, r0, r2
 8005da2:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8005da6:	430b      	orrs	r3, r1
 8005da8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005dac:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8005db0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005db4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8005db8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005dbc:	1dda      	adds	r2, r3, #7
 8005dbe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005dc2:	4413      	add	r3, r2
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005dce:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8005dd2:	f04f 0200 	mov.w	r2, #0
 8005dd6:	f04f 0300 	mov.w	r3, #0
 8005dda:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8005dde:	0623      	lsls	r3, r4, #24
 8005de0:	2200      	movs	r2, #0
 8005de2:	ea40 0402 	orr.w	r4, r0, r2
 8005de6:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8005dea:	430b      	orrs	r3, r1
 8005dec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005df0:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8005df4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8005df8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8005dfc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8005e00:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8005e04:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005e08:	3308      	adds	r3, #8
 8005e0a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8005e0e:	f04f 0200 	mov.w	r2, #0
 8005e12:	f04f 0300 	mov.w	r3, #0
 8005e16:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005e1a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005e1e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8005e22:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005e26:	4413      	add	r3, r2
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005e32:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8005e36:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8005e3a:	4623      	mov	r3, r4
 8005e3c:	4303      	orrs	r3, r0
 8005e3e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005e42:	462b      	mov	r3, r5
 8005e44:	430b      	orrs	r3, r1
 8005e46:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005e4a:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8005e4e:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005e52:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005e56:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005e5a:	1c5a      	adds	r2, r3, #1
 8005e5c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005e60:	4413      	add	r3, r2
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2200      	movs	r2, #0
 8005e68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e6c:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8005e70:	f04f 0200 	mov.w	r2, #0
 8005e74:	f04f 0300 	mov.w	r3, #0
 8005e78:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8005e7c:	464c      	mov	r4, r9
 8005e7e:	0223      	lsls	r3, r4, #8
 8005e80:	4644      	mov	r4, r8
 8005e82:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005e86:	4644      	mov	r4, r8
 8005e88:	0222      	lsls	r2, r4, #8
 8005e8a:	ea40 0402 	orr.w	r4, r0, r2
 8005e8e:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8005e92:	430b      	orrs	r3, r1
 8005e94:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005e98:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8005e9c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005ea0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005ea4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005ea8:	1c9a      	adds	r2, r3, #2
 8005eaa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005eae:	4413      	add	r3, r2
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005eba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005ebe:	f04f 0200 	mov.w	r2, #0
 8005ec2:	f04f 0300 	mov.w	r3, #0
 8005ec6:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8005eca:	464c      	mov	r4, r9
 8005ecc:	0423      	lsls	r3, r4, #16
 8005ece:	4644      	mov	r4, r8
 8005ed0:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8005ed4:	4644      	mov	r4, r8
 8005ed6:	0422      	lsls	r2, r4, #16
 8005ed8:	ea40 0402 	orr.w	r4, r0, r2
 8005edc:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8005ee0:	430b      	orrs	r3, r1
 8005ee2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ee6:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8005eea:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005eee:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005ef2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005ef6:	1cda      	adds	r2, r3, #3
 8005ef8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005efc:	4413      	add	r3, r2
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2200      	movs	r2, #0
 8005f04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f08:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005f0c:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8005f10:	4623      	mov	r3, r4
 8005f12:	0a1b      	lsrs	r3, r3, #8
 8005f14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005f18:	4623      	mov	r3, r4
 8005f1a:	061b      	lsls	r3, r3, #24
 8005f1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f20:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8005f24:	4623      	mov	r3, r4
 8005f26:	4303      	orrs	r3, r0
 8005f28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f2c:	462b      	mov	r3, r5
 8005f2e:	430b      	orrs	r3, r1
 8005f30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f34:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8005f38:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005f3c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005f40:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005f44:	1d1a      	adds	r2, r3, #4
 8005f46:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005f4a:	4413      	add	r3, r2
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	2200      	movs	r2, #0
 8005f52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f56:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005f5a:	f04f 0200 	mov.w	r2, #0
 8005f5e:	f04f 0300 	mov.w	r3, #0
 8005f62:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8005f66:	0023      	movs	r3, r4
 8005f68:	2200      	movs	r2, #0
 8005f6a:	ea40 0402 	orr.w	r4, r0, r2
 8005f6e:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8005f72:	430b      	orrs	r3, r1
 8005f74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005f78:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8005f7c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005f80:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005f84:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005f88:	1d5a      	adds	r2, r3, #5
 8005f8a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005f8e:	4413      	add	r3, r2
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	2200      	movs	r2, #0
 8005f96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f9a:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8005f9e:	f04f 0200 	mov.w	r2, #0
 8005fa2:	f04f 0300 	mov.w	r3, #0
 8005fa6:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8005faa:	0223      	lsls	r3, r4, #8
 8005fac:	2200      	movs	r2, #0
 8005fae:	ea40 0402 	orr.w	r4, r0, r2
 8005fb2:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8005fb6:	430b      	orrs	r3, r1
 8005fb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005fbc:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8005fc0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005fc4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005fc8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005fcc:	1d9a      	adds	r2, r3, #6
 8005fce:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005fd2:	4413      	add	r3, r2
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005fde:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005fe2:	f04f 0200 	mov.w	r2, #0
 8005fe6:	f04f 0300 	mov.w	r3, #0
 8005fea:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8005fee:	0423      	lsls	r3, r4, #16
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	ea40 0402 	orr.w	r4, r0, r2
 8005ff6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8005ffa:	430b      	orrs	r3, r1
 8005ffc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006000:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8006004:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8006008:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800600c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8006010:	1dda      	adds	r2, r3, #7
 8006012:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8006016:	4413      	add	r3, r2
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	b2db      	uxtb	r3, r3
 800601c:	2200      	movs	r2, #0
 800601e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006022:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006026:	f04f 0200 	mov.w	r2, #0
 800602a:	f04f 0300 	mov.w	r3, #0
 800602e:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8006032:	0623      	lsls	r3, r4, #24
 8006034:	2200      	movs	r2, #0
 8006036:	ea40 0402 	orr.w	r4, r0, r2
 800603a:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 800603e:	430b      	orrs	r3, r1
 8006040:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006044:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8006048:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 800604c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8006050:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8006054:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8006058:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800605c:	3308      	adds	r3, #8
 800605e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8006062:	f04f 0200 	mov.w	r2, #0
 8006066:	f04f 0300 	mov.w	r3, #0
 800606a:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800606e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8006072:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8006076:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800607a:	4413      	add	r3, r2
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	b2db      	uxtb	r3, r3
 8006080:	2200      	movs	r2, #0
 8006082:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006086:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800608a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800608e:	4623      	mov	r3, r4
 8006090:	4303      	orrs	r3, r0
 8006092:	67bb      	str	r3, [r7, #120]	; 0x78
 8006094:	462b      	mov	r3, r5
 8006096:	430b      	orrs	r3, r1
 8006098:	67fb      	str	r3, [r7, #124]	; 0x7c
 800609a:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800609e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80060a2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80060a6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80060aa:	1c5a      	adds	r2, r3, #1
 80060ac:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80060b0:	4413      	add	r3, r2
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2200      	movs	r2, #0
 80060b8:	673b      	str	r3, [r7, #112]	; 0x70
 80060ba:	677a      	str	r2, [r7, #116]	; 0x74
 80060bc:	f04f 0200 	mov.w	r2, #0
 80060c0:	f04f 0300 	mov.w	r3, #0
 80060c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80060c8:	464c      	mov	r4, r9
 80060ca:	0223      	lsls	r3, r4, #8
 80060cc:	4644      	mov	r4, r8
 80060ce:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80060d2:	4644      	mov	r4, r8
 80060d4:	0222      	lsls	r2, r4, #8
 80060d6:	ea40 0402 	orr.w	r4, r0, r2
 80060da:	66bc      	str	r4, [r7, #104]	; 0x68
 80060dc:	430b      	orrs	r3, r1
 80060de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060e0:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80060e4:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80060e8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80060ec:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80060f0:	1c9a      	adds	r2, r3, #2
 80060f2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80060f6:	4413      	add	r3, r2
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	2200      	movs	r2, #0
 80060fe:	663b      	str	r3, [r7, #96]	; 0x60
 8006100:	667a      	str	r2, [r7, #100]	; 0x64
 8006102:	f04f 0200 	mov.w	r2, #0
 8006106:	f04f 0300 	mov.w	r3, #0
 800610a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800610e:	464c      	mov	r4, r9
 8006110:	0423      	lsls	r3, r4, #16
 8006112:	4644      	mov	r4, r8
 8006114:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8006118:	4644      	mov	r4, r8
 800611a:	0422      	lsls	r2, r4, #16
 800611c:	ea40 0402 	orr.w	r4, r0, r2
 8006120:	65bc      	str	r4, [r7, #88]	; 0x58
 8006122:	430b      	orrs	r3, r1
 8006124:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006126:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800612a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800612e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8006132:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8006136:	1cda      	adds	r2, r3, #3
 8006138:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800613c:	4413      	add	r3, r2
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	b2db      	uxtb	r3, r3
 8006142:	2200      	movs	r2, #0
 8006144:	653b      	str	r3, [r7, #80]	; 0x50
 8006146:	657a      	str	r2, [r7, #84]	; 0x54
 8006148:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800614c:	4623      	mov	r3, r4
 800614e:	0a1b      	lsrs	r3, r3, #8
 8006150:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006152:	4623      	mov	r3, r4
 8006154:	061b      	lsls	r3, r3, #24
 8006156:	64bb      	str	r3, [r7, #72]	; 0x48
 8006158:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800615c:	4623      	mov	r3, r4
 800615e:	4303      	orrs	r3, r0
 8006160:	643b      	str	r3, [r7, #64]	; 0x40
 8006162:	462b      	mov	r3, r5
 8006164:	430b      	orrs	r3, r1
 8006166:	647b      	str	r3, [r7, #68]	; 0x44
 8006168:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800616c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8006170:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8006174:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8006178:	1d1a      	adds	r2, r3, #4
 800617a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800617e:	4413      	add	r3, r2
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	b2db      	uxtb	r3, r3
 8006184:	2200      	movs	r2, #0
 8006186:	63bb      	str	r3, [r7, #56]	; 0x38
 8006188:	63fa      	str	r2, [r7, #60]	; 0x3c
 800618a:	f04f 0200 	mov.w	r2, #0
 800618e:	f04f 0300 	mov.w	r3, #0
 8006192:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8006194:	0023      	movs	r3, r4
 8006196:	2200      	movs	r2, #0
 8006198:	ea40 0402 	orr.w	r4, r0, r2
 800619c:	633c      	str	r4, [r7, #48]	; 0x30
 800619e:	430b      	orrs	r3, r1
 80061a0:	637b      	str	r3, [r7, #52]	; 0x34
 80061a2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80061a6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80061aa:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80061ae:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80061b2:	1d5a      	adds	r2, r3, #5
 80061b4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80061b8:	4413      	add	r3, r2
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2200      	movs	r2, #0
 80061c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80061c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061c4:	f04f 0200 	mov.w	r2, #0
 80061c8:	f04f 0300 	mov.w	r3, #0
 80061cc:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80061ce:	0223      	lsls	r3, r4, #8
 80061d0:	2200      	movs	r2, #0
 80061d2:	ea40 0402 	orr.w	r4, r0, r2
 80061d6:	623c      	str	r4, [r7, #32]
 80061d8:	430b      	orrs	r3, r1
 80061da:	627b      	str	r3, [r7, #36]	; 0x24
 80061dc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80061e0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80061e4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80061e8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80061ec:	3306      	adds	r3, #6
 80061ee:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80061f2:	4413      	add	r3, r2
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2200      	movs	r2, #0
 80061fa:	61bb      	str	r3, [r7, #24]
 80061fc:	61fa      	str	r2, [r7, #28]
 80061fe:	f04f 0200 	mov.w	r2, #0
 8006202:	f04f 0300 	mov.w	r3, #0
 8006206:	69bc      	ldr	r4, [r7, #24]
 8006208:	0423      	lsls	r3, r4, #16
 800620a:	2200      	movs	r2, #0
 800620c:	ea40 0402 	orr.w	r4, r0, r2
 8006210:	613c      	str	r4, [r7, #16]
 8006212:	430b      	orrs	r3, r1
 8006214:	617b      	str	r3, [r7, #20]
 8006216:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800621a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800621e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8006222:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8006226:	3307      	adds	r3, #7
 8006228:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 800622c:	4413      	add	r3, r2
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2200      	movs	r2, #0
 8006234:	60bb      	str	r3, [r7, #8]
 8006236:	60fa      	str	r2, [r7, #12]
 8006238:	f04f 0200 	mov.w	r2, #0
 800623c:	f04f 0300 	mov.w	r3, #0
 8006240:	68bc      	ldr	r4, [r7, #8]
 8006242:	0623      	lsls	r3, r4, #24
 8006244:	2200      	movs	r2, #0
 8006246:	ea40 0402 	orr.w	r4, r0, r2
 800624a:	603c      	str	r4, [r7, #0]
 800624c:	430b      	orrs	r3, r1
 800624e:	607b      	str	r3, [r7, #4]
 8006250:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006254:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8006258:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800625c:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8006260:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8006264:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8006268:	3308      	adds	r3, #8
 800626a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 800626e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8006272:	4618      	mov	r0, r3
 8006274:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8006278:	46bd      	mov	sp, r7
 800627a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800627e:	4770      	bx	lr

08006280 <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	4b03      	ldr	r3, [pc, #12]	; (8006298 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 800628a:	4618      	mov	r0, r3
 800628c:	370c      	adds	r7, #12
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	080151d8 	.word	0x080151d8

0800629c <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	4b03      	ldr	r3, [pc, #12]	; (80062b4 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 80062a6:	4618      	mov	r0, r3
 80062a8:	370c      	adds	r7, #12
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	080151f0 	.word	0x080151f0

080062b8 <_ZN8std_msgs7Float32C1Ev>:
  {
    public:
      typedef float _data_type;
      _data_type data;

    Float32():
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
      data(0)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7fd fc84 	bl	8003bd0 <_ZN3ros3MsgC1Ev>
 80062c8:	4a05      	ldr	r2, [pc, #20]	; (80062e0 <_ZN8std_msgs7Float32C1Ev+0x28>)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	601a      	str	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f04f 0200 	mov.w	r2, #0
 80062d4:	605a      	str	r2, [r3, #4]
    {
    }
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4618      	mov	r0, r3
 80062da:	3708      	adds	r7, #8
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	08015554 	.word	0x08015554

080062e4 <_ZNK8std_msgs7Float329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80062ee:	2300      	movs	r3, #0
 80062f0:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80062f8:	68b9      	ldr	r1, [r7, #8]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	683a      	ldr	r2, [r7, #0]
 80062fe:	4413      	add	r3, r2
 8006300:	b2ca      	uxtb	r2, r1
 8006302:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	0a19      	lsrs	r1, r3, #8
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	3301      	adds	r3, #1
 800630c:	683a      	ldr	r2, [r7, #0]
 800630e:	4413      	add	r3, r2
 8006310:	b2ca      	uxtb	r2, r1
 8006312:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	0c19      	lsrs	r1, r3, #16
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	3302      	adds	r3, #2
 800631c:	683a      	ldr	r2, [r7, #0]
 800631e:	4413      	add	r3, r2
 8006320:	b2ca      	uxtb	r2, r1
 8006322:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	0e19      	lsrs	r1, r3, #24
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	3303      	adds	r3, #3
 800632c:	683a      	ldr	r2, [r7, #0]
 800632e:	4413      	add	r3, r2
 8006330:	b2ca      	uxtb	r2, r1
 8006332:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	3304      	adds	r3, #4
 8006338:	60fb      	str	r3, [r7, #12]
      return offset;
 800633a:	68fb      	ldr	r3, [r7, #12]
    }
 800633c:	4618      	mov	r0, r3
 800633e:	3714      	adds	r7, #20
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <_ZN8std_msgs7Float3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006352:	2300      	movs	r3, #0
 8006354:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 8006356:	2300      	movs	r3, #0
 8006358:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	6839      	ldr	r1, [r7, #0]
 8006360:	440a      	add	r2, r1
 8006362:	7812      	ldrb	r2, [r2, #0]
 8006364:	4313      	orrs	r3, r2
 8006366:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006368:	68ba      	ldr	r2, [r7, #8]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	3301      	adds	r3, #1
 800636e:	6839      	ldr	r1, [r7, #0]
 8006370:	440b      	add	r3, r1
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	021b      	lsls	r3, r3, #8
 8006376:	4313      	orrs	r3, r2
 8006378:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800637a:	68ba      	ldr	r2, [r7, #8]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	3302      	adds	r3, #2
 8006380:	6839      	ldr	r1, [r7, #0]
 8006382:	440b      	add	r3, r1
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	041b      	lsls	r3, r3, #16
 8006388:	4313      	orrs	r3, r2
 800638a:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800638c:	68ba      	ldr	r2, [r7, #8]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	3303      	adds	r3, #3
 8006392:	6839      	ldr	r1, [r7, #0]
 8006394:	440b      	add	r3, r1
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	061b      	lsls	r3, r3, #24
 800639a:	4313      	orrs	r3, r2
 800639c:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 800639e:	68ba      	ldr	r2, [r7, #8]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	3304      	adds	r3, #4
 80063a8:	60fb      	str	r3, [r7, #12]
     return offset;
 80063aa:	68fb      	ldr	r3, [r7, #12]
    }
 80063ac:	4618      	mov	r0, r3
 80063ae:	3714      	adds	r7, #20
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <_ZN8std_msgs7Float327getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float32"; };
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	4b03      	ldr	r3, [pc, #12]	; (80063d0 <_ZN8std_msgs7Float327getTypeEv+0x18>)
 80063c2:	4618      	mov	r0, r3
 80063c4:	370c      	adds	r7, #12
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop
 80063d0:	08015214 	.word	0x08015214

080063d4 <_ZN8std_msgs7Float326getMD5Ev>:
    virtual const char * getMD5() override { return "73fcbf46b49191e672908e50842a83d4"; };
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	4b03      	ldr	r3, [pc, #12]	; (80063ec <_ZN8std_msgs7Float326getMD5Ev+0x18>)
 80063de:	4618      	mov	r0, r3
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	08015228 	.word	0x08015228

080063f0 <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7fd fbe8 	bl	8003bd0 <_ZN3ros3MsgC1Ev>
 8006400:	4a08      	ldr	r2, [pc, #32]	; (8006424 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	601a      	str	r2, [r3, #0]
      label(""),
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a07      	ldr	r2, [pc, #28]	; (8006428 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 800640a:	605a      	str	r2, [r3, #4]
      size(0),
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	609a      	str	r2, [r3, #8]
      stride(0)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	60da      	str	r2, [r3, #12]
    {
    }
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4618      	mov	r0, r3
 800641c:	3708      	adds	r7, #8
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	0801553c 	.word	0x0801553c
 8006428:	080150f8 	.word	0x080150f8

0800642c <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006436:	2300      	movs	r3, #0
 8006438:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	4618      	mov	r0, r3
 8006440:	f7f9 ff26 	bl	8000290 <strlen>
 8006444:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	683a      	ldr	r2, [r7, #0]
 800644a:	4413      	add	r3, r2
 800644c:	68b9      	ldr	r1, [r7, #8]
 800644e:	4618      	mov	r0, r3
 8006450:	f000 fd88 	bl	8006f64 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	3304      	adds	r3, #4
 8006458:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	683a      	ldr	r2, [r7, #0]
 800645e:	18d0      	adds	r0, r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	68ba      	ldr	r2, [r7, #8]
 8006466:	4619      	mov	r1, r3
 8006468:	f00c fd19 	bl	8012e9e <memcpy>
      offset += length_label;
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	4413      	add	r3, r2
 8006472:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6899      	ldr	r1, [r3, #8]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	683a      	ldr	r2, [r7, #0]
 800647c:	4413      	add	r3, r2
 800647e:	b2ca      	uxtb	r2, r1
 8006480:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	0a19      	lsrs	r1, r3, #8
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	3301      	adds	r3, #1
 800648c:	683a      	ldr	r2, [r7, #0]
 800648e:	4413      	add	r3, r2
 8006490:	b2ca      	uxtb	r2, r1
 8006492:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	0c19      	lsrs	r1, r3, #16
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	3302      	adds	r3, #2
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	4413      	add	r3, r2
 80064a2:	b2ca      	uxtb	r2, r1
 80064a4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	0e19      	lsrs	r1, r3, #24
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	3303      	adds	r3, #3
 80064b0:	683a      	ldr	r2, [r7, #0]
 80064b2:	4413      	add	r3, r2
 80064b4:	b2ca      	uxtb	r2, r1
 80064b6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	3304      	adds	r3, #4
 80064bc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68d9      	ldr	r1, [r3, #12]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	683a      	ldr	r2, [r7, #0]
 80064c6:	4413      	add	r3, r2
 80064c8:	b2ca      	uxtb	r2, r1
 80064ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	0a19      	lsrs	r1, r3, #8
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	3301      	adds	r3, #1
 80064d6:	683a      	ldr	r2, [r7, #0]
 80064d8:	4413      	add	r3, r2
 80064da:	b2ca      	uxtb	r2, r1
 80064dc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	0c19      	lsrs	r1, r3, #16
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	3302      	adds	r3, #2
 80064e8:	683a      	ldr	r2, [r7, #0]
 80064ea:	4413      	add	r3, r2
 80064ec:	b2ca      	uxtb	r2, r1
 80064ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	0e19      	lsrs	r1, r3, #24
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	3303      	adds	r3, #3
 80064fa:	683a      	ldr	r2, [r7, #0]
 80064fc:	4413      	add	r3, r2
 80064fe:	b2ca      	uxtb	r2, r1
 8006500:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	3304      	adds	r3, #4
 8006506:	60fb      	str	r3, [r7, #12]
      return offset;
 8006508:	68fb      	ldr	r3, [r7, #12]
    }
 800650a:	4618      	mov	r0, r3
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8006512:	b580      	push	{r7, lr}
 8006514:	b086      	sub	sp, #24
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
 800651a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800651c:	2300      	movs	r3, #0
 800651e:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	683a      	ldr	r2, [r7, #0]
 8006524:	441a      	add	r2, r3
 8006526:	f107 030c 	add.w	r3, r7, #12
 800652a:	4611      	mov	r1, r2
 800652c:	4618      	mov	r0, r3
 800652e:	f000 fd38 	bl	8006fa2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	3304      	adds	r3, #4
 8006536:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	617b      	str	r3, [r7, #20]
 800653c:	e00b      	b.n	8006556 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 800653e:	683a      	ldr	r2, [r7, #0]
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	441a      	add	r2, r3
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	3b01      	subs	r3, #1
 8006548:	6839      	ldr	r1, [r7, #0]
 800654a:	440b      	add	r3, r1
 800654c:	7812      	ldrb	r2, [r2, #0]
 800654e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	3301      	adds	r3, #1
 8006554:	617b      	str	r3, [r7, #20]
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4413      	add	r3, r2
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	429a      	cmp	r2, r3
 8006560:	d3ed      	bcc.n	800653e <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_label-1]=0;
 8006562:	693a      	ldr	r2, [r7, #16]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	4413      	add	r3, r2
 8006568:	3b01      	subs	r3, #1
 800656a:	683a      	ldr	r2, [r7, #0]
 800656c:	4413      	add	r3, r2
 800656e:	2200      	movs	r2, #0
 8006570:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	3b01      	subs	r3, #1
 8006576:	683a      	ldr	r2, [r7, #0]
 8006578:	441a      	add	r2, r3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	605a      	str	r2, [r3, #4]
      offset += length_label;
 800657e:	693a      	ldr	r2, [r7, #16]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	4413      	add	r3, r2
 8006584:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	683a      	ldr	r2, [r7, #0]
 800658a:	4413      	add	r3, r2
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	461a      	mov	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	689a      	ldr	r2, [r3, #8]
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	3301      	adds	r3, #1
 800659c:	6839      	ldr	r1, [r7, #0]
 800659e:	440b      	add	r3, r1
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	021b      	lsls	r3, r3, #8
 80065a4:	431a      	orrs	r2, r3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	689a      	ldr	r2, [r3, #8]
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	3302      	adds	r3, #2
 80065b2:	6839      	ldr	r1, [r7, #0]
 80065b4:	440b      	add	r3, r1
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	041b      	lsls	r3, r3, #16
 80065ba:	431a      	orrs	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	689a      	ldr	r2, [r3, #8]
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	3303      	adds	r3, #3
 80065c8:	6839      	ldr	r1, [r7, #0]
 80065ca:	440b      	add	r3, r1
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	061b      	lsls	r3, r3, #24
 80065d0:	431a      	orrs	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	3304      	adds	r3, #4
 80065da:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	683a      	ldr	r2, [r7, #0]
 80065e0:	4413      	add	r3, r2
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	461a      	mov	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	68da      	ldr	r2, [r3, #12]
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	3301      	adds	r3, #1
 80065f2:	6839      	ldr	r1, [r7, #0]
 80065f4:	440b      	add	r3, r1
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	021b      	lsls	r3, r3, #8
 80065fa:	431a      	orrs	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	68da      	ldr	r2, [r3, #12]
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	3302      	adds	r3, #2
 8006608:	6839      	ldr	r1, [r7, #0]
 800660a:	440b      	add	r3, r1
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	041b      	lsls	r3, r3, #16
 8006610:	431a      	orrs	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	68da      	ldr	r2, [r3, #12]
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	3303      	adds	r3, #3
 800661e:	6839      	ldr	r1, [r7, #0]
 8006620:	440b      	add	r3, r1
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	061b      	lsls	r3, r3, #24
 8006626:	431a      	orrs	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	3304      	adds	r3, #4
 8006630:	613b      	str	r3, [r7, #16]
     return offset;
 8006632:	693b      	ldr	r3, [r7, #16]
    }
 8006634:	4618      	mov	r0, r3
 8006636:	3718      	adds	r7, #24
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayDimension"; };
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	4b03      	ldr	r3, [pc, #12]	; (8006654 <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 8006646:	4618      	mov	r0, r3
 8006648:	370c      	adds	r7, #12
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	0801524c 	.word	0x0801524c

08006658 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    virtual const char * getMD5() override { return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	4b03      	ldr	r3, [pc, #12]	; (8006670 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 8006662:	4618      	mov	r0, r3
 8006664:	370c      	adds	r7, #12
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	0801526c 	.word	0x0801526c

08006674 <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
      dim_length(0), st_dim(), dim(nullptr),
      data_offset(0)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4618      	mov	r0, r3
 8006680:	f7fd faa6 	bl	8003bd0 <_ZN3ros3MsgC1Ev>
 8006684:	4a0a      	ldr	r2, [pc, #40]	; (80066b0 <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	601a      	str	r2, [r3, #0]
      dim_length(0), st_dim(), dim(nullptr),
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	605a      	str	r2, [r3, #4]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	3308      	adds	r3, #8
 8006694:	4618      	mov	r0, r3
 8006696:	f7ff feab 	bl	80063f0 <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	619a      	str	r2, [r3, #24]
      data_offset(0)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	61da      	str	r2, [r3, #28]
    {
    }
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4618      	mov	r0, r3
 80066aa:	3708      	adds	r7, #8
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	08015524 	.word	0x08015524

080066b4 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80066be:	2300      	movs	r3, #0
 80066c0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6859      	ldr	r1, [r3, #4]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	683a      	ldr	r2, [r7, #0]
 80066ca:	4413      	add	r3, r2
 80066cc:	b2ca      	uxtb	r2, r1
 80066ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	0a19      	lsrs	r1, r3, #8
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	3301      	adds	r3, #1
 80066da:	683a      	ldr	r2, [r7, #0]
 80066dc:	4413      	add	r3, r2
 80066de:	b2ca      	uxtb	r2, r1
 80066e0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	0c19      	lsrs	r1, r3, #16
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	3302      	adds	r3, #2
 80066ec:	683a      	ldr	r2, [r7, #0]
 80066ee:	4413      	add	r3, r2
 80066f0:	b2ca      	uxtb	r2, r1
 80066f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	0e19      	lsrs	r1, r3, #24
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	3303      	adds	r3, #3
 80066fe:	683a      	ldr	r2, [r7, #0]
 8006700:	4413      	add	r3, r2
 8006702:	b2ca      	uxtb	r2, r1
 8006704:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	3304      	adds	r3, #4
 800670a:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 800670c:	2300      	movs	r3, #0
 800670e:	60bb      	str	r3, [r7, #8]
 8006710:	e017      	b.n	8006742 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x8e>
      offset += this->dim[i].serialize(outbuffer + offset);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	699a      	ldr	r2, [r3, #24]
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	011b      	lsls	r3, r3, #4
 800671a:	18d0      	adds	r0, r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	699a      	ldr	r2, [r3, #24]
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	011b      	lsls	r3, r3, #4
 8006724:	4413      	add	r3, r2
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	6839      	ldr	r1, [r7, #0]
 800672e:	440a      	add	r2, r1
 8006730:	4611      	mov	r1, r2
 8006732:	4798      	blx	r3
 8006734:	4602      	mov	r2, r0
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	4413      	add	r3, r2
 800673a:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	3301      	adds	r3, #1
 8006740:	60bb      	str	r3, [r7, #8]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	68ba      	ldr	r2, [r7, #8]
 8006748:	429a      	cmp	r2, r3
 800674a:	d3e2      	bcc.n	8006712 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	69d9      	ldr	r1, [r3, #28]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	683a      	ldr	r2, [r7, #0]
 8006754:	4413      	add	r3, r2
 8006756:	b2ca      	uxtb	r2, r1
 8006758:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	69db      	ldr	r3, [r3, #28]
 800675e:	0a19      	lsrs	r1, r3, #8
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	3301      	adds	r3, #1
 8006764:	683a      	ldr	r2, [r7, #0]
 8006766:	4413      	add	r3, r2
 8006768:	b2ca      	uxtb	r2, r1
 800676a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	69db      	ldr	r3, [r3, #28]
 8006770:	0c19      	lsrs	r1, r3, #16
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	3302      	adds	r3, #2
 8006776:	683a      	ldr	r2, [r7, #0]
 8006778:	4413      	add	r3, r2
 800677a:	b2ca      	uxtb	r2, r1
 800677c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	69db      	ldr	r3, [r3, #28]
 8006782:	0e19      	lsrs	r1, r3, #24
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	3303      	adds	r3, #3
 8006788:	683a      	ldr	r2, [r7, #0]
 800678a:	4413      	add	r3, r2
 800678c:	b2ca      	uxtb	r2, r1
 800678e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	3304      	adds	r3, #4
 8006794:	60fb      	str	r3, [r7, #12]
      return offset;
 8006796:	68fb      	ldr	r3, [r7, #12]
    }
 8006798:	4618      	mov	r0, r3
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b086      	sub	sp, #24
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80067aa:	2300      	movs	r3, #0
 80067ac:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	683a      	ldr	r2, [r7, #0]
 80067b2:	4413      	add	r3, r2
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	3301      	adds	r3, #1
 80067bc:	683a      	ldr	r2, [r7, #0]
 80067be:	4413      	add	r3, r2
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	021b      	lsls	r3, r3, #8
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	3302      	adds	r3, #2
 80067ce:	683a      	ldr	r2, [r7, #0]
 80067d0:	4413      	add	r3, r2
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	041b      	lsls	r3, r3, #16
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	4313      	orrs	r3, r2
 80067da:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	3303      	adds	r3, #3
 80067e0:	683a      	ldr	r2, [r7, #0]
 80067e2:	4413      	add	r3, r2
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	061b      	lsls	r3, r3, #24
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	3304      	adds	r3, #4
 80067f2:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d90a      	bls.n	8006814 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	699a      	ldr	r2, [r3, #24]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	011b      	lsls	r3, r3, #4
 8006806:	4619      	mov	r1, r3
 8006808:	4610      	mov	r0, r2
 800680a:	f00b fbad 	bl	8011f68 <realloc>
 800680e:	4602      	mov	r2, r0
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 800681a:	2300      	movs	r3, #0
 800681c:	613b      	str	r3, [r7, #16]
 800681e:	e01a      	b.n	8006856 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xb6>
      offset += this->st_dim.deserialize(inbuffer + offset);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f103 0008 	add.w	r0, r3, #8
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	683a      	ldr	r2, [r7, #0]
 800682a:	4413      	add	r3, r2
 800682c:	4619      	mov	r1, r3
 800682e:	f7ff fe70 	bl	8006512 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 8006832:	4602      	mov	r2, r0
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	4413      	add	r3, r2
 8006838:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	699a      	ldr	r2, [r3, #24]
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	011b      	lsls	r3, r3, #4
 8006842:	18d0      	adds	r0, r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	3308      	adds	r3, #8
 8006848:	2210      	movs	r2, #16
 800684a:	4619      	mov	r1, r3
 800684c:	f00c fb27 	bl	8012e9e <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	3301      	adds	r3, #1
 8006854:	613b      	str	r3, [r7, #16]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	693a      	ldr	r2, [r7, #16]
 800685c:	429a      	cmp	r2, r3
 800685e:	d3df      	bcc.n	8006820 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x80>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	683a      	ldr	r2, [r7, #0]
 8006864:	4413      	add	r3, r2
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	461a      	mov	r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	69da      	ldr	r2, [r3, #28]
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	3301      	adds	r3, #1
 8006876:	6839      	ldr	r1, [r7, #0]
 8006878:	440b      	add	r3, r1
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	021b      	lsls	r3, r3, #8
 800687e:	431a      	orrs	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	69da      	ldr	r2, [r3, #28]
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	3302      	adds	r3, #2
 800688c:	6839      	ldr	r1, [r7, #0]
 800688e:	440b      	add	r3, r1
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	041b      	lsls	r3, r3, #16
 8006894:	431a      	orrs	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	69da      	ldr	r2, [r3, #28]
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	3303      	adds	r3, #3
 80068a2:	6839      	ldr	r1, [r7, #0]
 80068a4:	440b      	add	r3, r1
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	061b      	lsls	r3, r3, #24
 80068aa:	431a      	orrs	r2, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	3304      	adds	r3, #4
 80068b4:	617b      	str	r3, [r7, #20]
     return offset;
 80068b6:	697b      	ldr	r3, [r7, #20]
    }
 80068b8:	4618      	mov	r0, r3
 80068ba:	3718      	adds	r7, #24
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayLayout"; };
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	4b03      	ldr	r3, [pc, #12]	; (80068d8 <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 80068ca:	4618      	mov	r0, r3
 80068cc:	370c      	adds	r7, #12
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop
 80068d8:	08015290 	.word	0x08015290

080068dc <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    virtual const char * getMD5() override { return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	4b03      	ldr	r3, [pc, #12]	; (80068f4 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 80068e6:	4618      	mov	r0, r3
 80068e8:	370c      	adds	r7, #12
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	080152ac 	.word	0x080152ac

080068f8 <_ZN8std_msgs17Float32MultiArrayC1Ev>:
      uint32_t data_length;
      typedef float _data_type;
      _data_type st_data;
      _data_type * data;

    Float32MultiArray():
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), st_data(), data(nullptr)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4618      	mov	r0, r3
 8006904:	f7fd f964 	bl	8003bd0 <_ZN3ros3MsgC1Ev>
 8006908:	4a0b      	ldr	r2, [pc, #44]	; (8006938 <_ZN8std_msgs17Float32MultiArrayC1Ev+0x40>)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	601a      	str	r2, [r3, #0]
      layout(),
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	3304      	adds	r3, #4
 8006912:	4618      	mov	r0, r3
 8006914:	f7ff feae 	bl	8006674 <_ZN8std_msgs16MultiArrayLayoutC1Ev>
      data_length(0), st_data(), data(nullptr)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	625a      	str	r2, [r3, #36]	; 0x24
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f04f 0200 	mov.w	r2, #0
 8006924:	629a      	str	r2, [r3, #40]	; 0x28
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	62da      	str	r2, [r3, #44]	; 0x2c
    {
    }
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4618      	mov	r0, r3
 8006930:	3708      	adds	r7, #8
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	0801550c 	.word	0x0801550c

0800693c <_ZNK8std_msgs17Float32MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800693c:	b580      	push	{r7, lr}
 800693e:	b086      	sub	sp, #24
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006946:	2300      	movs	r3, #0
 8006948:	617b      	str	r3, [r7, #20]
      offset += this->layout.serialize(outbuffer + offset);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	1d18      	adds	r0, r3, #4
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	683a      	ldr	r2, [r7, #0]
 8006952:	4413      	add	r3, r2
 8006954:	4619      	mov	r1, r3
 8006956:	f7ff fead 	bl	80066b4 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 800695a:	4602      	mov	r2, r0
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	4413      	add	r3, r2
 8006960:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	683a      	ldr	r2, [r7, #0]
 800696a:	4413      	add	r3, r2
 800696c:	b2ca      	uxtb	r2, r1
 800696e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006974:	0a19      	lsrs	r1, r3, #8
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	3301      	adds	r3, #1
 800697a:	683a      	ldr	r2, [r7, #0]
 800697c:	4413      	add	r3, r2
 800697e:	b2ca      	uxtb	r2, r1
 8006980:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006986:	0c19      	lsrs	r1, r3, #16
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	3302      	adds	r3, #2
 800698c:	683a      	ldr	r2, [r7, #0]
 800698e:	4413      	add	r3, r2
 8006990:	b2ca      	uxtb	r2, r1
 8006992:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006998:	0e19      	lsrs	r1, r3, #24
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	3303      	adds	r3, #3
 800699e:	683a      	ldr	r2, [r7, #0]
 80069a0:	4413      	add	r3, r2
 80069a2:	b2ca      	uxtb	r2, r1
 80069a4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	3304      	adds	r3, #4
 80069aa:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 80069ac:	2300      	movs	r3, #0
 80069ae:	613b      	str	r3, [r7, #16]
 80069b0:	e02a      	b.n	8006a08 <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0xcc>
      union {
        float real;
        uint32_t base;
      } u_datai;
      u_datai.real = this->data[i];
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4413      	add	r3, r2
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 80069c0:	68f9      	ldr	r1, [r7, #12]
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	683a      	ldr	r2, [r7, #0]
 80069c6:	4413      	add	r3, r2
 80069c8:	b2ca      	uxtb	r2, r1
 80069ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	0a19      	lsrs	r1, r3, #8
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	3301      	adds	r3, #1
 80069d4:	683a      	ldr	r2, [r7, #0]
 80069d6:	4413      	add	r3, r2
 80069d8:	b2ca      	uxtb	r2, r1
 80069da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_datai.base >> (8 * 2)) & 0xFF;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	0c19      	lsrs	r1, r3, #16
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	3302      	adds	r3, #2
 80069e4:	683a      	ldr	r2, [r7, #0]
 80069e6:	4413      	add	r3, r2
 80069e8:	b2ca      	uxtb	r2, r1
 80069ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_datai.base >> (8 * 3)) & 0xFF;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	0e19      	lsrs	r1, r3, #24
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	3303      	adds	r3, #3
 80069f4:	683a      	ldr	r2, [r7, #0]
 80069f6:	4413      	add	r3, r2
 80069f8:	b2ca      	uxtb	r2, r1
 80069fa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	3304      	adds	r3, #4
 8006a00:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	3301      	adds	r3, #1
 8006a06:	613b      	str	r3, [r7, #16]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d3cf      	bcc.n	80069b2 <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0x76>
      }
      return offset;
 8006a12:	697b      	ldr	r3, [r7, #20]
    }
 8006a14:	4618      	mov	r0, r3
 8006a16:	3718      	adds	r7, #24
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <_ZN8std_msgs17Float32MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b086      	sub	sp, #24
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006a26:	2300      	movs	r3, #0
 8006a28:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	1d18      	adds	r0, r3, #4
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	683a      	ldr	r2, [r7, #0]
 8006a32:	4413      	add	r3, r2
 8006a34:	4619      	mov	r1, r3
 8006a36:	f7ff feb3 	bl	80067a0 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	4413      	add	r3, r2
 8006a40:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	683a      	ldr	r2, [r7, #0]
 8006a46:	4413      	add	r3, r2
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	3301      	adds	r3, #1
 8006a50:	683a      	ldr	r2, [r7, #0]
 8006a52:	4413      	add	r3, r2
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	021b      	lsls	r3, r3, #8
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	3302      	adds	r3, #2
 8006a62:	683a      	ldr	r2, [r7, #0]
 8006a64:	4413      	add	r3, r2
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	041b      	lsls	r3, r3, #16
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	3303      	adds	r3, #3
 8006a74:	683a      	ldr	r2, [r7, #0]
 8006a76:	4413      	add	r3, r2
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	061b      	lsls	r3, r3, #24
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	3304      	adds	r3, #4
 8006a86:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d90a      	bls.n	8006aa8 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x8c>
        this->data = (float*)realloc(this->data, data_lengthT * sizeof(float));
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	4610      	mov	r0, r2
 8006a9e:	f00b fa63 	bl	8011f68 <realloc>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	62da      	str	r2, [r3, #44]	; 0x2c
      data_length = data_lengthT;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	625a      	str	r2, [r3, #36]	; 0x24
      for( uint32_t i = 0; i < data_length; i++){
 8006aae:	2300      	movs	r3, #0
 8006ab0:	613b      	str	r3, [r7, #16]
 8006ab2:	e035      	b.n	8006b20 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x104>
      union {
        float real;
        uint32_t base;
      } u_st_data;
      u_st_data.base = 0;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	6839      	ldr	r1, [r7, #0]
 8006abe:	440a      	add	r2, r1
 8006ac0:	7812      	ldrb	r2, [r2, #0]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006ac6:	68ba      	ldr	r2, [r7, #8]
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	3301      	adds	r3, #1
 8006acc:	6839      	ldr	r1, [r7, #0]
 8006ace:	440b      	add	r3, r1
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	021b      	lsls	r3, r3, #8
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	3302      	adds	r3, #2
 8006ade:	6839      	ldr	r1, [r7, #0]
 8006ae0:	440b      	add	r3, r1
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	041b      	lsls	r3, r3, #16
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006aea:	68ba      	ldr	r2, [r7, #8]
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	3303      	adds	r3, #3
 8006af0:	6839      	ldr	r1, [r7, #0]
 8006af2:	440b      	add	r3, r1
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	061b      	lsls	r3, r3, #24
 8006af8:	4313      	orrs	r3, r2
 8006afa:	60bb      	str	r3, [r7, #8]
      this->st_data = u_st_data.real;
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	629a      	str	r2, [r3, #40]	; 0x28
      offset += sizeof(this->st_data);
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	3304      	adds	r3, #4
 8006b06:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(float));
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4413      	add	r3, r2
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	3228      	adds	r2, #40	; 0x28
 8006b16:	6812      	ldr	r2, [r2, #0]
 8006b18:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	613b      	str	r3, [r7, #16]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d3c4      	bcc.n	8006ab4 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x98>
      }
     return offset;
 8006b2a:	697b      	ldr	r3, [r7, #20]
    }
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3718      	adds	r7, #24
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <_ZN8std_msgs17Float32MultiArray7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float32MultiArray"; };
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	4b03      	ldr	r3, [pc, #12]	; (8006b4c <_ZN8std_msgs17Float32MultiArray7getTypeEv+0x18>)
 8006b3e:	4618      	mov	r0, r3
 8006b40:	370c      	adds	r7, #12
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	080152d0 	.word	0x080152d0

08006b50 <_ZN8std_msgs17Float32MultiArray6getMD5Ev>:
    virtual const char * getMD5() override { return "6a40e0ffa6a17a503ac3f8616991b1f6"; };
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	4b03      	ldr	r3, [pc, #12]	; (8006b68 <_ZN8std_msgs17Float32MultiArray6getMD5Ev+0x18>)
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	370c      	adds	r7, #12
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	080152ec 	.word	0x080152ec

08006b6c <_ZN8std_msgs4BoolC1Ev>:
  {
    public:
      typedef bool _data_type;
      _data_type data;

    Bool():
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
      data(0)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4618      	mov	r0, r3
 8006b78:	f7fd f82a 	bl	8003bd0 <_ZN3ros3MsgC1Ev>
 8006b7c:	4a05      	ldr	r2, [pc, #20]	; (8006b94 <_ZN8std_msgs4BoolC1Ev+0x28>)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	601a      	str	r2, [r3, #0]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	711a      	strb	r2, [r3, #4]
    {
    }
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3708      	adds	r7, #8
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	080154f4 	.word	0x080154f4

08006b98 <_ZNK8std_msgs4Bool9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	791b      	ldrb	r3, [r3, #4]
 8006baa:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	683a      	ldr	r2, [r7, #0]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	7a3a      	ldrb	r2, [r7, #8]
 8006bb4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	3301      	adds	r3, #1
 8006bba:	60fb      	str	r3, [r7, #12]
      return offset;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
    }
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3714      	adds	r7, #20
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr

08006bca <_ZN8std_msgs4Bool11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8006bca:	b480      	push	{r7}
 8006bcc:	b085      	sub	sp, #20
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
 8006bd2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006bdc:	7a3a      	ldrb	r2, [r7, #8]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6839      	ldr	r1, [r7, #0]
 8006be2:	440b      	add	r3, r1
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 8006bec:	7a3a      	ldrb	r2, [r7, #8]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	60fb      	str	r3, [r7, #12]
     return offset;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
    }
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3714      	adds	r7, #20
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
	...

08006c08 <_ZN8std_msgs4Bool7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Bool"; };
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	4b03      	ldr	r3, [pc, #12]	; (8006c20 <_ZN8std_msgs4Bool7getTypeEv+0x18>)
 8006c12:	4618      	mov	r0, r3
 8006c14:	370c      	adds	r7, #12
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr
 8006c1e:	bf00      	nop
 8006c20:	08015310 	.word	0x08015310

08006c24 <_ZN8std_msgs4Bool6getMD5Ev>:
    virtual const char * getMD5() override { return "8b94c1b53db61fb6aed406028ad6332a"; };
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	4b03      	ldr	r3, [pc, #12]	; (8006c3c <_ZN8std_msgs4Bool6getMD5Ev+0x18>)
 8006c2e:	4618      	mov	r0, r3
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	08015320 	.word	0x08015320

08006c40 <_Z11kinCallbackRKN13geometry_msgs7Vector3E>:
float errorPub;
float InvTarget[3];
float msg_imu[10];
bool stateInv;

void kinCallback(const geometry_msgs::Vector3 &data){
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
	xtarget = data.x;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006c4e:	4610      	mov	r0, r2
 8006c50:	4619      	mov	r1, r3
 8006c52:	f7f9 ffb9 	bl	8000bc8 <__aeabi_d2f>
 8006c56:	4603      	mov	r3, r0
 8006c58:	4a0c      	ldr	r2, [pc, #48]	; (8006c8c <_Z11kinCallbackRKN13geometry_msgs7Vector3E+0x4c>)
 8006c5a:	6013      	str	r3, [r2, #0]
	ytarget = data.y;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006c62:	4610      	mov	r0, r2
 8006c64:	4619      	mov	r1, r3
 8006c66:	f7f9 ffaf 	bl	8000bc8 <__aeabi_d2f>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	4a08      	ldr	r2, [pc, #32]	; (8006c90 <_Z11kinCallbackRKN13geometry_msgs7Vector3E+0x50>)
 8006c6e:	6013      	str	r3, [r2, #0]
	thtarget = data.z;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006c76:	4610      	mov	r0, r2
 8006c78:	4619      	mov	r1, r3
 8006c7a:	f7f9 ffa5 	bl	8000bc8 <__aeabi_d2f>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	4a04      	ldr	r2, [pc, #16]	; (8006c94 <_Z11kinCallbackRKN13geometry_msgs7Vector3E+0x54>)
 8006c82:	6013      	str	r3, [r2, #0]
}
 8006c84:	bf00      	nop
 8006c86:	3708      	adds	r7, #8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	20000adc 	.word	0x20000adc
 8006c90:	20000ae0 	.word	0x20000ae0
 8006c94:	20000ae4 	.word	0x20000ae4

08006c98 <_Z14invkinCallbackRKN13geometry_msgs7Vector3E>:

void invkinCallback(const geometry_msgs::Vector3 &data){
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
	InvTarget[0] = data.x;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006ca6:	4610      	mov	r0, r2
 8006ca8:	4619      	mov	r1, r3
 8006caa:	f7f9 ff8d 	bl	8000bc8 <__aeabi_d2f>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	4a0c      	ldr	r2, [pc, #48]	; (8006ce4 <_Z14invkinCallbackRKN13geometry_msgs7Vector3E+0x4c>)
 8006cb2:	6013      	str	r3, [r2, #0]
	InvTarget[1] = data.y;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006cba:	4610      	mov	r0, r2
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	f7f9 ff83 	bl	8000bc8 <__aeabi_d2f>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	4a07      	ldr	r2, [pc, #28]	; (8006ce4 <_Z14invkinCallbackRKN13geometry_msgs7Vector3E+0x4c>)
 8006cc6:	6053      	str	r3, [r2, #4]
	InvTarget[2] = data.z;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006cce:	4610      	mov	r0, r2
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	f7f9 ff79 	bl	8000bc8 <__aeabi_d2f>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	4a02      	ldr	r2, [pc, #8]	; (8006ce4 <_Z14invkinCallbackRKN13geometry_msgs7Vector3E+0x4c>)
 8006cda:	6093      	str	r3, [r2, #8]
}
 8006cdc:	bf00      	nop
 8006cde:	3708      	adds	r7, #8
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	20000aec 	.word	0x20000aec

08006ce8 <_Z15stateInverseKinRKN8std_msgs4BoolE>:

void stateInverseKin(const std_msgs::Bool &data){
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
	stateInv = data.data;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	791a      	ldrb	r2, [r3, #4]
 8006cf4:	4b03      	ldr	r3, [pc, #12]	; (8006d04 <_Z15stateInverseKinRKN8std_msgs4BoolE+0x1c>)
 8006cf6:	701a      	strb	r2, [r3, #0]
}
 8006cf8:	bf00      	nop
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr
 8006d04:	20000b20 	.word	0x20000b20

08006d08 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	4a04      	ldr	r2, [pc, #16]	; (8006d24 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	601a      	str	r2, [r3, #0]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4618      	mov	r0, r3
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr
 8006d24:	080155b4 	.word	0x080155b4

08006d28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 4096, //512
         int OUTPUT_SIZE = 4096> //512
class NodeHandle_ : public NodeHandleBase_
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7ff ffe8 	bl	8006d08 <_ZN3ros15NodeHandleBase_C1Ev>
 8006d38:	4a47      	ldr	r2, [pc, #284]	; (8006e58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EEC1Ev+0x130>)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	601a      	str	r2, [r3, #0]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	3304      	adds	r3, #4
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7fd fdce 	bl	80048e4 <_ZN13STM32HardwareC1Ev>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8006d6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006d72:	2100      	movs	r1, #0
 8006d74:	4618      	mov	r0, r3
 8006d76:	f00b ffbd 	bl	8012cf4 <memset>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d80:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8006d84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006d88:	2100      	movs	r1, #0
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f00b ffb2 	bl	8012cf4 <memset>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006d96:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8006d9a:	2264      	movs	r2, #100	; 0x64
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f00b ffa8 	bl	8012cf4 <memset>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006daa:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8006dae:	2264      	movs	r2, #100	; 0x64
 8006db0:	2100      	movs	r1, #0
 8006db2:	4618      	mov	r0, r3
 8006db4:	f00b ff9e 	bl	8012cf4 <memset>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006dcc:	461a      	mov	r2, r3
 8006dce:	2300      	movs	r3, #0
 8006dd0:	f8c2 38f0 	str.w	r3, [r2, #2288]	; 0x8f0
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006dda:	461a      	mov	r2, r3
 8006ddc:	2300      	movs	r3, #0
 8006dde:	f8c2 38f4 	str.w	r3, [r2, #2292]	; 0x8f4
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006de8:	461a      	mov	r2, r3
 8006dea:	2300      	movs	r3, #0
 8006dec:	f8c2 38f8 	str.w	r3, [r2, #2296]	; 0x8f8
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006df6:	461a      	mov	r2, r3
 8006df8:	2300      	movs	r3, #0
 8006dfa:	f8c2 38fc 	str.w	r3, [r2, #2300]	; 0x8fc
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006e10:	461a      	mov	r2, r3
 8006e12:	2300      	movs	r3, #0
 8006e14:	f8c2 3904 	str.w	r3, [r2, #2308]	; 0x904
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006e1e:	461a      	mov	r2, r3
 8006e20:	2300      	movs	r3, #0
 8006e22:	f8c2 3908 	str.w	r3, [r2, #2312]	; 0x908
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	2300      	movs	r3, #0
 8006e30:	f8c2 390c 	str.w	r3, [r2, #2316]	; 0x90c
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8006e46:	3314      	adds	r3, #20
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f7fd fa35 	bl	80042b8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4618      	mov	r0, r3
 8006e52:	3708      	adds	r7, #8
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	080154e0 	.word	0x080154e0

08006e5c <HAL_UART_TxCpltCallback>:
ros::Subscriber<geometry_msgs::Vector3> invKinematic("robot/inv_target_kinematic", &invkinCallback);
ros::Subscriber<std_msgs::Bool> stateInv_Sub("robot/stateInv", &stateInverseKin);
ros::Publisher errorArr("robot/Error_Aksen", &error_arr_msg);
ros::Publisher imu_pub("robot/imu", &imuData);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
	nh.getHardware()->flush();
 8006e64:	4805      	ldr	r0, [pc, #20]	; (8006e7c <HAL_UART_TxCpltCallback+0x20>)
 8006e66:	f000 f91b 	bl	80070a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE11getHardwareEv>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f7fd fd9f 	bl	80049b0 <_ZN13STM32Hardware5flushEv>
}
 8006e72:	bf00      	nop
 8006e74:	3708      	adds	r7, #8
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	20000b24 	.word	0x20000b24

08006e80 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
	nh.getHardware()->reset_rbuf();
 8006e88:	4805      	ldr	r0, [pc, #20]	; (8006ea0 <HAL_UART_RxCpltCallback+0x20>)
 8006e8a:	f000 f909 	bl	80070a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE11getHardwareEv>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	4618      	mov	r0, r3
 8006e92:	f7fd fd4e 	bl	8004932 <_ZN13STM32Hardware10reset_rbufEv>
}
 8006e96:	bf00      	nop
 8006e98:	3708      	adds	r7, #8
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	20000b24 	.word	0x20000b24

08006ea4 <setup>:

void errorArrPublish();
void imuPublish();

void setup(void) {
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	af00      	add	r7, sp, #0
	nh.initNode();
 8006ea8:	480d      	ldr	r0, [pc, #52]	; (8006ee0 <setup+0x3c>)
 8006eaa:	f000 f905 	bl	80070b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8initNodeEv>
	nh.advertise(errorArr); // error arrived
 8006eae:	490d      	ldr	r1, [pc, #52]	; (8006ee4 <setup+0x40>)
 8006eb0:	480b      	ldr	r0, [pc, #44]	; (8006ee0 <setup+0x3c>)
 8006eb2:	f000 f92a 	bl	800710a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9advertiseERNS_9PublisherE>
	nh.advertise(imu_pub);
 8006eb6:	490c      	ldr	r1, [pc, #48]	; (8006ee8 <setup+0x44>)
 8006eb8:	4809      	ldr	r0, [pc, #36]	; (8006ee0 <setup+0x3c>)
 8006eba:	f000 f926 	bl	800710a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9advertiseERNS_9PublisherE>
	nh.subscribe(invKinematic); // inverse kinematic
 8006ebe:	490b      	ldr	r1, [pc, #44]	; (8006eec <setup+0x48>)
 8006ec0:	4807      	ldr	r0, [pc, #28]	; (8006ee0 <setup+0x3c>)
 8006ec2:	f000 f952 	bl	800716a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(kinematic); // forward kinematic
 8006ec6:	490a      	ldr	r1, [pc, #40]	; (8006ef0 <setup+0x4c>)
 8006ec8:	4805      	ldr	r0, [pc, #20]	; (8006ee0 <setup+0x3c>)
 8006eca:	f000 f94e 	bl	800716a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(stateInv_Sub); // diaktifkan apabila menggunakan inverse kinematic
 8006ece:	4909      	ldr	r1, [pc, #36]	; (8006ef4 <setup+0x50>)
 8006ed0:	4803      	ldr	r0, [pc, #12]	; (8006ee0 <setup+0x3c>)
 8006ed2:	f000 f94a 	bl	800716a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>
//	nh.negotiateTopics();
	HAL_Delay(100);
 8006ed6:	2064      	movs	r0, #100	; 0x64
 8006ed8:	f001 fca8 	bl	800882c <HAL_Delay>
}
 8006edc:	bf00      	nop
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	20000b24 	.word	0x20000b24
 8006ee4:	200035b4 	.word	0x200035b4
 8006ee8:	200035c8 	.word	0x200035c8
 8006eec:	20003560 	.word	0x20003560
 8006ef0:	20003528 	.word	0x20003528
 8006ef4:	20003598 	.word	0x20003598

08006ef8 <loop>:

void loop(){
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	af00      	add	r7, sp, #0
	errorArrPublish();
 8006efc:	f000 f80c 	bl	8006f18 <_Z15errorArrPublishv>
	imuPublish();
 8006f00:	f000 f81c 	bl	8006f3c <_Z10imuPublishv>
	nh.spinOnce();
 8006f04:	4803      	ldr	r0, [pc, #12]	; (8006f14 <loop+0x1c>)
 8006f06:	f000 f95b 	bl	80071c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv>
	HAL_Delay(10);
 8006f0a:	200a      	movs	r0, #10
 8006f0c:	f001 fc8e 	bl	800882c <HAL_Delay>
}
 8006f10:	bf00      	nop
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	20000b24 	.word	0x20000b24

08006f18 <_Z15errorArrPublishv>:

void errorArrPublish(){
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	af00      	add	r7, sp, #0
	error_arr_msg.data = errorPub;
 8006f1c:	4b04      	ldr	r3, [pc, #16]	; (8006f30 <_Z15errorArrPublishv+0x18>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a04      	ldr	r2, [pc, #16]	; (8006f34 <_Z15errorArrPublishv+0x1c>)
 8006f22:	6053      	str	r3, [r2, #4]
	errorArr.publish(&error_arr_msg);
 8006f24:	4903      	ldr	r1, [pc, #12]	; (8006f34 <_Z15errorArrPublishv+0x1c>)
 8006f26:	4804      	ldr	r0, [pc, #16]	; (8006f38 <_Z15errorArrPublishv+0x20>)
 8006f28:	f7fd fca9 	bl	800487e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8006f2c:	bf00      	nop
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	20000ae8 	.word	0x20000ae8
 8006f34:	200034f0 	.word	0x200034f0
 8006f38:	200035b4 	.word	0x200035b4

08006f3c <_Z10imuPublishv>:

void imuPublish(){
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	af00      	add	r7, sp, #0
	imuData.data = msg_imu;
 8006f40:	4b05      	ldr	r3, [pc, #20]	; (8006f58 <_Z10imuPublishv+0x1c>)
 8006f42:	4a06      	ldr	r2, [pc, #24]	; (8006f5c <_Z10imuPublishv+0x20>)
 8006f44:	62da      	str	r2, [r3, #44]	; 0x2c
	imuData.data_length = 10;
 8006f46:	4b04      	ldr	r3, [pc, #16]	; (8006f58 <_Z10imuPublishv+0x1c>)
 8006f48:	220a      	movs	r2, #10
 8006f4a:	625a      	str	r2, [r3, #36]	; 0x24
	imu_pub.publish(&imuData);
 8006f4c:	4902      	ldr	r1, [pc, #8]	; (8006f58 <_Z10imuPublishv+0x1c>)
 8006f4e:	4804      	ldr	r0, [pc, #16]	; (8006f60 <_Z10imuPublishv+0x24>)
 8006f50:	f7fd fc95 	bl	800487e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8006f54:	bf00      	nop
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	200034f8 	.word	0x200034f8
 8006f5c:	20000af8 	.word	0x20000af8
 8006f60:	200035c8 	.word	0x200035c8

08006f64 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8006f64:	b480      	push	{r7}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8006f6e:	2300      	movs	r3, #0
 8006f70:	60fb      	str	r3, [r7, #12]
 8006f72:	e00c      	b.n	8006f8e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	00db      	lsls	r3, r3, #3
 8006f78:	683a      	ldr	r2, [r7, #0]
 8006f7a:	fa22 f103 	lsr.w	r1, r2, r3
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	4413      	add	r3, r2
 8006f84:	b2ca      	uxtb	r2, r1
 8006f86:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	60fb      	str	r3, [r7, #12]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2b03      	cmp	r3, #3
 8006f92:	d9ef      	bls.n	8006f74 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8006f94:	bf00      	nop
 8006f96:	bf00      	nop
 8006f98:	3714      	adds	r7, #20
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr

08006fa2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8006fa2:	b480      	push	{r7}
 8006fa4:	b085      	sub	sp, #20
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
 8006faa:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	60fb      	str	r3, [r7, #12]
 8006fb6:	e010      	b.n	8006fda <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	6839      	ldr	r1, [r7, #0]
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	440a      	add	r2, r1
 8006fc2:	7812      	ldrb	r2, [r2, #0]
 8006fc4:	4611      	mov	r1, r2
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	00d2      	lsls	r2, r2, #3
 8006fca:	fa01 f202 	lsl.w	r2, r1, r2
 8006fce:	431a      	orrs	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	60fb      	str	r3, [r7, #12]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2b03      	cmp	r3, #3
 8006fde:	d9eb      	bls.n	8006fb8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8006fe0:	bf00      	nop
 8006fe2:	bf00      	nop
 8006fe4:	3714      	adds	r7, #20
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr
	...

08006ff0 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	4a04      	ldr	r2, [pc, #16]	; (800700c <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	601a      	str	r2, [r3, #0]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4618      	mov	r0, r3
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr
 800700c:	0801559c 	.word	0x0801559c

08007010 <_ZN3ros10SubscriberIN13geometry_msgs7Vector3EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	607a      	str	r2, [r7, #4]
 800701c:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	4618      	mov	r0, r3
 8007022:	f7ff ffe5 	bl	8006ff0 <_ZN3ros11Subscriber_C1Ev>
 8007026:	4a0b      	ldr	r2, [pc, #44]	; (8007054 <_ZN3ros10SubscriberIN13geometry_msgs7Vector3EvEC1EPKcPFvRKS2_Ei+0x44>)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	601a      	str	r2, [r3, #0]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	3310      	adds	r3, #16
 8007030:	4618      	mov	r0, r3
 8007032:	f7fe fc2b 	bl	800588c <_ZN13geometry_msgs7Vector3C1Ev>
    cb_(cb),
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	631a      	str	r2, [r3, #48]	; 0x30
    endpoint_(endpoint)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	683a      	ldr	r2, [r7, #0]
 8007040:	635a      	str	r2, [r3, #52]	; 0x34
  {
    topic_ = topic_name;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	68ba      	ldr	r2, [r7, #8]
 8007046:	609a      	str	r2, [r3, #8]
  };
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	4618      	mov	r0, r3
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	080154c8 	.word	0x080154c8

08007058 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	607a      	str	r2, [r7, #4]
 8007064:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	4618      	mov	r0, r3
 800706a:	f7ff ffc1 	bl	8006ff0 <_ZN3ros11Subscriber_C1Ev>
 800706e:	4a0b      	ldr	r2, [pc, #44]	; (800709c <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei+0x44>)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	601a      	str	r2, [r3, #0]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	330c      	adds	r3, #12
 8007078:	4618      	mov	r0, r3
 800707a:	f7ff fd77 	bl	8006b6c <_ZN8std_msgs4BoolC1Ev>
    cb_(cb),
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	683a      	ldr	r2, [r7, #0]
 8007088:	619a      	str	r2, [r3, #24]
    topic_ = topic_name;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	609a      	str	r2, [r3, #8]
  };
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	4618      	mov	r0, r3
 8007094:	3710      	adds	r7, #16
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	080154b0 	.word	0x080154b0

080070a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	3304      	adds	r3, #4
  }
 80070ac:	4618      	mov	r0, r3
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	3304      	adds	r3, #4
 80070c4:	4618      	mov	r0, r3
 80070c6:	f7fd fc29 	bl	800491c <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80070d0:	461a      	mov	r2, r3
 80070d2:	2300      	movs	r3, #0
 80070d4:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
    bytes_ = 0;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80070de:	461a      	mov	r2, r3
 80070e0:	2300      	movs	r3, #0
 80070e2:	f8c2 38f0 	str.w	r3, [r2, #2288]	; 0x8f0
    index_ = 0;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80070ec:	461a      	mov	r2, r3
 80070ee:	2300      	movs	r3, #0
 80070f0:	f8c2 38f8 	str.w	r3, [r2, #2296]	; 0x8f8
    topic_ = 0;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80070fa:	461a      	mov	r2, r3
 80070fc:	2300      	movs	r3, #0
 80070fe:	f8c2 38f4 	str.w	r3, [r2, #2292]	; 0x8f4
  };
 8007102:	bf00      	nop
 8007104:	3708      	adds	r7, #8
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}

0800710a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 800710a:	b480      	push	{r7}
 800710c:	b085      	sub	sp, #20
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
 8007112:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8007114:	2300      	movs	r3, #0
 8007116:	60fb      	str	r3, [r7, #12]
 8007118:	e01d      	b.n	8007156 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x4c>
    {
      if (publishers[i] == 0) // empty slot
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	4413      	add	r3, r2
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d111      	bne.n	8007150 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	4413      	add	r3, r2
 8007138:	683a      	ldr	r2, [r7, #0]
 800713a:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	60da      	str	r2, [r3, #12]
        return true;
 800714c:	2301      	movs	r3, #1
 800714e:	e006      	b.n	800715e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	3301      	adds	r3, #1
 8007154:	60fb      	str	r3, [r7, #12]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2b18      	cmp	r3, #24
 800715a:	ddde      	ble.n	800711a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 800715c:	2300      	movs	r3, #0
  }
 800715e:	4618      	mov	r0, r3
 8007160:	3714      	adds	r7, #20
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr

0800716a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 800716a:	b480      	push	{r7}
 800716c:	b085      	sub	sp, #20
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
 8007172:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8007174:	2300      	movs	r3, #0
 8007176:	60fb      	str	r3, [r7, #12]
 8007178:	e018      	b.n	80071ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x42>
    {
      if (subscribers[i] == 0) // empty slot
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	f602 2222 	addw	r2, r2, #2594	; 0xa22
 8007182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d10d      	bne.n	80071a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x3c>
      {
        subscribers[i] = &s;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	f602 2222 	addw	r2, r2, #2594	; 0xa22
 8007192:	6839      	ldr	r1, [r7, #0]
 8007194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	605a      	str	r2, [r3, #4]
        return true;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e006      	b.n	80071b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	3301      	adds	r3, #1
 80071aa:	60fb      	str	r3, [r7, #12]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2b18      	cmp	r3, #24
 80071b0:	dde3      	ble.n	800717a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x10>
      }
    }
    return false;
 80071b2:	2300      	movs	r3, #0
  }
 80071b4:	4618      	mov	r0, r3
 80071b6:	3714      	adds	r7, #20
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv>:
  virtual int spinOnce() override
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	3304      	adds	r3, #4
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7fd fc93 	bl	8004af8 <_ZN13STM32Hardware4timeEv>
 80071d2:	6138      	str	r0, [r7, #16]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80071da:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 80071de:	693a      	ldr	r2, [r7, #16]
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d905      	bls.n	80071f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x36>
      configured_ = false;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80071f0:	2200      	movs	r2, #0
 80071f2:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80071fc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007200:	2b00      	cmp	r3, #0
 8007202:	d00e      	beq.n	8007222 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800720a:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 800720e:	693a      	ldr	r2, [r7, #16]
 8007210:	429a      	cmp	r2, r3
 8007212:	d906      	bls.n	8007222 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800721a:	461a      	mov	r2, r3
 800721c:	2300      	movs	r3, #0
 800721e:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
    bool tx_stop_requested = false;
 8007222:	2300      	movs	r3, #0
 8007224:	75fb      	strb	r3, [r7, #23]
    bool saw_time_msg = false;
 8007226:	2300      	movs	r3, #0
 8007228:	75bb      	strb	r3, [r7, #22]
      if (spin_timeout_ > 0)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 8007230:	2b00      	cmp	r3, #0
 8007232:	d014      	beq.n	800725e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x9e>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	3304      	adds	r3, #4
 8007238:	4618      	mov	r0, r3
 800723a:	f7fd fc5d 	bl	8004af8 <_ZN13STM32Hardware4timeEv>
 800723e:	4602      	mov	r2, r0
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	1ad2      	subs	r2, r2, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 800724a:	429a      	cmp	r2, r3
 800724c:	bf8c      	ite	hi
 800724e:	2301      	movhi	r3, #1
 8007250:	2300      	movls	r3, #0
 8007252:	b2db      	uxtb	r3, r3
 8007254:	2b00      	cmp	r3, #0
 8007256:	d002      	beq.n	800725e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x9e>
          return SPIN_TIMEOUT;
 8007258:	f06f 0301 	mvn.w	r3, #1
 800725c:	e232      	b.n	80076c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x504>
      int data = hardware_.read();
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	3304      	adds	r3, #4
 8007262:	4618      	mov	r0, r3
 8007264:	f7fd fb76 	bl	8004954 <_ZN13STM32Hardware4readEv>
 8007268:	60f8      	str	r0, [r7, #12]
      if (data < 0)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2b00      	cmp	r3, #0
 800726e:	f2c0 81fe 	blt.w	800766e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x4ae>
      checksum_ += data;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007278:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	4413      	add	r3, r2
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8007286:	f8c2 38fc 	str.w	r3, [r2, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007290:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007294:	2b07      	cmp	r3, #7
 8007296:	d12b      	bne.n	80072f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800729e:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80072a2:	1c5a      	adds	r2, r3, #1
 80072a4:	6879      	ldr	r1, [r7, #4]
 80072a6:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 80072aa:	f8c1 28f8 	str.w	r2, [r1, #2296]	; 0x8f8
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	b2d1      	uxtb	r1, r2
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	4413      	add	r3, r2
 80072b6:	460a      	mov	r2, r1
 80072b8:	f883 2824 	strb.w	r2, [r3, #2084]	; 0x824
        bytes_--;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80072c2:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80072c6:	3b01      	subs	r3, #1
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80072ce:	f8c2 38f0 	str.w	r3, [r2, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80072d8:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1a4      	bne.n	800722a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
          mode_ = MODE_MSG_CHECKSUM;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80072e6:	461a      	mov	r2, r3
 80072e8:	2308      	movs	r3, #8
 80072ea:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
 80072ee:	e79c      	b.n	800722a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
      else if (mode_ == MODE_FIRST_FF)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80072f6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d130      	bne.n	8007360 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2bff      	cmp	r3, #255	; 0xff
 8007302:	d112      	bne.n	800732a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x16a>
          mode_++;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800730a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800730e:	3301      	adds	r3, #1
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8007316:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	3314      	adds	r3, #20
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8007324:	f8c2 390c 	str.w	r3, [r2, #2316]	; 0x90c
 8007328:	e77f      	b.n	800722a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	3304      	adds	r3, #4
 800732e:	4618      	mov	r0, r3
 8007330:	f7fd fbe2 	bl	8004af8 <_ZN13STM32Hardware4timeEv>
 8007334:	4602      	mov	r2, r0
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	1ad3      	subs	r3, r2, r3
 800733a:	f241 3288 	movw	r2, #5000	; 0x1388
 800733e:	4293      	cmp	r3, r2
 8007340:	bf8c      	ite	hi
 8007342:	2301      	movhi	r3, #1
 8007344:	2300      	movls	r3, #0
 8007346:	b2db      	uxtb	r3, r3
 8007348:	2b00      	cmp	r3, #0
 800734a:	f43f af6e 	beq.w	800722a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
          configured_ = false;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007354:	2200      	movs	r2, #0
 8007356:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 800735a:	f06f 0301 	mvn.w	r3, #1
 800735e:	e1b1      	b.n	80076c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x504>
      else if (mode_ == MODE_PROTOCOL_VER)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007366:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800736a:	2b01      	cmp	r3, #1
 800736c:	d121      	bne.n	80073b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2bfe      	cmp	r3, #254	; 0xfe
 8007372:	d10b      	bne.n	800738c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x1cc>
          mode_++;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800737a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800737e:	3301      	adds	r3, #1
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8007386:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
 800738a:	e74e      	b.n	800722a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
          mode_ = MODE_FIRST_FF;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007392:	461a      	mov	r2, r3
 8007394:	2300      	movs	r3, #0
 8007396:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
          if (configured_ == false)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80073a0:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f47f af40 	bne.w	800722a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 f98e 	bl	80076cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15requestSyncTimeEv>
 80073b0:	e73b      	b.n	800722a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80073b8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80073bc:	2b02      	cmp	r3, #2
 80073be:	d120      	bne.n	8007402 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x242>
        bytes_ = data;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80073c6:	461a      	mov	r2, r3
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f8c2 38f0 	str.w	r3, [r2, #2288]	; 0x8f0
        index_ = 0;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80073d4:	461a      	mov	r2, r3
 80073d6:	2300      	movs	r3, #0
 80073d8:	f8c2 38f8 	str.w	r3, [r2, #2296]	; 0x8f8
        mode_++;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80073e2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80073e6:	3301      	adds	r3, #1
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80073ee:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80073f8:	461a      	mov	r2, r3
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f8c2 38fc 	str.w	r3, [r2, #2300]	; 0x8fc
 8007400:	e713      	b.n	800722a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007408:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800740c:	2b03      	cmp	r3, #3
 800740e:	d118      	bne.n	8007442 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007416:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	021b      	lsls	r3, r3, #8
 800741e:	4413      	add	r3, r2
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8007426:	f8c2 38f0 	str.w	r3, [r2, #2288]	; 0x8f0
        mode_++;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007430:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007434:	3301      	adds	r3, #1
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800743c:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
 8007440:	e6f3      	b.n	800722a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007448:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800744c:	2b04      	cmp	r3, #4
 800744e:	d11f      	bne.n	8007490 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007456:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800745a:	425a      	negs	r2, r3
 800745c:	b2db      	uxtb	r3, r3
 800745e:	b2d2      	uxtb	r2, r2
 8007460:	bf58      	it	pl
 8007462:	4253      	negpl	r3, r2
 8007464:	2bff      	cmp	r3, #255	; 0xff
 8007466:	d10b      	bne.n	8007480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x2c0>
          mode_++;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800746e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007472:	3301      	adds	r3, #1
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800747a:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
 800747e:	e6d4      	b.n	800722a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007486:	461a      	mov	r2, r3
 8007488:	2300      	movs	r3, #0
 800748a:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
 800748e:	e6cc      	b.n	800722a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007496:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800749a:	2b05      	cmp	r3, #5
 800749c:	d119      	bne.n	80074d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x312>
        topic_ = data;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80074a4:	461a      	mov	r2, r3
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f8c2 38f4 	str.w	r3, [r2, #2292]	; 0x8f4
        mode_++;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80074b2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80074b6:	3301      	adds	r3, #1
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80074be:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80074c8:	461a      	mov	r2, r3
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f8c2 38fc 	str.w	r3, [r2, #2300]	; 0x8fc
 80074d0:	e6ab      	b.n	800722a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80074d8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80074dc:	2b06      	cmp	r3, #6
 80074de:	d123      	bne.n	8007528 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x368>
        topic_ += data << 8;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80074e6:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	021b      	lsls	r3, r3, #8
 80074ee:	4413      	add	r3, r2
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80074f6:	f8c2 38f4 	str.w	r3, [r2, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007500:	461a      	mov	r2, r3
 8007502:	2307      	movs	r3, #7
 8007504:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
        if (bytes_ == 0)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800750e:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8007512:	2b00      	cmp	r3, #0
 8007514:	f47f ae89 	bne.w	800722a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
          mode_ = MODE_MSG_CHECKSUM;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800751e:	461a      	mov	r2, r3
 8007520:	2308      	movs	r3, #8
 8007522:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
 8007526:	e680      	b.n	800722a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800752e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007532:	2b08      	cmp	r3, #8
 8007534:	f47f ae79 	bne.w	800722a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
        mode_ = MODE_FIRST_FF;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800753e:	461a      	mov	r2, r3
 8007540:	2300      	movs	r3, #0
 8007542:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800754c:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8007550:	425a      	negs	r2, r3
 8007552:	b2db      	uxtb	r3, r3
 8007554:	b2d2      	uxtb	r2, r2
 8007556:	bf58      	it	pl
 8007558:	4253      	negpl	r3, r2
 800755a:	2bff      	cmp	r3, #255	; 0xff
 800755c:	f47f ae65 	bne.w	800722a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007566:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800756a:	2b00      	cmp	r3, #0
 800756c:	d116      	bne.n	800759c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x3dc>
            requestSyncTime();
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 f8ac 	bl	80076cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15requestSyncTimeEv>
            negotiateTopics();
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 f8c7 	bl	8007708 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007580:	461a      	mov	r2, r3
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	f8c2 3904 	str.w	r3, [r2, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800758e:	461a      	mov	r2, r3
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	f8c2 3908 	str.w	r3, [r2, #2312]	; 0x908
            return SPIN_ERR;
 8007596:	f04f 33ff 	mov.w	r3, #4294967295
 800759a:	e093      	b.n	80076c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x504>
          else if (topic_ == TopicInfo::ID_TIME)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80075a2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80075a6:	2b0a      	cmp	r3, #10
 80075a8:	d109      	bne.n	80075be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x3fe>
            saw_time_msg = true;
 80075aa:	2301      	movs	r3, #1
 80075ac:	75bb      	strb	r3, [r7, #22]
            syncTime(message_in);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f603 0324 	addw	r3, r3, #2084	; 0x824
 80075b4:	4619      	mov	r1, r3
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 f988 	bl	80078cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8syncTimeEPh>
 80075bc:	e635      	b.n	800722a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80075c4:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80075c8:	2b06      	cmp	r3, #6
 80075ca:	d111      	bne.n	80075f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80075d2:	3314      	adds	r3, #20
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	f602 0224 	addw	r2, r2, #2084	; 0x824
 80075da:	4611      	mov	r1, r2
 80075dc:	4618      	mov	r0, r3
 80075de:	f7fc ffaa 	bl	8004536 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80075e8:	2201      	movs	r2, #1
 80075ea:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80075ee:	e61c      	b.n	800722a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80075f6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80075fa:	2b0b      	cmp	r3, #11
 80075fc:	d108      	bne.n	8007610 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x450>
            configured_ = false;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007604:	2200      	movs	r2, #0
 8007606:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
            tx_stop_requested = true;
 800760a:	2301      	movs	r3, #1
 800760c:	75fb      	strb	r3, [r7, #23]
 800760e:	e60c      	b.n	800722a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
            if (subscribers[topic_ - 100])
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007616:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800761a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f602 2222 	addw	r2, r2, #2594	; 0xa22
 8007624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007628:	2b00      	cmp	r3, #0
 800762a:	f43f adfe 	beq.w	800722a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
              subscribers[topic_ - 100]->callback(message_in);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007634:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8007638:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f602 2222 	addw	r2, r2, #2594	; 0xa22
 8007642:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800764c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8007650:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f602 2222 	addw	r2, r2, #2594	; 0xa22
 800765a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	f602 0224 	addw	r2, r2, #2084	; 0x824
 8007668:	4611      	mov	r1, r2
 800766a:	4798      	blx	r3
    while (true)
 800766c:	e5dd      	b.n	800722a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
        break;
 800766e:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007676:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800767a:	2b00      	cmp	r3, #0
 800767c:	d014      	beq.n	80076a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x4e8>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007684:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8007688:	693a      	ldr	r2, [r7, #16]
 800768a:	1ad3      	subs	r3, r2, r3
 800768c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007690:	4293      	cmp	r3, r2
 8007692:	d909      	bls.n	80076a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x4e8>
      requestSyncTime();
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 f819 	bl	80076cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80076a0:	461a      	mov	r2, r3
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	f8c2 3904 	str.w	r3, [r2, #2308]	; 0x904
    return saw_time_msg ? SPIN_TIME_RECV : (tx_stop_requested ? SPIN_TX_STOP_REQUESTED : SPIN_OK);
 80076a8:	7dbb      	ldrb	r3, [r7, #22]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d002      	beq.n	80076b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x4f4>
 80076ae:	f06f 0303 	mvn.w	r3, #3
 80076b2:	e006      	b.n	80076c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x502>
 80076b4:	7dfb      	ldrb	r3, [r7, #23]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d002      	beq.n	80076c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x500>
 80076ba:	f06f 0302 	mvn.w	r3, #2
 80076be:	e000      	b.n	80076c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x502>
 80076c0:	2300      	movs	r3, #0
 80076c2:	bf00      	nop
  }
 80076c4:	4618      	mov	r0, r3
 80076c6:	3718      	adds	r7, #24
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15requestSyncTimeEv>:
  void requestSyncTime()
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b086      	sub	sp, #24
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80076d4:	f107 030c 	add.w	r3, r7, #12
 80076d8:	4618      	mov	r0, r3
 80076da:	f7fc fa89 	bl	8003bf0 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f107 020c 	add.w	r2, r7, #12
 80076e8:	210a      	movs	r1, #10
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	4798      	blx	r3
    rt_time = hardware_.time();
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	3304      	adds	r3, #4
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7fd fa00 	bl	8004af8 <_ZN13STM32Hardware4timeEv>
 80076f8:	4602      	mov	r2, r0
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  }
 8007700:	bf00      	nop
 8007702:	3718      	adds	r7, #24
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8007708:	b590      	push	{r4, r7, lr}
 800770a:	b08b      	sub	sp, #44	; 0x2c
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8007710:	f107 030c 	add.w	r3, r7, #12
 8007714:	4618      	mov	r0, r3
 8007716:	f7fc fb5b 	bl	8003dd0 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800771a:	2300      	movs	r3, #0
 800771c:	627b      	str	r3, [r7, #36]	; 0x24
 800771e:	e062      	b.n	80077e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007724:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	4413      	add	r3, r2
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d056      	beq.n	80077e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007736:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	4413      	add	r3, r2
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	b29b      	uxth	r3, r3
 8007744:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774a:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	4413      	add	r3, r2
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775c:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	4413      	add	r3, r2
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	6859      	ldr	r1, [r3, #4]
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776c:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	4413      	add	r3, r2
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	3308      	adds	r3, #8
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4608      	mov	r0, r1
 8007780:	4798      	blx	r3
 8007782:	4603      	mov	r3, r0
 8007784:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778a:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	4413      	add	r3, r2
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	6859      	ldr	r1, [r3, #4]
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779a:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	4413      	add	r3, r2
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	330c      	adds	r3, #12
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4608      	mov	r0, r1
 80077ae:	4798      	blx	r3
 80077b0:	4603      	mov	r3, r0
 80077b2:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80077b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077b8:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	681c      	ldr	r4, [r3, #0]
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c4:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	4413      	add	r3, r2
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7fd f869 	bl	80048a6 <_ZN3ros9Publisher15getEndpointTypeEv>
 80077d4:	4601      	mov	r1, r0
 80077d6:	f107 030c 	add.w	r3, r7, #12
 80077da:	461a      	mov	r2, r3
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80077e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e2:	3301      	adds	r3, #1
 80077e4:	627b      	str	r3, [r7, #36]	; 0x24
 80077e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e8:	2b18      	cmp	r3, #24
 80077ea:	dd99      	ble.n	8007720 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80077ec:	2300      	movs	r3, #0
 80077ee:	627b      	str	r3, [r7, #36]	; 0x24
 80077f0:	e05e      	b.n	80078b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077f6:	f602 2222 	addw	r2, r2, #2594	; 0xa22
 80077fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d053      	beq.n	80078aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007806:	f602 2222 	addw	r2, r2, #2594	; 0xa22
 800780a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	b29b      	uxth	r3, r3
 8007812:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007818:	f602 2222 	addw	r2, r2, #2594	; 0xa22
 800781c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007828:	f602 2222 	addw	r2, r2, #2594	; 0xa22
 800782c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007834:	f602 2222 	addw	r2, r2, #2594	; 0xa22
 8007838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	3308      	adds	r3, #8
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4608      	mov	r0, r1
 8007844:	4798      	blx	r3
 8007846:	4603      	mov	r3, r0
 8007848:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800784e:	f602 2222 	addw	r2, r2, #2594	; 0xa22
 8007852:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800785a:	f602 2222 	addw	r2, r2, #2594	; 0xa22
 800785e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	330c      	adds	r3, #12
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4608      	mov	r0, r1
 800786a:	4798      	blx	r3
 800786c:	4603      	mov	r3, r0
 800786e:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8007870:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007874:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681c      	ldr	r4, [r3, #0]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007880:	f602 2222 	addw	r2, r2, #2594	; 0xa22
 8007884:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800788c:	f602 2222 	addw	r2, r2, #2594	; 0xa22
 8007890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	3304      	adds	r3, #4
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4608      	mov	r0, r1
 800789c:	4798      	blx	r3
 800789e:	4601      	mov	r1, r0
 80078a0:	f107 030c 	add.w	r3, r7, #12
 80078a4:	461a      	mov	r2, r3
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80078aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ac:	3301      	adds	r3, #1
 80078ae:	627b      	str	r3, [r7, #36]	; 0x24
 80078b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b2:	2b18      	cmp	r3, #24
 80078b4:	dd9d      	ble.n	80077f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80078bc:	2201      	movs	r2, #1
 80078be:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 80078c2:	bf00      	nop
 80078c4:	372c      	adds	r7, #44	; 0x2c
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd90      	pop	{r4, r7, pc}
	...

080078cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b086      	sub	sp, #24
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80078d6:	f107 0308 	add.w	r3, r7, #8
 80078da:	4618      	mov	r0, r3
 80078dc:	f7fc f988 	bl	8003bf0 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	3304      	adds	r3, #4
 80078e4:	4618      	mov	r0, r3
 80078e6:	f7fd f907 	bl	8004af8 <_ZN13STM32Hardware4timeEv>
 80078ea:	4602      	mov	r2, r0
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 80078f2:	1ad3      	subs	r3, r2, r3
 80078f4:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80078f6:	f107 0308 	add.w	r3, r7, #8
 80078fa:	6839      	ldr	r1, [r7, #0]
 80078fc:	4618      	mov	r0, r3
 80078fe:	f7fc f9e7 	bl	8003cd0 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8007902:	68fa      	ldr	r2, [r7, #12]
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	4916      	ldr	r1, [pc, #88]	; (8007960 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8syncTimeEPh+0x94>)
 8007908:	fba1 1303 	umull	r1, r3, r1, r3
 800790c:	099b      	lsrs	r3, r3, #6
 800790e:	4413      	add	r3, r2
 8007910:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8007912:	6939      	ldr	r1, [r7, #16]
 8007914:	697a      	ldr	r2, [r7, #20]
 8007916:	4b12      	ldr	r3, [pc, #72]	; (8007960 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8syncTimeEPh+0x94>)
 8007918:	fba3 0302 	umull	r0, r3, r3, r2
 800791c:	099b      	lsrs	r3, r3, #6
 800791e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007922:	fb00 f303 	mul.w	r3, r0, r3
 8007926:	1ad3      	subs	r3, r2, r3
 8007928:	4a0e      	ldr	r2, [pc, #56]	; (8007964 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8syncTimeEPh+0x98>)
 800792a:	fb02 f303 	mul.w	r3, r2, r3
 800792e:	440b      	add	r3, r1
 8007930:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8007932:	f107 0308 	add.w	r3, r7, #8
 8007936:	3304      	adds	r3, #4
 8007938:	4619      	mov	r1, r3
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 f8c0 	bl	8007ac0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	3304      	adds	r3, #4
 8007944:	4618      	mov	r0, r3
 8007946:	f7fd f8d7 	bl	8004af8 <_ZN13STM32Hardware4timeEv>
 800794a:	4602      	mov	r2, r0
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007952:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8007956:	bf00      	nop
 8007958:	3718      	adds	r7, #24
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	10624dd3 	.word	0x10624dd3
 8007964:	000f4240 	.word	0x000f4240

08007968 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8007968:	b580      	push	{r7, lr}
 800796a:	b088      	sub	sp, #32
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	2b63      	cmp	r3, #99	; 0x63
 8007978:	dd0b      	ble.n	8007992 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x2a>
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007980:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8007984:	f083 0301 	eor.w	r3, r3, #1
 8007988:	b2db      	uxtb	r3, r3
 800798a:	2b00      	cmp	r3, #0
 800798c:	d001      	beq.n	8007992 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 800798e:	2300      	movs	r3, #0
 8007990:	e090      	b.n	8007ab4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 800799e:	3304      	adds	r3, #4
 80079a0:	3307      	adds	r3, #7
 80079a2:	4619      	mov	r1, r3
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	4790      	blx	r2
 80079a8:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079b0:	22ff      	movs	r2, #255	; 0xff
 80079b2:	f883 2824 	strb.w	r2, [r3, #2084]	; 0x824
    message_out[1] = PROTOCOL_VER;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079bc:	22fe      	movs	r2, #254	; 0xfe
 80079be:	f883 2825 	strb.w	r2, [r3, #2085]	; 0x825
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	b2da      	uxtb	r2, r3
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079cc:	f883 2826 	strb.w	r2, [r3, #2086]	; 0x826
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	0a1b      	lsrs	r3, r3, #8
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	b2da      	uxtb	r2, r3
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079e0:	f883 2827 	strb.w	r2, [r3, #2087]	; 0x827
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079ea:	f893 2826 	ldrb.w	r2, [r3, #2086]	; 0x826
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079f4:	f893 3827 	ldrb.w	r3, [r3, #2087]	; 0x827
 80079f8:	4413      	add	r3, r2
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	43db      	mvns	r3, r3
 80079fe:	b2da      	uxtb	r2, r3
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a06:	f883 2828 	strb.w	r2, [r3, #2088]	; 0x828
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	b2da      	uxtb	r2, r3
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a14:	f883 2829 	strb.w	r2, [r3, #2089]	; 0x829
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	b21b      	sxth	r3, r3
 8007a1c:	121b      	asrs	r3, r3, #8
 8007a1e:	b21b      	sxth	r3, r3
 8007a20:	b2da      	uxtb	r2, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a28:	f883 282a 	strb.w	r2, [r3, #2090]	; 0x82a

    /* calculate checksum */
    int chk = 0;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8007a30:	2305      	movs	r3, #5
 8007a32:	61bb      	str	r3, [r7, #24]
 8007a34:	e00d      	b.n	8007a52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE+0xea>
      chk += message_out[i];
 8007a36:	68fa      	ldr	r2, [r7, #12]
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007a40:	3304      	adds	r3, #4
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	461a      	mov	r2, r3
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	4413      	add	r3, r2
 8007a4a:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	3301      	adds	r3, #1
 8007a50:	61bb      	str	r3, [r7, #24]
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	3306      	adds	r3, #6
 8007a56:	69ba      	ldr	r2, [r7, #24]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	ddec      	ble.n	8007a36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE+0xce>
    l += 7;
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	3307      	adds	r3, #7
 8007a60:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	425a      	negs	r2, r3
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	b2d2      	uxtb	r2, r2
 8007a6a:	bf58      	it	pl
 8007a6c:	4253      	negpl	r3, r2
 8007a6e:	b2da      	uxtb	r2, r3
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	1c59      	adds	r1, r3, #1
 8007a74:	6179      	str	r1, [r7, #20]
 8007a76:	43d2      	mvns	r2, r2
 8007a78:	b2d1      	uxtb	r1, r2
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007a82:	3304      	adds	r3, #4
 8007a84:	460a      	mov	r2, r1
 8007a86:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a8e:	dc0b      	bgt.n	8007aa8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	1d18      	adds	r0, r3, #4
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007a9a:	3304      	adds	r3, #4
 8007a9c:	697a      	ldr	r2, [r7, #20]
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	f7fc ffe4 	bl	8004a6c <_ZN13STM32Hardware5writeEPhi>
      return l;
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	e005      	b.n	8007ab4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8007aa8:	4904      	ldr	r1, [pc, #16]	; (8007abc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x154>)
 8007aaa:	68f8      	ldr	r0, [r7, #12]
 8007aac:	f000 f848 	bl	8007b40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8logerrorEPKc>
      return -1;
 8007ab0:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3720      	adds	r7, #32
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	08015344 	.word	0x08015344

08007ac0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	3304      	adds	r3, #4
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7fd f812 	bl	8004af8 <_ZN13STM32Hardware4timeEv>
 8007ad4:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	4915      	ldr	r1, [pc, #84]	; (8007b34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE6setNowERKNS_4TimeE+0x74>)
 8007ade:	fba1 1303 	umull	r1, r3, r1, r3
 8007ae2:	099b      	lsrs	r3, r3, #6
 8007ae4:	1ad3      	subs	r3, r2, r3
 8007ae6:	1e5a      	subs	r2, r3, #1
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	6859      	ldr	r1, [r3, #4]
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	4b0f      	ldr	r3, [pc, #60]	; (8007b34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE6setNowERKNS_4TimeE+0x74>)
 8007af6:	fba3 0302 	umull	r0, r3, r3, r2
 8007afa:	099b      	lsrs	r3, r3, #6
 8007afc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007b00:	fb00 f303 	mul.w	r3, r0, r3
 8007b04:	1ad3      	subs	r3, r2, r3
 8007b06:	4a0c      	ldr	r2, [pc, #48]	; (8007b38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE6setNowERKNS_4TimeE+0x78>)
 8007b08:	fb02 f303 	mul.w	r3, r2, r3
 8007b0c:	1aca      	subs	r2, r1, r3
 8007b0e:	4b0b      	ldr	r3, [pc, #44]	; (8007b3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE6setNowERKNS_4TimeE+0x7c>)
 8007b10:	4413      	add	r3, r2
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	f8c2 381c 	str.w	r3, [r2, #2076]	; 0x81c
    normalizeSecNSec(sec_offset, nsec_offset);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f603 0218 	addw	r2, r3, #2072	; 0x818
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8007b24:	4619      	mov	r1, r3
 8007b26:	4610      	mov	r0, r2
 8007b28:	f000 fde8 	bl	80086fc <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8007b2c:	bf00      	nop
 8007b2e:	3710      	adds	r7, #16
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	10624dd3 	.word	0x10624dd3
 8007b38:	000f4240 	.word	0x000f4240
 8007b3c:	3b9aca00 	.word	0x3b9aca00

08007b40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8007b4a:	683a      	ldr	r2, [r7, #0]
 8007b4c:	2103      	movs	r1, #3
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f804 	bl	8007b5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE3logEcPKc>
  }
 8007b54:	bf00      	nop
 8007b56:	3708      	adds	r7, #8
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE3logEcPKc>:
  void log(char byte, const char * msg)
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b088      	sub	sp, #32
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	460b      	mov	r3, r1
 8007b66:	607a      	str	r2, [r7, #4]
 8007b68:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8007b6a:	f107 0314 	add.w	r3, r7, #20
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7fc faf2 	bl	8004158 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8007b74:	7afb      	ldrb	r3, [r7, #11]
 8007b76:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f107 0214 	add.w	r2, r7, #20
 8007b86:	2107      	movs	r1, #7
 8007b88:	68f8      	ldr	r0, [r7, #12]
 8007b8a:	4798      	blx	r3
  }
 8007b8c:	bf00      	nop
 8007b8e:	3720      	adds	r7, #32
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <_Z41__static_initialization_and_destruction_0ii>:
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d13a      	bne.n	8007c1a <_Z41__static_initialization_and_destruction_0ii+0x86>
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d135      	bne.n	8007c1a <_Z41__static_initialization_and_destruction_0ii+0x86>
ros::NodeHandle nh;
 8007bae:	481d      	ldr	r0, [pc, #116]	; (8007c24 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8007bb0:	f7ff f8ba 	bl	8006d28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EEC1Ev>
geometry_msgs::Vector3 kinMsg;
 8007bb4:	481c      	ldr	r0, [pc, #112]	; (8007c28 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8007bb6:	f7fd fe69 	bl	800588c <_ZN13geometry_msgs7Vector3C1Ev>
geometry_msgs::Vector3 KinTarget_msg;
 8007bba:	481c      	ldr	r0, [pc, #112]	; (8007c2c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8007bbc:	f7fd fe66 	bl	800588c <_ZN13geometry_msgs7Vector3C1Ev>
geometry_msgs::Vector3 aksenMsg;
 8007bc0:	481b      	ldr	r0, [pc, #108]	; (8007c30 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8007bc2:	f7fd fe63 	bl	800588c <_ZN13geometry_msgs7Vector3C1Ev>
geometry_msgs::Quaternion sensMsg;
 8007bc6:	481b      	ldr	r0, [pc, #108]	; (8007c34 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8007bc8:	f7fc ffa2 	bl	8004b10 <_ZN13geometry_msgs10QuaternionC1Ev>
std_msgs::Bool stateInv_msg;
 8007bcc:	481a      	ldr	r0, [pc, #104]	; (8007c38 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8007bce:	f7fe ffcd 	bl	8006b6c <_ZN8std_msgs4BoolC1Ev>
std_msgs::Float32 error_arr_msg;
 8007bd2:	481a      	ldr	r0, [pc, #104]	; (8007c3c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8007bd4:	f7fe fb70 	bl	80062b8 <_ZN8std_msgs7Float32C1Ev>
std_msgs::Float32MultiArray imuData;
 8007bd8:	4819      	ldr	r0, [pc, #100]	; (8007c40 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8007bda:	f7fe fe8d 	bl	80068f8 <_ZN8std_msgs17Float32MultiArrayC1Ev>
ros::Subscriber<geometry_msgs::Vector3> kinematic("robot/target_kinematic", &kinCallback);
 8007bde:	2301      	movs	r3, #1
 8007be0:	4a18      	ldr	r2, [pc, #96]	; (8007c44 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8007be2:	4919      	ldr	r1, [pc, #100]	; (8007c48 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8007be4:	4819      	ldr	r0, [pc, #100]	; (8007c4c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8007be6:	f7ff fa13 	bl	8007010 <_ZN3ros10SubscriberIN13geometry_msgs7Vector3EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<geometry_msgs::Vector3> invKinematic("robot/inv_target_kinematic", &invkinCallback);
 8007bea:	2301      	movs	r3, #1
 8007bec:	4a18      	ldr	r2, [pc, #96]	; (8007c50 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8007bee:	4919      	ldr	r1, [pc, #100]	; (8007c54 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8007bf0:	4819      	ldr	r0, [pc, #100]	; (8007c58 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8007bf2:	f7ff fa0d 	bl	8007010 <_ZN3ros10SubscriberIN13geometry_msgs7Vector3EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Bool> stateInv_Sub("robot/stateInv", &stateInverseKin);
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	4a18      	ldr	r2, [pc, #96]	; (8007c5c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8007bfa:	4919      	ldr	r1, [pc, #100]	; (8007c60 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8007bfc:	4819      	ldr	r0, [pc, #100]	; (8007c64 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8007bfe:	f7ff fa2b 	bl	8007058 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>
ros::Publisher errorArr("robot/Error_Aksen", &error_arr_msg);
 8007c02:	2300      	movs	r3, #0
 8007c04:	4a0d      	ldr	r2, [pc, #52]	; (8007c3c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8007c06:	4918      	ldr	r1, [pc, #96]	; (8007c68 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8007c08:	4818      	ldr	r0, [pc, #96]	; (8007c6c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8007c0a:	f7fc fe21 	bl	8004850 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher imu_pub("robot/imu", &imuData);
 8007c0e:	2300      	movs	r3, #0
 8007c10:	4a0b      	ldr	r2, [pc, #44]	; (8007c40 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8007c12:	4917      	ldr	r1, [pc, #92]	; (8007c70 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8007c14:	4817      	ldr	r0, [pc, #92]	; (8007c74 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8007c16:	f7fc fe1b 	bl	8004850 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8007c1a:	bf00      	nop
 8007c1c:	3708      	adds	r7, #8
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	20000b24 	.word	0x20000b24
 8007c28:	20003460 	.word	0x20003460
 8007c2c:	20003480 	.word	0x20003480
 8007c30:	200034a0 	.word	0x200034a0
 8007c34:	200034c0 	.word	0x200034c0
 8007c38:	200034e8 	.word	0x200034e8
 8007c3c:	200034f0 	.word	0x200034f0
 8007c40:	200034f8 	.word	0x200034f8
 8007c44:	08006c41 	.word	0x08006c41
 8007c48:	08015380 	.word	0x08015380
 8007c4c:	20003528 	.word	0x20003528
 8007c50:	08006c99 	.word	0x08006c99
 8007c54:	08015398 	.word	0x08015398
 8007c58:	20003560 	.word	0x20003560
 8007c5c:	08006ce9 	.word	0x08006ce9
 8007c60:	080153b4 	.word	0x080153b4
 8007c64:	20003598 	.word	0x20003598
 8007c68:	080153c4 	.word	0x080153c4
 8007c6c:	200035b4 	.word	0x200035b4
 8007c70:	080153d8 	.word	0x080153d8
 8007c74:	200035c8 	.word	0x200035c8

08007c78 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	330c      	adds	r3, #12
 8007c86:	6839      	ldr	r1, [r7, #0]
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f7fe ff9e 	bl	8006bca <_ZN8std_msgs4Bool11deserializeEPh>
    this->cb_(msg);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	320c      	adds	r2, #12
 8007c96:	4610      	mov	r0, r2
 8007c98:	4798      	blx	r3
  }
 8007c9a:	bf00      	nop
 8007c9c:	3708      	adds	r7, #8
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8007ca2:	b480      	push	{r7}
 8007ca4:	b083      	sub	sp, #12
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	699b      	ldr	r3, [r3, #24]
  }
 8007cae:	4618      	mov	r0, r3
 8007cb0:	370c      	adds	r7, #12
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr

08007cba <_ZN3ros10SubscriberIN8std_msgs4BoolEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8007cba:	b580      	push	{r7, lr}
 8007cbc:	b082      	sub	sp, #8
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	330c      	adds	r3, #12
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7fe ff9e 	bl	8006c08 <_ZN8std_msgs4Bool7getTypeEv>
 8007ccc:	4603      	mov	r3, r0
  }
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3708      	adds	r7, #8
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b082      	sub	sp, #8
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	330c      	adds	r3, #12
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7fe ff9e 	bl	8006c24 <_ZN8std_msgs4Bool6getMD5Ev>
 8007ce8:	4603      	mov	r3, r0
  }
 8007cea:	4618      	mov	r0, r3
 8007cec:	3708      	adds	r7, #8
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <_ZN3ros10SubscriberIN13geometry_msgs7Vector3EvE8callbackEPh>:
  virtual void callback(unsigned char* data) override
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b082      	sub	sp, #8
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
 8007cfa:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	3310      	adds	r3, #16
 8007d00:	6839      	ldr	r1, [r7, #0]
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7fd ff5d 	bl	8005bc2 <_ZN13geometry_msgs7Vector311deserializeEPh>
    this->cb_(msg);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	3210      	adds	r2, #16
 8007d10:	4610      	mov	r0, r2
 8007d12:	4798      	blx	r3
  }
 8007d14:	bf00      	nop
 8007d16:	3708      	adds	r7, #8
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <_ZN3ros10SubscriberIN13geometry_msgs7Vector3EvE15getEndpointTypeEv>:
  virtual int getEndpointType() override
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  }
 8007d28:	4618      	mov	r0, r3
 8007d2a:	370c      	adds	r7, #12
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <_ZN3ros10SubscriberIN13geometry_msgs7Vector3EvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	3310      	adds	r3, #16
 8007d40:	4618      	mov	r0, r3
 8007d42:	f7fe fa9d 	bl	8006280 <_ZN13geometry_msgs7Vector37getTypeEv>
 8007d46:	4603      	mov	r3, r0
  }
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3708      	adds	r7, #8
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <_ZN3ros10SubscriberIN13geometry_msgs7Vector3EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	3310      	adds	r3, #16
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f7fe fa9d 	bl	800629c <_ZN13geometry_msgs7Vector36getMD5Ev>
 8007d62:	4603      	mov	r3, r0
  }
 8007d64:	4618      	mov	r0, r3
 8007d66:	3708      	adds	r7, #8
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9connectedEv>:
  virtual bool connected() override
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
    return configured_;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007d7a:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8007d7e:	4618      	mov	r0, r3
 8007d80:	370c      	adds	r7, #12
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr

08007d8a <_GLOBAL__sub_I_xtarget>:
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007d92:	2001      	movs	r0, #1
 8007d94:	f7ff fefe 	bl	8007b94 <_Z41__static_initialization_and_destruction_0ii>
 8007d98:	bd80      	pop	{r7, pc}
	...

08007d9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007da2:	2300      	movs	r3, #0
 8007da4:	607b      	str	r3, [r7, #4]
 8007da6:	4b12      	ldr	r3, [pc, #72]	; (8007df0 <HAL_MspInit+0x54>)
 8007da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007daa:	4a11      	ldr	r2, [pc, #68]	; (8007df0 <HAL_MspInit+0x54>)
 8007dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007db0:	6453      	str	r3, [r2, #68]	; 0x44
 8007db2:	4b0f      	ldr	r3, [pc, #60]	; (8007df0 <HAL_MspInit+0x54>)
 8007db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dba:	607b      	str	r3, [r7, #4]
 8007dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	603b      	str	r3, [r7, #0]
 8007dc2:	4b0b      	ldr	r3, [pc, #44]	; (8007df0 <HAL_MspInit+0x54>)
 8007dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc6:	4a0a      	ldr	r2, [pc, #40]	; (8007df0 <HAL_MspInit+0x54>)
 8007dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8007dce:	4b08      	ldr	r3, [pc, #32]	; (8007df0 <HAL_MspInit+0x54>)
 8007dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dd6:	603b      	str	r3, [r7, #0]
 8007dd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007dda:	2200      	movs	r2, #0
 8007ddc:	210f      	movs	r1, #15
 8007dde:	f06f 0001 	mvn.w	r0, #1
 8007de2:	f000 fdff 	bl	80089e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007de6:	bf00      	nop
 8007de8:	3708      	adds	r7, #8
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	40023800 	.word	0x40023800

08007df4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b08c      	sub	sp, #48	; 0x30
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007dfc:	f107 031c 	add.w	r3, r7, #28
 8007e00:	2200      	movs	r2, #0
 8007e02:	601a      	str	r2, [r3, #0]
 8007e04:	605a      	str	r2, [r3, #4]
 8007e06:	609a      	str	r2, [r3, #8]
 8007e08:	60da      	str	r2, [r3, #12]
 8007e0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a71      	ldr	r2, [pc, #452]	; (8007fd8 <HAL_I2C_MspInit+0x1e4>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	f040 808c 	bne.w	8007f30 <HAL_I2C_MspInit+0x13c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007e18:	2300      	movs	r3, #0
 8007e1a:	61bb      	str	r3, [r7, #24]
 8007e1c:	4b6f      	ldr	r3, [pc, #444]	; (8007fdc <HAL_I2C_MspInit+0x1e8>)
 8007e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e20:	4a6e      	ldr	r2, [pc, #440]	; (8007fdc <HAL_I2C_MspInit+0x1e8>)
 8007e22:	f043 0302 	orr.w	r3, r3, #2
 8007e26:	6313      	str	r3, [r2, #48]	; 0x30
 8007e28:	4b6c      	ldr	r3, [pc, #432]	; (8007fdc <HAL_I2C_MspInit+0x1e8>)
 8007e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e2c:	f003 0302 	and.w	r3, r3, #2
 8007e30:	61bb      	str	r3, [r7, #24]
 8007e32:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8007e34:	f44f 7310 	mov.w	r3, #576	; 0x240
 8007e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007e3a:	2312      	movs	r3, #18
 8007e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e42:	2303      	movs	r3, #3
 8007e44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007e46:	2304      	movs	r3, #4
 8007e48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e4a:	f107 031c 	add.w	r3, r7, #28
 8007e4e:	4619      	mov	r1, r3
 8007e50:	4863      	ldr	r0, [pc, #396]	; (8007fe0 <HAL_I2C_MspInit+0x1ec>)
 8007e52:	f001 f9f3 	bl	800923c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007e56:	2300      	movs	r3, #0
 8007e58:	617b      	str	r3, [r7, #20]
 8007e5a:	4b60      	ldr	r3, [pc, #384]	; (8007fdc <HAL_I2C_MspInit+0x1e8>)
 8007e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5e:	4a5f      	ldr	r2, [pc, #380]	; (8007fdc <HAL_I2C_MspInit+0x1e8>)
 8007e60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007e64:	6413      	str	r3, [r2, #64]	; 0x40
 8007e66:	4b5d      	ldr	r3, [pc, #372]	; (8007fdc <HAL_I2C_MspInit+0x1e8>)
 8007e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e6e:	617b      	str	r3, [r7, #20]
 8007e70:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8007e72:	4b5c      	ldr	r3, [pc, #368]	; (8007fe4 <HAL_I2C_MspInit+0x1f0>)
 8007e74:	4a5c      	ldr	r2, [pc, #368]	; (8007fe8 <HAL_I2C_MspInit+0x1f4>)
 8007e76:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8007e78:	4b5a      	ldr	r3, [pc, #360]	; (8007fe4 <HAL_I2C_MspInit+0x1f0>)
 8007e7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007e7e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007e80:	4b58      	ldr	r3, [pc, #352]	; (8007fe4 <HAL_I2C_MspInit+0x1f0>)
 8007e82:	2200      	movs	r2, #0
 8007e84:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007e86:	4b57      	ldr	r3, [pc, #348]	; (8007fe4 <HAL_I2C_MspInit+0x1f0>)
 8007e88:	2200      	movs	r2, #0
 8007e8a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007e8c:	4b55      	ldr	r3, [pc, #340]	; (8007fe4 <HAL_I2C_MspInit+0x1f0>)
 8007e8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007e92:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007e94:	4b53      	ldr	r3, [pc, #332]	; (8007fe4 <HAL_I2C_MspInit+0x1f0>)
 8007e96:	2200      	movs	r2, #0
 8007e98:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007e9a:	4b52      	ldr	r3, [pc, #328]	; (8007fe4 <HAL_I2C_MspInit+0x1f0>)
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8007ea0:	4b50      	ldr	r3, [pc, #320]	; (8007fe4 <HAL_I2C_MspInit+0x1f0>)
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8007ea6:	4b4f      	ldr	r3, [pc, #316]	; (8007fe4 <HAL_I2C_MspInit+0x1f0>)
 8007ea8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007eac:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007eae:	4b4d      	ldr	r3, [pc, #308]	; (8007fe4 <HAL_I2C_MspInit+0x1f0>)
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8007eb4:	484b      	ldr	r0, [pc, #300]	; (8007fe4 <HAL_I2C_MspInit+0x1f0>)
 8007eb6:	f000 fdbf 	bl	8008a38 <HAL_DMA_Init>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d001      	beq.n	8007ec4 <HAL_I2C_MspInit+0xd0>
    {
      Error_Handler();
 8007ec0:	f7fb fe70 	bl	8003ba4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4a47      	ldr	r2, [pc, #284]	; (8007fe4 <HAL_I2C_MspInit+0x1f0>)
 8007ec8:	639a      	str	r2, [r3, #56]	; 0x38
 8007eca:	4a46      	ldr	r2, [pc, #280]	; (8007fe4 <HAL_I2C_MspInit+0x1f0>)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8007ed0:	4b46      	ldr	r3, [pc, #280]	; (8007fec <HAL_I2C_MspInit+0x1f8>)
 8007ed2:	4a47      	ldr	r2, [pc, #284]	; (8007ff0 <HAL_I2C_MspInit+0x1fc>)
 8007ed4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8007ed6:	4b45      	ldr	r3, [pc, #276]	; (8007fec <HAL_I2C_MspInit+0x1f8>)
 8007ed8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007edc:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007ede:	4b43      	ldr	r3, [pc, #268]	; (8007fec <HAL_I2C_MspInit+0x1f8>)
 8007ee0:	2240      	movs	r2, #64	; 0x40
 8007ee2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007ee4:	4b41      	ldr	r3, [pc, #260]	; (8007fec <HAL_I2C_MspInit+0x1f8>)
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007eea:	4b40      	ldr	r3, [pc, #256]	; (8007fec <HAL_I2C_MspInit+0x1f8>)
 8007eec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007ef0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007ef2:	4b3e      	ldr	r3, [pc, #248]	; (8007fec <HAL_I2C_MspInit+0x1f8>)
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007ef8:	4b3c      	ldr	r3, [pc, #240]	; (8007fec <HAL_I2C_MspInit+0x1f8>)
 8007efa:	2200      	movs	r2, #0
 8007efc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8007efe:	4b3b      	ldr	r3, [pc, #236]	; (8007fec <HAL_I2C_MspInit+0x1f8>)
 8007f00:	2200      	movs	r2, #0
 8007f02:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8007f04:	4b39      	ldr	r3, [pc, #228]	; (8007fec <HAL_I2C_MspInit+0x1f8>)
 8007f06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007f0a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007f0c:	4b37      	ldr	r3, [pc, #220]	; (8007fec <HAL_I2C_MspInit+0x1f8>)
 8007f0e:	2200      	movs	r2, #0
 8007f10:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8007f12:	4836      	ldr	r0, [pc, #216]	; (8007fec <HAL_I2C_MspInit+0x1f8>)
 8007f14:	f000 fd90 	bl	8008a38 <HAL_DMA_Init>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d001      	beq.n	8007f22 <HAL_I2C_MspInit+0x12e>
    {
      Error_Handler();
 8007f1e:	f7fb fe41 	bl	8003ba4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	4a31      	ldr	r2, [pc, #196]	; (8007fec <HAL_I2C_MspInit+0x1f8>)
 8007f26:	635a      	str	r2, [r3, #52]	; 0x34
 8007f28:	4a30      	ldr	r2, [pc, #192]	; (8007fec <HAL_I2C_MspInit+0x1f8>)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8007f2e:	e04f      	b.n	8007fd0 <HAL_I2C_MspInit+0x1dc>
  else if(hi2c->Instance==I2C2)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a2f      	ldr	r2, [pc, #188]	; (8007ff4 <HAL_I2C_MspInit+0x200>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d14a      	bne.n	8007fd0 <HAL_I2C_MspInit+0x1dc>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	613b      	str	r3, [r7, #16]
 8007f3e:	4b27      	ldr	r3, [pc, #156]	; (8007fdc <HAL_I2C_MspInit+0x1e8>)
 8007f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f42:	4a26      	ldr	r2, [pc, #152]	; (8007fdc <HAL_I2C_MspInit+0x1e8>)
 8007f44:	f043 0320 	orr.w	r3, r3, #32
 8007f48:	6313      	str	r3, [r2, #48]	; 0x30
 8007f4a:	4b24      	ldr	r3, [pc, #144]	; (8007fdc <HAL_I2C_MspInit+0x1e8>)
 8007f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f4e:	f003 0320 	and.w	r3, r3, #32
 8007f52:	613b      	str	r3, [r7, #16]
 8007f54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f56:	2300      	movs	r3, #0
 8007f58:	60fb      	str	r3, [r7, #12]
 8007f5a:	4b20      	ldr	r3, [pc, #128]	; (8007fdc <HAL_I2C_MspInit+0x1e8>)
 8007f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f5e:	4a1f      	ldr	r2, [pc, #124]	; (8007fdc <HAL_I2C_MspInit+0x1e8>)
 8007f60:	f043 0302 	orr.w	r3, r3, #2
 8007f64:	6313      	str	r3, [r2, #48]	; 0x30
 8007f66:	4b1d      	ldr	r3, [pc, #116]	; (8007fdc <HAL_I2C_MspInit+0x1e8>)
 8007f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f6a:	f003 0302 	and.w	r3, r3, #2
 8007f6e:	60fb      	str	r3, [r7, #12]
 8007f70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007f72:	2301      	movs	r3, #1
 8007f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007f76:	2312      	movs	r3, #18
 8007f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f7e:	2303      	movs	r3, #3
 8007f80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007f82:	2304      	movs	r3, #4
 8007f84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007f86:	f107 031c 	add.w	r3, r7, #28
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	481a      	ldr	r0, [pc, #104]	; (8007ff8 <HAL_I2C_MspInit+0x204>)
 8007f8e:	f001 f955 	bl	800923c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007f92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007f98:	2312      	movs	r3, #18
 8007f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007fa4:	2304      	movs	r3, #4
 8007fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007fa8:	f107 031c 	add.w	r3, r7, #28
 8007fac:	4619      	mov	r1, r3
 8007fae:	480c      	ldr	r0, [pc, #48]	; (8007fe0 <HAL_I2C_MspInit+0x1ec>)
 8007fb0:	f001 f944 	bl	800923c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	60bb      	str	r3, [r7, #8]
 8007fb8:	4b08      	ldr	r3, [pc, #32]	; (8007fdc <HAL_I2C_MspInit+0x1e8>)
 8007fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fbc:	4a07      	ldr	r2, [pc, #28]	; (8007fdc <HAL_I2C_MspInit+0x1e8>)
 8007fbe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007fc2:	6413      	str	r3, [r2, #64]	; 0x40
 8007fc4:	4b05      	ldr	r3, [pc, #20]	; (8007fdc <HAL_I2C_MspInit+0x1e8>)
 8007fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fcc:	60bb      	str	r3, [r7, #8]
 8007fce:	68bb      	ldr	r3, [r7, #8]
}
 8007fd0:	bf00      	nop
 8007fd2:	3730      	adds	r7, #48	; 0x30
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	40005400 	.word	0x40005400
 8007fdc:	40023800 	.word	0x40023800
 8007fe0:	40020400 	.word	0x40020400
 8007fe4:	200002ec 	.word	0x200002ec
 8007fe8:	40026010 	.word	0x40026010
 8007fec:	2000034c 	.word	0x2000034c
 8007ff0:	400260a0 	.word	0x400260a0
 8007ff4:	40005800 	.word	0x40005800
 8007ff8:	40021400 	.word	0x40021400

08007ffc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b086      	sub	sp, #24
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a22      	ldr	r2, [pc, #136]	; (8008094 <HAL_TIM_Base_MspInit+0x98>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d10e      	bne.n	800802c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800800e:	2300      	movs	r3, #0
 8008010:	617b      	str	r3, [r7, #20]
 8008012:	4b21      	ldr	r3, [pc, #132]	; (8008098 <HAL_TIM_Base_MspInit+0x9c>)
 8008014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008016:	4a20      	ldr	r2, [pc, #128]	; (8008098 <HAL_TIM_Base_MspInit+0x9c>)
 8008018:	f043 0301 	orr.w	r3, r3, #1
 800801c:	6453      	str	r3, [r2, #68]	; 0x44
 800801e:	4b1e      	ldr	r3, [pc, #120]	; (8008098 <HAL_TIM_Base_MspInit+0x9c>)
 8008020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008022:	f003 0301 	and.w	r3, r3, #1
 8008026:	617b      	str	r3, [r7, #20]
 8008028:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800802a:	e02e      	b.n	800808a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a1a      	ldr	r2, [pc, #104]	; (800809c <HAL_TIM_Base_MspInit+0xa0>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d10e      	bne.n	8008054 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008036:	2300      	movs	r3, #0
 8008038:	613b      	str	r3, [r7, #16]
 800803a:	4b17      	ldr	r3, [pc, #92]	; (8008098 <HAL_TIM_Base_MspInit+0x9c>)
 800803c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800803e:	4a16      	ldr	r2, [pc, #88]	; (8008098 <HAL_TIM_Base_MspInit+0x9c>)
 8008040:	f043 0302 	orr.w	r3, r3, #2
 8008044:	6413      	str	r3, [r2, #64]	; 0x40
 8008046:	4b14      	ldr	r3, [pc, #80]	; (8008098 <HAL_TIM_Base_MspInit+0x9c>)
 8008048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804a:	f003 0302 	and.w	r3, r3, #2
 800804e:	613b      	str	r3, [r7, #16]
 8008050:	693b      	ldr	r3, [r7, #16]
}
 8008052:	e01a      	b.n	800808a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM13)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a11      	ldr	r2, [pc, #68]	; (80080a0 <HAL_TIM_Base_MspInit+0xa4>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d115      	bne.n	800808a <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800805e:	2300      	movs	r3, #0
 8008060:	60fb      	str	r3, [r7, #12]
 8008062:	4b0d      	ldr	r3, [pc, #52]	; (8008098 <HAL_TIM_Base_MspInit+0x9c>)
 8008064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008066:	4a0c      	ldr	r2, [pc, #48]	; (8008098 <HAL_TIM_Base_MspInit+0x9c>)
 8008068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800806c:	6413      	str	r3, [r2, #64]	; 0x40
 800806e:	4b0a      	ldr	r3, [pc, #40]	; (8008098 <HAL_TIM_Base_MspInit+0x9c>)
 8008070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008076:	60fb      	str	r3, [r7, #12]
 8008078:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 800807a:	2200      	movs	r2, #0
 800807c:	2105      	movs	r1, #5
 800807e:	202c      	movs	r0, #44	; 0x2c
 8008080:	f000 fcb0 	bl	80089e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8008084:	202c      	movs	r0, #44	; 0x2c
 8008086:	f000 fcc9 	bl	8008a1c <HAL_NVIC_EnableIRQ>
}
 800808a:	bf00      	nop
 800808c:	3718      	adds	r7, #24
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	40010000 	.word	0x40010000
 8008098:	40023800 	.word	0x40023800
 800809c:	40000400 	.word	0x40000400
 80080a0:	40001c00 	.word	0x40001c00

080080a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b08c      	sub	sp, #48	; 0x30
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080ac:	f107 031c 	add.w	r3, r7, #28
 80080b0:	2200      	movs	r2, #0
 80080b2:	601a      	str	r2, [r3, #0]
 80080b4:	605a      	str	r2, [r3, #4]
 80080b6:	609a      	str	r2, [r3, #8]
 80080b8:	60da      	str	r2, [r3, #12]
 80080ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a43      	ldr	r2, [pc, #268]	; (80081d0 <HAL_TIM_MspPostInit+0x12c>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d11f      	bne.n	8008106 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80080c6:	2300      	movs	r3, #0
 80080c8:	61bb      	str	r3, [r7, #24]
 80080ca:	4b42      	ldr	r3, [pc, #264]	; (80081d4 <HAL_TIM_MspPostInit+0x130>)
 80080cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ce:	4a41      	ldr	r2, [pc, #260]	; (80081d4 <HAL_TIM_MspPostInit+0x130>)
 80080d0:	f043 0310 	orr.w	r3, r3, #16
 80080d4:	6313      	str	r3, [r2, #48]	; 0x30
 80080d6:	4b3f      	ldr	r3, [pc, #252]	; (80081d4 <HAL_TIM_MspPostInit+0x130>)
 80080d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080da:	f003 0310 	and.w	r3, r3, #16
 80080de:	61bb      	str	r3, [r7, #24]
 80080e0:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80080e2:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80080e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080e8:	2302      	movs	r3, #2
 80080ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080ec:	2300      	movs	r3, #0
 80080ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080f0:	2300      	movs	r3, #0
 80080f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80080f4:	2301      	movs	r3, #1
 80080f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80080f8:	f107 031c 	add.w	r3, r7, #28
 80080fc:	4619      	mov	r1, r3
 80080fe:	4836      	ldr	r0, [pc, #216]	; (80081d8 <HAL_TIM_MspPostInit+0x134>)
 8008100:	f001 f89c 	bl	800923c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8008104:	e05f      	b.n	80081c6 <HAL_TIM_MspPostInit+0x122>
  else if(htim->Instance==TIM3)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a34      	ldr	r2, [pc, #208]	; (80081dc <HAL_TIM_MspPostInit+0x138>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d15a      	bne.n	80081c6 <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008110:	2300      	movs	r3, #0
 8008112:	617b      	str	r3, [r7, #20]
 8008114:	4b2f      	ldr	r3, [pc, #188]	; (80081d4 <HAL_TIM_MspPostInit+0x130>)
 8008116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008118:	4a2e      	ldr	r2, [pc, #184]	; (80081d4 <HAL_TIM_MspPostInit+0x130>)
 800811a:	f043 0301 	orr.w	r3, r3, #1
 800811e:	6313      	str	r3, [r2, #48]	; 0x30
 8008120:	4b2c      	ldr	r3, [pc, #176]	; (80081d4 <HAL_TIM_MspPostInit+0x130>)
 8008122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008124:	f003 0301 	and.w	r3, r3, #1
 8008128:	617b      	str	r3, [r7, #20]
 800812a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800812c:	2300      	movs	r3, #0
 800812e:	613b      	str	r3, [r7, #16]
 8008130:	4b28      	ldr	r3, [pc, #160]	; (80081d4 <HAL_TIM_MspPostInit+0x130>)
 8008132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008134:	4a27      	ldr	r2, [pc, #156]	; (80081d4 <HAL_TIM_MspPostInit+0x130>)
 8008136:	f043 0302 	orr.w	r3, r3, #2
 800813a:	6313      	str	r3, [r2, #48]	; 0x30
 800813c:	4b25      	ldr	r3, [pc, #148]	; (80081d4 <HAL_TIM_MspPostInit+0x130>)
 800813e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008140:	f003 0302 	and.w	r3, r3, #2
 8008144:	613b      	str	r3, [r7, #16]
 8008146:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008148:	2300      	movs	r3, #0
 800814a:	60fb      	str	r3, [r7, #12]
 800814c:	4b21      	ldr	r3, [pc, #132]	; (80081d4 <HAL_TIM_MspPostInit+0x130>)
 800814e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008150:	4a20      	ldr	r2, [pc, #128]	; (80081d4 <HAL_TIM_MspPostInit+0x130>)
 8008152:	f043 0304 	orr.w	r3, r3, #4
 8008156:	6313      	str	r3, [r2, #48]	; 0x30
 8008158:	4b1e      	ldr	r3, [pc, #120]	; (80081d4 <HAL_TIM_MspPostInit+0x130>)
 800815a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800815c:	f003 0304 	and.w	r3, r3, #4
 8008160:	60fb      	str	r3, [r7, #12]
 8008162:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008164:	23c0      	movs	r3, #192	; 0xc0
 8008166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008168:	2302      	movs	r3, #2
 800816a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800816c:	2300      	movs	r3, #0
 800816e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008170:	2300      	movs	r3, #0
 8008172:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008174:	2302      	movs	r3, #2
 8008176:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008178:	f107 031c 	add.w	r3, r7, #28
 800817c:	4619      	mov	r1, r3
 800817e:	4818      	ldr	r0, [pc, #96]	; (80081e0 <HAL_TIM_MspPostInit+0x13c>)
 8008180:	f001 f85c 	bl	800923c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8008184:	2302      	movs	r3, #2
 8008186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008188:	2302      	movs	r3, #2
 800818a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800818c:	2300      	movs	r3, #0
 800818e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008190:	2300      	movs	r3, #0
 8008192:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008194:	2302      	movs	r3, #2
 8008196:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008198:	f107 031c 	add.w	r3, r7, #28
 800819c:	4619      	mov	r1, r3
 800819e:	4811      	ldr	r0, [pc, #68]	; (80081e4 <HAL_TIM_MspPostInit+0x140>)
 80081a0:	f001 f84c 	bl	800923c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80081a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081aa:	2302      	movs	r3, #2
 80081ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081ae:	2300      	movs	r3, #0
 80081b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081b2:	2300      	movs	r3, #0
 80081b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80081b6:	2302      	movs	r3, #2
 80081b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80081ba:	f107 031c 	add.w	r3, r7, #28
 80081be:	4619      	mov	r1, r3
 80081c0:	4809      	ldr	r0, [pc, #36]	; (80081e8 <HAL_TIM_MspPostInit+0x144>)
 80081c2:	f001 f83b 	bl	800923c <HAL_GPIO_Init>
}
 80081c6:	bf00      	nop
 80081c8:	3730      	adds	r7, #48	; 0x30
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	40010000 	.word	0x40010000
 80081d4:	40023800 	.word	0x40023800
 80081d8:	40021000 	.word	0x40021000
 80081dc:	40000400 	.word	0x40000400
 80081e0:	40020000 	.word	0x40020000
 80081e4:	40020400 	.word	0x40020400
 80081e8:	40020800 	.word	0x40020800

080081ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b08a      	sub	sp, #40	; 0x28
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081f4:	f107 0314 	add.w	r3, r7, #20
 80081f8:	2200      	movs	r2, #0
 80081fa:	601a      	str	r2, [r3, #0]
 80081fc:	605a      	str	r2, [r3, #4]
 80081fe:	609a      	str	r2, [r3, #8]
 8008200:	60da      	str	r2, [r3, #12]
 8008202:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a4d      	ldr	r2, [pc, #308]	; (8008340 <HAL_UART_MspInit+0x154>)
 800820a:	4293      	cmp	r3, r2
 800820c:	f040 8093 	bne.w	8008336 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8008210:	2300      	movs	r3, #0
 8008212:	613b      	str	r3, [r7, #16]
 8008214:	4b4b      	ldr	r3, [pc, #300]	; (8008344 <HAL_UART_MspInit+0x158>)
 8008216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008218:	4a4a      	ldr	r2, [pc, #296]	; (8008344 <HAL_UART_MspInit+0x158>)
 800821a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800821e:	6413      	str	r3, [r2, #64]	; 0x40
 8008220:	4b48      	ldr	r3, [pc, #288]	; (8008344 <HAL_UART_MspInit+0x158>)
 8008222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008224:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008228:	613b      	str	r3, [r7, #16]
 800822a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800822c:	2300      	movs	r3, #0
 800822e:	60fb      	str	r3, [r7, #12]
 8008230:	4b44      	ldr	r3, [pc, #272]	; (8008344 <HAL_UART_MspInit+0x158>)
 8008232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008234:	4a43      	ldr	r2, [pc, #268]	; (8008344 <HAL_UART_MspInit+0x158>)
 8008236:	f043 0308 	orr.w	r3, r3, #8
 800823a:	6313      	str	r3, [r2, #48]	; 0x30
 800823c:	4b41      	ldr	r3, [pc, #260]	; (8008344 <HAL_UART_MspInit+0x158>)
 800823e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008240:	f003 0308 	and.w	r3, r3, #8
 8008244:	60fb      	str	r3, [r7, #12]
 8008246:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8008248:	f44f 7340 	mov.w	r3, #768	; 0x300
 800824c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800824e:	2302      	movs	r3, #2
 8008250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008252:	2300      	movs	r3, #0
 8008254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008256:	2303      	movs	r3, #3
 8008258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800825a:	2307      	movs	r3, #7
 800825c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800825e:	f107 0314 	add.w	r3, r7, #20
 8008262:	4619      	mov	r1, r3
 8008264:	4838      	ldr	r0, [pc, #224]	; (8008348 <HAL_UART_MspInit+0x15c>)
 8008266:	f000 ffe9 	bl	800923c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800826a:	4b38      	ldr	r3, [pc, #224]	; (800834c <HAL_UART_MspInit+0x160>)
 800826c:	4a38      	ldr	r2, [pc, #224]	; (8008350 <HAL_UART_MspInit+0x164>)
 800826e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8008270:	4b36      	ldr	r3, [pc, #216]	; (800834c <HAL_UART_MspInit+0x160>)
 8008272:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008276:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008278:	4b34      	ldr	r3, [pc, #208]	; (800834c <HAL_UART_MspInit+0x160>)
 800827a:	2200      	movs	r2, #0
 800827c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800827e:	4b33      	ldr	r3, [pc, #204]	; (800834c <HAL_UART_MspInit+0x160>)
 8008280:	2200      	movs	r2, #0
 8008282:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008284:	4b31      	ldr	r3, [pc, #196]	; (800834c <HAL_UART_MspInit+0x160>)
 8008286:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800828a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800828c:	4b2f      	ldr	r3, [pc, #188]	; (800834c <HAL_UART_MspInit+0x160>)
 800828e:	2200      	movs	r2, #0
 8008290:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008292:	4b2e      	ldr	r3, [pc, #184]	; (800834c <HAL_UART_MspInit+0x160>)
 8008294:	2200      	movs	r2, #0
 8008296:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8008298:	4b2c      	ldr	r3, [pc, #176]	; (800834c <HAL_UART_MspInit+0x160>)
 800829a:	2200      	movs	r2, #0
 800829c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800829e:	4b2b      	ldr	r3, [pc, #172]	; (800834c <HAL_UART_MspInit+0x160>)
 80082a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80082a4:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80082a6:	4b29      	ldr	r3, [pc, #164]	; (800834c <HAL_UART_MspInit+0x160>)
 80082a8:	2200      	movs	r2, #0
 80082aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80082ac:	4827      	ldr	r0, [pc, #156]	; (800834c <HAL_UART_MspInit+0x160>)
 80082ae:	f000 fbc3 	bl	8008a38 <HAL_DMA_Init>
 80082b2:	4603      	mov	r3, r0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d001      	beq.n	80082bc <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80082b8:	f7fb fc74 	bl	8003ba4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	4a23      	ldr	r2, [pc, #140]	; (800834c <HAL_UART_MspInit+0x160>)
 80082c0:	63da      	str	r2, [r3, #60]	; 0x3c
 80082c2:	4a22      	ldr	r2, [pc, #136]	; (800834c <HAL_UART_MspInit+0x160>)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80082c8:	4b22      	ldr	r3, [pc, #136]	; (8008354 <HAL_UART_MspInit+0x168>)
 80082ca:	4a23      	ldr	r2, [pc, #140]	; (8008358 <HAL_UART_MspInit+0x16c>)
 80082cc:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80082ce:	4b21      	ldr	r3, [pc, #132]	; (8008354 <HAL_UART_MspInit+0x168>)
 80082d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80082d4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80082d6:	4b1f      	ldr	r3, [pc, #124]	; (8008354 <HAL_UART_MspInit+0x168>)
 80082d8:	2240      	movs	r2, #64	; 0x40
 80082da:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80082dc:	4b1d      	ldr	r3, [pc, #116]	; (8008354 <HAL_UART_MspInit+0x168>)
 80082de:	2200      	movs	r2, #0
 80082e0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80082e2:	4b1c      	ldr	r3, [pc, #112]	; (8008354 <HAL_UART_MspInit+0x168>)
 80082e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80082e8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80082ea:	4b1a      	ldr	r3, [pc, #104]	; (8008354 <HAL_UART_MspInit+0x168>)
 80082ec:	2200      	movs	r2, #0
 80082ee:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80082f0:	4b18      	ldr	r3, [pc, #96]	; (8008354 <HAL_UART_MspInit+0x168>)
 80082f2:	2200      	movs	r2, #0
 80082f4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80082f6:	4b17      	ldr	r3, [pc, #92]	; (8008354 <HAL_UART_MspInit+0x168>)
 80082f8:	2200      	movs	r2, #0
 80082fa:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80082fc:	4b15      	ldr	r3, [pc, #84]	; (8008354 <HAL_UART_MspInit+0x168>)
 80082fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008302:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008304:	4b13      	ldr	r3, [pc, #76]	; (8008354 <HAL_UART_MspInit+0x168>)
 8008306:	2200      	movs	r2, #0
 8008308:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800830a:	4812      	ldr	r0, [pc, #72]	; (8008354 <HAL_UART_MspInit+0x168>)
 800830c:	f000 fb94 	bl	8008a38 <HAL_DMA_Init>
 8008310:	4603      	mov	r3, r0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d001      	beq.n	800831a <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8008316:	f7fb fc45 	bl	8003ba4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a0d      	ldr	r2, [pc, #52]	; (8008354 <HAL_UART_MspInit+0x168>)
 800831e:	639a      	str	r2, [r3, #56]	; 0x38
 8008320:	4a0c      	ldr	r2, [pc, #48]	; (8008354 <HAL_UART_MspInit+0x168>)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8008326:	2200      	movs	r2, #0
 8008328:	2105      	movs	r1, #5
 800832a:	2027      	movs	r0, #39	; 0x27
 800832c:	f000 fb5a 	bl	80089e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8008330:	2027      	movs	r0, #39	; 0x27
 8008332:	f000 fb73 	bl	8008a1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8008336:	bf00      	nop
 8008338:	3728      	adds	r7, #40	; 0x28
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	40004800 	.word	0x40004800
 8008344:	40023800 	.word	0x40023800
 8008348:	40020c00 	.word	0x40020c00
 800834c:	200004cc 	.word	0x200004cc
 8008350:	40026028 	.word	0x40026028
 8008354:	2000052c 	.word	0x2000052c
 8008358:	40026058 	.word	0x40026058

0800835c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b08e      	sub	sp, #56	; 0x38
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8008364:	2300      	movs	r3, #0
 8008366:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8008368:	2300      	movs	r3, #0
 800836a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 800836c:	2300      	movs	r3, #0
 800836e:	60fb      	str	r3, [r7, #12]
 8008370:	4b33      	ldr	r3, [pc, #204]	; (8008440 <HAL_InitTick+0xe4>)
 8008372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008374:	4a32      	ldr	r2, [pc, #200]	; (8008440 <HAL_InitTick+0xe4>)
 8008376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800837a:	6413      	str	r3, [r2, #64]	; 0x40
 800837c:	4b30      	ldr	r3, [pc, #192]	; (8008440 <HAL_InitTick+0xe4>)
 800837e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008384:	60fb      	str	r3, [r7, #12]
 8008386:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008388:	f107 0210 	add.w	r2, r7, #16
 800838c:	f107 0314 	add.w	r3, r7, #20
 8008390:	4611      	mov	r1, r2
 8008392:	4618      	mov	r0, r3
 8008394:	f002 fe30 	bl	800aff8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8008398:	6a3b      	ldr	r3, [r7, #32]
 800839a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800839c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d103      	bne.n	80083aa <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80083a2:	f002 fe01 	bl	800afa8 <HAL_RCC_GetPCLK1Freq>
 80083a6:	6378      	str	r0, [r7, #52]	; 0x34
 80083a8:	e004      	b.n	80083b4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80083aa:	f002 fdfd 	bl	800afa8 <HAL_RCC_GetPCLK1Freq>
 80083ae:	4603      	mov	r3, r0
 80083b0:	005b      	lsls	r3, r3, #1
 80083b2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80083b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083b6:	4a23      	ldr	r2, [pc, #140]	; (8008444 <HAL_InitTick+0xe8>)
 80083b8:	fba2 2303 	umull	r2, r3, r2, r3
 80083bc:	0c9b      	lsrs	r3, r3, #18
 80083be:	3b01      	subs	r3, #1
 80083c0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80083c2:	4b21      	ldr	r3, [pc, #132]	; (8008448 <HAL_InitTick+0xec>)
 80083c4:	4a21      	ldr	r2, [pc, #132]	; (800844c <HAL_InitTick+0xf0>)
 80083c6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80083c8:	4b1f      	ldr	r3, [pc, #124]	; (8008448 <HAL_InitTick+0xec>)
 80083ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80083ce:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80083d0:	4a1d      	ldr	r2, [pc, #116]	; (8008448 <HAL_InitTick+0xec>)
 80083d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d4:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80083d6:	4b1c      	ldr	r3, [pc, #112]	; (8008448 <HAL_InitTick+0xec>)
 80083d8:	2200      	movs	r2, #0
 80083da:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80083dc:	4b1a      	ldr	r3, [pc, #104]	; (8008448 <HAL_InitTick+0xec>)
 80083de:	2200      	movs	r2, #0
 80083e0:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80083e2:	4b19      	ldr	r3, [pc, #100]	; (8008448 <HAL_InitTick+0xec>)
 80083e4:	2200      	movs	r2, #0
 80083e6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 80083e8:	4817      	ldr	r0, [pc, #92]	; (8008448 <HAL_InitTick+0xec>)
 80083ea:	f002 fe37 	bl	800b05c <HAL_TIM_Base_Init>
 80083ee:	4603      	mov	r3, r0
 80083f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80083f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d11b      	bne.n	8008434 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 80083fc:	4812      	ldr	r0, [pc, #72]	; (8008448 <HAL_InitTick+0xec>)
 80083fe:	f002 fe7d 	bl	800b0fc <HAL_TIM_Base_Start_IT>
 8008402:	4603      	mov	r3, r0
 8008404:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8008408:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800840c:	2b00      	cmp	r3, #0
 800840e:	d111      	bne.n	8008434 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8008410:	202d      	movs	r0, #45	; 0x2d
 8008412:	f000 fb03 	bl	8008a1c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2b0f      	cmp	r3, #15
 800841a:	d808      	bhi.n	800842e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 800841c:	2200      	movs	r2, #0
 800841e:	6879      	ldr	r1, [r7, #4]
 8008420:	202d      	movs	r0, #45	; 0x2d
 8008422:	f000 fadf 	bl	80089e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008426:	4a0a      	ldr	r2, [pc, #40]	; (8008450 <HAL_InitTick+0xf4>)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6013      	str	r3, [r2, #0]
 800842c:	e002      	b.n	8008434 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800842e:	2301      	movs	r3, #1
 8008430:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8008434:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8008438:	4618      	mov	r0, r3
 800843a:	3738      	adds	r7, #56	; 0x38
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}
 8008440:	40023800 	.word	0x40023800
 8008444:	431bde83 	.word	0x431bde83
 8008448:	200035dc 	.word	0x200035dc
 800844c:	40002000 	.word	0x40002000
 8008450:	20000010 	.word	0x20000010

08008454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008454:	b480      	push	{r7}
 8008456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008458:	e7fe      	b.n	8008458 <NMI_Handler+0x4>

0800845a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800845a:	b480      	push	{r7}
 800845c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800845e:	e7fe      	b.n	800845e <HardFault_Handler+0x4>

08008460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008460:	b480      	push	{r7}
 8008462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008464:	e7fe      	b.n	8008464 <MemManage_Handler+0x4>

08008466 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008466:	b480      	push	{r7}
 8008468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800846a:	e7fe      	b.n	800846a <BusFault_Handler+0x4>

0800846c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800846c:	b480      	push	{r7}
 800846e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008470:	e7fe      	b.n	8008470 <UsageFault_Handler+0x4>

08008472 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008472:	b480      	push	{r7}
 8008474:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008476:	bf00      	nop
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_EXT3_B_Pin);
 8008484:	2008      	movs	r0, #8
 8008486:	f001 f8b7 	bl	80095f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800848a:	bf00      	nop
 800848c:	bd80      	pop	{r7, pc}
	...

08008490 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8008494:	4802      	ldr	r0, [pc, #8]	; (80084a0 <DMA1_Stream0_IRQHandler+0x10>)
 8008496:	f000 fc67 	bl	8008d68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800849a:	bf00      	nop
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	200002ec 	.word	0x200002ec

080084a4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80084a8:	4802      	ldr	r0, [pc, #8]	; (80084b4 <DMA1_Stream1_IRQHandler+0x10>)
 80084aa:	f000 fc5d 	bl	8008d68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80084ae:	bf00      	nop
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop
 80084b4:	200004cc 	.word	0x200004cc

080084b8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80084bc:	4802      	ldr	r0, [pc, #8]	; (80084c8 <DMA1_Stream3_IRQHandler+0x10>)
 80084be:	f000 fc53 	bl	8008d68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80084c2:	bf00      	nop
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	2000052c 	.word	0x2000052c

080084cc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80084d0:	4802      	ldr	r0, [pc, #8]	; (80084dc <DMA1_Stream6_IRQHandler+0x10>)
 80084d2:	f000 fc49 	bl	8008d68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80084d6:	bf00      	nop
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	2000034c 	.word	0x2000034c

080084e0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80084e4:	4802      	ldr	r0, [pc, #8]	; (80084f0 <USART3_IRQHandler+0x10>)
 80084e6:	f003 ff21 	bl	800c32c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80084ea:	bf00      	nop
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	20000484 	.word	0x20000484

080084f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_EXT1_A_Pin);
 80084f8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80084fc:	f001 f87c 	bl	80095f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_EXT2_A_Pin);
 8008500:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008504:	f001 f878 	bl	80095f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_EXT3_A_Pin);
 8008508:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800850c:	f001 f874 	bl	80095f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_EXT1_B_Pin);
 8008510:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8008514:	f001 f870 	bl	80095f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_EXT2_B_Pin);
 8008518:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800851c:	f001 f86c 	bl	80095f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008520:	bf00      	nop
 8008522:	bd80      	pop	{r7, pc}

08008524 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8008528:	4802      	ldr	r0, [pc, #8]	; (8008534 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800852a:	f002 ff79 	bl	800b420 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800852e:	bf00      	nop
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	2000043c 	.word	0x2000043c

08008538 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800853c:	4802      	ldr	r0, [pc, #8]	; (8008548 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800853e:	f002 ff6f 	bl	800b420 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8008542:	bf00      	nop
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	200035dc 	.word	0x200035dc

0800854c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800854c:	b480      	push	{r7}
 800854e:	af00      	add	r7, sp, #0
  return 1;
 8008550:	2301      	movs	r3, #1
}
 8008552:	4618      	mov	r0, r3
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <_kill>:

int _kill(int pid, int sig)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b082      	sub	sp, #8
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008566:	f00a fc6d 	bl	8012e44 <__errno>
 800856a:	4603      	mov	r3, r0
 800856c:	2216      	movs	r2, #22
 800856e:	601a      	str	r2, [r3, #0]
  return -1;
 8008570:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008574:	4618      	mov	r0, r3
 8008576:	3708      	adds	r7, #8
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <_exit>:

void _exit (int status)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008584:	f04f 31ff 	mov.w	r1, #4294967295
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f7ff ffe7 	bl	800855c <_kill>
  while (1) {}    /* Make sure we hang here */
 800858e:	e7fe      	b.n	800858e <_exit+0x12>

08008590 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b086      	sub	sp, #24
 8008594:	af00      	add	r7, sp, #0
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	60b9      	str	r1, [r7, #8]
 800859a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800859c:	2300      	movs	r3, #0
 800859e:	617b      	str	r3, [r7, #20]
 80085a0:	e00a      	b.n	80085b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80085a2:	f3af 8000 	nop.w
 80085a6:	4601      	mov	r1, r0
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	1c5a      	adds	r2, r3, #1
 80085ac:	60ba      	str	r2, [r7, #8]
 80085ae:	b2ca      	uxtb	r2, r1
 80085b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	3301      	adds	r3, #1
 80085b6:	617b      	str	r3, [r7, #20]
 80085b8:	697a      	ldr	r2, [r7, #20]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	429a      	cmp	r2, r3
 80085be:	dbf0      	blt.n	80085a2 <_read+0x12>
  }

  return len;
 80085c0:	687b      	ldr	r3, [r7, #4]
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3718      	adds	r7, #24
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	b086      	sub	sp, #24
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	60f8      	str	r0, [r7, #12]
 80085d2:	60b9      	str	r1, [r7, #8]
 80085d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80085d6:	2300      	movs	r3, #0
 80085d8:	617b      	str	r3, [r7, #20]
 80085da:	e009      	b.n	80085f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	1c5a      	adds	r2, r3, #1
 80085e0:	60ba      	str	r2, [r7, #8]
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	4618      	mov	r0, r3
 80085e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	3301      	adds	r3, #1
 80085ee:	617b      	str	r3, [r7, #20]
 80085f0:	697a      	ldr	r2, [r7, #20]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	dbf1      	blt.n	80085dc <_write+0x12>
  }
  return len;
 80085f8:	687b      	ldr	r3, [r7, #4]
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3718      	adds	r7, #24
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}

08008602 <_close>:

int _close(int file)
{
 8008602:	b480      	push	{r7}
 8008604:	b083      	sub	sp, #12
 8008606:	af00      	add	r7, sp, #0
 8008608:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800860a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800860e:	4618      	mov	r0, r3
 8008610:	370c      	adds	r7, #12
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr

0800861a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800861a:	b480      	push	{r7}
 800861c:	b083      	sub	sp, #12
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
 8008622:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800862a:	605a      	str	r2, [r3, #4]
  return 0;
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	370c      	adds	r7, #12
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr

0800863a <_isatty>:

int _isatty(int file)
{
 800863a:	b480      	push	{r7}
 800863c:	b083      	sub	sp, #12
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008642:	2301      	movs	r3, #1
}
 8008644:	4618      	mov	r0, r3
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008650:	b480      	push	{r7}
 8008652:	b085      	sub	sp, #20
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3714      	adds	r7, #20
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr
	...

0800866c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b086      	sub	sp, #24
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008674:	4a14      	ldr	r2, [pc, #80]	; (80086c8 <_sbrk+0x5c>)
 8008676:	4b15      	ldr	r3, [pc, #84]	; (80086cc <_sbrk+0x60>)
 8008678:	1ad3      	subs	r3, r2, r3
 800867a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008680:	4b13      	ldr	r3, [pc, #76]	; (80086d0 <_sbrk+0x64>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d102      	bne.n	800868e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008688:	4b11      	ldr	r3, [pc, #68]	; (80086d0 <_sbrk+0x64>)
 800868a:	4a12      	ldr	r2, [pc, #72]	; (80086d4 <_sbrk+0x68>)
 800868c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800868e:	4b10      	ldr	r3, [pc, #64]	; (80086d0 <_sbrk+0x64>)
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4413      	add	r3, r2
 8008696:	693a      	ldr	r2, [r7, #16]
 8008698:	429a      	cmp	r2, r3
 800869a:	d207      	bcs.n	80086ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800869c:	f00a fbd2 	bl	8012e44 <__errno>
 80086a0:	4603      	mov	r3, r0
 80086a2:	220c      	movs	r2, #12
 80086a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80086a6:	f04f 33ff 	mov.w	r3, #4294967295
 80086aa:	e009      	b.n	80086c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80086ac:	4b08      	ldr	r3, [pc, #32]	; (80086d0 <_sbrk+0x64>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80086b2:	4b07      	ldr	r3, [pc, #28]	; (80086d0 <_sbrk+0x64>)
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	4413      	add	r3, r2
 80086ba:	4a05      	ldr	r2, [pc, #20]	; (80086d0 <_sbrk+0x64>)
 80086bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80086be:	68fb      	ldr	r3, [r7, #12]
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3718      	adds	r7, #24
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	20030000 	.word	0x20030000
 80086cc:	00000400 	.word	0x00000400
 80086d0:	20003624 	.word	0x20003624
 80086d4:	20008160 	.word	0x20008160

080086d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80086d8:	b480      	push	{r7}
 80086da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80086dc:	4b06      	ldr	r3, [pc, #24]	; (80086f8 <SystemInit+0x20>)
 80086de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086e2:	4a05      	ldr	r2, [pc, #20]	; (80086f8 <SystemInit+0x20>)
 80086e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80086e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80086ec:	bf00      	nop
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop
 80086f8:	e000ed00 	.word	0xe000ed00

080086fc <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b085      	sub	sp, #20
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	0a5a      	lsrs	r2, r3, #9
 800870c:	490f      	ldr	r1, [pc, #60]	; (800874c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800870e:	fba1 1202 	umull	r1, r2, r1, r2
 8008712:	09d2      	lsrs	r2, r2, #7
 8008714:	490e      	ldr	r1, [pc, #56]	; (8008750 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8008716:	fb01 f202 	mul.w	r2, r1, r2
 800871a:	1a9b      	subs	r3, r3, r2
 800871c:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	0a5b      	lsrs	r3, r3, #9
 8008724:	4a09      	ldr	r2, [pc, #36]	; (800874c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8008726:	fba2 2303 	umull	r2, r3, r2, r3
 800872a:	09db      	lsrs	r3, r3, #7
 800872c:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	441a      	add	r2, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	601a      	str	r2, [r3, #0]
}
 8008740:	bf00      	nop
 8008742:	3714      	adds	r7, #20
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr
 800874c:	00044b83 	.word	0x00044b83
 8008750:	3b9aca00 	.word	0x3b9aca00

08008754 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8008754:	f8df d034 	ldr.w	sp, [pc, #52]	; 800878c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8008758:	f7ff ffbe 	bl	80086d8 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800875c:	480c      	ldr	r0, [pc, #48]	; (8008790 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800875e:	490d      	ldr	r1, [pc, #52]	; (8008794 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008760:	4a0d      	ldr	r2, [pc, #52]	; (8008798 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008764:	e002      	b.n	800876c <LoopCopyDataInit>

08008766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800876a:	3304      	adds	r3, #4

0800876c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800876c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800876e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008770:	d3f9      	bcc.n	8008766 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008772:	4a0a      	ldr	r2, [pc, #40]	; (800879c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008774:	4c0a      	ldr	r4, [pc, #40]	; (80087a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008778:	e001      	b.n	800877e <LoopFillZerobss>

0800877a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800877a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800877c:	3204      	adds	r2, #4

0800877e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800877e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008780:	d3fb      	bcc.n	800877a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8008782:	f00a fb65 	bl	8012e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008786:	f7fa f895 	bl	80028b4 <main>
  bx  lr    
 800878a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800878c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8008790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008794:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8008798:	08015be8 	.word	0x08015be8
  ldr r2, =_sbss
 800879c:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80087a0:	20008160 	.word	0x20008160

080087a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80087a4:	e7fe      	b.n	80087a4 <ADC_IRQHandler>
	...

080087a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80087ac:	4b0e      	ldr	r3, [pc, #56]	; (80087e8 <HAL_Init+0x40>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a0d      	ldr	r2, [pc, #52]	; (80087e8 <HAL_Init+0x40>)
 80087b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80087b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80087b8:	4b0b      	ldr	r3, [pc, #44]	; (80087e8 <HAL_Init+0x40>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a0a      	ldr	r2, [pc, #40]	; (80087e8 <HAL_Init+0x40>)
 80087be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80087c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80087c4:	4b08      	ldr	r3, [pc, #32]	; (80087e8 <HAL_Init+0x40>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a07      	ldr	r2, [pc, #28]	; (80087e8 <HAL_Init+0x40>)
 80087ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80087d0:	2003      	movs	r0, #3
 80087d2:	f000 f8fc 	bl	80089ce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80087d6:	200f      	movs	r0, #15
 80087d8:	f7ff fdc0 	bl	800835c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80087dc:	f7ff fade 	bl	8007d9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	40023c00 	.word	0x40023c00

080087ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80087ec:	b480      	push	{r7}
 80087ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80087f0:	4b06      	ldr	r3, [pc, #24]	; (800880c <HAL_IncTick+0x20>)
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	461a      	mov	r2, r3
 80087f6:	4b06      	ldr	r3, [pc, #24]	; (8008810 <HAL_IncTick+0x24>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4413      	add	r3, r2
 80087fc:	4a04      	ldr	r2, [pc, #16]	; (8008810 <HAL_IncTick+0x24>)
 80087fe:	6013      	str	r3, [r2, #0]
}
 8008800:	bf00      	nop
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr
 800880a:	bf00      	nop
 800880c:	20000014 	.word	0x20000014
 8008810:	20003628 	.word	0x20003628

08008814 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008814:	b480      	push	{r7}
 8008816:	af00      	add	r7, sp, #0
  return uwTick;
 8008818:	4b03      	ldr	r3, [pc, #12]	; (8008828 <HAL_GetTick+0x14>)
 800881a:	681b      	ldr	r3, [r3, #0]
}
 800881c:	4618      	mov	r0, r3
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr
 8008826:	bf00      	nop
 8008828:	20003628 	.word	0x20003628

0800882c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008834:	f7ff ffee 	bl	8008814 <HAL_GetTick>
 8008838:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008844:	d005      	beq.n	8008852 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008846:	4b0a      	ldr	r3, [pc, #40]	; (8008870 <HAL_Delay+0x44>)
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	461a      	mov	r2, r3
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	4413      	add	r3, r2
 8008850:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008852:	bf00      	nop
 8008854:	f7ff ffde 	bl	8008814 <HAL_GetTick>
 8008858:	4602      	mov	r2, r0
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	1ad3      	subs	r3, r2, r3
 800885e:	68fa      	ldr	r2, [r7, #12]
 8008860:	429a      	cmp	r2, r3
 8008862:	d8f7      	bhi.n	8008854 <HAL_Delay+0x28>
  {
  }
}
 8008864:	bf00      	nop
 8008866:	bf00      	nop
 8008868:	3710      	adds	r7, #16
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
 800886e:	bf00      	nop
 8008870:	20000014 	.word	0x20000014

08008874 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008874:	b480      	push	{r7}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f003 0307 	and.w	r3, r3, #7
 8008882:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008884:	4b0c      	ldr	r3, [pc, #48]	; (80088b8 <__NVIC_SetPriorityGrouping+0x44>)
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800888a:	68ba      	ldr	r2, [r7, #8]
 800888c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008890:	4013      	ands	r3, r2
 8008892:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800889c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80088a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80088a6:	4a04      	ldr	r2, [pc, #16]	; (80088b8 <__NVIC_SetPriorityGrouping+0x44>)
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	60d3      	str	r3, [r2, #12]
}
 80088ac:	bf00      	nop
 80088ae:	3714      	adds	r7, #20
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr
 80088b8:	e000ed00 	.word	0xe000ed00

080088bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80088bc:	b480      	push	{r7}
 80088be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80088c0:	4b04      	ldr	r3, [pc, #16]	; (80088d4 <__NVIC_GetPriorityGrouping+0x18>)
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	0a1b      	lsrs	r3, r3, #8
 80088c6:	f003 0307 	and.w	r3, r3, #7
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr
 80088d4:	e000ed00 	.word	0xe000ed00

080088d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80088d8:	b480      	push	{r7}
 80088da:	b083      	sub	sp, #12
 80088dc:	af00      	add	r7, sp, #0
 80088de:	4603      	mov	r3, r0
 80088e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80088e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	db0b      	blt.n	8008902 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80088ea:	79fb      	ldrb	r3, [r7, #7]
 80088ec:	f003 021f 	and.w	r2, r3, #31
 80088f0:	4907      	ldr	r1, [pc, #28]	; (8008910 <__NVIC_EnableIRQ+0x38>)
 80088f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088f6:	095b      	lsrs	r3, r3, #5
 80088f8:	2001      	movs	r0, #1
 80088fa:	fa00 f202 	lsl.w	r2, r0, r2
 80088fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008902:	bf00      	nop
 8008904:	370c      	adds	r7, #12
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr
 800890e:	bf00      	nop
 8008910:	e000e100 	.word	0xe000e100

08008914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008914:	b480      	push	{r7}
 8008916:	b083      	sub	sp, #12
 8008918:	af00      	add	r7, sp, #0
 800891a:	4603      	mov	r3, r0
 800891c:	6039      	str	r1, [r7, #0]
 800891e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008924:	2b00      	cmp	r3, #0
 8008926:	db0a      	blt.n	800893e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	b2da      	uxtb	r2, r3
 800892c:	490c      	ldr	r1, [pc, #48]	; (8008960 <__NVIC_SetPriority+0x4c>)
 800892e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008932:	0112      	lsls	r2, r2, #4
 8008934:	b2d2      	uxtb	r2, r2
 8008936:	440b      	add	r3, r1
 8008938:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800893c:	e00a      	b.n	8008954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	b2da      	uxtb	r2, r3
 8008942:	4908      	ldr	r1, [pc, #32]	; (8008964 <__NVIC_SetPriority+0x50>)
 8008944:	79fb      	ldrb	r3, [r7, #7]
 8008946:	f003 030f 	and.w	r3, r3, #15
 800894a:	3b04      	subs	r3, #4
 800894c:	0112      	lsls	r2, r2, #4
 800894e:	b2d2      	uxtb	r2, r2
 8008950:	440b      	add	r3, r1
 8008952:	761a      	strb	r2, [r3, #24]
}
 8008954:	bf00      	nop
 8008956:	370c      	adds	r7, #12
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr
 8008960:	e000e100 	.word	0xe000e100
 8008964:	e000ed00 	.word	0xe000ed00

08008968 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008968:	b480      	push	{r7}
 800896a:	b089      	sub	sp, #36	; 0x24
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f003 0307 	and.w	r3, r3, #7
 800897a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800897c:	69fb      	ldr	r3, [r7, #28]
 800897e:	f1c3 0307 	rsb	r3, r3, #7
 8008982:	2b04      	cmp	r3, #4
 8008984:	bf28      	it	cs
 8008986:	2304      	movcs	r3, #4
 8008988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800898a:	69fb      	ldr	r3, [r7, #28]
 800898c:	3304      	adds	r3, #4
 800898e:	2b06      	cmp	r3, #6
 8008990:	d902      	bls.n	8008998 <NVIC_EncodePriority+0x30>
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	3b03      	subs	r3, #3
 8008996:	e000      	b.n	800899a <NVIC_EncodePriority+0x32>
 8008998:	2300      	movs	r3, #0
 800899a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800899c:	f04f 32ff 	mov.w	r2, #4294967295
 80089a0:	69bb      	ldr	r3, [r7, #24]
 80089a2:	fa02 f303 	lsl.w	r3, r2, r3
 80089a6:	43da      	mvns	r2, r3
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	401a      	ands	r2, r3
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80089b0:	f04f 31ff 	mov.w	r1, #4294967295
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	fa01 f303 	lsl.w	r3, r1, r3
 80089ba:	43d9      	mvns	r1, r3
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80089c0:	4313      	orrs	r3, r2
         );
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3724      	adds	r7, #36	; 0x24
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr

080089ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b082      	sub	sp, #8
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f7ff ff4c 	bl	8008874 <__NVIC_SetPriorityGrouping>
}
 80089dc:	bf00      	nop
 80089de:	3708      	adds	r7, #8
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b086      	sub	sp, #24
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	4603      	mov	r3, r0
 80089ec:	60b9      	str	r1, [r7, #8]
 80089ee:	607a      	str	r2, [r7, #4]
 80089f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80089f2:	2300      	movs	r3, #0
 80089f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80089f6:	f7ff ff61 	bl	80088bc <__NVIC_GetPriorityGrouping>
 80089fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	68b9      	ldr	r1, [r7, #8]
 8008a00:	6978      	ldr	r0, [r7, #20]
 8008a02:	f7ff ffb1 	bl	8008968 <NVIC_EncodePriority>
 8008a06:	4602      	mov	r2, r0
 8008a08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a0c:	4611      	mov	r1, r2
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f7ff ff80 	bl	8008914 <__NVIC_SetPriority>
}
 8008a14:	bf00      	nop
 8008a16:	3718      	adds	r7, #24
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	4603      	mov	r3, r0
 8008a24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7ff ff54 	bl	80088d8 <__NVIC_EnableIRQ>
}
 8008a30:	bf00      	nop
 8008a32:	3708      	adds	r7, #8
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b086      	sub	sp, #24
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008a40:	2300      	movs	r3, #0
 8008a42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008a44:	f7ff fee6 	bl	8008814 <HAL_GetTick>
 8008a48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d101      	bne.n	8008a54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008a50:	2301      	movs	r3, #1
 8008a52:	e099      	b.n	8008b88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2202      	movs	r2, #2
 8008a58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f022 0201 	bic.w	r2, r2, #1
 8008a72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008a74:	e00f      	b.n	8008a96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008a76:	f7ff fecd 	bl	8008814 <HAL_GetTick>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	1ad3      	subs	r3, r2, r3
 8008a80:	2b05      	cmp	r3, #5
 8008a82:	d908      	bls.n	8008a96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2220      	movs	r2, #32
 8008a88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2203      	movs	r2, #3
 8008a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008a92:	2303      	movs	r3, #3
 8008a94:	e078      	b.n	8008b88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f003 0301 	and.w	r3, r3, #1
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d1e8      	bne.n	8008a76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008aac:	697a      	ldr	r2, [r7, #20]
 8008aae:	4b38      	ldr	r3, [pc, #224]	; (8008b90 <HAL_DMA_Init+0x158>)
 8008ab0:	4013      	ands	r3, r2
 8008ab2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	685a      	ldr	r2, [r3, #4]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008ac2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	691b      	ldr	r3, [r3, #16]
 8008ac8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008ace:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	699b      	ldr	r3, [r3, #24]
 8008ad4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008ada:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6a1b      	ldr	r3, [r3, #32]
 8008ae0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008ae2:	697a      	ldr	r2, [r7, #20]
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aec:	2b04      	cmp	r3, #4
 8008aee:	d107      	bne.n	8008b00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008af8:	4313      	orrs	r3, r2
 8008afa:	697a      	ldr	r2, [r7, #20]
 8008afc:	4313      	orrs	r3, r2
 8008afe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	697a      	ldr	r2, [r7, #20]
 8008b06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	695b      	ldr	r3, [r3, #20]
 8008b0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	f023 0307 	bic.w	r3, r3, #7
 8008b16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1c:	697a      	ldr	r2, [r7, #20]
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b26:	2b04      	cmp	r3, #4
 8008b28:	d117      	bne.n	8008b5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b2e:	697a      	ldr	r2, [r7, #20]
 8008b30:	4313      	orrs	r3, r2
 8008b32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d00e      	beq.n	8008b5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 fb01 	bl	8009144 <DMA_CheckFifoParam>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d008      	beq.n	8008b5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2240      	movs	r2, #64	; 0x40
 8008b4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2201      	movs	r2, #1
 8008b52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008b56:	2301      	movs	r3, #1
 8008b58:	e016      	b.n	8008b88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	697a      	ldr	r2, [r7, #20]
 8008b60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 fab8 	bl	80090d8 <DMA_CalcBaseAndBitshift>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b70:	223f      	movs	r2, #63	; 0x3f
 8008b72:	409a      	lsls	r2, r3
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2201      	movs	r2, #1
 8008b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008b86:	2300      	movs	r3, #0
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3718      	adds	r7, #24
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	f010803f 	.word	0xf010803f

08008b94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b086      	sub	sp, #24
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	607a      	str	r2, [r7, #4]
 8008ba0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008baa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d101      	bne.n	8008bba <HAL_DMA_Start_IT+0x26>
 8008bb6:	2302      	movs	r3, #2
 8008bb8:	e040      	b.n	8008c3c <HAL_DMA_Start_IT+0xa8>
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d12f      	bne.n	8008c2e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2202      	movs	r2, #2
 8008bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	68b9      	ldr	r1, [r7, #8]
 8008be2:	68f8      	ldr	r0, [r7, #12]
 8008be4:	f000 fa4a 	bl	800907c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bec:	223f      	movs	r2, #63	; 0x3f
 8008bee:	409a      	lsls	r2, r3
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f042 0216 	orr.w	r2, r2, #22
 8008c02:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d007      	beq.n	8008c1c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	681a      	ldr	r2, [r3, #0]
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f042 0208 	orr.w	r2, r2, #8
 8008c1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f042 0201 	orr.w	r2, r2, #1
 8008c2a:	601a      	str	r2, [r3, #0]
 8008c2c:	e005      	b.n	8008c3a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2200      	movs	r2, #0
 8008c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008c36:	2302      	movs	r3, #2
 8008c38:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3718      	adds	r7, #24
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b084      	sub	sp, #16
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c50:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008c52:	f7ff fddf 	bl	8008814 <HAL_GetTick>
 8008c56:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	2b02      	cmp	r3, #2
 8008c62:	d008      	beq.n	8008c76 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2280      	movs	r2, #128	; 0x80
 8008c68:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	e052      	b.n	8008d1c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f022 0216 	bic.w	r2, r2, #22
 8008c84:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	695a      	ldr	r2, [r3, #20]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c94:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d103      	bne.n	8008ca6 <HAL_DMA_Abort+0x62>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d007      	beq.n	8008cb6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f022 0208 	bic.w	r2, r2, #8
 8008cb4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f022 0201 	bic.w	r2, r2, #1
 8008cc4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008cc6:	e013      	b.n	8008cf0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008cc8:	f7ff fda4 	bl	8008814 <HAL_GetTick>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	1ad3      	subs	r3, r2, r3
 8008cd2:	2b05      	cmp	r3, #5
 8008cd4:	d90c      	bls.n	8008cf0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2220      	movs	r2, #32
 8008cda:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2203      	movs	r2, #3
 8008ce0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8008cec:	2303      	movs	r3, #3
 8008cee:	e015      	b.n	8008d1c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f003 0301 	and.w	r3, r3, #1
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d1e4      	bne.n	8008cc8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d02:	223f      	movs	r2, #63	; 0x3f
 8008d04:	409a      	lsls	r2, r3
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8008d1a:	2300      	movs	r3, #0
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3710      	adds	r7, #16
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	2b02      	cmp	r3, #2
 8008d36:	d004      	beq.n	8008d42 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2280      	movs	r2, #128	; 0x80
 8008d3c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e00c      	b.n	8008d5c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2205      	movs	r2, #5
 8008d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f022 0201 	bic.w	r2, r2, #1
 8008d58:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008d5a:	2300      	movs	r3, #0
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	370c      	adds	r7, #12
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr

08008d68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b086      	sub	sp, #24
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008d70:	2300      	movs	r3, #0
 8008d72:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008d74:	4b8e      	ldr	r3, [pc, #568]	; (8008fb0 <HAL_DMA_IRQHandler+0x248>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a8e      	ldr	r2, [pc, #568]	; (8008fb4 <HAL_DMA_IRQHandler+0x24c>)
 8008d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d7e:	0a9b      	lsrs	r3, r3, #10
 8008d80:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d86:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d92:	2208      	movs	r2, #8
 8008d94:	409a      	lsls	r2, r3
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	4013      	ands	r3, r2
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d01a      	beq.n	8008dd4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f003 0304 	and.w	r3, r3, #4
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d013      	beq.n	8008dd4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f022 0204 	bic.w	r2, r2, #4
 8008dba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dc0:	2208      	movs	r2, #8
 8008dc2:	409a      	lsls	r2, r3
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dcc:	f043 0201 	orr.w	r2, r3, #1
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dd8:	2201      	movs	r2, #1
 8008dda:	409a      	lsls	r2, r3
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	4013      	ands	r3, r2
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d012      	beq.n	8008e0a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	695b      	ldr	r3, [r3, #20]
 8008dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d00b      	beq.n	8008e0a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008df6:	2201      	movs	r2, #1
 8008df8:	409a      	lsls	r2, r3
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e02:	f043 0202 	orr.w	r2, r3, #2
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e0e:	2204      	movs	r2, #4
 8008e10:	409a      	lsls	r2, r3
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	4013      	ands	r3, r2
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d012      	beq.n	8008e40 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f003 0302 	and.w	r3, r3, #2
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d00b      	beq.n	8008e40 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e2c:	2204      	movs	r2, #4
 8008e2e:	409a      	lsls	r2, r3
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e38:	f043 0204 	orr.w	r2, r3, #4
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e44:	2210      	movs	r2, #16
 8008e46:	409a      	lsls	r2, r3
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	4013      	ands	r3, r2
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d043      	beq.n	8008ed8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f003 0308 	and.w	r3, r3, #8
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d03c      	beq.n	8008ed8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e62:	2210      	movs	r2, #16
 8008e64:	409a      	lsls	r2, r3
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d018      	beq.n	8008eaa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d108      	bne.n	8008e98 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d024      	beq.n	8008ed8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	4798      	blx	r3
 8008e96:	e01f      	b.n	8008ed8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d01b      	beq.n	8008ed8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	4798      	blx	r3
 8008ea8:	e016      	b.n	8008ed8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d107      	bne.n	8008ec8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f022 0208 	bic.w	r2, r2, #8
 8008ec6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d003      	beq.n	8008ed8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008edc:	2220      	movs	r2, #32
 8008ede:	409a      	lsls	r2, r3
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	4013      	ands	r3, r2
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	f000 808f 	beq.w	8009008 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f003 0310 	and.w	r3, r3, #16
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	f000 8087 	beq.w	8009008 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008efe:	2220      	movs	r2, #32
 8008f00:	409a      	lsls	r2, r3
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	2b05      	cmp	r3, #5
 8008f10:	d136      	bne.n	8008f80 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	681a      	ldr	r2, [r3, #0]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f022 0216 	bic.w	r2, r2, #22
 8008f20:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	695a      	ldr	r2, [r3, #20]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f30:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d103      	bne.n	8008f42 <HAL_DMA_IRQHandler+0x1da>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d007      	beq.n	8008f52 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f022 0208 	bic.w	r2, r2, #8
 8008f50:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f56:	223f      	movs	r2, #63	; 0x3f
 8008f58:	409a      	lsls	r2, r3
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2201      	movs	r2, #1
 8008f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d07e      	beq.n	8009074 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	4798      	blx	r3
        }
        return;
 8008f7e:	e079      	b.n	8009074 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d01d      	beq.n	8008fca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d10d      	bne.n	8008fb8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d031      	beq.n	8009008 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	4798      	blx	r3
 8008fac:	e02c      	b.n	8009008 <HAL_DMA_IRQHandler+0x2a0>
 8008fae:	bf00      	nop
 8008fb0:	2000000c 	.word	0x2000000c
 8008fb4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d023      	beq.n	8009008 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	4798      	blx	r3
 8008fc8:	e01e      	b.n	8009008 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d10f      	bne.n	8008ff8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f022 0210 	bic.w	r2, r2, #16
 8008fe6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2201      	movs	r2, #1
 8008fec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d003      	beq.n	8009008 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800900c:	2b00      	cmp	r3, #0
 800900e:	d032      	beq.n	8009076 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009014:	f003 0301 	and.w	r3, r3, #1
 8009018:	2b00      	cmp	r3, #0
 800901a:	d022      	beq.n	8009062 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2205      	movs	r2, #5
 8009020:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f022 0201 	bic.w	r2, r2, #1
 8009032:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	3301      	adds	r3, #1
 8009038:	60bb      	str	r3, [r7, #8]
 800903a:	697a      	ldr	r2, [r7, #20]
 800903c:	429a      	cmp	r2, r3
 800903e:	d307      	bcc.n	8009050 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f003 0301 	and.w	r3, r3, #1
 800904a:	2b00      	cmp	r3, #0
 800904c:	d1f2      	bne.n	8009034 <HAL_DMA_IRQHandler+0x2cc>
 800904e:	e000      	b.n	8009052 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8009050:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2201      	movs	r2, #1
 8009056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009066:	2b00      	cmp	r3, #0
 8009068:	d005      	beq.n	8009076 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	4798      	blx	r3
 8009072:	e000      	b.n	8009076 <HAL_DMA_IRQHandler+0x30e>
        return;
 8009074:	bf00      	nop
    }
  }
}
 8009076:	3718      	adds	r7, #24
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800907c:	b480      	push	{r7}
 800907e:	b085      	sub	sp, #20
 8009080:	af00      	add	r7, sp, #0
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	607a      	str	r2, [r7, #4]
 8009088:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009098:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	683a      	ldr	r2, [r7, #0]
 80090a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	2b40      	cmp	r3, #64	; 0x40
 80090a8:	d108      	bne.n	80090bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	68ba      	ldr	r2, [r7, #8]
 80090b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80090ba:	e007      	b.n	80090cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	68ba      	ldr	r2, [r7, #8]
 80090c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	687a      	ldr	r2, [r7, #4]
 80090ca:	60da      	str	r2, [r3, #12]
}
 80090cc:	bf00      	nop
 80090ce:	3714      	adds	r7, #20
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr

080090d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80090d8:	b480      	push	{r7}
 80090da:	b085      	sub	sp, #20
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	b2db      	uxtb	r3, r3
 80090e6:	3b10      	subs	r3, #16
 80090e8:	4a14      	ldr	r2, [pc, #80]	; (800913c <DMA_CalcBaseAndBitshift+0x64>)
 80090ea:	fba2 2303 	umull	r2, r3, r2, r3
 80090ee:	091b      	lsrs	r3, r3, #4
 80090f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80090f2:	4a13      	ldr	r2, [pc, #76]	; (8009140 <DMA_CalcBaseAndBitshift+0x68>)
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	4413      	add	r3, r2
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	461a      	mov	r2, r3
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2b03      	cmp	r3, #3
 8009104:	d909      	bls.n	800911a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800910e:	f023 0303 	bic.w	r3, r3, #3
 8009112:	1d1a      	adds	r2, r3, #4
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	659a      	str	r2, [r3, #88]	; 0x58
 8009118:	e007      	b.n	800912a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009122:	f023 0303 	bic.w	r3, r3, #3
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800912e:	4618      	mov	r0, r3
 8009130:	3714      	adds	r7, #20
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr
 800913a:	bf00      	nop
 800913c:	aaaaaaab 	.word	0xaaaaaaab
 8009140:	08015650 	.word	0x08015650

08009144 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009144:	b480      	push	{r7}
 8009146:	b085      	sub	sp, #20
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800914c:	2300      	movs	r3, #0
 800914e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009154:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	699b      	ldr	r3, [r3, #24]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d11f      	bne.n	800919e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	2b03      	cmp	r3, #3
 8009162:	d856      	bhi.n	8009212 <DMA_CheckFifoParam+0xce>
 8009164:	a201      	add	r2, pc, #4	; (adr r2, 800916c <DMA_CheckFifoParam+0x28>)
 8009166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800916a:	bf00      	nop
 800916c:	0800917d 	.word	0x0800917d
 8009170:	0800918f 	.word	0x0800918f
 8009174:	0800917d 	.word	0x0800917d
 8009178:	08009213 	.word	0x08009213
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009180:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009184:	2b00      	cmp	r3, #0
 8009186:	d046      	beq.n	8009216 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800918c:	e043      	b.n	8009216 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009192:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009196:	d140      	bne.n	800921a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8009198:	2301      	movs	r3, #1
 800919a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800919c:	e03d      	b.n	800921a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	699b      	ldr	r3, [r3, #24]
 80091a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091a6:	d121      	bne.n	80091ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	2b03      	cmp	r3, #3
 80091ac:	d837      	bhi.n	800921e <DMA_CheckFifoParam+0xda>
 80091ae:	a201      	add	r2, pc, #4	; (adr r2, 80091b4 <DMA_CheckFifoParam+0x70>)
 80091b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b4:	080091c5 	.word	0x080091c5
 80091b8:	080091cb 	.word	0x080091cb
 80091bc:	080091c5 	.word	0x080091c5
 80091c0:	080091dd 	.word	0x080091dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80091c4:	2301      	movs	r3, #1
 80091c6:	73fb      	strb	r3, [r7, #15]
      break;
 80091c8:	e030      	b.n	800922c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d025      	beq.n	8009222 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80091da:	e022      	b.n	8009222 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80091e4:	d11f      	bne.n	8009226 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80091e6:	2301      	movs	r3, #1
 80091e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80091ea:	e01c      	b.n	8009226 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	2b02      	cmp	r3, #2
 80091f0:	d903      	bls.n	80091fa <DMA_CheckFifoParam+0xb6>
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	2b03      	cmp	r3, #3
 80091f6:	d003      	beq.n	8009200 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80091f8:	e018      	b.n	800922c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80091fa:	2301      	movs	r3, #1
 80091fc:	73fb      	strb	r3, [r7, #15]
      break;
 80091fe:	e015      	b.n	800922c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009204:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009208:	2b00      	cmp	r3, #0
 800920a:	d00e      	beq.n	800922a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800920c:	2301      	movs	r3, #1
 800920e:	73fb      	strb	r3, [r7, #15]
      break;
 8009210:	e00b      	b.n	800922a <DMA_CheckFifoParam+0xe6>
      break;
 8009212:	bf00      	nop
 8009214:	e00a      	b.n	800922c <DMA_CheckFifoParam+0xe8>
      break;
 8009216:	bf00      	nop
 8009218:	e008      	b.n	800922c <DMA_CheckFifoParam+0xe8>
      break;
 800921a:	bf00      	nop
 800921c:	e006      	b.n	800922c <DMA_CheckFifoParam+0xe8>
      break;
 800921e:	bf00      	nop
 8009220:	e004      	b.n	800922c <DMA_CheckFifoParam+0xe8>
      break;
 8009222:	bf00      	nop
 8009224:	e002      	b.n	800922c <DMA_CheckFifoParam+0xe8>
      break;   
 8009226:	bf00      	nop
 8009228:	e000      	b.n	800922c <DMA_CheckFifoParam+0xe8>
      break;
 800922a:	bf00      	nop
    }
  } 
  
  return status; 
 800922c:	7bfb      	ldrb	r3, [r7, #15]
}
 800922e:	4618      	mov	r0, r3
 8009230:	3714      	adds	r7, #20
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop

0800923c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800923c:	b480      	push	{r7}
 800923e:	b089      	sub	sp, #36	; 0x24
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009246:	2300      	movs	r3, #0
 8009248:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800924a:	2300      	movs	r3, #0
 800924c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800924e:	2300      	movs	r3, #0
 8009250:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009252:	2300      	movs	r3, #0
 8009254:	61fb      	str	r3, [r7, #28]
 8009256:	e177      	b.n	8009548 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009258:	2201      	movs	r2, #1
 800925a:	69fb      	ldr	r3, [r7, #28]
 800925c:	fa02 f303 	lsl.w	r3, r2, r3
 8009260:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	697a      	ldr	r2, [r7, #20]
 8009268:	4013      	ands	r3, r2
 800926a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800926c:	693a      	ldr	r2, [r7, #16]
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	429a      	cmp	r2, r3
 8009272:	f040 8166 	bne.w	8009542 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	f003 0303 	and.w	r3, r3, #3
 800927e:	2b01      	cmp	r3, #1
 8009280:	d005      	beq.n	800928e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800928a:	2b02      	cmp	r3, #2
 800928c:	d130      	bne.n	80092f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009294:	69fb      	ldr	r3, [r7, #28]
 8009296:	005b      	lsls	r3, r3, #1
 8009298:	2203      	movs	r2, #3
 800929a:	fa02 f303 	lsl.w	r3, r2, r3
 800929e:	43db      	mvns	r3, r3
 80092a0:	69ba      	ldr	r2, [r7, #24]
 80092a2:	4013      	ands	r3, r2
 80092a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	68da      	ldr	r2, [r3, #12]
 80092aa:	69fb      	ldr	r3, [r7, #28]
 80092ac:	005b      	lsls	r3, r3, #1
 80092ae:	fa02 f303 	lsl.w	r3, r2, r3
 80092b2:	69ba      	ldr	r2, [r7, #24]
 80092b4:	4313      	orrs	r3, r2
 80092b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	69ba      	ldr	r2, [r7, #24]
 80092bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	685b      	ldr	r3, [r3, #4]
 80092c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80092c4:	2201      	movs	r2, #1
 80092c6:	69fb      	ldr	r3, [r7, #28]
 80092c8:	fa02 f303 	lsl.w	r3, r2, r3
 80092cc:	43db      	mvns	r3, r3
 80092ce:	69ba      	ldr	r2, [r7, #24]
 80092d0:	4013      	ands	r3, r2
 80092d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	091b      	lsrs	r3, r3, #4
 80092da:	f003 0201 	and.w	r2, r3, #1
 80092de:	69fb      	ldr	r3, [r7, #28]
 80092e0:	fa02 f303 	lsl.w	r3, r2, r3
 80092e4:	69ba      	ldr	r2, [r7, #24]
 80092e6:	4313      	orrs	r3, r2
 80092e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	69ba      	ldr	r2, [r7, #24]
 80092ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	f003 0303 	and.w	r3, r3, #3
 80092f8:	2b03      	cmp	r3, #3
 80092fa:	d017      	beq.n	800932c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009302:	69fb      	ldr	r3, [r7, #28]
 8009304:	005b      	lsls	r3, r3, #1
 8009306:	2203      	movs	r2, #3
 8009308:	fa02 f303 	lsl.w	r3, r2, r3
 800930c:	43db      	mvns	r3, r3
 800930e:	69ba      	ldr	r2, [r7, #24]
 8009310:	4013      	ands	r3, r2
 8009312:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	689a      	ldr	r2, [r3, #8]
 8009318:	69fb      	ldr	r3, [r7, #28]
 800931a:	005b      	lsls	r3, r3, #1
 800931c:	fa02 f303 	lsl.w	r3, r2, r3
 8009320:	69ba      	ldr	r2, [r7, #24]
 8009322:	4313      	orrs	r3, r2
 8009324:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	69ba      	ldr	r2, [r7, #24]
 800932a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	f003 0303 	and.w	r3, r3, #3
 8009334:	2b02      	cmp	r3, #2
 8009336:	d123      	bne.n	8009380 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009338:	69fb      	ldr	r3, [r7, #28]
 800933a:	08da      	lsrs	r2, r3, #3
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	3208      	adds	r2, #8
 8009340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009344:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009346:	69fb      	ldr	r3, [r7, #28]
 8009348:	f003 0307 	and.w	r3, r3, #7
 800934c:	009b      	lsls	r3, r3, #2
 800934e:	220f      	movs	r2, #15
 8009350:	fa02 f303 	lsl.w	r3, r2, r3
 8009354:	43db      	mvns	r3, r3
 8009356:	69ba      	ldr	r2, [r7, #24]
 8009358:	4013      	ands	r3, r2
 800935a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	691a      	ldr	r2, [r3, #16]
 8009360:	69fb      	ldr	r3, [r7, #28]
 8009362:	f003 0307 	and.w	r3, r3, #7
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	fa02 f303 	lsl.w	r3, r2, r3
 800936c:	69ba      	ldr	r2, [r7, #24]
 800936e:	4313      	orrs	r3, r2
 8009370:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009372:	69fb      	ldr	r3, [r7, #28]
 8009374:	08da      	lsrs	r2, r3, #3
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	3208      	adds	r2, #8
 800937a:	69b9      	ldr	r1, [r7, #24]
 800937c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009386:	69fb      	ldr	r3, [r7, #28]
 8009388:	005b      	lsls	r3, r3, #1
 800938a:	2203      	movs	r2, #3
 800938c:	fa02 f303 	lsl.w	r3, r2, r3
 8009390:	43db      	mvns	r3, r3
 8009392:	69ba      	ldr	r2, [r7, #24]
 8009394:	4013      	ands	r3, r2
 8009396:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	f003 0203 	and.w	r2, r3, #3
 80093a0:	69fb      	ldr	r3, [r7, #28]
 80093a2:	005b      	lsls	r3, r3, #1
 80093a4:	fa02 f303 	lsl.w	r3, r2, r3
 80093a8:	69ba      	ldr	r2, [r7, #24]
 80093aa:	4313      	orrs	r3, r2
 80093ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	69ba      	ldr	r2, [r7, #24]
 80093b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80093bc:	2b00      	cmp	r3, #0
 80093be:	f000 80c0 	beq.w	8009542 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80093c2:	2300      	movs	r3, #0
 80093c4:	60fb      	str	r3, [r7, #12]
 80093c6:	4b66      	ldr	r3, [pc, #408]	; (8009560 <HAL_GPIO_Init+0x324>)
 80093c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093ca:	4a65      	ldr	r2, [pc, #404]	; (8009560 <HAL_GPIO_Init+0x324>)
 80093cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80093d0:	6453      	str	r3, [r2, #68]	; 0x44
 80093d2:	4b63      	ldr	r3, [pc, #396]	; (8009560 <HAL_GPIO_Init+0x324>)
 80093d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093da:	60fb      	str	r3, [r7, #12]
 80093dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80093de:	4a61      	ldr	r2, [pc, #388]	; (8009564 <HAL_GPIO_Init+0x328>)
 80093e0:	69fb      	ldr	r3, [r7, #28]
 80093e2:	089b      	lsrs	r3, r3, #2
 80093e4:	3302      	adds	r3, #2
 80093e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	f003 0303 	and.w	r3, r3, #3
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	220f      	movs	r2, #15
 80093f6:	fa02 f303 	lsl.w	r3, r2, r3
 80093fa:	43db      	mvns	r3, r3
 80093fc:	69ba      	ldr	r2, [r7, #24]
 80093fe:	4013      	ands	r3, r2
 8009400:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	4a58      	ldr	r2, [pc, #352]	; (8009568 <HAL_GPIO_Init+0x32c>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d037      	beq.n	800947a <HAL_GPIO_Init+0x23e>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	4a57      	ldr	r2, [pc, #348]	; (800956c <HAL_GPIO_Init+0x330>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d031      	beq.n	8009476 <HAL_GPIO_Init+0x23a>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4a56      	ldr	r2, [pc, #344]	; (8009570 <HAL_GPIO_Init+0x334>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d02b      	beq.n	8009472 <HAL_GPIO_Init+0x236>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4a55      	ldr	r2, [pc, #340]	; (8009574 <HAL_GPIO_Init+0x338>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d025      	beq.n	800946e <HAL_GPIO_Init+0x232>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	4a54      	ldr	r2, [pc, #336]	; (8009578 <HAL_GPIO_Init+0x33c>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d01f      	beq.n	800946a <HAL_GPIO_Init+0x22e>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	4a53      	ldr	r2, [pc, #332]	; (800957c <HAL_GPIO_Init+0x340>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d019      	beq.n	8009466 <HAL_GPIO_Init+0x22a>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	4a52      	ldr	r2, [pc, #328]	; (8009580 <HAL_GPIO_Init+0x344>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d013      	beq.n	8009462 <HAL_GPIO_Init+0x226>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	4a51      	ldr	r2, [pc, #324]	; (8009584 <HAL_GPIO_Init+0x348>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d00d      	beq.n	800945e <HAL_GPIO_Init+0x222>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4a50      	ldr	r2, [pc, #320]	; (8009588 <HAL_GPIO_Init+0x34c>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d007      	beq.n	800945a <HAL_GPIO_Init+0x21e>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4a4f      	ldr	r2, [pc, #316]	; (800958c <HAL_GPIO_Init+0x350>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d101      	bne.n	8009456 <HAL_GPIO_Init+0x21a>
 8009452:	2309      	movs	r3, #9
 8009454:	e012      	b.n	800947c <HAL_GPIO_Init+0x240>
 8009456:	230a      	movs	r3, #10
 8009458:	e010      	b.n	800947c <HAL_GPIO_Init+0x240>
 800945a:	2308      	movs	r3, #8
 800945c:	e00e      	b.n	800947c <HAL_GPIO_Init+0x240>
 800945e:	2307      	movs	r3, #7
 8009460:	e00c      	b.n	800947c <HAL_GPIO_Init+0x240>
 8009462:	2306      	movs	r3, #6
 8009464:	e00a      	b.n	800947c <HAL_GPIO_Init+0x240>
 8009466:	2305      	movs	r3, #5
 8009468:	e008      	b.n	800947c <HAL_GPIO_Init+0x240>
 800946a:	2304      	movs	r3, #4
 800946c:	e006      	b.n	800947c <HAL_GPIO_Init+0x240>
 800946e:	2303      	movs	r3, #3
 8009470:	e004      	b.n	800947c <HAL_GPIO_Init+0x240>
 8009472:	2302      	movs	r3, #2
 8009474:	e002      	b.n	800947c <HAL_GPIO_Init+0x240>
 8009476:	2301      	movs	r3, #1
 8009478:	e000      	b.n	800947c <HAL_GPIO_Init+0x240>
 800947a:	2300      	movs	r3, #0
 800947c:	69fa      	ldr	r2, [r7, #28]
 800947e:	f002 0203 	and.w	r2, r2, #3
 8009482:	0092      	lsls	r2, r2, #2
 8009484:	4093      	lsls	r3, r2
 8009486:	69ba      	ldr	r2, [r7, #24]
 8009488:	4313      	orrs	r3, r2
 800948a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800948c:	4935      	ldr	r1, [pc, #212]	; (8009564 <HAL_GPIO_Init+0x328>)
 800948e:	69fb      	ldr	r3, [r7, #28]
 8009490:	089b      	lsrs	r3, r3, #2
 8009492:	3302      	adds	r3, #2
 8009494:	69ba      	ldr	r2, [r7, #24]
 8009496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800949a:	4b3d      	ldr	r3, [pc, #244]	; (8009590 <HAL_GPIO_Init+0x354>)
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	43db      	mvns	r3, r3
 80094a4:	69ba      	ldr	r2, [r7, #24]
 80094a6:	4013      	ands	r3, r2
 80094a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d003      	beq.n	80094be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80094b6:	69ba      	ldr	r2, [r7, #24]
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	4313      	orrs	r3, r2
 80094bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80094be:	4a34      	ldr	r2, [pc, #208]	; (8009590 <HAL_GPIO_Init+0x354>)
 80094c0:	69bb      	ldr	r3, [r7, #24]
 80094c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80094c4:	4b32      	ldr	r3, [pc, #200]	; (8009590 <HAL_GPIO_Init+0x354>)
 80094c6:	68db      	ldr	r3, [r3, #12]
 80094c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	43db      	mvns	r3, r3
 80094ce:	69ba      	ldr	r2, [r7, #24]
 80094d0:	4013      	ands	r3, r2
 80094d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d003      	beq.n	80094e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80094e0:	69ba      	ldr	r2, [r7, #24]
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	4313      	orrs	r3, r2
 80094e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80094e8:	4a29      	ldr	r2, [pc, #164]	; (8009590 <HAL_GPIO_Init+0x354>)
 80094ea:	69bb      	ldr	r3, [r7, #24]
 80094ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80094ee:	4b28      	ldr	r3, [pc, #160]	; (8009590 <HAL_GPIO_Init+0x354>)
 80094f0:	685b      	ldr	r3, [r3, #4]
 80094f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	43db      	mvns	r3, r3
 80094f8:	69ba      	ldr	r2, [r7, #24]
 80094fa:	4013      	ands	r3, r2
 80094fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009506:	2b00      	cmp	r3, #0
 8009508:	d003      	beq.n	8009512 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800950a:	69ba      	ldr	r2, [r7, #24]
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	4313      	orrs	r3, r2
 8009510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009512:	4a1f      	ldr	r2, [pc, #124]	; (8009590 <HAL_GPIO_Init+0x354>)
 8009514:	69bb      	ldr	r3, [r7, #24]
 8009516:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009518:	4b1d      	ldr	r3, [pc, #116]	; (8009590 <HAL_GPIO_Init+0x354>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	43db      	mvns	r3, r3
 8009522:	69ba      	ldr	r2, [r7, #24]
 8009524:	4013      	ands	r3, r2
 8009526:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009530:	2b00      	cmp	r3, #0
 8009532:	d003      	beq.n	800953c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8009534:	69ba      	ldr	r2, [r7, #24]
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	4313      	orrs	r3, r2
 800953a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800953c:	4a14      	ldr	r2, [pc, #80]	; (8009590 <HAL_GPIO_Init+0x354>)
 800953e:	69bb      	ldr	r3, [r7, #24]
 8009540:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009542:	69fb      	ldr	r3, [r7, #28]
 8009544:	3301      	adds	r3, #1
 8009546:	61fb      	str	r3, [r7, #28]
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	2b0f      	cmp	r3, #15
 800954c:	f67f ae84 	bls.w	8009258 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009550:	bf00      	nop
 8009552:	bf00      	nop
 8009554:	3724      	adds	r7, #36	; 0x24
 8009556:	46bd      	mov	sp, r7
 8009558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955c:	4770      	bx	lr
 800955e:	bf00      	nop
 8009560:	40023800 	.word	0x40023800
 8009564:	40013800 	.word	0x40013800
 8009568:	40020000 	.word	0x40020000
 800956c:	40020400 	.word	0x40020400
 8009570:	40020800 	.word	0x40020800
 8009574:	40020c00 	.word	0x40020c00
 8009578:	40021000 	.word	0x40021000
 800957c:	40021400 	.word	0x40021400
 8009580:	40021800 	.word	0x40021800
 8009584:	40021c00 	.word	0x40021c00
 8009588:	40022000 	.word	0x40022000
 800958c:	40022400 	.word	0x40022400
 8009590:	40013c00 	.word	0x40013c00

08009594 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009594:	b480      	push	{r7}
 8009596:	b085      	sub	sp, #20
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	460b      	mov	r3, r1
 800959e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	691a      	ldr	r2, [r3, #16]
 80095a4:	887b      	ldrh	r3, [r7, #2]
 80095a6:	4013      	ands	r3, r2
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d002      	beq.n	80095b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80095ac:	2301      	movs	r3, #1
 80095ae:	73fb      	strb	r3, [r7, #15]
 80095b0:	e001      	b.n	80095b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80095b2:	2300      	movs	r3, #0
 80095b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80095b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3714      	adds	r7, #20
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b083      	sub	sp, #12
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	460b      	mov	r3, r1
 80095ce:	807b      	strh	r3, [r7, #2]
 80095d0:	4613      	mov	r3, r2
 80095d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80095d4:	787b      	ldrb	r3, [r7, #1]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d003      	beq.n	80095e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80095da:	887a      	ldrh	r2, [r7, #2]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80095e0:	e003      	b.n	80095ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80095e2:	887b      	ldrh	r3, [r7, #2]
 80095e4:	041a      	lsls	r2, r3, #16
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	619a      	str	r2, [r3, #24]
}
 80095ea:	bf00      	nop
 80095ec:	370c      	adds	r7, #12
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr
	...

080095f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	4603      	mov	r3, r0
 8009600:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009602:	4b08      	ldr	r3, [pc, #32]	; (8009624 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009604:	695a      	ldr	r2, [r3, #20]
 8009606:	88fb      	ldrh	r3, [r7, #6]
 8009608:	4013      	ands	r3, r2
 800960a:	2b00      	cmp	r3, #0
 800960c:	d006      	beq.n	800961c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800960e:	4a05      	ldr	r2, [pc, #20]	; (8009624 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009610:	88fb      	ldrh	r3, [r7, #6]
 8009612:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009614:	88fb      	ldrh	r3, [r7, #6]
 8009616:	4618      	mov	r0, r3
 8009618:	f7f9 fe8e 	bl	8003338 <HAL_GPIO_EXTI_Callback>
  }
}
 800961c:	bf00      	nop
 800961e:	3708      	adds	r7, #8
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}
 8009624:	40013c00 	.word	0x40013c00

08009628 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d101      	bne.n	800963a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009636:	2301      	movs	r3, #1
 8009638:	e12b      	b.n	8009892 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009640:	b2db      	uxtb	r3, r3
 8009642:	2b00      	cmp	r3, #0
 8009644:	d106      	bne.n	8009654 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2200      	movs	r2, #0
 800964a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f7fe fbd0 	bl	8007df4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2224      	movs	r2, #36	; 0x24
 8009658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f022 0201 	bic.w	r2, r2, #1
 800966a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800967a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	681a      	ldr	r2, [r3, #0]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800968a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800968c:	f001 fc8c 	bl	800afa8 <HAL_RCC_GetPCLK1Freq>
 8009690:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	4a81      	ldr	r2, [pc, #516]	; (800989c <HAL_I2C_Init+0x274>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d807      	bhi.n	80096ac <HAL_I2C_Init+0x84>
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	4a80      	ldr	r2, [pc, #512]	; (80098a0 <HAL_I2C_Init+0x278>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	bf94      	ite	ls
 80096a4:	2301      	movls	r3, #1
 80096a6:	2300      	movhi	r3, #0
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	e006      	b.n	80096ba <HAL_I2C_Init+0x92>
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	4a7d      	ldr	r2, [pc, #500]	; (80098a4 <HAL_I2C_Init+0x27c>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	bf94      	ite	ls
 80096b4:	2301      	movls	r3, #1
 80096b6:	2300      	movhi	r3, #0
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d001      	beq.n	80096c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80096be:	2301      	movs	r3, #1
 80096c0:	e0e7      	b.n	8009892 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	4a78      	ldr	r2, [pc, #480]	; (80098a8 <HAL_I2C_Init+0x280>)
 80096c6:	fba2 2303 	umull	r2, r3, r2, r3
 80096ca:	0c9b      	lsrs	r3, r3, #18
 80096cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	68ba      	ldr	r2, [r7, #8]
 80096de:	430a      	orrs	r2, r1
 80096e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	6a1b      	ldr	r3, [r3, #32]
 80096e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	4a6a      	ldr	r2, [pc, #424]	; (800989c <HAL_I2C_Init+0x274>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d802      	bhi.n	80096fc <HAL_I2C_Init+0xd4>
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	3301      	adds	r3, #1
 80096fa:	e009      	b.n	8009710 <HAL_I2C_Init+0xe8>
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009702:	fb02 f303 	mul.w	r3, r2, r3
 8009706:	4a69      	ldr	r2, [pc, #420]	; (80098ac <HAL_I2C_Init+0x284>)
 8009708:	fba2 2303 	umull	r2, r3, r2, r3
 800970c:	099b      	lsrs	r3, r3, #6
 800970e:	3301      	adds	r3, #1
 8009710:	687a      	ldr	r2, [r7, #4]
 8009712:	6812      	ldr	r2, [r2, #0]
 8009714:	430b      	orrs	r3, r1
 8009716:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	69db      	ldr	r3, [r3, #28]
 800971e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009722:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	495c      	ldr	r1, [pc, #368]	; (800989c <HAL_I2C_Init+0x274>)
 800972c:	428b      	cmp	r3, r1
 800972e:	d819      	bhi.n	8009764 <HAL_I2C_Init+0x13c>
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	1e59      	subs	r1, r3, #1
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	005b      	lsls	r3, r3, #1
 800973a:	fbb1 f3f3 	udiv	r3, r1, r3
 800973e:	1c59      	adds	r1, r3, #1
 8009740:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009744:	400b      	ands	r3, r1
 8009746:	2b00      	cmp	r3, #0
 8009748:	d00a      	beq.n	8009760 <HAL_I2C_Init+0x138>
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	1e59      	subs	r1, r3, #1
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	005b      	lsls	r3, r3, #1
 8009754:	fbb1 f3f3 	udiv	r3, r1, r3
 8009758:	3301      	adds	r3, #1
 800975a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800975e:	e051      	b.n	8009804 <HAL_I2C_Init+0x1dc>
 8009760:	2304      	movs	r3, #4
 8009762:	e04f      	b.n	8009804 <HAL_I2C_Init+0x1dc>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d111      	bne.n	8009790 <HAL_I2C_Init+0x168>
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	1e58      	subs	r0, r3, #1
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6859      	ldr	r1, [r3, #4]
 8009774:	460b      	mov	r3, r1
 8009776:	005b      	lsls	r3, r3, #1
 8009778:	440b      	add	r3, r1
 800977a:	fbb0 f3f3 	udiv	r3, r0, r3
 800977e:	3301      	adds	r3, #1
 8009780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009784:	2b00      	cmp	r3, #0
 8009786:	bf0c      	ite	eq
 8009788:	2301      	moveq	r3, #1
 800978a:	2300      	movne	r3, #0
 800978c:	b2db      	uxtb	r3, r3
 800978e:	e012      	b.n	80097b6 <HAL_I2C_Init+0x18e>
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	1e58      	subs	r0, r3, #1
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6859      	ldr	r1, [r3, #4]
 8009798:	460b      	mov	r3, r1
 800979a:	009b      	lsls	r3, r3, #2
 800979c:	440b      	add	r3, r1
 800979e:	0099      	lsls	r1, r3, #2
 80097a0:	440b      	add	r3, r1
 80097a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80097a6:	3301      	adds	r3, #1
 80097a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	bf0c      	ite	eq
 80097b0:	2301      	moveq	r3, #1
 80097b2:	2300      	movne	r3, #0
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d001      	beq.n	80097be <HAL_I2C_Init+0x196>
 80097ba:	2301      	movs	r3, #1
 80097bc:	e022      	b.n	8009804 <HAL_I2C_Init+0x1dc>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	689b      	ldr	r3, [r3, #8]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d10e      	bne.n	80097e4 <HAL_I2C_Init+0x1bc>
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	1e58      	subs	r0, r3, #1
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6859      	ldr	r1, [r3, #4]
 80097ce:	460b      	mov	r3, r1
 80097d0:	005b      	lsls	r3, r3, #1
 80097d2:	440b      	add	r3, r1
 80097d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80097d8:	3301      	adds	r3, #1
 80097da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80097de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097e2:	e00f      	b.n	8009804 <HAL_I2C_Init+0x1dc>
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	1e58      	subs	r0, r3, #1
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6859      	ldr	r1, [r3, #4]
 80097ec:	460b      	mov	r3, r1
 80097ee:	009b      	lsls	r3, r3, #2
 80097f0:	440b      	add	r3, r1
 80097f2:	0099      	lsls	r1, r3, #2
 80097f4:	440b      	add	r3, r1
 80097f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80097fa:	3301      	adds	r3, #1
 80097fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009800:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009804:	6879      	ldr	r1, [r7, #4]
 8009806:	6809      	ldr	r1, [r1, #0]
 8009808:	4313      	orrs	r3, r2
 800980a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	69da      	ldr	r2, [r3, #28]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6a1b      	ldr	r3, [r3, #32]
 800981e:	431a      	orrs	r2, r3
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	430a      	orrs	r2, r1
 8009826:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	689b      	ldr	r3, [r3, #8]
 800982e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009832:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	6911      	ldr	r1, [r2, #16]
 800983a:	687a      	ldr	r2, [r7, #4]
 800983c:	68d2      	ldr	r2, [r2, #12]
 800983e:	4311      	orrs	r1, r2
 8009840:	687a      	ldr	r2, [r7, #4]
 8009842:	6812      	ldr	r2, [r2, #0]
 8009844:	430b      	orrs	r3, r1
 8009846:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	68db      	ldr	r3, [r3, #12]
 800984e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	695a      	ldr	r2, [r3, #20]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	699b      	ldr	r3, [r3, #24]
 800985a:	431a      	orrs	r2, r3
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	430a      	orrs	r2, r1
 8009862:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f042 0201 	orr.w	r2, r2, #1
 8009872:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2220      	movs	r2, #32
 800987e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2200      	movs	r2, #0
 8009886:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2200      	movs	r2, #0
 800988c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009890:	2300      	movs	r3, #0
}
 8009892:	4618      	mov	r0, r3
 8009894:	3710      	adds	r7, #16
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
 800989a:	bf00      	nop
 800989c:	000186a0 	.word	0x000186a0
 80098a0:	001e847f 	.word	0x001e847f
 80098a4:	003d08ff 	.word	0x003d08ff
 80098a8:	431bde83 	.word	0x431bde83
 80098ac:	10624dd3 	.word	0x10624dd3

080098b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b088      	sub	sp, #32
 80098b4:	af02      	add	r7, sp, #8
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	607a      	str	r2, [r7, #4]
 80098ba:	461a      	mov	r2, r3
 80098bc:	460b      	mov	r3, r1
 80098be:	817b      	strh	r3, [r7, #10]
 80098c0:	4613      	mov	r3, r2
 80098c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80098c4:	f7fe ffa6 	bl	8008814 <HAL_GetTick>
 80098c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	2b20      	cmp	r3, #32
 80098d4:	f040 80e0 	bne.w	8009a98 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	9300      	str	r3, [sp, #0]
 80098dc:	2319      	movs	r3, #25
 80098de:	2201      	movs	r2, #1
 80098e0:	4970      	ldr	r1, [pc, #448]	; (8009aa4 <HAL_I2C_Master_Transmit+0x1f4>)
 80098e2:	68f8      	ldr	r0, [r7, #12]
 80098e4:	f000 fc7e 	bl	800a1e4 <I2C_WaitOnFlagUntilTimeout>
 80098e8:	4603      	mov	r3, r0
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d001      	beq.n	80098f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80098ee:	2302      	movs	r3, #2
 80098f0:	e0d3      	b.n	8009a9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	d101      	bne.n	8009900 <HAL_I2C_Master_Transmit+0x50>
 80098fc:	2302      	movs	r3, #2
 80098fe:	e0cc      	b.n	8009a9a <HAL_I2C_Master_Transmit+0x1ea>
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2201      	movs	r2, #1
 8009904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f003 0301 	and.w	r3, r3, #1
 8009912:	2b01      	cmp	r3, #1
 8009914:	d007      	beq.n	8009926 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	681a      	ldr	r2, [r3, #0]
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f042 0201 	orr.w	r2, r2, #1
 8009924:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009934:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2221      	movs	r2, #33	; 0x21
 800993a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2210      	movs	r2, #16
 8009942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2200      	movs	r2, #0
 800994a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	893a      	ldrh	r2, [r7, #8]
 8009956:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800995c:	b29a      	uxth	r2, r3
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	4a50      	ldr	r2, [pc, #320]	; (8009aa8 <HAL_I2C_Master_Transmit+0x1f8>)
 8009966:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009968:	8979      	ldrh	r1, [r7, #10]
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	6a3a      	ldr	r2, [r7, #32]
 800996e:	68f8      	ldr	r0, [r7, #12]
 8009970:	f000 fae8 	bl	8009f44 <I2C_MasterRequestWrite>
 8009974:	4603      	mov	r3, r0
 8009976:	2b00      	cmp	r3, #0
 8009978:	d001      	beq.n	800997e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800997a:	2301      	movs	r3, #1
 800997c:	e08d      	b.n	8009a9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800997e:	2300      	movs	r3, #0
 8009980:	613b      	str	r3, [r7, #16]
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	695b      	ldr	r3, [r3, #20]
 8009988:	613b      	str	r3, [r7, #16]
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	699b      	ldr	r3, [r3, #24]
 8009990:	613b      	str	r3, [r7, #16]
 8009992:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009994:	e066      	b.n	8009a64 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009996:	697a      	ldr	r2, [r7, #20]
 8009998:	6a39      	ldr	r1, [r7, #32]
 800999a:	68f8      	ldr	r0, [r7, #12]
 800999c:	f000 fd3c 	bl	800a418 <I2C_WaitOnTXEFlagUntilTimeout>
 80099a0:	4603      	mov	r3, r0
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d00d      	beq.n	80099c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099aa:	2b04      	cmp	r3, #4
 80099ac:	d107      	bne.n	80099be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	681a      	ldr	r2, [r3, #0]
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80099be:	2301      	movs	r3, #1
 80099c0:	e06b      	b.n	8009a9a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c6:	781a      	ldrb	r2, [r3, #0]
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d2:	1c5a      	adds	r2, r3, #1
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099dc:	b29b      	uxth	r3, r3
 80099de:	3b01      	subs	r3, #1
 80099e0:	b29a      	uxth	r2, r3
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099ea:	3b01      	subs	r3, #1
 80099ec:	b29a      	uxth	r2, r3
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	695b      	ldr	r3, [r3, #20]
 80099f8:	f003 0304 	and.w	r3, r3, #4
 80099fc:	2b04      	cmp	r3, #4
 80099fe:	d11b      	bne.n	8009a38 <HAL_I2C_Master_Transmit+0x188>
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d017      	beq.n	8009a38 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a0c:	781a      	ldrb	r2, [r3, #0]
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a18:	1c5a      	adds	r2, r3, #1
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	3b01      	subs	r3, #1
 8009a26:	b29a      	uxth	r2, r3
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a30:	3b01      	subs	r3, #1
 8009a32:	b29a      	uxth	r2, r3
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a38:	697a      	ldr	r2, [r7, #20]
 8009a3a:	6a39      	ldr	r1, [r7, #32]
 8009a3c:	68f8      	ldr	r0, [r7, #12]
 8009a3e:	f000 fd33 	bl	800a4a8 <I2C_WaitOnBTFFlagUntilTimeout>
 8009a42:	4603      	mov	r3, r0
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d00d      	beq.n	8009a64 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a4c:	2b04      	cmp	r3, #4
 8009a4e:	d107      	bne.n	8009a60 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a5e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009a60:	2301      	movs	r3, #1
 8009a62:	e01a      	b.n	8009a9a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d194      	bne.n	8009996 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2220      	movs	r2, #32
 8009a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2200      	movs	r2, #0
 8009a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009a94:	2300      	movs	r3, #0
 8009a96:	e000      	b.n	8009a9a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009a98:	2302      	movs	r3, #2
  }
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3718      	adds	r7, #24
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	00100002 	.word	0x00100002
 8009aa8:	ffff0000 	.word	0xffff0000

08009aac <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b08c      	sub	sp, #48	; 0x30
 8009ab0:	af02      	add	r7, sp, #8
 8009ab2:	60f8      	str	r0, [r7, #12]
 8009ab4:	607a      	str	r2, [r7, #4]
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	460b      	mov	r3, r1
 8009aba:	817b      	strh	r3, [r7, #10]
 8009abc:	4613      	mov	r3, r2
 8009abe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009ac0:	f7fe fea8 	bl	8008814 <HAL_GetTick>
 8009ac4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	2b20      	cmp	r3, #32
 8009ad0:	f040 8217 	bne.w	8009f02 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad6:	9300      	str	r3, [sp, #0]
 8009ad8:	2319      	movs	r3, #25
 8009ada:	2201      	movs	r2, #1
 8009adc:	497c      	ldr	r1, [pc, #496]	; (8009cd0 <HAL_I2C_Master_Receive+0x224>)
 8009ade:	68f8      	ldr	r0, [r7, #12]
 8009ae0:	f000 fb80 	bl	800a1e4 <I2C_WaitOnFlagUntilTimeout>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d001      	beq.n	8009aee <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8009aea:	2302      	movs	r3, #2
 8009aec:	e20a      	b.n	8009f04 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d101      	bne.n	8009afc <HAL_I2C_Master_Receive+0x50>
 8009af8:	2302      	movs	r3, #2
 8009afa:	e203      	b.n	8009f04 <HAL_I2C_Master_Receive+0x458>
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2201      	movs	r2, #1
 8009b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f003 0301 	and.w	r3, r3, #1
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d007      	beq.n	8009b22 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	681a      	ldr	r2, [r3, #0]
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f042 0201 	orr.w	r2, r2, #1
 8009b20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	681a      	ldr	r2, [r3, #0]
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	2222      	movs	r2, #34	; 0x22
 8009b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2210      	movs	r2, #16
 8009b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2200      	movs	r2, #0
 8009b46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	687a      	ldr	r2, [r7, #4]
 8009b4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	893a      	ldrh	r2, [r7, #8]
 8009b52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b58:	b29a      	uxth	r2, r3
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	4a5c      	ldr	r2, [pc, #368]	; (8009cd4 <HAL_I2C_Master_Receive+0x228>)
 8009b62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009b64:	8979      	ldrh	r1, [r7, #10]
 8009b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b6a:	68f8      	ldr	r0, [r7, #12]
 8009b6c:	f000 fa6c 	bl	800a048 <I2C_MasterRequestRead>
 8009b70:	4603      	mov	r3, r0
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d001      	beq.n	8009b7a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8009b76:	2301      	movs	r3, #1
 8009b78:	e1c4      	b.n	8009f04 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d113      	bne.n	8009baa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b82:	2300      	movs	r3, #0
 8009b84:	623b      	str	r3, [r7, #32]
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	695b      	ldr	r3, [r3, #20]
 8009b8c:	623b      	str	r3, [r7, #32]
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	699b      	ldr	r3, [r3, #24]
 8009b94:	623b      	str	r3, [r7, #32]
 8009b96:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ba6:	601a      	str	r2, [r3, #0]
 8009ba8:	e198      	b.n	8009edc <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d11b      	bne.n	8009bea <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009bc0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	61fb      	str	r3, [r7, #28]
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	695b      	ldr	r3, [r3, #20]
 8009bcc:	61fb      	str	r3, [r7, #28]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	699b      	ldr	r3, [r3, #24]
 8009bd4:	61fb      	str	r3, [r7, #28]
 8009bd6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	681a      	ldr	r2, [r3, #0]
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009be6:	601a      	str	r2, [r3, #0]
 8009be8:	e178      	b.n	8009edc <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bee:	2b02      	cmp	r3, #2
 8009bf0:	d11b      	bne.n	8009c2a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c00:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c12:	2300      	movs	r3, #0
 8009c14:	61bb      	str	r3, [r7, #24]
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	695b      	ldr	r3, [r3, #20]
 8009c1c:	61bb      	str	r3, [r7, #24]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	699b      	ldr	r3, [r3, #24]
 8009c24:	61bb      	str	r3, [r7, #24]
 8009c26:	69bb      	ldr	r3, [r7, #24]
 8009c28:	e158      	b.n	8009edc <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	681a      	ldr	r2, [r3, #0]
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009c38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	617b      	str	r3, [r7, #20]
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	695b      	ldr	r3, [r3, #20]
 8009c44:	617b      	str	r3, [r7, #20]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	699b      	ldr	r3, [r3, #24]
 8009c4c:	617b      	str	r3, [r7, #20]
 8009c4e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009c50:	e144      	b.n	8009edc <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c56:	2b03      	cmp	r3, #3
 8009c58:	f200 80f1 	bhi.w	8009e3e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	d123      	bne.n	8009cac <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009c68:	68f8      	ldr	r0, [r7, #12]
 8009c6a:	f000 fc65 	bl	800a538 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d001      	beq.n	8009c78 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8009c74:	2301      	movs	r3, #1
 8009c76:	e145      	b.n	8009f04 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	691a      	ldr	r2, [r3, #16]
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c82:	b2d2      	uxtb	r2, r2
 8009c84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8a:	1c5a      	adds	r2, r3, #1
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c94:	3b01      	subs	r3, #1
 8009c96:	b29a      	uxth	r2, r3
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	3b01      	subs	r3, #1
 8009ca4:	b29a      	uxth	r2, r3
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009caa:	e117      	b.n	8009edc <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cb0:	2b02      	cmp	r3, #2
 8009cb2:	d14e      	bne.n	8009d52 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb6:	9300      	str	r3, [sp, #0]
 8009cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cba:	2200      	movs	r2, #0
 8009cbc:	4906      	ldr	r1, [pc, #24]	; (8009cd8 <HAL_I2C_Master_Receive+0x22c>)
 8009cbe:	68f8      	ldr	r0, [r7, #12]
 8009cc0:	f000 fa90 	bl	800a1e4 <I2C_WaitOnFlagUntilTimeout>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d008      	beq.n	8009cdc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	e11a      	b.n	8009f04 <HAL_I2C_Master_Receive+0x458>
 8009cce:	bf00      	nop
 8009cd0:	00100002 	.word	0x00100002
 8009cd4:	ffff0000 	.word	0xffff0000
 8009cd8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	681a      	ldr	r2, [r3, #0]
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009cea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	691a      	ldr	r2, [r3, #16]
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf6:	b2d2      	uxtb	r2, r2
 8009cf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cfe:	1c5a      	adds	r2, r3, #1
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d08:	3b01      	subs	r3, #1
 8009d0a:	b29a      	uxth	r2, r3
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d14:	b29b      	uxth	r3, r3
 8009d16:	3b01      	subs	r3, #1
 8009d18:	b29a      	uxth	r2, r3
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	691a      	ldr	r2, [r3, #16]
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d28:	b2d2      	uxtb	r2, r2
 8009d2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d30:	1c5a      	adds	r2, r3, #1
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d3a:	3b01      	subs	r3, #1
 8009d3c:	b29a      	uxth	r2, r3
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d46:	b29b      	uxth	r3, r3
 8009d48:	3b01      	subs	r3, #1
 8009d4a:	b29a      	uxth	r2, r3
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009d50:	e0c4      	b.n	8009edc <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d54:	9300      	str	r3, [sp, #0]
 8009d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d58:	2200      	movs	r2, #0
 8009d5a:	496c      	ldr	r1, [pc, #432]	; (8009f0c <HAL_I2C_Master_Receive+0x460>)
 8009d5c:	68f8      	ldr	r0, [r7, #12]
 8009d5e:	f000 fa41 	bl	800a1e4 <I2C_WaitOnFlagUntilTimeout>
 8009d62:	4603      	mov	r3, r0
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d001      	beq.n	8009d6c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8009d68:	2301      	movs	r3, #1
 8009d6a:	e0cb      	b.n	8009f04 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	681a      	ldr	r2, [r3, #0]
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	691a      	ldr	r2, [r3, #16]
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d86:	b2d2      	uxtb	r2, r2
 8009d88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d8e:	1c5a      	adds	r2, r3, #1
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d98:	3b01      	subs	r3, #1
 8009d9a:	b29a      	uxth	r2, r3
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009da4:	b29b      	uxth	r3, r3
 8009da6:	3b01      	subs	r3, #1
 8009da8:	b29a      	uxth	r2, r3
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db0:	9300      	str	r3, [sp, #0]
 8009db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db4:	2200      	movs	r2, #0
 8009db6:	4955      	ldr	r1, [pc, #340]	; (8009f0c <HAL_I2C_Master_Receive+0x460>)
 8009db8:	68f8      	ldr	r0, [r7, #12]
 8009dba:	f000 fa13 	bl	800a1e4 <I2C_WaitOnFlagUntilTimeout>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d001      	beq.n	8009dc8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	e09d      	b.n	8009f04 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009dd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	691a      	ldr	r2, [r3, #16]
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de2:	b2d2      	uxtb	r2, r2
 8009de4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dea:	1c5a      	adds	r2, r3, #1
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009df4:	3b01      	subs	r3, #1
 8009df6:	b29a      	uxth	r2, r3
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e00:	b29b      	uxth	r3, r3
 8009e02:	3b01      	subs	r3, #1
 8009e04:	b29a      	uxth	r2, r3
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	691a      	ldr	r2, [r3, #16]
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e14:	b2d2      	uxtb	r2, r2
 8009e16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e1c:	1c5a      	adds	r2, r3, #1
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e26:	3b01      	subs	r3, #1
 8009e28:	b29a      	uxth	r2, r3
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e32:	b29b      	uxth	r3, r3
 8009e34:	3b01      	subs	r3, #1
 8009e36:	b29a      	uxth	r2, r3
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009e3c:	e04e      	b.n	8009edc <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009e42:	68f8      	ldr	r0, [r7, #12]
 8009e44:	f000 fb78 	bl	800a538 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d001      	beq.n	8009e52 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e058      	b.n	8009f04 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	691a      	ldr	r2, [r3, #16]
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e5c:	b2d2      	uxtb	r2, r2
 8009e5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e64:	1c5a      	adds	r2, r3, #1
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e6e:	3b01      	subs	r3, #1
 8009e70:	b29a      	uxth	r2, r3
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e7a:	b29b      	uxth	r3, r3
 8009e7c:	3b01      	subs	r3, #1
 8009e7e:	b29a      	uxth	r2, r3
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	695b      	ldr	r3, [r3, #20]
 8009e8a:	f003 0304 	and.w	r3, r3, #4
 8009e8e:	2b04      	cmp	r3, #4
 8009e90:	d124      	bne.n	8009edc <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e96:	2b03      	cmp	r3, #3
 8009e98:	d107      	bne.n	8009eaa <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	681a      	ldr	r2, [r3, #0]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ea8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	691a      	ldr	r2, [r3, #16]
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb4:	b2d2      	uxtb	r2, r2
 8009eb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ebc:	1c5a      	adds	r2, r3, #1
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ec6:	3b01      	subs	r3, #1
 8009ec8:	b29a      	uxth	r2, r3
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	3b01      	subs	r3, #1
 8009ed6:	b29a      	uxth	r2, r3
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	f47f aeb6 	bne.w	8009c52 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2220      	movs	r2, #32
 8009eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	2200      	movs	r2, #0
 8009efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009efe:	2300      	movs	r3, #0
 8009f00:	e000      	b.n	8009f04 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8009f02:	2302      	movs	r3, #2
  }
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3728      	adds	r7, #40	; 0x28
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}
 8009f0c:	00010004 	.word	0x00010004

08009f10 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b083      	sub	sp, #12
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f1e:	b2db      	uxtb	r3, r3
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	370c      	adds	r7, #12
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr

08009f2c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b083      	sub	sp, #12
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	370c      	adds	r7, #12
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr

08009f44 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b088      	sub	sp, #32
 8009f48:	af02      	add	r7, sp, #8
 8009f4a:	60f8      	str	r0, [r7, #12]
 8009f4c:	607a      	str	r2, [r7, #4]
 8009f4e:	603b      	str	r3, [r7, #0]
 8009f50:	460b      	mov	r3, r1
 8009f52:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f58:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	2b08      	cmp	r3, #8
 8009f5e:	d006      	beq.n	8009f6e <I2C_MasterRequestWrite+0x2a>
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	2b01      	cmp	r3, #1
 8009f64:	d003      	beq.n	8009f6e <I2C_MasterRequestWrite+0x2a>
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009f6c:	d108      	bne.n	8009f80 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	681a      	ldr	r2, [r3, #0]
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f7c:	601a      	str	r2, [r3, #0]
 8009f7e:	e00b      	b.n	8009f98 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f84:	2b12      	cmp	r3, #18
 8009f86:	d107      	bne.n	8009f98 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	681a      	ldr	r2, [r3, #0]
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f96:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	9300      	str	r3, [sp, #0]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009fa4:	68f8      	ldr	r0, [r7, #12]
 8009fa6:	f000 f91d 	bl	800a1e4 <I2C_WaitOnFlagUntilTimeout>
 8009faa:	4603      	mov	r3, r0
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d00d      	beq.n	8009fcc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fbe:	d103      	bne.n	8009fc8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009fc6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009fc8:	2303      	movs	r3, #3
 8009fca:	e035      	b.n	800a038 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	691b      	ldr	r3, [r3, #16]
 8009fd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009fd4:	d108      	bne.n	8009fe8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009fd6:	897b      	ldrh	r3, [r7, #10]
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	461a      	mov	r2, r3
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009fe4:	611a      	str	r2, [r3, #16]
 8009fe6:	e01b      	b.n	800a020 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009fe8:	897b      	ldrh	r3, [r7, #10]
 8009fea:	11db      	asrs	r3, r3, #7
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	f003 0306 	and.w	r3, r3, #6
 8009ff2:	b2db      	uxtb	r3, r3
 8009ff4:	f063 030f 	orn	r3, r3, #15
 8009ff8:	b2da      	uxtb	r2, r3
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	687a      	ldr	r2, [r7, #4]
 800a004:	490e      	ldr	r1, [pc, #56]	; (800a040 <I2C_MasterRequestWrite+0xfc>)
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	f000 f966 	bl	800a2d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d001      	beq.n	800a016 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a012:	2301      	movs	r3, #1
 800a014:	e010      	b.n	800a038 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a016:	897b      	ldrh	r3, [r7, #10]
 800a018:	b2da      	uxtb	r2, r3
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	4907      	ldr	r1, [pc, #28]	; (800a044 <I2C_MasterRequestWrite+0x100>)
 800a026:	68f8      	ldr	r0, [r7, #12]
 800a028:	f000 f956 	bl	800a2d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a02c:	4603      	mov	r3, r0
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d001      	beq.n	800a036 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a032:	2301      	movs	r3, #1
 800a034:	e000      	b.n	800a038 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a036:	2300      	movs	r3, #0
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3718      	adds	r7, #24
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	00010008 	.word	0x00010008
 800a044:	00010002 	.word	0x00010002

0800a048 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b088      	sub	sp, #32
 800a04c:	af02      	add	r7, sp, #8
 800a04e:	60f8      	str	r0, [r7, #12]
 800a050:	607a      	str	r2, [r7, #4]
 800a052:	603b      	str	r3, [r7, #0]
 800a054:	460b      	mov	r3, r1
 800a056:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a05c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a06c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	2b08      	cmp	r3, #8
 800a072:	d006      	beq.n	800a082 <I2C_MasterRequestRead+0x3a>
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	2b01      	cmp	r3, #1
 800a078:	d003      	beq.n	800a082 <I2C_MasterRequestRead+0x3a>
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a080:	d108      	bne.n	800a094 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	681a      	ldr	r2, [r3, #0]
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a090:	601a      	str	r2, [r3, #0]
 800a092:	e00b      	b.n	800a0ac <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a098:	2b11      	cmp	r3, #17
 800a09a:	d107      	bne.n	800a0ac <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	681a      	ldr	r2, [r3, #0]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a0aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	9300      	str	r3, [sp, #0]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a0b8:	68f8      	ldr	r0, [r7, #12]
 800a0ba:	f000 f893 	bl	800a1e4 <I2C_WaitOnFlagUntilTimeout>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d00d      	beq.n	800a0e0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0d2:	d103      	bne.n	800a0dc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a0dc:	2303      	movs	r3, #3
 800a0de:	e079      	b.n	800a1d4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	691b      	ldr	r3, [r3, #16]
 800a0e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0e8:	d108      	bne.n	800a0fc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a0ea:	897b      	ldrh	r3, [r7, #10]
 800a0ec:	b2db      	uxtb	r3, r3
 800a0ee:	f043 0301 	orr.w	r3, r3, #1
 800a0f2:	b2da      	uxtb	r2, r3
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	611a      	str	r2, [r3, #16]
 800a0fa:	e05f      	b.n	800a1bc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a0fc:	897b      	ldrh	r3, [r7, #10]
 800a0fe:	11db      	asrs	r3, r3, #7
 800a100:	b2db      	uxtb	r3, r3
 800a102:	f003 0306 	and.w	r3, r3, #6
 800a106:	b2db      	uxtb	r3, r3
 800a108:	f063 030f 	orn	r3, r3, #15
 800a10c:	b2da      	uxtb	r2, r3
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	687a      	ldr	r2, [r7, #4]
 800a118:	4930      	ldr	r1, [pc, #192]	; (800a1dc <I2C_MasterRequestRead+0x194>)
 800a11a:	68f8      	ldr	r0, [r7, #12]
 800a11c:	f000 f8dc 	bl	800a2d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a120:	4603      	mov	r3, r0
 800a122:	2b00      	cmp	r3, #0
 800a124:	d001      	beq.n	800a12a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800a126:	2301      	movs	r3, #1
 800a128:	e054      	b.n	800a1d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a12a:	897b      	ldrh	r3, [r7, #10]
 800a12c:	b2da      	uxtb	r2, r3
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	687a      	ldr	r2, [r7, #4]
 800a138:	4929      	ldr	r1, [pc, #164]	; (800a1e0 <I2C_MasterRequestRead+0x198>)
 800a13a:	68f8      	ldr	r0, [r7, #12]
 800a13c:	f000 f8cc 	bl	800a2d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a140:	4603      	mov	r3, r0
 800a142:	2b00      	cmp	r3, #0
 800a144:	d001      	beq.n	800a14a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800a146:	2301      	movs	r3, #1
 800a148:	e044      	b.n	800a1d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a14a:	2300      	movs	r3, #0
 800a14c:	613b      	str	r3, [r7, #16]
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	695b      	ldr	r3, [r3, #20]
 800a154:	613b      	str	r3, [r7, #16]
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	699b      	ldr	r3, [r3, #24]
 800a15c:	613b      	str	r3, [r7, #16]
 800a15e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a16e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	9300      	str	r3, [sp, #0]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2200      	movs	r2, #0
 800a178:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a17c:	68f8      	ldr	r0, [r7, #12]
 800a17e:	f000 f831 	bl	800a1e4 <I2C_WaitOnFlagUntilTimeout>
 800a182:	4603      	mov	r3, r0
 800a184:	2b00      	cmp	r3, #0
 800a186:	d00d      	beq.n	800a1a4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a196:	d103      	bne.n	800a1a0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a19e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800a1a0:	2303      	movs	r3, #3
 800a1a2:	e017      	b.n	800a1d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800a1a4:	897b      	ldrh	r3, [r7, #10]
 800a1a6:	11db      	asrs	r3, r3, #7
 800a1a8:	b2db      	uxtb	r3, r3
 800a1aa:	f003 0306 	and.w	r3, r3, #6
 800a1ae:	b2db      	uxtb	r3, r3
 800a1b0:	f063 030e 	orn	r3, r3, #14
 800a1b4:	b2da      	uxtb	r2, r3
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	687a      	ldr	r2, [r7, #4]
 800a1c0:	4907      	ldr	r1, [pc, #28]	; (800a1e0 <I2C_MasterRequestRead+0x198>)
 800a1c2:	68f8      	ldr	r0, [r7, #12]
 800a1c4:	f000 f888 	bl	800a2d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d001      	beq.n	800a1d2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	e000      	b.n	800a1d4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800a1d2:	2300      	movs	r3, #0
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3718      	adds	r7, #24
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}
 800a1dc:	00010008 	.word	0x00010008
 800a1e0:	00010002 	.word	0x00010002

0800a1e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b084      	sub	sp, #16
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	60f8      	str	r0, [r7, #12]
 800a1ec:	60b9      	str	r1, [r7, #8]
 800a1ee:	603b      	str	r3, [r7, #0]
 800a1f0:	4613      	mov	r3, r2
 800a1f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a1f4:	e048      	b.n	800a288 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1fc:	d044      	beq.n	800a288 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1fe:	f7fe fb09 	bl	8008814 <HAL_GetTick>
 800a202:	4602      	mov	r2, r0
 800a204:	69bb      	ldr	r3, [r7, #24]
 800a206:	1ad3      	subs	r3, r2, r3
 800a208:	683a      	ldr	r2, [r7, #0]
 800a20a:	429a      	cmp	r2, r3
 800a20c:	d302      	bcc.n	800a214 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d139      	bne.n	800a288 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	0c1b      	lsrs	r3, r3, #16
 800a218:	b2db      	uxtb	r3, r3
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	d10d      	bne.n	800a23a <I2C_WaitOnFlagUntilTimeout+0x56>
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	695b      	ldr	r3, [r3, #20]
 800a224:	43da      	mvns	r2, r3
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	4013      	ands	r3, r2
 800a22a:	b29b      	uxth	r3, r3
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	bf0c      	ite	eq
 800a230:	2301      	moveq	r3, #1
 800a232:	2300      	movne	r3, #0
 800a234:	b2db      	uxtb	r3, r3
 800a236:	461a      	mov	r2, r3
 800a238:	e00c      	b.n	800a254 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	699b      	ldr	r3, [r3, #24]
 800a240:	43da      	mvns	r2, r3
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	4013      	ands	r3, r2
 800a246:	b29b      	uxth	r3, r3
 800a248:	2b00      	cmp	r3, #0
 800a24a:	bf0c      	ite	eq
 800a24c:	2301      	moveq	r3, #1
 800a24e:	2300      	movne	r3, #0
 800a250:	b2db      	uxtb	r3, r3
 800a252:	461a      	mov	r2, r3
 800a254:	79fb      	ldrb	r3, [r7, #7]
 800a256:	429a      	cmp	r2, r3
 800a258:	d116      	bne.n	800a288 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2200      	movs	r2, #0
 800a25e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2220      	movs	r2, #32
 800a264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2200      	movs	r2, #0
 800a26c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a274:	f043 0220 	orr.w	r2, r3, #32
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2200      	movs	r2, #0
 800a280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a284:	2301      	movs	r3, #1
 800a286:	e023      	b.n	800a2d0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	0c1b      	lsrs	r3, r3, #16
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	2b01      	cmp	r3, #1
 800a290:	d10d      	bne.n	800a2ae <I2C_WaitOnFlagUntilTimeout+0xca>
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	695b      	ldr	r3, [r3, #20]
 800a298:	43da      	mvns	r2, r3
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	4013      	ands	r3, r2
 800a29e:	b29b      	uxth	r3, r3
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	bf0c      	ite	eq
 800a2a4:	2301      	moveq	r3, #1
 800a2a6:	2300      	movne	r3, #0
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	e00c      	b.n	800a2c8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	699b      	ldr	r3, [r3, #24]
 800a2b4:	43da      	mvns	r2, r3
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	4013      	ands	r3, r2
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	bf0c      	ite	eq
 800a2c0:	2301      	moveq	r3, #1
 800a2c2:	2300      	movne	r3, #0
 800a2c4:	b2db      	uxtb	r3, r3
 800a2c6:	461a      	mov	r2, r3
 800a2c8:	79fb      	ldrb	r3, [r7, #7]
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d093      	beq.n	800a1f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a2ce:	2300      	movs	r3, #0
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3710      	adds	r7, #16
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	60b9      	str	r1, [r7, #8]
 800a2e2:	607a      	str	r2, [r7, #4]
 800a2e4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a2e6:	e071      	b.n	800a3cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	695b      	ldr	r3, [r3, #20]
 800a2ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a2f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2f6:	d123      	bne.n	800a340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	681a      	ldr	r2, [r3, #0]
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a306:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a310:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2200      	movs	r2, #0
 800a316:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	2220      	movs	r2, #32
 800a31c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2200      	movs	r2, #0
 800a324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a32c:	f043 0204 	orr.w	r2, r3, #4
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2200      	movs	r2, #0
 800a338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a33c:	2301      	movs	r3, #1
 800a33e:	e067      	b.n	800a410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a346:	d041      	beq.n	800a3cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a348:	f7fe fa64 	bl	8008814 <HAL_GetTick>
 800a34c:	4602      	mov	r2, r0
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	1ad3      	subs	r3, r2, r3
 800a352:	687a      	ldr	r2, [r7, #4]
 800a354:	429a      	cmp	r2, r3
 800a356:	d302      	bcc.n	800a35e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d136      	bne.n	800a3cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	0c1b      	lsrs	r3, r3, #16
 800a362:	b2db      	uxtb	r3, r3
 800a364:	2b01      	cmp	r3, #1
 800a366:	d10c      	bne.n	800a382 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	695b      	ldr	r3, [r3, #20]
 800a36e:	43da      	mvns	r2, r3
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	4013      	ands	r3, r2
 800a374:	b29b      	uxth	r3, r3
 800a376:	2b00      	cmp	r3, #0
 800a378:	bf14      	ite	ne
 800a37a:	2301      	movne	r3, #1
 800a37c:	2300      	moveq	r3, #0
 800a37e:	b2db      	uxtb	r3, r3
 800a380:	e00b      	b.n	800a39a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	699b      	ldr	r3, [r3, #24]
 800a388:	43da      	mvns	r2, r3
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	4013      	ands	r3, r2
 800a38e:	b29b      	uxth	r3, r3
 800a390:	2b00      	cmp	r3, #0
 800a392:	bf14      	ite	ne
 800a394:	2301      	movne	r3, #1
 800a396:	2300      	moveq	r3, #0
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d016      	beq.n	800a3cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2220      	movs	r2, #32
 800a3a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3b8:	f043 0220 	orr.w	r2, r3, #32
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	e021      	b.n	800a410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	0c1b      	lsrs	r3, r3, #16
 800a3d0:	b2db      	uxtb	r3, r3
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d10c      	bne.n	800a3f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	695b      	ldr	r3, [r3, #20]
 800a3dc:	43da      	mvns	r2, r3
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	4013      	ands	r3, r2
 800a3e2:	b29b      	uxth	r3, r3
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	bf14      	ite	ne
 800a3e8:	2301      	movne	r3, #1
 800a3ea:	2300      	moveq	r3, #0
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	e00b      	b.n	800a408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	699b      	ldr	r3, [r3, #24]
 800a3f6:	43da      	mvns	r2, r3
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	4013      	ands	r3, r2
 800a3fc:	b29b      	uxth	r3, r3
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	bf14      	ite	ne
 800a402:	2301      	movne	r3, #1
 800a404:	2300      	moveq	r3, #0
 800a406:	b2db      	uxtb	r3, r3
 800a408:	2b00      	cmp	r3, #0
 800a40a:	f47f af6d 	bne.w	800a2e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a40e:	2300      	movs	r3, #0
}
 800a410:	4618      	mov	r0, r3
 800a412:	3710      	adds	r7, #16
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b084      	sub	sp, #16
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	60f8      	str	r0, [r7, #12]
 800a420:	60b9      	str	r1, [r7, #8]
 800a422:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a424:	e034      	b.n	800a490 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a426:	68f8      	ldr	r0, [r7, #12]
 800a428:	f000 f8e3 	bl	800a5f2 <I2C_IsAcknowledgeFailed>
 800a42c:	4603      	mov	r3, r0
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d001      	beq.n	800a436 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a432:	2301      	movs	r3, #1
 800a434:	e034      	b.n	800a4a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a43c:	d028      	beq.n	800a490 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a43e:	f7fe f9e9 	bl	8008814 <HAL_GetTick>
 800a442:	4602      	mov	r2, r0
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	1ad3      	subs	r3, r2, r3
 800a448:	68ba      	ldr	r2, [r7, #8]
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d302      	bcc.n	800a454 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d11d      	bne.n	800a490 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	695b      	ldr	r3, [r3, #20]
 800a45a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a45e:	2b80      	cmp	r3, #128	; 0x80
 800a460:	d016      	beq.n	800a490 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2200      	movs	r2, #0
 800a466:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2220      	movs	r2, #32
 800a46c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2200      	movs	r2, #0
 800a474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a47c:	f043 0220 	orr.w	r2, r3, #32
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2200      	movs	r2, #0
 800a488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a48c:	2301      	movs	r3, #1
 800a48e:	e007      	b.n	800a4a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	695b      	ldr	r3, [r3, #20]
 800a496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a49a:	2b80      	cmp	r3, #128	; 0x80
 800a49c:	d1c3      	bne.n	800a426 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a49e:	2300      	movs	r3, #0
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3710      	adds	r7, #16
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b084      	sub	sp, #16
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	60f8      	str	r0, [r7, #12]
 800a4b0:	60b9      	str	r1, [r7, #8]
 800a4b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a4b4:	e034      	b.n	800a520 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a4b6:	68f8      	ldr	r0, [r7, #12]
 800a4b8:	f000 f89b 	bl	800a5f2 <I2C_IsAcknowledgeFailed>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d001      	beq.n	800a4c6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	e034      	b.n	800a530 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4cc:	d028      	beq.n	800a520 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4ce:	f7fe f9a1 	bl	8008814 <HAL_GetTick>
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	1ad3      	subs	r3, r2, r3
 800a4d8:	68ba      	ldr	r2, [r7, #8]
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d302      	bcc.n	800a4e4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d11d      	bne.n	800a520 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	695b      	ldr	r3, [r3, #20]
 800a4ea:	f003 0304 	and.w	r3, r3, #4
 800a4ee:	2b04      	cmp	r3, #4
 800a4f0:	d016      	beq.n	800a520 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2220      	movs	r2, #32
 800a4fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2200      	movs	r2, #0
 800a504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a50c:	f043 0220 	orr.w	r2, r3, #32
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2200      	movs	r2, #0
 800a518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a51c:	2301      	movs	r3, #1
 800a51e:	e007      	b.n	800a530 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	695b      	ldr	r3, [r3, #20]
 800a526:	f003 0304 	and.w	r3, r3, #4
 800a52a:	2b04      	cmp	r3, #4
 800a52c:	d1c3      	bne.n	800a4b6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a52e:	2300      	movs	r3, #0
}
 800a530:	4618      	mov	r0, r3
 800a532:	3710      	adds	r7, #16
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}

0800a538 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	60b9      	str	r1, [r7, #8]
 800a542:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a544:	e049      	b.n	800a5da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	695b      	ldr	r3, [r3, #20]
 800a54c:	f003 0310 	and.w	r3, r3, #16
 800a550:	2b10      	cmp	r3, #16
 800a552:	d119      	bne.n	800a588 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f06f 0210 	mvn.w	r2, #16
 800a55c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	2200      	movs	r2, #0
 800a562:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2220      	movs	r2, #32
 800a568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2200      	movs	r2, #0
 800a570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2200      	movs	r2, #0
 800a580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a584:	2301      	movs	r3, #1
 800a586:	e030      	b.n	800a5ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a588:	f7fe f944 	bl	8008814 <HAL_GetTick>
 800a58c:	4602      	mov	r2, r0
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	1ad3      	subs	r3, r2, r3
 800a592:	68ba      	ldr	r2, [r7, #8]
 800a594:	429a      	cmp	r2, r3
 800a596:	d302      	bcc.n	800a59e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d11d      	bne.n	800a5da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	695b      	ldr	r3, [r3, #20]
 800a5a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5a8:	2b40      	cmp	r3, #64	; 0x40
 800a5aa:	d016      	beq.n	800a5da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2220      	movs	r2, #32
 800a5b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5c6:	f043 0220 	orr.w	r2, r3, #32
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	e007      	b.n	800a5ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	695b      	ldr	r3, [r3, #20]
 800a5e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5e4:	2b40      	cmp	r3, #64	; 0x40
 800a5e6:	d1ae      	bne.n	800a546 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a5e8:	2300      	movs	r3, #0
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3710      	adds	r7, #16
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}

0800a5f2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a5f2:	b480      	push	{r7}
 800a5f4:	b083      	sub	sp, #12
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	695b      	ldr	r3, [r3, #20]
 800a600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a608:	d11b      	bne.n	800a642 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a612:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2200      	movs	r2, #0
 800a618:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2220      	movs	r2, #32
 800a61e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2200      	movs	r2, #0
 800a626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a62e:	f043 0204 	orr.w	r2, r3, #4
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2200      	movs	r2, #0
 800a63a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a63e:	2301      	movs	r3, #1
 800a640:	e000      	b.n	800a644 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a642:	2300      	movs	r3, #0
}
 800a644:	4618      	mov	r0, r3
 800a646:	370c      	adds	r7, #12
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr

0800a650 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a650:	b480      	push	{r7}
 800a652:	b083      	sub	sp, #12
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a660:	b2db      	uxtb	r3, r3
 800a662:	2b20      	cmp	r3, #32
 800a664:	d129      	bne.n	800a6ba <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2224      	movs	r2, #36	; 0x24
 800a66a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	681a      	ldr	r2, [r3, #0]
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f022 0201 	bic.w	r2, r2, #1
 800a67c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f022 0210 	bic.w	r2, r2, #16
 800a68c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	683a      	ldr	r2, [r7, #0]
 800a69a:	430a      	orrs	r2, r1
 800a69c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	681a      	ldr	r2, [r3, #0]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f042 0201 	orr.w	r2, r2, #1
 800a6ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2220      	movs	r2, #32
 800a6b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	e000      	b.n	800a6bc <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800a6ba:	2302      	movs	r3, #2
  }
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	370c      	adds	r7, #12
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr

0800a6c8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b085      	sub	sp, #20
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6dc:	b2db      	uxtb	r3, r3
 800a6de:	2b20      	cmp	r3, #32
 800a6e0:	d12a      	bne.n	800a738 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2224      	movs	r2, #36	; 0x24
 800a6e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	681a      	ldr	r2, [r3, #0]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f022 0201 	bic.w	r2, r2, #1
 800a6f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a700:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800a702:	89fb      	ldrh	r3, [r7, #14]
 800a704:	f023 030f 	bic.w	r3, r3, #15
 800a708:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	b29a      	uxth	r2, r3
 800a70e:	89fb      	ldrh	r3, [r7, #14]
 800a710:	4313      	orrs	r3, r2
 800a712:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	89fa      	ldrh	r2, [r7, #14]
 800a71a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	681a      	ldr	r2, [r3, #0]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f042 0201 	orr.w	r2, r2, #1
 800a72a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2220      	movs	r2, #32
 800a730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a734:	2300      	movs	r3, #0
 800a736:	e000      	b.n	800a73a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800a738:	2302      	movs	r3, #2
  }
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3714      	adds	r7, #20
 800a73e:	46bd      	mov	sp, r7
 800a740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a744:	4770      	bx	lr
	...

0800a748 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b086      	sub	sp, #24
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d101      	bne.n	800a75a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a756:	2301      	movs	r3, #1
 800a758:	e267      	b.n	800ac2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f003 0301 	and.w	r3, r3, #1
 800a762:	2b00      	cmp	r3, #0
 800a764:	d075      	beq.n	800a852 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a766:	4b88      	ldr	r3, [pc, #544]	; (800a988 <HAL_RCC_OscConfig+0x240>)
 800a768:	689b      	ldr	r3, [r3, #8]
 800a76a:	f003 030c 	and.w	r3, r3, #12
 800a76e:	2b04      	cmp	r3, #4
 800a770:	d00c      	beq.n	800a78c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a772:	4b85      	ldr	r3, [pc, #532]	; (800a988 <HAL_RCC_OscConfig+0x240>)
 800a774:	689b      	ldr	r3, [r3, #8]
 800a776:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a77a:	2b08      	cmp	r3, #8
 800a77c:	d112      	bne.n	800a7a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a77e:	4b82      	ldr	r3, [pc, #520]	; (800a988 <HAL_RCC_OscConfig+0x240>)
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a786:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a78a:	d10b      	bne.n	800a7a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a78c:	4b7e      	ldr	r3, [pc, #504]	; (800a988 <HAL_RCC_OscConfig+0x240>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a794:	2b00      	cmp	r3, #0
 800a796:	d05b      	beq.n	800a850 <HAL_RCC_OscConfig+0x108>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	685b      	ldr	r3, [r3, #4]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d157      	bne.n	800a850 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	e242      	b.n	800ac2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	685b      	ldr	r3, [r3, #4]
 800a7a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7ac:	d106      	bne.n	800a7bc <HAL_RCC_OscConfig+0x74>
 800a7ae:	4b76      	ldr	r3, [pc, #472]	; (800a988 <HAL_RCC_OscConfig+0x240>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	4a75      	ldr	r2, [pc, #468]	; (800a988 <HAL_RCC_OscConfig+0x240>)
 800a7b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a7b8:	6013      	str	r3, [r2, #0]
 800a7ba:	e01d      	b.n	800a7f8 <HAL_RCC_OscConfig+0xb0>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a7c4:	d10c      	bne.n	800a7e0 <HAL_RCC_OscConfig+0x98>
 800a7c6:	4b70      	ldr	r3, [pc, #448]	; (800a988 <HAL_RCC_OscConfig+0x240>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4a6f      	ldr	r2, [pc, #444]	; (800a988 <HAL_RCC_OscConfig+0x240>)
 800a7cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a7d0:	6013      	str	r3, [r2, #0]
 800a7d2:	4b6d      	ldr	r3, [pc, #436]	; (800a988 <HAL_RCC_OscConfig+0x240>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4a6c      	ldr	r2, [pc, #432]	; (800a988 <HAL_RCC_OscConfig+0x240>)
 800a7d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a7dc:	6013      	str	r3, [r2, #0]
 800a7de:	e00b      	b.n	800a7f8 <HAL_RCC_OscConfig+0xb0>
 800a7e0:	4b69      	ldr	r3, [pc, #420]	; (800a988 <HAL_RCC_OscConfig+0x240>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	4a68      	ldr	r2, [pc, #416]	; (800a988 <HAL_RCC_OscConfig+0x240>)
 800a7e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a7ea:	6013      	str	r3, [r2, #0]
 800a7ec:	4b66      	ldr	r3, [pc, #408]	; (800a988 <HAL_RCC_OscConfig+0x240>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a65      	ldr	r2, [pc, #404]	; (800a988 <HAL_RCC_OscConfig+0x240>)
 800a7f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a7f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	685b      	ldr	r3, [r3, #4]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d013      	beq.n	800a828 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a800:	f7fe f808 	bl	8008814 <HAL_GetTick>
 800a804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a806:	e008      	b.n	800a81a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a808:	f7fe f804 	bl	8008814 <HAL_GetTick>
 800a80c:	4602      	mov	r2, r0
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	1ad3      	subs	r3, r2, r3
 800a812:	2b64      	cmp	r3, #100	; 0x64
 800a814:	d901      	bls.n	800a81a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a816:	2303      	movs	r3, #3
 800a818:	e207      	b.n	800ac2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a81a:	4b5b      	ldr	r3, [pc, #364]	; (800a988 <HAL_RCC_OscConfig+0x240>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a822:	2b00      	cmp	r3, #0
 800a824:	d0f0      	beq.n	800a808 <HAL_RCC_OscConfig+0xc0>
 800a826:	e014      	b.n	800a852 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a828:	f7fd fff4 	bl	8008814 <HAL_GetTick>
 800a82c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a82e:	e008      	b.n	800a842 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a830:	f7fd fff0 	bl	8008814 <HAL_GetTick>
 800a834:	4602      	mov	r2, r0
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	1ad3      	subs	r3, r2, r3
 800a83a:	2b64      	cmp	r3, #100	; 0x64
 800a83c:	d901      	bls.n	800a842 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a83e:	2303      	movs	r3, #3
 800a840:	e1f3      	b.n	800ac2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a842:	4b51      	ldr	r3, [pc, #324]	; (800a988 <HAL_RCC_OscConfig+0x240>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d1f0      	bne.n	800a830 <HAL_RCC_OscConfig+0xe8>
 800a84e:	e000      	b.n	800a852 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f003 0302 	and.w	r3, r3, #2
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d063      	beq.n	800a926 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a85e:	4b4a      	ldr	r3, [pc, #296]	; (800a988 <HAL_RCC_OscConfig+0x240>)
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	f003 030c 	and.w	r3, r3, #12
 800a866:	2b00      	cmp	r3, #0
 800a868:	d00b      	beq.n	800a882 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a86a:	4b47      	ldr	r3, [pc, #284]	; (800a988 <HAL_RCC_OscConfig+0x240>)
 800a86c:	689b      	ldr	r3, [r3, #8]
 800a86e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a872:	2b08      	cmp	r3, #8
 800a874:	d11c      	bne.n	800a8b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a876:	4b44      	ldr	r3, [pc, #272]	; (800a988 <HAL_RCC_OscConfig+0x240>)
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d116      	bne.n	800a8b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a882:	4b41      	ldr	r3, [pc, #260]	; (800a988 <HAL_RCC_OscConfig+0x240>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f003 0302 	and.w	r3, r3, #2
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d005      	beq.n	800a89a <HAL_RCC_OscConfig+0x152>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	68db      	ldr	r3, [r3, #12]
 800a892:	2b01      	cmp	r3, #1
 800a894:	d001      	beq.n	800a89a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a896:	2301      	movs	r3, #1
 800a898:	e1c7      	b.n	800ac2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a89a:	4b3b      	ldr	r3, [pc, #236]	; (800a988 <HAL_RCC_OscConfig+0x240>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	691b      	ldr	r3, [r3, #16]
 800a8a6:	00db      	lsls	r3, r3, #3
 800a8a8:	4937      	ldr	r1, [pc, #220]	; (800a988 <HAL_RCC_OscConfig+0x240>)
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a8ae:	e03a      	b.n	800a926 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	68db      	ldr	r3, [r3, #12]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d020      	beq.n	800a8fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a8b8:	4b34      	ldr	r3, [pc, #208]	; (800a98c <HAL_RCC_OscConfig+0x244>)
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8be:	f7fd ffa9 	bl	8008814 <HAL_GetTick>
 800a8c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a8c4:	e008      	b.n	800a8d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a8c6:	f7fd ffa5 	bl	8008814 <HAL_GetTick>
 800a8ca:	4602      	mov	r2, r0
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	1ad3      	subs	r3, r2, r3
 800a8d0:	2b02      	cmp	r3, #2
 800a8d2:	d901      	bls.n	800a8d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a8d4:	2303      	movs	r3, #3
 800a8d6:	e1a8      	b.n	800ac2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a8d8:	4b2b      	ldr	r3, [pc, #172]	; (800a988 <HAL_RCC_OscConfig+0x240>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f003 0302 	and.w	r3, r3, #2
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d0f0      	beq.n	800a8c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a8e4:	4b28      	ldr	r3, [pc, #160]	; (800a988 <HAL_RCC_OscConfig+0x240>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	691b      	ldr	r3, [r3, #16]
 800a8f0:	00db      	lsls	r3, r3, #3
 800a8f2:	4925      	ldr	r1, [pc, #148]	; (800a988 <HAL_RCC_OscConfig+0x240>)
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	600b      	str	r3, [r1, #0]
 800a8f8:	e015      	b.n	800a926 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a8fa:	4b24      	ldr	r3, [pc, #144]	; (800a98c <HAL_RCC_OscConfig+0x244>)
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a900:	f7fd ff88 	bl	8008814 <HAL_GetTick>
 800a904:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a906:	e008      	b.n	800a91a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a908:	f7fd ff84 	bl	8008814 <HAL_GetTick>
 800a90c:	4602      	mov	r2, r0
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	1ad3      	subs	r3, r2, r3
 800a912:	2b02      	cmp	r3, #2
 800a914:	d901      	bls.n	800a91a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a916:	2303      	movs	r3, #3
 800a918:	e187      	b.n	800ac2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a91a:	4b1b      	ldr	r3, [pc, #108]	; (800a988 <HAL_RCC_OscConfig+0x240>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f003 0302 	and.w	r3, r3, #2
 800a922:	2b00      	cmp	r3, #0
 800a924:	d1f0      	bne.n	800a908 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f003 0308 	and.w	r3, r3, #8
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d036      	beq.n	800a9a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	695b      	ldr	r3, [r3, #20]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d016      	beq.n	800a968 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a93a:	4b15      	ldr	r3, [pc, #84]	; (800a990 <HAL_RCC_OscConfig+0x248>)
 800a93c:	2201      	movs	r2, #1
 800a93e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a940:	f7fd ff68 	bl	8008814 <HAL_GetTick>
 800a944:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a946:	e008      	b.n	800a95a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a948:	f7fd ff64 	bl	8008814 <HAL_GetTick>
 800a94c:	4602      	mov	r2, r0
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	1ad3      	subs	r3, r2, r3
 800a952:	2b02      	cmp	r3, #2
 800a954:	d901      	bls.n	800a95a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a956:	2303      	movs	r3, #3
 800a958:	e167      	b.n	800ac2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a95a:	4b0b      	ldr	r3, [pc, #44]	; (800a988 <HAL_RCC_OscConfig+0x240>)
 800a95c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a95e:	f003 0302 	and.w	r3, r3, #2
 800a962:	2b00      	cmp	r3, #0
 800a964:	d0f0      	beq.n	800a948 <HAL_RCC_OscConfig+0x200>
 800a966:	e01b      	b.n	800a9a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a968:	4b09      	ldr	r3, [pc, #36]	; (800a990 <HAL_RCC_OscConfig+0x248>)
 800a96a:	2200      	movs	r2, #0
 800a96c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a96e:	f7fd ff51 	bl	8008814 <HAL_GetTick>
 800a972:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a974:	e00e      	b.n	800a994 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a976:	f7fd ff4d 	bl	8008814 <HAL_GetTick>
 800a97a:	4602      	mov	r2, r0
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	1ad3      	subs	r3, r2, r3
 800a980:	2b02      	cmp	r3, #2
 800a982:	d907      	bls.n	800a994 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a984:	2303      	movs	r3, #3
 800a986:	e150      	b.n	800ac2a <HAL_RCC_OscConfig+0x4e2>
 800a988:	40023800 	.word	0x40023800
 800a98c:	42470000 	.word	0x42470000
 800a990:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a994:	4b88      	ldr	r3, [pc, #544]	; (800abb8 <HAL_RCC_OscConfig+0x470>)
 800a996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a998:	f003 0302 	and.w	r3, r3, #2
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d1ea      	bne.n	800a976 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f003 0304 	and.w	r3, r3, #4
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	f000 8097 	beq.w	800aadc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a9b2:	4b81      	ldr	r3, [pc, #516]	; (800abb8 <HAL_RCC_OscConfig+0x470>)
 800a9b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d10f      	bne.n	800a9de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a9be:	2300      	movs	r3, #0
 800a9c0:	60bb      	str	r3, [r7, #8]
 800a9c2:	4b7d      	ldr	r3, [pc, #500]	; (800abb8 <HAL_RCC_OscConfig+0x470>)
 800a9c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9c6:	4a7c      	ldr	r2, [pc, #496]	; (800abb8 <HAL_RCC_OscConfig+0x470>)
 800a9c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a9cc:	6413      	str	r3, [r2, #64]	; 0x40
 800a9ce:	4b7a      	ldr	r3, [pc, #488]	; (800abb8 <HAL_RCC_OscConfig+0x470>)
 800a9d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9d6:	60bb      	str	r3, [r7, #8]
 800a9d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a9de:	4b77      	ldr	r3, [pc, #476]	; (800abbc <HAL_RCC_OscConfig+0x474>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d118      	bne.n	800aa1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a9ea:	4b74      	ldr	r3, [pc, #464]	; (800abbc <HAL_RCC_OscConfig+0x474>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4a73      	ldr	r2, [pc, #460]	; (800abbc <HAL_RCC_OscConfig+0x474>)
 800a9f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a9f6:	f7fd ff0d 	bl	8008814 <HAL_GetTick>
 800a9fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a9fc:	e008      	b.n	800aa10 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a9fe:	f7fd ff09 	bl	8008814 <HAL_GetTick>
 800aa02:	4602      	mov	r2, r0
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	1ad3      	subs	r3, r2, r3
 800aa08:	2b02      	cmp	r3, #2
 800aa0a:	d901      	bls.n	800aa10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800aa0c:	2303      	movs	r3, #3
 800aa0e:	e10c      	b.n	800ac2a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa10:	4b6a      	ldr	r3, [pc, #424]	; (800abbc <HAL_RCC_OscConfig+0x474>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d0f0      	beq.n	800a9fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	689b      	ldr	r3, [r3, #8]
 800aa20:	2b01      	cmp	r3, #1
 800aa22:	d106      	bne.n	800aa32 <HAL_RCC_OscConfig+0x2ea>
 800aa24:	4b64      	ldr	r3, [pc, #400]	; (800abb8 <HAL_RCC_OscConfig+0x470>)
 800aa26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa28:	4a63      	ldr	r2, [pc, #396]	; (800abb8 <HAL_RCC_OscConfig+0x470>)
 800aa2a:	f043 0301 	orr.w	r3, r3, #1
 800aa2e:	6713      	str	r3, [r2, #112]	; 0x70
 800aa30:	e01c      	b.n	800aa6c <HAL_RCC_OscConfig+0x324>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	689b      	ldr	r3, [r3, #8]
 800aa36:	2b05      	cmp	r3, #5
 800aa38:	d10c      	bne.n	800aa54 <HAL_RCC_OscConfig+0x30c>
 800aa3a:	4b5f      	ldr	r3, [pc, #380]	; (800abb8 <HAL_RCC_OscConfig+0x470>)
 800aa3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa3e:	4a5e      	ldr	r2, [pc, #376]	; (800abb8 <HAL_RCC_OscConfig+0x470>)
 800aa40:	f043 0304 	orr.w	r3, r3, #4
 800aa44:	6713      	str	r3, [r2, #112]	; 0x70
 800aa46:	4b5c      	ldr	r3, [pc, #368]	; (800abb8 <HAL_RCC_OscConfig+0x470>)
 800aa48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa4a:	4a5b      	ldr	r2, [pc, #364]	; (800abb8 <HAL_RCC_OscConfig+0x470>)
 800aa4c:	f043 0301 	orr.w	r3, r3, #1
 800aa50:	6713      	str	r3, [r2, #112]	; 0x70
 800aa52:	e00b      	b.n	800aa6c <HAL_RCC_OscConfig+0x324>
 800aa54:	4b58      	ldr	r3, [pc, #352]	; (800abb8 <HAL_RCC_OscConfig+0x470>)
 800aa56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa58:	4a57      	ldr	r2, [pc, #348]	; (800abb8 <HAL_RCC_OscConfig+0x470>)
 800aa5a:	f023 0301 	bic.w	r3, r3, #1
 800aa5e:	6713      	str	r3, [r2, #112]	; 0x70
 800aa60:	4b55      	ldr	r3, [pc, #340]	; (800abb8 <HAL_RCC_OscConfig+0x470>)
 800aa62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa64:	4a54      	ldr	r2, [pc, #336]	; (800abb8 <HAL_RCC_OscConfig+0x470>)
 800aa66:	f023 0304 	bic.w	r3, r3, #4
 800aa6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	689b      	ldr	r3, [r3, #8]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d015      	beq.n	800aaa0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa74:	f7fd fece 	bl	8008814 <HAL_GetTick>
 800aa78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa7a:	e00a      	b.n	800aa92 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aa7c:	f7fd feca 	bl	8008814 <HAL_GetTick>
 800aa80:	4602      	mov	r2, r0
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	1ad3      	subs	r3, r2, r3
 800aa86:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d901      	bls.n	800aa92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800aa8e:	2303      	movs	r3, #3
 800aa90:	e0cb      	b.n	800ac2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa92:	4b49      	ldr	r3, [pc, #292]	; (800abb8 <HAL_RCC_OscConfig+0x470>)
 800aa94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa96:	f003 0302 	and.w	r3, r3, #2
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d0ee      	beq.n	800aa7c <HAL_RCC_OscConfig+0x334>
 800aa9e:	e014      	b.n	800aaca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aaa0:	f7fd feb8 	bl	8008814 <HAL_GetTick>
 800aaa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aaa6:	e00a      	b.n	800aabe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aaa8:	f7fd feb4 	bl	8008814 <HAL_GetTick>
 800aaac:	4602      	mov	r2, r0
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	1ad3      	subs	r3, r2, r3
 800aab2:	f241 3288 	movw	r2, #5000	; 0x1388
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d901      	bls.n	800aabe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800aaba:	2303      	movs	r3, #3
 800aabc:	e0b5      	b.n	800ac2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aabe:	4b3e      	ldr	r3, [pc, #248]	; (800abb8 <HAL_RCC_OscConfig+0x470>)
 800aac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aac2:	f003 0302 	and.w	r3, r3, #2
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d1ee      	bne.n	800aaa8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800aaca:	7dfb      	ldrb	r3, [r7, #23]
 800aacc:	2b01      	cmp	r3, #1
 800aace:	d105      	bne.n	800aadc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aad0:	4b39      	ldr	r3, [pc, #228]	; (800abb8 <HAL_RCC_OscConfig+0x470>)
 800aad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aad4:	4a38      	ldr	r2, [pc, #224]	; (800abb8 <HAL_RCC_OscConfig+0x470>)
 800aad6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aada:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	699b      	ldr	r3, [r3, #24]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	f000 80a1 	beq.w	800ac28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800aae6:	4b34      	ldr	r3, [pc, #208]	; (800abb8 <HAL_RCC_OscConfig+0x470>)
 800aae8:	689b      	ldr	r3, [r3, #8]
 800aaea:	f003 030c 	and.w	r3, r3, #12
 800aaee:	2b08      	cmp	r3, #8
 800aaf0:	d05c      	beq.n	800abac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	699b      	ldr	r3, [r3, #24]
 800aaf6:	2b02      	cmp	r3, #2
 800aaf8:	d141      	bne.n	800ab7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aafa:	4b31      	ldr	r3, [pc, #196]	; (800abc0 <HAL_RCC_OscConfig+0x478>)
 800aafc:	2200      	movs	r2, #0
 800aafe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab00:	f7fd fe88 	bl	8008814 <HAL_GetTick>
 800ab04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ab06:	e008      	b.n	800ab1a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ab08:	f7fd fe84 	bl	8008814 <HAL_GetTick>
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	1ad3      	subs	r3, r2, r3
 800ab12:	2b02      	cmp	r3, #2
 800ab14:	d901      	bls.n	800ab1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800ab16:	2303      	movs	r3, #3
 800ab18:	e087      	b.n	800ac2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ab1a:	4b27      	ldr	r3, [pc, #156]	; (800abb8 <HAL_RCC_OscConfig+0x470>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d1f0      	bne.n	800ab08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	69da      	ldr	r2, [r3, #28]
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6a1b      	ldr	r3, [r3, #32]
 800ab2e:	431a      	orrs	r2, r3
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab34:	019b      	lsls	r3, r3, #6
 800ab36:	431a      	orrs	r2, r3
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab3c:	085b      	lsrs	r3, r3, #1
 800ab3e:	3b01      	subs	r3, #1
 800ab40:	041b      	lsls	r3, r3, #16
 800ab42:	431a      	orrs	r2, r3
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab48:	061b      	lsls	r3, r3, #24
 800ab4a:	491b      	ldr	r1, [pc, #108]	; (800abb8 <HAL_RCC_OscConfig+0x470>)
 800ab4c:	4313      	orrs	r3, r2
 800ab4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ab50:	4b1b      	ldr	r3, [pc, #108]	; (800abc0 <HAL_RCC_OscConfig+0x478>)
 800ab52:	2201      	movs	r2, #1
 800ab54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab56:	f7fd fe5d 	bl	8008814 <HAL_GetTick>
 800ab5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ab5c:	e008      	b.n	800ab70 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ab5e:	f7fd fe59 	bl	8008814 <HAL_GetTick>
 800ab62:	4602      	mov	r2, r0
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	1ad3      	subs	r3, r2, r3
 800ab68:	2b02      	cmp	r3, #2
 800ab6a:	d901      	bls.n	800ab70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ab6c:	2303      	movs	r3, #3
 800ab6e:	e05c      	b.n	800ac2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ab70:	4b11      	ldr	r3, [pc, #68]	; (800abb8 <HAL_RCC_OscConfig+0x470>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d0f0      	beq.n	800ab5e <HAL_RCC_OscConfig+0x416>
 800ab7c:	e054      	b.n	800ac28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab7e:	4b10      	ldr	r3, [pc, #64]	; (800abc0 <HAL_RCC_OscConfig+0x478>)
 800ab80:	2200      	movs	r2, #0
 800ab82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab84:	f7fd fe46 	bl	8008814 <HAL_GetTick>
 800ab88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ab8a:	e008      	b.n	800ab9e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ab8c:	f7fd fe42 	bl	8008814 <HAL_GetTick>
 800ab90:	4602      	mov	r2, r0
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	1ad3      	subs	r3, r2, r3
 800ab96:	2b02      	cmp	r3, #2
 800ab98:	d901      	bls.n	800ab9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800ab9a:	2303      	movs	r3, #3
 800ab9c:	e045      	b.n	800ac2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ab9e:	4b06      	ldr	r3, [pc, #24]	; (800abb8 <HAL_RCC_OscConfig+0x470>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d1f0      	bne.n	800ab8c <HAL_RCC_OscConfig+0x444>
 800abaa:	e03d      	b.n	800ac28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	699b      	ldr	r3, [r3, #24]
 800abb0:	2b01      	cmp	r3, #1
 800abb2:	d107      	bne.n	800abc4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800abb4:	2301      	movs	r3, #1
 800abb6:	e038      	b.n	800ac2a <HAL_RCC_OscConfig+0x4e2>
 800abb8:	40023800 	.word	0x40023800
 800abbc:	40007000 	.word	0x40007000
 800abc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800abc4:	4b1b      	ldr	r3, [pc, #108]	; (800ac34 <HAL_RCC_OscConfig+0x4ec>)
 800abc6:	685b      	ldr	r3, [r3, #4]
 800abc8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	699b      	ldr	r3, [r3, #24]
 800abce:	2b01      	cmp	r3, #1
 800abd0:	d028      	beq.n	800ac24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800abdc:	429a      	cmp	r2, r3
 800abde:	d121      	bne.n	800ac24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800abea:	429a      	cmp	r2, r3
 800abec:	d11a      	bne.n	800ac24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800abee:	68fa      	ldr	r2, [r7, #12]
 800abf0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800abf4:	4013      	ands	r3, r2
 800abf6:	687a      	ldr	r2, [r7, #4]
 800abf8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800abfa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d111      	bne.n	800ac24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac0a:	085b      	lsrs	r3, r3, #1
 800ac0c:	3b01      	subs	r3, #1
 800ac0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d107      	bne.n	800ac24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ac20:	429a      	cmp	r2, r3
 800ac22:	d001      	beq.n	800ac28 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800ac24:	2301      	movs	r3, #1
 800ac26:	e000      	b.n	800ac2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800ac28:	2300      	movs	r3, #0
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3718      	adds	r7, #24
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
 800ac32:	bf00      	nop
 800ac34:	40023800 	.word	0x40023800

0800ac38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b084      	sub	sp, #16
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d101      	bne.n	800ac4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	e0cc      	b.n	800ade6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ac4c:	4b68      	ldr	r3, [pc, #416]	; (800adf0 <HAL_RCC_ClockConfig+0x1b8>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f003 030f 	and.w	r3, r3, #15
 800ac54:	683a      	ldr	r2, [r7, #0]
 800ac56:	429a      	cmp	r2, r3
 800ac58:	d90c      	bls.n	800ac74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac5a:	4b65      	ldr	r3, [pc, #404]	; (800adf0 <HAL_RCC_ClockConfig+0x1b8>)
 800ac5c:	683a      	ldr	r2, [r7, #0]
 800ac5e:	b2d2      	uxtb	r2, r2
 800ac60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac62:	4b63      	ldr	r3, [pc, #396]	; (800adf0 <HAL_RCC_ClockConfig+0x1b8>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f003 030f 	and.w	r3, r3, #15
 800ac6a:	683a      	ldr	r2, [r7, #0]
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d001      	beq.n	800ac74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ac70:	2301      	movs	r3, #1
 800ac72:	e0b8      	b.n	800ade6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f003 0302 	and.w	r3, r3, #2
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d020      	beq.n	800acc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f003 0304 	and.w	r3, r3, #4
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d005      	beq.n	800ac98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ac8c:	4b59      	ldr	r3, [pc, #356]	; (800adf4 <HAL_RCC_ClockConfig+0x1bc>)
 800ac8e:	689b      	ldr	r3, [r3, #8]
 800ac90:	4a58      	ldr	r2, [pc, #352]	; (800adf4 <HAL_RCC_ClockConfig+0x1bc>)
 800ac92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ac96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f003 0308 	and.w	r3, r3, #8
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d005      	beq.n	800acb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800aca4:	4b53      	ldr	r3, [pc, #332]	; (800adf4 <HAL_RCC_ClockConfig+0x1bc>)
 800aca6:	689b      	ldr	r3, [r3, #8]
 800aca8:	4a52      	ldr	r2, [pc, #328]	; (800adf4 <HAL_RCC_ClockConfig+0x1bc>)
 800acaa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800acae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800acb0:	4b50      	ldr	r3, [pc, #320]	; (800adf4 <HAL_RCC_ClockConfig+0x1bc>)
 800acb2:	689b      	ldr	r3, [r3, #8]
 800acb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	689b      	ldr	r3, [r3, #8]
 800acbc:	494d      	ldr	r1, [pc, #308]	; (800adf4 <HAL_RCC_ClockConfig+0x1bc>)
 800acbe:	4313      	orrs	r3, r2
 800acc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f003 0301 	and.w	r3, r3, #1
 800acca:	2b00      	cmp	r3, #0
 800accc:	d044      	beq.n	800ad58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	685b      	ldr	r3, [r3, #4]
 800acd2:	2b01      	cmp	r3, #1
 800acd4:	d107      	bne.n	800ace6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800acd6:	4b47      	ldr	r3, [pc, #284]	; (800adf4 <HAL_RCC_ClockConfig+0x1bc>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d119      	bne.n	800ad16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ace2:	2301      	movs	r3, #1
 800ace4:	e07f      	b.n	800ade6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	685b      	ldr	r3, [r3, #4]
 800acea:	2b02      	cmp	r3, #2
 800acec:	d003      	beq.n	800acf6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800acf2:	2b03      	cmp	r3, #3
 800acf4:	d107      	bne.n	800ad06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800acf6:	4b3f      	ldr	r3, [pc, #252]	; (800adf4 <HAL_RCC_ClockConfig+0x1bc>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d109      	bne.n	800ad16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad02:	2301      	movs	r3, #1
 800ad04:	e06f      	b.n	800ade6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ad06:	4b3b      	ldr	r3, [pc, #236]	; (800adf4 <HAL_RCC_ClockConfig+0x1bc>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f003 0302 	and.w	r3, r3, #2
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d101      	bne.n	800ad16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad12:	2301      	movs	r3, #1
 800ad14:	e067      	b.n	800ade6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ad16:	4b37      	ldr	r3, [pc, #220]	; (800adf4 <HAL_RCC_ClockConfig+0x1bc>)
 800ad18:	689b      	ldr	r3, [r3, #8]
 800ad1a:	f023 0203 	bic.w	r2, r3, #3
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	685b      	ldr	r3, [r3, #4]
 800ad22:	4934      	ldr	r1, [pc, #208]	; (800adf4 <HAL_RCC_ClockConfig+0x1bc>)
 800ad24:	4313      	orrs	r3, r2
 800ad26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ad28:	f7fd fd74 	bl	8008814 <HAL_GetTick>
 800ad2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad2e:	e00a      	b.n	800ad46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ad30:	f7fd fd70 	bl	8008814 <HAL_GetTick>
 800ad34:	4602      	mov	r2, r0
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	1ad3      	subs	r3, r2, r3
 800ad3a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d901      	bls.n	800ad46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ad42:	2303      	movs	r3, #3
 800ad44:	e04f      	b.n	800ade6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad46:	4b2b      	ldr	r3, [pc, #172]	; (800adf4 <HAL_RCC_ClockConfig+0x1bc>)
 800ad48:	689b      	ldr	r3, [r3, #8]
 800ad4a:	f003 020c 	and.w	r2, r3, #12
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	685b      	ldr	r3, [r3, #4]
 800ad52:	009b      	lsls	r3, r3, #2
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d1eb      	bne.n	800ad30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ad58:	4b25      	ldr	r3, [pc, #148]	; (800adf0 <HAL_RCC_ClockConfig+0x1b8>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f003 030f 	and.w	r3, r3, #15
 800ad60:	683a      	ldr	r2, [r7, #0]
 800ad62:	429a      	cmp	r2, r3
 800ad64:	d20c      	bcs.n	800ad80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad66:	4b22      	ldr	r3, [pc, #136]	; (800adf0 <HAL_RCC_ClockConfig+0x1b8>)
 800ad68:	683a      	ldr	r2, [r7, #0]
 800ad6a:	b2d2      	uxtb	r2, r2
 800ad6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad6e:	4b20      	ldr	r3, [pc, #128]	; (800adf0 <HAL_RCC_ClockConfig+0x1b8>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f003 030f 	and.w	r3, r3, #15
 800ad76:	683a      	ldr	r2, [r7, #0]
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d001      	beq.n	800ad80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	e032      	b.n	800ade6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f003 0304 	and.w	r3, r3, #4
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d008      	beq.n	800ad9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ad8c:	4b19      	ldr	r3, [pc, #100]	; (800adf4 <HAL_RCC_ClockConfig+0x1bc>)
 800ad8e:	689b      	ldr	r3, [r3, #8]
 800ad90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	68db      	ldr	r3, [r3, #12]
 800ad98:	4916      	ldr	r1, [pc, #88]	; (800adf4 <HAL_RCC_ClockConfig+0x1bc>)
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f003 0308 	and.w	r3, r3, #8
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d009      	beq.n	800adbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800adaa:	4b12      	ldr	r3, [pc, #72]	; (800adf4 <HAL_RCC_ClockConfig+0x1bc>)
 800adac:	689b      	ldr	r3, [r3, #8]
 800adae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	691b      	ldr	r3, [r3, #16]
 800adb6:	00db      	lsls	r3, r3, #3
 800adb8:	490e      	ldr	r1, [pc, #56]	; (800adf4 <HAL_RCC_ClockConfig+0x1bc>)
 800adba:	4313      	orrs	r3, r2
 800adbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800adbe:	f000 f821 	bl	800ae04 <HAL_RCC_GetSysClockFreq>
 800adc2:	4602      	mov	r2, r0
 800adc4:	4b0b      	ldr	r3, [pc, #44]	; (800adf4 <HAL_RCC_ClockConfig+0x1bc>)
 800adc6:	689b      	ldr	r3, [r3, #8]
 800adc8:	091b      	lsrs	r3, r3, #4
 800adca:	f003 030f 	and.w	r3, r3, #15
 800adce:	490a      	ldr	r1, [pc, #40]	; (800adf8 <HAL_RCC_ClockConfig+0x1c0>)
 800add0:	5ccb      	ldrb	r3, [r1, r3]
 800add2:	fa22 f303 	lsr.w	r3, r2, r3
 800add6:	4a09      	ldr	r2, [pc, #36]	; (800adfc <HAL_RCC_ClockConfig+0x1c4>)
 800add8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800adda:	4b09      	ldr	r3, [pc, #36]	; (800ae00 <HAL_RCC_ClockConfig+0x1c8>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	4618      	mov	r0, r3
 800ade0:	f7fd fabc 	bl	800835c <HAL_InitTick>

  return HAL_OK;
 800ade4:	2300      	movs	r3, #0
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3710      	adds	r7, #16
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop
 800adf0:	40023c00 	.word	0x40023c00
 800adf4:	40023800 	.word	0x40023800
 800adf8:	08015638 	.word	0x08015638
 800adfc:	2000000c 	.word	0x2000000c
 800ae00:	20000010 	.word	0x20000010

0800ae04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ae04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ae08:	b090      	sub	sp, #64	; 0x40
 800ae0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	637b      	str	r3, [r7, #52]	; 0x34
 800ae10:	2300      	movs	r3, #0
 800ae12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae14:	2300      	movs	r3, #0
 800ae16:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ae1c:	4b59      	ldr	r3, [pc, #356]	; (800af84 <HAL_RCC_GetSysClockFreq+0x180>)
 800ae1e:	689b      	ldr	r3, [r3, #8]
 800ae20:	f003 030c 	and.w	r3, r3, #12
 800ae24:	2b08      	cmp	r3, #8
 800ae26:	d00d      	beq.n	800ae44 <HAL_RCC_GetSysClockFreq+0x40>
 800ae28:	2b08      	cmp	r3, #8
 800ae2a:	f200 80a1 	bhi.w	800af70 <HAL_RCC_GetSysClockFreq+0x16c>
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d002      	beq.n	800ae38 <HAL_RCC_GetSysClockFreq+0x34>
 800ae32:	2b04      	cmp	r3, #4
 800ae34:	d003      	beq.n	800ae3e <HAL_RCC_GetSysClockFreq+0x3a>
 800ae36:	e09b      	b.n	800af70 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ae38:	4b53      	ldr	r3, [pc, #332]	; (800af88 <HAL_RCC_GetSysClockFreq+0x184>)
 800ae3a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800ae3c:	e09b      	b.n	800af76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ae3e:	4b53      	ldr	r3, [pc, #332]	; (800af8c <HAL_RCC_GetSysClockFreq+0x188>)
 800ae40:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800ae42:	e098      	b.n	800af76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ae44:	4b4f      	ldr	r3, [pc, #316]	; (800af84 <HAL_RCC_GetSysClockFreq+0x180>)
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae4c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ae4e:	4b4d      	ldr	r3, [pc, #308]	; (800af84 <HAL_RCC_GetSysClockFreq+0x180>)
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d028      	beq.n	800aeac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ae5a:	4b4a      	ldr	r3, [pc, #296]	; (800af84 <HAL_RCC_GetSysClockFreq+0x180>)
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	099b      	lsrs	r3, r3, #6
 800ae60:	2200      	movs	r2, #0
 800ae62:	623b      	str	r3, [r7, #32]
 800ae64:	627a      	str	r2, [r7, #36]	; 0x24
 800ae66:	6a3b      	ldr	r3, [r7, #32]
 800ae68:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800ae6c:	2100      	movs	r1, #0
 800ae6e:	4b47      	ldr	r3, [pc, #284]	; (800af8c <HAL_RCC_GetSysClockFreq+0x188>)
 800ae70:	fb03 f201 	mul.w	r2, r3, r1
 800ae74:	2300      	movs	r3, #0
 800ae76:	fb00 f303 	mul.w	r3, r0, r3
 800ae7a:	4413      	add	r3, r2
 800ae7c:	4a43      	ldr	r2, [pc, #268]	; (800af8c <HAL_RCC_GetSysClockFreq+0x188>)
 800ae7e:	fba0 1202 	umull	r1, r2, r0, r2
 800ae82:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ae84:	460a      	mov	r2, r1
 800ae86:	62ba      	str	r2, [r7, #40]	; 0x28
 800ae88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae8a:	4413      	add	r3, r2
 800ae8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae90:	2200      	movs	r2, #0
 800ae92:	61bb      	str	r3, [r7, #24]
 800ae94:	61fa      	str	r2, [r7, #28]
 800ae96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ae9a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800ae9e:	f7f5 fee3 	bl	8000c68 <__aeabi_uldivmod>
 800aea2:	4602      	mov	r2, r0
 800aea4:	460b      	mov	r3, r1
 800aea6:	4613      	mov	r3, r2
 800aea8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aeaa:	e053      	b.n	800af54 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aeac:	4b35      	ldr	r3, [pc, #212]	; (800af84 <HAL_RCC_GetSysClockFreq+0x180>)
 800aeae:	685b      	ldr	r3, [r3, #4]
 800aeb0:	099b      	lsrs	r3, r3, #6
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	613b      	str	r3, [r7, #16]
 800aeb6:	617a      	str	r2, [r7, #20]
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800aebe:	f04f 0b00 	mov.w	fp, #0
 800aec2:	4652      	mov	r2, sl
 800aec4:	465b      	mov	r3, fp
 800aec6:	f04f 0000 	mov.w	r0, #0
 800aeca:	f04f 0100 	mov.w	r1, #0
 800aece:	0159      	lsls	r1, r3, #5
 800aed0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800aed4:	0150      	lsls	r0, r2, #5
 800aed6:	4602      	mov	r2, r0
 800aed8:	460b      	mov	r3, r1
 800aeda:	ebb2 080a 	subs.w	r8, r2, sl
 800aede:	eb63 090b 	sbc.w	r9, r3, fp
 800aee2:	f04f 0200 	mov.w	r2, #0
 800aee6:	f04f 0300 	mov.w	r3, #0
 800aeea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800aeee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800aef2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800aef6:	ebb2 0408 	subs.w	r4, r2, r8
 800aefa:	eb63 0509 	sbc.w	r5, r3, r9
 800aefe:	f04f 0200 	mov.w	r2, #0
 800af02:	f04f 0300 	mov.w	r3, #0
 800af06:	00eb      	lsls	r3, r5, #3
 800af08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800af0c:	00e2      	lsls	r2, r4, #3
 800af0e:	4614      	mov	r4, r2
 800af10:	461d      	mov	r5, r3
 800af12:	eb14 030a 	adds.w	r3, r4, sl
 800af16:	603b      	str	r3, [r7, #0]
 800af18:	eb45 030b 	adc.w	r3, r5, fp
 800af1c:	607b      	str	r3, [r7, #4]
 800af1e:	f04f 0200 	mov.w	r2, #0
 800af22:	f04f 0300 	mov.w	r3, #0
 800af26:	e9d7 4500 	ldrd	r4, r5, [r7]
 800af2a:	4629      	mov	r1, r5
 800af2c:	028b      	lsls	r3, r1, #10
 800af2e:	4621      	mov	r1, r4
 800af30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800af34:	4621      	mov	r1, r4
 800af36:	028a      	lsls	r2, r1, #10
 800af38:	4610      	mov	r0, r2
 800af3a:	4619      	mov	r1, r3
 800af3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af3e:	2200      	movs	r2, #0
 800af40:	60bb      	str	r3, [r7, #8]
 800af42:	60fa      	str	r2, [r7, #12]
 800af44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800af48:	f7f5 fe8e 	bl	8000c68 <__aeabi_uldivmod>
 800af4c:	4602      	mov	r2, r0
 800af4e:	460b      	mov	r3, r1
 800af50:	4613      	mov	r3, r2
 800af52:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800af54:	4b0b      	ldr	r3, [pc, #44]	; (800af84 <HAL_RCC_GetSysClockFreq+0x180>)
 800af56:	685b      	ldr	r3, [r3, #4]
 800af58:	0c1b      	lsrs	r3, r3, #16
 800af5a:	f003 0303 	and.w	r3, r3, #3
 800af5e:	3301      	adds	r3, #1
 800af60:	005b      	lsls	r3, r3, #1
 800af62:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800af64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800af66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af68:	fbb2 f3f3 	udiv	r3, r2, r3
 800af6c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800af6e:	e002      	b.n	800af76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800af70:	4b05      	ldr	r3, [pc, #20]	; (800af88 <HAL_RCC_GetSysClockFreq+0x184>)
 800af72:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800af74:	bf00      	nop
    }
  }
  return sysclockfreq;
 800af76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3740      	adds	r7, #64	; 0x40
 800af7c:	46bd      	mov	sp, r7
 800af7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800af82:	bf00      	nop
 800af84:	40023800 	.word	0x40023800
 800af88:	00f42400 	.word	0x00f42400
 800af8c:	017d7840 	.word	0x017d7840

0800af90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800af90:	b480      	push	{r7}
 800af92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800af94:	4b03      	ldr	r3, [pc, #12]	; (800afa4 <HAL_RCC_GetHCLKFreq+0x14>)
 800af96:	681b      	ldr	r3, [r3, #0]
}
 800af98:	4618      	mov	r0, r3
 800af9a:	46bd      	mov	sp, r7
 800af9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa0:	4770      	bx	lr
 800afa2:	bf00      	nop
 800afa4:	2000000c 	.word	0x2000000c

0800afa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800afac:	f7ff fff0 	bl	800af90 <HAL_RCC_GetHCLKFreq>
 800afb0:	4602      	mov	r2, r0
 800afb2:	4b05      	ldr	r3, [pc, #20]	; (800afc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800afb4:	689b      	ldr	r3, [r3, #8]
 800afb6:	0a9b      	lsrs	r3, r3, #10
 800afb8:	f003 0307 	and.w	r3, r3, #7
 800afbc:	4903      	ldr	r1, [pc, #12]	; (800afcc <HAL_RCC_GetPCLK1Freq+0x24>)
 800afbe:	5ccb      	ldrb	r3, [r1, r3]
 800afc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	bd80      	pop	{r7, pc}
 800afc8:	40023800 	.word	0x40023800
 800afcc:	08015648 	.word	0x08015648

0800afd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800afd4:	f7ff ffdc 	bl	800af90 <HAL_RCC_GetHCLKFreq>
 800afd8:	4602      	mov	r2, r0
 800afda:	4b05      	ldr	r3, [pc, #20]	; (800aff0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800afdc:	689b      	ldr	r3, [r3, #8]
 800afde:	0b5b      	lsrs	r3, r3, #13
 800afe0:	f003 0307 	and.w	r3, r3, #7
 800afe4:	4903      	ldr	r1, [pc, #12]	; (800aff4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800afe6:	5ccb      	ldrb	r3, [r1, r3]
 800afe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800afec:	4618      	mov	r0, r3
 800afee:	bd80      	pop	{r7, pc}
 800aff0:	40023800 	.word	0x40023800
 800aff4:	08015648 	.word	0x08015648

0800aff8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800aff8:	b480      	push	{r7}
 800affa:	b083      	sub	sp, #12
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	220f      	movs	r2, #15
 800b006:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b008:	4b12      	ldr	r3, [pc, #72]	; (800b054 <HAL_RCC_GetClockConfig+0x5c>)
 800b00a:	689b      	ldr	r3, [r3, #8]
 800b00c:	f003 0203 	and.w	r2, r3, #3
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b014:	4b0f      	ldr	r3, [pc, #60]	; (800b054 <HAL_RCC_GetClockConfig+0x5c>)
 800b016:	689b      	ldr	r3, [r3, #8]
 800b018:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b020:	4b0c      	ldr	r3, [pc, #48]	; (800b054 <HAL_RCC_GetClockConfig+0x5c>)
 800b022:	689b      	ldr	r3, [r3, #8]
 800b024:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800b02c:	4b09      	ldr	r3, [pc, #36]	; (800b054 <HAL_RCC_GetClockConfig+0x5c>)
 800b02e:	689b      	ldr	r3, [r3, #8]
 800b030:	08db      	lsrs	r3, r3, #3
 800b032:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b03a:	4b07      	ldr	r3, [pc, #28]	; (800b058 <HAL_RCC_GetClockConfig+0x60>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f003 020f 	and.w	r2, r3, #15
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	601a      	str	r2, [r3, #0]
}
 800b046:	bf00      	nop
 800b048:	370c      	adds	r7, #12
 800b04a:	46bd      	mov	sp, r7
 800b04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b050:	4770      	bx	lr
 800b052:	bf00      	nop
 800b054:	40023800 	.word	0x40023800
 800b058:	40023c00 	.word	0x40023c00

0800b05c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b082      	sub	sp, #8
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d101      	bne.n	800b06e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b06a:	2301      	movs	r3, #1
 800b06c:	e041      	b.n	800b0f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b074:	b2db      	uxtb	r3, r3
 800b076:	2b00      	cmp	r3, #0
 800b078:	d106      	bne.n	800b088 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2200      	movs	r2, #0
 800b07e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f7fc ffba 	bl	8007ffc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2202      	movs	r2, #2
 800b08c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681a      	ldr	r2, [r3, #0]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	3304      	adds	r3, #4
 800b098:	4619      	mov	r1, r3
 800b09a:	4610      	mov	r0, r2
 800b09c:	f000 fc62 	bl	800b964 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2201      	movs	r2, #1
 800b0dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2201      	movs	r2, #1
 800b0e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b0f0:	2300      	movs	r3, #0
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3708      	adds	r7, #8
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}
	...

0800b0fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b085      	sub	sp, #20
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b10a:	b2db      	uxtb	r3, r3
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	d001      	beq.n	800b114 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b110:	2301      	movs	r3, #1
 800b112:	e04e      	b.n	800b1b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2202      	movs	r2, #2
 800b118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	68da      	ldr	r2, [r3, #12]
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f042 0201 	orr.w	r2, r2, #1
 800b12a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	4a23      	ldr	r2, [pc, #140]	; (800b1c0 <HAL_TIM_Base_Start_IT+0xc4>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d022      	beq.n	800b17c <HAL_TIM_Base_Start_IT+0x80>
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b13e:	d01d      	beq.n	800b17c <HAL_TIM_Base_Start_IT+0x80>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	4a1f      	ldr	r2, [pc, #124]	; (800b1c4 <HAL_TIM_Base_Start_IT+0xc8>)
 800b146:	4293      	cmp	r3, r2
 800b148:	d018      	beq.n	800b17c <HAL_TIM_Base_Start_IT+0x80>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	4a1e      	ldr	r2, [pc, #120]	; (800b1c8 <HAL_TIM_Base_Start_IT+0xcc>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d013      	beq.n	800b17c <HAL_TIM_Base_Start_IT+0x80>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4a1c      	ldr	r2, [pc, #112]	; (800b1cc <HAL_TIM_Base_Start_IT+0xd0>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d00e      	beq.n	800b17c <HAL_TIM_Base_Start_IT+0x80>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	4a1b      	ldr	r2, [pc, #108]	; (800b1d0 <HAL_TIM_Base_Start_IT+0xd4>)
 800b164:	4293      	cmp	r3, r2
 800b166:	d009      	beq.n	800b17c <HAL_TIM_Base_Start_IT+0x80>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	4a19      	ldr	r2, [pc, #100]	; (800b1d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d004      	beq.n	800b17c <HAL_TIM_Base_Start_IT+0x80>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	4a18      	ldr	r2, [pc, #96]	; (800b1d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800b178:	4293      	cmp	r3, r2
 800b17a:	d111      	bne.n	800b1a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	689b      	ldr	r3, [r3, #8]
 800b182:	f003 0307 	and.w	r3, r3, #7
 800b186:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	2b06      	cmp	r3, #6
 800b18c:	d010      	beq.n	800b1b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	681a      	ldr	r2, [r3, #0]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f042 0201 	orr.w	r2, r2, #1
 800b19c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b19e:	e007      	b.n	800b1b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	681a      	ldr	r2, [r3, #0]
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f042 0201 	orr.w	r2, r2, #1
 800b1ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b1b0:	2300      	movs	r3, #0
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3714      	adds	r7, #20
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1bc:	4770      	bx	lr
 800b1be:	bf00      	nop
 800b1c0:	40010000 	.word	0x40010000
 800b1c4:	40000400 	.word	0x40000400
 800b1c8:	40000800 	.word	0x40000800
 800b1cc:	40000c00 	.word	0x40000c00
 800b1d0:	40010400 	.word	0x40010400
 800b1d4:	40014000 	.word	0x40014000
 800b1d8:	40001800 	.word	0x40001800

0800b1dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b082      	sub	sp, #8
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d101      	bne.n	800b1ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	e041      	b.n	800b272 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1f4:	b2db      	uxtb	r3, r3
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d106      	bne.n	800b208 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f000 f839 	bl	800b27a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2202      	movs	r2, #2
 800b20c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681a      	ldr	r2, [r3, #0]
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	3304      	adds	r3, #4
 800b218:	4619      	mov	r1, r3
 800b21a:	4610      	mov	r0, r2
 800b21c:	f000 fba2 	bl	800b964 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2201      	movs	r2, #1
 800b224:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2201      	movs	r2, #1
 800b22c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2201      	movs	r2, #1
 800b234:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2201      	movs	r2, #1
 800b23c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2201      	movs	r2, #1
 800b244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2201      	movs	r2, #1
 800b24c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2201      	movs	r2, #1
 800b254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2201      	movs	r2, #1
 800b25c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2201      	movs	r2, #1
 800b264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2201      	movs	r2, #1
 800b26c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b270:	2300      	movs	r3, #0
}
 800b272:	4618      	mov	r0, r3
 800b274:	3708      	adds	r7, #8
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}

0800b27a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b27a:	b480      	push	{r7}
 800b27c:	b083      	sub	sp, #12
 800b27e:	af00      	add	r7, sp, #0
 800b280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b282:	bf00      	nop
 800b284:	370c      	adds	r7, #12
 800b286:	46bd      	mov	sp, r7
 800b288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28c:	4770      	bx	lr
	...

0800b290 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d109      	bne.n	800b2b4 <HAL_TIM_PWM_Start+0x24>
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b2a6:	b2db      	uxtb	r3, r3
 800b2a8:	2b01      	cmp	r3, #1
 800b2aa:	bf14      	ite	ne
 800b2ac:	2301      	movne	r3, #1
 800b2ae:	2300      	moveq	r3, #0
 800b2b0:	b2db      	uxtb	r3, r3
 800b2b2:	e022      	b.n	800b2fa <HAL_TIM_PWM_Start+0x6a>
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	2b04      	cmp	r3, #4
 800b2b8:	d109      	bne.n	800b2ce <HAL_TIM_PWM_Start+0x3e>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b2c0:	b2db      	uxtb	r3, r3
 800b2c2:	2b01      	cmp	r3, #1
 800b2c4:	bf14      	ite	ne
 800b2c6:	2301      	movne	r3, #1
 800b2c8:	2300      	moveq	r3, #0
 800b2ca:	b2db      	uxtb	r3, r3
 800b2cc:	e015      	b.n	800b2fa <HAL_TIM_PWM_Start+0x6a>
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	2b08      	cmp	r3, #8
 800b2d2:	d109      	bne.n	800b2e8 <HAL_TIM_PWM_Start+0x58>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b2da:	b2db      	uxtb	r3, r3
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	bf14      	ite	ne
 800b2e0:	2301      	movne	r3, #1
 800b2e2:	2300      	moveq	r3, #0
 800b2e4:	b2db      	uxtb	r3, r3
 800b2e6:	e008      	b.n	800b2fa <HAL_TIM_PWM_Start+0x6a>
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b2ee:	b2db      	uxtb	r3, r3
 800b2f0:	2b01      	cmp	r3, #1
 800b2f2:	bf14      	ite	ne
 800b2f4:	2301      	movne	r3, #1
 800b2f6:	2300      	moveq	r3, #0
 800b2f8:	b2db      	uxtb	r3, r3
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d001      	beq.n	800b302 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b2fe:	2301      	movs	r3, #1
 800b300:	e07c      	b.n	800b3fc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d104      	bne.n	800b312 <HAL_TIM_PWM_Start+0x82>
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2202      	movs	r2, #2
 800b30c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b310:	e013      	b.n	800b33a <HAL_TIM_PWM_Start+0xaa>
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	2b04      	cmp	r3, #4
 800b316:	d104      	bne.n	800b322 <HAL_TIM_PWM_Start+0x92>
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2202      	movs	r2, #2
 800b31c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b320:	e00b      	b.n	800b33a <HAL_TIM_PWM_Start+0xaa>
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	2b08      	cmp	r3, #8
 800b326:	d104      	bne.n	800b332 <HAL_TIM_PWM_Start+0xa2>
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2202      	movs	r2, #2
 800b32c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b330:	e003      	b.n	800b33a <HAL_TIM_PWM_Start+0xaa>
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2202      	movs	r2, #2
 800b336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	2201      	movs	r2, #1
 800b340:	6839      	ldr	r1, [r7, #0]
 800b342:	4618      	mov	r0, r3
 800b344:	f000 fe04 	bl	800bf50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	4a2d      	ldr	r2, [pc, #180]	; (800b404 <HAL_TIM_PWM_Start+0x174>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d004      	beq.n	800b35c <HAL_TIM_PWM_Start+0xcc>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	4a2c      	ldr	r2, [pc, #176]	; (800b408 <HAL_TIM_PWM_Start+0x178>)
 800b358:	4293      	cmp	r3, r2
 800b35a:	d101      	bne.n	800b360 <HAL_TIM_PWM_Start+0xd0>
 800b35c:	2301      	movs	r3, #1
 800b35e:	e000      	b.n	800b362 <HAL_TIM_PWM_Start+0xd2>
 800b360:	2300      	movs	r3, #0
 800b362:	2b00      	cmp	r3, #0
 800b364:	d007      	beq.n	800b376 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b374:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	4a22      	ldr	r2, [pc, #136]	; (800b404 <HAL_TIM_PWM_Start+0x174>)
 800b37c:	4293      	cmp	r3, r2
 800b37e:	d022      	beq.n	800b3c6 <HAL_TIM_PWM_Start+0x136>
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b388:	d01d      	beq.n	800b3c6 <HAL_TIM_PWM_Start+0x136>
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	4a1f      	ldr	r2, [pc, #124]	; (800b40c <HAL_TIM_PWM_Start+0x17c>)
 800b390:	4293      	cmp	r3, r2
 800b392:	d018      	beq.n	800b3c6 <HAL_TIM_PWM_Start+0x136>
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	4a1d      	ldr	r2, [pc, #116]	; (800b410 <HAL_TIM_PWM_Start+0x180>)
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d013      	beq.n	800b3c6 <HAL_TIM_PWM_Start+0x136>
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	4a1c      	ldr	r2, [pc, #112]	; (800b414 <HAL_TIM_PWM_Start+0x184>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d00e      	beq.n	800b3c6 <HAL_TIM_PWM_Start+0x136>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4a16      	ldr	r2, [pc, #88]	; (800b408 <HAL_TIM_PWM_Start+0x178>)
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	d009      	beq.n	800b3c6 <HAL_TIM_PWM_Start+0x136>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	4a18      	ldr	r2, [pc, #96]	; (800b418 <HAL_TIM_PWM_Start+0x188>)
 800b3b8:	4293      	cmp	r3, r2
 800b3ba:	d004      	beq.n	800b3c6 <HAL_TIM_PWM_Start+0x136>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	4a16      	ldr	r2, [pc, #88]	; (800b41c <HAL_TIM_PWM_Start+0x18c>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d111      	bne.n	800b3ea <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	689b      	ldr	r3, [r3, #8]
 800b3cc:	f003 0307 	and.w	r3, r3, #7
 800b3d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	2b06      	cmp	r3, #6
 800b3d6:	d010      	beq.n	800b3fa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	681a      	ldr	r2, [r3, #0]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f042 0201 	orr.w	r2, r2, #1
 800b3e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3e8:	e007      	b.n	800b3fa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	681a      	ldr	r2, [r3, #0]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f042 0201 	orr.w	r2, r2, #1
 800b3f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b3fa:	2300      	movs	r3, #0
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3710      	adds	r7, #16
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}
 800b404:	40010000 	.word	0x40010000
 800b408:	40010400 	.word	0x40010400
 800b40c:	40000400 	.word	0x40000400
 800b410:	40000800 	.word	0x40000800
 800b414:	40000c00 	.word	0x40000c00
 800b418:	40014000 	.word	0x40014000
 800b41c:	40001800 	.word	0x40001800

0800b420 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b084      	sub	sp, #16
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	68db      	ldr	r3, [r3, #12]
 800b42e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	691b      	ldr	r3, [r3, #16]
 800b436:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	f003 0302 	and.w	r3, r3, #2
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d020      	beq.n	800b484 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	f003 0302 	and.w	r3, r3, #2
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d01b      	beq.n	800b484 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f06f 0202 	mvn.w	r2, #2
 800b454:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2201      	movs	r2, #1
 800b45a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	699b      	ldr	r3, [r3, #24]
 800b462:	f003 0303 	and.w	r3, r3, #3
 800b466:	2b00      	cmp	r3, #0
 800b468:	d003      	beq.n	800b472 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f000 fa5b 	bl	800b926 <HAL_TIM_IC_CaptureCallback>
 800b470:	e005      	b.n	800b47e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f000 fa4d 	bl	800b912 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f000 fa5e 	bl	800b93a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2200      	movs	r2, #0
 800b482:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	f003 0304 	and.w	r3, r3, #4
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d020      	beq.n	800b4d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	f003 0304 	and.w	r3, r3, #4
 800b494:	2b00      	cmp	r3, #0
 800b496:	d01b      	beq.n	800b4d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f06f 0204 	mvn.w	r2, #4
 800b4a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2202      	movs	r2, #2
 800b4a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	699b      	ldr	r3, [r3, #24]
 800b4ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d003      	beq.n	800b4be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f000 fa35 	bl	800b926 <HAL_TIM_IC_CaptureCallback>
 800b4bc:	e005      	b.n	800b4ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f000 fa27 	bl	800b912 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f000 fa38 	bl	800b93a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	f003 0308 	and.w	r3, r3, #8
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d020      	beq.n	800b51c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	f003 0308 	and.w	r3, r3, #8
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d01b      	beq.n	800b51c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f06f 0208 	mvn.w	r2, #8
 800b4ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2204      	movs	r2, #4
 800b4f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	69db      	ldr	r3, [r3, #28]
 800b4fa:	f003 0303 	and.w	r3, r3, #3
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d003      	beq.n	800b50a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f000 fa0f 	bl	800b926 <HAL_TIM_IC_CaptureCallback>
 800b508:	e005      	b.n	800b516 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f000 fa01 	bl	800b912 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f000 fa12 	bl	800b93a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2200      	movs	r2, #0
 800b51a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	f003 0310 	and.w	r3, r3, #16
 800b522:	2b00      	cmp	r3, #0
 800b524:	d020      	beq.n	800b568 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	f003 0310 	and.w	r3, r3, #16
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d01b      	beq.n	800b568 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f06f 0210 	mvn.w	r2, #16
 800b538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2208      	movs	r2, #8
 800b53e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	69db      	ldr	r3, [r3, #28]
 800b546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d003      	beq.n	800b556 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f000 f9e9 	bl	800b926 <HAL_TIM_IC_CaptureCallback>
 800b554:	e005      	b.n	800b562 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f000 f9db 	bl	800b912 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f000 f9ec 	bl	800b93a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2200      	movs	r2, #0
 800b566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	f003 0301 	and.w	r3, r3, #1
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d00c      	beq.n	800b58c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	f003 0301 	and.w	r3, r3, #1
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d007      	beq.n	800b58c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f06f 0201 	mvn.w	r2, #1
 800b584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f7f8 facc 	bl	8003b24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b592:	2b00      	cmp	r3, #0
 800b594:	d00c      	beq.n	800b5b0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d007      	beq.n	800b5b0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b5a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f000 fdce 	bl	800c14c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d00c      	beq.n	800b5d4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d007      	beq.n	800b5d4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b5cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f000 f9bd 	bl	800b94e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	f003 0320 	and.w	r3, r3, #32
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d00c      	beq.n	800b5f8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	f003 0320 	and.w	r3, r3, #32
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d007      	beq.n	800b5f8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f06f 0220 	mvn.w	r2, #32
 800b5f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f000 fda0 	bl	800c138 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b5f8:	bf00      	nop
 800b5fa:	3710      	adds	r7, #16
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}

0800b600 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b086      	sub	sp, #24
 800b604:	af00      	add	r7, sp, #0
 800b606:	60f8      	str	r0, [r7, #12]
 800b608:	60b9      	str	r1, [r7, #8]
 800b60a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b60c:	2300      	movs	r3, #0
 800b60e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b616:	2b01      	cmp	r3, #1
 800b618:	d101      	bne.n	800b61e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b61a:	2302      	movs	r3, #2
 800b61c:	e0ae      	b.n	800b77c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	2201      	movs	r2, #1
 800b622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2b0c      	cmp	r3, #12
 800b62a:	f200 809f 	bhi.w	800b76c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b62e:	a201      	add	r2, pc, #4	; (adr r2, 800b634 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b634:	0800b669 	.word	0x0800b669
 800b638:	0800b76d 	.word	0x0800b76d
 800b63c:	0800b76d 	.word	0x0800b76d
 800b640:	0800b76d 	.word	0x0800b76d
 800b644:	0800b6a9 	.word	0x0800b6a9
 800b648:	0800b76d 	.word	0x0800b76d
 800b64c:	0800b76d 	.word	0x0800b76d
 800b650:	0800b76d 	.word	0x0800b76d
 800b654:	0800b6eb 	.word	0x0800b6eb
 800b658:	0800b76d 	.word	0x0800b76d
 800b65c:	0800b76d 	.word	0x0800b76d
 800b660:	0800b76d 	.word	0x0800b76d
 800b664:	0800b72b 	.word	0x0800b72b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	68b9      	ldr	r1, [r7, #8]
 800b66e:	4618      	mov	r0, r3
 800b670:	f000 fa24 	bl	800babc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	699a      	ldr	r2, [r3, #24]
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f042 0208 	orr.w	r2, r2, #8
 800b682:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	699a      	ldr	r2, [r3, #24]
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f022 0204 	bic.w	r2, r2, #4
 800b692:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	6999      	ldr	r1, [r3, #24]
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	691a      	ldr	r2, [r3, #16]
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	430a      	orrs	r2, r1
 800b6a4:	619a      	str	r2, [r3, #24]
      break;
 800b6a6:	e064      	b.n	800b772 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	68b9      	ldr	r1, [r7, #8]
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f000 fa74 	bl	800bb9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	699a      	ldr	r2, [r3, #24]
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b6c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	699a      	ldr	r2, [r3, #24]
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b6d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	6999      	ldr	r1, [r3, #24]
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	691b      	ldr	r3, [r3, #16]
 800b6de:	021a      	lsls	r2, r3, #8
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	430a      	orrs	r2, r1
 800b6e6:	619a      	str	r2, [r3, #24]
      break;
 800b6e8:	e043      	b.n	800b772 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	68b9      	ldr	r1, [r7, #8]
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f000 fac9 	bl	800bc88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	69da      	ldr	r2, [r3, #28]
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f042 0208 	orr.w	r2, r2, #8
 800b704:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	69da      	ldr	r2, [r3, #28]
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f022 0204 	bic.w	r2, r2, #4
 800b714:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	69d9      	ldr	r1, [r3, #28]
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	691a      	ldr	r2, [r3, #16]
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	430a      	orrs	r2, r1
 800b726:	61da      	str	r2, [r3, #28]
      break;
 800b728:	e023      	b.n	800b772 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	68b9      	ldr	r1, [r7, #8]
 800b730:	4618      	mov	r0, r3
 800b732:	f000 fb1d 	bl	800bd70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	69da      	ldr	r2, [r3, #28]
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b744:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	69da      	ldr	r2, [r3, #28]
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b754:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	69d9      	ldr	r1, [r3, #28]
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	691b      	ldr	r3, [r3, #16]
 800b760:	021a      	lsls	r2, r3, #8
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	430a      	orrs	r2, r1
 800b768:	61da      	str	r2, [r3, #28]
      break;
 800b76a:	e002      	b.n	800b772 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b76c:	2301      	movs	r3, #1
 800b76e:	75fb      	strb	r3, [r7, #23]
      break;
 800b770:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	2200      	movs	r2, #0
 800b776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b77a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3718      	adds	r7, #24
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}

0800b784 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b084      	sub	sp, #16
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b78e:	2300      	movs	r3, #0
 800b790:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b798:	2b01      	cmp	r3, #1
 800b79a:	d101      	bne.n	800b7a0 <HAL_TIM_ConfigClockSource+0x1c>
 800b79c:	2302      	movs	r3, #2
 800b79e:	e0b4      	b.n	800b90a <HAL_TIM_ConfigClockSource+0x186>
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2201      	movs	r2, #1
 800b7a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2202      	movs	r2, #2
 800b7ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	689b      	ldr	r3, [r3, #8]
 800b7b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b7be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b7c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	68ba      	ldr	r2, [r7, #8]
 800b7ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7d8:	d03e      	beq.n	800b858 <HAL_TIM_ConfigClockSource+0xd4>
 800b7da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7de:	f200 8087 	bhi.w	800b8f0 <HAL_TIM_ConfigClockSource+0x16c>
 800b7e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7e6:	f000 8086 	beq.w	800b8f6 <HAL_TIM_ConfigClockSource+0x172>
 800b7ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7ee:	d87f      	bhi.n	800b8f0 <HAL_TIM_ConfigClockSource+0x16c>
 800b7f0:	2b70      	cmp	r3, #112	; 0x70
 800b7f2:	d01a      	beq.n	800b82a <HAL_TIM_ConfigClockSource+0xa6>
 800b7f4:	2b70      	cmp	r3, #112	; 0x70
 800b7f6:	d87b      	bhi.n	800b8f0 <HAL_TIM_ConfigClockSource+0x16c>
 800b7f8:	2b60      	cmp	r3, #96	; 0x60
 800b7fa:	d050      	beq.n	800b89e <HAL_TIM_ConfigClockSource+0x11a>
 800b7fc:	2b60      	cmp	r3, #96	; 0x60
 800b7fe:	d877      	bhi.n	800b8f0 <HAL_TIM_ConfigClockSource+0x16c>
 800b800:	2b50      	cmp	r3, #80	; 0x50
 800b802:	d03c      	beq.n	800b87e <HAL_TIM_ConfigClockSource+0xfa>
 800b804:	2b50      	cmp	r3, #80	; 0x50
 800b806:	d873      	bhi.n	800b8f0 <HAL_TIM_ConfigClockSource+0x16c>
 800b808:	2b40      	cmp	r3, #64	; 0x40
 800b80a:	d058      	beq.n	800b8be <HAL_TIM_ConfigClockSource+0x13a>
 800b80c:	2b40      	cmp	r3, #64	; 0x40
 800b80e:	d86f      	bhi.n	800b8f0 <HAL_TIM_ConfigClockSource+0x16c>
 800b810:	2b30      	cmp	r3, #48	; 0x30
 800b812:	d064      	beq.n	800b8de <HAL_TIM_ConfigClockSource+0x15a>
 800b814:	2b30      	cmp	r3, #48	; 0x30
 800b816:	d86b      	bhi.n	800b8f0 <HAL_TIM_ConfigClockSource+0x16c>
 800b818:	2b20      	cmp	r3, #32
 800b81a:	d060      	beq.n	800b8de <HAL_TIM_ConfigClockSource+0x15a>
 800b81c:	2b20      	cmp	r3, #32
 800b81e:	d867      	bhi.n	800b8f0 <HAL_TIM_ConfigClockSource+0x16c>
 800b820:	2b00      	cmp	r3, #0
 800b822:	d05c      	beq.n	800b8de <HAL_TIM_ConfigClockSource+0x15a>
 800b824:	2b10      	cmp	r3, #16
 800b826:	d05a      	beq.n	800b8de <HAL_TIM_ConfigClockSource+0x15a>
 800b828:	e062      	b.n	800b8f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b83a:	f000 fb69 	bl	800bf10 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	689b      	ldr	r3, [r3, #8]
 800b844:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b84c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	68ba      	ldr	r2, [r7, #8]
 800b854:	609a      	str	r2, [r3, #8]
      break;
 800b856:	e04f      	b.n	800b8f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b868:	f000 fb52 	bl	800bf10 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	689a      	ldr	r2, [r3, #8]
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b87a:	609a      	str	r2, [r3, #8]
      break;
 800b87c:	e03c      	b.n	800b8f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b88a:	461a      	mov	r2, r3
 800b88c:	f000 fac6 	bl	800be1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	2150      	movs	r1, #80	; 0x50
 800b896:	4618      	mov	r0, r3
 800b898:	f000 fb1f 	bl	800beda <TIM_ITRx_SetConfig>
      break;
 800b89c:	e02c      	b.n	800b8f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	f000 fae5 	bl	800be7a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	2160      	movs	r1, #96	; 0x60
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f000 fb0f 	bl	800beda <TIM_ITRx_SetConfig>
      break;
 800b8bc:	e01c      	b.n	800b8f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b8ca:	461a      	mov	r2, r3
 800b8cc:	f000 faa6 	bl	800be1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	2140      	movs	r1, #64	; 0x40
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f000 faff 	bl	800beda <TIM_ITRx_SetConfig>
      break;
 800b8dc:	e00c      	b.n	800b8f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681a      	ldr	r2, [r3, #0]
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	4619      	mov	r1, r3
 800b8e8:	4610      	mov	r0, r2
 800b8ea:	f000 faf6 	bl	800beda <TIM_ITRx_SetConfig>
      break;
 800b8ee:	e003      	b.n	800b8f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	73fb      	strb	r3, [r7, #15]
      break;
 800b8f4:	e000      	b.n	800b8f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b8f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2201      	movs	r2, #1
 800b8fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2200      	movs	r2, #0
 800b904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b908:	7bfb      	ldrb	r3, [r7, #15]
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3710      	adds	r7, #16
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}

0800b912 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b912:	b480      	push	{r7}
 800b914:	b083      	sub	sp, #12
 800b916:	af00      	add	r7, sp, #0
 800b918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b91a:	bf00      	nop
 800b91c:	370c      	adds	r7, #12
 800b91e:	46bd      	mov	sp, r7
 800b920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b924:	4770      	bx	lr

0800b926 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b926:	b480      	push	{r7}
 800b928:	b083      	sub	sp, #12
 800b92a:	af00      	add	r7, sp, #0
 800b92c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b92e:	bf00      	nop
 800b930:	370c      	adds	r7, #12
 800b932:	46bd      	mov	sp, r7
 800b934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b938:	4770      	bx	lr

0800b93a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b93a:	b480      	push	{r7}
 800b93c:	b083      	sub	sp, #12
 800b93e:	af00      	add	r7, sp, #0
 800b940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b942:	bf00      	nop
 800b944:	370c      	adds	r7, #12
 800b946:	46bd      	mov	sp, r7
 800b948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94c:	4770      	bx	lr

0800b94e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b94e:	b480      	push	{r7}
 800b950:	b083      	sub	sp, #12
 800b952:	af00      	add	r7, sp, #0
 800b954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b956:	bf00      	nop
 800b958:	370c      	adds	r7, #12
 800b95a:	46bd      	mov	sp, r7
 800b95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b960:	4770      	bx	lr
	...

0800b964 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b964:	b480      	push	{r7}
 800b966:	b085      	sub	sp, #20
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
 800b96c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	4a46      	ldr	r2, [pc, #280]	; (800ba90 <TIM_Base_SetConfig+0x12c>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d013      	beq.n	800b9a4 <TIM_Base_SetConfig+0x40>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b982:	d00f      	beq.n	800b9a4 <TIM_Base_SetConfig+0x40>
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	4a43      	ldr	r2, [pc, #268]	; (800ba94 <TIM_Base_SetConfig+0x130>)
 800b988:	4293      	cmp	r3, r2
 800b98a:	d00b      	beq.n	800b9a4 <TIM_Base_SetConfig+0x40>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	4a42      	ldr	r2, [pc, #264]	; (800ba98 <TIM_Base_SetConfig+0x134>)
 800b990:	4293      	cmp	r3, r2
 800b992:	d007      	beq.n	800b9a4 <TIM_Base_SetConfig+0x40>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	4a41      	ldr	r2, [pc, #260]	; (800ba9c <TIM_Base_SetConfig+0x138>)
 800b998:	4293      	cmp	r3, r2
 800b99a:	d003      	beq.n	800b9a4 <TIM_Base_SetConfig+0x40>
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	4a40      	ldr	r2, [pc, #256]	; (800baa0 <TIM_Base_SetConfig+0x13c>)
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d108      	bne.n	800b9b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	685b      	ldr	r3, [r3, #4]
 800b9b0:	68fa      	ldr	r2, [r7, #12]
 800b9b2:	4313      	orrs	r3, r2
 800b9b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	4a35      	ldr	r2, [pc, #212]	; (800ba90 <TIM_Base_SetConfig+0x12c>)
 800b9ba:	4293      	cmp	r3, r2
 800b9bc:	d02b      	beq.n	800ba16 <TIM_Base_SetConfig+0xb2>
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9c4:	d027      	beq.n	800ba16 <TIM_Base_SetConfig+0xb2>
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	4a32      	ldr	r2, [pc, #200]	; (800ba94 <TIM_Base_SetConfig+0x130>)
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d023      	beq.n	800ba16 <TIM_Base_SetConfig+0xb2>
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	4a31      	ldr	r2, [pc, #196]	; (800ba98 <TIM_Base_SetConfig+0x134>)
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d01f      	beq.n	800ba16 <TIM_Base_SetConfig+0xb2>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	4a30      	ldr	r2, [pc, #192]	; (800ba9c <TIM_Base_SetConfig+0x138>)
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d01b      	beq.n	800ba16 <TIM_Base_SetConfig+0xb2>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	4a2f      	ldr	r2, [pc, #188]	; (800baa0 <TIM_Base_SetConfig+0x13c>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d017      	beq.n	800ba16 <TIM_Base_SetConfig+0xb2>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	4a2e      	ldr	r2, [pc, #184]	; (800baa4 <TIM_Base_SetConfig+0x140>)
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d013      	beq.n	800ba16 <TIM_Base_SetConfig+0xb2>
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	4a2d      	ldr	r2, [pc, #180]	; (800baa8 <TIM_Base_SetConfig+0x144>)
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	d00f      	beq.n	800ba16 <TIM_Base_SetConfig+0xb2>
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	4a2c      	ldr	r2, [pc, #176]	; (800baac <TIM_Base_SetConfig+0x148>)
 800b9fa:	4293      	cmp	r3, r2
 800b9fc:	d00b      	beq.n	800ba16 <TIM_Base_SetConfig+0xb2>
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	4a2b      	ldr	r2, [pc, #172]	; (800bab0 <TIM_Base_SetConfig+0x14c>)
 800ba02:	4293      	cmp	r3, r2
 800ba04:	d007      	beq.n	800ba16 <TIM_Base_SetConfig+0xb2>
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	4a2a      	ldr	r2, [pc, #168]	; (800bab4 <TIM_Base_SetConfig+0x150>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d003      	beq.n	800ba16 <TIM_Base_SetConfig+0xb2>
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	4a29      	ldr	r2, [pc, #164]	; (800bab8 <TIM_Base_SetConfig+0x154>)
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d108      	bne.n	800ba28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	68db      	ldr	r3, [r3, #12]
 800ba22:	68fa      	ldr	r2, [r7, #12]
 800ba24:	4313      	orrs	r3, r2
 800ba26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	695b      	ldr	r3, [r3, #20]
 800ba32:	4313      	orrs	r3, r2
 800ba34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	68fa      	ldr	r2, [r7, #12]
 800ba3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	689a      	ldr	r2, [r3, #8]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	681a      	ldr	r2, [r3, #0]
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	4a10      	ldr	r2, [pc, #64]	; (800ba90 <TIM_Base_SetConfig+0x12c>)
 800ba50:	4293      	cmp	r3, r2
 800ba52:	d003      	beq.n	800ba5c <TIM_Base_SetConfig+0xf8>
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	4a12      	ldr	r2, [pc, #72]	; (800baa0 <TIM_Base_SetConfig+0x13c>)
 800ba58:	4293      	cmp	r3, r2
 800ba5a:	d103      	bne.n	800ba64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	691a      	ldr	r2, [r3, #16]
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2201      	movs	r2, #1
 800ba68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	691b      	ldr	r3, [r3, #16]
 800ba6e:	f003 0301 	and.w	r3, r3, #1
 800ba72:	2b01      	cmp	r3, #1
 800ba74:	d105      	bne.n	800ba82 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	691b      	ldr	r3, [r3, #16]
 800ba7a:	f023 0201 	bic.w	r2, r3, #1
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	611a      	str	r2, [r3, #16]
  }
}
 800ba82:	bf00      	nop
 800ba84:	3714      	adds	r7, #20
 800ba86:	46bd      	mov	sp, r7
 800ba88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8c:	4770      	bx	lr
 800ba8e:	bf00      	nop
 800ba90:	40010000 	.word	0x40010000
 800ba94:	40000400 	.word	0x40000400
 800ba98:	40000800 	.word	0x40000800
 800ba9c:	40000c00 	.word	0x40000c00
 800baa0:	40010400 	.word	0x40010400
 800baa4:	40014000 	.word	0x40014000
 800baa8:	40014400 	.word	0x40014400
 800baac:	40014800 	.word	0x40014800
 800bab0:	40001800 	.word	0x40001800
 800bab4:	40001c00 	.word	0x40001c00
 800bab8:	40002000 	.word	0x40002000

0800babc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800babc:	b480      	push	{r7}
 800babe:	b087      	sub	sp, #28
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6a1b      	ldr	r3, [r3, #32]
 800baca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6a1b      	ldr	r3, [r3, #32]
 800bad0:	f023 0201 	bic.w	r2, r3, #1
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	699b      	ldr	r3, [r3, #24]
 800bae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800baea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	f023 0303 	bic.w	r3, r3, #3
 800baf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	68fa      	ldr	r2, [r7, #12]
 800bafa:	4313      	orrs	r3, r2
 800bafc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	f023 0302 	bic.w	r3, r3, #2
 800bb04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	689b      	ldr	r3, [r3, #8]
 800bb0a:	697a      	ldr	r2, [r7, #20]
 800bb0c:	4313      	orrs	r3, r2
 800bb0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	4a20      	ldr	r2, [pc, #128]	; (800bb94 <TIM_OC1_SetConfig+0xd8>)
 800bb14:	4293      	cmp	r3, r2
 800bb16:	d003      	beq.n	800bb20 <TIM_OC1_SetConfig+0x64>
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	4a1f      	ldr	r2, [pc, #124]	; (800bb98 <TIM_OC1_SetConfig+0xdc>)
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d10c      	bne.n	800bb3a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	f023 0308 	bic.w	r3, r3, #8
 800bb26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	68db      	ldr	r3, [r3, #12]
 800bb2c:	697a      	ldr	r2, [r7, #20]
 800bb2e:	4313      	orrs	r3, r2
 800bb30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	f023 0304 	bic.w	r3, r3, #4
 800bb38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	4a15      	ldr	r2, [pc, #84]	; (800bb94 <TIM_OC1_SetConfig+0xd8>)
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d003      	beq.n	800bb4a <TIM_OC1_SetConfig+0x8e>
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	4a14      	ldr	r2, [pc, #80]	; (800bb98 <TIM_OC1_SetConfig+0xdc>)
 800bb46:	4293      	cmp	r3, r2
 800bb48:	d111      	bne.n	800bb6e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bb50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bb58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	695b      	ldr	r3, [r3, #20]
 800bb5e:	693a      	ldr	r2, [r7, #16]
 800bb60:	4313      	orrs	r3, r2
 800bb62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	699b      	ldr	r3, [r3, #24]
 800bb68:	693a      	ldr	r2, [r7, #16]
 800bb6a:	4313      	orrs	r3, r2
 800bb6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	693a      	ldr	r2, [r7, #16]
 800bb72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	68fa      	ldr	r2, [r7, #12]
 800bb78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	685a      	ldr	r2, [r3, #4]
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	697a      	ldr	r2, [r7, #20]
 800bb86:	621a      	str	r2, [r3, #32]
}
 800bb88:	bf00      	nop
 800bb8a:	371c      	adds	r7, #28
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb92:	4770      	bx	lr
 800bb94:	40010000 	.word	0x40010000
 800bb98:	40010400 	.word	0x40010400

0800bb9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b087      	sub	sp, #28
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
 800bba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6a1b      	ldr	r3, [r3, #32]
 800bbaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	6a1b      	ldr	r3, [r3, #32]
 800bbb0:	f023 0210 	bic.w	r2, r3, #16
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	685b      	ldr	r3, [r3, #4]
 800bbbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	699b      	ldr	r3, [r3, #24]
 800bbc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bbca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bbd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	021b      	lsls	r3, r3, #8
 800bbda:	68fa      	ldr	r2, [r7, #12]
 800bbdc:	4313      	orrs	r3, r2
 800bbde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bbe0:	697b      	ldr	r3, [r7, #20]
 800bbe2:	f023 0320 	bic.w	r3, r3, #32
 800bbe6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	689b      	ldr	r3, [r3, #8]
 800bbec:	011b      	lsls	r3, r3, #4
 800bbee:	697a      	ldr	r2, [r7, #20]
 800bbf0:	4313      	orrs	r3, r2
 800bbf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	4a22      	ldr	r2, [pc, #136]	; (800bc80 <TIM_OC2_SetConfig+0xe4>)
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	d003      	beq.n	800bc04 <TIM_OC2_SetConfig+0x68>
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	4a21      	ldr	r2, [pc, #132]	; (800bc84 <TIM_OC2_SetConfig+0xe8>)
 800bc00:	4293      	cmp	r3, r2
 800bc02:	d10d      	bne.n	800bc20 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	68db      	ldr	r3, [r3, #12]
 800bc10:	011b      	lsls	r3, r3, #4
 800bc12:	697a      	ldr	r2, [r7, #20]
 800bc14:	4313      	orrs	r3, r2
 800bc16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	4a17      	ldr	r2, [pc, #92]	; (800bc80 <TIM_OC2_SetConfig+0xe4>)
 800bc24:	4293      	cmp	r3, r2
 800bc26:	d003      	beq.n	800bc30 <TIM_OC2_SetConfig+0x94>
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	4a16      	ldr	r2, [pc, #88]	; (800bc84 <TIM_OC2_SetConfig+0xe8>)
 800bc2c:	4293      	cmp	r3, r2
 800bc2e:	d113      	bne.n	800bc58 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bc36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bc3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	695b      	ldr	r3, [r3, #20]
 800bc44:	009b      	lsls	r3, r3, #2
 800bc46:	693a      	ldr	r2, [r7, #16]
 800bc48:	4313      	orrs	r3, r2
 800bc4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	699b      	ldr	r3, [r3, #24]
 800bc50:	009b      	lsls	r3, r3, #2
 800bc52:	693a      	ldr	r2, [r7, #16]
 800bc54:	4313      	orrs	r3, r2
 800bc56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	693a      	ldr	r2, [r7, #16]
 800bc5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	68fa      	ldr	r2, [r7, #12]
 800bc62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	685a      	ldr	r2, [r3, #4]
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	697a      	ldr	r2, [r7, #20]
 800bc70:	621a      	str	r2, [r3, #32]
}
 800bc72:	bf00      	nop
 800bc74:	371c      	adds	r7, #28
 800bc76:	46bd      	mov	sp, r7
 800bc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7c:	4770      	bx	lr
 800bc7e:	bf00      	nop
 800bc80:	40010000 	.word	0x40010000
 800bc84:	40010400 	.word	0x40010400

0800bc88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bc88:	b480      	push	{r7}
 800bc8a:	b087      	sub	sp, #28
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
 800bc90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6a1b      	ldr	r3, [r3, #32]
 800bc96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6a1b      	ldr	r3, [r3, #32]
 800bc9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	685b      	ldr	r3, [r3, #4]
 800bca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	69db      	ldr	r3, [r3, #28]
 800bcae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	f023 0303 	bic.w	r3, r3, #3
 800bcbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	68fa      	ldr	r2, [r7, #12]
 800bcc6:	4313      	orrs	r3, r2
 800bcc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bcd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	689b      	ldr	r3, [r3, #8]
 800bcd6:	021b      	lsls	r3, r3, #8
 800bcd8:	697a      	ldr	r2, [r7, #20]
 800bcda:	4313      	orrs	r3, r2
 800bcdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	4a21      	ldr	r2, [pc, #132]	; (800bd68 <TIM_OC3_SetConfig+0xe0>)
 800bce2:	4293      	cmp	r3, r2
 800bce4:	d003      	beq.n	800bcee <TIM_OC3_SetConfig+0x66>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	4a20      	ldr	r2, [pc, #128]	; (800bd6c <TIM_OC3_SetConfig+0xe4>)
 800bcea:	4293      	cmp	r3, r2
 800bcec:	d10d      	bne.n	800bd0a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bcee:	697b      	ldr	r3, [r7, #20]
 800bcf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bcf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	68db      	ldr	r3, [r3, #12]
 800bcfa:	021b      	lsls	r3, r3, #8
 800bcfc:	697a      	ldr	r2, [r7, #20]
 800bcfe:	4313      	orrs	r3, r2
 800bd00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bd08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	4a16      	ldr	r2, [pc, #88]	; (800bd68 <TIM_OC3_SetConfig+0xe0>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d003      	beq.n	800bd1a <TIM_OC3_SetConfig+0x92>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	4a15      	ldr	r2, [pc, #84]	; (800bd6c <TIM_OC3_SetConfig+0xe4>)
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d113      	bne.n	800bd42 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bd28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	695b      	ldr	r3, [r3, #20]
 800bd2e:	011b      	lsls	r3, r3, #4
 800bd30:	693a      	ldr	r2, [r7, #16]
 800bd32:	4313      	orrs	r3, r2
 800bd34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	699b      	ldr	r3, [r3, #24]
 800bd3a:	011b      	lsls	r3, r3, #4
 800bd3c:	693a      	ldr	r2, [r7, #16]
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	693a      	ldr	r2, [r7, #16]
 800bd46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	68fa      	ldr	r2, [r7, #12]
 800bd4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	685a      	ldr	r2, [r3, #4]
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	697a      	ldr	r2, [r7, #20]
 800bd5a:	621a      	str	r2, [r3, #32]
}
 800bd5c:	bf00      	nop
 800bd5e:	371c      	adds	r7, #28
 800bd60:	46bd      	mov	sp, r7
 800bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd66:	4770      	bx	lr
 800bd68:	40010000 	.word	0x40010000
 800bd6c:	40010400 	.word	0x40010400

0800bd70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bd70:	b480      	push	{r7}
 800bd72:	b087      	sub	sp, #28
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6a1b      	ldr	r3, [r3, #32]
 800bd7e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6a1b      	ldr	r3, [r3, #32]
 800bd84:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	685b      	ldr	r3, [r3, #4]
 800bd90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	69db      	ldr	r3, [r3, #28]
 800bd96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bda6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	021b      	lsls	r3, r3, #8
 800bdae:	68fa      	ldr	r2, [r7, #12]
 800bdb0:	4313      	orrs	r3, r2
 800bdb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bdba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	689b      	ldr	r3, [r3, #8]
 800bdc0:	031b      	lsls	r3, r3, #12
 800bdc2:	693a      	ldr	r2, [r7, #16]
 800bdc4:	4313      	orrs	r3, r2
 800bdc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	4a12      	ldr	r2, [pc, #72]	; (800be14 <TIM_OC4_SetConfig+0xa4>)
 800bdcc:	4293      	cmp	r3, r2
 800bdce:	d003      	beq.n	800bdd8 <TIM_OC4_SetConfig+0x68>
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	4a11      	ldr	r2, [pc, #68]	; (800be18 <TIM_OC4_SetConfig+0xa8>)
 800bdd4:	4293      	cmp	r3, r2
 800bdd6:	d109      	bne.n	800bdec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bdd8:	697b      	ldr	r3, [r7, #20]
 800bdda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bdde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	695b      	ldr	r3, [r3, #20]
 800bde4:	019b      	lsls	r3, r3, #6
 800bde6:	697a      	ldr	r2, [r7, #20]
 800bde8:	4313      	orrs	r3, r2
 800bdea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	697a      	ldr	r2, [r7, #20]
 800bdf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	68fa      	ldr	r2, [r7, #12]
 800bdf6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	685a      	ldr	r2, [r3, #4]
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	693a      	ldr	r2, [r7, #16]
 800be04:	621a      	str	r2, [r3, #32]
}
 800be06:	bf00      	nop
 800be08:	371c      	adds	r7, #28
 800be0a:	46bd      	mov	sp, r7
 800be0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be10:	4770      	bx	lr
 800be12:	bf00      	nop
 800be14:	40010000 	.word	0x40010000
 800be18:	40010400 	.word	0x40010400

0800be1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be1c:	b480      	push	{r7}
 800be1e:	b087      	sub	sp, #28
 800be20:	af00      	add	r7, sp, #0
 800be22:	60f8      	str	r0, [r7, #12]
 800be24:	60b9      	str	r1, [r7, #8]
 800be26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	6a1b      	ldr	r3, [r3, #32]
 800be2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	6a1b      	ldr	r3, [r3, #32]
 800be32:	f023 0201 	bic.w	r2, r3, #1
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	699b      	ldr	r3, [r3, #24]
 800be3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800be46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	011b      	lsls	r3, r3, #4
 800be4c:	693a      	ldr	r2, [r7, #16]
 800be4e:	4313      	orrs	r3, r2
 800be50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	f023 030a 	bic.w	r3, r3, #10
 800be58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800be5a:	697a      	ldr	r2, [r7, #20]
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	4313      	orrs	r3, r2
 800be60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	693a      	ldr	r2, [r7, #16]
 800be66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	697a      	ldr	r2, [r7, #20]
 800be6c:	621a      	str	r2, [r3, #32]
}
 800be6e:	bf00      	nop
 800be70:	371c      	adds	r7, #28
 800be72:	46bd      	mov	sp, r7
 800be74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be78:	4770      	bx	lr

0800be7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be7a:	b480      	push	{r7}
 800be7c:	b087      	sub	sp, #28
 800be7e:	af00      	add	r7, sp, #0
 800be80:	60f8      	str	r0, [r7, #12]
 800be82:	60b9      	str	r1, [r7, #8]
 800be84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	6a1b      	ldr	r3, [r3, #32]
 800be8a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	6a1b      	ldr	r3, [r3, #32]
 800be90:	f023 0210 	bic.w	r2, r3, #16
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	699b      	ldr	r3, [r3, #24]
 800be9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800be9e:	693b      	ldr	r3, [r7, #16]
 800bea0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bea4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	031b      	lsls	r3, r3, #12
 800beaa:	693a      	ldr	r2, [r7, #16]
 800beac:	4313      	orrs	r3, r2
 800beae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800beb0:	697b      	ldr	r3, [r7, #20]
 800beb2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800beb6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	011b      	lsls	r3, r3, #4
 800bebc:	697a      	ldr	r2, [r7, #20]
 800bebe:	4313      	orrs	r3, r2
 800bec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	693a      	ldr	r2, [r7, #16]
 800bec6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	697a      	ldr	r2, [r7, #20]
 800becc:	621a      	str	r2, [r3, #32]
}
 800bece:	bf00      	nop
 800bed0:	371c      	adds	r7, #28
 800bed2:	46bd      	mov	sp, r7
 800bed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed8:	4770      	bx	lr

0800beda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800beda:	b480      	push	{r7}
 800bedc:	b085      	sub	sp, #20
 800bede:	af00      	add	r7, sp, #0
 800bee0:	6078      	str	r0, [r7, #4]
 800bee2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	689b      	ldr	r3, [r3, #8]
 800bee8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bef0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bef2:	683a      	ldr	r2, [r7, #0]
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	4313      	orrs	r3, r2
 800bef8:	f043 0307 	orr.w	r3, r3, #7
 800befc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	68fa      	ldr	r2, [r7, #12]
 800bf02:	609a      	str	r2, [r3, #8]
}
 800bf04:	bf00      	nop
 800bf06:	3714      	adds	r7, #20
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0e:	4770      	bx	lr

0800bf10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bf10:	b480      	push	{r7}
 800bf12:	b087      	sub	sp, #28
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	60f8      	str	r0, [r7, #12]
 800bf18:	60b9      	str	r1, [r7, #8]
 800bf1a:	607a      	str	r2, [r7, #4]
 800bf1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	689b      	ldr	r3, [r3, #8]
 800bf22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf24:	697b      	ldr	r3, [r7, #20]
 800bf26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bf2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	021a      	lsls	r2, r3, #8
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	431a      	orrs	r2, r3
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	4313      	orrs	r3, r2
 800bf38:	697a      	ldr	r2, [r7, #20]
 800bf3a:	4313      	orrs	r3, r2
 800bf3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	697a      	ldr	r2, [r7, #20]
 800bf42:	609a      	str	r2, [r3, #8]
}
 800bf44:	bf00      	nop
 800bf46:	371c      	adds	r7, #28
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4e:	4770      	bx	lr

0800bf50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bf50:	b480      	push	{r7}
 800bf52:	b087      	sub	sp, #28
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	60f8      	str	r0, [r7, #12]
 800bf58:	60b9      	str	r1, [r7, #8]
 800bf5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	f003 031f 	and.w	r3, r3, #31
 800bf62:	2201      	movs	r2, #1
 800bf64:	fa02 f303 	lsl.w	r3, r2, r3
 800bf68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	6a1a      	ldr	r2, [r3, #32]
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	43db      	mvns	r3, r3
 800bf72:	401a      	ands	r2, r3
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	6a1a      	ldr	r2, [r3, #32]
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	f003 031f 	and.w	r3, r3, #31
 800bf82:	6879      	ldr	r1, [r7, #4]
 800bf84:	fa01 f303 	lsl.w	r3, r1, r3
 800bf88:	431a      	orrs	r2, r3
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	621a      	str	r2, [r3, #32]
}
 800bf8e:	bf00      	nop
 800bf90:	371c      	adds	r7, #28
 800bf92:	46bd      	mov	sp, r7
 800bf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf98:	4770      	bx	lr
	...

0800bf9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b085      	sub	sp, #20
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
 800bfa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bfac:	2b01      	cmp	r3, #1
 800bfae:	d101      	bne.n	800bfb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bfb0:	2302      	movs	r3, #2
 800bfb2:	e05a      	b.n	800c06a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2202      	movs	r2, #2
 800bfc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	685b      	ldr	r3, [r3, #4]
 800bfca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	689b      	ldr	r3, [r3, #8]
 800bfd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bfda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	68fa      	ldr	r2, [r7, #12]
 800bfe2:	4313      	orrs	r3, r2
 800bfe4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	68fa      	ldr	r2, [r7, #12]
 800bfec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	4a21      	ldr	r2, [pc, #132]	; (800c078 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800bff4:	4293      	cmp	r3, r2
 800bff6:	d022      	beq.n	800c03e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c000:	d01d      	beq.n	800c03e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	4a1d      	ldr	r2, [pc, #116]	; (800c07c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c008:	4293      	cmp	r3, r2
 800c00a:	d018      	beq.n	800c03e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	4a1b      	ldr	r2, [pc, #108]	; (800c080 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c012:	4293      	cmp	r3, r2
 800c014:	d013      	beq.n	800c03e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	4a1a      	ldr	r2, [pc, #104]	; (800c084 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c01c:	4293      	cmp	r3, r2
 800c01e:	d00e      	beq.n	800c03e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	4a18      	ldr	r2, [pc, #96]	; (800c088 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c026:	4293      	cmp	r3, r2
 800c028:	d009      	beq.n	800c03e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	4a17      	ldr	r2, [pc, #92]	; (800c08c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c030:	4293      	cmp	r3, r2
 800c032:	d004      	beq.n	800c03e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	4a15      	ldr	r2, [pc, #84]	; (800c090 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c03a:	4293      	cmp	r3, r2
 800c03c:	d10c      	bne.n	800c058 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c044:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	685b      	ldr	r3, [r3, #4]
 800c04a:	68ba      	ldr	r2, [r7, #8]
 800c04c:	4313      	orrs	r3, r2
 800c04e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	68ba      	ldr	r2, [r7, #8]
 800c056:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2201      	movs	r2, #1
 800c05c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2200      	movs	r2, #0
 800c064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c068:	2300      	movs	r3, #0
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3714      	adds	r7, #20
 800c06e:	46bd      	mov	sp, r7
 800c070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c074:	4770      	bx	lr
 800c076:	bf00      	nop
 800c078:	40010000 	.word	0x40010000
 800c07c:	40000400 	.word	0x40000400
 800c080:	40000800 	.word	0x40000800
 800c084:	40000c00 	.word	0x40000c00
 800c088:	40010400 	.word	0x40010400
 800c08c:	40014000 	.word	0x40014000
 800c090:	40001800 	.word	0x40001800

0800c094 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c094:	b480      	push	{r7}
 800c096:	b085      	sub	sp, #20
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
 800c09c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0a8:	2b01      	cmp	r3, #1
 800c0aa:	d101      	bne.n	800c0b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c0ac:	2302      	movs	r3, #2
 800c0ae:	e03d      	b.n	800c12c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2201      	movs	r2, #1
 800c0b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	68db      	ldr	r3, [r3, #12]
 800c0c2:	4313      	orrs	r3, r2
 800c0c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	689b      	ldr	r3, [r3, #8]
 800c0d0:	4313      	orrs	r3, r2
 800c0d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	685b      	ldr	r3, [r3, #4]
 800c0de:	4313      	orrs	r3, r2
 800c0e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	4313      	orrs	r3, r2
 800c0ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	691b      	ldr	r3, [r3, #16]
 800c0fa:	4313      	orrs	r3, r2
 800c0fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	695b      	ldr	r3, [r3, #20]
 800c108:	4313      	orrs	r3, r2
 800c10a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	69db      	ldr	r3, [r3, #28]
 800c116:	4313      	orrs	r3, r2
 800c118:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	68fa      	ldr	r2, [r7, #12]
 800c120:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2200      	movs	r2, #0
 800c126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c12a:	2300      	movs	r3, #0
}
 800c12c:	4618      	mov	r0, r3
 800c12e:	3714      	adds	r7, #20
 800c130:	46bd      	mov	sp, r7
 800c132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c136:	4770      	bx	lr

0800c138 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c138:	b480      	push	{r7}
 800c13a:	b083      	sub	sp, #12
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c140:	bf00      	nop
 800c142:	370c      	adds	r7, #12
 800c144:	46bd      	mov	sp, r7
 800c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14a:	4770      	bx	lr

0800c14c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c14c:	b480      	push	{r7}
 800c14e:	b083      	sub	sp, #12
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c154:	bf00      	nop
 800c156:	370c      	adds	r7, #12
 800c158:	46bd      	mov	sp, r7
 800c15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15e:	4770      	bx	lr

0800c160 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b082      	sub	sp, #8
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d101      	bne.n	800c172 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c16e:	2301      	movs	r3, #1
 800c170:	e042      	b.n	800c1f8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c178:	b2db      	uxtb	r3, r3
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d106      	bne.n	800c18c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2200      	movs	r2, #0
 800c182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f7fc f830 	bl	80081ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2224      	movs	r2, #36	; 0x24
 800c190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	68da      	ldr	r2, [r3, #12]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c1a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	f000 ff37 	bl	800d018 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	691a      	ldr	r2, [r3, #16]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c1b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	695a      	ldr	r2, [r3, #20]
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c1c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	68da      	ldr	r2, [r3, #12]
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c1d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2220      	movs	r2, #32
 800c1e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2220      	movs	r2, #32
 800c1ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c1f6:	2300      	movs	r3, #0
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	3708      	adds	r7, #8
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b08c      	sub	sp, #48	; 0x30
 800c204:	af00      	add	r7, sp, #0
 800c206:	60f8      	str	r0, [r7, #12]
 800c208:	60b9      	str	r1, [r7, #8]
 800c20a:	4613      	mov	r3, r2
 800c20c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c214:	b2db      	uxtb	r3, r3
 800c216:	2b20      	cmp	r3, #32
 800c218:	d156      	bne.n	800c2c8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d002      	beq.n	800c226 <HAL_UART_Transmit_DMA+0x26>
 800c220:	88fb      	ldrh	r3, [r7, #6]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d101      	bne.n	800c22a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800c226:	2301      	movs	r3, #1
 800c228:	e04f      	b.n	800c2ca <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800c22a:	68ba      	ldr	r2, [r7, #8]
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	88fa      	ldrh	r2, [r7, #6]
 800c234:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	88fa      	ldrh	r2, [r7, #6]
 800c23a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	2200      	movs	r2, #0
 800c240:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	2221      	movs	r2, #33	; 0x21
 800c246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c24e:	4a21      	ldr	r2, [pc, #132]	; (800c2d4 <HAL_UART_Transmit_DMA+0xd4>)
 800c250:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c256:	4a20      	ldr	r2, [pc, #128]	; (800c2d8 <HAL_UART_Transmit_DMA+0xd8>)
 800c258:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c25e:	4a1f      	ldr	r2, [pc, #124]	; (800c2dc <HAL_UART_Transmit_DMA+0xdc>)
 800c260:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c266:	2200      	movs	r2, #0
 800c268:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800c26a:	f107 0308 	add.w	r3, r7, #8
 800c26e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800c274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c276:	6819      	ldr	r1, [r3, #0]
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	3304      	adds	r3, #4
 800c27e:	461a      	mov	r2, r3
 800c280:	88fb      	ldrh	r3, [r7, #6]
 800c282:	f7fc fc87 	bl	8008b94 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c28e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	3314      	adds	r3, #20
 800c296:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c298:	69bb      	ldr	r3, [r7, #24]
 800c29a:	e853 3f00 	ldrex	r3, [r3]
 800c29e:	617b      	str	r3, [r7, #20]
   return(result);
 800c2a0:	697b      	ldr	r3, [r7, #20]
 800c2a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2a6:	62bb      	str	r3, [r7, #40]	; 0x28
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	3314      	adds	r3, #20
 800c2ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2b0:	627a      	str	r2, [r7, #36]	; 0x24
 800c2b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2b4:	6a39      	ldr	r1, [r7, #32]
 800c2b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2b8:	e841 2300 	strex	r3, r2, [r1]
 800c2bc:	61fb      	str	r3, [r7, #28]
   return(result);
 800c2be:	69fb      	ldr	r3, [r7, #28]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d1e5      	bne.n	800c290 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	e000      	b.n	800c2ca <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800c2c8:	2302      	movs	r3, #2
  }
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3730      	adds	r7, #48	; 0x30
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}
 800c2d2:	bf00      	nop
 800c2d4:	0800c8a5 	.word	0x0800c8a5
 800c2d8:	0800c93f 	.word	0x0800c93f
 800c2dc:	0800cac3 	.word	0x0800cac3

0800c2e0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b084      	sub	sp, #16
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	60f8      	str	r0, [r7, #12]
 800c2e8:	60b9      	str	r1, [r7, #8]
 800c2ea:	4613      	mov	r3, r2
 800c2ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c2f4:	b2db      	uxtb	r3, r3
 800c2f6:	2b20      	cmp	r3, #32
 800c2f8:	d112      	bne.n	800c320 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d002      	beq.n	800c306 <HAL_UART_Receive_DMA+0x26>
 800c300:	88fb      	ldrh	r3, [r7, #6]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d101      	bne.n	800c30a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800c306:	2301      	movs	r3, #1
 800c308:	e00b      	b.n	800c322 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	2200      	movs	r2, #0
 800c30e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c310:	88fb      	ldrh	r3, [r7, #6]
 800c312:	461a      	mov	r2, r3
 800c314:	68b9      	ldr	r1, [r7, #8]
 800c316:	68f8      	ldr	r0, [r7, #12]
 800c318:	f000 fc1e 	bl	800cb58 <UART_Start_Receive_DMA>
 800c31c:	4603      	mov	r3, r0
 800c31e:	e000      	b.n	800c322 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800c320:	2302      	movs	r3, #2
  }
}
 800c322:	4618      	mov	r0, r3
 800c324:	3710      	adds	r7, #16
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
	...

0800c32c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b0ba      	sub	sp, #232	; 0xe8
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	68db      	ldr	r3, [r3, #12]
 800c344:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	695b      	ldr	r3, [r3, #20]
 800c34e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c352:	2300      	movs	r3, #0
 800c354:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c358:	2300      	movs	r3, #0
 800c35a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c35e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c362:	f003 030f 	and.w	r3, r3, #15
 800c366:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c36a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d10f      	bne.n	800c392 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c376:	f003 0320 	and.w	r3, r3, #32
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d009      	beq.n	800c392 <HAL_UART_IRQHandler+0x66>
 800c37e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c382:	f003 0320 	and.w	r3, r3, #32
 800c386:	2b00      	cmp	r3, #0
 800c388:	d003      	beq.n	800c392 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f000 fd85 	bl	800ce9a <UART_Receive_IT>
      return;
 800c390:	e25b      	b.n	800c84a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c392:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c396:	2b00      	cmp	r3, #0
 800c398:	f000 80de 	beq.w	800c558 <HAL_UART_IRQHandler+0x22c>
 800c39c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3a0:	f003 0301 	and.w	r3, r3, #1
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d106      	bne.n	800c3b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c3a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	f000 80d1 	beq.w	800c558 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c3b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3ba:	f003 0301 	and.w	r3, r3, #1
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d00b      	beq.n	800c3da <HAL_UART_IRQHandler+0xae>
 800c3c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d005      	beq.n	800c3da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3d2:	f043 0201 	orr.w	r2, r3, #1
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c3da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3de:	f003 0304 	and.w	r3, r3, #4
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d00b      	beq.n	800c3fe <HAL_UART_IRQHandler+0xd2>
 800c3e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3ea:	f003 0301 	and.w	r3, r3, #1
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d005      	beq.n	800c3fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3f6:	f043 0202 	orr.w	r2, r3, #2
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c3fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c402:	f003 0302 	and.w	r3, r3, #2
 800c406:	2b00      	cmp	r3, #0
 800c408:	d00b      	beq.n	800c422 <HAL_UART_IRQHandler+0xf6>
 800c40a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c40e:	f003 0301 	and.w	r3, r3, #1
 800c412:	2b00      	cmp	r3, #0
 800c414:	d005      	beq.n	800c422 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c41a:	f043 0204 	orr.w	r2, r3, #4
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c426:	f003 0308 	and.w	r3, r3, #8
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d011      	beq.n	800c452 <HAL_UART_IRQHandler+0x126>
 800c42e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c432:	f003 0320 	and.w	r3, r3, #32
 800c436:	2b00      	cmp	r3, #0
 800c438:	d105      	bne.n	800c446 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c43a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c43e:	f003 0301 	and.w	r3, r3, #1
 800c442:	2b00      	cmp	r3, #0
 800c444:	d005      	beq.n	800c452 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c44a:	f043 0208 	orr.w	r2, r3, #8
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c456:	2b00      	cmp	r3, #0
 800c458:	f000 81f2 	beq.w	800c840 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c45c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c460:	f003 0320 	and.w	r3, r3, #32
 800c464:	2b00      	cmp	r3, #0
 800c466:	d008      	beq.n	800c47a <HAL_UART_IRQHandler+0x14e>
 800c468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c46c:	f003 0320 	and.w	r3, r3, #32
 800c470:	2b00      	cmp	r3, #0
 800c472:	d002      	beq.n	800c47a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c474:	6878      	ldr	r0, [r7, #4]
 800c476:	f000 fd10 	bl	800ce9a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	695b      	ldr	r3, [r3, #20]
 800c480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c484:	2b40      	cmp	r3, #64	; 0x40
 800c486:	bf0c      	ite	eq
 800c488:	2301      	moveq	r3, #1
 800c48a:	2300      	movne	r3, #0
 800c48c:	b2db      	uxtb	r3, r3
 800c48e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c496:	f003 0308 	and.w	r3, r3, #8
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d103      	bne.n	800c4a6 <HAL_UART_IRQHandler+0x17a>
 800c49e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d04f      	beq.n	800c546 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f000 fc18 	bl	800ccdc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	695b      	ldr	r3, [r3, #20]
 800c4b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4b6:	2b40      	cmp	r3, #64	; 0x40
 800c4b8:	d141      	bne.n	800c53e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	3314      	adds	r3, #20
 800c4c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c4c8:	e853 3f00 	ldrex	r3, [r3]
 800c4cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c4d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c4d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c4d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	3314      	adds	r3, #20
 800c4e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c4e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c4ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c4f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c4f6:	e841 2300 	strex	r3, r2, [r1]
 800c4fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c4fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c502:	2b00      	cmp	r3, #0
 800c504:	d1d9      	bne.n	800c4ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d013      	beq.n	800c536 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c512:	4a7e      	ldr	r2, [pc, #504]	; (800c70c <HAL_UART_IRQHandler+0x3e0>)
 800c514:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c51a:	4618      	mov	r0, r3
 800c51c:	f7fc fc02 	bl	8008d24 <HAL_DMA_Abort_IT>
 800c520:	4603      	mov	r3, r0
 800c522:	2b00      	cmp	r3, #0
 800c524:	d016      	beq.n	800c554 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c52a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c52c:	687a      	ldr	r2, [r7, #4]
 800c52e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c530:	4610      	mov	r0, r2
 800c532:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c534:	e00e      	b.n	800c554 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f000 f99e 	bl	800c878 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c53c:	e00a      	b.n	800c554 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f000 f99a 	bl	800c878 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c544:	e006      	b.n	800c554 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f000 f996 	bl	800c878 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2200      	movs	r2, #0
 800c550:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800c552:	e175      	b.n	800c840 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c554:	bf00      	nop
    return;
 800c556:	e173      	b.n	800c840 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c55c:	2b01      	cmp	r3, #1
 800c55e:	f040 814f 	bne.w	800c800 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c566:	f003 0310 	and.w	r3, r3, #16
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	f000 8148 	beq.w	800c800 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c574:	f003 0310 	and.w	r3, r3, #16
 800c578:	2b00      	cmp	r3, #0
 800c57a:	f000 8141 	beq.w	800c800 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c57e:	2300      	movs	r3, #0
 800c580:	60bb      	str	r3, [r7, #8]
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	60bb      	str	r3, [r7, #8]
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	685b      	ldr	r3, [r3, #4]
 800c590:	60bb      	str	r3, [r7, #8]
 800c592:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	695b      	ldr	r3, [r3, #20]
 800c59a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c59e:	2b40      	cmp	r3, #64	; 0x40
 800c5a0:	f040 80b6 	bne.w	800c710 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	685b      	ldr	r3, [r3, #4]
 800c5ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c5b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	f000 8145 	beq.w	800c844 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c5be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	f080 813e 	bcs.w	800c844 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c5ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5d4:	69db      	ldr	r3, [r3, #28]
 800c5d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5da:	f000 8088 	beq.w	800c6ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	330c      	adds	r3, #12
 800c5e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c5ec:	e853 3f00 	ldrex	r3, [r3]
 800c5f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c5f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c5f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c5fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	330c      	adds	r3, #12
 800c606:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c60a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c60e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c612:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c616:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c61a:	e841 2300 	strex	r3, r2, [r1]
 800c61e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c622:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c626:	2b00      	cmp	r3, #0
 800c628:	d1d9      	bne.n	800c5de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	3314      	adds	r3, #20
 800c630:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c632:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c634:	e853 3f00 	ldrex	r3, [r3]
 800c638:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c63a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c63c:	f023 0301 	bic.w	r3, r3, #1
 800c640:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	3314      	adds	r3, #20
 800c64a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c64e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c652:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c654:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c656:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c65a:	e841 2300 	strex	r3, r2, [r1]
 800c65e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c660:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c662:	2b00      	cmp	r3, #0
 800c664:	d1e1      	bne.n	800c62a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	3314      	adds	r3, #20
 800c66c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c66e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c670:	e853 3f00 	ldrex	r3, [r3]
 800c674:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c678:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c67c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	3314      	adds	r3, #20
 800c686:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c68a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c68c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c68e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c690:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c692:	e841 2300 	strex	r3, r2, [r1]
 800c696:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c698:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d1e3      	bne.n	800c666 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2220      	movs	r2, #32
 800c6a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	330c      	adds	r3, #12
 800c6b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6b6:	e853 3f00 	ldrex	r3, [r3]
 800c6ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c6bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c6be:	f023 0310 	bic.w	r3, r3, #16
 800c6c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	330c      	adds	r3, #12
 800c6cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c6d0:	65ba      	str	r2, [r7, #88]	; 0x58
 800c6d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c6d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c6d8:	e841 2300 	strex	r3, r2, [r1]
 800c6dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c6de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d1e3      	bne.n	800c6ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f7fc faab 	bl	8008c44 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2202      	movs	r2, #2
 800c6f2:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c6fc:	b29b      	uxth	r3, r3
 800c6fe:	1ad3      	subs	r3, r2, r3
 800c700:	b29b      	uxth	r3, r3
 800c702:	4619      	mov	r1, r3
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f000 f8c1 	bl	800c88c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c70a:	e09b      	b.n	800c844 <HAL_UART_IRQHandler+0x518>
 800c70c:	0800cda3 	.word	0x0800cda3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c718:	b29b      	uxth	r3, r3
 800c71a:	1ad3      	subs	r3, r2, r3
 800c71c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c724:	b29b      	uxth	r3, r3
 800c726:	2b00      	cmp	r3, #0
 800c728:	f000 808e 	beq.w	800c848 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c72c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c730:	2b00      	cmp	r3, #0
 800c732:	f000 8089 	beq.w	800c848 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	330c      	adds	r3, #12
 800c73c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c740:	e853 3f00 	ldrex	r3, [r3]
 800c744:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c748:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c74c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	330c      	adds	r3, #12
 800c756:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c75a:	647a      	str	r2, [r7, #68]	; 0x44
 800c75c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c75e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c760:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c762:	e841 2300 	strex	r3, r2, [r1]
 800c766:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d1e3      	bne.n	800c736 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	3314      	adds	r3, #20
 800c774:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c778:	e853 3f00 	ldrex	r3, [r3]
 800c77c:	623b      	str	r3, [r7, #32]
   return(result);
 800c77e:	6a3b      	ldr	r3, [r7, #32]
 800c780:	f023 0301 	bic.w	r3, r3, #1
 800c784:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	3314      	adds	r3, #20
 800c78e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c792:	633a      	str	r2, [r7, #48]	; 0x30
 800c794:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c796:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c79a:	e841 2300 	strex	r3, r2, [r1]
 800c79e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d1e3      	bne.n	800c76e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2220      	movs	r2, #32
 800c7aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	330c      	adds	r3, #12
 800c7ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7bc:	693b      	ldr	r3, [r7, #16]
 800c7be:	e853 3f00 	ldrex	r3, [r3]
 800c7c2:	60fb      	str	r3, [r7, #12]
   return(result);
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	f023 0310 	bic.w	r3, r3, #16
 800c7ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	330c      	adds	r3, #12
 800c7d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c7d8:	61fa      	str	r2, [r7, #28]
 800c7da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7dc:	69b9      	ldr	r1, [r7, #24]
 800c7de:	69fa      	ldr	r2, [r7, #28]
 800c7e0:	e841 2300 	strex	r3, r2, [r1]
 800c7e4:	617b      	str	r3, [r7, #20]
   return(result);
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d1e3      	bne.n	800c7b4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2202      	movs	r2, #2
 800c7f0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c7f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c7f6:	4619      	mov	r1, r3
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f000 f847 	bl	800c88c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c7fe:	e023      	b.n	800c848 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d009      	beq.n	800c820 <HAL_UART_IRQHandler+0x4f4>
 800c80c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c814:	2b00      	cmp	r3, #0
 800c816:	d003      	beq.n	800c820 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f000 fad6 	bl	800cdca <UART_Transmit_IT>
    return;
 800c81e:	e014      	b.n	800c84a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d00e      	beq.n	800c84a <HAL_UART_IRQHandler+0x51e>
 800c82c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c834:	2b00      	cmp	r3, #0
 800c836:	d008      	beq.n	800c84a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f000 fb16 	bl	800ce6a <UART_EndTransmit_IT>
    return;
 800c83e:	e004      	b.n	800c84a <HAL_UART_IRQHandler+0x51e>
    return;
 800c840:	bf00      	nop
 800c842:	e002      	b.n	800c84a <HAL_UART_IRQHandler+0x51e>
      return;
 800c844:	bf00      	nop
 800c846:	e000      	b.n	800c84a <HAL_UART_IRQHandler+0x51e>
      return;
 800c848:	bf00      	nop
  }
}
 800c84a:	37e8      	adds	r7, #232	; 0xe8
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}

0800c850 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c850:	b480      	push	{r7}
 800c852:	b083      	sub	sp, #12
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800c858:	bf00      	nop
 800c85a:	370c      	adds	r7, #12
 800c85c:	46bd      	mov	sp, r7
 800c85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c862:	4770      	bx	lr

0800c864 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c864:	b480      	push	{r7}
 800c866:	b083      	sub	sp, #12
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c86c:	bf00      	nop
 800c86e:	370c      	adds	r7, #12
 800c870:	46bd      	mov	sp, r7
 800c872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c876:	4770      	bx	lr

0800c878 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c878:	b480      	push	{r7}
 800c87a:	b083      	sub	sp, #12
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c880:	bf00      	nop
 800c882:	370c      	adds	r7, #12
 800c884:	46bd      	mov	sp, r7
 800c886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88a:	4770      	bx	lr

0800c88c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c88c:	b480      	push	{r7}
 800c88e:	b083      	sub	sp, #12
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
 800c894:	460b      	mov	r3, r1
 800c896:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c898:	bf00      	nop
 800c89a:	370c      	adds	r7, #12
 800c89c:	46bd      	mov	sp, r7
 800c89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a2:	4770      	bx	lr

0800c8a4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b090      	sub	sp, #64	; 0x40
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d137      	bne.n	800c930 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800c8c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c8c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	3314      	adds	r3, #20
 800c8cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8d0:	e853 3f00 	ldrex	r3, [r3]
 800c8d4:	623b      	str	r3, [r7, #32]
   return(result);
 800c8d6:	6a3b      	ldr	r3, [r7, #32]
 800c8d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c8dc:	63bb      	str	r3, [r7, #56]	; 0x38
 800c8de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	3314      	adds	r3, #20
 800c8e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c8e6:	633a      	str	r2, [r7, #48]	; 0x30
 800c8e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c8ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8ee:	e841 2300 	strex	r3, r2, [r1]
 800c8f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d1e5      	bne.n	800c8c6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c8fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	330c      	adds	r3, #12
 800c900:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c902:	693b      	ldr	r3, [r7, #16]
 800c904:	e853 3f00 	ldrex	r3, [r3]
 800c908:	60fb      	str	r3, [r7, #12]
   return(result);
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c910:	637b      	str	r3, [r7, #52]	; 0x34
 800c912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	330c      	adds	r3, #12
 800c918:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c91a:	61fa      	str	r2, [r7, #28]
 800c91c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c91e:	69b9      	ldr	r1, [r7, #24]
 800c920:	69fa      	ldr	r2, [r7, #28]
 800c922:	e841 2300 	strex	r3, r2, [r1]
 800c926:	617b      	str	r3, [r7, #20]
   return(result);
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d1e5      	bne.n	800c8fa <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c92e:	e002      	b.n	800c936 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800c930:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c932:	f7fa fa93 	bl	8006e5c <HAL_UART_TxCpltCallback>
}
 800c936:	bf00      	nop
 800c938:	3740      	adds	r7, #64	; 0x40
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}

0800c93e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c93e:	b580      	push	{r7, lr}
 800c940:	b084      	sub	sp, #16
 800c942:	af00      	add	r7, sp, #0
 800c944:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c94a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c94c:	68f8      	ldr	r0, [r7, #12]
 800c94e:	f7ff ff7f 	bl	800c850 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c952:	bf00      	nop
 800c954:	3710      	adds	r7, #16
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}

0800c95a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c95a:	b580      	push	{r7, lr}
 800c95c:	b09c      	sub	sp, #112	; 0x70
 800c95e:	af00      	add	r7, sp, #0
 800c960:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c966:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c972:	2b00      	cmp	r3, #0
 800c974:	d172      	bne.n	800ca5c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800c976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c978:	2200      	movs	r2, #0
 800c97a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c97c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	330c      	adds	r3, #12
 800c982:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c986:	e853 3f00 	ldrex	r3, [r3]
 800c98a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c98c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c98e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c992:	66bb      	str	r3, [r7, #104]	; 0x68
 800c994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	330c      	adds	r3, #12
 800c99a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c99c:	65ba      	str	r2, [r7, #88]	; 0x58
 800c99e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c9a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c9a4:	e841 2300 	strex	r3, r2, [r1]
 800c9a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c9aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d1e5      	bne.n	800c97c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	3314      	adds	r3, #20
 800c9b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ba:	e853 3f00 	ldrex	r3, [r3]
 800c9be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c9c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9c2:	f023 0301 	bic.w	r3, r3, #1
 800c9c6:	667b      	str	r3, [r7, #100]	; 0x64
 800c9c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	3314      	adds	r3, #20
 800c9ce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c9d0:	647a      	str	r2, [r7, #68]	; 0x44
 800c9d2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c9d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c9d8:	e841 2300 	strex	r3, r2, [r1]
 800c9dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c9de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d1e5      	bne.n	800c9b0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c9e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	3314      	adds	r3, #20
 800c9ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ee:	e853 3f00 	ldrex	r3, [r3]
 800c9f2:	623b      	str	r3, [r7, #32]
   return(result);
 800c9f4:	6a3b      	ldr	r3, [r7, #32]
 800c9f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c9fa:	663b      	str	r3, [r7, #96]	; 0x60
 800c9fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	3314      	adds	r3, #20
 800ca02:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ca04:	633a      	str	r2, [r7, #48]	; 0x30
 800ca06:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ca0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca0c:	e841 2300 	strex	r3, r2, [r1]
 800ca10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ca12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d1e5      	bne.n	800c9e4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ca18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ca1a:	2220      	movs	r2, #32
 800ca1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ca22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca24:	2b01      	cmp	r3, #1
 800ca26:	d119      	bne.n	800ca5c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	330c      	adds	r3, #12
 800ca2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca30:	693b      	ldr	r3, [r7, #16]
 800ca32:	e853 3f00 	ldrex	r3, [r3]
 800ca36:	60fb      	str	r3, [r7, #12]
   return(result);
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	f023 0310 	bic.w	r3, r3, #16
 800ca3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ca40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	330c      	adds	r3, #12
 800ca46:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ca48:	61fa      	str	r2, [r7, #28]
 800ca4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca4c:	69b9      	ldr	r1, [r7, #24]
 800ca4e:	69fa      	ldr	r2, [r7, #28]
 800ca50:	e841 2300 	strex	r3, r2, [r1]
 800ca54:	617b      	str	r3, [r7, #20]
   return(result);
 800ca56:	697b      	ldr	r3, [r7, #20]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d1e5      	bne.n	800ca28 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ca5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ca5e:	2200      	movs	r2, #0
 800ca60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ca64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca66:	2b01      	cmp	r3, #1
 800ca68:	d106      	bne.n	800ca78 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ca6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ca6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ca6e:	4619      	mov	r1, r3
 800ca70:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ca72:	f7ff ff0b 	bl	800c88c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ca76:	e002      	b.n	800ca7e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800ca78:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ca7a:	f7fa fa01 	bl	8006e80 <HAL_UART_RxCpltCallback>
}
 800ca7e:	bf00      	nop
 800ca80:	3770      	adds	r7, #112	; 0x70
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}

0800ca86 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ca86:	b580      	push	{r7, lr}
 800ca88:	b084      	sub	sp, #16
 800ca8a:	af00      	add	r7, sp, #0
 800ca8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca92:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	2201      	movs	r2, #1
 800ca98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca9e:	2b01      	cmp	r3, #1
 800caa0:	d108      	bne.n	800cab4 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800caa6:	085b      	lsrs	r3, r3, #1
 800caa8:	b29b      	uxth	r3, r3
 800caaa:	4619      	mov	r1, r3
 800caac:	68f8      	ldr	r0, [r7, #12]
 800caae:	f7ff feed 	bl	800c88c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cab2:	e002      	b.n	800caba <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800cab4:	68f8      	ldr	r0, [r7, #12]
 800cab6:	f7ff fed5 	bl	800c864 <HAL_UART_RxHalfCpltCallback>
}
 800caba:	bf00      	nop
 800cabc:	3710      	adds	r7, #16
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}

0800cac2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cac2:	b580      	push	{r7, lr}
 800cac4:	b084      	sub	sp, #16
 800cac6:	af00      	add	r7, sp, #0
 800cac8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800caca:	2300      	movs	r3, #0
 800cacc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cad2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	695b      	ldr	r3, [r3, #20]
 800cada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cade:	2b80      	cmp	r3, #128	; 0x80
 800cae0:	bf0c      	ite	eq
 800cae2:	2301      	moveq	r3, #1
 800cae4:	2300      	movne	r3, #0
 800cae6:	b2db      	uxtb	r3, r3
 800cae8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800caf0:	b2db      	uxtb	r3, r3
 800caf2:	2b21      	cmp	r3, #33	; 0x21
 800caf4:	d108      	bne.n	800cb08 <UART_DMAError+0x46>
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d005      	beq.n	800cb08 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800cafc:	68bb      	ldr	r3, [r7, #8]
 800cafe:	2200      	movs	r2, #0
 800cb00:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800cb02:	68b8      	ldr	r0, [r7, #8]
 800cb04:	f000 f8c2 	bl	800cc8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	695b      	ldr	r3, [r3, #20]
 800cb0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb12:	2b40      	cmp	r3, #64	; 0x40
 800cb14:	bf0c      	ite	eq
 800cb16:	2301      	moveq	r3, #1
 800cb18:	2300      	movne	r3, #0
 800cb1a:	b2db      	uxtb	r3, r3
 800cb1c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cb24:	b2db      	uxtb	r3, r3
 800cb26:	2b22      	cmp	r3, #34	; 0x22
 800cb28:	d108      	bne.n	800cb3c <UART_DMAError+0x7a>
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d005      	beq.n	800cb3c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	2200      	movs	r2, #0
 800cb34:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800cb36:	68b8      	ldr	r0, [r7, #8]
 800cb38:	f000 f8d0 	bl	800ccdc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb40:	f043 0210 	orr.w	r2, r3, #16
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cb48:	68b8      	ldr	r0, [r7, #8]
 800cb4a:	f7ff fe95 	bl	800c878 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cb4e:	bf00      	nop
 800cb50:	3710      	adds	r7, #16
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}
	...

0800cb58 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b098      	sub	sp, #96	; 0x60
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	60f8      	str	r0, [r7, #12]
 800cb60:	60b9      	str	r1, [r7, #8]
 800cb62:	4613      	mov	r3, r2
 800cb64:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800cb66:	68ba      	ldr	r2, [r7, #8]
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	88fa      	ldrh	r2, [r7, #6]
 800cb70:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	2200      	movs	r2, #0
 800cb76:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	2222      	movs	r2, #34	; 0x22
 800cb7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb84:	4a3e      	ldr	r2, [pc, #248]	; (800cc80 <UART_Start_Receive_DMA+0x128>)
 800cb86:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb8c:	4a3d      	ldr	r2, [pc, #244]	; (800cc84 <UART_Start_Receive_DMA+0x12c>)
 800cb8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb94:	4a3c      	ldr	r2, [pc, #240]	; (800cc88 <UART_Start_Receive_DMA+0x130>)
 800cb96:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800cba0:	f107 0308 	add.w	r3, r7, #8
 800cba4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	3304      	adds	r3, #4
 800cbb0:	4619      	mov	r1, r3
 800cbb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cbb4:	681a      	ldr	r2, [r3, #0]
 800cbb6:	88fb      	ldrh	r3, [r7, #6]
 800cbb8:	f7fb ffec 	bl	8008b94 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	613b      	str	r3, [r7, #16]
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	613b      	str	r3, [r7, #16]
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	685b      	ldr	r3, [r3, #4]
 800cbce:	613b      	str	r3, [r7, #16]
 800cbd0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	691b      	ldr	r3, [r3, #16]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d019      	beq.n	800cc0e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	330c      	adds	r3, #12
 800cbe0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbe4:	e853 3f00 	ldrex	r3, [r3]
 800cbe8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cbea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cbf0:	65bb      	str	r3, [r7, #88]	; 0x58
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	330c      	adds	r3, #12
 800cbf8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cbfa:	64fa      	str	r2, [r7, #76]	; 0x4c
 800cbfc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbfe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cc00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cc02:	e841 2300 	strex	r3, r2, [r1]
 800cc06:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800cc08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d1e5      	bne.n	800cbda <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	3314      	adds	r3, #20
 800cc14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc18:	e853 3f00 	ldrex	r3, [r3]
 800cc1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cc1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc20:	f043 0301 	orr.w	r3, r3, #1
 800cc24:	657b      	str	r3, [r7, #84]	; 0x54
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	3314      	adds	r3, #20
 800cc2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cc2e:	63ba      	str	r2, [r7, #56]	; 0x38
 800cc30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc32:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cc34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc36:	e841 2300 	strex	r3, r2, [r1]
 800cc3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cc3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d1e5      	bne.n	800cc0e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	3314      	adds	r3, #20
 800cc48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc4a:	69bb      	ldr	r3, [r7, #24]
 800cc4c:	e853 3f00 	ldrex	r3, [r3]
 800cc50:	617b      	str	r3, [r7, #20]
   return(result);
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc58:	653b      	str	r3, [r7, #80]	; 0x50
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	3314      	adds	r3, #20
 800cc60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cc62:	627a      	str	r2, [r7, #36]	; 0x24
 800cc64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc66:	6a39      	ldr	r1, [r7, #32]
 800cc68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc6a:	e841 2300 	strex	r3, r2, [r1]
 800cc6e:	61fb      	str	r3, [r7, #28]
   return(result);
 800cc70:	69fb      	ldr	r3, [r7, #28]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d1e5      	bne.n	800cc42 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800cc76:	2300      	movs	r3, #0
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3760      	adds	r7, #96	; 0x60
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}
 800cc80:	0800c95b 	.word	0x0800c95b
 800cc84:	0800ca87 	.word	0x0800ca87
 800cc88:	0800cac3 	.word	0x0800cac3

0800cc8c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	b089      	sub	sp, #36	; 0x24
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	330c      	adds	r3, #12
 800cc9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	e853 3f00 	ldrex	r3, [r3]
 800cca2:	60bb      	str	r3, [r7, #8]
   return(result);
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ccaa:	61fb      	str	r3, [r7, #28]
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	330c      	adds	r3, #12
 800ccb2:	69fa      	ldr	r2, [r7, #28]
 800ccb4:	61ba      	str	r2, [r7, #24]
 800ccb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccb8:	6979      	ldr	r1, [r7, #20]
 800ccba:	69ba      	ldr	r2, [r7, #24]
 800ccbc:	e841 2300 	strex	r3, r2, [r1]
 800ccc0:	613b      	str	r3, [r7, #16]
   return(result);
 800ccc2:	693b      	ldr	r3, [r7, #16]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d1e5      	bne.n	800cc94 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2220      	movs	r2, #32
 800cccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800ccd0:	bf00      	nop
 800ccd2:	3724      	adds	r7, #36	; 0x24
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccda:	4770      	bx	lr

0800ccdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ccdc:	b480      	push	{r7}
 800ccde:	b095      	sub	sp, #84	; 0x54
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	330c      	adds	r3, #12
 800ccea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccee:	e853 3f00 	ldrex	r3, [r3]
 800ccf2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ccf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ccfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	330c      	adds	r3, #12
 800cd02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cd04:	643a      	str	r2, [r7, #64]	; 0x40
 800cd06:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cd0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cd0c:	e841 2300 	strex	r3, r2, [r1]
 800cd10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cd12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d1e5      	bne.n	800cce4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	3314      	adds	r3, #20
 800cd1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd20:	6a3b      	ldr	r3, [r7, #32]
 800cd22:	e853 3f00 	ldrex	r3, [r3]
 800cd26:	61fb      	str	r3, [r7, #28]
   return(result);
 800cd28:	69fb      	ldr	r3, [r7, #28]
 800cd2a:	f023 0301 	bic.w	r3, r3, #1
 800cd2e:	64bb      	str	r3, [r7, #72]	; 0x48
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	3314      	adds	r3, #20
 800cd36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cd38:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cd3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cd3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd40:	e841 2300 	strex	r3, r2, [r1]
 800cd44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d1e5      	bne.n	800cd18 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd50:	2b01      	cmp	r3, #1
 800cd52:	d119      	bne.n	800cd88 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	330c      	adds	r3, #12
 800cd5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	e853 3f00 	ldrex	r3, [r3]
 800cd62:	60bb      	str	r3, [r7, #8]
   return(result);
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	f023 0310 	bic.w	r3, r3, #16
 800cd6a:	647b      	str	r3, [r7, #68]	; 0x44
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	330c      	adds	r3, #12
 800cd72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cd74:	61ba      	str	r2, [r7, #24]
 800cd76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd78:	6979      	ldr	r1, [r7, #20]
 800cd7a:	69ba      	ldr	r2, [r7, #24]
 800cd7c:	e841 2300 	strex	r3, r2, [r1]
 800cd80:	613b      	str	r3, [r7, #16]
   return(result);
 800cd82:	693b      	ldr	r3, [r7, #16]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d1e5      	bne.n	800cd54 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2220      	movs	r2, #32
 800cd8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2200      	movs	r2, #0
 800cd94:	631a      	str	r2, [r3, #48]	; 0x30
}
 800cd96:	bf00      	nop
 800cd98:	3754      	adds	r7, #84	; 0x54
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda0:	4770      	bx	lr

0800cda2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cda2:	b580      	push	{r7, lr}
 800cda4:	b084      	sub	sp, #16
 800cda6:	af00      	add	r7, sp, #0
 800cda8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	2200      	movs	r2, #0
 800cdba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cdbc:	68f8      	ldr	r0, [r7, #12]
 800cdbe:	f7ff fd5b 	bl	800c878 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cdc2:	bf00      	nop
 800cdc4:	3710      	adds	r7, #16
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}

0800cdca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800cdca:	b480      	push	{r7}
 800cdcc:	b085      	sub	sp, #20
 800cdce:	af00      	add	r7, sp, #0
 800cdd0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cdd8:	b2db      	uxtb	r3, r3
 800cdda:	2b21      	cmp	r3, #33	; 0x21
 800cddc:	d13e      	bne.n	800ce5c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	689b      	ldr	r3, [r3, #8]
 800cde2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cde6:	d114      	bne.n	800ce12 <UART_Transmit_IT+0x48>
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	691b      	ldr	r3, [r3, #16]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d110      	bne.n	800ce12 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6a1b      	ldr	r3, [r3, #32]
 800cdf4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	881b      	ldrh	r3, [r3, #0]
 800cdfa:	461a      	mov	r2, r3
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ce04:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6a1b      	ldr	r3, [r3, #32]
 800ce0a:	1c9a      	adds	r2, r3, #2
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	621a      	str	r2, [r3, #32]
 800ce10:	e008      	b.n	800ce24 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6a1b      	ldr	r3, [r3, #32]
 800ce16:	1c59      	adds	r1, r3, #1
 800ce18:	687a      	ldr	r2, [r7, #4]
 800ce1a:	6211      	str	r1, [r2, #32]
 800ce1c:	781a      	ldrb	r2, [r3, #0]
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ce28:	b29b      	uxth	r3, r3
 800ce2a:	3b01      	subs	r3, #1
 800ce2c:	b29b      	uxth	r3, r3
 800ce2e:	687a      	ldr	r2, [r7, #4]
 800ce30:	4619      	mov	r1, r3
 800ce32:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d10f      	bne.n	800ce58 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	68da      	ldr	r2, [r3, #12]
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ce46:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	68da      	ldr	r2, [r3, #12]
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ce56:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ce58:	2300      	movs	r3, #0
 800ce5a:	e000      	b.n	800ce5e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ce5c:	2302      	movs	r3, #2
  }
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	3714      	adds	r7, #20
 800ce62:	46bd      	mov	sp, r7
 800ce64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce68:	4770      	bx	lr

0800ce6a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ce6a:	b580      	push	{r7, lr}
 800ce6c:	b082      	sub	sp, #8
 800ce6e:	af00      	add	r7, sp, #0
 800ce70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	68da      	ldr	r2, [r3, #12]
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ce80:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	2220      	movs	r2, #32
 800ce86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f7f9 ffe6 	bl	8006e5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ce90:	2300      	movs	r3, #0
}
 800ce92:	4618      	mov	r0, r3
 800ce94:	3708      	adds	r7, #8
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}

0800ce9a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ce9a:	b580      	push	{r7, lr}
 800ce9c:	b08c      	sub	sp, #48	; 0x30
 800ce9e:	af00      	add	r7, sp, #0
 800cea0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cea8:	b2db      	uxtb	r3, r3
 800ceaa:	2b22      	cmp	r3, #34	; 0x22
 800ceac:	f040 80ae 	bne.w	800d00c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	689b      	ldr	r3, [r3, #8]
 800ceb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ceb8:	d117      	bne.n	800ceea <UART_Receive_IT+0x50>
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	691b      	ldr	r3, [r3, #16]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d113      	bne.n	800ceea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800cec2:	2300      	movs	r3, #0
 800cec4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	685b      	ldr	r3, [r3, #4]
 800ced2:	b29b      	uxth	r3, r3
 800ced4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ced8:	b29a      	uxth	r2, r3
 800ceda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cedc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cee2:	1c9a      	adds	r2, r3, #2
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	629a      	str	r2, [r3, #40]	; 0x28
 800cee8:	e026      	b.n	800cf38 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800cef0:	2300      	movs	r3, #0
 800cef2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	689b      	ldr	r3, [r3, #8]
 800cef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cefc:	d007      	beq.n	800cf0e <UART_Receive_IT+0x74>
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	689b      	ldr	r3, [r3, #8]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d10a      	bne.n	800cf1c <UART_Receive_IT+0x82>
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	691b      	ldr	r3, [r3, #16]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d106      	bne.n	800cf1c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	685b      	ldr	r3, [r3, #4]
 800cf14:	b2da      	uxtb	r2, r3
 800cf16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf18:	701a      	strb	r2, [r3, #0]
 800cf1a:	e008      	b.n	800cf2e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	685b      	ldr	r3, [r3, #4]
 800cf22:	b2db      	uxtb	r3, r3
 800cf24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf28:	b2da      	uxtb	r2, r3
 800cf2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf2c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf32:	1c5a      	adds	r2, r3, #1
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cf3c:	b29b      	uxth	r3, r3
 800cf3e:	3b01      	subs	r3, #1
 800cf40:	b29b      	uxth	r3, r3
 800cf42:	687a      	ldr	r2, [r7, #4]
 800cf44:	4619      	mov	r1, r3
 800cf46:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d15d      	bne.n	800d008 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	68da      	ldr	r2, [r3, #12]
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	f022 0220 	bic.w	r2, r2, #32
 800cf5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	68da      	ldr	r2, [r3, #12]
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cf6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	695a      	ldr	r2, [r3, #20]
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	f022 0201 	bic.w	r2, r2, #1
 800cf7a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2220      	movs	r2, #32
 800cf80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2200      	movs	r2, #0
 800cf88:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf8e:	2b01      	cmp	r3, #1
 800cf90:	d135      	bne.n	800cffe <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2200      	movs	r2, #0
 800cf96:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	330c      	adds	r3, #12
 800cf9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfa0:	697b      	ldr	r3, [r7, #20]
 800cfa2:	e853 3f00 	ldrex	r3, [r3]
 800cfa6:	613b      	str	r3, [r7, #16]
   return(result);
 800cfa8:	693b      	ldr	r3, [r7, #16]
 800cfaa:	f023 0310 	bic.w	r3, r3, #16
 800cfae:	627b      	str	r3, [r7, #36]	; 0x24
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	330c      	adds	r3, #12
 800cfb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfb8:	623a      	str	r2, [r7, #32]
 800cfba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfbc:	69f9      	ldr	r1, [r7, #28]
 800cfbe:	6a3a      	ldr	r2, [r7, #32]
 800cfc0:	e841 2300 	strex	r3, r2, [r1]
 800cfc4:	61bb      	str	r3, [r7, #24]
   return(result);
 800cfc6:	69bb      	ldr	r3, [r7, #24]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d1e5      	bne.n	800cf98 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f003 0310 	and.w	r3, r3, #16
 800cfd6:	2b10      	cmp	r3, #16
 800cfd8:	d10a      	bne.n	800cff0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cfda:	2300      	movs	r3, #0
 800cfdc:	60fb      	str	r3, [r7, #12]
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	60fb      	str	r3, [r7, #12]
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	685b      	ldr	r3, [r3, #4]
 800cfec:	60fb      	str	r3, [r7, #12]
 800cfee:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cff4:	4619      	mov	r1, r3
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	f7ff fc48 	bl	800c88c <HAL_UARTEx_RxEventCallback>
 800cffc:	e002      	b.n	800d004 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cffe:	6878      	ldr	r0, [r7, #4]
 800d000:	f7f9 ff3e 	bl	8006e80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d004:	2300      	movs	r3, #0
 800d006:	e002      	b.n	800d00e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800d008:	2300      	movs	r3, #0
 800d00a:	e000      	b.n	800d00e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800d00c:	2302      	movs	r3, #2
  }
}
 800d00e:	4618      	mov	r0, r3
 800d010:	3730      	adds	r7, #48	; 0x30
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}
	...

0800d018 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d01c:	b0c0      	sub	sp, #256	; 0x100
 800d01e:	af00      	add	r7, sp, #0
 800d020:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	691b      	ldr	r3, [r3, #16]
 800d02c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800d030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d034:	68d9      	ldr	r1, [r3, #12]
 800d036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d03a:	681a      	ldr	r2, [r3, #0]
 800d03c:	ea40 0301 	orr.w	r3, r0, r1
 800d040:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d046:	689a      	ldr	r2, [r3, #8]
 800d048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d04c:	691b      	ldr	r3, [r3, #16]
 800d04e:	431a      	orrs	r2, r3
 800d050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d054:	695b      	ldr	r3, [r3, #20]
 800d056:	431a      	orrs	r2, r3
 800d058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d05c:	69db      	ldr	r3, [r3, #28]
 800d05e:	4313      	orrs	r3, r2
 800d060:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800d064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	68db      	ldr	r3, [r3, #12]
 800d06c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800d070:	f021 010c 	bic.w	r1, r1, #12
 800d074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d078:	681a      	ldr	r2, [r3, #0]
 800d07a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d07e:	430b      	orrs	r3, r1
 800d080:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	695b      	ldr	r3, [r3, #20]
 800d08a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800d08e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d092:	6999      	ldr	r1, [r3, #24]
 800d094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d098:	681a      	ldr	r2, [r3, #0]
 800d09a:	ea40 0301 	orr.w	r3, r0, r1
 800d09e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d0a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0a4:	681a      	ldr	r2, [r3, #0]
 800d0a6:	4b8f      	ldr	r3, [pc, #572]	; (800d2e4 <UART_SetConfig+0x2cc>)
 800d0a8:	429a      	cmp	r2, r3
 800d0aa:	d005      	beq.n	800d0b8 <UART_SetConfig+0xa0>
 800d0ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0b0:	681a      	ldr	r2, [r3, #0]
 800d0b2:	4b8d      	ldr	r3, [pc, #564]	; (800d2e8 <UART_SetConfig+0x2d0>)
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	d104      	bne.n	800d0c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d0b8:	f7fd ff8a 	bl	800afd0 <HAL_RCC_GetPCLK2Freq>
 800d0bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800d0c0:	e003      	b.n	800d0ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d0c2:	f7fd ff71 	bl	800afa8 <HAL_RCC_GetPCLK1Freq>
 800d0c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d0ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0ce:	69db      	ldr	r3, [r3, #28]
 800d0d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d0d4:	f040 810c 	bne.w	800d2f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d0d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d0dc:	2200      	movs	r2, #0
 800d0de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d0e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800d0e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800d0ea:	4622      	mov	r2, r4
 800d0ec:	462b      	mov	r3, r5
 800d0ee:	1891      	adds	r1, r2, r2
 800d0f0:	65b9      	str	r1, [r7, #88]	; 0x58
 800d0f2:	415b      	adcs	r3, r3
 800d0f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d0f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800d0fa:	4621      	mov	r1, r4
 800d0fc:	eb12 0801 	adds.w	r8, r2, r1
 800d100:	4629      	mov	r1, r5
 800d102:	eb43 0901 	adc.w	r9, r3, r1
 800d106:	f04f 0200 	mov.w	r2, #0
 800d10a:	f04f 0300 	mov.w	r3, #0
 800d10e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d112:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d116:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d11a:	4690      	mov	r8, r2
 800d11c:	4699      	mov	r9, r3
 800d11e:	4623      	mov	r3, r4
 800d120:	eb18 0303 	adds.w	r3, r8, r3
 800d124:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d128:	462b      	mov	r3, r5
 800d12a:	eb49 0303 	adc.w	r3, r9, r3
 800d12e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d136:	685b      	ldr	r3, [r3, #4]
 800d138:	2200      	movs	r2, #0
 800d13a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d13e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800d142:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800d146:	460b      	mov	r3, r1
 800d148:	18db      	adds	r3, r3, r3
 800d14a:	653b      	str	r3, [r7, #80]	; 0x50
 800d14c:	4613      	mov	r3, r2
 800d14e:	eb42 0303 	adc.w	r3, r2, r3
 800d152:	657b      	str	r3, [r7, #84]	; 0x54
 800d154:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d158:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800d15c:	f7f3 fd84 	bl	8000c68 <__aeabi_uldivmod>
 800d160:	4602      	mov	r2, r0
 800d162:	460b      	mov	r3, r1
 800d164:	4b61      	ldr	r3, [pc, #388]	; (800d2ec <UART_SetConfig+0x2d4>)
 800d166:	fba3 2302 	umull	r2, r3, r3, r2
 800d16a:	095b      	lsrs	r3, r3, #5
 800d16c:	011c      	lsls	r4, r3, #4
 800d16e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d172:	2200      	movs	r2, #0
 800d174:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d178:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800d17c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800d180:	4642      	mov	r2, r8
 800d182:	464b      	mov	r3, r9
 800d184:	1891      	adds	r1, r2, r2
 800d186:	64b9      	str	r1, [r7, #72]	; 0x48
 800d188:	415b      	adcs	r3, r3
 800d18a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d18c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d190:	4641      	mov	r1, r8
 800d192:	eb12 0a01 	adds.w	sl, r2, r1
 800d196:	4649      	mov	r1, r9
 800d198:	eb43 0b01 	adc.w	fp, r3, r1
 800d19c:	f04f 0200 	mov.w	r2, #0
 800d1a0:	f04f 0300 	mov.w	r3, #0
 800d1a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d1a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d1ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d1b0:	4692      	mov	sl, r2
 800d1b2:	469b      	mov	fp, r3
 800d1b4:	4643      	mov	r3, r8
 800d1b6:	eb1a 0303 	adds.w	r3, sl, r3
 800d1ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d1be:	464b      	mov	r3, r9
 800d1c0:	eb4b 0303 	adc.w	r3, fp, r3
 800d1c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d1c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d1cc:	685b      	ldr	r3, [r3, #4]
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d1d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800d1d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d1dc:	460b      	mov	r3, r1
 800d1de:	18db      	adds	r3, r3, r3
 800d1e0:	643b      	str	r3, [r7, #64]	; 0x40
 800d1e2:	4613      	mov	r3, r2
 800d1e4:	eb42 0303 	adc.w	r3, r2, r3
 800d1e8:	647b      	str	r3, [r7, #68]	; 0x44
 800d1ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d1ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d1f2:	f7f3 fd39 	bl	8000c68 <__aeabi_uldivmod>
 800d1f6:	4602      	mov	r2, r0
 800d1f8:	460b      	mov	r3, r1
 800d1fa:	4611      	mov	r1, r2
 800d1fc:	4b3b      	ldr	r3, [pc, #236]	; (800d2ec <UART_SetConfig+0x2d4>)
 800d1fe:	fba3 2301 	umull	r2, r3, r3, r1
 800d202:	095b      	lsrs	r3, r3, #5
 800d204:	2264      	movs	r2, #100	; 0x64
 800d206:	fb02 f303 	mul.w	r3, r2, r3
 800d20a:	1acb      	subs	r3, r1, r3
 800d20c:	00db      	lsls	r3, r3, #3
 800d20e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800d212:	4b36      	ldr	r3, [pc, #216]	; (800d2ec <UART_SetConfig+0x2d4>)
 800d214:	fba3 2302 	umull	r2, r3, r3, r2
 800d218:	095b      	lsrs	r3, r3, #5
 800d21a:	005b      	lsls	r3, r3, #1
 800d21c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d220:	441c      	add	r4, r3
 800d222:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d226:	2200      	movs	r2, #0
 800d228:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d22c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800d230:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800d234:	4642      	mov	r2, r8
 800d236:	464b      	mov	r3, r9
 800d238:	1891      	adds	r1, r2, r2
 800d23a:	63b9      	str	r1, [r7, #56]	; 0x38
 800d23c:	415b      	adcs	r3, r3
 800d23e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d240:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d244:	4641      	mov	r1, r8
 800d246:	1851      	adds	r1, r2, r1
 800d248:	6339      	str	r1, [r7, #48]	; 0x30
 800d24a:	4649      	mov	r1, r9
 800d24c:	414b      	adcs	r3, r1
 800d24e:	637b      	str	r3, [r7, #52]	; 0x34
 800d250:	f04f 0200 	mov.w	r2, #0
 800d254:	f04f 0300 	mov.w	r3, #0
 800d258:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800d25c:	4659      	mov	r1, fp
 800d25e:	00cb      	lsls	r3, r1, #3
 800d260:	4651      	mov	r1, sl
 800d262:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d266:	4651      	mov	r1, sl
 800d268:	00ca      	lsls	r2, r1, #3
 800d26a:	4610      	mov	r0, r2
 800d26c:	4619      	mov	r1, r3
 800d26e:	4603      	mov	r3, r0
 800d270:	4642      	mov	r2, r8
 800d272:	189b      	adds	r3, r3, r2
 800d274:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d278:	464b      	mov	r3, r9
 800d27a:	460a      	mov	r2, r1
 800d27c:	eb42 0303 	adc.w	r3, r2, r3
 800d280:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d288:	685b      	ldr	r3, [r3, #4]
 800d28a:	2200      	movs	r2, #0
 800d28c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d290:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800d294:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d298:	460b      	mov	r3, r1
 800d29a:	18db      	adds	r3, r3, r3
 800d29c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d29e:	4613      	mov	r3, r2
 800d2a0:	eb42 0303 	adc.w	r3, r2, r3
 800d2a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d2a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d2aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800d2ae:	f7f3 fcdb 	bl	8000c68 <__aeabi_uldivmod>
 800d2b2:	4602      	mov	r2, r0
 800d2b4:	460b      	mov	r3, r1
 800d2b6:	4b0d      	ldr	r3, [pc, #52]	; (800d2ec <UART_SetConfig+0x2d4>)
 800d2b8:	fba3 1302 	umull	r1, r3, r3, r2
 800d2bc:	095b      	lsrs	r3, r3, #5
 800d2be:	2164      	movs	r1, #100	; 0x64
 800d2c0:	fb01 f303 	mul.w	r3, r1, r3
 800d2c4:	1ad3      	subs	r3, r2, r3
 800d2c6:	00db      	lsls	r3, r3, #3
 800d2c8:	3332      	adds	r3, #50	; 0x32
 800d2ca:	4a08      	ldr	r2, [pc, #32]	; (800d2ec <UART_SetConfig+0x2d4>)
 800d2cc:	fba2 2303 	umull	r2, r3, r2, r3
 800d2d0:	095b      	lsrs	r3, r3, #5
 800d2d2:	f003 0207 	and.w	r2, r3, #7
 800d2d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	4422      	add	r2, r4
 800d2de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d2e0:	e106      	b.n	800d4f0 <UART_SetConfig+0x4d8>
 800d2e2:	bf00      	nop
 800d2e4:	40011000 	.word	0x40011000
 800d2e8:	40011400 	.word	0x40011400
 800d2ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d2f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d2fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d2fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800d302:	4642      	mov	r2, r8
 800d304:	464b      	mov	r3, r9
 800d306:	1891      	adds	r1, r2, r2
 800d308:	6239      	str	r1, [r7, #32]
 800d30a:	415b      	adcs	r3, r3
 800d30c:	627b      	str	r3, [r7, #36]	; 0x24
 800d30e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d312:	4641      	mov	r1, r8
 800d314:	1854      	adds	r4, r2, r1
 800d316:	4649      	mov	r1, r9
 800d318:	eb43 0501 	adc.w	r5, r3, r1
 800d31c:	f04f 0200 	mov.w	r2, #0
 800d320:	f04f 0300 	mov.w	r3, #0
 800d324:	00eb      	lsls	r3, r5, #3
 800d326:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d32a:	00e2      	lsls	r2, r4, #3
 800d32c:	4614      	mov	r4, r2
 800d32e:	461d      	mov	r5, r3
 800d330:	4643      	mov	r3, r8
 800d332:	18e3      	adds	r3, r4, r3
 800d334:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d338:	464b      	mov	r3, r9
 800d33a:	eb45 0303 	adc.w	r3, r5, r3
 800d33e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d346:	685b      	ldr	r3, [r3, #4]
 800d348:	2200      	movs	r2, #0
 800d34a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d34e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d352:	f04f 0200 	mov.w	r2, #0
 800d356:	f04f 0300 	mov.w	r3, #0
 800d35a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800d35e:	4629      	mov	r1, r5
 800d360:	008b      	lsls	r3, r1, #2
 800d362:	4621      	mov	r1, r4
 800d364:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d368:	4621      	mov	r1, r4
 800d36a:	008a      	lsls	r2, r1, #2
 800d36c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800d370:	f7f3 fc7a 	bl	8000c68 <__aeabi_uldivmod>
 800d374:	4602      	mov	r2, r0
 800d376:	460b      	mov	r3, r1
 800d378:	4b60      	ldr	r3, [pc, #384]	; (800d4fc <UART_SetConfig+0x4e4>)
 800d37a:	fba3 2302 	umull	r2, r3, r3, r2
 800d37e:	095b      	lsrs	r3, r3, #5
 800d380:	011c      	lsls	r4, r3, #4
 800d382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d386:	2200      	movs	r2, #0
 800d388:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d38c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d390:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800d394:	4642      	mov	r2, r8
 800d396:	464b      	mov	r3, r9
 800d398:	1891      	adds	r1, r2, r2
 800d39a:	61b9      	str	r1, [r7, #24]
 800d39c:	415b      	adcs	r3, r3
 800d39e:	61fb      	str	r3, [r7, #28]
 800d3a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d3a4:	4641      	mov	r1, r8
 800d3a6:	1851      	adds	r1, r2, r1
 800d3a8:	6139      	str	r1, [r7, #16]
 800d3aa:	4649      	mov	r1, r9
 800d3ac:	414b      	adcs	r3, r1
 800d3ae:	617b      	str	r3, [r7, #20]
 800d3b0:	f04f 0200 	mov.w	r2, #0
 800d3b4:	f04f 0300 	mov.w	r3, #0
 800d3b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d3bc:	4659      	mov	r1, fp
 800d3be:	00cb      	lsls	r3, r1, #3
 800d3c0:	4651      	mov	r1, sl
 800d3c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d3c6:	4651      	mov	r1, sl
 800d3c8:	00ca      	lsls	r2, r1, #3
 800d3ca:	4610      	mov	r0, r2
 800d3cc:	4619      	mov	r1, r3
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	4642      	mov	r2, r8
 800d3d2:	189b      	adds	r3, r3, r2
 800d3d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d3d8:	464b      	mov	r3, r9
 800d3da:	460a      	mov	r2, r1
 800d3dc:	eb42 0303 	adc.w	r3, r2, r3
 800d3e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d3e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d3e8:	685b      	ldr	r3, [r3, #4]
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	67bb      	str	r3, [r7, #120]	; 0x78
 800d3ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d3f0:	f04f 0200 	mov.w	r2, #0
 800d3f4:	f04f 0300 	mov.w	r3, #0
 800d3f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800d3fc:	4649      	mov	r1, r9
 800d3fe:	008b      	lsls	r3, r1, #2
 800d400:	4641      	mov	r1, r8
 800d402:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d406:	4641      	mov	r1, r8
 800d408:	008a      	lsls	r2, r1, #2
 800d40a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800d40e:	f7f3 fc2b 	bl	8000c68 <__aeabi_uldivmod>
 800d412:	4602      	mov	r2, r0
 800d414:	460b      	mov	r3, r1
 800d416:	4611      	mov	r1, r2
 800d418:	4b38      	ldr	r3, [pc, #224]	; (800d4fc <UART_SetConfig+0x4e4>)
 800d41a:	fba3 2301 	umull	r2, r3, r3, r1
 800d41e:	095b      	lsrs	r3, r3, #5
 800d420:	2264      	movs	r2, #100	; 0x64
 800d422:	fb02 f303 	mul.w	r3, r2, r3
 800d426:	1acb      	subs	r3, r1, r3
 800d428:	011b      	lsls	r3, r3, #4
 800d42a:	3332      	adds	r3, #50	; 0x32
 800d42c:	4a33      	ldr	r2, [pc, #204]	; (800d4fc <UART_SetConfig+0x4e4>)
 800d42e:	fba2 2303 	umull	r2, r3, r2, r3
 800d432:	095b      	lsrs	r3, r3, #5
 800d434:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d438:	441c      	add	r4, r3
 800d43a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d43e:	2200      	movs	r2, #0
 800d440:	673b      	str	r3, [r7, #112]	; 0x70
 800d442:	677a      	str	r2, [r7, #116]	; 0x74
 800d444:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800d448:	4642      	mov	r2, r8
 800d44a:	464b      	mov	r3, r9
 800d44c:	1891      	adds	r1, r2, r2
 800d44e:	60b9      	str	r1, [r7, #8]
 800d450:	415b      	adcs	r3, r3
 800d452:	60fb      	str	r3, [r7, #12]
 800d454:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d458:	4641      	mov	r1, r8
 800d45a:	1851      	adds	r1, r2, r1
 800d45c:	6039      	str	r1, [r7, #0]
 800d45e:	4649      	mov	r1, r9
 800d460:	414b      	adcs	r3, r1
 800d462:	607b      	str	r3, [r7, #4]
 800d464:	f04f 0200 	mov.w	r2, #0
 800d468:	f04f 0300 	mov.w	r3, #0
 800d46c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d470:	4659      	mov	r1, fp
 800d472:	00cb      	lsls	r3, r1, #3
 800d474:	4651      	mov	r1, sl
 800d476:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d47a:	4651      	mov	r1, sl
 800d47c:	00ca      	lsls	r2, r1, #3
 800d47e:	4610      	mov	r0, r2
 800d480:	4619      	mov	r1, r3
 800d482:	4603      	mov	r3, r0
 800d484:	4642      	mov	r2, r8
 800d486:	189b      	adds	r3, r3, r2
 800d488:	66bb      	str	r3, [r7, #104]	; 0x68
 800d48a:	464b      	mov	r3, r9
 800d48c:	460a      	mov	r2, r1
 800d48e:	eb42 0303 	adc.w	r3, r2, r3
 800d492:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d498:	685b      	ldr	r3, [r3, #4]
 800d49a:	2200      	movs	r2, #0
 800d49c:	663b      	str	r3, [r7, #96]	; 0x60
 800d49e:	667a      	str	r2, [r7, #100]	; 0x64
 800d4a0:	f04f 0200 	mov.w	r2, #0
 800d4a4:	f04f 0300 	mov.w	r3, #0
 800d4a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800d4ac:	4649      	mov	r1, r9
 800d4ae:	008b      	lsls	r3, r1, #2
 800d4b0:	4641      	mov	r1, r8
 800d4b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d4b6:	4641      	mov	r1, r8
 800d4b8:	008a      	lsls	r2, r1, #2
 800d4ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d4be:	f7f3 fbd3 	bl	8000c68 <__aeabi_uldivmod>
 800d4c2:	4602      	mov	r2, r0
 800d4c4:	460b      	mov	r3, r1
 800d4c6:	4b0d      	ldr	r3, [pc, #52]	; (800d4fc <UART_SetConfig+0x4e4>)
 800d4c8:	fba3 1302 	umull	r1, r3, r3, r2
 800d4cc:	095b      	lsrs	r3, r3, #5
 800d4ce:	2164      	movs	r1, #100	; 0x64
 800d4d0:	fb01 f303 	mul.w	r3, r1, r3
 800d4d4:	1ad3      	subs	r3, r2, r3
 800d4d6:	011b      	lsls	r3, r3, #4
 800d4d8:	3332      	adds	r3, #50	; 0x32
 800d4da:	4a08      	ldr	r2, [pc, #32]	; (800d4fc <UART_SetConfig+0x4e4>)
 800d4dc:	fba2 2303 	umull	r2, r3, r2, r3
 800d4e0:	095b      	lsrs	r3, r3, #5
 800d4e2:	f003 020f 	and.w	r2, r3, #15
 800d4e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	4422      	add	r2, r4
 800d4ee:	609a      	str	r2, [r3, #8]
}
 800d4f0:	bf00      	nop
 800d4f2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d4fc:	51eb851f 	.word	0x51eb851f

0800d500 <__NVIC_SetPriority>:
{
 800d500:	b480      	push	{r7}
 800d502:	b083      	sub	sp, #12
 800d504:	af00      	add	r7, sp, #0
 800d506:	4603      	mov	r3, r0
 800d508:	6039      	str	r1, [r7, #0]
 800d50a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d50c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d510:	2b00      	cmp	r3, #0
 800d512:	db0a      	blt.n	800d52a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	b2da      	uxtb	r2, r3
 800d518:	490c      	ldr	r1, [pc, #48]	; (800d54c <__NVIC_SetPriority+0x4c>)
 800d51a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d51e:	0112      	lsls	r2, r2, #4
 800d520:	b2d2      	uxtb	r2, r2
 800d522:	440b      	add	r3, r1
 800d524:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d528:	e00a      	b.n	800d540 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	b2da      	uxtb	r2, r3
 800d52e:	4908      	ldr	r1, [pc, #32]	; (800d550 <__NVIC_SetPriority+0x50>)
 800d530:	79fb      	ldrb	r3, [r7, #7]
 800d532:	f003 030f 	and.w	r3, r3, #15
 800d536:	3b04      	subs	r3, #4
 800d538:	0112      	lsls	r2, r2, #4
 800d53a:	b2d2      	uxtb	r2, r2
 800d53c:	440b      	add	r3, r1
 800d53e:	761a      	strb	r2, [r3, #24]
}
 800d540:	bf00      	nop
 800d542:	370c      	adds	r7, #12
 800d544:	46bd      	mov	sp, r7
 800d546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54a:	4770      	bx	lr
 800d54c:	e000e100 	.word	0xe000e100
 800d550:	e000ed00 	.word	0xe000ed00

0800d554 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d554:	b580      	push	{r7, lr}
 800d556:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d558:	4b05      	ldr	r3, [pc, #20]	; (800d570 <SysTick_Handler+0x1c>)
 800d55a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d55c:	f001 fd28 	bl	800efb0 <xTaskGetSchedulerState>
 800d560:	4603      	mov	r3, r0
 800d562:	2b01      	cmp	r3, #1
 800d564:	d001      	beq.n	800d56a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d566:	f002 fb0f 	bl	800fb88 <xPortSysTickHandler>
  }
}
 800d56a:	bf00      	nop
 800d56c:	bd80      	pop	{r7, pc}
 800d56e:	bf00      	nop
 800d570:	e000e010 	.word	0xe000e010

0800d574 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d574:	b580      	push	{r7, lr}
 800d576:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d578:	2100      	movs	r1, #0
 800d57a:	f06f 0004 	mvn.w	r0, #4
 800d57e:	f7ff ffbf 	bl	800d500 <__NVIC_SetPriority>
#endif
}
 800d582:	bf00      	nop
 800d584:	bd80      	pop	{r7, pc}
	...

0800d588 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d588:	b480      	push	{r7}
 800d58a:	b083      	sub	sp, #12
 800d58c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d58e:	f3ef 8305 	mrs	r3, IPSR
 800d592:	603b      	str	r3, [r7, #0]
  return(result);
 800d594:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d596:	2b00      	cmp	r3, #0
 800d598:	d003      	beq.n	800d5a2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d59a:	f06f 0305 	mvn.w	r3, #5
 800d59e:	607b      	str	r3, [r7, #4]
 800d5a0:	e00c      	b.n	800d5bc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d5a2:	4b0a      	ldr	r3, [pc, #40]	; (800d5cc <osKernelInitialize+0x44>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d105      	bne.n	800d5b6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d5aa:	4b08      	ldr	r3, [pc, #32]	; (800d5cc <osKernelInitialize+0x44>)
 800d5ac:	2201      	movs	r2, #1
 800d5ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	607b      	str	r3, [r7, #4]
 800d5b4:	e002      	b.n	800d5bc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d5b6:	f04f 33ff 	mov.w	r3, #4294967295
 800d5ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d5bc:	687b      	ldr	r3, [r7, #4]
}
 800d5be:	4618      	mov	r0, r3
 800d5c0:	370c      	adds	r7, #12
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c8:	4770      	bx	lr
 800d5ca:	bf00      	nop
 800d5cc:	2000362c 	.word	0x2000362c

0800d5d0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b082      	sub	sp, #8
 800d5d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d5d6:	f3ef 8305 	mrs	r3, IPSR
 800d5da:	603b      	str	r3, [r7, #0]
  return(result);
 800d5dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d003      	beq.n	800d5ea <osKernelStart+0x1a>
    stat = osErrorISR;
 800d5e2:	f06f 0305 	mvn.w	r3, #5
 800d5e6:	607b      	str	r3, [r7, #4]
 800d5e8:	e010      	b.n	800d60c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d5ea:	4b0b      	ldr	r3, [pc, #44]	; (800d618 <osKernelStart+0x48>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	2b01      	cmp	r3, #1
 800d5f0:	d109      	bne.n	800d606 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d5f2:	f7ff ffbf 	bl	800d574 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d5f6:	4b08      	ldr	r3, [pc, #32]	; (800d618 <osKernelStart+0x48>)
 800d5f8:	2202      	movs	r2, #2
 800d5fa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d5fc:	f001 f87c 	bl	800e6f8 <vTaskStartScheduler>
      stat = osOK;
 800d600:	2300      	movs	r3, #0
 800d602:	607b      	str	r3, [r7, #4]
 800d604:	e002      	b.n	800d60c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d606:	f04f 33ff 	mov.w	r3, #4294967295
 800d60a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d60c:	687b      	ldr	r3, [r7, #4]
}
 800d60e:	4618      	mov	r0, r3
 800d610:	3708      	adds	r7, #8
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}
 800d616:	bf00      	nop
 800d618:	2000362c 	.word	0x2000362c

0800d61c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b08e      	sub	sp, #56	; 0x38
 800d620:	af04      	add	r7, sp, #16
 800d622:	60f8      	str	r0, [r7, #12]
 800d624:	60b9      	str	r1, [r7, #8]
 800d626:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d628:	2300      	movs	r3, #0
 800d62a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d62c:	f3ef 8305 	mrs	r3, IPSR
 800d630:	617b      	str	r3, [r7, #20]
  return(result);
 800d632:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d634:	2b00      	cmp	r3, #0
 800d636:	d17e      	bne.n	800d736 <osThreadNew+0x11a>
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d07b      	beq.n	800d736 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d63e:	2380      	movs	r3, #128	; 0x80
 800d640:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d642:	2318      	movs	r3, #24
 800d644:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d646:	2300      	movs	r3, #0
 800d648:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800d64a:	f04f 33ff 	mov.w	r3, #4294967295
 800d64e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d045      	beq.n	800d6e2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d002      	beq.n	800d664 <osThreadNew+0x48>
        name = attr->name;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	699b      	ldr	r3, [r3, #24]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d002      	beq.n	800d672 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	699b      	ldr	r3, [r3, #24]
 800d670:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d672:	69fb      	ldr	r3, [r7, #28]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d008      	beq.n	800d68a <osThreadNew+0x6e>
 800d678:	69fb      	ldr	r3, [r7, #28]
 800d67a:	2b38      	cmp	r3, #56	; 0x38
 800d67c:	d805      	bhi.n	800d68a <osThreadNew+0x6e>
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	685b      	ldr	r3, [r3, #4]
 800d682:	f003 0301 	and.w	r3, r3, #1
 800d686:	2b00      	cmp	r3, #0
 800d688:	d001      	beq.n	800d68e <osThreadNew+0x72>
        return (NULL);
 800d68a:	2300      	movs	r3, #0
 800d68c:	e054      	b.n	800d738 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	695b      	ldr	r3, [r3, #20]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d003      	beq.n	800d69e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	695b      	ldr	r3, [r3, #20]
 800d69a:	089b      	lsrs	r3, r3, #2
 800d69c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	689b      	ldr	r3, [r3, #8]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d00e      	beq.n	800d6c4 <osThreadNew+0xa8>
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	68db      	ldr	r3, [r3, #12]
 800d6aa:	2ba7      	cmp	r3, #167	; 0xa7
 800d6ac:	d90a      	bls.n	800d6c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d006      	beq.n	800d6c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	695b      	ldr	r3, [r3, #20]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d002      	beq.n	800d6c4 <osThreadNew+0xa8>
        mem = 1;
 800d6be:	2301      	movs	r3, #1
 800d6c0:	61bb      	str	r3, [r7, #24]
 800d6c2:	e010      	b.n	800d6e6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	689b      	ldr	r3, [r3, #8]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d10c      	bne.n	800d6e6 <osThreadNew+0xca>
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	68db      	ldr	r3, [r3, #12]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d108      	bne.n	800d6e6 <osThreadNew+0xca>
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	691b      	ldr	r3, [r3, #16]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d104      	bne.n	800d6e6 <osThreadNew+0xca>
          mem = 0;
 800d6dc:	2300      	movs	r3, #0
 800d6de:	61bb      	str	r3, [r7, #24]
 800d6e0:	e001      	b.n	800d6e6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d6e6:	69bb      	ldr	r3, [r7, #24]
 800d6e8:	2b01      	cmp	r3, #1
 800d6ea:	d110      	bne.n	800d70e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d6f0:	687a      	ldr	r2, [r7, #4]
 800d6f2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d6f4:	9202      	str	r2, [sp, #8]
 800d6f6:	9301      	str	r3, [sp, #4]
 800d6f8:	69fb      	ldr	r3, [r7, #28]
 800d6fa:	9300      	str	r3, [sp, #0]
 800d6fc:	68bb      	ldr	r3, [r7, #8]
 800d6fe:	6a3a      	ldr	r2, [r7, #32]
 800d700:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d702:	68f8      	ldr	r0, [r7, #12]
 800d704:	f000 fe0c 	bl	800e320 <xTaskCreateStatic>
 800d708:	4603      	mov	r3, r0
 800d70a:	613b      	str	r3, [r7, #16]
 800d70c:	e013      	b.n	800d736 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d70e:	69bb      	ldr	r3, [r7, #24]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d110      	bne.n	800d736 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d714:	6a3b      	ldr	r3, [r7, #32]
 800d716:	b29a      	uxth	r2, r3
 800d718:	f107 0310 	add.w	r3, r7, #16
 800d71c:	9301      	str	r3, [sp, #4]
 800d71e:	69fb      	ldr	r3, [r7, #28]
 800d720:	9300      	str	r3, [sp, #0]
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d726:	68f8      	ldr	r0, [r7, #12]
 800d728:	f000 fe57 	bl	800e3da <xTaskCreate>
 800d72c:	4603      	mov	r3, r0
 800d72e:	2b01      	cmp	r3, #1
 800d730:	d001      	beq.n	800d736 <osThreadNew+0x11a>
            hTask = NULL;
 800d732:	2300      	movs	r3, #0
 800d734:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d736:	693b      	ldr	r3, [r7, #16]
}
 800d738:	4618      	mov	r0, r3
 800d73a:	3728      	adds	r7, #40	; 0x28
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}

0800d740 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d740:	b580      	push	{r7, lr}
 800d742:	b084      	sub	sp, #16
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d748:	f3ef 8305 	mrs	r3, IPSR
 800d74c:	60bb      	str	r3, [r7, #8]
  return(result);
 800d74e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d750:	2b00      	cmp	r3, #0
 800d752:	d003      	beq.n	800d75c <osDelay+0x1c>
    stat = osErrorISR;
 800d754:	f06f 0305 	mvn.w	r3, #5
 800d758:	60fb      	str	r3, [r7, #12]
 800d75a:	e007      	b.n	800d76c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d75c:	2300      	movs	r3, #0
 800d75e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d002      	beq.n	800d76c <osDelay+0x2c>
      vTaskDelay(ticks);
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f000 ff92 	bl	800e690 <vTaskDelay>
    }
  }

  return (stat);
 800d76c:	68fb      	ldr	r3, [r7, #12]
}
 800d76e:	4618      	mov	r0, r3
 800d770:	3710      	adds	r7, #16
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}
	...

0800d778 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d778:	b480      	push	{r7}
 800d77a:	b085      	sub	sp, #20
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	60f8      	str	r0, [r7, #12]
 800d780:	60b9      	str	r1, [r7, #8]
 800d782:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	4a07      	ldr	r2, [pc, #28]	; (800d7a4 <vApplicationGetIdleTaskMemory+0x2c>)
 800d788:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d78a:	68bb      	ldr	r3, [r7, #8]
 800d78c:	4a06      	ldr	r2, [pc, #24]	; (800d7a8 <vApplicationGetIdleTaskMemory+0x30>)
 800d78e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2280      	movs	r2, #128	; 0x80
 800d794:	601a      	str	r2, [r3, #0]
}
 800d796:	bf00      	nop
 800d798:	3714      	adds	r7, #20
 800d79a:	46bd      	mov	sp, r7
 800d79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a0:	4770      	bx	lr
 800d7a2:	bf00      	nop
 800d7a4:	20003630 	.word	0x20003630
 800d7a8:	200036d8 	.word	0x200036d8

0800d7ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d7ac:	b480      	push	{r7}
 800d7ae:	b085      	sub	sp, #20
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	60f8      	str	r0, [r7, #12]
 800d7b4:	60b9      	str	r1, [r7, #8]
 800d7b6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	4a07      	ldr	r2, [pc, #28]	; (800d7d8 <vApplicationGetTimerTaskMemory+0x2c>)
 800d7bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	4a06      	ldr	r2, [pc, #24]	; (800d7dc <vApplicationGetTimerTaskMemory+0x30>)
 800d7c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d7ca:	601a      	str	r2, [r3, #0]
}
 800d7cc:	bf00      	nop
 800d7ce:	3714      	adds	r7, #20
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d6:	4770      	bx	lr
 800d7d8:	200038d8 	.word	0x200038d8
 800d7dc:	20003980 	.word	0x20003980

0800d7e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d7e0:	b480      	push	{r7}
 800d7e2:	b083      	sub	sp, #12
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f103 0208 	add.w	r2, r3, #8
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f04f 32ff 	mov.w	r2, #4294967295
 800d7f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	f103 0208 	add.w	r2, r3, #8
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	f103 0208 	add.w	r2, r3, #8
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2200      	movs	r2, #0
 800d812:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d814:	bf00      	nop
 800d816:	370c      	adds	r7, #12
 800d818:	46bd      	mov	sp, r7
 800d81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81e:	4770      	bx	lr

0800d820 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d820:	b480      	push	{r7}
 800d822:	b083      	sub	sp, #12
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2200      	movs	r2, #0
 800d82c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d82e:	bf00      	nop
 800d830:	370c      	adds	r7, #12
 800d832:	46bd      	mov	sp, r7
 800d834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d838:	4770      	bx	lr

0800d83a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d83a:	b480      	push	{r7}
 800d83c:	b085      	sub	sp, #20
 800d83e:	af00      	add	r7, sp, #0
 800d840:	6078      	str	r0, [r7, #4]
 800d842:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	685b      	ldr	r3, [r3, #4]
 800d848:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	68fa      	ldr	r2, [r7, #12]
 800d84e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	689a      	ldr	r2, [r3, #8]
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	689b      	ldr	r3, [r3, #8]
 800d85c:	683a      	ldr	r2, [r7, #0]
 800d85e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	683a      	ldr	r2, [r7, #0]
 800d864:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	687a      	ldr	r2, [r7, #4]
 800d86a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	1c5a      	adds	r2, r3, #1
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	601a      	str	r2, [r3, #0]
}
 800d876:	bf00      	nop
 800d878:	3714      	adds	r7, #20
 800d87a:	46bd      	mov	sp, r7
 800d87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d880:	4770      	bx	lr

0800d882 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d882:	b480      	push	{r7}
 800d884:	b085      	sub	sp, #20
 800d886:	af00      	add	r7, sp, #0
 800d888:	6078      	str	r0, [r7, #4]
 800d88a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d898:	d103      	bne.n	800d8a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	691b      	ldr	r3, [r3, #16]
 800d89e:	60fb      	str	r3, [r7, #12]
 800d8a0:	e00c      	b.n	800d8bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	3308      	adds	r3, #8
 800d8a6:	60fb      	str	r3, [r7, #12]
 800d8a8:	e002      	b.n	800d8b0 <vListInsert+0x2e>
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	685b      	ldr	r3, [r3, #4]
 800d8ae:	60fb      	str	r3, [r7, #12]
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	685b      	ldr	r3, [r3, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	68ba      	ldr	r2, [r7, #8]
 800d8b8:	429a      	cmp	r2, r3
 800d8ba:	d2f6      	bcs.n	800d8aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	685a      	ldr	r2, [r3, #4]
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	685b      	ldr	r3, [r3, #4]
 800d8c8:	683a      	ldr	r2, [r7, #0]
 800d8ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	68fa      	ldr	r2, [r7, #12]
 800d8d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	683a      	ldr	r2, [r7, #0]
 800d8d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	687a      	ldr	r2, [r7, #4]
 800d8dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	1c5a      	adds	r2, r3, #1
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	601a      	str	r2, [r3, #0]
}
 800d8e8:	bf00      	nop
 800d8ea:	3714      	adds	r7, #20
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f2:	4770      	bx	lr

0800d8f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d8f4:	b480      	push	{r7}
 800d8f6:	b085      	sub	sp, #20
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	691b      	ldr	r3, [r3, #16]
 800d900:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	685b      	ldr	r3, [r3, #4]
 800d906:	687a      	ldr	r2, [r7, #4]
 800d908:	6892      	ldr	r2, [r2, #8]
 800d90a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	689b      	ldr	r3, [r3, #8]
 800d910:	687a      	ldr	r2, [r7, #4]
 800d912:	6852      	ldr	r2, [r2, #4]
 800d914:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	685b      	ldr	r3, [r3, #4]
 800d91a:	687a      	ldr	r2, [r7, #4]
 800d91c:	429a      	cmp	r2, r3
 800d91e:	d103      	bne.n	800d928 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	689a      	ldr	r2, [r3, #8]
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2200      	movs	r2, #0
 800d92c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	1e5a      	subs	r2, r3, #1
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	681b      	ldr	r3, [r3, #0]
}
 800d93c:	4618      	mov	r0, r3
 800d93e:	3714      	adds	r7, #20
 800d940:	46bd      	mov	sp, r7
 800d942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d946:	4770      	bx	lr

0800d948 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b084      	sub	sp, #16
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d10a      	bne.n	800d972 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d960:	f383 8811 	msr	BASEPRI, r3
 800d964:	f3bf 8f6f 	isb	sy
 800d968:	f3bf 8f4f 	dsb	sy
 800d96c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d96e:	bf00      	nop
 800d970:	e7fe      	b.n	800d970 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d972:	f002 f877 	bl	800fa64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	681a      	ldr	r2, [r3, #0]
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d97e:	68f9      	ldr	r1, [r7, #12]
 800d980:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d982:	fb01 f303 	mul.w	r3, r1, r3
 800d986:	441a      	add	r2, r3
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	2200      	movs	r2, #0
 800d990:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	681a      	ldr	r2, [r3, #0]
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	681a      	ldr	r2, [r3, #0]
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9a2:	3b01      	subs	r3, #1
 800d9a4:	68f9      	ldr	r1, [r7, #12]
 800d9a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d9a8:	fb01 f303 	mul.w	r3, r1, r3
 800d9ac:	441a      	add	r2, r3
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	22ff      	movs	r2, #255	; 0xff
 800d9b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	22ff      	movs	r2, #255	; 0xff
 800d9be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d114      	bne.n	800d9f2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	691b      	ldr	r3, [r3, #16]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d01a      	beq.n	800da06 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	3310      	adds	r3, #16
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	f001 f929 	bl	800ec2c <xTaskRemoveFromEventList>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d012      	beq.n	800da06 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d9e0:	4b0c      	ldr	r3, [pc, #48]	; (800da14 <xQueueGenericReset+0xcc>)
 800d9e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9e6:	601a      	str	r2, [r3, #0]
 800d9e8:	f3bf 8f4f 	dsb	sy
 800d9ec:	f3bf 8f6f 	isb	sy
 800d9f0:	e009      	b.n	800da06 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	3310      	adds	r3, #16
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f7ff fef2 	bl	800d7e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	3324      	adds	r3, #36	; 0x24
 800da00:	4618      	mov	r0, r3
 800da02:	f7ff feed 	bl	800d7e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800da06:	f002 f85d 	bl	800fac4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800da0a:	2301      	movs	r3, #1
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3710      	adds	r7, #16
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}
 800da14:	e000ed04 	.word	0xe000ed04

0800da18 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b08e      	sub	sp, #56	; 0x38
 800da1c:	af02      	add	r7, sp, #8
 800da1e:	60f8      	str	r0, [r7, #12]
 800da20:	60b9      	str	r1, [r7, #8]
 800da22:	607a      	str	r2, [r7, #4]
 800da24:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d10a      	bne.n	800da42 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800da2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da30:	f383 8811 	msr	BASEPRI, r3
 800da34:	f3bf 8f6f 	isb	sy
 800da38:	f3bf 8f4f 	dsb	sy
 800da3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800da3e:	bf00      	nop
 800da40:	e7fe      	b.n	800da40 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d10a      	bne.n	800da5e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800da48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da4c:	f383 8811 	msr	BASEPRI, r3
 800da50:	f3bf 8f6f 	isb	sy
 800da54:	f3bf 8f4f 	dsb	sy
 800da58:	627b      	str	r3, [r7, #36]	; 0x24
}
 800da5a:	bf00      	nop
 800da5c:	e7fe      	b.n	800da5c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d002      	beq.n	800da6a <xQueueGenericCreateStatic+0x52>
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d001      	beq.n	800da6e <xQueueGenericCreateStatic+0x56>
 800da6a:	2301      	movs	r3, #1
 800da6c:	e000      	b.n	800da70 <xQueueGenericCreateStatic+0x58>
 800da6e:	2300      	movs	r3, #0
 800da70:	2b00      	cmp	r3, #0
 800da72:	d10a      	bne.n	800da8a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800da74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da78:	f383 8811 	msr	BASEPRI, r3
 800da7c:	f3bf 8f6f 	isb	sy
 800da80:	f3bf 8f4f 	dsb	sy
 800da84:	623b      	str	r3, [r7, #32]
}
 800da86:	bf00      	nop
 800da88:	e7fe      	b.n	800da88 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d102      	bne.n	800da96 <xQueueGenericCreateStatic+0x7e>
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d101      	bne.n	800da9a <xQueueGenericCreateStatic+0x82>
 800da96:	2301      	movs	r3, #1
 800da98:	e000      	b.n	800da9c <xQueueGenericCreateStatic+0x84>
 800da9a:	2300      	movs	r3, #0
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d10a      	bne.n	800dab6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800daa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daa4:	f383 8811 	msr	BASEPRI, r3
 800daa8:	f3bf 8f6f 	isb	sy
 800daac:	f3bf 8f4f 	dsb	sy
 800dab0:	61fb      	str	r3, [r7, #28]
}
 800dab2:	bf00      	nop
 800dab4:	e7fe      	b.n	800dab4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800dab6:	2350      	movs	r3, #80	; 0x50
 800dab8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	2b50      	cmp	r3, #80	; 0x50
 800dabe:	d00a      	beq.n	800dad6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800dac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dac4:	f383 8811 	msr	BASEPRI, r3
 800dac8:	f3bf 8f6f 	isb	sy
 800dacc:	f3bf 8f4f 	dsb	sy
 800dad0:	61bb      	str	r3, [r7, #24]
}
 800dad2:	bf00      	nop
 800dad4:	e7fe      	b.n	800dad4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800dad6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800dadc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d00d      	beq.n	800dafe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800dae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dae4:	2201      	movs	r2, #1
 800dae6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800daea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800daee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daf0:	9300      	str	r3, [sp, #0]
 800daf2:	4613      	mov	r3, r2
 800daf4:	687a      	ldr	r2, [r7, #4]
 800daf6:	68b9      	ldr	r1, [r7, #8]
 800daf8:	68f8      	ldr	r0, [r7, #12]
 800dafa:	f000 f805 	bl	800db08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800db00:	4618      	mov	r0, r3
 800db02:	3730      	adds	r7, #48	; 0x30
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}

0800db08 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b084      	sub	sp, #16
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	60f8      	str	r0, [r7, #12]
 800db10:	60b9      	str	r1, [r7, #8]
 800db12:	607a      	str	r2, [r7, #4]
 800db14:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800db16:	68bb      	ldr	r3, [r7, #8]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d103      	bne.n	800db24 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800db1c:	69bb      	ldr	r3, [r7, #24]
 800db1e:	69ba      	ldr	r2, [r7, #24]
 800db20:	601a      	str	r2, [r3, #0]
 800db22:	e002      	b.n	800db2a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800db24:	69bb      	ldr	r3, [r7, #24]
 800db26:	687a      	ldr	r2, [r7, #4]
 800db28:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800db2a:	69bb      	ldr	r3, [r7, #24]
 800db2c:	68fa      	ldr	r2, [r7, #12]
 800db2e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800db30:	69bb      	ldr	r3, [r7, #24]
 800db32:	68ba      	ldr	r2, [r7, #8]
 800db34:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800db36:	2101      	movs	r1, #1
 800db38:	69b8      	ldr	r0, [r7, #24]
 800db3a:	f7ff ff05 	bl	800d948 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800db3e:	69bb      	ldr	r3, [r7, #24]
 800db40:	78fa      	ldrb	r2, [r7, #3]
 800db42:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800db46:	bf00      	nop
 800db48:	3710      	adds	r7, #16
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}
	...

0800db50 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b08e      	sub	sp, #56	; 0x38
 800db54:	af00      	add	r7, sp, #0
 800db56:	60f8      	str	r0, [r7, #12]
 800db58:	60b9      	str	r1, [r7, #8]
 800db5a:	607a      	str	r2, [r7, #4]
 800db5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800db5e:	2300      	movs	r3, #0
 800db60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800db66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d10a      	bne.n	800db82 <xQueueGenericSend+0x32>
	__asm volatile
 800db6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db70:	f383 8811 	msr	BASEPRI, r3
 800db74:	f3bf 8f6f 	isb	sy
 800db78:	f3bf 8f4f 	dsb	sy
 800db7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800db7e:	bf00      	nop
 800db80:	e7fe      	b.n	800db80 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800db82:	68bb      	ldr	r3, [r7, #8]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d103      	bne.n	800db90 <xQueueGenericSend+0x40>
 800db88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d101      	bne.n	800db94 <xQueueGenericSend+0x44>
 800db90:	2301      	movs	r3, #1
 800db92:	e000      	b.n	800db96 <xQueueGenericSend+0x46>
 800db94:	2300      	movs	r3, #0
 800db96:	2b00      	cmp	r3, #0
 800db98:	d10a      	bne.n	800dbb0 <xQueueGenericSend+0x60>
	__asm volatile
 800db9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db9e:	f383 8811 	msr	BASEPRI, r3
 800dba2:	f3bf 8f6f 	isb	sy
 800dba6:	f3bf 8f4f 	dsb	sy
 800dbaa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800dbac:	bf00      	nop
 800dbae:	e7fe      	b.n	800dbae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	2b02      	cmp	r3, #2
 800dbb4:	d103      	bne.n	800dbbe <xQueueGenericSend+0x6e>
 800dbb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbba:	2b01      	cmp	r3, #1
 800dbbc:	d101      	bne.n	800dbc2 <xQueueGenericSend+0x72>
 800dbbe:	2301      	movs	r3, #1
 800dbc0:	e000      	b.n	800dbc4 <xQueueGenericSend+0x74>
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d10a      	bne.n	800dbde <xQueueGenericSend+0x8e>
	__asm volatile
 800dbc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbcc:	f383 8811 	msr	BASEPRI, r3
 800dbd0:	f3bf 8f6f 	isb	sy
 800dbd4:	f3bf 8f4f 	dsb	sy
 800dbd8:	623b      	str	r3, [r7, #32]
}
 800dbda:	bf00      	nop
 800dbdc:	e7fe      	b.n	800dbdc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dbde:	f001 f9e7 	bl	800efb0 <xTaskGetSchedulerState>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d102      	bne.n	800dbee <xQueueGenericSend+0x9e>
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d101      	bne.n	800dbf2 <xQueueGenericSend+0xa2>
 800dbee:	2301      	movs	r3, #1
 800dbf0:	e000      	b.n	800dbf4 <xQueueGenericSend+0xa4>
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d10a      	bne.n	800dc0e <xQueueGenericSend+0xbe>
	__asm volatile
 800dbf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbfc:	f383 8811 	msr	BASEPRI, r3
 800dc00:	f3bf 8f6f 	isb	sy
 800dc04:	f3bf 8f4f 	dsb	sy
 800dc08:	61fb      	str	r3, [r7, #28]
}
 800dc0a:	bf00      	nop
 800dc0c:	e7fe      	b.n	800dc0c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dc0e:	f001 ff29 	bl	800fa64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dc12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc1a:	429a      	cmp	r2, r3
 800dc1c:	d302      	bcc.n	800dc24 <xQueueGenericSend+0xd4>
 800dc1e:	683b      	ldr	r3, [r7, #0]
 800dc20:	2b02      	cmp	r3, #2
 800dc22:	d129      	bne.n	800dc78 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dc24:	683a      	ldr	r2, [r7, #0]
 800dc26:	68b9      	ldr	r1, [r7, #8]
 800dc28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc2a:	f000 fa0b 	bl	800e044 <prvCopyDataToQueue>
 800dc2e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dc30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d010      	beq.n	800dc5a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc3a:	3324      	adds	r3, #36	; 0x24
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f000 fff5 	bl	800ec2c <xTaskRemoveFromEventList>
 800dc42:	4603      	mov	r3, r0
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d013      	beq.n	800dc70 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800dc48:	4b3f      	ldr	r3, [pc, #252]	; (800dd48 <xQueueGenericSend+0x1f8>)
 800dc4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc4e:	601a      	str	r2, [r3, #0]
 800dc50:	f3bf 8f4f 	dsb	sy
 800dc54:	f3bf 8f6f 	isb	sy
 800dc58:	e00a      	b.n	800dc70 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800dc5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d007      	beq.n	800dc70 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800dc60:	4b39      	ldr	r3, [pc, #228]	; (800dd48 <xQueueGenericSend+0x1f8>)
 800dc62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc66:	601a      	str	r2, [r3, #0]
 800dc68:	f3bf 8f4f 	dsb	sy
 800dc6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800dc70:	f001 ff28 	bl	800fac4 <vPortExitCritical>
				return pdPASS;
 800dc74:	2301      	movs	r3, #1
 800dc76:	e063      	b.n	800dd40 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d103      	bne.n	800dc86 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dc7e:	f001 ff21 	bl	800fac4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800dc82:	2300      	movs	r3, #0
 800dc84:	e05c      	b.n	800dd40 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dc86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d106      	bne.n	800dc9a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dc8c:	f107 0314 	add.w	r3, r7, #20
 800dc90:	4618      	mov	r0, r3
 800dc92:	f001 f82f 	bl	800ecf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dc96:	2301      	movs	r3, #1
 800dc98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dc9a:	f001 ff13 	bl	800fac4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dc9e:	f000 fd9b 	bl	800e7d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dca2:	f001 fedf 	bl	800fa64 <vPortEnterCritical>
 800dca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dca8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dcac:	b25b      	sxtb	r3, r3
 800dcae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcb2:	d103      	bne.n	800dcbc <xQueueGenericSend+0x16c>
 800dcb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dcbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dcc2:	b25b      	sxtb	r3, r3
 800dcc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcc8:	d103      	bne.n	800dcd2 <xQueueGenericSend+0x182>
 800dcca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dccc:	2200      	movs	r2, #0
 800dcce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dcd2:	f001 fef7 	bl	800fac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dcd6:	1d3a      	adds	r2, r7, #4
 800dcd8:	f107 0314 	add.w	r3, r7, #20
 800dcdc:	4611      	mov	r1, r2
 800dcde:	4618      	mov	r0, r3
 800dce0:	f001 f81e 	bl	800ed20 <xTaskCheckForTimeOut>
 800dce4:	4603      	mov	r3, r0
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d124      	bne.n	800dd34 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800dcea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dcec:	f000 faa2 	bl	800e234 <prvIsQueueFull>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d018      	beq.n	800dd28 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800dcf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcf8:	3310      	adds	r3, #16
 800dcfa:	687a      	ldr	r2, [r7, #4]
 800dcfc:	4611      	mov	r1, r2
 800dcfe:	4618      	mov	r0, r3
 800dd00:	f000 ff44 	bl	800eb8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800dd04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dd06:	f000 fa2d 	bl	800e164 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800dd0a:	f000 fd73 	bl	800e7f4 <xTaskResumeAll>
 800dd0e:	4603      	mov	r3, r0
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	f47f af7c 	bne.w	800dc0e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800dd16:	4b0c      	ldr	r3, [pc, #48]	; (800dd48 <xQueueGenericSend+0x1f8>)
 800dd18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd1c:	601a      	str	r2, [r3, #0]
 800dd1e:	f3bf 8f4f 	dsb	sy
 800dd22:	f3bf 8f6f 	isb	sy
 800dd26:	e772      	b.n	800dc0e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800dd28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dd2a:	f000 fa1b 	bl	800e164 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dd2e:	f000 fd61 	bl	800e7f4 <xTaskResumeAll>
 800dd32:	e76c      	b.n	800dc0e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800dd34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dd36:	f000 fa15 	bl	800e164 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dd3a:	f000 fd5b 	bl	800e7f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800dd3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800dd40:	4618      	mov	r0, r3
 800dd42:	3738      	adds	r7, #56	; 0x38
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}
 800dd48:	e000ed04 	.word	0xe000ed04

0800dd4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b090      	sub	sp, #64	; 0x40
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	60f8      	str	r0, [r7, #12]
 800dd54:	60b9      	str	r1, [r7, #8]
 800dd56:	607a      	str	r2, [r7, #4]
 800dd58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800dd5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d10a      	bne.n	800dd7a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800dd64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd68:	f383 8811 	msr	BASEPRI, r3
 800dd6c:	f3bf 8f6f 	isb	sy
 800dd70:	f3bf 8f4f 	dsb	sy
 800dd74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800dd76:	bf00      	nop
 800dd78:	e7fe      	b.n	800dd78 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d103      	bne.n	800dd88 <xQueueGenericSendFromISR+0x3c>
 800dd80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d101      	bne.n	800dd8c <xQueueGenericSendFromISR+0x40>
 800dd88:	2301      	movs	r3, #1
 800dd8a:	e000      	b.n	800dd8e <xQueueGenericSendFromISR+0x42>
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d10a      	bne.n	800dda8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800dd92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd96:	f383 8811 	msr	BASEPRI, r3
 800dd9a:	f3bf 8f6f 	isb	sy
 800dd9e:	f3bf 8f4f 	dsb	sy
 800dda2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800dda4:	bf00      	nop
 800dda6:	e7fe      	b.n	800dda6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dda8:	683b      	ldr	r3, [r7, #0]
 800ddaa:	2b02      	cmp	r3, #2
 800ddac:	d103      	bne.n	800ddb6 <xQueueGenericSendFromISR+0x6a>
 800ddae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddb2:	2b01      	cmp	r3, #1
 800ddb4:	d101      	bne.n	800ddba <xQueueGenericSendFromISR+0x6e>
 800ddb6:	2301      	movs	r3, #1
 800ddb8:	e000      	b.n	800ddbc <xQueueGenericSendFromISR+0x70>
 800ddba:	2300      	movs	r3, #0
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d10a      	bne.n	800ddd6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ddc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddc4:	f383 8811 	msr	BASEPRI, r3
 800ddc8:	f3bf 8f6f 	isb	sy
 800ddcc:	f3bf 8f4f 	dsb	sy
 800ddd0:	623b      	str	r3, [r7, #32]
}
 800ddd2:	bf00      	nop
 800ddd4:	e7fe      	b.n	800ddd4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ddd6:	f001 ff27 	bl	800fc28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ddda:	f3ef 8211 	mrs	r2, BASEPRI
 800ddde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dde2:	f383 8811 	msr	BASEPRI, r3
 800dde6:	f3bf 8f6f 	isb	sy
 800ddea:	f3bf 8f4f 	dsb	sy
 800ddee:	61fa      	str	r2, [r7, #28]
 800ddf0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ddf2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ddf4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ddf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ddfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddfe:	429a      	cmp	r2, r3
 800de00:	d302      	bcc.n	800de08 <xQueueGenericSendFromISR+0xbc>
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	2b02      	cmp	r3, #2
 800de06:	d12f      	bne.n	800de68 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800de08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800de0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800de12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de16:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800de18:	683a      	ldr	r2, [r7, #0]
 800de1a:	68b9      	ldr	r1, [r7, #8]
 800de1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800de1e:	f000 f911 	bl	800e044 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800de22:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800de26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de2a:	d112      	bne.n	800de52 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800de2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de30:	2b00      	cmp	r3, #0
 800de32:	d016      	beq.n	800de62 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800de34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de36:	3324      	adds	r3, #36	; 0x24
 800de38:	4618      	mov	r0, r3
 800de3a:	f000 fef7 	bl	800ec2c <xTaskRemoveFromEventList>
 800de3e:	4603      	mov	r3, r0
 800de40:	2b00      	cmp	r3, #0
 800de42:	d00e      	beq.n	800de62 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d00b      	beq.n	800de62 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	2201      	movs	r2, #1
 800de4e:	601a      	str	r2, [r3, #0]
 800de50:	e007      	b.n	800de62 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800de52:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800de56:	3301      	adds	r3, #1
 800de58:	b2db      	uxtb	r3, r3
 800de5a:	b25a      	sxtb	r2, r3
 800de5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800de62:	2301      	movs	r3, #1
 800de64:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800de66:	e001      	b.n	800de6c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800de68:	2300      	movs	r3, #0
 800de6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800de6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de6e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800de70:	697b      	ldr	r3, [r7, #20]
 800de72:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800de76:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800de78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800de7a:	4618      	mov	r0, r3
 800de7c:	3740      	adds	r7, #64	; 0x40
 800de7e:	46bd      	mov	sp, r7
 800de80:	bd80      	pop	{r7, pc}
	...

0800de84 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b08c      	sub	sp, #48	; 0x30
 800de88:	af00      	add	r7, sp, #0
 800de8a:	60f8      	str	r0, [r7, #12]
 800de8c:	60b9      	str	r1, [r7, #8]
 800de8e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800de90:	2300      	movs	r3, #0
 800de92:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800de98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d10a      	bne.n	800deb4 <xQueueReceive+0x30>
	__asm volatile
 800de9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dea2:	f383 8811 	msr	BASEPRI, r3
 800dea6:	f3bf 8f6f 	isb	sy
 800deaa:	f3bf 8f4f 	dsb	sy
 800deae:	623b      	str	r3, [r7, #32]
}
 800deb0:	bf00      	nop
 800deb2:	e7fe      	b.n	800deb2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d103      	bne.n	800dec2 <xQueueReceive+0x3e>
 800deba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800debc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d101      	bne.n	800dec6 <xQueueReceive+0x42>
 800dec2:	2301      	movs	r3, #1
 800dec4:	e000      	b.n	800dec8 <xQueueReceive+0x44>
 800dec6:	2300      	movs	r3, #0
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d10a      	bne.n	800dee2 <xQueueReceive+0x5e>
	__asm volatile
 800decc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ded0:	f383 8811 	msr	BASEPRI, r3
 800ded4:	f3bf 8f6f 	isb	sy
 800ded8:	f3bf 8f4f 	dsb	sy
 800dedc:	61fb      	str	r3, [r7, #28]
}
 800dede:	bf00      	nop
 800dee0:	e7fe      	b.n	800dee0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dee2:	f001 f865 	bl	800efb0 <xTaskGetSchedulerState>
 800dee6:	4603      	mov	r3, r0
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d102      	bne.n	800def2 <xQueueReceive+0x6e>
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d101      	bne.n	800def6 <xQueueReceive+0x72>
 800def2:	2301      	movs	r3, #1
 800def4:	e000      	b.n	800def8 <xQueueReceive+0x74>
 800def6:	2300      	movs	r3, #0
 800def8:	2b00      	cmp	r3, #0
 800defa:	d10a      	bne.n	800df12 <xQueueReceive+0x8e>
	__asm volatile
 800defc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df00:	f383 8811 	msr	BASEPRI, r3
 800df04:	f3bf 8f6f 	isb	sy
 800df08:	f3bf 8f4f 	dsb	sy
 800df0c:	61bb      	str	r3, [r7, #24]
}
 800df0e:	bf00      	nop
 800df10:	e7fe      	b.n	800df10 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800df12:	f001 fda7 	bl	800fa64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800df16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df1a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800df1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d01f      	beq.n	800df62 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800df22:	68b9      	ldr	r1, [r7, #8]
 800df24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df26:	f000 f8f7 	bl	800e118 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800df2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df2c:	1e5a      	subs	r2, r3, #1
 800df2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df30:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df34:	691b      	ldr	r3, [r3, #16]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d00f      	beq.n	800df5a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df3c:	3310      	adds	r3, #16
 800df3e:	4618      	mov	r0, r3
 800df40:	f000 fe74 	bl	800ec2c <xTaskRemoveFromEventList>
 800df44:	4603      	mov	r3, r0
 800df46:	2b00      	cmp	r3, #0
 800df48:	d007      	beq.n	800df5a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800df4a:	4b3d      	ldr	r3, [pc, #244]	; (800e040 <xQueueReceive+0x1bc>)
 800df4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df50:	601a      	str	r2, [r3, #0]
 800df52:	f3bf 8f4f 	dsb	sy
 800df56:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800df5a:	f001 fdb3 	bl	800fac4 <vPortExitCritical>
				return pdPASS;
 800df5e:	2301      	movs	r3, #1
 800df60:	e069      	b.n	800e036 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d103      	bne.n	800df70 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800df68:	f001 fdac 	bl	800fac4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800df6c:	2300      	movs	r3, #0
 800df6e:	e062      	b.n	800e036 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800df70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df72:	2b00      	cmp	r3, #0
 800df74:	d106      	bne.n	800df84 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800df76:	f107 0310 	add.w	r3, r7, #16
 800df7a:	4618      	mov	r0, r3
 800df7c:	f000 feba 	bl	800ecf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800df80:	2301      	movs	r3, #1
 800df82:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800df84:	f001 fd9e 	bl	800fac4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800df88:	f000 fc26 	bl	800e7d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800df8c:	f001 fd6a 	bl	800fa64 <vPortEnterCritical>
 800df90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800df96:	b25b      	sxtb	r3, r3
 800df98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df9c:	d103      	bne.n	800dfa6 <xQueueReceive+0x122>
 800df9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dfa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dfac:	b25b      	sxtb	r3, r3
 800dfae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfb2:	d103      	bne.n	800dfbc <xQueueReceive+0x138>
 800dfb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dfbc:	f001 fd82 	bl	800fac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dfc0:	1d3a      	adds	r2, r7, #4
 800dfc2:	f107 0310 	add.w	r3, r7, #16
 800dfc6:	4611      	mov	r1, r2
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f000 fea9 	bl	800ed20 <xTaskCheckForTimeOut>
 800dfce:	4603      	mov	r3, r0
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d123      	bne.n	800e01c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dfd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dfd6:	f000 f917 	bl	800e208 <prvIsQueueEmpty>
 800dfda:	4603      	mov	r3, r0
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d017      	beq.n	800e010 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dfe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfe2:	3324      	adds	r3, #36	; 0x24
 800dfe4:	687a      	ldr	r2, [r7, #4]
 800dfe6:	4611      	mov	r1, r2
 800dfe8:	4618      	mov	r0, r3
 800dfea:	f000 fdcf 	bl	800eb8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dfee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dff0:	f000 f8b8 	bl	800e164 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dff4:	f000 fbfe 	bl	800e7f4 <xTaskResumeAll>
 800dff8:	4603      	mov	r3, r0
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d189      	bne.n	800df12 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800dffe:	4b10      	ldr	r3, [pc, #64]	; (800e040 <xQueueReceive+0x1bc>)
 800e000:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e004:	601a      	str	r2, [r3, #0]
 800e006:	f3bf 8f4f 	dsb	sy
 800e00a:	f3bf 8f6f 	isb	sy
 800e00e:	e780      	b.n	800df12 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e010:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e012:	f000 f8a7 	bl	800e164 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e016:	f000 fbed 	bl	800e7f4 <xTaskResumeAll>
 800e01a:	e77a      	b.n	800df12 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e01c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e01e:	f000 f8a1 	bl	800e164 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e022:	f000 fbe7 	bl	800e7f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e026:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e028:	f000 f8ee 	bl	800e208 <prvIsQueueEmpty>
 800e02c:	4603      	mov	r3, r0
 800e02e:	2b00      	cmp	r3, #0
 800e030:	f43f af6f 	beq.w	800df12 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e034:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e036:	4618      	mov	r0, r3
 800e038:	3730      	adds	r7, #48	; 0x30
 800e03a:	46bd      	mov	sp, r7
 800e03c:	bd80      	pop	{r7, pc}
 800e03e:	bf00      	nop
 800e040:	e000ed04 	.word	0xe000ed04

0800e044 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b086      	sub	sp, #24
 800e048:	af00      	add	r7, sp, #0
 800e04a:	60f8      	str	r0, [r7, #12]
 800e04c:	60b9      	str	r1, [r7, #8]
 800e04e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e050:	2300      	movs	r3, #0
 800e052:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e058:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d10d      	bne.n	800e07e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d14d      	bne.n	800e106 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	689b      	ldr	r3, [r3, #8]
 800e06e:	4618      	mov	r0, r3
 800e070:	f000 ffbc 	bl	800efec <xTaskPriorityDisinherit>
 800e074:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	2200      	movs	r2, #0
 800e07a:	609a      	str	r2, [r3, #8]
 800e07c:	e043      	b.n	800e106 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d119      	bne.n	800e0b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	6858      	ldr	r0, [r3, #4]
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e08c:	461a      	mov	r2, r3
 800e08e:	68b9      	ldr	r1, [r7, #8]
 800e090:	f004 ff05 	bl	8012e9e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	685a      	ldr	r2, [r3, #4]
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e09c:	441a      	add	r2, r3
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	685a      	ldr	r2, [r3, #4]
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	689b      	ldr	r3, [r3, #8]
 800e0aa:	429a      	cmp	r2, r3
 800e0ac:	d32b      	bcc.n	800e106 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	681a      	ldr	r2, [r3, #0]
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	605a      	str	r2, [r3, #4]
 800e0b6:	e026      	b.n	800e106 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	68d8      	ldr	r0, [r3, #12]
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0c0:	461a      	mov	r2, r3
 800e0c2:	68b9      	ldr	r1, [r7, #8]
 800e0c4:	f004 feeb 	bl	8012e9e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	68da      	ldr	r2, [r3, #12]
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0d0:	425b      	negs	r3, r3
 800e0d2:	441a      	add	r2, r3
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	68da      	ldr	r2, [r3, #12]
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	429a      	cmp	r2, r3
 800e0e2:	d207      	bcs.n	800e0f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	689a      	ldr	r2, [r3, #8]
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0ec:	425b      	negs	r3, r3
 800e0ee:	441a      	add	r2, r3
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	2b02      	cmp	r3, #2
 800e0f8:	d105      	bne.n	800e106 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e0fa:	693b      	ldr	r3, [r7, #16]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d002      	beq.n	800e106 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e100:	693b      	ldr	r3, [r7, #16]
 800e102:	3b01      	subs	r3, #1
 800e104:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e106:	693b      	ldr	r3, [r7, #16]
 800e108:	1c5a      	adds	r2, r3, #1
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e10e:	697b      	ldr	r3, [r7, #20]
}
 800e110:	4618      	mov	r0, r3
 800e112:	3718      	adds	r7, #24
 800e114:	46bd      	mov	sp, r7
 800e116:	bd80      	pop	{r7, pc}

0800e118 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b082      	sub	sp, #8
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
 800e120:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e126:	2b00      	cmp	r3, #0
 800e128:	d018      	beq.n	800e15c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	68da      	ldr	r2, [r3, #12]
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e132:	441a      	add	r2, r3
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	68da      	ldr	r2, [r3, #12]
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	689b      	ldr	r3, [r3, #8]
 800e140:	429a      	cmp	r2, r3
 800e142:	d303      	bcc.n	800e14c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	681a      	ldr	r2, [r3, #0]
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	68d9      	ldr	r1, [r3, #12]
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e154:	461a      	mov	r2, r3
 800e156:	6838      	ldr	r0, [r7, #0]
 800e158:	f004 fea1 	bl	8012e9e <memcpy>
	}
}
 800e15c:	bf00      	nop
 800e15e:	3708      	adds	r7, #8
 800e160:	46bd      	mov	sp, r7
 800e162:	bd80      	pop	{r7, pc}

0800e164 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b084      	sub	sp, #16
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e16c:	f001 fc7a 	bl	800fa64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e176:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e178:	e011      	b.n	800e19e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d012      	beq.n	800e1a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	3324      	adds	r3, #36	; 0x24
 800e186:	4618      	mov	r0, r3
 800e188:	f000 fd50 	bl	800ec2c <xTaskRemoveFromEventList>
 800e18c:	4603      	mov	r3, r0
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d001      	beq.n	800e196 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e192:	f000 fe27 	bl	800ede4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e196:	7bfb      	ldrb	r3, [r7, #15]
 800e198:	3b01      	subs	r3, #1
 800e19a:	b2db      	uxtb	r3, r3
 800e19c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e19e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	dce9      	bgt.n	800e17a <prvUnlockQueue+0x16>
 800e1a6:	e000      	b.n	800e1aa <prvUnlockQueue+0x46>
					break;
 800e1a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	22ff      	movs	r2, #255	; 0xff
 800e1ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e1b2:	f001 fc87 	bl	800fac4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e1b6:	f001 fc55 	bl	800fa64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e1c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e1c2:	e011      	b.n	800e1e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	691b      	ldr	r3, [r3, #16]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d012      	beq.n	800e1f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	3310      	adds	r3, #16
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	f000 fd2b 	bl	800ec2c <xTaskRemoveFromEventList>
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d001      	beq.n	800e1e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e1dc:	f000 fe02 	bl	800ede4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e1e0:	7bbb      	ldrb	r3, [r7, #14]
 800e1e2:	3b01      	subs	r3, #1
 800e1e4:	b2db      	uxtb	r3, r3
 800e1e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e1e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	dce9      	bgt.n	800e1c4 <prvUnlockQueue+0x60>
 800e1f0:	e000      	b.n	800e1f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e1f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	22ff      	movs	r2, #255	; 0xff
 800e1f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e1fc:	f001 fc62 	bl	800fac4 <vPortExitCritical>
}
 800e200:	bf00      	nop
 800e202:	3710      	adds	r7, #16
 800e204:	46bd      	mov	sp, r7
 800e206:	bd80      	pop	{r7, pc}

0800e208 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b084      	sub	sp, #16
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e210:	f001 fc28 	bl	800fa64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d102      	bne.n	800e222 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e21c:	2301      	movs	r3, #1
 800e21e:	60fb      	str	r3, [r7, #12]
 800e220:	e001      	b.n	800e226 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e222:	2300      	movs	r3, #0
 800e224:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e226:	f001 fc4d 	bl	800fac4 <vPortExitCritical>

	return xReturn;
 800e22a:	68fb      	ldr	r3, [r7, #12]
}
 800e22c:	4618      	mov	r0, r3
 800e22e:	3710      	adds	r7, #16
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}

0800e234 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b084      	sub	sp, #16
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e23c:	f001 fc12 	bl	800fa64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e248:	429a      	cmp	r2, r3
 800e24a:	d102      	bne.n	800e252 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e24c:	2301      	movs	r3, #1
 800e24e:	60fb      	str	r3, [r7, #12]
 800e250:	e001      	b.n	800e256 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e252:	2300      	movs	r3, #0
 800e254:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e256:	f001 fc35 	bl	800fac4 <vPortExitCritical>

	return xReturn;
 800e25a:	68fb      	ldr	r3, [r7, #12]
}
 800e25c:	4618      	mov	r0, r3
 800e25e:	3710      	adds	r7, #16
 800e260:	46bd      	mov	sp, r7
 800e262:	bd80      	pop	{r7, pc}

0800e264 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e264:	b480      	push	{r7}
 800e266:	b085      	sub	sp, #20
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
 800e26c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e26e:	2300      	movs	r3, #0
 800e270:	60fb      	str	r3, [r7, #12]
 800e272:	e014      	b.n	800e29e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e274:	4a0f      	ldr	r2, [pc, #60]	; (800e2b4 <vQueueAddToRegistry+0x50>)
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d10b      	bne.n	800e298 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e280:	490c      	ldr	r1, [pc, #48]	; (800e2b4 <vQueueAddToRegistry+0x50>)
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	683a      	ldr	r2, [r7, #0]
 800e286:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e28a:	4a0a      	ldr	r2, [pc, #40]	; (800e2b4 <vQueueAddToRegistry+0x50>)
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	00db      	lsls	r3, r3, #3
 800e290:	4413      	add	r3, r2
 800e292:	687a      	ldr	r2, [r7, #4]
 800e294:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e296:	e006      	b.n	800e2a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	3301      	adds	r3, #1
 800e29c:	60fb      	str	r3, [r7, #12]
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	2b07      	cmp	r3, #7
 800e2a2:	d9e7      	bls.n	800e274 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e2a4:	bf00      	nop
 800e2a6:	bf00      	nop
 800e2a8:	3714      	adds	r7, #20
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b0:	4770      	bx	lr
 800e2b2:	bf00      	nop
 800e2b4:	20003d80 	.word	0x20003d80

0800e2b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b086      	sub	sp, #24
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	60f8      	str	r0, [r7, #12]
 800e2c0:	60b9      	str	r1, [r7, #8]
 800e2c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e2c8:	f001 fbcc 	bl	800fa64 <vPortEnterCritical>
 800e2cc:	697b      	ldr	r3, [r7, #20]
 800e2ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e2d2:	b25b      	sxtb	r3, r3
 800e2d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2d8:	d103      	bne.n	800e2e2 <vQueueWaitForMessageRestricted+0x2a>
 800e2da:	697b      	ldr	r3, [r7, #20]
 800e2dc:	2200      	movs	r2, #0
 800e2de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e2e2:	697b      	ldr	r3, [r7, #20]
 800e2e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e2e8:	b25b      	sxtb	r3, r3
 800e2ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2ee:	d103      	bne.n	800e2f8 <vQueueWaitForMessageRestricted+0x40>
 800e2f0:	697b      	ldr	r3, [r7, #20]
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e2f8:	f001 fbe4 	bl	800fac4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e2fc:	697b      	ldr	r3, [r7, #20]
 800e2fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e300:	2b00      	cmp	r3, #0
 800e302:	d106      	bne.n	800e312 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e304:	697b      	ldr	r3, [r7, #20]
 800e306:	3324      	adds	r3, #36	; 0x24
 800e308:	687a      	ldr	r2, [r7, #4]
 800e30a:	68b9      	ldr	r1, [r7, #8]
 800e30c:	4618      	mov	r0, r3
 800e30e:	f000 fc61 	bl	800ebd4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e312:	6978      	ldr	r0, [r7, #20]
 800e314:	f7ff ff26 	bl	800e164 <prvUnlockQueue>
	}
 800e318:	bf00      	nop
 800e31a:	3718      	adds	r7, #24
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bd80      	pop	{r7, pc}

0800e320 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e320:	b580      	push	{r7, lr}
 800e322:	b08e      	sub	sp, #56	; 0x38
 800e324:	af04      	add	r7, sp, #16
 800e326:	60f8      	str	r0, [r7, #12]
 800e328:	60b9      	str	r1, [r7, #8]
 800e32a:	607a      	str	r2, [r7, #4]
 800e32c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e32e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e330:	2b00      	cmp	r3, #0
 800e332:	d10a      	bne.n	800e34a <xTaskCreateStatic+0x2a>
	__asm volatile
 800e334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e338:	f383 8811 	msr	BASEPRI, r3
 800e33c:	f3bf 8f6f 	isb	sy
 800e340:	f3bf 8f4f 	dsb	sy
 800e344:	623b      	str	r3, [r7, #32]
}
 800e346:	bf00      	nop
 800e348:	e7fe      	b.n	800e348 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d10a      	bne.n	800e366 <xTaskCreateStatic+0x46>
	__asm volatile
 800e350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e354:	f383 8811 	msr	BASEPRI, r3
 800e358:	f3bf 8f6f 	isb	sy
 800e35c:	f3bf 8f4f 	dsb	sy
 800e360:	61fb      	str	r3, [r7, #28]
}
 800e362:	bf00      	nop
 800e364:	e7fe      	b.n	800e364 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e366:	23a8      	movs	r3, #168	; 0xa8
 800e368:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e36a:	693b      	ldr	r3, [r7, #16]
 800e36c:	2ba8      	cmp	r3, #168	; 0xa8
 800e36e:	d00a      	beq.n	800e386 <xTaskCreateStatic+0x66>
	__asm volatile
 800e370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e374:	f383 8811 	msr	BASEPRI, r3
 800e378:	f3bf 8f6f 	isb	sy
 800e37c:	f3bf 8f4f 	dsb	sy
 800e380:	61bb      	str	r3, [r7, #24]
}
 800e382:	bf00      	nop
 800e384:	e7fe      	b.n	800e384 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e386:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d01e      	beq.n	800e3cc <xTaskCreateStatic+0xac>
 800e38e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e390:	2b00      	cmp	r3, #0
 800e392:	d01b      	beq.n	800e3cc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e396:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e39a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e39c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a0:	2202      	movs	r2, #2
 800e3a2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	9303      	str	r3, [sp, #12]
 800e3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ac:	9302      	str	r3, [sp, #8]
 800e3ae:	f107 0314 	add.w	r3, r7, #20
 800e3b2:	9301      	str	r3, [sp, #4]
 800e3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3b6:	9300      	str	r3, [sp, #0]
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	687a      	ldr	r2, [r7, #4]
 800e3bc:	68b9      	ldr	r1, [r7, #8]
 800e3be:	68f8      	ldr	r0, [r7, #12]
 800e3c0:	f000 f850 	bl	800e464 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e3c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e3c6:	f000 f8f3 	bl	800e5b0 <prvAddNewTaskToReadyList>
 800e3ca:	e001      	b.n	800e3d0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e3d0:	697b      	ldr	r3, [r7, #20]
	}
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	3728      	adds	r7, #40	; 0x28
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd80      	pop	{r7, pc}

0800e3da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e3da:	b580      	push	{r7, lr}
 800e3dc:	b08c      	sub	sp, #48	; 0x30
 800e3de:	af04      	add	r7, sp, #16
 800e3e0:	60f8      	str	r0, [r7, #12]
 800e3e2:	60b9      	str	r1, [r7, #8]
 800e3e4:	603b      	str	r3, [r7, #0]
 800e3e6:	4613      	mov	r3, r2
 800e3e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e3ea:	88fb      	ldrh	r3, [r7, #6]
 800e3ec:	009b      	lsls	r3, r3, #2
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f001 fc5a 	bl	800fca8 <pvPortMalloc>
 800e3f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e3f6:	697b      	ldr	r3, [r7, #20]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d00e      	beq.n	800e41a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e3fc:	20a8      	movs	r0, #168	; 0xa8
 800e3fe:	f001 fc53 	bl	800fca8 <pvPortMalloc>
 800e402:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e404:	69fb      	ldr	r3, [r7, #28]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d003      	beq.n	800e412 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e40a:	69fb      	ldr	r3, [r7, #28]
 800e40c:	697a      	ldr	r2, [r7, #20]
 800e40e:	631a      	str	r2, [r3, #48]	; 0x30
 800e410:	e005      	b.n	800e41e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e412:	6978      	ldr	r0, [r7, #20]
 800e414:	f001 fd14 	bl	800fe40 <vPortFree>
 800e418:	e001      	b.n	800e41e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e41a:	2300      	movs	r3, #0
 800e41c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e41e:	69fb      	ldr	r3, [r7, #28]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d017      	beq.n	800e454 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e424:	69fb      	ldr	r3, [r7, #28]
 800e426:	2200      	movs	r2, #0
 800e428:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e42c:	88fa      	ldrh	r2, [r7, #6]
 800e42e:	2300      	movs	r3, #0
 800e430:	9303      	str	r3, [sp, #12]
 800e432:	69fb      	ldr	r3, [r7, #28]
 800e434:	9302      	str	r3, [sp, #8]
 800e436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e438:	9301      	str	r3, [sp, #4]
 800e43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e43c:	9300      	str	r3, [sp, #0]
 800e43e:	683b      	ldr	r3, [r7, #0]
 800e440:	68b9      	ldr	r1, [r7, #8]
 800e442:	68f8      	ldr	r0, [r7, #12]
 800e444:	f000 f80e 	bl	800e464 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e448:	69f8      	ldr	r0, [r7, #28]
 800e44a:	f000 f8b1 	bl	800e5b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e44e:	2301      	movs	r3, #1
 800e450:	61bb      	str	r3, [r7, #24]
 800e452:	e002      	b.n	800e45a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e454:	f04f 33ff 	mov.w	r3, #4294967295
 800e458:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e45a:	69bb      	ldr	r3, [r7, #24]
	}
 800e45c:	4618      	mov	r0, r3
 800e45e:	3720      	adds	r7, #32
 800e460:	46bd      	mov	sp, r7
 800e462:	bd80      	pop	{r7, pc}

0800e464 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b088      	sub	sp, #32
 800e468:	af00      	add	r7, sp, #0
 800e46a:	60f8      	str	r0, [r7, #12]
 800e46c:	60b9      	str	r1, [r7, #8]
 800e46e:	607a      	str	r2, [r7, #4]
 800e470:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e474:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	009b      	lsls	r3, r3, #2
 800e47a:	461a      	mov	r2, r3
 800e47c:	21a5      	movs	r1, #165	; 0xa5
 800e47e:	f004 fc39 	bl	8012cf4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e484:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e48c:	3b01      	subs	r3, #1
 800e48e:	009b      	lsls	r3, r3, #2
 800e490:	4413      	add	r3, r2
 800e492:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e494:	69bb      	ldr	r3, [r7, #24]
 800e496:	f023 0307 	bic.w	r3, r3, #7
 800e49a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e49c:	69bb      	ldr	r3, [r7, #24]
 800e49e:	f003 0307 	and.w	r3, r3, #7
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d00a      	beq.n	800e4bc <prvInitialiseNewTask+0x58>
	__asm volatile
 800e4a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4aa:	f383 8811 	msr	BASEPRI, r3
 800e4ae:	f3bf 8f6f 	isb	sy
 800e4b2:	f3bf 8f4f 	dsb	sy
 800e4b6:	617b      	str	r3, [r7, #20]
}
 800e4b8:	bf00      	nop
 800e4ba:	e7fe      	b.n	800e4ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e4bc:	68bb      	ldr	r3, [r7, #8]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d01f      	beq.n	800e502 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	61fb      	str	r3, [r7, #28]
 800e4c6:	e012      	b.n	800e4ee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e4c8:	68ba      	ldr	r2, [r7, #8]
 800e4ca:	69fb      	ldr	r3, [r7, #28]
 800e4cc:	4413      	add	r3, r2
 800e4ce:	7819      	ldrb	r1, [r3, #0]
 800e4d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4d2:	69fb      	ldr	r3, [r7, #28]
 800e4d4:	4413      	add	r3, r2
 800e4d6:	3334      	adds	r3, #52	; 0x34
 800e4d8:	460a      	mov	r2, r1
 800e4da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e4dc:	68ba      	ldr	r2, [r7, #8]
 800e4de:	69fb      	ldr	r3, [r7, #28]
 800e4e0:	4413      	add	r3, r2
 800e4e2:	781b      	ldrb	r3, [r3, #0]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d006      	beq.n	800e4f6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e4e8:	69fb      	ldr	r3, [r7, #28]
 800e4ea:	3301      	adds	r3, #1
 800e4ec:	61fb      	str	r3, [r7, #28]
 800e4ee:	69fb      	ldr	r3, [r7, #28]
 800e4f0:	2b0f      	cmp	r3, #15
 800e4f2:	d9e9      	bls.n	800e4c8 <prvInitialiseNewTask+0x64>
 800e4f4:	e000      	b.n	800e4f8 <prvInitialiseNewTask+0x94>
			{
				break;
 800e4f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e4f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e500:	e003      	b.n	800e50a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e504:	2200      	movs	r2, #0
 800e506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e50c:	2b37      	cmp	r3, #55	; 0x37
 800e50e:	d901      	bls.n	800e514 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e510:	2337      	movs	r3, #55	; 0x37
 800e512:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e516:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e518:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e51c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e51e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e522:	2200      	movs	r2, #0
 800e524:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e528:	3304      	adds	r3, #4
 800e52a:	4618      	mov	r0, r3
 800e52c:	f7ff f978 	bl	800d820 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e532:	3318      	adds	r3, #24
 800e534:	4618      	mov	r0, r3
 800e536:	f7ff f973 	bl	800d820 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e53c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e53e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e542:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e548:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e54c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e54e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e552:	2200      	movs	r2, #0
 800e554:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e55a:	2200      	movs	r2, #0
 800e55c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e562:	3354      	adds	r3, #84	; 0x54
 800e564:	224c      	movs	r2, #76	; 0x4c
 800e566:	2100      	movs	r1, #0
 800e568:	4618      	mov	r0, r3
 800e56a:	f004 fbc3 	bl	8012cf4 <memset>
 800e56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e570:	4a0c      	ldr	r2, [pc, #48]	; (800e5a4 <prvInitialiseNewTask+0x140>)
 800e572:	659a      	str	r2, [r3, #88]	; 0x58
 800e574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e576:	4a0c      	ldr	r2, [pc, #48]	; (800e5a8 <prvInitialiseNewTask+0x144>)
 800e578:	65da      	str	r2, [r3, #92]	; 0x5c
 800e57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e57c:	4a0b      	ldr	r2, [pc, #44]	; (800e5ac <prvInitialiseNewTask+0x148>)
 800e57e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e580:	683a      	ldr	r2, [r7, #0]
 800e582:	68f9      	ldr	r1, [r7, #12]
 800e584:	69b8      	ldr	r0, [r7, #24]
 800e586:	f001 f941 	bl	800f80c <pxPortInitialiseStack>
 800e58a:	4602      	mov	r2, r0
 800e58c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e58e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e592:	2b00      	cmp	r3, #0
 800e594:	d002      	beq.n	800e59c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e59a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e59c:	bf00      	nop
 800e59e:	3720      	adds	r7, #32
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd80      	pop	{r7, pc}
 800e5a4:	20008014 	.word	0x20008014
 800e5a8:	2000807c 	.word	0x2000807c
 800e5ac:	200080e4 	.word	0x200080e4

0800e5b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b082      	sub	sp, #8
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e5b8:	f001 fa54 	bl	800fa64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e5bc:	4b2d      	ldr	r3, [pc, #180]	; (800e674 <prvAddNewTaskToReadyList+0xc4>)
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	3301      	adds	r3, #1
 800e5c2:	4a2c      	ldr	r2, [pc, #176]	; (800e674 <prvAddNewTaskToReadyList+0xc4>)
 800e5c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e5c6:	4b2c      	ldr	r3, [pc, #176]	; (800e678 <prvAddNewTaskToReadyList+0xc8>)
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d109      	bne.n	800e5e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e5ce:	4a2a      	ldr	r2, [pc, #168]	; (800e678 <prvAddNewTaskToReadyList+0xc8>)
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e5d4:	4b27      	ldr	r3, [pc, #156]	; (800e674 <prvAddNewTaskToReadyList+0xc4>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	2b01      	cmp	r3, #1
 800e5da:	d110      	bne.n	800e5fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e5dc:	f000 fc26 	bl	800ee2c <prvInitialiseTaskLists>
 800e5e0:	e00d      	b.n	800e5fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e5e2:	4b26      	ldr	r3, [pc, #152]	; (800e67c <prvAddNewTaskToReadyList+0xcc>)
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d109      	bne.n	800e5fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e5ea:	4b23      	ldr	r3, [pc, #140]	; (800e678 <prvAddNewTaskToReadyList+0xc8>)
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5f4:	429a      	cmp	r2, r3
 800e5f6:	d802      	bhi.n	800e5fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e5f8:	4a1f      	ldr	r2, [pc, #124]	; (800e678 <prvAddNewTaskToReadyList+0xc8>)
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e5fe:	4b20      	ldr	r3, [pc, #128]	; (800e680 <prvAddNewTaskToReadyList+0xd0>)
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	3301      	adds	r3, #1
 800e604:	4a1e      	ldr	r2, [pc, #120]	; (800e680 <prvAddNewTaskToReadyList+0xd0>)
 800e606:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e608:	4b1d      	ldr	r3, [pc, #116]	; (800e680 <prvAddNewTaskToReadyList+0xd0>)
 800e60a:	681a      	ldr	r2, [r3, #0]
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e614:	4b1b      	ldr	r3, [pc, #108]	; (800e684 <prvAddNewTaskToReadyList+0xd4>)
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	429a      	cmp	r2, r3
 800e61a:	d903      	bls.n	800e624 <prvAddNewTaskToReadyList+0x74>
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e620:	4a18      	ldr	r2, [pc, #96]	; (800e684 <prvAddNewTaskToReadyList+0xd4>)
 800e622:	6013      	str	r3, [r2, #0]
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e628:	4613      	mov	r3, r2
 800e62a:	009b      	lsls	r3, r3, #2
 800e62c:	4413      	add	r3, r2
 800e62e:	009b      	lsls	r3, r3, #2
 800e630:	4a15      	ldr	r2, [pc, #84]	; (800e688 <prvAddNewTaskToReadyList+0xd8>)
 800e632:	441a      	add	r2, r3
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	3304      	adds	r3, #4
 800e638:	4619      	mov	r1, r3
 800e63a:	4610      	mov	r0, r2
 800e63c:	f7ff f8fd 	bl	800d83a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e640:	f001 fa40 	bl	800fac4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e644:	4b0d      	ldr	r3, [pc, #52]	; (800e67c <prvAddNewTaskToReadyList+0xcc>)
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d00e      	beq.n	800e66a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e64c:	4b0a      	ldr	r3, [pc, #40]	; (800e678 <prvAddNewTaskToReadyList+0xc8>)
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e656:	429a      	cmp	r2, r3
 800e658:	d207      	bcs.n	800e66a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e65a:	4b0c      	ldr	r3, [pc, #48]	; (800e68c <prvAddNewTaskToReadyList+0xdc>)
 800e65c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e660:	601a      	str	r2, [r3, #0]
 800e662:	f3bf 8f4f 	dsb	sy
 800e666:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e66a:	bf00      	nop
 800e66c:	3708      	adds	r7, #8
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}
 800e672:	bf00      	nop
 800e674:	20004294 	.word	0x20004294
 800e678:	20003dc0 	.word	0x20003dc0
 800e67c:	200042a0 	.word	0x200042a0
 800e680:	200042b0 	.word	0x200042b0
 800e684:	2000429c 	.word	0x2000429c
 800e688:	20003dc4 	.word	0x20003dc4
 800e68c:	e000ed04 	.word	0xe000ed04

0800e690 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e690:	b580      	push	{r7, lr}
 800e692:	b084      	sub	sp, #16
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e698:	2300      	movs	r3, #0
 800e69a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d017      	beq.n	800e6d2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e6a2:	4b13      	ldr	r3, [pc, #76]	; (800e6f0 <vTaskDelay+0x60>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d00a      	beq.n	800e6c0 <vTaskDelay+0x30>
	__asm volatile
 800e6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6ae:	f383 8811 	msr	BASEPRI, r3
 800e6b2:	f3bf 8f6f 	isb	sy
 800e6b6:	f3bf 8f4f 	dsb	sy
 800e6ba:	60bb      	str	r3, [r7, #8]
}
 800e6bc:	bf00      	nop
 800e6be:	e7fe      	b.n	800e6be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e6c0:	f000 f88a 	bl	800e7d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e6c4:	2100      	movs	r1, #0
 800e6c6:	6878      	ldr	r0, [r7, #4]
 800e6c8:	f000 fcfe 	bl	800f0c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e6cc:	f000 f892 	bl	800e7f4 <xTaskResumeAll>
 800e6d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d107      	bne.n	800e6e8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e6d8:	4b06      	ldr	r3, [pc, #24]	; (800e6f4 <vTaskDelay+0x64>)
 800e6da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6de:	601a      	str	r2, [r3, #0]
 800e6e0:	f3bf 8f4f 	dsb	sy
 800e6e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e6e8:	bf00      	nop
 800e6ea:	3710      	adds	r7, #16
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	bd80      	pop	{r7, pc}
 800e6f0:	200042bc 	.word	0x200042bc
 800e6f4:	e000ed04 	.word	0xe000ed04

0800e6f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b08a      	sub	sp, #40	; 0x28
 800e6fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e6fe:	2300      	movs	r3, #0
 800e700:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e702:	2300      	movs	r3, #0
 800e704:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e706:	463a      	mov	r2, r7
 800e708:	1d39      	adds	r1, r7, #4
 800e70a:	f107 0308 	add.w	r3, r7, #8
 800e70e:	4618      	mov	r0, r3
 800e710:	f7ff f832 	bl	800d778 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e714:	6839      	ldr	r1, [r7, #0]
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	68ba      	ldr	r2, [r7, #8]
 800e71a:	9202      	str	r2, [sp, #8]
 800e71c:	9301      	str	r3, [sp, #4]
 800e71e:	2300      	movs	r3, #0
 800e720:	9300      	str	r3, [sp, #0]
 800e722:	2300      	movs	r3, #0
 800e724:	460a      	mov	r2, r1
 800e726:	4924      	ldr	r1, [pc, #144]	; (800e7b8 <vTaskStartScheduler+0xc0>)
 800e728:	4824      	ldr	r0, [pc, #144]	; (800e7bc <vTaskStartScheduler+0xc4>)
 800e72a:	f7ff fdf9 	bl	800e320 <xTaskCreateStatic>
 800e72e:	4603      	mov	r3, r0
 800e730:	4a23      	ldr	r2, [pc, #140]	; (800e7c0 <vTaskStartScheduler+0xc8>)
 800e732:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e734:	4b22      	ldr	r3, [pc, #136]	; (800e7c0 <vTaskStartScheduler+0xc8>)
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d002      	beq.n	800e742 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e73c:	2301      	movs	r3, #1
 800e73e:	617b      	str	r3, [r7, #20]
 800e740:	e001      	b.n	800e746 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e742:	2300      	movs	r3, #0
 800e744:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e746:	697b      	ldr	r3, [r7, #20]
 800e748:	2b01      	cmp	r3, #1
 800e74a:	d102      	bne.n	800e752 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e74c:	f000 fd10 	bl	800f170 <xTimerCreateTimerTask>
 800e750:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e752:	697b      	ldr	r3, [r7, #20]
 800e754:	2b01      	cmp	r3, #1
 800e756:	d11b      	bne.n	800e790 <vTaskStartScheduler+0x98>
	__asm volatile
 800e758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e75c:	f383 8811 	msr	BASEPRI, r3
 800e760:	f3bf 8f6f 	isb	sy
 800e764:	f3bf 8f4f 	dsb	sy
 800e768:	613b      	str	r3, [r7, #16]
}
 800e76a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e76c:	4b15      	ldr	r3, [pc, #84]	; (800e7c4 <vTaskStartScheduler+0xcc>)
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	3354      	adds	r3, #84	; 0x54
 800e772:	4a15      	ldr	r2, [pc, #84]	; (800e7c8 <vTaskStartScheduler+0xd0>)
 800e774:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e776:	4b15      	ldr	r3, [pc, #84]	; (800e7cc <vTaskStartScheduler+0xd4>)
 800e778:	f04f 32ff 	mov.w	r2, #4294967295
 800e77c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e77e:	4b14      	ldr	r3, [pc, #80]	; (800e7d0 <vTaskStartScheduler+0xd8>)
 800e780:	2201      	movs	r2, #1
 800e782:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e784:	4b13      	ldr	r3, [pc, #76]	; (800e7d4 <vTaskStartScheduler+0xdc>)
 800e786:	2200      	movs	r2, #0
 800e788:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e78a:	f001 f8c9 	bl	800f920 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e78e:	e00e      	b.n	800e7ae <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e790:	697b      	ldr	r3, [r7, #20]
 800e792:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e796:	d10a      	bne.n	800e7ae <vTaskStartScheduler+0xb6>
	__asm volatile
 800e798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e79c:	f383 8811 	msr	BASEPRI, r3
 800e7a0:	f3bf 8f6f 	isb	sy
 800e7a4:	f3bf 8f4f 	dsb	sy
 800e7a8:	60fb      	str	r3, [r7, #12]
}
 800e7aa:	bf00      	nop
 800e7ac:	e7fe      	b.n	800e7ac <vTaskStartScheduler+0xb4>
}
 800e7ae:	bf00      	nop
 800e7b0:	3718      	adds	r7, #24
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	bd80      	pop	{r7, pc}
 800e7b6:	bf00      	nop
 800e7b8:	080153e4 	.word	0x080153e4
 800e7bc:	0800edfd 	.word	0x0800edfd
 800e7c0:	200042b8 	.word	0x200042b8
 800e7c4:	20003dc0 	.word	0x20003dc0
 800e7c8:	20000088 	.word	0x20000088
 800e7cc:	200042b4 	.word	0x200042b4
 800e7d0:	200042a0 	.word	0x200042a0
 800e7d4:	20004298 	.word	0x20004298

0800e7d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e7d8:	b480      	push	{r7}
 800e7da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e7dc:	4b04      	ldr	r3, [pc, #16]	; (800e7f0 <vTaskSuspendAll+0x18>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	3301      	adds	r3, #1
 800e7e2:	4a03      	ldr	r2, [pc, #12]	; (800e7f0 <vTaskSuspendAll+0x18>)
 800e7e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e7e6:	bf00      	nop
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ee:	4770      	bx	lr
 800e7f0:	200042bc 	.word	0x200042bc

0800e7f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b084      	sub	sp, #16
 800e7f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e7fe:	2300      	movs	r3, #0
 800e800:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e802:	4b42      	ldr	r3, [pc, #264]	; (800e90c <xTaskResumeAll+0x118>)
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d10a      	bne.n	800e820 <xTaskResumeAll+0x2c>
	__asm volatile
 800e80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e80e:	f383 8811 	msr	BASEPRI, r3
 800e812:	f3bf 8f6f 	isb	sy
 800e816:	f3bf 8f4f 	dsb	sy
 800e81a:	603b      	str	r3, [r7, #0]
}
 800e81c:	bf00      	nop
 800e81e:	e7fe      	b.n	800e81e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e820:	f001 f920 	bl	800fa64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e824:	4b39      	ldr	r3, [pc, #228]	; (800e90c <xTaskResumeAll+0x118>)
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	3b01      	subs	r3, #1
 800e82a:	4a38      	ldr	r2, [pc, #224]	; (800e90c <xTaskResumeAll+0x118>)
 800e82c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e82e:	4b37      	ldr	r3, [pc, #220]	; (800e90c <xTaskResumeAll+0x118>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d162      	bne.n	800e8fc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e836:	4b36      	ldr	r3, [pc, #216]	; (800e910 <xTaskResumeAll+0x11c>)
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d05e      	beq.n	800e8fc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e83e:	e02f      	b.n	800e8a0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e840:	4b34      	ldr	r3, [pc, #208]	; (800e914 <xTaskResumeAll+0x120>)
 800e842:	68db      	ldr	r3, [r3, #12]
 800e844:	68db      	ldr	r3, [r3, #12]
 800e846:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	3318      	adds	r3, #24
 800e84c:	4618      	mov	r0, r3
 800e84e:	f7ff f851 	bl	800d8f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	3304      	adds	r3, #4
 800e856:	4618      	mov	r0, r3
 800e858:	f7ff f84c 	bl	800d8f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e860:	4b2d      	ldr	r3, [pc, #180]	; (800e918 <xTaskResumeAll+0x124>)
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	429a      	cmp	r2, r3
 800e866:	d903      	bls.n	800e870 <xTaskResumeAll+0x7c>
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e86c:	4a2a      	ldr	r2, [pc, #168]	; (800e918 <xTaskResumeAll+0x124>)
 800e86e:	6013      	str	r3, [r2, #0]
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e874:	4613      	mov	r3, r2
 800e876:	009b      	lsls	r3, r3, #2
 800e878:	4413      	add	r3, r2
 800e87a:	009b      	lsls	r3, r3, #2
 800e87c:	4a27      	ldr	r2, [pc, #156]	; (800e91c <xTaskResumeAll+0x128>)
 800e87e:	441a      	add	r2, r3
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	3304      	adds	r3, #4
 800e884:	4619      	mov	r1, r3
 800e886:	4610      	mov	r0, r2
 800e888:	f7fe ffd7 	bl	800d83a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e890:	4b23      	ldr	r3, [pc, #140]	; (800e920 <xTaskResumeAll+0x12c>)
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e896:	429a      	cmp	r2, r3
 800e898:	d302      	bcc.n	800e8a0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e89a:	4b22      	ldr	r3, [pc, #136]	; (800e924 <xTaskResumeAll+0x130>)
 800e89c:	2201      	movs	r2, #1
 800e89e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e8a0:	4b1c      	ldr	r3, [pc, #112]	; (800e914 <xTaskResumeAll+0x120>)
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d1cb      	bne.n	800e840 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d001      	beq.n	800e8b2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e8ae:	f000 fb5f 	bl	800ef70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e8b2:	4b1d      	ldr	r3, [pc, #116]	; (800e928 <xTaskResumeAll+0x134>)
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d010      	beq.n	800e8e0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e8be:	f000 f847 	bl	800e950 <xTaskIncrementTick>
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d002      	beq.n	800e8ce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e8c8:	4b16      	ldr	r3, [pc, #88]	; (800e924 <xTaskResumeAll+0x130>)
 800e8ca:	2201      	movs	r2, #1
 800e8cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	3b01      	subs	r3, #1
 800e8d2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d1f1      	bne.n	800e8be <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e8da:	4b13      	ldr	r3, [pc, #76]	; (800e928 <xTaskResumeAll+0x134>)
 800e8dc:	2200      	movs	r2, #0
 800e8de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e8e0:	4b10      	ldr	r3, [pc, #64]	; (800e924 <xTaskResumeAll+0x130>)
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d009      	beq.n	800e8fc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e8e8:	2301      	movs	r3, #1
 800e8ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e8ec:	4b0f      	ldr	r3, [pc, #60]	; (800e92c <xTaskResumeAll+0x138>)
 800e8ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8f2:	601a      	str	r2, [r3, #0]
 800e8f4:	f3bf 8f4f 	dsb	sy
 800e8f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e8fc:	f001 f8e2 	bl	800fac4 <vPortExitCritical>

	return xAlreadyYielded;
 800e900:	68bb      	ldr	r3, [r7, #8]
}
 800e902:	4618      	mov	r0, r3
 800e904:	3710      	adds	r7, #16
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}
 800e90a:	bf00      	nop
 800e90c:	200042bc 	.word	0x200042bc
 800e910:	20004294 	.word	0x20004294
 800e914:	20004254 	.word	0x20004254
 800e918:	2000429c 	.word	0x2000429c
 800e91c:	20003dc4 	.word	0x20003dc4
 800e920:	20003dc0 	.word	0x20003dc0
 800e924:	200042a8 	.word	0x200042a8
 800e928:	200042a4 	.word	0x200042a4
 800e92c:	e000ed04 	.word	0xe000ed04

0800e930 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e930:	b480      	push	{r7}
 800e932:	b083      	sub	sp, #12
 800e934:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e936:	4b05      	ldr	r3, [pc, #20]	; (800e94c <xTaskGetTickCount+0x1c>)
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e93c:	687b      	ldr	r3, [r7, #4]
}
 800e93e:	4618      	mov	r0, r3
 800e940:	370c      	adds	r7, #12
 800e942:	46bd      	mov	sp, r7
 800e944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e948:	4770      	bx	lr
 800e94a:	bf00      	nop
 800e94c:	20004298 	.word	0x20004298

0800e950 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b086      	sub	sp, #24
 800e954:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e956:	2300      	movs	r3, #0
 800e958:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e95a:	4b4f      	ldr	r3, [pc, #316]	; (800ea98 <xTaskIncrementTick+0x148>)
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	f040 808f 	bne.w	800ea82 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e964:	4b4d      	ldr	r3, [pc, #308]	; (800ea9c <xTaskIncrementTick+0x14c>)
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	3301      	adds	r3, #1
 800e96a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e96c:	4a4b      	ldr	r2, [pc, #300]	; (800ea9c <xTaskIncrementTick+0x14c>)
 800e96e:	693b      	ldr	r3, [r7, #16]
 800e970:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e972:	693b      	ldr	r3, [r7, #16]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d120      	bne.n	800e9ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e978:	4b49      	ldr	r3, [pc, #292]	; (800eaa0 <xTaskIncrementTick+0x150>)
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d00a      	beq.n	800e998 <xTaskIncrementTick+0x48>
	__asm volatile
 800e982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e986:	f383 8811 	msr	BASEPRI, r3
 800e98a:	f3bf 8f6f 	isb	sy
 800e98e:	f3bf 8f4f 	dsb	sy
 800e992:	603b      	str	r3, [r7, #0]
}
 800e994:	bf00      	nop
 800e996:	e7fe      	b.n	800e996 <xTaskIncrementTick+0x46>
 800e998:	4b41      	ldr	r3, [pc, #260]	; (800eaa0 <xTaskIncrementTick+0x150>)
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	60fb      	str	r3, [r7, #12]
 800e99e:	4b41      	ldr	r3, [pc, #260]	; (800eaa4 <xTaskIncrementTick+0x154>)
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	4a3f      	ldr	r2, [pc, #252]	; (800eaa0 <xTaskIncrementTick+0x150>)
 800e9a4:	6013      	str	r3, [r2, #0]
 800e9a6:	4a3f      	ldr	r2, [pc, #252]	; (800eaa4 <xTaskIncrementTick+0x154>)
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	6013      	str	r3, [r2, #0]
 800e9ac:	4b3e      	ldr	r3, [pc, #248]	; (800eaa8 <xTaskIncrementTick+0x158>)
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	3301      	adds	r3, #1
 800e9b2:	4a3d      	ldr	r2, [pc, #244]	; (800eaa8 <xTaskIncrementTick+0x158>)
 800e9b4:	6013      	str	r3, [r2, #0]
 800e9b6:	f000 fadb 	bl	800ef70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e9ba:	4b3c      	ldr	r3, [pc, #240]	; (800eaac <xTaskIncrementTick+0x15c>)
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	693a      	ldr	r2, [r7, #16]
 800e9c0:	429a      	cmp	r2, r3
 800e9c2:	d349      	bcc.n	800ea58 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e9c4:	4b36      	ldr	r3, [pc, #216]	; (800eaa0 <xTaskIncrementTick+0x150>)
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d104      	bne.n	800e9d8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e9ce:	4b37      	ldr	r3, [pc, #220]	; (800eaac <xTaskIncrementTick+0x15c>)
 800e9d0:	f04f 32ff 	mov.w	r2, #4294967295
 800e9d4:	601a      	str	r2, [r3, #0]
					break;
 800e9d6:	e03f      	b.n	800ea58 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9d8:	4b31      	ldr	r3, [pc, #196]	; (800eaa0 <xTaskIncrementTick+0x150>)
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	68db      	ldr	r3, [r3, #12]
 800e9de:	68db      	ldr	r3, [r3, #12]
 800e9e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e9e2:	68bb      	ldr	r3, [r7, #8]
 800e9e4:	685b      	ldr	r3, [r3, #4]
 800e9e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e9e8:	693a      	ldr	r2, [r7, #16]
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	429a      	cmp	r2, r3
 800e9ee:	d203      	bcs.n	800e9f8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e9f0:	4a2e      	ldr	r2, [pc, #184]	; (800eaac <xTaskIncrementTick+0x15c>)
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e9f6:	e02f      	b.n	800ea58 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e9f8:	68bb      	ldr	r3, [r7, #8]
 800e9fa:	3304      	adds	r3, #4
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	f7fe ff79 	bl	800d8f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ea02:	68bb      	ldr	r3, [r7, #8]
 800ea04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d004      	beq.n	800ea14 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ea0a:	68bb      	ldr	r3, [r7, #8]
 800ea0c:	3318      	adds	r3, #24
 800ea0e:	4618      	mov	r0, r3
 800ea10:	f7fe ff70 	bl	800d8f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ea14:	68bb      	ldr	r3, [r7, #8]
 800ea16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea18:	4b25      	ldr	r3, [pc, #148]	; (800eab0 <xTaskIncrementTick+0x160>)
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	429a      	cmp	r2, r3
 800ea1e:	d903      	bls.n	800ea28 <xTaskIncrementTick+0xd8>
 800ea20:	68bb      	ldr	r3, [r7, #8]
 800ea22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea24:	4a22      	ldr	r2, [pc, #136]	; (800eab0 <xTaskIncrementTick+0x160>)
 800ea26:	6013      	str	r3, [r2, #0]
 800ea28:	68bb      	ldr	r3, [r7, #8]
 800ea2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea2c:	4613      	mov	r3, r2
 800ea2e:	009b      	lsls	r3, r3, #2
 800ea30:	4413      	add	r3, r2
 800ea32:	009b      	lsls	r3, r3, #2
 800ea34:	4a1f      	ldr	r2, [pc, #124]	; (800eab4 <xTaskIncrementTick+0x164>)
 800ea36:	441a      	add	r2, r3
 800ea38:	68bb      	ldr	r3, [r7, #8]
 800ea3a:	3304      	adds	r3, #4
 800ea3c:	4619      	mov	r1, r3
 800ea3e:	4610      	mov	r0, r2
 800ea40:	f7fe fefb 	bl	800d83a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ea44:	68bb      	ldr	r3, [r7, #8]
 800ea46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea48:	4b1b      	ldr	r3, [pc, #108]	; (800eab8 <xTaskIncrementTick+0x168>)
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea4e:	429a      	cmp	r2, r3
 800ea50:	d3b8      	bcc.n	800e9c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ea52:	2301      	movs	r3, #1
 800ea54:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ea56:	e7b5      	b.n	800e9c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ea58:	4b17      	ldr	r3, [pc, #92]	; (800eab8 <xTaskIncrementTick+0x168>)
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea5e:	4915      	ldr	r1, [pc, #84]	; (800eab4 <xTaskIncrementTick+0x164>)
 800ea60:	4613      	mov	r3, r2
 800ea62:	009b      	lsls	r3, r3, #2
 800ea64:	4413      	add	r3, r2
 800ea66:	009b      	lsls	r3, r3, #2
 800ea68:	440b      	add	r3, r1
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	2b01      	cmp	r3, #1
 800ea6e:	d901      	bls.n	800ea74 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ea70:	2301      	movs	r3, #1
 800ea72:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ea74:	4b11      	ldr	r3, [pc, #68]	; (800eabc <xTaskIncrementTick+0x16c>)
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d007      	beq.n	800ea8c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	617b      	str	r3, [r7, #20]
 800ea80:	e004      	b.n	800ea8c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ea82:	4b0f      	ldr	r3, [pc, #60]	; (800eac0 <xTaskIncrementTick+0x170>)
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	3301      	adds	r3, #1
 800ea88:	4a0d      	ldr	r2, [pc, #52]	; (800eac0 <xTaskIncrementTick+0x170>)
 800ea8a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ea8c:	697b      	ldr	r3, [r7, #20]
}
 800ea8e:	4618      	mov	r0, r3
 800ea90:	3718      	adds	r7, #24
 800ea92:	46bd      	mov	sp, r7
 800ea94:	bd80      	pop	{r7, pc}
 800ea96:	bf00      	nop
 800ea98:	200042bc 	.word	0x200042bc
 800ea9c:	20004298 	.word	0x20004298
 800eaa0:	2000424c 	.word	0x2000424c
 800eaa4:	20004250 	.word	0x20004250
 800eaa8:	200042ac 	.word	0x200042ac
 800eaac:	200042b4 	.word	0x200042b4
 800eab0:	2000429c 	.word	0x2000429c
 800eab4:	20003dc4 	.word	0x20003dc4
 800eab8:	20003dc0 	.word	0x20003dc0
 800eabc:	200042a8 	.word	0x200042a8
 800eac0:	200042a4 	.word	0x200042a4

0800eac4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800eac4:	b480      	push	{r7}
 800eac6:	b085      	sub	sp, #20
 800eac8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800eaca:	4b2a      	ldr	r3, [pc, #168]	; (800eb74 <vTaskSwitchContext+0xb0>)
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d003      	beq.n	800eada <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ead2:	4b29      	ldr	r3, [pc, #164]	; (800eb78 <vTaskSwitchContext+0xb4>)
 800ead4:	2201      	movs	r2, #1
 800ead6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ead8:	e046      	b.n	800eb68 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800eada:	4b27      	ldr	r3, [pc, #156]	; (800eb78 <vTaskSwitchContext+0xb4>)
 800eadc:	2200      	movs	r2, #0
 800eade:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eae0:	4b26      	ldr	r3, [pc, #152]	; (800eb7c <vTaskSwitchContext+0xb8>)
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	60fb      	str	r3, [r7, #12]
 800eae6:	e010      	b.n	800eb0a <vTaskSwitchContext+0x46>
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d10a      	bne.n	800eb04 <vTaskSwitchContext+0x40>
	__asm volatile
 800eaee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaf2:	f383 8811 	msr	BASEPRI, r3
 800eaf6:	f3bf 8f6f 	isb	sy
 800eafa:	f3bf 8f4f 	dsb	sy
 800eafe:	607b      	str	r3, [r7, #4]
}
 800eb00:	bf00      	nop
 800eb02:	e7fe      	b.n	800eb02 <vTaskSwitchContext+0x3e>
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	3b01      	subs	r3, #1
 800eb08:	60fb      	str	r3, [r7, #12]
 800eb0a:	491d      	ldr	r1, [pc, #116]	; (800eb80 <vTaskSwitchContext+0xbc>)
 800eb0c:	68fa      	ldr	r2, [r7, #12]
 800eb0e:	4613      	mov	r3, r2
 800eb10:	009b      	lsls	r3, r3, #2
 800eb12:	4413      	add	r3, r2
 800eb14:	009b      	lsls	r3, r3, #2
 800eb16:	440b      	add	r3, r1
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d0e4      	beq.n	800eae8 <vTaskSwitchContext+0x24>
 800eb1e:	68fa      	ldr	r2, [r7, #12]
 800eb20:	4613      	mov	r3, r2
 800eb22:	009b      	lsls	r3, r3, #2
 800eb24:	4413      	add	r3, r2
 800eb26:	009b      	lsls	r3, r3, #2
 800eb28:	4a15      	ldr	r2, [pc, #84]	; (800eb80 <vTaskSwitchContext+0xbc>)
 800eb2a:	4413      	add	r3, r2
 800eb2c:	60bb      	str	r3, [r7, #8]
 800eb2e:	68bb      	ldr	r3, [r7, #8]
 800eb30:	685b      	ldr	r3, [r3, #4]
 800eb32:	685a      	ldr	r2, [r3, #4]
 800eb34:	68bb      	ldr	r3, [r7, #8]
 800eb36:	605a      	str	r2, [r3, #4]
 800eb38:	68bb      	ldr	r3, [r7, #8]
 800eb3a:	685a      	ldr	r2, [r3, #4]
 800eb3c:	68bb      	ldr	r3, [r7, #8]
 800eb3e:	3308      	adds	r3, #8
 800eb40:	429a      	cmp	r2, r3
 800eb42:	d104      	bne.n	800eb4e <vTaskSwitchContext+0x8a>
 800eb44:	68bb      	ldr	r3, [r7, #8]
 800eb46:	685b      	ldr	r3, [r3, #4]
 800eb48:	685a      	ldr	r2, [r3, #4]
 800eb4a:	68bb      	ldr	r3, [r7, #8]
 800eb4c:	605a      	str	r2, [r3, #4]
 800eb4e:	68bb      	ldr	r3, [r7, #8]
 800eb50:	685b      	ldr	r3, [r3, #4]
 800eb52:	68db      	ldr	r3, [r3, #12]
 800eb54:	4a0b      	ldr	r2, [pc, #44]	; (800eb84 <vTaskSwitchContext+0xc0>)
 800eb56:	6013      	str	r3, [r2, #0]
 800eb58:	4a08      	ldr	r2, [pc, #32]	; (800eb7c <vTaskSwitchContext+0xb8>)
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800eb5e:	4b09      	ldr	r3, [pc, #36]	; (800eb84 <vTaskSwitchContext+0xc0>)
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	3354      	adds	r3, #84	; 0x54
 800eb64:	4a08      	ldr	r2, [pc, #32]	; (800eb88 <vTaskSwitchContext+0xc4>)
 800eb66:	6013      	str	r3, [r2, #0]
}
 800eb68:	bf00      	nop
 800eb6a:	3714      	adds	r7, #20
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb72:	4770      	bx	lr
 800eb74:	200042bc 	.word	0x200042bc
 800eb78:	200042a8 	.word	0x200042a8
 800eb7c:	2000429c 	.word	0x2000429c
 800eb80:	20003dc4 	.word	0x20003dc4
 800eb84:	20003dc0 	.word	0x20003dc0
 800eb88:	20000088 	.word	0x20000088

0800eb8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b084      	sub	sp, #16
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
 800eb94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d10a      	bne.n	800ebb2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800eb9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eba0:	f383 8811 	msr	BASEPRI, r3
 800eba4:	f3bf 8f6f 	isb	sy
 800eba8:	f3bf 8f4f 	dsb	sy
 800ebac:	60fb      	str	r3, [r7, #12]
}
 800ebae:	bf00      	nop
 800ebb0:	e7fe      	b.n	800ebb0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ebb2:	4b07      	ldr	r3, [pc, #28]	; (800ebd0 <vTaskPlaceOnEventList+0x44>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	3318      	adds	r3, #24
 800ebb8:	4619      	mov	r1, r3
 800ebba:	6878      	ldr	r0, [r7, #4]
 800ebbc:	f7fe fe61 	bl	800d882 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ebc0:	2101      	movs	r1, #1
 800ebc2:	6838      	ldr	r0, [r7, #0]
 800ebc4:	f000 fa80 	bl	800f0c8 <prvAddCurrentTaskToDelayedList>
}
 800ebc8:	bf00      	nop
 800ebca:	3710      	adds	r7, #16
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	bd80      	pop	{r7, pc}
 800ebd0:	20003dc0 	.word	0x20003dc0

0800ebd4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b086      	sub	sp, #24
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	60f8      	str	r0, [r7, #12]
 800ebdc:	60b9      	str	r1, [r7, #8]
 800ebde:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d10a      	bne.n	800ebfc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ebe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebea:	f383 8811 	msr	BASEPRI, r3
 800ebee:	f3bf 8f6f 	isb	sy
 800ebf2:	f3bf 8f4f 	dsb	sy
 800ebf6:	617b      	str	r3, [r7, #20]
}
 800ebf8:	bf00      	nop
 800ebfa:	e7fe      	b.n	800ebfa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ebfc:	4b0a      	ldr	r3, [pc, #40]	; (800ec28 <vTaskPlaceOnEventListRestricted+0x54>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	3318      	adds	r3, #24
 800ec02:	4619      	mov	r1, r3
 800ec04:	68f8      	ldr	r0, [r7, #12]
 800ec06:	f7fe fe18 	bl	800d83a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d002      	beq.n	800ec16 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ec10:	f04f 33ff 	mov.w	r3, #4294967295
 800ec14:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ec16:	6879      	ldr	r1, [r7, #4]
 800ec18:	68b8      	ldr	r0, [r7, #8]
 800ec1a:	f000 fa55 	bl	800f0c8 <prvAddCurrentTaskToDelayedList>
	}
 800ec1e:	bf00      	nop
 800ec20:	3718      	adds	r7, #24
 800ec22:	46bd      	mov	sp, r7
 800ec24:	bd80      	pop	{r7, pc}
 800ec26:	bf00      	nop
 800ec28:	20003dc0 	.word	0x20003dc0

0800ec2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b086      	sub	sp, #24
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	68db      	ldr	r3, [r3, #12]
 800ec38:	68db      	ldr	r3, [r3, #12]
 800ec3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ec3c:	693b      	ldr	r3, [r7, #16]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d10a      	bne.n	800ec58 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ec42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec46:	f383 8811 	msr	BASEPRI, r3
 800ec4a:	f3bf 8f6f 	isb	sy
 800ec4e:	f3bf 8f4f 	dsb	sy
 800ec52:	60fb      	str	r3, [r7, #12]
}
 800ec54:	bf00      	nop
 800ec56:	e7fe      	b.n	800ec56 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ec58:	693b      	ldr	r3, [r7, #16]
 800ec5a:	3318      	adds	r3, #24
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	f7fe fe49 	bl	800d8f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec62:	4b1e      	ldr	r3, [pc, #120]	; (800ecdc <xTaskRemoveFromEventList+0xb0>)
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d11d      	bne.n	800eca6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ec6a:	693b      	ldr	r3, [r7, #16]
 800ec6c:	3304      	adds	r3, #4
 800ec6e:	4618      	mov	r0, r3
 800ec70:	f7fe fe40 	bl	800d8f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ec74:	693b      	ldr	r3, [r7, #16]
 800ec76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec78:	4b19      	ldr	r3, [pc, #100]	; (800ece0 <xTaskRemoveFromEventList+0xb4>)
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	429a      	cmp	r2, r3
 800ec7e:	d903      	bls.n	800ec88 <xTaskRemoveFromEventList+0x5c>
 800ec80:	693b      	ldr	r3, [r7, #16]
 800ec82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec84:	4a16      	ldr	r2, [pc, #88]	; (800ece0 <xTaskRemoveFromEventList+0xb4>)
 800ec86:	6013      	str	r3, [r2, #0]
 800ec88:	693b      	ldr	r3, [r7, #16]
 800ec8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec8c:	4613      	mov	r3, r2
 800ec8e:	009b      	lsls	r3, r3, #2
 800ec90:	4413      	add	r3, r2
 800ec92:	009b      	lsls	r3, r3, #2
 800ec94:	4a13      	ldr	r2, [pc, #76]	; (800ece4 <xTaskRemoveFromEventList+0xb8>)
 800ec96:	441a      	add	r2, r3
 800ec98:	693b      	ldr	r3, [r7, #16]
 800ec9a:	3304      	adds	r3, #4
 800ec9c:	4619      	mov	r1, r3
 800ec9e:	4610      	mov	r0, r2
 800eca0:	f7fe fdcb 	bl	800d83a <vListInsertEnd>
 800eca4:	e005      	b.n	800ecb2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800eca6:	693b      	ldr	r3, [r7, #16]
 800eca8:	3318      	adds	r3, #24
 800ecaa:	4619      	mov	r1, r3
 800ecac:	480e      	ldr	r0, [pc, #56]	; (800ece8 <xTaskRemoveFromEventList+0xbc>)
 800ecae:	f7fe fdc4 	bl	800d83a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ecb2:	693b      	ldr	r3, [r7, #16]
 800ecb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecb6:	4b0d      	ldr	r3, [pc, #52]	; (800ecec <xTaskRemoveFromEventList+0xc0>)
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecbc:	429a      	cmp	r2, r3
 800ecbe:	d905      	bls.n	800eccc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ecc0:	2301      	movs	r3, #1
 800ecc2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ecc4:	4b0a      	ldr	r3, [pc, #40]	; (800ecf0 <xTaskRemoveFromEventList+0xc4>)
 800ecc6:	2201      	movs	r2, #1
 800ecc8:	601a      	str	r2, [r3, #0]
 800ecca:	e001      	b.n	800ecd0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800eccc:	2300      	movs	r3, #0
 800ecce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ecd0:	697b      	ldr	r3, [r7, #20]
}
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	3718      	adds	r7, #24
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}
 800ecda:	bf00      	nop
 800ecdc:	200042bc 	.word	0x200042bc
 800ece0:	2000429c 	.word	0x2000429c
 800ece4:	20003dc4 	.word	0x20003dc4
 800ece8:	20004254 	.word	0x20004254
 800ecec:	20003dc0 	.word	0x20003dc0
 800ecf0:	200042a8 	.word	0x200042a8

0800ecf4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ecf4:	b480      	push	{r7}
 800ecf6:	b083      	sub	sp, #12
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ecfc:	4b06      	ldr	r3, [pc, #24]	; (800ed18 <vTaskInternalSetTimeOutState+0x24>)
 800ecfe:	681a      	ldr	r2, [r3, #0]
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ed04:	4b05      	ldr	r3, [pc, #20]	; (800ed1c <vTaskInternalSetTimeOutState+0x28>)
 800ed06:	681a      	ldr	r2, [r3, #0]
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	605a      	str	r2, [r3, #4]
}
 800ed0c:	bf00      	nop
 800ed0e:	370c      	adds	r7, #12
 800ed10:	46bd      	mov	sp, r7
 800ed12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed16:	4770      	bx	lr
 800ed18:	200042ac 	.word	0x200042ac
 800ed1c:	20004298 	.word	0x20004298

0800ed20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b088      	sub	sp, #32
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
 800ed28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d10a      	bne.n	800ed46 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ed30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed34:	f383 8811 	msr	BASEPRI, r3
 800ed38:	f3bf 8f6f 	isb	sy
 800ed3c:	f3bf 8f4f 	dsb	sy
 800ed40:	613b      	str	r3, [r7, #16]
}
 800ed42:	bf00      	nop
 800ed44:	e7fe      	b.n	800ed44 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ed46:	683b      	ldr	r3, [r7, #0]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d10a      	bne.n	800ed62 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ed4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed50:	f383 8811 	msr	BASEPRI, r3
 800ed54:	f3bf 8f6f 	isb	sy
 800ed58:	f3bf 8f4f 	dsb	sy
 800ed5c:	60fb      	str	r3, [r7, #12]
}
 800ed5e:	bf00      	nop
 800ed60:	e7fe      	b.n	800ed60 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ed62:	f000 fe7f 	bl	800fa64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ed66:	4b1d      	ldr	r3, [pc, #116]	; (800eddc <xTaskCheckForTimeOut+0xbc>)
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	685b      	ldr	r3, [r3, #4]
 800ed70:	69ba      	ldr	r2, [r7, #24]
 800ed72:	1ad3      	subs	r3, r2, r3
 800ed74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ed76:	683b      	ldr	r3, [r7, #0]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed7e:	d102      	bne.n	800ed86 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ed80:	2300      	movs	r3, #0
 800ed82:	61fb      	str	r3, [r7, #28]
 800ed84:	e023      	b.n	800edce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681a      	ldr	r2, [r3, #0]
 800ed8a:	4b15      	ldr	r3, [pc, #84]	; (800ede0 <xTaskCheckForTimeOut+0xc0>)
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	429a      	cmp	r2, r3
 800ed90:	d007      	beq.n	800eda2 <xTaskCheckForTimeOut+0x82>
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	685b      	ldr	r3, [r3, #4]
 800ed96:	69ba      	ldr	r2, [r7, #24]
 800ed98:	429a      	cmp	r2, r3
 800ed9a:	d302      	bcc.n	800eda2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ed9c:	2301      	movs	r3, #1
 800ed9e:	61fb      	str	r3, [r7, #28]
 800eda0:	e015      	b.n	800edce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800eda2:	683b      	ldr	r3, [r7, #0]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	697a      	ldr	r2, [r7, #20]
 800eda8:	429a      	cmp	r2, r3
 800edaa:	d20b      	bcs.n	800edc4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800edac:	683b      	ldr	r3, [r7, #0]
 800edae:	681a      	ldr	r2, [r3, #0]
 800edb0:	697b      	ldr	r3, [r7, #20]
 800edb2:	1ad2      	subs	r2, r2, r3
 800edb4:	683b      	ldr	r3, [r7, #0]
 800edb6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800edb8:	6878      	ldr	r0, [r7, #4]
 800edba:	f7ff ff9b 	bl	800ecf4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800edbe:	2300      	movs	r3, #0
 800edc0:	61fb      	str	r3, [r7, #28]
 800edc2:	e004      	b.n	800edce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	2200      	movs	r2, #0
 800edc8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800edca:	2301      	movs	r3, #1
 800edcc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800edce:	f000 fe79 	bl	800fac4 <vPortExitCritical>

	return xReturn;
 800edd2:	69fb      	ldr	r3, [r7, #28]
}
 800edd4:	4618      	mov	r0, r3
 800edd6:	3720      	adds	r7, #32
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd80      	pop	{r7, pc}
 800eddc:	20004298 	.word	0x20004298
 800ede0:	200042ac 	.word	0x200042ac

0800ede4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ede4:	b480      	push	{r7}
 800ede6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ede8:	4b03      	ldr	r3, [pc, #12]	; (800edf8 <vTaskMissedYield+0x14>)
 800edea:	2201      	movs	r2, #1
 800edec:	601a      	str	r2, [r3, #0]
}
 800edee:	bf00      	nop
 800edf0:	46bd      	mov	sp, r7
 800edf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf6:	4770      	bx	lr
 800edf8:	200042a8 	.word	0x200042a8

0800edfc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b082      	sub	sp, #8
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ee04:	f000 f852 	bl	800eeac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ee08:	4b06      	ldr	r3, [pc, #24]	; (800ee24 <prvIdleTask+0x28>)
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	2b01      	cmp	r3, #1
 800ee0e:	d9f9      	bls.n	800ee04 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ee10:	4b05      	ldr	r3, [pc, #20]	; (800ee28 <prvIdleTask+0x2c>)
 800ee12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee16:	601a      	str	r2, [r3, #0]
 800ee18:	f3bf 8f4f 	dsb	sy
 800ee1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ee20:	e7f0      	b.n	800ee04 <prvIdleTask+0x8>
 800ee22:	bf00      	nop
 800ee24:	20003dc4 	.word	0x20003dc4
 800ee28:	e000ed04 	.word	0xe000ed04

0800ee2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b082      	sub	sp, #8
 800ee30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ee32:	2300      	movs	r3, #0
 800ee34:	607b      	str	r3, [r7, #4]
 800ee36:	e00c      	b.n	800ee52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ee38:	687a      	ldr	r2, [r7, #4]
 800ee3a:	4613      	mov	r3, r2
 800ee3c:	009b      	lsls	r3, r3, #2
 800ee3e:	4413      	add	r3, r2
 800ee40:	009b      	lsls	r3, r3, #2
 800ee42:	4a12      	ldr	r2, [pc, #72]	; (800ee8c <prvInitialiseTaskLists+0x60>)
 800ee44:	4413      	add	r3, r2
 800ee46:	4618      	mov	r0, r3
 800ee48:	f7fe fcca 	bl	800d7e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	3301      	adds	r3, #1
 800ee50:	607b      	str	r3, [r7, #4]
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	2b37      	cmp	r3, #55	; 0x37
 800ee56:	d9ef      	bls.n	800ee38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ee58:	480d      	ldr	r0, [pc, #52]	; (800ee90 <prvInitialiseTaskLists+0x64>)
 800ee5a:	f7fe fcc1 	bl	800d7e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ee5e:	480d      	ldr	r0, [pc, #52]	; (800ee94 <prvInitialiseTaskLists+0x68>)
 800ee60:	f7fe fcbe 	bl	800d7e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ee64:	480c      	ldr	r0, [pc, #48]	; (800ee98 <prvInitialiseTaskLists+0x6c>)
 800ee66:	f7fe fcbb 	bl	800d7e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ee6a:	480c      	ldr	r0, [pc, #48]	; (800ee9c <prvInitialiseTaskLists+0x70>)
 800ee6c:	f7fe fcb8 	bl	800d7e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ee70:	480b      	ldr	r0, [pc, #44]	; (800eea0 <prvInitialiseTaskLists+0x74>)
 800ee72:	f7fe fcb5 	bl	800d7e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ee76:	4b0b      	ldr	r3, [pc, #44]	; (800eea4 <prvInitialiseTaskLists+0x78>)
 800ee78:	4a05      	ldr	r2, [pc, #20]	; (800ee90 <prvInitialiseTaskLists+0x64>)
 800ee7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ee7c:	4b0a      	ldr	r3, [pc, #40]	; (800eea8 <prvInitialiseTaskLists+0x7c>)
 800ee7e:	4a05      	ldr	r2, [pc, #20]	; (800ee94 <prvInitialiseTaskLists+0x68>)
 800ee80:	601a      	str	r2, [r3, #0]
}
 800ee82:	bf00      	nop
 800ee84:	3708      	adds	r7, #8
 800ee86:	46bd      	mov	sp, r7
 800ee88:	bd80      	pop	{r7, pc}
 800ee8a:	bf00      	nop
 800ee8c:	20003dc4 	.word	0x20003dc4
 800ee90:	20004224 	.word	0x20004224
 800ee94:	20004238 	.word	0x20004238
 800ee98:	20004254 	.word	0x20004254
 800ee9c:	20004268 	.word	0x20004268
 800eea0:	20004280 	.word	0x20004280
 800eea4:	2000424c 	.word	0x2000424c
 800eea8:	20004250 	.word	0x20004250

0800eeac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b082      	sub	sp, #8
 800eeb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eeb2:	e019      	b.n	800eee8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800eeb4:	f000 fdd6 	bl	800fa64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eeb8:	4b10      	ldr	r3, [pc, #64]	; (800eefc <prvCheckTasksWaitingTermination+0x50>)
 800eeba:	68db      	ldr	r3, [r3, #12]
 800eebc:	68db      	ldr	r3, [r3, #12]
 800eebe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	3304      	adds	r3, #4
 800eec4:	4618      	mov	r0, r3
 800eec6:	f7fe fd15 	bl	800d8f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800eeca:	4b0d      	ldr	r3, [pc, #52]	; (800ef00 <prvCheckTasksWaitingTermination+0x54>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	3b01      	subs	r3, #1
 800eed0:	4a0b      	ldr	r2, [pc, #44]	; (800ef00 <prvCheckTasksWaitingTermination+0x54>)
 800eed2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800eed4:	4b0b      	ldr	r3, [pc, #44]	; (800ef04 <prvCheckTasksWaitingTermination+0x58>)
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	3b01      	subs	r3, #1
 800eeda:	4a0a      	ldr	r2, [pc, #40]	; (800ef04 <prvCheckTasksWaitingTermination+0x58>)
 800eedc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800eede:	f000 fdf1 	bl	800fac4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800eee2:	6878      	ldr	r0, [r7, #4]
 800eee4:	f000 f810 	bl	800ef08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eee8:	4b06      	ldr	r3, [pc, #24]	; (800ef04 <prvCheckTasksWaitingTermination+0x58>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d1e1      	bne.n	800eeb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800eef0:	bf00      	nop
 800eef2:	bf00      	nop
 800eef4:	3708      	adds	r7, #8
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bd80      	pop	{r7, pc}
 800eefa:	bf00      	nop
 800eefc:	20004268 	.word	0x20004268
 800ef00:	20004294 	.word	0x20004294
 800ef04:	2000427c 	.word	0x2000427c

0800ef08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b084      	sub	sp, #16
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	3354      	adds	r3, #84	; 0x54
 800ef14:	4618      	mov	r0, r3
 800ef16:	f003 ff09 	bl	8012d2c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d108      	bne.n	800ef36 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef28:	4618      	mov	r0, r3
 800ef2a:	f000 ff89 	bl	800fe40 <vPortFree>
				vPortFree( pxTCB );
 800ef2e:	6878      	ldr	r0, [r7, #4]
 800ef30:	f000 ff86 	bl	800fe40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ef34:	e018      	b.n	800ef68 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800ef3c:	2b01      	cmp	r3, #1
 800ef3e:	d103      	bne.n	800ef48 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ef40:	6878      	ldr	r0, [r7, #4]
 800ef42:	f000 ff7d 	bl	800fe40 <vPortFree>
	}
 800ef46:	e00f      	b.n	800ef68 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800ef4e:	2b02      	cmp	r3, #2
 800ef50:	d00a      	beq.n	800ef68 <prvDeleteTCB+0x60>
	__asm volatile
 800ef52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef56:	f383 8811 	msr	BASEPRI, r3
 800ef5a:	f3bf 8f6f 	isb	sy
 800ef5e:	f3bf 8f4f 	dsb	sy
 800ef62:	60fb      	str	r3, [r7, #12]
}
 800ef64:	bf00      	nop
 800ef66:	e7fe      	b.n	800ef66 <prvDeleteTCB+0x5e>
	}
 800ef68:	bf00      	nop
 800ef6a:	3710      	adds	r7, #16
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bd80      	pop	{r7, pc}

0800ef70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ef70:	b480      	push	{r7}
 800ef72:	b083      	sub	sp, #12
 800ef74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ef76:	4b0c      	ldr	r3, [pc, #48]	; (800efa8 <prvResetNextTaskUnblockTime+0x38>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d104      	bne.n	800ef8a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ef80:	4b0a      	ldr	r3, [pc, #40]	; (800efac <prvResetNextTaskUnblockTime+0x3c>)
 800ef82:	f04f 32ff 	mov.w	r2, #4294967295
 800ef86:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ef88:	e008      	b.n	800ef9c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef8a:	4b07      	ldr	r3, [pc, #28]	; (800efa8 <prvResetNextTaskUnblockTime+0x38>)
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	68db      	ldr	r3, [r3, #12]
 800ef90:	68db      	ldr	r3, [r3, #12]
 800ef92:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	685b      	ldr	r3, [r3, #4]
 800ef98:	4a04      	ldr	r2, [pc, #16]	; (800efac <prvResetNextTaskUnblockTime+0x3c>)
 800ef9a:	6013      	str	r3, [r2, #0]
}
 800ef9c:	bf00      	nop
 800ef9e:	370c      	adds	r7, #12
 800efa0:	46bd      	mov	sp, r7
 800efa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa6:	4770      	bx	lr
 800efa8:	2000424c 	.word	0x2000424c
 800efac:	200042b4 	.word	0x200042b4

0800efb0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800efb0:	b480      	push	{r7}
 800efb2:	b083      	sub	sp, #12
 800efb4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800efb6:	4b0b      	ldr	r3, [pc, #44]	; (800efe4 <xTaskGetSchedulerState+0x34>)
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d102      	bne.n	800efc4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800efbe:	2301      	movs	r3, #1
 800efc0:	607b      	str	r3, [r7, #4]
 800efc2:	e008      	b.n	800efd6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800efc4:	4b08      	ldr	r3, [pc, #32]	; (800efe8 <xTaskGetSchedulerState+0x38>)
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d102      	bne.n	800efd2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800efcc:	2302      	movs	r3, #2
 800efce:	607b      	str	r3, [r7, #4]
 800efd0:	e001      	b.n	800efd6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800efd2:	2300      	movs	r3, #0
 800efd4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800efd6:	687b      	ldr	r3, [r7, #4]
	}
 800efd8:	4618      	mov	r0, r3
 800efda:	370c      	adds	r7, #12
 800efdc:	46bd      	mov	sp, r7
 800efde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe2:	4770      	bx	lr
 800efe4:	200042a0 	.word	0x200042a0
 800efe8:	200042bc 	.word	0x200042bc

0800efec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800efec:	b580      	push	{r7, lr}
 800efee:	b086      	sub	sp, #24
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800eff8:	2300      	movs	r3, #0
 800effa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d056      	beq.n	800f0b0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f002:	4b2e      	ldr	r3, [pc, #184]	; (800f0bc <xTaskPriorityDisinherit+0xd0>)
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	693a      	ldr	r2, [r7, #16]
 800f008:	429a      	cmp	r2, r3
 800f00a:	d00a      	beq.n	800f022 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f010:	f383 8811 	msr	BASEPRI, r3
 800f014:	f3bf 8f6f 	isb	sy
 800f018:	f3bf 8f4f 	dsb	sy
 800f01c:	60fb      	str	r3, [r7, #12]
}
 800f01e:	bf00      	nop
 800f020:	e7fe      	b.n	800f020 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f022:	693b      	ldr	r3, [r7, #16]
 800f024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f026:	2b00      	cmp	r3, #0
 800f028:	d10a      	bne.n	800f040 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f02e:	f383 8811 	msr	BASEPRI, r3
 800f032:	f3bf 8f6f 	isb	sy
 800f036:	f3bf 8f4f 	dsb	sy
 800f03a:	60bb      	str	r3, [r7, #8]
}
 800f03c:	bf00      	nop
 800f03e:	e7fe      	b.n	800f03e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f040:	693b      	ldr	r3, [r7, #16]
 800f042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f044:	1e5a      	subs	r2, r3, #1
 800f046:	693b      	ldr	r3, [r7, #16]
 800f048:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f04a:	693b      	ldr	r3, [r7, #16]
 800f04c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f04e:	693b      	ldr	r3, [r7, #16]
 800f050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f052:	429a      	cmp	r2, r3
 800f054:	d02c      	beq.n	800f0b0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f056:	693b      	ldr	r3, [r7, #16]
 800f058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d128      	bne.n	800f0b0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f05e:	693b      	ldr	r3, [r7, #16]
 800f060:	3304      	adds	r3, #4
 800f062:	4618      	mov	r0, r3
 800f064:	f7fe fc46 	bl	800d8f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f068:	693b      	ldr	r3, [r7, #16]
 800f06a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f06c:	693b      	ldr	r3, [r7, #16]
 800f06e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f070:	693b      	ldr	r3, [r7, #16]
 800f072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f074:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f078:	693b      	ldr	r3, [r7, #16]
 800f07a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f07c:	693b      	ldr	r3, [r7, #16]
 800f07e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f080:	4b0f      	ldr	r3, [pc, #60]	; (800f0c0 <xTaskPriorityDisinherit+0xd4>)
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	429a      	cmp	r2, r3
 800f086:	d903      	bls.n	800f090 <xTaskPriorityDisinherit+0xa4>
 800f088:	693b      	ldr	r3, [r7, #16]
 800f08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f08c:	4a0c      	ldr	r2, [pc, #48]	; (800f0c0 <xTaskPriorityDisinherit+0xd4>)
 800f08e:	6013      	str	r3, [r2, #0]
 800f090:	693b      	ldr	r3, [r7, #16]
 800f092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f094:	4613      	mov	r3, r2
 800f096:	009b      	lsls	r3, r3, #2
 800f098:	4413      	add	r3, r2
 800f09a:	009b      	lsls	r3, r3, #2
 800f09c:	4a09      	ldr	r2, [pc, #36]	; (800f0c4 <xTaskPriorityDisinherit+0xd8>)
 800f09e:	441a      	add	r2, r3
 800f0a0:	693b      	ldr	r3, [r7, #16]
 800f0a2:	3304      	adds	r3, #4
 800f0a4:	4619      	mov	r1, r3
 800f0a6:	4610      	mov	r0, r2
 800f0a8:	f7fe fbc7 	bl	800d83a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f0ac:	2301      	movs	r3, #1
 800f0ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f0b0:	697b      	ldr	r3, [r7, #20]
	}
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	3718      	adds	r7, #24
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	bd80      	pop	{r7, pc}
 800f0ba:	bf00      	nop
 800f0bc:	20003dc0 	.word	0x20003dc0
 800f0c0:	2000429c 	.word	0x2000429c
 800f0c4:	20003dc4 	.word	0x20003dc4

0800f0c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b084      	sub	sp, #16
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
 800f0d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f0d2:	4b21      	ldr	r3, [pc, #132]	; (800f158 <prvAddCurrentTaskToDelayedList+0x90>)
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f0d8:	4b20      	ldr	r3, [pc, #128]	; (800f15c <prvAddCurrentTaskToDelayedList+0x94>)
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	3304      	adds	r3, #4
 800f0de:	4618      	mov	r0, r3
 800f0e0:	f7fe fc08 	bl	800d8f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0ea:	d10a      	bne.n	800f102 <prvAddCurrentTaskToDelayedList+0x3a>
 800f0ec:	683b      	ldr	r3, [r7, #0]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d007      	beq.n	800f102 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f0f2:	4b1a      	ldr	r3, [pc, #104]	; (800f15c <prvAddCurrentTaskToDelayedList+0x94>)
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	3304      	adds	r3, #4
 800f0f8:	4619      	mov	r1, r3
 800f0fa:	4819      	ldr	r0, [pc, #100]	; (800f160 <prvAddCurrentTaskToDelayedList+0x98>)
 800f0fc:	f7fe fb9d 	bl	800d83a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f100:	e026      	b.n	800f150 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f102:	68fa      	ldr	r2, [r7, #12]
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	4413      	add	r3, r2
 800f108:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f10a:	4b14      	ldr	r3, [pc, #80]	; (800f15c <prvAddCurrentTaskToDelayedList+0x94>)
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	68ba      	ldr	r2, [r7, #8]
 800f110:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f112:	68ba      	ldr	r2, [r7, #8]
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	429a      	cmp	r2, r3
 800f118:	d209      	bcs.n	800f12e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f11a:	4b12      	ldr	r3, [pc, #72]	; (800f164 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f11c:	681a      	ldr	r2, [r3, #0]
 800f11e:	4b0f      	ldr	r3, [pc, #60]	; (800f15c <prvAddCurrentTaskToDelayedList+0x94>)
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	3304      	adds	r3, #4
 800f124:	4619      	mov	r1, r3
 800f126:	4610      	mov	r0, r2
 800f128:	f7fe fbab 	bl	800d882 <vListInsert>
}
 800f12c:	e010      	b.n	800f150 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f12e:	4b0e      	ldr	r3, [pc, #56]	; (800f168 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f130:	681a      	ldr	r2, [r3, #0]
 800f132:	4b0a      	ldr	r3, [pc, #40]	; (800f15c <prvAddCurrentTaskToDelayedList+0x94>)
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	3304      	adds	r3, #4
 800f138:	4619      	mov	r1, r3
 800f13a:	4610      	mov	r0, r2
 800f13c:	f7fe fba1 	bl	800d882 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f140:	4b0a      	ldr	r3, [pc, #40]	; (800f16c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	68ba      	ldr	r2, [r7, #8]
 800f146:	429a      	cmp	r2, r3
 800f148:	d202      	bcs.n	800f150 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f14a:	4a08      	ldr	r2, [pc, #32]	; (800f16c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f14c:	68bb      	ldr	r3, [r7, #8]
 800f14e:	6013      	str	r3, [r2, #0]
}
 800f150:	bf00      	nop
 800f152:	3710      	adds	r7, #16
 800f154:	46bd      	mov	sp, r7
 800f156:	bd80      	pop	{r7, pc}
 800f158:	20004298 	.word	0x20004298
 800f15c:	20003dc0 	.word	0x20003dc0
 800f160:	20004280 	.word	0x20004280
 800f164:	20004250 	.word	0x20004250
 800f168:	2000424c 	.word	0x2000424c
 800f16c:	200042b4 	.word	0x200042b4

0800f170 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b08a      	sub	sp, #40	; 0x28
 800f174:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f176:	2300      	movs	r3, #0
 800f178:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f17a:	f000 fb07 	bl	800f78c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f17e:	4b1c      	ldr	r3, [pc, #112]	; (800f1f0 <xTimerCreateTimerTask+0x80>)
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d021      	beq.n	800f1ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f186:	2300      	movs	r3, #0
 800f188:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f18a:	2300      	movs	r3, #0
 800f18c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f18e:	1d3a      	adds	r2, r7, #4
 800f190:	f107 0108 	add.w	r1, r7, #8
 800f194:	f107 030c 	add.w	r3, r7, #12
 800f198:	4618      	mov	r0, r3
 800f19a:	f7fe fb07 	bl	800d7ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f19e:	6879      	ldr	r1, [r7, #4]
 800f1a0:	68bb      	ldr	r3, [r7, #8]
 800f1a2:	68fa      	ldr	r2, [r7, #12]
 800f1a4:	9202      	str	r2, [sp, #8]
 800f1a6:	9301      	str	r3, [sp, #4]
 800f1a8:	2302      	movs	r3, #2
 800f1aa:	9300      	str	r3, [sp, #0]
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	460a      	mov	r2, r1
 800f1b0:	4910      	ldr	r1, [pc, #64]	; (800f1f4 <xTimerCreateTimerTask+0x84>)
 800f1b2:	4811      	ldr	r0, [pc, #68]	; (800f1f8 <xTimerCreateTimerTask+0x88>)
 800f1b4:	f7ff f8b4 	bl	800e320 <xTaskCreateStatic>
 800f1b8:	4603      	mov	r3, r0
 800f1ba:	4a10      	ldr	r2, [pc, #64]	; (800f1fc <xTimerCreateTimerTask+0x8c>)
 800f1bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f1be:	4b0f      	ldr	r3, [pc, #60]	; (800f1fc <xTimerCreateTimerTask+0x8c>)
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d001      	beq.n	800f1ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f1c6:	2301      	movs	r3, #1
 800f1c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f1ca:	697b      	ldr	r3, [r7, #20]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d10a      	bne.n	800f1e6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1d4:	f383 8811 	msr	BASEPRI, r3
 800f1d8:	f3bf 8f6f 	isb	sy
 800f1dc:	f3bf 8f4f 	dsb	sy
 800f1e0:	613b      	str	r3, [r7, #16]
}
 800f1e2:	bf00      	nop
 800f1e4:	e7fe      	b.n	800f1e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f1e6:	697b      	ldr	r3, [r7, #20]
}
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	3718      	adds	r7, #24
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	bd80      	pop	{r7, pc}
 800f1f0:	200042f0 	.word	0x200042f0
 800f1f4:	080153ec 	.word	0x080153ec
 800f1f8:	0800f335 	.word	0x0800f335
 800f1fc:	200042f4 	.word	0x200042f4

0800f200 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f200:	b580      	push	{r7, lr}
 800f202:	b08a      	sub	sp, #40	; 0x28
 800f204:	af00      	add	r7, sp, #0
 800f206:	60f8      	str	r0, [r7, #12]
 800f208:	60b9      	str	r1, [r7, #8]
 800f20a:	607a      	str	r2, [r7, #4]
 800f20c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f20e:	2300      	movs	r3, #0
 800f210:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d10a      	bne.n	800f22e <xTimerGenericCommand+0x2e>
	__asm volatile
 800f218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f21c:	f383 8811 	msr	BASEPRI, r3
 800f220:	f3bf 8f6f 	isb	sy
 800f224:	f3bf 8f4f 	dsb	sy
 800f228:	623b      	str	r3, [r7, #32]
}
 800f22a:	bf00      	nop
 800f22c:	e7fe      	b.n	800f22c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f22e:	4b1a      	ldr	r3, [pc, #104]	; (800f298 <xTimerGenericCommand+0x98>)
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d02a      	beq.n	800f28c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f236:	68bb      	ldr	r3, [r7, #8]
 800f238:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	2b05      	cmp	r3, #5
 800f246:	dc18      	bgt.n	800f27a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f248:	f7ff feb2 	bl	800efb0 <xTaskGetSchedulerState>
 800f24c:	4603      	mov	r3, r0
 800f24e:	2b02      	cmp	r3, #2
 800f250:	d109      	bne.n	800f266 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f252:	4b11      	ldr	r3, [pc, #68]	; (800f298 <xTimerGenericCommand+0x98>)
 800f254:	6818      	ldr	r0, [r3, #0]
 800f256:	f107 0110 	add.w	r1, r7, #16
 800f25a:	2300      	movs	r3, #0
 800f25c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f25e:	f7fe fc77 	bl	800db50 <xQueueGenericSend>
 800f262:	6278      	str	r0, [r7, #36]	; 0x24
 800f264:	e012      	b.n	800f28c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f266:	4b0c      	ldr	r3, [pc, #48]	; (800f298 <xTimerGenericCommand+0x98>)
 800f268:	6818      	ldr	r0, [r3, #0]
 800f26a:	f107 0110 	add.w	r1, r7, #16
 800f26e:	2300      	movs	r3, #0
 800f270:	2200      	movs	r2, #0
 800f272:	f7fe fc6d 	bl	800db50 <xQueueGenericSend>
 800f276:	6278      	str	r0, [r7, #36]	; 0x24
 800f278:	e008      	b.n	800f28c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f27a:	4b07      	ldr	r3, [pc, #28]	; (800f298 <xTimerGenericCommand+0x98>)
 800f27c:	6818      	ldr	r0, [r3, #0]
 800f27e:	f107 0110 	add.w	r1, r7, #16
 800f282:	2300      	movs	r3, #0
 800f284:	683a      	ldr	r2, [r7, #0]
 800f286:	f7fe fd61 	bl	800dd4c <xQueueGenericSendFromISR>
 800f28a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f28e:	4618      	mov	r0, r3
 800f290:	3728      	adds	r7, #40	; 0x28
 800f292:	46bd      	mov	sp, r7
 800f294:	bd80      	pop	{r7, pc}
 800f296:	bf00      	nop
 800f298:	200042f0 	.word	0x200042f0

0800f29c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b088      	sub	sp, #32
 800f2a0:	af02      	add	r7, sp, #8
 800f2a2:	6078      	str	r0, [r7, #4]
 800f2a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f2a6:	4b22      	ldr	r3, [pc, #136]	; (800f330 <prvProcessExpiredTimer+0x94>)
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	68db      	ldr	r3, [r3, #12]
 800f2ac:	68db      	ldr	r3, [r3, #12]
 800f2ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f2b0:	697b      	ldr	r3, [r7, #20]
 800f2b2:	3304      	adds	r3, #4
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	f7fe fb1d 	bl	800d8f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f2ba:	697b      	ldr	r3, [r7, #20]
 800f2bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f2c0:	f003 0304 	and.w	r3, r3, #4
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d022      	beq.n	800f30e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f2c8:	697b      	ldr	r3, [r7, #20]
 800f2ca:	699a      	ldr	r2, [r3, #24]
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	18d1      	adds	r1, r2, r3
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	683a      	ldr	r2, [r7, #0]
 800f2d4:	6978      	ldr	r0, [r7, #20]
 800f2d6:	f000 f8d1 	bl	800f47c <prvInsertTimerInActiveList>
 800f2da:	4603      	mov	r3, r0
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d01f      	beq.n	800f320 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	9300      	str	r3, [sp, #0]
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	687a      	ldr	r2, [r7, #4]
 800f2e8:	2100      	movs	r1, #0
 800f2ea:	6978      	ldr	r0, [r7, #20]
 800f2ec:	f7ff ff88 	bl	800f200 <xTimerGenericCommand>
 800f2f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f2f2:	693b      	ldr	r3, [r7, #16]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d113      	bne.n	800f320 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2fc:	f383 8811 	msr	BASEPRI, r3
 800f300:	f3bf 8f6f 	isb	sy
 800f304:	f3bf 8f4f 	dsb	sy
 800f308:	60fb      	str	r3, [r7, #12]
}
 800f30a:	bf00      	nop
 800f30c:	e7fe      	b.n	800f30c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f30e:	697b      	ldr	r3, [r7, #20]
 800f310:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f314:	f023 0301 	bic.w	r3, r3, #1
 800f318:	b2da      	uxtb	r2, r3
 800f31a:	697b      	ldr	r3, [r7, #20]
 800f31c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f320:	697b      	ldr	r3, [r7, #20]
 800f322:	6a1b      	ldr	r3, [r3, #32]
 800f324:	6978      	ldr	r0, [r7, #20]
 800f326:	4798      	blx	r3
}
 800f328:	bf00      	nop
 800f32a:	3718      	adds	r7, #24
 800f32c:	46bd      	mov	sp, r7
 800f32e:	bd80      	pop	{r7, pc}
 800f330:	200042e8 	.word	0x200042e8

0800f334 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b084      	sub	sp, #16
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f33c:	f107 0308 	add.w	r3, r7, #8
 800f340:	4618      	mov	r0, r3
 800f342:	f000 f857 	bl	800f3f4 <prvGetNextExpireTime>
 800f346:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f348:	68bb      	ldr	r3, [r7, #8]
 800f34a:	4619      	mov	r1, r3
 800f34c:	68f8      	ldr	r0, [r7, #12]
 800f34e:	f000 f803 	bl	800f358 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f352:	f000 f8d5 	bl	800f500 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f356:	e7f1      	b.n	800f33c <prvTimerTask+0x8>

0800f358 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b084      	sub	sp, #16
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
 800f360:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f362:	f7ff fa39 	bl	800e7d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f366:	f107 0308 	add.w	r3, r7, #8
 800f36a:	4618      	mov	r0, r3
 800f36c:	f000 f866 	bl	800f43c <prvSampleTimeNow>
 800f370:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f372:	68bb      	ldr	r3, [r7, #8]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d130      	bne.n	800f3da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d10a      	bne.n	800f394 <prvProcessTimerOrBlockTask+0x3c>
 800f37e:	687a      	ldr	r2, [r7, #4]
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	429a      	cmp	r2, r3
 800f384:	d806      	bhi.n	800f394 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f386:	f7ff fa35 	bl	800e7f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f38a:	68f9      	ldr	r1, [r7, #12]
 800f38c:	6878      	ldr	r0, [r7, #4]
 800f38e:	f7ff ff85 	bl	800f29c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f392:	e024      	b.n	800f3de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f394:	683b      	ldr	r3, [r7, #0]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d008      	beq.n	800f3ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f39a:	4b13      	ldr	r3, [pc, #76]	; (800f3e8 <prvProcessTimerOrBlockTask+0x90>)
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d101      	bne.n	800f3a8 <prvProcessTimerOrBlockTask+0x50>
 800f3a4:	2301      	movs	r3, #1
 800f3a6:	e000      	b.n	800f3aa <prvProcessTimerOrBlockTask+0x52>
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f3ac:	4b0f      	ldr	r3, [pc, #60]	; (800f3ec <prvProcessTimerOrBlockTask+0x94>)
 800f3ae:	6818      	ldr	r0, [r3, #0]
 800f3b0:	687a      	ldr	r2, [r7, #4]
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	1ad3      	subs	r3, r2, r3
 800f3b6:	683a      	ldr	r2, [r7, #0]
 800f3b8:	4619      	mov	r1, r3
 800f3ba:	f7fe ff7d 	bl	800e2b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f3be:	f7ff fa19 	bl	800e7f4 <xTaskResumeAll>
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d10a      	bne.n	800f3de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f3c8:	4b09      	ldr	r3, [pc, #36]	; (800f3f0 <prvProcessTimerOrBlockTask+0x98>)
 800f3ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3ce:	601a      	str	r2, [r3, #0]
 800f3d0:	f3bf 8f4f 	dsb	sy
 800f3d4:	f3bf 8f6f 	isb	sy
}
 800f3d8:	e001      	b.n	800f3de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f3da:	f7ff fa0b 	bl	800e7f4 <xTaskResumeAll>
}
 800f3de:	bf00      	nop
 800f3e0:	3710      	adds	r7, #16
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	bd80      	pop	{r7, pc}
 800f3e6:	bf00      	nop
 800f3e8:	200042ec 	.word	0x200042ec
 800f3ec:	200042f0 	.word	0x200042f0
 800f3f0:	e000ed04 	.word	0xe000ed04

0800f3f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f3f4:	b480      	push	{r7}
 800f3f6:	b085      	sub	sp, #20
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f3fc:	4b0e      	ldr	r3, [pc, #56]	; (800f438 <prvGetNextExpireTime+0x44>)
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d101      	bne.n	800f40a <prvGetNextExpireTime+0x16>
 800f406:	2201      	movs	r2, #1
 800f408:	e000      	b.n	800f40c <prvGetNextExpireTime+0x18>
 800f40a:	2200      	movs	r2, #0
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d105      	bne.n	800f424 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f418:	4b07      	ldr	r3, [pc, #28]	; (800f438 <prvGetNextExpireTime+0x44>)
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	68db      	ldr	r3, [r3, #12]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	60fb      	str	r3, [r7, #12]
 800f422:	e001      	b.n	800f428 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f424:	2300      	movs	r3, #0
 800f426:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f428:	68fb      	ldr	r3, [r7, #12]
}
 800f42a:	4618      	mov	r0, r3
 800f42c:	3714      	adds	r7, #20
 800f42e:	46bd      	mov	sp, r7
 800f430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f434:	4770      	bx	lr
 800f436:	bf00      	nop
 800f438:	200042e8 	.word	0x200042e8

0800f43c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b084      	sub	sp, #16
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f444:	f7ff fa74 	bl	800e930 <xTaskGetTickCount>
 800f448:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f44a:	4b0b      	ldr	r3, [pc, #44]	; (800f478 <prvSampleTimeNow+0x3c>)
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	68fa      	ldr	r2, [r7, #12]
 800f450:	429a      	cmp	r2, r3
 800f452:	d205      	bcs.n	800f460 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f454:	f000 f936 	bl	800f6c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	2201      	movs	r2, #1
 800f45c:	601a      	str	r2, [r3, #0]
 800f45e:	e002      	b.n	800f466 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	2200      	movs	r2, #0
 800f464:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f466:	4a04      	ldr	r2, [pc, #16]	; (800f478 <prvSampleTimeNow+0x3c>)
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f46c:	68fb      	ldr	r3, [r7, #12]
}
 800f46e:	4618      	mov	r0, r3
 800f470:	3710      	adds	r7, #16
 800f472:	46bd      	mov	sp, r7
 800f474:	bd80      	pop	{r7, pc}
 800f476:	bf00      	nop
 800f478:	200042f8 	.word	0x200042f8

0800f47c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b086      	sub	sp, #24
 800f480:	af00      	add	r7, sp, #0
 800f482:	60f8      	str	r0, [r7, #12]
 800f484:	60b9      	str	r1, [r7, #8]
 800f486:	607a      	str	r2, [r7, #4]
 800f488:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f48a:	2300      	movs	r3, #0
 800f48c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	68ba      	ldr	r2, [r7, #8]
 800f492:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	68fa      	ldr	r2, [r7, #12]
 800f498:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f49a:	68ba      	ldr	r2, [r7, #8]
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	429a      	cmp	r2, r3
 800f4a0:	d812      	bhi.n	800f4c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f4a2:	687a      	ldr	r2, [r7, #4]
 800f4a4:	683b      	ldr	r3, [r7, #0]
 800f4a6:	1ad2      	subs	r2, r2, r3
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	699b      	ldr	r3, [r3, #24]
 800f4ac:	429a      	cmp	r2, r3
 800f4ae:	d302      	bcc.n	800f4b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f4b0:	2301      	movs	r3, #1
 800f4b2:	617b      	str	r3, [r7, #20]
 800f4b4:	e01b      	b.n	800f4ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f4b6:	4b10      	ldr	r3, [pc, #64]	; (800f4f8 <prvInsertTimerInActiveList+0x7c>)
 800f4b8:	681a      	ldr	r2, [r3, #0]
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	3304      	adds	r3, #4
 800f4be:	4619      	mov	r1, r3
 800f4c0:	4610      	mov	r0, r2
 800f4c2:	f7fe f9de 	bl	800d882 <vListInsert>
 800f4c6:	e012      	b.n	800f4ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f4c8:	687a      	ldr	r2, [r7, #4]
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	429a      	cmp	r2, r3
 800f4ce:	d206      	bcs.n	800f4de <prvInsertTimerInActiveList+0x62>
 800f4d0:	68ba      	ldr	r2, [r7, #8]
 800f4d2:	683b      	ldr	r3, [r7, #0]
 800f4d4:	429a      	cmp	r2, r3
 800f4d6:	d302      	bcc.n	800f4de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f4d8:	2301      	movs	r3, #1
 800f4da:	617b      	str	r3, [r7, #20]
 800f4dc:	e007      	b.n	800f4ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f4de:	4b07      	ldr	r3, [pc, #28]	; (800f4fc <prvInsertTimerInActiveList+0x80>)
 800f4e0:	681a      	ldr	r2, [r3, #0]
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	3304      	adds	r3, #4
 800f4e6:	4619      	mov	r1, r3
 800f4e8:	4610      	mov	r0, r2
 800f4ea:	f7fe f9ca 	bl	800d882 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f4ee:	697b      	ldr	r3, [r7, #20]
}
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	3718      	adds	r7, #24
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	bd80      	pop	{r7, pc}
 800f4f8:	200042ec 	.word	0x200042ec
 800f4fc:	200042e8 	.word	0x200042e8

0800f500 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b08e      	sub	sp, #56	; 0x38
 800f504:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f506:	e0ca      	b.n	800f69e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	da18      	bge.n	800f540 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f50e:	1d3b      	adds	r3, r7, #4
 800f510:	3304      	adds	r3, #4
 800f512:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f516:	2b00      	cmp	r3, #0
 800f518:	d10a      	bne.n	800f530 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f51e:	f383 8811 	msr	BASEPRI, r3
 800f522:	f3bf 8f6f 	isb	sy
 800f526:	f3bf 8f4f 	dsb	sy
 800f52a:	61fb      	str	r3, [r7, #28]
}
 800f52c:	bf00      	nop
 800f52e:	e7fe      	b.n	800f52e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f536:	6850      	ldr	r0, [r2, #4]
 800f538:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f53a:	6892      	ldr	r2, [r2, #8]
 800f53c:	4611      	mov	r1, r2
 800f53e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	2b00      	cmp	r3, #0
 800f544:	f2c0 80ab 	blt.w	800f69e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f54e:	695b      	ldr	r3, [r3, #20]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d004      	beq.n	800f55e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f556:	3304      	adds	r3, #4
 800f558:	4618      	mov	r0, r3
 800f55a:	f7fe f9cb 	bl	800d8f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f55e:	463b      	mov	r3, r7
 800f560:	4618      	mov	r0, r3
 800f562:	f7ff ff6b 	bl	800f43c <prvSampleTimeNow>
 800f566:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	2b09      	cmp	r3, #9
 800f56c:	f200 8096 	bhi.w	800f69c <prvProcessReceivedCommands+0x19c>
 800f570:	a201      	add	r2, pc, #4	; (adr r2, 800f578 <prvProcessReceivedCommands+0x78>)
 800f572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f576:	bf00      	nop
 800f578:	0800f5a1 	.word	0x0800f5a1
 800f57c:	0800f5a1 	.word	0x0800f5a1
 800f580:	0800f5a1 	.word	0x0800f5a1
 800f584:	0800f615 	.word	0x0800f615
 800f588:	0800f629 	.word	0x0800f629
 800f58c:	0800f673 	.word	0x0800f673
 800f590:	0800f5a1 	.word	0x0800f5a1
 800f594:	0800f5a1 	.word	0x0800f5a1
 800f598:	0800f615 	.word	0x0800f615
 800f59c:	0800f629 	.word	0x0800f629
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f5a6:	f043 0301 	orr.w	r3, r3, #1
 800f5aa:	b2da      	uxtb	r2, r3
 800f5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f5b2:	68ba      	ldr	r2, [r7, #8]
 800f5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5b6:	699b      	ldr	r3, [r3, #24]
 800f5b8:	18d1      	adds	r1, r2, r3
 800f5ba:	68bb      	ldr	r3, [r7, #8]
 800f5bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f5c0:	f7ff ff5c 	bl	800f47c <prvInsertTimerInActiveList>
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d069      	beq.n	800f69e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5cc:	6a1b      	ldr	r3, [r3, #32]
 800f5ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f5d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f5d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f5d8:	f003 0304 	and.w	r3, r3, #4
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d05e      	beq.n	800f69e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f5e0:	68ba      	ldr	r2, [r7, #8]
 800f5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5e4:	699b      	ldr	r3, [r3, #24]
 800f5e6:	441a      	add	r2, r3
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	9300      	str	r3, [sp, #0]
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	2100      	movs	r1, #0
 800f5f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f5f2:	f7ff fe05 	bl	800f200 <xTimerGenericCommand>
 800f5f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f5f8:	6a3b      	ldr	r3, [r7, #32]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d14f      	bne.n	800f69e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f602:	f383 8811 	msr	BASEPRI, r3
 800f606:	f3bf 8f6f 	isb	sy
 800f60a:	f3bf 8f4f 	dsb	sy
 800f60e:	61bb      	str	r3, [r7, #24]
}
 800f610:	bf00      	nop
 800f612:	e7fe      	b.n	800f612 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f616:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f61a:	f023 0301 	bic.w	r3, r3, #1
 800f61e:	b2da      	uxtb	r2, r3
 800f620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f622:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f626:	e03a      	b.n	800f69e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f62a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f62e:	f043 0301 	orr.w	r3, r3, #1
 800f632:	b2da      	uxtb	r2, r3
 800f634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f636:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f63a:	68ba      	ldr	r2, [r7, #8]
 800f63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f63e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f642:	699b      	ldr	r3, [r3, #24]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d10a      	bne.n	800f65e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f64c:	f383 8811 	msr	BASEPRI, r3
 800f650:	f3bf 8f6f 	isb	sy
 800f654:	f3bf 8f4f 	dsb	sy
 800f658:	617b      	str	r3, [r7, #20]
}
 800f65a:	bf00      	nop
 800f65c:	e7fe      	b.n	800f65c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f660:	699a      	ldr	r2, [r3, #24]
 800f662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f664:	18d1      	adds	r1, r2, r3
 800f666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f66a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f66c:	f7ff ff06 	bl	800f47c <prvInsertTimerInActiveList>
					break;
 800f670:	e015      	b.n	800f69e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f674:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f678:	f003 0302 	and.w	r3, r3, #2
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d103      	bne.n	800f688 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f680:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f682:	f000 fbdd 	bl	800fe40 <vPortFree>
 800f686:	e00a      	b.n	800f69e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f68a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f68e:	f023 0301 	bic.w	r3, r3, #1
 800f692:	b2da      	uxtb	r2, r3
 800f694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f696:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f69a:	e000      	b.n	800f69e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800f69c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f69e:	4b08      	ldr	r3, [pc, #32]	; (800f6c0 <prvProcessReceivedCommands+0x1c0>)
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	1d39      	adds	r1, r7, #4
 800f6a4:	2200      	movs	r2, #0
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	f7fe fbec 	bl	800de84 <xQueueReceive>
 800f6ac:	4603      	mov	r3, r0
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	f47f af2a 	bne.w	800f508 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f6b4:	bf00      	nop
 800f6b6:	bf00      	nop
 800f6b8:	3730      	adds	r7, #48	; 0x30
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bd80      	pop	{r7, pc}
 800f6be:	bf00      	nop
 800f6c0:	200042f0 	.word	0x200042f0

0800f6c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b088      	sub	sp, #32
 800f6c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f6ca:	e048      	b.n	800f75e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f6cc:	4b2d      	ldr	r3, [pc, #180]	; (800f784 <prvSwitchTimerLists+0xc0>)
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	68db      	ldr	r3, [r3, #12]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6d6:	4b2b      	ldr	r3, [pc, #172]	; (800f784 <prvSwitchTimerLists+0xc0>)
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	68db      	ldr	r3, [r3, #12]
 800f6dc:	68db      	ldr	r3, [r3, #12]
 800f6de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	3304      	adds	r3, #4
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	f7fe f905 	bl	800d8f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	6a1b      	ldr	r3, [r3, #32]
 800f6ee:	68f8      	ldr	r0, [r7, #12]
 800f6f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f6f8:	f003 0304 	and.w	r3, r3, #4
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d02e      	beq.n	800f75e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	699b      	ldr	r3, [r3, #24]
 800f704:	693a      	ldr	r2, [r7, #16]
 800f706:	4413      	add	r3, r2
 800f708:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f70a:	68ba      	ldr	r2, [r7, #8]
 800f70c:	693b      	ldr	r3, [r7, #16]
 800f70e:	429a      	cmp	r2, r3
 800f710:	d90e      	bls.n	800f730 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	68ba      	ldr	r2, [r7, #8]
 800f716:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	68fa      	ldr	r2, [r7, #12]
 800f71c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f71e:	4b19      	ldr	r3, [pc, #100]	; (800f784 <prvSwitchTimerLists+0xc0>)
 800f720:	681a      	ldr	r2, [r3, #0]
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	3304      	adds	r3, #4
 800f726:	4619      	mov	r1, r3
 800f728:	4610      	mov	r0, r2
 800f72a:	f7fe f8aa 	bl	800d882 <vListInsert>
 800f72e:	e016      	b.n	800f75e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f730:	2300      	movs	r3, #0
 800f732:	9300      	str	r3, [sp, #0]
 800f734:	2300      	movs	r3, #0
 800f736:	693a      	ldr	r2, [r7, #16]
 800f738:	2100      	movs	r1, #0
 800f73a:	68f8      	ldr	r0, [r7, #12]
 800f73c:	f7ff fd60 	bl	800f200 <xTimerGenericCommand>
 800f740:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d10a      	bne.n	800f75e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f74c:	f383 8811 	msr	BASEPRI, r3
 800f750:	f3bf 8f6f 	isb	sy
 800f754:	f3bf 8f4f 	dsb	sy
 800f758:	603b      	str	r3, [r7, #0]
}
 800f75a:	bf00      	nop
 800f75c:	e7fe      	b.n	800f75c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f75e:	4b09      	ldr	r3, [pc, #36]	; (800f784 <prvSwitchTimerLists+0xc0>)
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d1b1      	bne.n	800f6cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f768:	4b06      	ldr	r3, [pc, #24]	; (800f784 <prvSwitchTimerLists+0xc0>)
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f76e:	4b06      	ldr	r3, [pc, #24]	; (800f788 <prvSwitchTimerLists+0xc4>)
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	4a04      	ldr	r2, [pc, #16]	; (800f784 <prvSwitchTimerLists+0xc0>)
 800f774:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f776:	4a04      	ldr	r2, [pc, #16]	; (800f788 <prvSwitchTimerLists+0xc4>)
 800f778:	697b      	ldr	r3, [r7, #20]
 800f77a:	6013      	str	r3, [r2, #0]
}
 800f77c:	bf00      	nop
 800f77e:	3718      	adds	r7, #24
 800f780:	46bd      	mov	sp, r7
 800f782:	bd80      	pop	{r7, pc}
 800f784:	200042e8 	.word	0x200042e8
 800f788:	200042ec 	.word	0x200042ec

0800f78c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b082      	sub	sp, #8
 800f790:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f792:	f000 f967 	bl	800fa64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f796:	4b15      	ldr	r3, [pc, #84]	; (800f7ec <prvCheckForValidListAndQueue+0x60>)
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d120      	bne.n	800f7e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f79e:	4814      	ldr	r0, [pc, #80]	; (800f7f0 <prvCheckForValidListAndQueue+0x64>)
 800f7a0:	f7fe f81e 	bl	800d7e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f7a4:	4813      	ldr	r0, [pc, #76]	; (800f7f4 <prvCheckForValidListAndQueue+0x68>)
 800f7a6:	f7fe f81b 	bl	800d7e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f7aa:	4b13      	ldr	r3, [pc, #76]	; (800f7f8 <prvCheckForValidListAndQueue+0x6c>)
 800f7ac:	4a10      	ldr	r2, [pc, #64]	; (800f7f0 <prvCheckForValidListAndQueue+0x64>)
 800f7ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f7b0:	4b12      	ldr	r3, [pc, #72]	; (800f7fc <prvCheckForValidListAndQueue+0x70>)
 800f7b2:	4a10      	ldr	r2, [pc, #64]	; (800f7f4 <prvCheckForValidListAndQueue+0x68>)
 800f7b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	9300      	str	r3, [sp, #0]
 800f7ba:	4b11      	ldr	r3, [pc, #68]	; (800f800 <prvCheckForValidListAndQueue+0x74>)
 800f7bc:	4a11      	ldr	r2, [pc, #68]	; (800f804 <prvCheckForValidListAndQueue+0x78>)
 800f7be:	2110      	movs	r1, #16
 800f7c0:	200a      	movs	r0, #10
 800f7c2:	f7fe f929 	bl	800da18 <xQueueGenericCreateStatic>
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	4a08      	ldr	r2, [pc, #32]	; (800f7ec <prvCheckForValidListAndQueue+0x60>)
 800f7ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f7cc:	4b07      	ldr	r3, [pc, #28]	; (800f7ec <prvCheckForValidListAndQueue+0x60>)
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d005      	beq.n	800f7e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f7d4:	4b05      	ldr	r3, [pc, #20]	; (800f7ec <prvCheckForValidListAndQueue+0x60>)
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	490b      	ldr	r1, [pc, #44]	; (800f808 <prvCheckForValidListAndQueue+0x7c>)
 800f7da:	4618      	mov	r0, r3
 800f7dc:	f7fe fd42 	bl	800e264 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f7e0:	f000 f970 	bl	800fac4 <vPortExitCritical>
}
 800f7e4:	bf00      	nop
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	bd80      	pop	{r7, pc}
 800f7ea:	bf00      	nop
 800f7ec:	200042f0 	.word	0x200042f0
 800f7f0:	200042c0 	.word	0x200042c0
 800f7f4:	200042d4 	.word	0x200042d4
 800f7f8:	200042e8 	.word	0x200042e8
 800f7fc:	200042ec 	.word	0x200042ec
 800f800:	2000439c 	.word	0x2000439c
 800f804:	200042fc 	.word	0x200042fc
 800f808:	080153f4 	.word	0x080153f4

0800f80c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f80c:	b480      	push	{r7}
 800f80e:	b085      	sub	sp, #20
 800f810:	af00      	add	r7, sp, #0
 800f812:	60f8      	str	r0, [r7, #12]
 800f814:	60b9      	str	r1, [r7, #8]
 800f816:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	3b04      	subs	r3, #4
 800f81c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f824:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	3b04      	subs	r3, #4
 800f82a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f82c:	68bb      	ldr	r3, [r7, #8]
 800f82e:	f023 0201 	bic.w	r2, r3, #1
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	3b04      	subs	r3, #4
 800f83a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f83c:	4a0c      	ldr	r2, [pc, #48]	; (800f870 <pxPortInitialiseStack+0x64>)
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	3b14      	subs	r3, #20
 800f846:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f848:	687a      	ldr	r2, [r7, #4]
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	3b04      	subs	r3, #4
 800f852:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	f06f 0202 	mvn.w	r2, #2
 800f85a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	3b20      	subs	r3, #32
 800f860:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f862:	68fb      	ldr	r3, [r7, #12]
}
 800f864:	4618      	mov	r0, r3
 800f866:	3714      	adds	r7, #20
 800f868:	46bd      	mov	sp, r7
 800f86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86e:	4770      	bx	lr
 800f870:	0800f875 	.word	0x0800f875

0800f874 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f874:	b480      	push	{r7}
 800f876:	b085      	sub	sp, #20
 800f878:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f87a:	2300      	movs	r3, #0
 800f87c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f87e:	4b12      	ldr	r3, [pc, #72]	; (800f8c8 <prvTaskExitError+0x54>)
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f886:	d00a      	beq.n	800f89e <prvTaskExitError+0x2a>
	__asm volatile
 800f888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f88c:	f383 8811 	msr	BASEPRI, r3
 800f890:	f3bf 8f6f 	isb	sy
 800f894:	f3bf 8f4f 	dsb	sy
 800f898:	60fb      	str	r3, [r7, #12]
}
 800f89a:	bf00      	nop
 800f89c:	e7fe      	b.n	800f89c <prvTaskExitError+0x28>
	__asm volatile
 800f89e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8a2:	f383 8811 	msr	BASEPRI, r3
 800f8a6:	f3bf 8f6f 	isb	sy
 800f8aa:	f3bf 8f4f 	dsb	sy
 800f8ae:	60bb      	str	r3, [r7, #8]
}
 800f8b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f8b2:	bf00      	nop
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d0fc      	beq.n	800f8b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f8ba:	bf00      	nop
 800f8bc:	bf00      	nop
 800f8be:	3714      	adds	r7, #20
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c6:	4770      	bx	lr
 800f8c8:	20000018 	.word	0x20000018
 800f8cc:	00000000 	.word	0x00000000

0800f8d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f8d0:	4b07      	ldr	r3, [pc, #28]	; (800f8f0 <pxCurrentTCBConst2>)
 800f8d2:	6819      	ldr	r1, [r3, #0]
 800f8d4:	6808      	ldr	r0, [r1, #0]
 800f8d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8da:	f380 8809 	msr	PSP, r0
 800f8de:	f3bf 8f6f 	isb	sy
 800f8e2:	f04f 0000 	mov.w	r0, #0
 800f8e6:	f380 8811 	msr	BASEPRI, r0
 800f8ea:	4770      	bx	lr
 800f8ec:	f3af 8000 	nop.w

0800f8f0 <pxCurrentTCBConst2>:
 800f8f0:	20003dc0 	.word	0x20003dc0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f8f4:	bf00      	nop
 800f8f6:	bf00      	nop

0800f8f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f8f8:	4808      	ldr	r0, [pc, #32]	; (800f91c <prvPortStartFirstTask+0x24>)
 800f8fa:	6800      	ldr	r0, [r0, #0]
 800f8fc:	6800      	ldr	r0, [r0, #0]
 800f8fe:	f380 8808 	msr	MSP, r0
 800f902:	f04f 0000 	mov.w	r0, #0
 800f906:	f380 8814 	msr	CONTROL, r0
 800f90a:	b662      	cpsie	i
 800f90c:	b661      	cpsie	f
 800f90e:	f3bf 8f4f 	dsb	sy
 800f912:	f3bf 8f6f 	isb	sy
 800f916:	df00      	svc	0
 800f918:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f91a:	bf00      	nop
 800f91c:	e000ed08 	.word	0xe000ed08

0800f920 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b086      	sub	sp, #24
 800f924:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f926:	4b46      	ldr	r3, [pc, #280]	; (800fa40 <xPortStartScheduler+0x120>)
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	4a46      	ldr	r2, [pc, #280]	; (800fa44 <xPortStartScheduler+0x124>)
 800f92c:	4293      	cmp	r3, r2
 800f92e:	d10a      	bne.n	800f946 <xPortStartScheduler+0x26>
	__asm volatile
 800f930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f934:	f383 8811 	msr	BASEPRI, r3
 800f938:	f3bf 8f6f 	isb	sy
 800f93c:	f3bf 8f4f 	dsb	sy
 800f940:	613b      	str	r3, [r7, #16]
}
 800f942:	bf00      	nop
 800f944:	e7fe      	b.n	800f944 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f946:	4b3e      	ldr	r3, [pc, #248]	; (800fa40 <xPortStartScheduler+0x120>)
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	4a3f      	ldr	r2, [pc, #252]	; (800fa48 <xPortStartScheduler+0x128>)
 800f94c:	4293      	cmp	r3, r2
 800f94e:	d10a      	bne.n	800f966 <xPortStartScheduler+0x46>
	__asm volatile
 800f950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f954:	f383 8811 	msr	BASEPRI, r3
 800f958:	f3bf 8f6f 	isb	sy
 800f95c:	f3bf 8f4f 	dsb	sy
 800f960:	60fb      	str	r3, [r7, #12]
}
 800f962:	bf00      	nop
 800f964:	e7fe      	b.n	800f964 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f966:	4b39      	ldr	r3, [pc, #228]	; (800fa4c <xPortStartScheduler+0x12c>)
 800f968:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f96a:	697b      	ldr	r3, [r7, #20]
 800f96c:	781b      	ldrb	r3, [r3, #0]
 800f96e:	b2db      	uxtb	r3, r3
 800f970:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f972:	697b      	ldr	r3, [r7, #20]
 800f974:	22ff      	movs	r2, #255	; 0xff
 800f976:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f978:	697b      	ldr	r3, [r7, #20]
 800f97a:	781b      	ldrb	r3, [r3, #0]
 800f97c:	b2db      	uxtb	r3, r3
 800f97e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f980:	78fb      	ldrb	r3, [r7, #3]
 800f982:	b2db      	uxtb	r3, r3
 800f984:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f988:	b2da      	uxtb	r2, r3
 800f98a:	4b31      	ldr	r3, [pc, #196]	; (800fa50 <xPortStartScheduler+0x130>)
 800f98c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f98e:	4b31      	ldr	r3, [pc, #196]	; (800fa54 <xPortStartScheduler+0x134>)
 800f990:	2207      	movs	r2, #7
 800f992:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f994:	e009      	b.n	800f9aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f996:	4b2f      	ldr	r3, [pc, #188]	; (800fa54 <xPortStartScheduler+0x134>)
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	3b01      	subs	r3, #1
 800f99c:	4a2d      	ldr	r2, [pc, #180]	; (800fa54 <xPortStartScheduler+0x134>)
 800f99e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f9a0:	78fb      	ldrb	r3, [r7, #3]
 800f9a2:	b2db      	uxtb	r3, r3
 800f9a4:	005b      	lsls	r3, r3, #1
 800f9a6:	b2db      	uxtb	r3, r3
 800f9a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f9aa:	78fb      	ldrb	r3, [r7, #3]
 800f9ac:	b2db      	uxtb	r3, r3
 800f9ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f9b2:	2b80      	cmp	r3, #128	; 0x80
 800f9b4:	d0ef      	beq.n	800f996 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f9b6:	4b27      	ldr	r3, [pc, #156]	; (800fa54 <xPortStartScheduler+0x134>)
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	f1c3 0307 	rsb	r3, r3, #7
 800f9be:	2b04      	cmp	r3, #4
 800f9c0:	d00a      	beq.n	800f9d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800f9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9c6:	f383 8811 	msr	BASEPRI, r3
 800f9ca:	f3bf 8f6f 	isb	sy
 800f9ce:	f3bf 8f4f 	dsb	sy
 800f9d2:	60bb      	str	r3, [r7, #8]
}
 800f9d4:	bf00      	nop
 800f9d6:	e7fe      	b.n	800f9d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f9d8:	4b1e      	ldr	r3, [pc, #120]	; (800fa54 <xPortStartScheduler+0x134>)
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	021b      	lsls	r3, r3, #8
 800f9de:	4a1d      	ldr	r2, [pc, #116]	; (800fa54 <xPortStartScheduler+0x134>)
 800f9e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f9e2:	4b1c      	ldr	r3, [pc, #112]	; (800fa54 <xPortStartScheduler+0x134>)
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f9ea:	4a1a      	ldr	r2, [pc, #104]	; (800fa54 <xPortStartScheduler+0x134>)
 800f9ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	b2da      	uxtb	r2, r3
 800f9f2:	697b      	ldr	r3, [r7, #20]
 800f9f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f9f6:	4b18      	ldr	r3, [pc, #96]	; (800fa58 <xPortStartScheduler+0x138>)
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	4a17      	ldr	r2, [pc, #92]	; (800fa58 <xPortStartScheduler+0x138>)
 800f9fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fa00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fa02:	4b15      	ldr	r3, [pc, #84]	; (800fa58 <xPortStartScheduler+0x138>)
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	4a14      	ldr	r2, [pc, #80]	; (800fa58 <xPortStartScheduler+0x138>)
 800fa08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fa0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fa0e:	f000 f8dd 	bl	800fbcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fa12:	4b12      	ldr	r3, [pc, #72]	; (800fa5c <xPortStartScheduler+0x13c>)
 800fa14:	2200      	movs	r2, #0
 800fa16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fa18:	f000 f8fc 	bl	800fc14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fa1c:	4b10      	ldr	r3, [pc, #64]	; (800fa60 <xPortStartScheduler+0x140>)
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	4a0f      	ldr	r2, [pc, #60]	; (800fa60 <xPortStartScheduler+0x140>)
 800fa22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fa26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fa28:	f7ff ff66 	bl	800f8f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fa2c:	f7ff f84a 	bl	800eac4 <vTaskSwitchContext>
	prvTaskExitError();
 800fa30:	f7ff ff20 	bl	800f874 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fa34:	2300      	movs	r3, #0
}
 800fa36:	4618      	mov	r0, r3
 800fa38:	3718      	adds	r7, #24
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	bd80      	pop	{r7, pc}
 800fa3e:	bf00      	nop
 800fa40:	e000ed00 	.word	0xe000ed00
 800fa44:	410fc271 	.word	0x410fc271
 800fa48:	410fc270 	.word	0x410fc270
 800fa4c:	e000e400 	.word	0xe000e400
 800fa50:	200043ec 	.word	0x200043ec
 800fa54:	200043f0 	.word	0x200043f0
 800fa58:	e000ed20 	.word	0xe000ed20
 800fa5c:	20000018 	.word	0x20000018
 800fa60:	e000ef34 	.word	0xe000ef34

0800fa64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fa64:	b480      	push	{r7}
 800fa66:	b083      	sub	sp, #12
 800fa68:	af00      	add	r7, sp, #0
	__asm volatile
 800fa6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa6e:	f383 8811 	msr	BASEPRI, r3
 800fa72:	f3bf 8f6f 	isb	sy
 800fa76:	f3bf 8f4f 	dsb	sy
 800fa7a:	607b      	str	r3, [r7, #4]
}
 800fa7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fa7e:	4b0f      	ldr	r3, [pc, #60]	; (800fabc <vPortEnterCritical+0x58>)
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	3301      	adds	r3, #1
 800fa84:	4a0d      	ldr	r2, [pc, #52]	; (800fabc <vPortEnterCritical+0x58>)
 800fa86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fa88:	4b0c      	ldr	r3, [pc, #48]	; (800fabc <vPortEnterCritical+0x58>)
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	2b01      	cmp	r3, #1
 800fa8e:	d10f      	bne.n	800fab0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fa90:	4b0b      	ldr	r3, [pc, #44]	; (800fac0 <vPortEnterCritical+0x5c>)
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	b2db      	uxtb	r3, r3
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d00a      	beq.n	800fab0 <vPortEnterCritical+0x4c>
	__asm volatile
 800fa9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa9e:	f383 8811 	msr	BASEPRI, r3
 800faa2:	f3bf 8f6f 	isb	sy
 800faa6:	f3bf 8f4f 	dsb	sy
 800faaa:	603b      	str	r3, [r7, #0]
}
 800faac:	bf00      	nop
 800faae:	e7fe      	b.n	800faae <vPortEnterCritical+0x4a>
	}
}
 800fab0:	bf00      	nop
 800fab2:	370c      	adds	r7, #12
 800fab4:	46bd      	mov	sp, r7
 800fab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faba:	4770      	bx	lr
 800fabc:	20000018 	.word	0x20000018
 800fac0:	e000ed04 	.word	0xe000ed04

0800fac4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fac4:	b480      	push	{r7}
 800fac6:	b083      	sub	sp, #12
 800fac8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800faca:	4b12      	ldr	r3, [pc, #72]	; (800fb14 <vPortExitCritical+0x50>)
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d10a      	bne.n	800fae8 <vPortExitCritical+0x24>
	__asm volatile
 800fad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fad6:	f383 8811 	msr	BASEPRI, r3
 800fada:	f3bf 8f6f 	isb	sy
 800fade:	f3bf 8f4f 	dsb	sy
 800fae2:	607b      	str	r3, [r7, #4]
}
 800fae4:	bf00      	nop
 800fae6:	e7fe      	b.n	800fae6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fae8:	4b0a      	ldr	r3, [pc, #40]	; (800fb14 <vPortExitCritical+0x50>)
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	3b01      	subs	r3, #1
 800faee:	4a09      	ldr	r2, [pc, #36]	; (800fb14 <vPortExitCritical+0x50>)
 800faf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800faf2:	4b08      	ldr	r3, [pc, #32]	; (800fb14 <vPortExitCritical+0x50>)
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d105      	bne.n	800fb06 <vPortExitCritical+0x42>
 800fafa:	2300      	movs	r3, #0
 800fafc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fafe:	683b      	ldr	r3, [r7, #0]
 800fb00:	f383 8811 	msr	BASEPRI, r3
}
 800fb04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fb06:	bf00      	nop
 800fb08:	370c      	adds	r7, #12
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb10:	4770      	bx	lr
 800fb12:	bf00      	nop
 800fb14:	20000018 	.word	0x20000018
	...

0800fb20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fb20:	f3ef 8009 	mrs	r0, PSP
 800fb24:	f3bf 8f6f 	isb	sy
 800fb28:	4b15      	ldr	r3, [pc, #84]	; (800fb80 <pxCurrentTCBConst>)
 800fb2a:	681a      	ldr	r2, [r3, #0]
 800fb2c:	f01e 0f10 	tst.w	lr, #16
 800fb30:	bf08      	it	eq
 800fb32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fb36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb3a:	6010      	str	r0, [r2, #0]
 800fb3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fb40:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fb44:	f380 8811 	msr	BASEPRI, r0
 800fb48:	f3bf 8f4f 	dsb	sy
 800fb4c:	f3bf 8f6f 	isb	sy
 800fb50:	f7fe ffb8 	bl	800eac4 <vTaskSwitchContext>
 800fb54:	f04f 0000 	mov.w	r0, #0
 800fb58:	f380 8811 	msr	BASEPRI, r0
 800fb5c:	bc09      	pop	{r0, r3}
 800fb5e:	6819      	ldr	r1, [r3, #0]
 800fb60:	6808      	ldr	r0, [r1, #0]
 800fb62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb66:	f01e 0f10 	tst.w	lr, #16
 800fb6a:	bf08      	it	eq
 800fb6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fb70:	f380 8809 	msr	PSP, r0
 800fb74:	f3bf 8f6f 	isb	sy
 800fb78:	4770      	bx	lr
 800fb7a:	bf00      	nop
 800fb7c:	f3af 8000 	nop.w

0800fb80 <pxCurrentTCBConst>:
 800fb80:	20003dc0 	.word	0x20003dc0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fb84:	bf00      	nop
 800fb86:	bf00      	nop

0800fb88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b082      	sub	sp, #8
 800fb8c:	af00      	add	r7, sp, #0
	__asm volatile
 800fb8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb92:	f383 8811 	msr	BASEPRI, r3
 800fb96:	f3bf 8f6f 	isb	sy
 800fb9a:	f3bf 8f4f 	dsb	sy
 800fb9e:	607b      	str	r3, [r7, #4]
}
 800fba0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fba2:	f7fe fed5 	bl	800e950 <xTaskIncrementTick>
 800fba6:	4603      	mov	r3, r0
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d003      	beq.n	800fbb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fbac:	4b06      	ldr	r3, [pc, #24]	; (800fbc8 <xPortSysTickHandler+0x40>)
 800fbae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbb2:	601a      	str	r2, [r3, #0]
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fbb8:	683b      	ldr	r3, [r7, #0]
 800fbba:	f383 8811 	msr	BASEPRI, r3
}
 800fbbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fbc0:	bf00      	nop
 800fbc2:	3708      	adds	r7, #8
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	bd80      	pop	{r7, pc}
 800fbc8:	e000ed04 	.word	0xe000ed04

0800fbcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fbcc:	b480      	push	{r7}
 800fbce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fbd0:	4b0b      	ldr	r3, [pc, #44]	; (800fc00 <vPortSetupTimerInterrupt+0x34>)
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fbd6:	4b0b      	ldr	r3, [pc, #44]	; (800fc04 <vPortSetupTimerInterrupt+0x38>)
 800fbd8:	2200      	movs	r2, #0
 800fbda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fbdc:	4b0a      	ldr	r3, [pc, #40]	; (800fc08 <vPortSetupTimerInterrupt+0x3c>)
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	4a0a      	ldr	r2, [pc, #40]	; (800fc0c <vPortSetupTimerInterrupt+0x40>)
 800fbe2:	fba2 2303 	umull	r2, r3, r2, r3
 800fbe6:	099b      	lsrs	r3, r3, #6
 800fbe8:	4a09      	ldr	r2, [pc, #36]	; (800fc10 <vPortSetupTimerInterrupt+0x44>)
 800fbea:	3b01      	subs	r3, #1
 800fbec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fbee:	4b04      	ldr	r3, [pc, #16]	; (800fc00 <vPortSetupTimerInterrupt+0x34>)
 800fbf0:	2207      	movs	r2, #7
 800fbf2:	601a      	str	r2, [r3, #0]
}
 800fbf4:	bf00      	nop
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfc:	4770      	bx	lr
 800fbfe:	bf00      	nop
 800fc00:	e000e010 	.word	0xe000e010
 800fc04:	e000e018 	.word	0xe000e018
 800fc08:	2000000c 	.word	0x2000000c
 800fc0c:	10624dd3 	.word	0x10624dd3
 800fc10:	e000e014 	.word	0xe000e014

0800fc14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fc14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fc24 <vPortEnableVFP+0x10>
 800fc18:	6801      	ldr	r1, [r0, #0]
 800fc1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fc1e:	6001      	str	r1, [r0, #0]
 800fc20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fc22:	bf00      	nop
 800fc24:	e000ed88 	.word	0xe000ed88

0800fc28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fc28:	b480      	push	{r7}
 800fc2a:	b085      	sub	sp, #20
 800fc2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fc2e:	f3ef 8305 	mrs	r3, IPSR
 800fc32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	2b0f      	cmp	r3, #15
 800fc38:	d914      	bls.n	800fc64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fc3a:	4a17      	ldr	r2, [pc, #92]	; (800fc98 <vPortValidateInterruptPriority+0x70>)
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	4413      	add	r3, r2
 800fc40:	781b      	ldrb	r3, [r3, #0]
 800fc42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fc44:	4b15      	ldr	r3, [pc, #84]	; (800fc9c <vPortValidateInterruptPriority+0x74>)
 800fc46:	781b      	ldrb	r3, [r3, #0]
 800fc48:	7afa      	ldrb	r2, [r7, #11]
 800fc4a:	429a      	cmp	r2, r3
 800fc4c:	d20a      	bcs.n	800fc64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800fc4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc52:	f383 8811 	msr	BASEPRI, r3
 800fc56:	f3bf 8f6f 	isb	sy
 800fc5a:	f3bf 8f4f 	dsb	sy
 800fc5e:	607b      	str	r3, [r7, #4]
}
 800fc60:	bf00      	nop
 800fc62:	e7fe      	b.n	800fc62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fc64:	4b0e      	ldr	r3, [pc, #56]	; (800fca0 <vPortValidateInterruptPriority+0x78>)
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fc6c:	4b0d      	ldr	r3, [pc, #52]	; (800fca4 <vPortValidateInterruptPriority+0x7c>)
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	429a      	cmp	r2, r3
 800fc72:	d90a      	bls.n	800fc8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800fc74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc78:	f383 8811 	msr	BASEPRI, r3
 800fc7c:	f3bf 8f6f 	isb	sy
 800fc80:	f3bf 8f4f 	dsb	sy
 800fc84:	603b      	str	r3, [r7, #0]
}
 800fc86:	bf00      	nop
 800fc88:	e7fe      	b.n	800fc88 <vPortValidateInterruptPriority+0x60>
	}
 800fc8a:	bf00      	nop
 800fc8c:	3714      	adds	r7, #20
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc94:	4770      	bx	lr
 800fc96:	bf00      	nop
 800fc98:	e000e3f0 	.word	0xe000e3f0
 800fc9c:	200043ec 	.word	0x200043ec
 800fca0:	e000ed0c 	.word	0xe000ed0c
 800fca4:	200043f0 	.word	0x200043f0

0800fca8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b08a      	sub	sp, #40	; 0x28
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fcb4:	f7fe fd90 	bl	800e7d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fcb8:	4b5b      	ldr	r3, [pc, #364]	; (800fe28 <pvPortMalloc+0x180>)
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d101      	bne.n	800fcc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fcc0:	f000 f920 	bl	800ff04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fcc4:	4b59      	ldr	r3, [pc, #356]	; (800fe2c <pvPortMalloc+0x184>)
 800fcc6:	681a      	ldr	r2, [r3, #0]
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	4013      	ands	r3, r2
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	f040 8093 	bne.w	800fdf8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d01d      	beq.n	800fd14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800fcd8:	2208      	movs	r2, #8
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	4413      	add	r3, r2
 800fcde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	f003 0307 	and.w	r3, r3, #7
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d014      	beq.n	800fd14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	f023 0307 	bic.w	r3, r3, #7
 800fcf0:	3308      	adds	r3, #8
 800fcf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	f003 0307 	and.w	r3, r3, #7
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d00a      	beq.n	800fd14 <pvPortMalloc+0x6c>
	__asm volatile
 800fcfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd02:	f383 8811 	msr	BASEPRI, r3
 800fd06:	f3bf 8f6f 	isb	sy
 800fd0a:	f3bf 8f4f 	dsb	sy
 800fd0e:	617b      	str	r3, [r7, #20]
}
 800fd10:	bf00      	nop
 800fd12:	e7fe      	b.n	800fd12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d06e      	beq.n	800fdf8 <pvPortMalloc+0x150>
 800fd1a:	4b45      	ldr	r3, [pc, #276]	; (800fe30 <pvPortMalloc+0x188>)
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	687a      	ldr	r2, [r7, #4]
 800fd20:	429a      	cmp	r2, r3
 800fd22:	d869      	bhi.n	800fdf8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fd24:	4b43      	ldr	r3, [pc, #268]	; (800fe34 <pvPortMalloc+0x18c>)
 800fd26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fd28:	4b42      	ldr	r3, [pc, #264]	; (800fe34 <pvPortMalloc+0x18c>)
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fd2e:	e004      	b.n	800fd3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800fd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd3c:	685b      	ldr	r3, [r3, #4]
 800fd3e:	687a      	ldr	r2, [r7, #4]
 800fd40:	429a      	cmp	r2, r3
 800fd42:	d903      	bls.n	800fd4c <pvPortMalloc+0xa4>
 800fd44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d1f1      	bne.n	800fd30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fd4c:	4b36      	ldr	r3, [pc, #216]	; (800fe28 <pvPortMalloc+0x180>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd52:	429a      	cmp	r2, r3
 800fd54:	d050      	beq.n	800fdf8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fd56:	6a3b      	ldr	r3, [r7, #32]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	2208      	movs	r2, #8
 800fd5c:	4413      	add	r3, r2
 800fd5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fd60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd62:	681a      	ldr	r2, [r3, #0]
 800fd64:	6a3b      	ldr	r3, [r7, #32]
 800fd66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fd68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd6a:	685a      	ldr	r2, [r3, #4]
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	1ad2      	subs	r2, r2, r3
 800fd70:	2308      	movs	r3, #8
 800fd72:	005b      	lsls	r3, r3, #1
 800fd74:	429a      	cmp	r2, r3
 800fd76:	d91f      	bls.n	800fdb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fd78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	4413      	add	r3, r2
 800fd7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fd80:	69bb      	ldr	r3, [r7, #24]
 800fd82:	f003 0307 	and.w	r3, r3, #7
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d00a      	beq.n	800fda0 <pvPortMalloc+0xf8>
	__asm volatile
 800fd8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd8e:	f383 8811 	msr	BASEPRI, r3
 800fd92:	f3bf 8f6f 	isb	sy
 800fd96:	f3bf 8f4f 	dsb	sy
 800fd9a:	613b      	str	r3, [r7, #16]
}
 800fd9c:	bf00      	nop
 800fd9e:	e7fe      	b.n	800fd9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fda2:	685a      	ldr	r2, [r3, #4]
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	1ad2      	subs	r2, r2, r3
 800fda8:	69bb      	ldr	r3, [r7, #24]
 800fdaa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fdac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdae:	687a      	ldr	r2, [r7, #4]
 800fdb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fdb2:	69b8      	ldr	r0, [r7, #24]
 800fdb4:	f000 f908 	bl	800ffc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fdb8:	4b1d      	ldr	r3, [pc, #116]	; (800fe30 <pvPortMalloc+0x188>)
 800fdba:	681a      	ldr	r2, [r3, #0]
 800fdbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdbe:	685b      	ldr	r3, [r3, #4]
 800fdc0:	1ad3      	subs	r3, r2, r3
 800fdc2:	4a1b      	ldr	r2, [pc, #108]	; (800fe30 <pvPortMalloc+0x188>)
 800fdc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fdc6:	4b1a      	ldr	r3, [pc, #104]	; (800fe30 <pvPortMalloc+0x188>)
 800fdc8:	681a      	ldr	r2, [r3, #0]
 800fdca:	4b1b      	ldr	r3, [pc, #108]	; (800fe38 <pvPortMalloc+0x190>)
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	429a      	cmp	r2, r3
 800fdd0:	d203      	bcs.n	800fdda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fdd2:	4b17      	ldr	r3, [pc, #92]	; (800fe30 <pvPortMalloc+0x188>)
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	4a18      	ldr	r2, [pc, #96]	; (800fe38 <pvPortMalloc+0x190>)
 800fdd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fdda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fddc:	685a      	ldr	r2, [r3, #4]
 800fdde:	4b13      	ldr	r3, [pc, #76]	; (800fe2c <pvPortMalloc+0x184>)
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	431a      	orrs	r2, r3
 800fde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fde6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdea:	2200      	movs	r2, #0
 800fdec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fdee:	4b13      	ldr	r3, [pc, #76]	; (800fe3c <pvPortMalloc+0x194>)
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	3301      	adds	r3, #1
 800fdf4:	4a11      	ldr	r2, [pc, #68]	; (800fe3c <pvPortMalloc+0x194>)
 800fdf6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fdf8:	f7fe fcfc 	bl	800e7f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fdfc:	69fb      	ldr	r3, [r7, #28]
 800fdfe:	f003 0307 	and.w	r3, r3, #7
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d00a      	beq.n	800fe1c <pvPortMalloc+0x174>
	__asm volatile
 800fe06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe0a:	f383 8811 	msr	BASEPRI, r3
 800fe0e:	f3bf 8f6f 	isb	sy
 800fe12:	f3bf 8f4f 	dsb	sy
 800fe16:	60fb      	str	r3, [r7, #12]
}
 800fe18:	bf00      	nop
 800fe1a:	e7fe      	b.n	800fe1a <pvPortMalloc+0x172>
	return pvReturn;
 800fe1c:	69fb      	ldr	r3, [r7, #28]
}
 800fe1e:	4618      	mov	r0, r3
 800fe20:	3728      	adds	r7, #40	; 0x28
 800fe22:	46bd      	mov	sp, r7
 800fe24:	bd80      	pop	{r7, pc}
 800fe26:	bf00      	nop
 800fe28:	20007ffc 	.word	0x20007ffc
 800fe2c:	20008010 	.word	0x20008010
 800fe30:	20008000 	.word	0x20008000
 800fe34:	20007ff4 	.word	0x20007ff4
 800fe38:	20008004 	.word	0x20008004
 800fe3c:	20008008 	.word	0x20008008

0800fe40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b086      	sub	sp, #24
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d04d      	beq.n	800feee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fe52:	2308      	movs	r3, #8
 800fe54:	425b      	negs	r3, r3
 800fe56:	697a      	ldr	r2, [r7, #20]
 800fe58:	4413      	add	r3, r2
 800fe5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fe5c:	697b      	ldr	r3, [r7, #20]
 800fe5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fe60:	693b      	ldr	r3, [r7, #16]
 800fe62:	685a      	ldr	r2, [r3, #4]
 800fe64:	4b24      	ldr	r3, [pc, #144]	; (800fef8 <vPortFree+0xb8>)
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	4013      	ands	r3, r2
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d10a      	bne.n	800fe84 <vPortFree+0x44>
	__asm volatile
 800fe6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe72:	f383 8811 	msr	BASEPRI, r3
 800fe76:	f3bf 8f6f 	isb	sy
 800fe7a:	f3bf 8f4f 	dsb	sy
 800fe7e:	60fb      	str	r3, [r7, #12]
}
 800fe80:	bf00      	nop
 800fe82:	e7fe      	b.n	800fe82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fe84:	693b      	ldr	r3, [r7, #16]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d00a      	beq.n	800fea2 <vPortFree+0x62>
	__asm volatile
 800fe8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe90:	f383 8811 	msr	BASEPRI, r3
 800fe94:	f3bf 8f6f 	isb	sy
 800fe98:	f3bf 8f4f 	dsb	sy
 800fe9c:	60bb      	str	r3, [r7, #8]
}
 800fe9e:	bf00      	nop
 800fea0:	e7fe      	b.n	800fea0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fea2:	693b      	ldr	r3, [r7, #16]
 800fea4:	685a      	ldr	r2, [r3, #4]
 800fea6:	4b14      	ldr	r3, [pc, #80]	; (800fef8 <vPortFree+0xb8>)
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	4013      	ands	r3, r2
 800feac:	2b00      	cmp	r3, #0
 800feae:	d01e      	beq.n	800feee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800feb0:	693b      	ldr	r3, [r7, #16]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d11a      	bne.n	800feee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800feb8:	693b      	ldr	r3, [r7, #16]
 800feba:	685a      	ldr	r2, [r3, #4]
 800febc:	4b0e      	ldr	r3, [pc, #56]	; (800fef8 <vPortFree+0xb8>)
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	43db      	mvns	r3, r3
 800fec2:	401a      	ands	r2, r3
 800fec4:	693b      	ldr	r3, [r7, #16]
 800fec6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fec8:	f7fe fc86 	bl	800e7d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fecc:	693b      	ldr	r3, [r7, #16]
 800fece:	685a      	ldr	r2, [r3, #4]
 800fed0:	4b0a      	ldr	r3, [pc, #40]	; (800fefc <vPortFree+0xbc>)
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	4413      	add	r3, r2
 800fed6:	4a09      	ldr	r2, [pc, #36]	; (800fefc <vPortFree+0xbc>)
 800fed8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800feda:	6938      	ldr	r0, [r7, #16]
 800fedc:	f000 f874 	bl	800ffc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fee0:	4b07      	ldr	r3, [pc, #28]	; (800ff00 <vPortFree+0xc0>)
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	3301      	adds	r3, #1
 800fee6:	4a06      	ldr	r2, [pc, #24]	; (800ff00 <vPortFree+0xc0>)
 800fee8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800feea:	f7fe fc83 	bl	800e7f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800feee:	bf00      	nop
 800fef0:	3718      	adds	r7, #24
 800fef2:	46bd      	mov	sp, r7
 800fef4:	bd80      	pop	{r7, pc}
 800fef6:	bf00      	nop
 800fef8:	20008010 	.word	0x20008010
 800fefc:	20008000 	.word	0x20008000
 800ff00:	2000800c 	.word	0x2000800c

0800ff04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ff04:	b480      	push	{r7}
 800ff06:	b085      	sub	sp, #20
 800ff08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ff0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ff0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ff10:	4b27      	ldr	r3, [pc, #156]	; (800ffb0 <prvHeapInit+0xac>)
 800ff12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	f003 0307 	and.w	r3, r3, #7
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d00c      	beq.n	800ff38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	3307      	adds	r3, #7
 800ff22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	f023 0307 	bic.w	r3, r3, #7
 800ff2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ff2c:	68ba      	ldr	r2, [r7, #8]
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	1ad3      	subs	r3, r2, r3
 800ff32:	4a1f      	ldr	r2, [pc, #124]	; (800ffb0 <prvHeapInit+0xac>)
 800ff34:	4413      	add	r3, r2
 800ff36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ff3c:	4a1d      	ldr	r2, [pc, #116]	; (800ffb4 <prvHeapInit+0xb0>)
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ff42:	4b1c      	ldr	r3, [pc, #112]	; (800ffb4 <prvHeapInit+0xb0>)
 800ff44:	2200      	movs	r2, #0
 800ff46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	68ba      	ldr	r2, [r7, #8]
 800ff4c:	4413      	add	r3, r2
 800ff4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ff50:	2208      	movs	r2, #8
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	1a9b      	subs	r3, r3, r2
 800ff56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	f023 0307 	bic.w	r3, r3, #7
 800ff5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	4a15      	ldr	r2, [pc, #84]	; (800ffb8 <prvHeapInit+0xb4>)
 800ff64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ff66:	4b14      	ldr	r3, [pc, #80]	; (800ffb8 <prvHeapInit+0xb4>)
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	2200      	movs	r2, #0
 800ff6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ff6e:	4b12      	ldr	r3, [pc, #72]	; (800ffb8 <prvHeapInit+0xb4>)
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	2200      	movs	r2, #0
 800ff74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ff7a:	683b      	ldr	r3, [r7, #0]
 800ff7c:	68fa      	ldr	r2, [r7, #12]
 800ff7e:	1ad2      	subs	r2, r2, r3
 800ff80:	683b      	ldr	r3, [r7, #0]
 800ff82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ff84:	4b0c      	ldr	r3, [pc, #48]	; (800ffb8 <prvHeapInit+0xb4>)
 800ff86:	681a      	ldr	r2, [r3, #0]
 800ff88:	683b      	ldr	r3, [r7, #0]
 800ff8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ff8c:	683b      	ldr	r3, [r7, #0]
 800ff8e:	685b      	ldr	r3, [r3, #4]
 800ff90:	4a0a      	ldr	r2, [pc, #40]	; (800ffbc <prvHeapInit+0xb8>)
 800ff92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ff94:	683b      	ldr	r3, [r7, #0]
 800ff96:	685b      	ldr	r3, [r3, #4]
 800ff98:	4a09      	ldr	r2, [pc, #36]	; (800ffc0 <prvHeapInit+0xbc>)
 800ff9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ff9c:	4b09      	ldr	r3, [pc, #36]	; (800ffc4 <prvHeapInit+0xc0>)
 800ff9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ffa2:	601a      	str	r2, [r3, #0]
}
 800ffa4:	bf00      	nop
 800ffa6:	3714      	adds	r7, #20
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffae:	4770      	bx	lr
 800ffb0:	200043f4 	.word	0x200043f4
 800ffb4:	20007ff4 	.word	0x20007ff4
 800ffb8:	20007ffc 	.word	0x20007ffc
 800ffbc:	20008004 	.word	0x20008004
 800ffc0:	20008000 	.word	0x20008000
 800ffc4:	20008010 	.word	0x20008010

0800ffc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ffc8:	b480      	push	{r7}
 800ffca:	b085      	sub	sp, #20
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ffd0:	4b28      	ldr	r3, [pc, #160]	; (8010074 <prvInsertBlockIntoFreeList+0xac>)
 800ffd2:	60fb      	str	r3, [r7, #12]
 800ffd4:	e002      	b.n	800ffdc <prvInsertBlockIntoFreeList+0x14>
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	60fb      	str	r3, [r7, #12]
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	687a      	ldr	r2, [r7, #4]
 800ffe2:	429a      	cmp	r2, r3
 800ffe4:	d8f7      	bhi.n	800ffd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	685b      	ldr	r3, [r3, #4]
 800ffee:	68ba      	ldr	r2, [r7, #8]
 800fff0:	4413      	add	r3, r2
 800fff2:	687a      	ldr	r2, [r7, #4]
 800fff4:	429a      	cmp	r2, r3
 800fff6:	d108      	bne.n	801000a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	685a      	ldr	r2, [r3, #4]
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	685b      	ldr	r3, [r3, #4]
 8010000:	441a      	add	r2, r3
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	685b      	ldr	r3, [r3, #4]
 8010012:	68ba      	ldr	r2, [r7, #8]
 8010014:	441a      	add	r2, r3
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	429a      	cmp	r2, r3
 801001c:	d118      	bne.n	8010050 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	681a      	ldr	r2, [r3, #0]
 8010022:	4b15      	ldr	r3, [pc, #84]	; (8010078 <prvInsertBlockIntoFreeList+0xb0>)
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	429a      	cmp	r2, r3
 8010028:	d00d      	beq.n	8010046 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	685a      	ldr	r2, [r3, #4]
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	685b      	ldr	r3, [r3, #4]
 8010034:	441a      	add	r2, r3
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	681a      	ldr	r2, [r3, #0]
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	601a      	str	r2, [r3, #0]
 8010044:	e008      	b.n	8010058 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010046:	4b0c      	ldr	r3, [pc, #48]	; (8010078 <prvInsertBlockIntoFreeList+0xb0>)
 8010048:	681a      	ldr	r2, [r3, #0]
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	601a      	str	r2, [r3, #0]
 801004e:	e003      	b.n	8010058 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	681a      	ldr	r2, [r3, #0]
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010058:	68fa      	ldr	r2, [r7, #12]
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	429a      	cmp	r2, r3
 801005e:	d002      	beq.n	8010066 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	687a      	ldr	r2, [r7, #4]
 8010064:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010066:	bf00      	nop
 8010068:	3714      	adds	r7, #20
 801006a:	46bd      	mov	sp, r7
 801006c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010070:	4770      	bx	lr
 8010072:	bf00      	nop
 8010074:	20007ff4 	.word	0x20007ff4
 8010078:	20007ffc 	.word	0x20007ffc

0801007c <pow>:
 801007c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801007e:	ed2d 8b02 	vpush	{d8}
 8010082:	eeb0 8a40 	vmov.f32	s16, s0
 8010086:	eef0 8a60 	vmov.f32	s17, s1
 801008a:	ec55 4b11 	vmov	r4, r5, d1
 801008e:	f000 fbaf 	bl	80107f0 <__ieee754_pow>
 8010092:	4622      	mov	r2, r4
 8010094:	462b      	mov	r3, r5
 8010096:	4620      	mov	r0, r4
 8010098:	4629      	mov	r1, r5
 801009a:	ec57 6b10 	vmov	r6, r7, d0
 801009e:	f7f0 fd55 	bl	8000b4c <__aeabi_dcmpun>
 80100a2:	2800      	cmp	r0, #0
 80100a4:	d13b      	bne.n	801011e <pow+0xa2>
 80100a6:	ec51 0b18 	vmov	r0, r1, d8
 80100aa:	2200      	movs	r2, #0
 80100ac:	2300      	movs	r3, #0
 80100ae:	f7f0 fd1b 	bl	8000ae8 <__aeabi_dcmpeq>
 80100b2:	b1b8      	cbz	r0, 80100e4 <pow+0x68>
 80100b4:	2200      	movs	r2, #0
 80100b6:	2300      	movs	r3, #0
 80100b8:	4620      	mov	r0, r4
 80100ba:	4629      	mov	r1, r5
 80100bc:	f7f0 fd14 	bl	8000ae8 <__aeabi_dcmpeq>
 80100c0:	2800      	cmp	r0, #0
 80100c2:	d146      	bne.n	8010152 <pow+0xd6>
 80100c4:	ec45 4b10 	vmov	d0, r4, r5
 80100c8:	f000 f922 	bl	8010310 <finite>
 80100cc:	b338      	cbz	r0, 801011e <pow+0xa2>
 80100ce:	2200      	movs	r2, #0
 80100d0:	2300      	movs	r3, #0
 80100d2:	4620      	mov	r0, r4
 80100d4:	4629      	mov	r1, r5
 80100d6:	f7f0 fd11 	bl	8000afc <__aeabi_dcmplt>
 80100da:	b300      	cbz	r0, 801011e <pow+0xa2>
 80100dc:	f002 feb2 	bl	8012e44 <__errno>
 80100e0:	2322      	movs	r3, #34	; 0x22
 80100e2:	e01b      	b.n	801011c <pow+0xa0>
 80100e4:	ec47 6b10 	vmov	d0, r6, r7
 80100e8:	f000 f912 	bl	8010310 <finite>
 80100ec:	b9e0      	cbnz	r0, 8010128 <pow+0xac>
 80100ee:	eeb0 0a48 	vmov.f32	s0, s16
 80100f2:	eef0 0a68 	vmov.f32	s1, s17
 80100f6:	f000 f90b 	bl	8010310 <finite>
 80100fa:	b1a8      	cbz	r0, 8010128 <pow+0xac>
 80100fc:	ec45 4b10 	vmov	d0, r4, r5
 8010100:	f000 f906 	bl	8010310 <finite>
 8010104:	b180      	cbz	r0, 8010128 <pow+0xac>
 8010106:	4632      	mov	r2, r6
 8010108:	463b      	mov	r3, r7
 801010a:	4630      	mov	r0, r6
 801010c:	4639      	mov	r1, r7
 801010e:	f7f0 fd1d 	bl	8000b4c <__aeabi_dcmpun>
 8010112:	2800      	cmp	r0, #0
 8010114:	d0e2      	beq.n	80100dc <pow+0x60>
 8010116:	f002 fe95 	bl	8012e44 <__errno>
 801011a:	2321      	movs	r3, #33	; 0x21
 801011c:	6003      	str	r3, [r0, #0]
 801011e:	ecbd 8b02 	vpop	{d8}
 8010122:	ec47 6b10 	vmov	d0, r6, r7
 8010126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010128:	2200      	movs	r2, #0
 801012a:	2300      	movs	r3, #0
 801012c:	4630      	mov	r0, r6
 801012e:	4639      	mov	r1, r7
 8010130:	f7f0 fcda 	bl	8000ae8 <__aeabi_dcmpeq>
 8010134:	2800      	cmp	r0, #0
 8010136:	d0f2      	beq.n	801011e <pow+0xa2>
 8010138:	eeb0 0a48 	vmov.f32	s0, s16
 801013c:	eef0 0a68 	vmov.f32	s1, s17
 8010140:	f000 f8e6 	bl	8010310 <finite>
 8010144:	2800      	cmp	r0, #0
 8010146:	d0ea      	beq.n	801011e <pow+0xa2>
 8010148:	ec45 4b10 	vmov	d0, r4, r5
 801014c:	f000 f8e0 	bl	8010310 <finite>
 8010150:	e7c3      	b.n	80100da <pow+0x5e>
 8010152:	4f01      	ldr	r7, [pc, #4]	; (8010158 <pow+0xdc>)
 8010154:	2600      	movs	r6, #0
 8010156:	e7e2      	b.n	801011e <pow+0xa2>
 8010158:	3ff00000 	.word	0x3ff00000

0801015c <sqrt>:
 801015c:	b538      	push	{r3, r4, r5, lr}
 801015e:	ed2d 8b02 	vpush	{d8}
 8010162:	ec55 4b10 	vmov	r4, r5, d0
 8010166:	f000 f8df 	bl	8010328 <__ieee754_sqrt>
 801016a:	4622      	mov	r2, r4
 801016c:	462b      	mov	r3, r5
 801016e:	4620      	mov	r0, r4
 8010170:	4629      	mov	r1, r5
 8010172:	eeb0 8a40 	vmov.f32	s16, s0
 8010176:	eef0 8a60 	vmov.f32	s17, s1
 801017a:	f7f0 fce7 	bl	8000b4c <__aeabi_dcmpun>
 801017e:	b990      	cbnz	r0, 80101a6 <sqrt+0x4a>
 8010180:	2200      	movs	r2, #0
 8010182:	2300      	movs	r3, #0
 8010184:	4620      	mov	r0, r4
 8010186:	4629      	mov	r1, r5
 8010188:	f7f0 fcb8 	bl	8000afc <__aeabi_dcmplt>
 801018c:	b158      	cbz	r0, 80101a6 <sqrt+0x4a>
 801018e:	f002 fe59 	bl	8012e44 <__errno>
 8010192:	2321      	movs	r3, #33	; 0x21
 8010194:	6003      	str	r3, [r0, #0]
 8010196:	2200      	movs	r2, #0
 8010198:	2300      	movs	r3, #0
 801019a:	4610      	mov	r0, r2
 801019c:	4619      	mov	r1, r3
 801019e:	f7f0 fb65 	bl	800086c <__aeabi_ddiv>
 80101a2:	ec41 0b18 	vmov	d8, r0, r1
 80101a6:	eeb0 0a48 	vmov.f32	s0, s16
 80101aa:	eef0 0a68 	vmov.f32	s1, s17
 80101ae:	ecbd 8b02 	vpop	{d8}
 80101b2:	bd38      	pop	{r3, r4, r5, pc}
 80101b4:	0000      	movs	r0, r0
	...

080101b8 <cos>:
 80101b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80101ba:	ec53 2b10 	vmov	r2, r3, d0
 80101be:	4826      	ldr	r0, [pc, #152]	; (8010258 <cos+0xa0>)
 80101c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80101c4:	4281      	cmp	r1, r0
 80101c6:	dc06      	bgt.n	80101d6 <cos+0x1e>
 80101c8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8010250 <cos+0x98>
 80101cc:	b005      	add	sp, #20
 80101ce:	f85d eb04 	ldr.w	lr, [sp], #4
 80101d2:	f000 b985 	b.w	80104e0 <__kernel_cos>
 80101d6:	4821      	ldr	r0, [pc, #132]	; (801025c <cos+0xa4>)
 80101d8:	4281      	cmp	r1, r0
 80101da:	dd09      	ble.n	80101f0 <cos+0x38>
 80101dc:	ee10 0a10 	vmov	r0, s0
 80101e0:	4619      	mov	r1, r3
 80101e2:	f7f0 f861 	bl	80002a8 <__aeabi_dsub>
 80101e6:	ec41 0b10 	vmov	d0, r0, r1
 80101ea:	b005      	add	sp, #20
 80101ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80101f0:	4668      	mov	r0, sp
 80101f2:	f001 f829 	bl	8011248 <__ieee754_rem_pio2>
 80101f6:	f000 0003 	and.w	r0, r0, #3
 80101fa:	2801      	cmp	r0, #1
 80101fc:	d00b      	beq.n	8010216 <cos+0x5e>
 80101fe:	2802      	cmp	r0, #2
 8010200:	d016      	beq.n	8010230 <cos+0x78>
 8010202:	b9e0      	cbnz	r0, 801023e <cos+0x86>
 8010204:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010208:	ed9d 0b00 	vldr	d0, [sp]
 801020c:	f000 f968 	bl	80104e0 <__kernel_cos>
 8010210:	ec51 0b10 	vmov	r0, r1, d0
 8010214:	e7e7      	b.n	80101e6 <cos+0x2e>
 8010216:	ed9d 1b02 	vldr	d1, [sp, #8]
 801021a:	ed9d 0b00 	vldr	d0, [sp]
 801021e:	f000 fa27 	bl	8010670 <__kernel_sin>
 8010222:	ec53 2b10 	vmov	r2, r3, d0
 8010226:	ee10 0a10 	vmov	r0, s0
 801022a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801022e:	e7da      	b.n	80101e6 <cos+0x2e>
 8010230:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010234:	ed9d 0b00 	vldr	d0, [sp]
 8010238:	f000 f952 	bl	80104e0 <__kernel_cos>
 801023c:	e7f1      	b.n	8010222 <cos+0x6a>
 801023e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010242:	ed9d 0b00 	vldr	d0, [sp]
 8010246:	2001      	movs	r0, #1
 8010248:	f000 fa12 	bl	8010670 <__kernel_sin>
 801024c:	e7e0      	b.n	8010210 <cos+0x58>
 801024e:	bf00      	nop
	...
 8010258:	3fe921fb 	.word	0x3fe921fb
 801025c:	7fefffff 	.word	0x7fefffff

08010260 <sin>:
 8010260:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010262:	ec53 2b10 	vmov	r2, r3, d0
 8010266:	4828      	ldr	r0, [pc, #160]	; (8010308 <sin+0xa8>)
 8010268:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801026c:	4281      	cmp	r1, r0
 801026e:	dc07      	bgt.n	8010280 <sin+0x20>
 8010270:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8010300 <sin+0xa0>
 8010274:	2000      	movs	r0, #0
 8010276:	b005      	add	sp, #20
 8010278:	f85d eb04 	ldr.w	lr, [sp], #4
 801027c:	f000 b9f8 	b.w	8010670 <__kernel_sin>
 8010280:	4822      	ldr	r0, [pc, #136]	; (801030c <sin+0xac>)
 8010282:	4281      	cmp	r1, r0
 8010284:	dd09      	ble.n	801029a <sin+0x3a>
 8010286:	ee10 0a10 	vmov	r0, s0
 801028a:	4619      	mov	r1, r3
 801028c:	f7f0 f80c 	bl	80002a8 <__aeabi_dsub>
 8010290:	ec41 0b10 	vmov	d0, r0, r1
 8010294:	b005      	add	sp, #20
 8010296:	f85d fb04 	ldr.w	pc, [sp], #4
 801029a:	4668      	mov	r0, sp
 801029c:	f000 ffd4 	bl	8011248 <__ieee754_rem_pio2>
 80102a0:	f000 0003 	and.w	r0, r0, #3
 80102a4:	2801      	cmp	r0, #1
 80102a6:	d00c      	beq.n	80102c2 <sin+0x62>
 80102a8:	2802      	cmp	r0, #2
 80102aa:	d011      	beq.n	80102d0 <sin+0x70>
 80102ac:	b9f0      	cbnz	r0, 80102ec <sin+0x8c>
 80102ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80102b2:	ed9d 0b00 	vldr	d0, [sp]
 80102b6:	2001      	movs	r0, #1
 80102b8:	f000 f9da 	bl	8010670 <__kernel_sin>
 80102bc:	ec51 0b10 	vmov	r0, r1, d0
 80102c0:	e7e6      	b.n	8010290 <sin+0x30>
 80102c2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80102c6:	ed9d 0b00 	vldr	d0, [sp]
 80102ca:	f000 f909 	bl	80104e0 <__kernel_cos>
 80102ce:	e7f5      	b.n	80102bc <sin+0x5c>
 80102d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80102d4:	ed9d 0b00 	vldr	d0, [sp]
 80102d8:	2001      	movs	r0, #1
 80102da:	f000 f9c9 	bl	8010670 <__kernel_sin>
 80102de:	ec53 2b10 	vmov	r2, r3, d0
 80102e2:	ee10 0a10 	vmov	r0, s0
 80102e6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80102ea:	e7d1      	b.n	8010290 <sin+0x30>
 80102ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 80102f0:	ed9d 0b00 	vldr	d0, [sp]
 80102f4:	f000 f8f4 	bl	80104e0 <__kernel_cos>
 80102f8:	e7f1      	b.n	80102de <sin+0x7e>
 80102fa:	bf00      	nop
 80102fc:	f3af 8000 	nop.w
	...
 8010308:	3fe921fb 	.word	0x3fe921fb
 801030c:	7fefffff 	.word	0x7fefffff

08010310 <finite>:
 8010310:	b082      	sub	sp, #8
 8010312:	ed8d 0b00 	vstr	d0, [sp]
 8010316:	9801      	ldr	r0, [sp, #4]
 8010318:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801031c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8010320:	0fc0      	lsrs	r0, r0, #31
 8010322:	b002      	add	sp, #8
 8010324:	4770      	bx	lr
	...

08010328 <__ieee754_sqrt>:
 8010328:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801032c:	ec55 4b10 	vmov	r4, r5, d0
 8010330:	4e67      	ldr	r6, [pc, #412]	; (80104d0 <__ieee754_sqrt+0x1a8>)
 8010332:	43ae      	bics	r6, r5
 8010334:	ee10 0a10 	vmov	r0, s0
 8010338:	ee10 2a10 	vmov	r2, s0
 801033c:	4629      	mov	r1, r5
 801033e:	462b      	mov	r3, r5
 8010340:	d10d      	bne.n	801035e <__ieee754_sqrt+0x36>
 8010342:	f7f0 f969 	bl	8000618 <__aeabi_dmul>
 8010346:	4602      	mov	r2, r0
 8010348:	460b      	mov	r3, r1
 801034a:	4620      	mov	r0, r4
 801034c:	4629      	mov	r1, r5
 801034e:	f7ef ffad 	bl	80002ac <__adddf3>
 8010352:	4604      	mov	r4, r0
 8010354:	460d      	mov	r5, r1
 8010356:	ec45 4b10 	vmov	d0, r4, r5
 801035a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801035e:	2d00      	cmp	r5, #0
 8010360:	dc0b      	bgt.n	801037a <__ieee754_sqrt+0x52>
 8010362:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010366:	4326      	orrs	r6, r4
 8010368:	d0f5      	beq.n	8010356 <__ieee754_sqrt+0x2e>
 801036a:	b135      	cbz	r5, 801037a <__ieee754_sqrt+0x52>
 801036c:	f7ef ff9c 	bl	80002a8 <__aeabi_dsub>
 8010370:	4602      	mov	r2, r0
 8010372:	460b      	mov	r3, r1
 8010374:	f7f0 fa7a 	bl	800086c <__aeabi_ddiv>
 8010378:	e7eb      	b.n	8010352 <__ieee754_sqrt+0x2a>
 801037a:	1509      	asrs	r1, r1, #20
 801037c:	f000 808d 	beq.w	801049a <__ieee754_sqrt+0x172>
 8010380:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010384:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8010388:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801038c:	07c9      	lsls	r1, r1, #31
 801038e:	bf5c      	itt	pl
 8010390:	005b      	lslpl	r3, r3, #1
 8010392:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8010396:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801039a:	bf58      	it	pl
 801039c:	0052      	lslpl	r2, r2, #1
 801039e:	2500      	movs	r5, #0
 80103a0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80103a4:	1076      	asrs	r6, r6, #1
 80103a6:	0052      	lsls	r2, r2, #1
 80103a8:	f04f 0e16 	mov.w	lr, #22
 80103ac:	46ac      	mov	ip, r5
 80103ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80103b2:	eb0c 0001 	add.w	r0, ip, r1
 80103b6:	4298      	cmp	r0, r3
 80103b8:	bfde      	ittt	le
 80103ba:	1a1b      	suble	r3, r3, r0
 80103bc:	eb00 0c01 	addle.w	ip, r0, r1
 80103c0:	186d      	addle	r5, r5, r1
 80103c2:	005b      	lsls	r3, r3, #1
 80103c4:	f1be 0e01 	subs.w	lr, lr, #1
 80103c8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80103cc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80103d0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80103d4:	d1ed      	bne.n	80103b2 <__ieee754_sqrt+0x8a>
 80103d6:	4674      	mov	r4, lr
 80103d8:	2720      	movs	r7, #32
 80103da:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80103de:	4563      	cmp	r3, ip
 80103e0:	eb01 000e 	add.w	r0, r1, lr
 80103e4:	dc02      	bgt.n	80103ec <__ieee754_sqrt+0xc4>
 80103e6:	d113      	bne.n	8010410 <__ieee754_sqrt+0xe8>
 80103e8:	4290      	cmp	r0, r2
 80103ea:	d811      	bhi.n	8010410 <__ieee754_sqrt+0xe8>
 80103ec:	2800      	cmp	r0, #0
 80103ee:	eb00 0e01 	add.w	lr, r0, r1
 80103f2:	da57      	bge.n	80104a4 <__ieee754_sqrt+0x17c>
 80103f4:	f1be 0f00 	cmp.w	lr, #0
 80103f8:	db54      	blt.n	80104a4 <__ieee754_sqrt+0x17c>
 80103fa:	f10c 0801 	add.w	r8, ip, #1
 80103fe:	eba3 030c 	sub.w	r3, r3, ip
 8010402:	4290      	cmp	r0, r2
 8010404:	bf88      	it	hi
 8010406:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801040a:	1a12      	subs	r2, r2, r0
 801040c:	440c      	add	r4, r1
 801040e:	46c4      	mov	ip, r8
 8010410:	005b      	lsls	r3, r3, #1
 8010412:	3f01      	subs	r7, #1
 8010414:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8010418:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801041c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8010420:	d1dd      	bne.n	80103de <__ieee754_sqrt+0xb6>
 8010422:	4313      	orrs	r3, r2
 8010424:	d01b      	beq.n	801045e <__ieee754_sqrt+0x136>
 8010426:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80104d4 <__ieee754_sqrt+0x1ac>
 801042a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80104d8 <__ieee754_sqrt+0x1b0>
 801042e:	e9da 0100 	ldrd	r0, r1, [sl]
 8010432:	e9db 2300 	ldrd	r2, r3, [fp]
 8010436:	f7ef ff37 	bl	80002a8 <__aeabi_dsub>
 801043a:	e9da 8900 	ldrd	r8, r9, [sl]
 801043e:	4602      	mov	r2, r0
 8010440:	460b      	mov	r3, r1
 8010442:	4640      	mov	r0, r8
 8010444:	4649      	mov	r1, r9
 8010446:	f7f0 fb63 	bl	8000b10 <__aeabi_dcmple>
 801044a:	b140      	cbz	r0, 801045e <__ieee754_sqrt+0x136>
 801044c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8010450:	e9da 0100 	ldrd	r0, r1, [sl]
 8010454:	e9db 2300 	ldrd	r2, r3, [fp]
 8010458:	d126      	bne.n	80104a8 <__ieee754_sqrt+0x180>
 801045a:	3501      	adds	r5, #1
 801045c:	463c      	mov	r4, r7
 801045e:	106a      	asrs	r2, r5, #1
 8010460:	0863      	lsrs	r3, r4, #1
 8010462:	07e9      	lsls	r1, r5, #31
 8010464:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8010468:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801046c:	bf48      	it	mi
 801046e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8010472:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8010476:	461c      	mov	r4, r3
 8010478:	e76d      	b.n	8010356 <__ieee754_sqrt+0x2e>
 801047a:	0ad3      	lsrs	r3, r2, #11
 801047c:	3815      	subs	r0, #21
 801047e:	0552      	lsls	r2, r2, #21
 8010480:	2b00      	cmp	r3, #0
 8010482:	d0fa      	beq.n	801047a <__ieee754_sqrt+0x152>
 8010484:	02dc      	lsls	r4, r3, #11
 8010486:	d50a      	bpl.n	801049e <__ieee754_sqrt+0x176>
 8010488:	f1c1 0420 	rsb	r4, r1, #32
 801048c:	fa22 f404 	lsr.w	r4, r2, r4
 8010490:	1e4d      	subs	r5, r1, #1
 8010492:	408a      	lsls	r2, r1
 8010494:	4323      	orrs	r3, r4
 8010496:	1b41      	subs	r1, r0, r5
 8010498:	e772      	b.n	8010380 <__ieee754_sqrt+0x58>
 801049a:	4608      	mov	r0, r1
 801049c:	e7f0      	b.n	8010480 <__ieee754_sqrt+0x158>
 801049e:	005b      	lsls	r3, r3, #1
 80104a0:	3101      	adds	r1, #1
 80104a2:	e7ef      	b.n	8010484 <__ieee754_sqrt+0x15c>
 80104a4:	46e0      	mov	r8, ip
 80104a6:	e7aa      	b.n	80103fe <__ieee754_sqrt+0xd6>
 80104a8:	f7ef ff00 	bl	80002ac <__adddf3>
 80104ac:	e9da 8900 	ldrd	r8, r9, [sl]
 80104b0:	4602      	mov	r2, r0
 80104b2:	460b      	mov	r3, r1
 80104b4:	4640      	mov	r0, r8
 80104b6:	4649      	mov	r1, r9
 80104b8:	f7f0 fb20 	bl	8000afc <__aeabi_dcmplt>
 80104bc:	b120      	cbz	r0, 80104c8 <__ieee754_sqrt+0x1a0>
 80104be:	1ca0      	adds	r0, r4, #2
 80104c0:	bf08      	it	eq
 80104c2:	3501      	addeq	r5, #1
 80104c4:	3402      	adds	r4, #2
 80104c6:	e7ca      	b.n	801045e <__ieee754_sqrt+0x136>
 80104c8:	3401      	adds	r4, #1
 80104ca:	f024 0401 	bic.w	r4, r4, #1
 80104ce:	e7c6      	b.n	801045e <__ieee754_sqrt+0x136>
 80104d0:	7ff00000 	.word	0x7ff00000
 80104d4:	20000020 	.word	0x20000020
 80104d8:	20000028 	.word	0x20000028
 80104dc:	00000000 	.word	0x00000000

080104e0 <__kernel_cos>:
 80104e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104e4:	ec57 6b10 	vmov	r6, r7, d0
 80104e8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80104ec:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80104f0:	ed8d 1b00 	vstr	d1, [sp]
 80104f4:	da07      	bge.n	8010506 <__kernel_cos+0x26>
 80104f6:	ee10 0a10 	vmov	r0, s0
 80104fa:	4639      	mov	r1, r7
 80104fc:	f7f0 fb3c 	bl	8000b78 <__aeabi_d2iz>
 8010500:	2800      	cmp	r0, #0
 8010502:	f000 8088 	beq.w	8010616 <__kernel_cos+0x136>
 8010506:	4632      	mov	r2, r6
 8010508:	463b      	mov	r3, r7
 801050a:	4630      	mov	r0, r6
 801050c:	4639      	mov	r1, r7
 801050e:	f7f0 f883 	bl	8000618 <__aeabi_dmul>
 8010512:	4b51      	ldr	r3, [pc, #324]	; (8010658 <__kernel_cos+0x178>)
 8010514:	2200      	movs	r2, #0
 8010516:	4604      	mov	r4, r0
 8010518:	460d      	mov	r5, r1
 801051a:	f7f0 f87d 	bl	8000618 <__aeabi_dmul>
 801051e:	a340      	add	r3, pc, #256	; (adr r3, 8010620 <__kernel_cos+0x140>)
 8010520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010524:	4682      	mov	sl, r0
 8010526:	468b      	mov	fp, r1
 8010528:	4620      	mov	r0, r4
 801052a:	4629      	mov	r1, r5
 801052c:	f7f0 f874 	bl	8000618 <__aeabi_dmul>
 8010530:	a33d      	add	r3, pc, #244	; (adr r3, 8010628 <__kernel_cos+0x148>)
 8010532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010536:	f7ef feb9 	bl	80002ac <__adddf3>
 801053a:	4622      	mov	r2, r4
 801053c:	462b      	mov	r3, r5
 801053e:	f7f0 f86b 	bl	8000618 <__aeabi_dmul>
 8010542:	a33b      	add	r3, pc, #236	; (adr r3, 8010630 <__kernel_cos+0x150>)
 8010544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010548:	f7ef feae 	bl	80002a8 <__aeabi_dsub>
 801054c:	4622      	mov	r2, r4
 801054e:	462b      	mov	r3, r5
 8010550:	f7f0 f862 	bl	8000618 <__aeabi_dmul>
 8010554:	a338      	add	r3, pc, #224	; (adr r3, 8010638 <__kernel_cos+0x158>)
 8010556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801055a:	f7ef fea7 	bl	80002ac <__adddf3>
 801055e:	4622      	mov	r2, r4
 8010560:	462b      	mov	r3, r5
 8010562:	f7f0 f859 	bl	8000618 <__aeabi_dmul>
 8010566:	a336      	add	r3, pc, #216	; (adr r3, 8010640 <__kernel_cos+0x160>)
 8010568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801056c:	f7ef fe9c 	bl	80002a8 <__aeabi_dsub>
 8010570:	4622      	mov	r2, r4
 8010572:	462b      	mov	r3, r5
 8010574:	f7f0 f850 	bl	8000618 <__aeabi_dmul>
 8010578:	a333      	add	r3, pc, #204	; (adr r3, 8010648 <__kernel_cos+0x168>)
 801057a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801057e:	f7ef fe95 	bl	80002ac <__adddf3>
 8010582:	4622      	mov	r2, r4
 8010584:	462b      	mov	r3, r5
 8010586:	f7f0 f847 	bl	8000618 <__aeabi_dmul>
 801058a:	4622      	mov	r2, r4
 801058c:	462b      	mov	r3, r5
 801058e:	f7f0 f843 	bl	8000618 <__aeabi_dmul>
 8010592:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010596:	4604      	mov	r4, r0
 8010598:	460d      	mov	r5, r1
 801059a:	4630      	mov	r0, r6
 801059c:	4639      	mov	r1, r7
 801059e:	f7f0 f83b 	bl	8000618 <__aeabi_dmul>
 80105a2:	460b      	mov	r3, r1
 80105a4:	4602      	mov	r2, r0
 80105a6:	4629      	mov	r1, r5
 80105a8:	4620      	mov	r0, r4
 80105aa:	f7ef fe7d 	bl	80002a8 <__aeabi_dsub>
 80105ae:	4b2b      	ldr	r3, [pc, #172]	; (801065c <__kernel_cos+0x17c>)
 80105b0:	4598      	cmp	r8, r3
 80105b2:	4606      	mov	r6, r0
 80105b4:	460f      	mov	r7, r1
 80105b6:	dc10      	bgt.n	80105da <__kernel_cos+0xfa>
 80105b8:	4602      	mov	r2, r0
 80105ba:	460b      	mov	r3, r1
 80105bc:	4650      	mov	r0, sl
 80105be:	4659      	mov	r1, fp
 80105c0:	f7ef fe72 	bl	80002a8 <__aeabi_dsub>
 80105c4:	460b      	mov	r3, r1
 80105c6:	4926      	ldr	r1, [pc, #152]	; (8010660 <__kernel_cos+0x180>)
 80105c8:	4602      	mov	r2, r0
 80105ca:	2000      	movs	r0, #0
 80105cc:	f7ef fe6c 	bl	80002a8 <__aeabi_dsub>
 80105d0:	ec41 0b10 	vmov	d0, r0, r1
 80105d4:	b003      	add	sp, #12
 80105d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105da:	4b22      	ldr	r3, [pc, #136]	; (8010664 <__kernel_cos+0x184>)
 80105dc:	4920      	ldr	r1, [pc, #128]	; (8010660 <__kernel_cos+0x180>)
 80105de:	4598      	cmp	r8, r3
 80105e0:	bfcc      	ite	gt
 80105e2:	4d21      	ldrgt	r5, [pc, #132]	; (8010668 <__kernel_cos+0x188>)
 80105e4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80105e8:	2400      	movs	r4, #0
 80105ea:	4622      	mov	r2, r4
 80105ec:	462b      	mov	r3, r5
 80105ee:	2000      	movs	r0, #0
 80105f0:	f7ef fe5a 	bl	80002a8 <__aeabi_dsub>
 80105f4:	4622      	mov	r2, r4
 80105f6:	4680      	mov	r8, r0
 80105f8:	4689      	mov	r9, r1
 80105fa:	462b      	mov	r3, r5
 80105fc:	4650      	mov	r0, sl
 80105fe:	4659      	mov	r1, fp
 8010600:	f7ef fe52 	bl	80002a8 <__aeabi_dsub>
 8010604:	4632      	mov	r2, r6
 8010606:	463b      	mov	r3, r7
 8010608:	f7ef fe4e 	bl	80002a8 <__aeabi_dsub>
 801060c:	4602      	mov	r2, r0
 801060e:	460b      	mov	r3, r1
 8010610:	4640      	mov	r0, r8
 8010612:	4649      	mov	r1, r9
 8010614:	e7da      	b.n	80105cc <__kernel_cos+0xec>
 8010616:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8010650 <__kernel_cos+0x170>
 801061a:	e7db      	b.n	80105d4 <__kernel_cos+0xf4>
 801061c:	f3af 8000 	nop.w
 8010620:	be8838d4 	.word	0xbe8838d4
 8010624:	bda8fae9 	.word	0xbda8fae9
 8010628:	bdb4b1c4 	.word	0xbdb4b1c4
 801062c:	3e21ee9e 	.word	0x3e21ee9e
 8010630:	809c52ad 	.word	0x809c52ad
 8010634:	3e927e4f 	.word	0x3e927e4f
 8010638:	19cb1590 	.word	0x19cb1590
 801063c:	3efa01a0 	.word	0x3efa01a0
 8010640:	16c15177 	.word	0x16c15177
 8010644:	3f56c16c 	.word	0x3f56c16c
 8010648:	5555554c 	.word	0x5555554c
 801064c:	3fa55555 	.word	0x3fa55555
 8010650:	00000000 	.word	0x00000000
 8010654:	3ff00000 	.word	0x3ff00000
 8010658:	3fe00000 	.word	0x3fe00000
 801065c:	3fd33332 	.word	0x3fd33332
 8010660:	3ff00000 	.word	0x3ff00000
 8010664:	3fe90000 	.word	0x3fe90000
 8010668:	3fd20000 	.word	0x3fd20000
 801066c:	00000000 	.word	0x00000000

08010670 <__kernel_sin>:
 8010670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010674:	ed2d 8b04 	vpush	{d8-d9}
 8010678:	eeb0 8a41 	vmov.f32	s16, s2
 801067c:	eef0 8a61 	vmov.f32	s17, s3
 8010680:	ec55 4b10 	vmov	r4, r5, d0
 8010684:	b083      	sub	sp, #12
 8010686:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801068a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801068e:	9001      	str	r0, [sp, #4]
 8010690:	da06      	bge.n	80106a0 <__kernel_sin+0x30>
 8010692:	ee10 0a10 	vmov	r0, s0
 8010696:	4629      	mov	r1, r5
 8010698:	f7f0 fa6e 	bl	8000b78 <__aeabi_d2iz>
 801069c:	2800      	cmp	r0, #0
 801069e:	d051      	beq.n	8010744 <__kernel_sin+0xd4>
 80106a0:	4622      	mov	r2, r4
 80106a2:	462b      	mov	r3, r5
 80106a4:	4620      	mov	r0, r4
 80106a6:	4629      	mov	r1, r5
 80106a8:	f7ef ffb6 	bl	8000618 <__aeabi_dmul>
 80106ac:	4682      	mov	sl, r0
 80106ae:	468b      	mov	fp, r1
 80106b0:	4602      	mov	r2, r0
 80106b2:	460b      	mov	r3, r1
 80106b4:	4620      	mov	r0, r4
 80106b6:	4629      	mov	r1, r5
 80106b8:	f7ef ffae 	bl	8000618 <__aeabi_dmul>
 80106bc:	a341      	add	r3, pc, #260	; (adr r3, 80107c4 <__kernel_sin+0x154>)
 80106be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106c2:	4680      	mov	r8, r0
 80106c4:	4689      	mov	r9, r1
 80106c6:	4650      	mov	r0, sl
 80106c8:	4659      	mov	r1, fp
 80106ca:	f7ef ffa5 	bl	8000618 <__aeabi_dmul>
 80106ce:	a33f      	add	r3, pc, #252	; (adr r3, 80107cc <__kernel_sin+0x15c>)
 80106d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106d4:	f7ef fde8 	bl	80002a8 <__aeabi_dsub>
 80106d8:	4652      	mov	r2, sl
 80106da:	465b      	mov	r3, fp
 80106dc:	f7ef ff9c 	bl	8000618 <__aeabi_dmul>
 80106e0:	a33c      	add	r3, pc, #240	; (adr r3, 80107d4 <__kernel_sin+0x164>)
 80106e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106e6:	f7ef fde1 	bl	80002ac <__adddf3>
 80106ea:	4652      	mov	r2, sl
 80106ec:	465b      	mov	r3, fp
 80106ee:	f7ef ff93 	bl	8000618 <__aeabi_dmul>
 80106f2:	a33a      	add	r3, pc, #232	; (adr r3, 80107dc <__kernel_sin+0x16c>)
 80106f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106f8:	f7ef fdd6 	bl	80002a8 <__aeabi_dsub>
 80106fc:	4652      	mov	r2, sl
 80106fe:	465b      	mov	r3, fp
 8010700:	f7ef ff8a 	bl	8000618 <__aeabi_dmul>
 8010704:	a337      	add	r3, pc, #220	; (adr r3, 80107e4 <__kernel_sin+0x174>)
 8010706:	e9d3 2300 	ldrd	r2, r3, [r3]
 801070a:	f7ef fdcf 	bl	80002ac <__adddf3>
 801070e:	9b01      	ldr	r3, [sp, #4]
 8010710:	4606      	mov	r6, r0
 8010712:	460f      	mov	r7, r1
 8010714:	b9eb      	cbnz	r3, 8010752 <__kernel_sin+0xe2>
 8010716:	4602      	mov	r2, r0
 8010718:	460b      	mov	r3, r1
 801071a:	4650      	mov	r0, sl
 801071c:	4659      	mov	r1, fp
 801071e:	f7ef ff7b 	bl	8000618 <__aeabi_dmul>
 8010722:	a325      	add	r3, pc, #148	; (adr r3, 80107b8 <__kernel_sin+0x148>)
 8010724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010728:	f7ef fdbe 	bl	80002a8 <__aeabi_dsub>
 801072c:	4642      	mov	r2, r8
 801072e:	464b      	mov	r3, r9
 8010730:	f7ef ff72 	bl	8000618 <__aeabi_dmul>
 8010734:	4602      	mov	r2, r0
 8010736:	460b      	mov	r3, r1
 8010738:	4620      	mov	r0, r4
 801073a:	4629      	mov	r1, r5
 801073c:	f7ef fdb6 	bl	80002ac <__adddf3>
 8010740:	4604      	mov	r4, r0
 8010742:	460d      	mov	r5, r1
 8010744:	ec45 4b10 	vmov	d0, r4, r5
 8010748:	b003      	add	sp, #12
 801074a:	ecbd 8b04 	vpop	{d8-d9}
 801074e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010752:	4b1b      	ldr	r3, [pc, #108]	; (80107c0 <__kernel_sin+0x150>)
 8010754:	ec51 0b18 	vmov	r0, r1, d8
 8010758:	2200      	movs	r2, #0
 801075a:	f7ef ff5d 	bl	8000618 <__aeabi_dmul>
 801075e:	4632      	mov	r2, r6
 8010760:	ec41 0b19 	vmov	d9, r0, r1
 8010764:	463b      	mov	r3, r7
 8010766:	4640      	mov	r0, r8
 8010768:	4649      	mov	r1, r9
 801076a:	f7ef ff55 	bl	8000618 <__aeabi_dmul>
 801076e:	4602      	mov	r2, r0
 8010770:	460b      	mov	r3, r1
 8010772:	ec51 0b19 	vmov	r0, r1, d9
 8010776:	f7ef fd97 	bl	80002a8 <__aeabi_dsub>
 801077a:	4652      	mov	r2, sl
 801077c:	465b      	mov	r3, fp
 801077e:	f7ef ff4b 	bl	8000618 <__aeabi_dmul>
 8010782:	ec53 2b18 	vmov	r2, r3, d8
 8010786:	f7ef fd8f 	bl	80002a8 <__aeabi_dsub>
 801078a:	a30b      	add	r3, pc, #44	; (adr r3, 80107b8 <__kernel_sin+0x148>)
 801078c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010790:	4606      	mov	r6, r0
 8010792:	460f      	mov	r7, r1
 8010794:	4640      	mov	r0, r8
 8010796:	4649      	mov	r1, r9
 8010798:	f7ef ff3e 	bl	8000618 <__aeabi_dmul>
 801079c:	4602      	mov	r2, r0
 801079e:	460b      	mov	r3, r1
 80107a0:	4630      	mov	r0, r6
 80107a2:	4639      	mov	r1, r7
 80107a4:	f7ef fd82 	bl	80002ac <__adddf3>
 80107a8:	4602      	mov	r2, r0
 80107aa:	460b      	mov	r3, r1
 80107ac:	4620      	mov	r0, r4
 80107ae:	4629      	mov	r1, r5
 80107b0:	f7ef fd7a 	bl	80002a8 <__aeabi_dsub>
 80107b4:	e7c4      	b.n	8010740 <__kernel_sin+0xd0>
 80107b6:	bf00      	nop
 80107b8:	55555549 	.word	0x55555549
 80107bc:	3fc55555 	.word	0x3fc55555
 80107c0:	3fe00000 	.word	0x3fe00000
 80107c4:	5acfd57c 	.word	0x5acfd57c
 80107c8:	3de5d93a 	.word	0x3de5d93a
 80107cc:	8a2b9ceb 	.word	0x8a2b9ceb
 80107d0:	3e5ae5e6 	.word	0x3e5ae5e6
 80107d4:	57b1fe7d 	.word	0x57b1fe7d
 80107d8:	3ec71de3 	.word	0x3ec71de3
 80107dc:	19c161d5 	.word	0x19c161d5
 80107e0:	3f2a01a0 	.word	0x3f2a01a0
 80107e4:	1110f8a6 	.word	0x1110f8a6
 80107e8:	3f811111 	.word	0x3f811111
 80107ec:	00000000 	.word	0x00000000

080107f0 <__ieee754_pow>:
 80107f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107f4:	ed2d 8b06 	vpush	{d8-d10}
 80107f8:	b089      	sub	sp, #36	; 0x24
 80107fa:	ed8d 1b00 	vstr	d1, [sp]
 80107fe:	e9dd 2900 	ldrd	r2, r9, [sp]
 8010802:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8010806:	ea58 0102 	orrs.w	r1, r8, r2
 801080a:	ec57 6b10 	vmov	r6, r7, d0
 801080e:	d115      	bne.n	801083c <__ieee754_pow+0x4c>
 8010810:	19b3      	adds	r3, r6, r6
 8010812:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8010816:	4152      	adcs	r2, r2
 8010818:	4299      	cmp	r1, r3
 801081a:	4b89      	ldr	r3, [pc, #548]	; (8010a40 <__ieee754_pow+0x250>)
 801081c:	4193      	sbcs	r3, r2
 801081e:	f080 84d1 	bcs.w	80111c4 <__ieee754_pow+0x9d4>
 8010822:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010826:	4630      	mov	r0, r6
 8010828:	4639      	mov	r1, r7
 801082a:	f7ef fd3f 	bl	80002ac <__adddf3>
 801082e:	ec41 0b10 	vmov	d0, r0, r1
 8010832:	b009      	add	sp, #36	; 0x24
 8010834:	ecbd 8b06 	vpop	{d8-d10}
 8010838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801083c:	4b81      	ldr	r3, [pc, #516]	; (8010a44 <__ieee754_pow+0x254>)
 801083e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8010842:	429c      	cmp	r4, r3
 8010844:	ee10 aa10 	vmov	sl, s0
 8010848:	463d      	mov	r5, r7
 801084a:	dc06      	bgt.n	801085a <__ieee754_pow+0x6a>
 801084c:	d101      	bne.n	8010852 <__ieee754_pow+0x62>
 801084e:	2e00      	cmp	r6, #0
 8010850:	d1e7      	bne.n	8010822 <__ieee754_pow+0x32>
 8010852:	4598      	cmp	r8, r3
 8010854:	dc01      	bgt.n	801085a <__ieee754_pow+0x6a>
 8010856:	d10f      	bne.n	8010878 <__ieee754_pow+0x88>
 8010858:	b172      	cbz	r2, 8010878 <__ieee754_pow+0x88>
 801085a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801085e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8010862:	ea55 050a 	orrs.w	r5, r5, sl
 8010866:	d1dc      	bne.n	8010822 <__ieee754_pow+0x32>
 8010868:	e9dd 3200 	ldrd	r3, r2, [sp]
 801086c:	18db      	adds	r3, r3, r3
 801086e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8010872:	4152      	adcs	r2, r2
 8010874:	429d      	cmp	r5, r3
 8010876:	e7d0      	b.n	801081a <__ieee754_pow+0x2a>
 8010878:	2d00      	cmp	r5, #0
 801087a:	da3b      	bge.n	80108f4 <__ieee754_pow+0x104>
 801087c:	4b72      	ldr	r3, [pc, #456]	; (8010a48 <__ieee754_pow+0x258>)
 801087e:	4598      	cmp	r8, r3
 8010880:	dc51      	bgt.n	8010926 <__ieee754_pow+0x136>
 8010882:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8010886:	4598      	cmp	r8, r3
 8010888:	f340 84ab 	ble.w	80111e2 <__ieee754_pow+0x9f2>
 801088c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010890:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010894:	2b14      	cmp	r3, #20
 8010896:	dd0f      	ble.n	80108b8 <__ieee754_pow+0xc8>
 8010898:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801089c:	fa22 f103 	lsr.w	r1, r2, r3
 80108a0:	fa01 f303 	lsl.w	r3, r1, r3
 80108a4:	4293      	cmp	r3, r2
 80108a6:	f040 849c 	bne.w	80111e2 <__ieee754_pow+0x9f2>
 80108aa:	f001 0101 	and.w	r1, r1, #1
 80108ae:	f1c1 0302 	rsb	r3, r1, #2
 80108b2:	9304      	str	r3, [sp, #16]
 80108b4:	b182      	cbz	r2, 80108d8 <__ieee754_pow+0xe8>
 80108b6:	e05f      	b.n	8010978 <__ieee754_pow+0x188>
 80108b8:	2a00      	cmp	r2, #0
 80108ba:	d15b      	bne.n	8010974 <__ieee754_pow+0x184>
 80108bc:	f1c3 0314 	rsb	r3, r3, #20
 80108c0:	fa48 f103 	asr.w	r1, r8, r3
 80108c4:	fa01 f303 	lsl.w	r3, r1, r3
 80108c8:	4543      	cmp	r3, r8
 80108ca:	f040 8487 	bne.w	80111dc <__ieee754_pow+0x9ec>
 80108ce:	f001 0101 	and.w	r1, r1, #1
 80108d2:	f1c1 0302 	rsb	r3, r1, #2
 80108d6:	9304      	str	r3, [sp, #16]
 80108d8:	4b5c      	ldr	r3, [pc, #368]	; (8010a4c <__ieee754_pow+0x25c>)
 80108da:	4598      	cmp	r8, r3
 80108dc:	d132      	bne.n	8010944 <__ieee754_pow+0x154>
 80108de:	f1b9 0f00 	cmp.w	r9, #0
 80108e2:	f280 8477 	bge.w	80111d4 <__ieee754_pow+0x9e4>
 80108e6:	4959      	ldr	r1, [pc, #356]	; (8010a4c <__ieee754_pow+0x25c>)
 80108e8:	4632      	mov	r2, r6
 80108ea:	463b      	mov	r3, r7
 80108ec:	2000      	movs	r0, #0
 80108ee:	f7ef ffbd 	bl	800086c <__aeabi_ddiv>
 80108f2:	e79c      	b.n	801082e <__ieee754_pow+0x3e>
 80108f4:	2300      	movs	r3, #0
 80108f6:	9304      	str	r3, [sp, #16]
 80108f8:	2a00      	cmp	r2, #0
 80108fa:	d13d      	bne.n	8010978 <__ieee754_pow+0x188>
 80108fc:	4b51      	ldr	r3, [pc, #324]	; (8010a44 <__ieee754_pow+0x254>)
 80108fe:	4598      	cmp	r8, r3
 8010900:	d1ea      	bne.n	80108d8 <__ieee754_pow+0xe8>
 8010902:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010906:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801090a:	ea53 030a 	orrs.w	r3, r3, sl
 801090e:	f000 8459 	beq.w	80111c4 <__ieee754_pow+0x9d4>
 8010912:	4b4f      	ldr	r3, [pc, #316]	; (8010a50 <__ieee754_pow+0x260>)
 8010914:	429c      	cmp	r4, r3
 8010916:	dd08      	ble.n	801092a <__ieee754_pow+0x13a>
 8010918:	f1b9 0f00 	cmp.w	r9, #0
 801091c:	f2c0 8456 	blt.w	80111cc <__ieee754_pow+0x9dc>
 8010920:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010924:	e783      	b.n	801082e <__ieee754_pow+0x3e>
 8010926:	2302      	movs	r3, #2
 8010928:	e7e5      	b.n	80108f6 <__ieee754_pow+0x106>
 801092a:	f1b9 0f00 	cmp.w	r9, #0
 801092e:	f04f 0000 	mov.w	r0, #0
 8010932:	f04f 0100 	mov.w	r1, #0
 8010936:	f6bf af7a 	bge.w	801082e <__ieee754_pow+0x3e>
 801093a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801093e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010942:	e774      	b.n	801082e <__ieee754_pow+0x3e>
 8010944:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8010948:	d106      	bne.n	8010958 <__ieee754_pow+0x168>
 801094a:	4632      	mov	r2, r6
 801094c:	463b      	mov	r3, r7
 801094e:	4630      	mov	r0, r6
 8010950:	4639      	mov	r1, r7
 8010952:	f7ef fe61 	bl	8000618 <__aeabi_dmul>
 8010956:	e76a      	b.n	801082e <__ieee754_pow+0x3e>
 8010958:	4b3e      	ldr	r3, [pc, #248]	; (8010a54 <__ieee754_pow+0x264>)
 801095a:	4599      	cmp	r9, r3
 801095c:	d10c      	bne.n	8010978 <__ieee754_pow+0x188>
 801095e:	2d00      	cmp	r5, #0
 8010960:	db0a      	blt.n	8010978 <__ieee754_pow+0x188>
 8010962:	ec47 6b10 	vmov	d0, r6, r7
 8010966:	b009      	add	sp, #36	; 0x24
 8010968:	ecbd 8b06 	vpop	{d8-d10}
 801096c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010970:	f7ff bcda 	b.w	8010328 <__ieee754_sqrt>
 8010974:	2300      	movs	r3, #0
 8010976:	9304      	str	r3, [sp, #16]
 8010978:	ec47 6b10 	vmov	d0, r6, r7
 801097c:	f000 fe6a 	bl	8011654 <fabs>
 8010980:	ec51 0b10 	vmov	r0, r1, d0
 8010984:	f1ba 0f00 	cmp.w	sl, #0
 8010988:	d129      	bne.n	80109de <__ieee754_pow+0x1ee>
 801098a:	b124      	cbz	r4, 8010996 <__ieee754_pow+0x1a6>
 801098c:	4b2f      	ldr	r3, [pc, #188]	; (8010a4c <__ieee754_pow+0x25c>)
 801098e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8010992:	429a      	cmp	r2, r3
 8010994:	d123      	bne.n	80109de <__ieee754_pow+0x1ee>
 8010996:	f1b9 0f00 	cmp.w	r9, #0
 801099a:	da05      	bge.n	80109a8 <__ieee754_pow+0x1b8>
 801099c:	4602      	mov	r2, r0
 801099e:	460b      	mov	r3, r1
 80109a0:	2000      	movs	r0, #0
 80109a2:	492a      	ldr	r1, [pc, #168]	; (8010a4c <__ieee754_pow+0x25c>)
 80109a4:	f7ef ff62 	bl	800086c <__aeabi_ddiv>
 80109a8:	2d00      	cmp	r5, #0
 80109aa:	f6bf af40 	bge.w	801082e <__ieee754_pow+0x3e>
 80109ae:	9b04      	ldr	r3, [sp, #16]
 80109b0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80109b4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80109b8:	431c      	orrs	r4, r3
 80109ba:	d108      	bne.n	80109ce <__ieee754_pow+0x1de>
 80109bc:	4602      	mov	r2, r0
 80109be:	460b      	mov	r3, r1
 80109c0:	4610      	mov	r0, r2
 80109c2:	4619      	mov	r1, r3
 80109c4:	f7ef fc70 	bl	80002a8 <__aeabi_dsub>
 80109c8:	4602      	mov	r2, r0
 80109ca:	460b      	mov	r3, r1
 80109cc:	e78f      	b.n	80108ee <__ieee754_pow+0xfe>
 80109ce:	9b04      	ldr	r3, [sp, #16]
 80109d0:	2b01      	cmp	r3, #1
 80109d2:	f47f af2c 	bne.w	801082e <__ieee754_pow+0x3e>
 80109d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80109da:	4619      	mov	r1, r3
 80109dc:	e727      	b.n	801082e <__ieee754_pow+0x3e>
 80109de:	0feb      	lsrs	r3, r5, #31
 80109e0:	3b01      	subs	r3, #1
 80109e2:	9306      	str	r3, [sp, #24]
 80109e4:	9a06      	ldr	r2, [sp, #24]
 80109e6:	9b04      	ldr	r3, [sp, #16]
 80109e8:	4313      	orrs	r3, r2
 80109ea:	d102      	bne.n	80109f2 <__ieee754_pow+0x202>
 80109ec:	4632      	mov	r2, r6
 80109ee:	463b      	mov	r3, r7
 80109f0:	e7e6      	b.n	80109c0 <__ieee754_pow+0x1d0>
 80109f2:	4b19      	ldr	r3, [pc, #100]	; (8010a58 <__ieee754_pow+0x268>)
 80109f4:	4598      	cmp	r8, r3
 80109f6:	f340 80fb 	ble.w	8010bf0 <__ieee754_pow+0x400>
 80109fa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80109fe:	4598      	cmp	r8, r3
 8010a00:	4b13      	ldr	r3, [pc, #76]	; (8010a50 <__ieee754_pow+0x260>)
 8010a02:	dd0c      	ble.n	8010a1e <__ieee754_pow+0x22e>
 8010a04:	429c      	cmp	r4, r3
 8010a06:	dc0f      	bgt.n	8010a28 <__ieee754_pow+0x238>
 8010a08:	f1b9 0f00 	cmp.w	r9, #0
 8010a0c:	da0f      	bge.n	8010a2e <__ieee754_pow+0x23e>
 8010a0e:	2000      	movs	r0, #0
 8010a10:	b009      	add	sp, #36	; 0x24
 8010a12:	ecbd 8b06 	vpop	{d8-d10}
 8010a16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a1a:	f000 beca 	b.w	80117b2 <__math_oflow>
 8010a1e:	429c      	cmp	r4, r3
 8010a20:	dbf2      	blt.n	8010a08 <__ieee754_pow+0x218>
 8010a22:	4b0a      	ldr	r3, [pc, #40]	; (8010a4c <__ieee754_pow+0x25c>)
 8010a24:	429c      	cmp	r4, r3
 8010a26:	dd19      	ble.n	8010a5c <__ieee754_pow+0x26c>
 8010a28:	f1b9 0f00 	cmp.w	r9, #0
 8010a2c:	dcef      	bgt.n	8010a0e <__ieee754_pow+0x21e>
 8010a2e:	2000      	movs	r0, #0
 8010a30:	b009      	add	sp, #36	; 0x24
 8010a32:	ecbd 8b06 	vpop	{d8-d10}
 8010a36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a3a:	f000 beb1 	b.w	80117a0 <__math_uflow>
 8010a3e:	bf00      	nop
 8010a40:	fff00000 	.word	0xfff00000
 8010a44:	7ff00000 	.word	0x7ff00000
 8010a48:	433fffff 	.word	0x433fffff
 8010a4c:	3ff00000 	.word	0x3ff00000
 8010a50:	3fefffff 	.word	0x3fefffff
 8010a54:	3fe00000 	.word	0x3fe00000
 8010a58:	41e00000 	.word	0x41e00000
 8010a5c:	4b60      	ldr	r3, [pc, #384]	; (8010be0 <__ieee754_pow+0x3f0>)
 8010a5e:	2200      	movs	r2, #0
 8010a60:	f7ef fc22 	bl	80002a8 <__aeabi_dsub>
 8010a64:	a354      	add	r3, pc, #336	; (adr r3, 8010bb8 <__ieee754_pow+0x3c8>)
 8010a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a6a:	4604      	mov	r4, r0
 8010a6c:	460d      	mov	r5, r1
 8010a6e:	f7ef fdd3 	bl	8000618 <__aeabi_dmul>
 8010a72:	a353      	add	r3, pc, #332	; (adr r3, 8010bc0 <__ieee754_pow+0x3d0>)
 8010a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a78:	4606      	mov	r6, r0
 8010a7a:	460f      	mov	r7, r1
 8010a7c:	4620      	mov	r0, r4
 8010a7e:	4629      	mov	r1, r5
 8010a80:	f7ef fdca 	bl	8000618 <__aeabi_dmul>
 8010a84:	4b57      	ldr	r3, [pc, #348]	; (8010be4 <__ieee754_pow+0x3f4>)
 8010a86:	4682      	mov	sl, r0
 8010a88:	468b      	mov	fp, r1
 8010a8a:	2200      	movs	r2, #0
 8010a8c:	4620      	mov	r0, r4
 8010a8e:	4629      	mov	r1, r5
 8010a90:	f7ef fdc2 	bl	8000618 <__aeabi_dmul>
 8010a94:	4602      	mov	r2, r0
 8010a96:	460b      	mov	r3, r1
 8010a98:	a14b      	add	r1, pc, #300	; (adr r1, 8010bc8 <__ieee754_pow+0x3d8>)
 8010a9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a9e:	f7ef fc03 	bl	80002a8 <__aeabi_dsub>
 8010aa2:	4622      	mov	r2, r4
 8010aa4:	462b      	mov	r3, r5
 8010aa6:	f7ef fdb7 	bl	8000618 <__aeabi_dmul>
 8010aaa:	4602      	mov	r2, r0
 8010aac:	460b      	mov	r3, r1
 8010aae:	2000      	movs	r0, #0
 8010ab0:	494d      	ldr	r1, [pc, #308]	; (8010be8 <__ieee754_pow+0x3f8>)
 8010ab2:	f7ef fbf9 	bl	80002a8 <__aeabi_dsub>
 8010ab6:	4622      	mov	r2, r4
 8010ab8:	4680      	mov	r8, r0
 8010aba:	4689      	mov	r9, r1
 8010abc:	462b      	mov	r3, r5
 8010abe:	4620      	mov	r0, r4
 8010ac0:	4629      	mov	r1, r5
 8010ac2:	f7ef fda9 	bl	8000618 <__aeabi_dmul>
 8010ac6:	4602      	mov	r2, r0
 8010ac8:	460b      	mov	r3, r1
 8010aca:	4640      	mov	r0, r8
 8010acc:	4649      	mov	r1, r9
 8010ace:	f7ef fda3 	bl	8000618 <__aeabi_dmul>
 8010ad2:	a33f      	add	r3, pc, #252	; (adr r3, 8010bd0 <__ieee754_pow+0x3e0>)
 8010ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ad8:	f7ef fd9e 	bl	8000618 <__aeabi_dmul>
 8010adc:	4602      	mov	r2, r0
 8010ade:	460b      	mov	r3, r1
 8010ae0:	4650      	mov	r0, sl
 8010ae2:	4659      	mov	r1, fp
 8010ae4:	f7ef fbe0 	bl	80002a8 <__aeabi_dsub>
 8010ae8:	4602      	mov	r2, r0
 8010aea:	460b      	mov	r3, r1
 8010aec:	4680      	mov	r8, r0
 8010aee:	4689      	mov	r9, r1
 8010af0:	4630      	mov	r0, r6
 8010af2:	4639      	mov	r1, r7
 8010af4:	f7ef fbda 	bl	80002ac <__adddf3>
 8010af8:	2000      	movs	r0, #0
 8010afa:	4632      	mov	r2, r6
 8010afc:	463b      	mov	r3, r7
 8010afe:	4604      	mov	r4, r0
 8010b00:	460d      	mov	r5, r1
 8010b02:	f7ef fbd1 	bl	80002a8 <__aeabi_dsub>
 8010b06:	4602      	mov	r2, r0
 8010b08:	460b      	mov	r3, r1
 8010b0a:	4640      	mov	r0, r8
 8010b0c:	4649      	mov	r1, r9
 8010b0e:	f7ef fbcb 	bl	80002a8 <__aeabi_dsub>
 8010b12:	9b04      	ldr	r3, [sp, #16]
 8010b14:	9a06      	ldr	r2, [sp, #24]
 8010b16:	3b01      	subs	r3, #1
 8010b18:	4313      	orrs	r3, r2
 8010b1a:	4682      	mov	sl, r0
 8010b1c:	468b      	mov	fp, r1
 8010b1e:	f040 81e7 	bne.w	8010ef0 <__ieee754_pow+0x700>
 8010b22:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8010bd8 <__ieee754_pow+0x3e8>
 8010b26:	eeb0 8a47 	vmov.f32	s16, s14
 8010b2a:	eef0 8a67 	vmov.f32	s17, s15
 8010b2e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010b32:	2600      	movs	r6, #0
 8010b34:	4632      	mov	r2, r6
 8010b36:	463b      	mov	r3, r7
 8010b38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010b3c:	f7ef fbb4 	bl	80002a8 <__aeabi_dsub>
 8010b40:	4622      	mov	r2, r4
 8010b42:	462b      	mov	r3, r5
 8010b44:	f7ef fd68 	bl	8000618 <__aeabi_dmul>
 8010b48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010b4c:	4680      	mov	r8, r0
 8010b4e:	4689      	mov	r9, r1
 8010b50:	4650      	mov	r0, sl
 8010b52:	4659      	mov	r1, fp
 8010b54:	f7ef fd60 	bl	8000618 <__aeabi_dmul>
 8010b58:	4602      	mov	r2, r0
 8010b5a:	460b      	mov	r3, r1
 8010b5c:	4640      	mov	r0, r8
 8010b5e:	4649      	mov	r1, r9
 8010b60:	f7ef fba4 	bl	80002ac <__adddf3>
 8010b64:	4632      	mov	r2, r6
 8010b66:	463b      	mov	r3, r7
 8010b68:	4680      	mov	r8, r0
 8010b6a:	4689      	mov	r9, r1
 8010b6c:	4620      	mov	r0, r4
 8010b6e:	4629      	mov	r1, r5
 8010b70:	f7ef fd52 	bl	8000618 <__aeabi_dmul>
 8010b74:	460b      	mov	r3, r1
 8010b76:	4604      	mov	r4, r0
 8010b78:	460d      	mov	r5, r1
 8010b7a:	4602      	mov	r2, r0
 8010b7c:	4649      	mov	r1, r9
 8010b7e:	4640      	mov	r0, r8
 8010b80:	f7ef fb94 	bl	80002ac <__adddf3>
 8010b84:	4b19      	ldr	r3, [pc, #100]	; (8010bec <__ieee754_pow+0x3fc>)
 8010b86:	4299      	cmp	r1, r3
 8010b88:	ec45 4b19 	vmov	d9, r4, r5
 8010b8c:	4606      	mov	r6, r0
 8010b8e:	460f      	mov	r7, r1
 8010b90:	468b      	mov	fp, r1
 8010b92:	f340 82f0 	ble.w	8011176 <__ieee754_pow+0x986>
 8010b96:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8010b9a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8010b9e:	4303      	orrs	r3, r0
 8010ba0:	f000 81e4 	beq.w	8010f6c <__ieee754_pow+0x77c>
 8010ba4:	ec51 0b18 	vmov	r0, r1, d8
 8010ba8:	2200      	movs	r2, #0
 8010baa:	2300      	movs	r3, #0
 8010bac:	f7ef ffa6 	bl	8000afc <__aeabi_dcmplt>
 8010bb0:	3800      	subs	r0, #0
 8010bb2:	bf18      	it	ne
 8010bb4:	2001      	movne	r0, #1
 8010bb6:	e72b      	b.n	8010a10 <__ieee754_pow+0x220>
 8010bb8:	60000000 	.word	0x60000000
 8010bbc:	3ff71547 	.word	0x3ff71547
 8010bc0:	f85ddf44 	.word	0xf85ddf44
 8010bc4:	3e54ae0b 	.word	0x3e54ae0b
 8010bc8:	55555555 	.word	0x55555555
 8010bcc:	3fd55555 	.word	0x3fd55555
 8010bd0:	652b82fe 	.word	0x652b82fe
 8010bd4:	3ff71547 	.word	0x3ff71547
 8010bd8:	00000000 	.word	0x00000000
 8010bdc:	bff00000 	.word	0xbff00000
 8010be0:	3ff00000 	.word	0x3ff00000
 8010be4:	3fd00000 	.word	0x3fd00000
 8010be8:	3fe00000 	.word	0x3fe00000
 8010bec:	408fffff 	.word	0x408fffff
 8010bf0:	4bd5      	ldr	r3, [pc, #852]	; (8010f48 <__ieee754_pow+0x758>)
 8010bf2:	402b      	ands	r3, r5
 8010bf4:	2200      	movs	r2, #0
 8010bf6:	b92b      	cbnz	r3, 8010c04 <__ieee754_pow+0x414>
 8010bf8:	4bd4      	ldr	r3, [pc, #848]	; (8010f4c <__ieee754_pow+0x75c>)
 8010bfa:	f7ef fd0d 	bl	8000618 <__aeabi_dmul>
 8010bfe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8010c02:	460c      	mov	r4, r1
 8010c04:	1523      	asrs	r3, r4, #20
 8010c06:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010c0a:	4413      	add	r3, r2
 8010c0c:	9305      	str	r3, [sp, #20]
 8010c0e:	4bd0      	ldr	r3, [pc, #832]	; (8010f50 <__ieee754_pow+0x760>)
 8010c10:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010c14:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8010c18:	429c      	cmp	r4, r3
 8010c1a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010c1e:	dd08      	ble.n	8010c32 <__ieee754_pow+0x442>
 8010c20:	4bcc      	ldr	r3, [pc, #816]	; (8010f54 <__ieee754_pow+0x764>)
 8010c22:	429c      	cmp	r4, r3
 8010c24:	f340 8162 	ble.w	8010eec <__ieee754_pow+0x6fc>
 8010c28:	9b05      	ldr	r3, [sp, #20]
 8010c2a:	3301      	adds	r3, #1
 8010c2c:	9305      	str	r3, [sp, #20]
 8010c2e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8010c32:	2400      	movs	r4, #0
 8010c34:	00e3      	lsls	r3, r4, #3
 8010c36:	9307      	str	r3, [sp, #28]
 8010c38:	4bc7      	ldr	r3, [pc, #796]	; (8010f58 <__ieee754_pow+0x768>)
 8010c3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010c3e:	ed93 7b00 	vldr	d7, [r3]
 8010c42:	4629      	mov	r1, r5
 8010c44:	ec53 2b17 	vmov	r2, r3, d7
 8010c48:	eeb0 9a47 	vmov.f32	s18, s14
 8010c4c:	eef0 9a67 	vmov.f32	s19, s15
 8010c50:	4682      	mov	sl, r0
 8010c52:	f7ef fb29 	bl	80002a8 <__aeabi_dsub>
 8010c56:	4652      	mov	r2, sl
 8010c58:	4606      	mov	r6, r0
 8010c5a:	460f      	mov	r7, r1
 8010c5c:	462b      	mov	r3, r5
 8010c5e:	ec51 0b19 	vmov	r0, r1, d9
 8010c62:	f7ef fb23 	bl	80002ac <__adddf3>
 8010c66:	4602      	mov	r2, r0
 8010c68:	460b      	mov	r3, r1
 8010c6a:	2000      	movs	r0, #0
 8010c6c:	49bb      	ldr	r1, [pc, #748]	; (8010f5c <__ieee754_pow+0x76c>)
 8010c6e:	f7ef fdfd 	bl	800086c <__aeabi_ddiv>
 8010c72:	ec41 0b1a 	vmov	d10, r0, r1
 8010c76:	4602      	mov	r2, r0
 8010c78:	460b      	mov	r3, r1
 8010c7a:	4630      	mov	r0, r6
 8010c7c:	4639      	mov	r1, r7
 8010c7e:	f7ef fccb 	bl	8000618 <__aeabi_dmul>
 8010c82:	2300      	movs	r3, #0
 8010c84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010c88:	9302      	str	r3, [sp, #8]
 8010c8a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010c8e:	46ab      	mov	fp, r5
 8010c90:	106d      	asrs	r5, r5, #1
 8010c92:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8010c96:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8010c9a:	ec41 0b18 	vmov	d8, r0, r1
 8010c9e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8010ca2:	2200      	movs	r2, #0
 8010ca4:	4640      	mov	r0, r8
 8010ca6:	4649      	mov	r1, r9
 8010ca8:	4614      	mov	r4, r2
 8010caa:	461d      	mov	r5, r3
 8010cac:	f7ef fcb4 	bl	8000618 <__aeabi_dmul>
 8010cb0:	4602      	mov	r2, r0
 8010cb2:	460b      	mov	r3, r1
 8010cb4:	4630      	mov	r0, r6
 8010cb6:	4639      	mov	r1, r7
 8010cb8:	f7ef faf6 	bl	80002a8 <__aeabi_dsub>
 8010cbc:	ec53 2b19 	vmov	r2, r3, d9
 8010cc0:	4606      	mov	r6, r0
 8010cc2:	460f      	mov	r7, r1
 8010cc4:	4620      	mov	r0, r4
 8010cc6:	4629      	mov	r1, r5
 8010cc8:	f7ef faee 	bl	80002a8 <__aeabi_dsub>
 8010ccc:	4602      	mov	r2, r0
 8010cce:	460b      	mov	r3, r1
 8010cd0:	4650      	mov	r0, sl
 8010cd2:	4659      	mov	r1, fp
 8010cd4:	f7ef fae8 	bl	80002a8 <__aeabi_dsub>
 8010cd8:	4642      	mov	r2, r8
 8010cda:	464b      	mov	r3, r9
 8010cdc:	f7ef fc9c 	bl	8000618 <__aeabi_dmul>
 8010ce0:	4602      	mov	r2, r0
 8010ce2:	460b      	mov	r3, r1
 8010ce4:	4630      	mov	r0, r6
 8010ce6:	4639      	mov	r1, r7
 8010ce8:	f7ef fade 	bl	80002a8 <__aeabi_dsub>
 8010cec:	ec53 2b1a 	vmov	r2, r3, d10
 8010cf0:	f7ef fc92 	bl	8000618 <__aeabi_dmul>
 8010cf4:	ec53 2b18 	vmov	r2, r3, d8
 8010cf8:	ec41 0b19 	vmov	d9, r0, r1
 8010cfc:	ec51 0b18 	vmov	r0, r1, d8
 8010d00:	f7ef fc8a 	bl	8000618 <__aeabi_dmul>
 8010d04:	a37c      	add	r3, pc, #496	; (adr r3, 8010ef8 <__ieee754_pow+0x708>)
 8010d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d0a:	4604      	mov	r4, r0
 8010d0c:	460d      	mov	r5, r1
 8010d0e:	f7ef fc83 	bl	8000618 <__aeabi_dmul>
 8010d12:	a37b      	add	r3, pc, #492	; (adr r3, 8010f00 <__ieee754_pow+0x710>)
 8010d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d18:	f7ef fac8 	bl	80002ac <__adddf3>
 8010d1c:	4622      	mov	r2, r4
 8010d1e:	462b      	mov	r3, r5
 8010d20:	f7ef fc7a 	bl	8000618 <__aeabi_dmul>
 8010d24:	a378      	add	r3, pc, #480	; (adr r3, 8010f08 <__ieee754_pow+0x718>)
 8010d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d2a:	f7ef fabf 	bl	80002ac <__adddf3>
 8010d2e:	4622      	mov	r2, r4
 8010d30:	462b      	mov	r3, r5
 8010d32:	f7ef fc71 	bl	8000618 <__aeabi_dmul>
 8010d36:	a376      	add	r3, pc, #472	; (adr r3, 8010f10 <__ieee754_pow+0x720>)
 8010d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d3c:	f7ef fab6 	bl	80002ac <__adddf3>
 8010d40:	4622      	mov	r2, r4
 8010d42:	462b      	mov	r3, r5
 8010d44:	f7ef fc68 	bl	8000618 <__aeabi_dmul>
 8010d48:	a373      	add	r3, pc, #460	; (adr r3, 8010f18 <__ieee754_pow+0x728>)
 8010d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d4e:	f7ef faad 	bl	80002ac <__adddf3>
 8010d52:	4622      	mov	r2, r4
 8010d54:	462b      	mov	r3, r5
 8010d56:	f7ef fc5f 	bl	8000618 <__aeabi_dmul>
 8010d5a:	a371      	add	r3, pc, #452	; (adr r3, 8010f20 <__ieee754_pow+0x730>)
 8010d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d60:	f7ef faa4 	bl	80002ac <__adddf3>
 8010d64:	4622      	mov	r2, r4
 8010d66:	4606      	mov	r6, r0
 8010d68:	460f      	mov	r7, r1
 8010d6a:	462b      	mov	r3, r5
 8010d6c:	4620      	mov	r0, r4
 8010d6e:	4629      	mov	r1, r5
 8010d70:	f7ef fc52 	bl	8000618 <__aeabi_dmul>
 8010d74:	4602      	mov	r2, r0
 8010d76:	460b      	mov	r3, r1
 8010d78:	4630      	mov	r0, r6
 8010d7a:	4639      	mov	r1, r7
 8010d7c:	f7ef fc4c 	bl	8000618 <__aeabi_dmul>
 8010d80:	4642      	mov	r2, r8
 8010d82:	4604      	mov	r4, r0
 8010d84:	460d      	mov	r5, r1
 8010d86:	464b      	mov	r3, r9
 8010d88:	ec51 0b18 	vmov	r0, r1, d8
 8010d8c:	f7ef fa8e 	bl	80002ac <__adddf3>
 8010d90:	ec53 2b19 	vmov	r2, r3, d9
 8010d94:	f7ef fc40 	bl	8000618 <__aeabi_dmul>
 8010d98:	4622      	mov	r2, r4
 8010d9a:	462b      	mov	r3, r5
 8010d9c:	f7ef fa86 	bl	80002ac <__adddf3>
 8010da0:	4642      	mov	r2, r8
 8010da2:	4682      	mov	sl, r0
 8010da4:	468b      	mov	fp, r1
 8010da6:	464b      	mov	r3, r9
 8010da8:	4640      	mov	r0, r8
 8010daa:	4649      	mov	r1, r9
 8010dac:	f7ef fc34 	bl	8000618 <__aeabi_dmul>
 8010db0:	4b6b      	ldr	r3, [pc, #428]	; (8010f60 <__ieee754_pow+0x770>)
 8010db2:	2200      	movs	r2, #0
 8010db4:	4606      	mov	r6, r0
 8010db6:	460f      	mov	r7, r1
 8010db8:	f7ef fa78 	bl	80002ac <__adddf3>
 8010dbc:	4652      	mov	r2, sl
 8010dbe:	465b      	mov	r3, fp
 8010dc0:	f7ef fa74 	bl	80002ac <__adddf3>
 8010dc4:	2000      	movs	r0, #0
 8010dc6:	4604      	mov	r4, r0
 8010dc8:	460d      	mov	r5, r1
 8010dca:	4602      	mov	r2, r0
 8010dcc:	460b      	mov	r3, r1
 8010dce:	4640      	mov	r0, r8
 8010dd0:	4649      	mov	r1, r9
 8010dd2:	f7ef fc21 	bl	8000618 <__aeabi_dmul>
 8010dd6:	4b62      	ldr	r3, [pc, #392]	; (8010f60 <__ieee754_pow+0x770>)
 8010dd8:	4680      	mov	r8, r0
 8010dda:	4689      	mov	r9, r1
 8010ddc:	2200      	movs	r2, #0
 8010dde:	4620      	mov	r0, r4
 8010de0:	4629      	mov	r1, r5
 8010de2:	f7ef fa61 	bl	80002a8 <__aeabi_dsub>
 8010de6:	4632      	mov	r2, r6
 8010de8:	463b      	mov	r3, r7
 8010dea:	f7ef fa5d 	bl	80002a8 <__aeabi_dsub>
 8010dee:	4602      	mov	r2, r0
 8010df0:	460b      	mov	r3, r1
 8010df2:	4650      	mov	r0, sl
 8010df4:	4659      	mov	r1, fp
 8010df6:	f7ef fa57 	bl	80002a8 <__aeabi_dsub>
 8010dfa:	ec53 2b18 	vmov	r2, r3, d8
 8010dfe:	f7ef fc0b 	bl	8000618 <__aeabi_dmul>
 8010e02:	4622      	mov	r2, r4
 8010e04:	4606      	mov	r6, r0
 8010e06:	460f      	mov	r7, r1
 8010e08:	462b      	mov	r3, r5
 8010e0a:	ec51 0b19 	vmov	r0, r1, d9
 8010e0e:	f7ef fc03 	bl	8000618 <__aeabi_dmul>
 8010e12:	4602      	mov	r2, r0
 8010e14:	460b      	mov	r3, r1
 8010e16:	4630      	mov	r0, r6
 8010e18:	4639      	mov	r1, r7
 8010e1a:	f7ef fa47 	bl	80002ac <__adddf3>
 8010e1e:	4606      	mov	r6, r0
 8010e20:	460f      	mov	r7, r1
 8010e22:	4602      	mov	r2, r0
 8010e24:	460b      	mov	r3, r1
 8010e26:	4640      	mov	r0, r8
 8010e28:	4649      	mov	r1, r9
 8010e2a:	f7ef fa3f 	bl	80002ac <__adddf3>
 8010e2e:	a33e      	add	r3, pc, #248	; (adr r3, 8010f28 <__ieee754_pow+0x738>)
 8010e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e34:	2000      	movs	r0, #0
 8010e36:	4604      	mov	r4, r0
 8010e38:	460d      	mov	r5, r1
 8010e3a:	f7ef fbed 	bl	8000618 <__aeabi_dmul>
 8010e3e:	4642      	mov	r2, r8
 8010e40:	ec41 0b18 	vmov	d8, r0, r1
 8010e44:	464b      	mov	r3, r9
 8010e46:	4620      	mov	r0, r4
 8010e48:	4629      	mov	r1, r5
 8010e4a:	f7ef fa2d 	bl	80002a8 <__aeabi_dsub>
 8010e4e:	4602      	mov	r2, r0
 8010e50:	460b      	mov	r3, r1
 8010e52:	4630      	mov	r0, r6
 8010e54:	4639      	mov	r1, r7
 8010e56:	f7ef fa27 	bl	80002a8 <__aeabi_dsub>
 8010e5a:	a335      	add	r3, pc, #212	; (adr r3, 8010f30 <__ieee754_pow+0x740>)
 8010e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e60:	f7ef fbda 	bl	8000618 <__aeabi_dmul>
 8010e64:	a334      	add	r3, pc, #208	; (adr r3, 8010f38 <__ieee754_pow+0x748>)
 8010e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e6a:	4606      	mov	r6, r0
 8010e6c:	460f      	mov	r7, r1
 8010e6e:	4620      	mov	r0, r4
 8010e70:	4629      	mov	r1, r5
 8010e72:	f7ef fbd1 	bl	8000618 <__aeabi_dmul>
 8010e76:	4602      	mov	r2, r0
 8010e78:	460b      	mov	r3, r1
 8010e7a:	4630      	mov	r0, r6
 8010e7c:	4639      	mov	r1, r7
 8010e7e:	f7ef fa15 	bl	80002ac <__adddf3>
 8010e82:	9a07      	ldr	r2, [sp, #28]
 8010e84:	4b37      	ldr	r3, [pc, #220]	; (8010f64 <__ieee754_pow+0x774>)
 8010e86:	4413      	add	r3, r2
 8010e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e8c:	f7ef fa0e 	bl	80002ac <__adddf3>
 8010e90:	4682      	mov	sl, r0
 8010e92:	9805      	ldr	r0, [sp, #20]
 8010e94:	468b      	mov	fp, r1
 8010e96:	f7ef fb55 	bl	8000544 <__aeabi_i2d>
 8010e9a:	9a07      	ldr	r2, [sp, #28]
 8010e9c:	4b32      	ldr	r3, [pc, #200]	; (8010f68 <__ieee754_pow+0x778>)
 8010e9e:	4413      	add	r3, r2
 8010ea0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010ea4:	4606      	mov	r6, r0
 8010ea6:	460f      	mov	r7, r1
 8010ea8:	4652      	mov	r2, sl
 8010eaa:	465b      	mov	r3, fp
 8010eac:	ec51 0b18 	vmov	r0, r1, d8
 8010eb0:	f7ef f9fc 	bl	80002ac <__adddf3>
 8010eb4:	4642      	mov	r2, r8
 8010eb6:	464b      	mov	r3, r9
 8010eb8:	f7ef f9f8 	bl	80002ac <__adddf3>
 8010ebc:	4632      	mov	r2, r6
 8010ebe:	463b      	mov	r3, r7
 8010ec0:	f7ef f9f4 	bl	80002ac <__adddf3>
 8010ec4:	2000      	movs	r0, #0
 8010ec6:	4632      	mov	r2, r6
 8010ec8:	463b      	mov	r3, r7
 8010eca:	4604      	mov	r4, r0
 8010ecc:	460d      	mov	r5, r1
 8010ece:	f7ef f9eb 	bl	80002a8 <__aeabi_dsub>
 8010ed2:	4642      	mov	r2, r8
 8010ed4:	464b      	mov	r3, r9
 8010ed6:	f7ef f9e7 	bl	80002a8 <__aeabi_dsub>
 8010eda:	ec53 2b18 	vmov	r2, r3, d8
 8010ede:	f7ef f9e3 	bl	80002a8 <__aeabi_dsub>
 8010ee2:	4602      	mov	r2, r0
 8010ee4:	460b      	mov	r3, r1
 8010ee6:	4650      	mov	r0, sl
 8010ee8:	4659      	mov	r1, fp
 8010eea:	e610      	b.n	8010b0e <__ieee754_pow+0x31e>
 8010eec:	2401      	movs	r4, #1
 8010eee:	e6a1      	b.n	8010c34 <__ieee754_pow+0x444>
 8010ef0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8010f40 <__ieee754_pow+0x750>
 8010ef4:	e617      	b.n	8010b26 <__ieee754_pow+0x336>
 8010ef6:	bf00      	nop
 8010ef8:	4a454eef 	.word	0x4a454eef
 8010efc:	3fca7e28 	.word	0x3fca7e28
 8010f00:	93c9db65 	.word	0x93c9db65
 8010f04:	3fcd864a 	.word	0x3fcd864a
 8010f08:	a91d4101 	.word	0xa91d4101
 8010f0c:	3fd17460 	.word	0x3fd17460
 8010f10:	518f264d 	.word	0x518f264d
 8010f14:	3fd55555 	.word	0x3fd55555
 8010f18:	db6fabff 	.word	0xdb6fabff
 8010f1c:	3fdb6db6 	.word	0x3fdb6db6
 8010f20:	33333303 	.word	0x33333303
 8010f24:	3fe33333 	.word	0x3fe33333
 8010f28:	e0000000 	.word	0xe0000000
 8010f2c:	3feec709 	.word	0x3feec709
 8010f30:	dc3a03fd 	.word	0xdc3a03fd
 8010f34:	3feec709 	.word	0x3feec709
 8010f38:	145b01f5 	.word	0x145b01f5
 8010f3c:	be3e2fe0 	.word	0xbe3e2fe0
 8010f40:	00000000 	.word	0x00000000
 8010f44:	3ff00000 	.word	0x3ff00000
 8010f48:	7ff00000 	.word	0x7ff00000
 8010f4c:	43400000 	.word	0x43400000
 8010f50:	0003988e 	.word	0x0003988e
 8010f54:	000bb679 	.word	0x000bb679
 8010f58:	08015658 	.word	0x08015658
 8010f5c:	3ff00000 	.word	0x3ff00000
 8010f60:	40080000 	.word	0x40080000
 8010f64:	08015678 	.word	0x08015678
 8010f68:	08015668 	.word	0x08015668
 8010f6c:	a3b3      	add	r3, pc, #716	; (adr r3, 801123c <__ieee754_pow+0xa4c>)
 8010f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f72:	4640      	mov	r0, r8
 8010f74:	4649      	mov	r1, r9
 8010f76:	f7ef f999 	bl	80002ac <__adddf3>
 8010f7a:	4622      	mov	r2, r4
 8010f7c:	ec41 0b1a 	vmov	d10, r0, r1
 8010f80:	462b      	mov	r3, r5
 8010f82:	4630      	mov	r0, r6
 8010f84:	4639      	mov	r1, r7
 8010f86:	f7ef f98f 	bl	80002a8 <__aeabi_dsub>
 8010f8a:	4602      	mov	r2, r0
 8010f8c:	460b      	mov	r3, r1
 8010f8e:	ec51 0b1a 	vmov	r0, r1, d10
 8010f92:	f7ef fdd1 	bl	8000b38 <__aeabi_dcmpgt>
 8010f96:	2800      	cmp	r0, #0
 8010f98:	f47f ae04 	bne.w	8010ba4 <__ieee754_pow+0x3b4>
 8010f9c:	4aa2      	ldr	r2, [pc, #648]	; (8011228 <__ieee754_pow+0xa38>)
 8010f9e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010fa2:	4293      	cmp	r3, r2
 8010fa4:	f340 8107 	ble.w	80111b6 <__ieee754_pow+0x9c6>
 8010fa8:	151b      	asrs	r3, r3, #20
 8010faa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8010fae:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8010fb2:	fa4a fa03 	asr.w	sl, sl, r3
 8010fb6:	44da      	add	sl, fp
 8010fb8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8010fbc:	489b      	ldr	r0, [pc, #620]	; (801122c <__ieee754_pow+0xa3c>)
 8010fbe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8010fc2:	4108      	asrs	r0, r1
 8010fc4:	ea00 030a 	and.w	r3, r0, sl
 8010fc8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8010fcc:	f1c1 0114 	rsb	r1, r1, #20
 8010fd0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8010fd4:	fa4a fa01 	asr.w	sl, sl, r1
 8010fd8:	f1bb 0f00 	cmp.w	fp, #0
 8010fdc:	f04f 0200 	mov.w	r2, #0
 8010fe0:	4620      	mov	r0, r4
 8010fe2:	4629      	mov	r1, r5
 8010fe4:	bfb8      	it	lt
 8010fe6:	f1ca 0a00 	rsblt	sl, sl, #0
 8010fea:	f7ef f95d 	bl	80002a8 <__aeabi_dsub>
 8010fee:	ec41 0b19 	vmov	d9, r0, r1
 8010ff2:	4642      	mov	r2, r8
 8010ff4:	464b      	mov	r3, r9
 8010ff6:	ec51 0b19 	vmov	r0, r1, d9
 8010ffa:	f7ef f957 	bl	80002ac <__adddf3>
 8010ffe:	a37a      	add	r3, pc, #488	; (adr r3, 80111e8 <__ieee754_pow+0x9f8>)
 8011000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011004:	2000      	movs	r0, #0
 8011006:	4604      	mov	r4, r0
 8011008:	460d      	mov	r5, r1
 801100a:	f7ef fb05 	bl	8000618 <__aeabi_dmul>
 801100e:	ec53 2b19 	vmov	r2, r3, d9
 8011012:	4606      	mov	r6, r0
 8011014:	460f      	mov	r7, r1
 8011016:	4620      	mov	r0, r4
 8011018:	4629      	mov	r1, r5
 801101a:	f7ef f945 	bl	80002a8 <__aeabi_dsub>
 801101e:	4602      	mov	r2, r0
 8011020:	460b      	mov	r3, r1
 8011022:	4640      	mov	r0, r8
 8011024:	4649      	mov	r1, r9
 8011026:	f7ef f93f 	bl	80002a8 <__aeabi_dsub>
 801102a:	a371      	add	r3, pc, #452	; (adr r3, 80111f0 <__ieee754_pow+0xa00>)
 801102c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011030:	f7ef faf2 	bl	8000618 <__aeabi_dmul>
 8011034:	a370      	add	r3, pc, #448	; (adr r3, 80111f8 <__ieee754_pow+0xa08>)
 8011036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801103a:	4680      	mov	r8, r0
 801103c:	4689      	mov	r9, r1
 801103e:	4620      	mov	r0, r4
 8011040:	4629      	mov	r1, r5
 8011042:	f7ef fae9 	bl	8000618 <__aeabi_dmul>
 8011046:	4602      	mov	r2, r0
 8011048:	460b      	mov	r3, r1
 801104a:	4640      	mov	r0, r8
 801104c:	4649      	mov	r1, r9
 801104e:	f7ef f92d 	bl	80002ac <__adddf3>
 8011052:	4604      	mov	r4, r0
 8011054:	460d      	mov	r5, r1
 8011056:	4602      	mov	r2, r0
 8011058:	460b      	mov	r3, r1
 801105a:	4630      	mov	r0, r6
 801105c:	4639      	mov	r1, r7
 801105e:	f7ef f925 	bl	80002ac <__adddf3>
 8011062:	4632      	mov	r2, r6
 8011064:	463b      	mov	r3, r7
 8011066:	4680      	mov	r8, r0
 8011068:	4689      	mov	r9, r1
 801106a:	f7ef f91d 	bl	80002a8 <__aeabi_dsub>
 801106e:	4602      	mov	r2, r0
 8011070:	460b      	mov	r3, r1
 8011072:	4620      	mov	r0, r4
 8011074:	4629      	mov	r1, r5
 8011076:	f7ef f917 	bl	80002a8 <__aeabi_dsub>
 801107a:	4642      	mov	r2, r8
 801107c:	4606      	mov	r6, r0
 801107e:	460f      	mov	r7, r1
 8011080:	464b      	mov	r3, r9
 8011082:	4640      	mov	r0, r8
 8011084:	4649      	mov	r1, r9
 8011086:	f7ef fac7 	bl	8000618 <__aeabi_dmul>
 801108a:	a35d      	add	r3, pc, #372	; (adr r3, 8011200 <__ieee754_pow+0xa10>)
 801108c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011090:	4604      	mov	r4, r0
 8011092:	460d      	mov	r5, r1
 8011094:	f7ef fac0 	bl	8000618 <__aeabi_dmul>
 8011098:	a35b      	add	r3, pc, #364	; (adr r3, 8011208 <__ieee754_pow+0xa18>)
 801109a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801109e:	f7ef f903 	bl	80002a8 <__aeabi_dsub>
 80110a2:	4622      	mov	r2, r4
 80110a4:	462b      	mov	r3, r5
 80110a6:	f7ef fab7 	bl	8000618 <__aeabi_dmul>
 80110aa:	a359      	add	r3, pc, #356	; (adr r3, 8011210 <__ieee754_pow+0xa20>)
 80110ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110b0:	f7ef f8fc 	bl	80002ac <__adddf3>
 80110b4:	4622      	mov	r2, r4
 80110b6:	462b      	mov	r3, r5
 80110b8:	f7ef faae 	bl	8000618 <__aeabi_dmul>
 80110bc:	a356      	add	r3, pc, #344	; (adr r3, 8011218 <__ieee754_pow+0xa28>)
 80110be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110c2:	f7ef f8f1 	bl	80002a8 <__aeabi_dsub>
 80110c6:	4622      	mov	r2, r4
 80110c8:	462b      	mov	r3, r5
 80110ca:	f7ef faa5 	bl	8000618 <__aeabi_dmul>
 80110ce:	a354      	add	r3, pc, #336	; (adr r3, 8011220 <__ieee754_pow+0xa30>)
 80110d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110d4:	f7ef f8ea 	bl	80002ac <__adddf3>
 80110d8:	4622      	mov	r2, r4
 80110da:	462b      	mov	r3, r5
 80110dc:	f7ef fa9c 	bl	8000618 <__aeabi_dmul>
 80110e0:	4602      	mov	r2, r0
 80110e2:	460b      	mov	r3, r1
 80110e4:	4640      	mov	r0, r8
 80110e6:	4649      	mov	r1, r9
 80110e8:	f7ef f8de 	bl	80002a8 <__aeabi_dsub>
 80110ec:	4604      	mov	r4, r0
 80110ee:	460d      	mov	r5, r1
 80110f0:	4602      	mov	r2, r0
 80110f2:	460b      	mov	r3, r1
 80110f4:	4640      	mov	r0, r8
 80110f6:	4649      	mov	r1, r9
 80110f8:	f7ef fa8e 	bl	8000618 <__aeabi_dmul>
 80110fc:	2200      	movs	r2, #0
 80110fe:	ec41 0b19 	vmov	d9, r0, r1
 8011102:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011106:	4620      	mov	r0, r4
 8011108:	4629      	mov	r1, r5
 801110a:	f7ef f8cd 	bl	80002a8 <__aeabi_dsub>
 801110e:	4602      	mov	r2, r0
 8011110:	460b      	mov	r3, r1
 8011112:	ec51 0b19 	vmov	r0, r1, d9
 8011116:	f7ef fba9 	bl	800086c <__aeabi_ddiv>
 801111a:	4632      	mov	r2, r6
 801111c:	4604      	mov	r4, r0
 801111e:	460d      	mov	r5, r1
 8011120:	463b      	mov	r3, r7
 8011122:	4640      	mov	r0, r8
 8011124:	4649      	mov	r1, r9
 8011126:	f7ef fa77 	bl	8000618 <__aeabi_dmul>
 801112a:	4632      	mov	r2, r6
 801112c:	463b      	mov	r3, r7
 801112e:	f7ef f8bd 	bl	80002ac <__adddf3>
 8011132:	4602      	mov	r2, r0
 8011134:	460b      	mov	r3, r1
 8011136:	4620      	mov	r0, r4
 8011138:	4629      	mov	r1, r5
 801113a:	f7ef f8b5 	bl	80002a8 <__aeabi_dsub>
 801113e:	4642      	mov	r2, r8
 8011140:	464b      	mov	r3, r9
 8011142:	f7ef f8b1 	bl	80002a8 <__aeabi_dsub>
 8011146:	460b      	mov	r3, r1
 8011148:	4602      	mov	r2, r0
 801114a:	4939      	ldr	r1, [pc, #228]	; (8011230 <__ieee754_pow+0xa40>)
 801114c:	2000      	movs	r0, #0
 801114e:	f7ef f8ab 	bl	80002a8 <__aeabi_dsub>
 8011152:	ec41 0b10 	vmov	d0, r0, r1
 8011156:	ee10 3a90 	vmov	r3, s1
 801115a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801115e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011162:	da2b      	bge.n	80111bc <__ieee754_pow+0x9cc>
 8011164:	4650      	mov	r0, sl
 8011166:	f000 fa7f 	bl	8011668 <scalbn>
 801116a:	ec51 0b10 	vmov	r0, r1, d0
 801116e:	ec53 2b18 	vmov	r2, r3, d8
 8011172:	f7ff bbee 	b.w	8010952 <__ieee754_pow+0x162>
 8011176:	4b2f      	ldr	r3, [pc, #188]	; (8011234 <__ieee754_pow+0xa44>)
 8011178:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801117c:	429e      	cmp	r6, r3
 801117e:	f77f af0d 	ble.w	8010f9c <__ieee754_pow+0x7ac>
 8011182:	4b2d      	ldr	r3, [pc, #180]	; (8011238 <__ieee754_pow+0xa48>)
 8011184:	440b      	add	r3, r1
 8011186:	4303      	orrs	r3, r0
 8011188:	d009      	beq.n	801119e <__ieee754_pow+0x9ae>
 801118a:	ec51 0b18 	vmov	r0, r1, d8
 801118e:	2200      	movs	r2, #0
 8011190:	2300      	movs	r3, #0
 8011192:	f7ef fcb3 	bl	8000afc <__aeabi_dcmplt>
 8011196:	3800      	subs	r0, #0
 8011198:	bf18      	it	ne
 801119a:	2001      	movne	r0, #1
 801119c:	e448      	b.n	8010a30 <__ieee754_pow+0x240>
 801119e:	4622      	mov	r2, r4
 80111a0:	462b      	mov	r3, r5
 80111a2:	f7ef f881 	bl	80002a8 <__aeabi_dsub>
 80111a6:	4642      	mov	r2, r8
 80111a8:	464b      	mov	r3, r9
 80111aa:	f7ef fcbb 	bl	8000b24 <__aeabi_dcmpge>
 80111ae:	2800      	cmp	r0, #0
 80111b0:	f43f aef4 	beq.w	8010f9c <__ieee754_pow+0x7ac>
 80111b4:	e7e9      	b.n	801118a <__ieee754_pow+0x99a>
 80111b6:	f04f 0a00 	mov.w	sl, #0
 80111ba:	e71a      	b.n	8010ff2 <__ieee754_pow+0x802>
 80111bc:	ec51 0b10 	vmov	r0, r1, d0
 80111c0:	4619      	mov	r1, r3
 80111c2:	e7d4      	b.n	801116e <__ieee754_pow+0x97e>
 80111c4:	491a      	ldr	r1, [pc, #104]	; (8011230 <__ieee754_pow+0xa40>)
 80111c6:	2000      	movs	r0, #0
 80111c8:	f7ff bb31 	b.w	801082e <__ieee754_pow+0x3e>
 80111cc:	2000      	movs	r0, #0
 80111ce:	2100      	movs	r1, #0
 80111d0:	f7ff bb2d 	b.w	801082e <__ieee754_pow+0x3e>
 80111d4:	4630      	mov	r0, r6
 80111d6:	4639      	mov	r1, r7
 80111d8:	f7ff bb29 	b.w	801082e <__ieee754_pow+0x3e>
 80111dc:	9204      	str	r2, [sp, #16]
 80111de:	f7ff bb7b 	b.w	80108d8 <__ieee754_pow+0xe8>
 80111e2:	2300      	movs	r3, #0
 80111e4:	f7ff bb65 	b.w	80108b2 <__ieee754_pow+0xc2>
 80111e8:	00000000 	.word	0x00000000
 80111ec:	3fe62e43 	.word	0x3fe62e43
 80111f0:	fefa39ef 	.word	0xfefa39ef
 80111f4:	3fe62e42 	.word	0x3fe62e42
 80111f8:	0ca86c39 	.word	0x0ca86c39
 80111fc:	be205c61 	.word	0xbe205c61
 8011200:	72bea4d0 	.word	0x72bea4d0
 8011204:	3e663769 	.word	0x3e663769
 8011208:	c5d26bf1 	.word	0xc5d26bf1
 801120c:	3ebbbd41 	.word	0x3ebbbd41
 8011210:	af25de2c 	.word	0xaf25de2c
 8011214:	3f11566a 	.word	0x3f11566a
 8011218:	16bebd93 	.word	0x16bebd93
 801121c:	3f66c16c 	.word	0x3f66c16c
 8011220:	5555553e 	.word	0x5555553e
 8011224:	3fc55555 	.word	0x3fc55555
 8011228:	3fe00000 	.word	0x3fe00000
 801122c:	fff00000 	.word	0xfff00000
 8011230:	3ff00000 	.word	0x3ff00000
 8011234:	4090cbff 	.word	0x4090cbff
 8011238:	3f6f3400 	.word	0x3f6f3400
 801123c:	652b82fe 	.word	0x652b82fe
 8011240:	3c971547 	.word	0x3c971547
 8011244:	00000000 	.word	0x00000000

08011248 <__ieee754_rem_pio2>:
 8011248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801124c:	ed2d 8b02 	vpush	{d8}
 8011250:	ec55 4b10 	vmov	r4, r5, d0
 8011254:	4bca      	ldr	r3, [pc, #808]	; (8011580 <__ieee754_rem_pio2+0x338>)
 8011256:	b08b      	sub	sp, #44	; 0x2c
 8011258:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801125c:	4598      	cmp	r8, r3
 801125e:	4682      	mov	sl, r0
 8011260:	9502      	str	r5, [sp, #8]
 8011262:	dc08      	bgt.n	8011276 <__ieee754_rem_pio2+0x2e>
 8011264:	2200      	movs	r2, #0
 8011266:	2300      	movs	r3, #0
 8011268:	ed80 0b00 	vstr	d0, [r0]
 801126c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011270:	f04f 0b00 	mov.w	fp, #0
 8011274:	e028      	b.n	80112c8 <__ieee754_rem_pio2+0x80>
 8011276:	4bc3      	ldr	r3, [pc, #780]	; (8011584 <__ieee754_rem_pio2+0x33c>)
 8011278:	4598      	cmp	r8, r3
 801127a:	dc78      	bgt.n	801136e <__ieee754_rem_pio2+0x126>
 801127c:	9b02      	ldr	r3, [sp, #8]
 801127e:	4ec2      	ldr	r6, [pc, #776]	; (8011588 <__ieee754_rem_pio2+0x340>)
 8011280:	2b00      	cmp	r3, #0
 8011282:	ee10 0a10 	vmov	r0, s0
 8011286:	a3b0      	add	r3, pc, #704	; (adr r3, 8011548 <__ieee754_rem_pio2+0x300>)
 8011288:	e9d3 2300 	ldrd	r2, r3, [r3]
 801128c:	4629      	mov	r1, r5
 801128e:	dd39      	ble.n	8011304 <__ieee754_rem_pio2+0xbc>
 8011290:	f7ef f80a 	bl	80002a8 <__aeabi_dsub>
 8011294:	45b0      	cmp	r8, r6
 8011296:	4604      	mov	r4, r0
 8011298:	460d      	mov	r5, r1
 801129a:	d01b      	beq.n	80112d4 <__ieee754_rem_pio2+0x8c>
 801129c:	a3ac      	add	r3, pc, #688	; (adr r3, 8011550 <__ieee754_rem_pio2+0x308>)
 801129e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112a2:	f7ef f801 	bl	80002a8 <__aeabi_dsub>
 80112a6:	4602      	mov	r2, r0
 80112a8:	460b      	mov	r3, r1
 80112aa:	e9ca 2300 	strd	r2, r3, [sl]
 80112ae:	4620      	mov	r0, r4
 80112b0:	4629      	mov	r1, r5
 80112b2:	f7ee fff9 	bl	80002a8 <__aeabi_dsub>
 80112b6:	a3a6      	add	r3, pc, #664	; (adr r3, 8011550 <__ieee754_rem_pio2+0x308>)
 80112b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112bc:	f7ee fff4 	bl	80002a8 <__aeabi_dsub>
 80112c0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80112c4:	f04f 0b01 	mov.w	fp, #1
 80112c8:	4658      	mov	r0, fp
 80112ca:	b00b      	add	sp, #44	; 0x2c
 80112cc:	ecbd 8b02 	vpop	{d8}
 80112d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112d4:	a3a0      	add	r3, pc, #640	; (adr r3, 8011558 <__ieee754_rem_pio2+0x310>)
 80112d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112da:	f7ee ffe5 	bl	80002a8 <__aeabi_dsub>
 80112de:	a3a0      	add	r3, pc, #640	; (adr r3, 8011560 <__ieee754_rem_pio2+0x318>)
 80112e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112e4:	4604      	mov	r4, r0
 80112e6:	460d      	mov	r5, r1
 80112e8:	f7ee ffde 	bl	80002a8 <__aeabi_dsub>
 80112ec:	4602      	mov	r2, r0
 80112ee:	460b      	mov	r3, r1
 80112f0:	e9ca 2300 	strd	r2, r3, [sl]
 80112f4:	4620      	mov	r0, r4
 80112f6:	4629      	mov	r1, r5
 80112f8:	f7ee ffd6 	bl	80002a8 <__aeabi_dsub>
 80112fc:	a398      	add	r3, pc, #608	; (adr r3, 8011560 <__ieee754_rem_pio2+0x318>)
 80112fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011302:	e7db      	b.n	80112bc <__ieee754_rem_pio2+0x74>
 8011304:	f7ee ffd2 	bl	80002ac <__adddf3>
 8011308:	45b0      	cmp	r8, r6
 801130a:	4604      	mov	r4, r0
 801130c:	460d      	mov	r5, r1
 801130e:	d016      	beq.n	801133e <__ieee754_rem_pio2+0xf6>
 8011310:	a38f      	add	r3, pc, #572	; (adr r3, 8011550 <__ieee754_rem_pio2+0x308>)
 8011312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011316:	f7ee ffc9 	bl	80002ac <__adddf3>
 801131a:	4602      	mov	r2, r0
 801131c:	460b      	mov	r3, r1
 801131e:	e9ca 2300 	strd	r2, r3, [sl]
 8011322:	4620      	mov	r0, r4
 8011324:	4629      	mov	r1, r5
 8011326:	f7ee ffbf 	bl	80002a8 <__aeabi_dsub>
 801132a:	a389      	add	r3, pc, #548	; (adr r3, 8011550 <__ieee754_rem_pio2+0x308>)
 801132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011330:	f7ee ffbc 	bl	80002ac <__adddf3>
 8011334:	f04f 3bff 	mov.w	fp, #4294967295
 8011338:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801133c:	e7c4      	b.n	80112c8 <__ieee754_rem_pio2+0x80>
 801133e:	a386      	add	r3, pc, #536	; (adr r3, 8011558 <__ieee754_rem_pio2+0x310>)
 8011340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011344:	f7ee ffb2 	bl	80002ac <__adddf3>
 8011348:	a385      	add	r3, pc, #532	; (adr r3, 8011560 <__ieee754_rem_pio2+0x318>)
 801134a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801134e:	4604      	mov	r4, r0
 8011350:	460d      	mov	r5, r1
 8011352:	f7ee ffab 	bl	80002ac <__adddf3>
 8011356:	4602      	mov	r2, r0
 8011358:	460b      	mov	r3, r1
 801135a:	e9ca 2300 	strd	r2, r3, [sl]
 801135e:	4620      	mov	r0, r4
 8011360:	4629      	mov	r1, r5
 8011362:	f7ee ffa1 	bl	80002a8 <__aeabi_dsub>
 8011366:	a37e      	add	r3, pc, #504	; (adr r3, 8011560 <__ieee754_rem_pio2+0x318>)
 8011368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801136c:	e7e0      	b.n	8011330 <__ieee754_rem_pio2+0xe8>
 801136e:	4b87      	ldr	r3, [pc, #540]	; (801158c <__ieee754_rem_pio2+0x344>)
 8011370:	4598      	cmp	r8, r3
 8011372:	f300 80d8 	bgt.w	8011526 <__ieee754_rem_pio2+0x2de>
 8011376:	f000 f96d 	bl	8011654 <fabs>
 801137a:	ec55 4b10 	vmov	r4, r5, d0
 801137e:	ee10 0a10 	vmov	r0, s0
 8011382:	a379      	add	r3, pc, #484	; (adr r3, 8011568 <__ieee754_rem_pio2+0x320>)
 8011384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011388:	4629      	mov	r1, r5
 801138a:	f7ef f945 	bl	8000618 <__aeabi_dmul>
 801138e:	4b80      	ldr	r3, [pc, #512]	; (8011590 <__ieee754_rem_pio2+0x348>)
 8011390:	2200      	movs	r2, #0
 8011392:	f7ee ff8b 	bl	80002ac <__adddf3>
 8011396:	f7ef fbef 	bl	8000b78 <__aeabi_d2iz>
 801139a:	4683      	mov	fp, r0
 801139c:	f7ef f8d2 	bl	8000544 <__aeabi_i2d>
 80113a0:	4602      	mov	r2, r0
 80113a2:	460b      	mov	r3, r1
 80113a4:	ec43 2b18 	vmov	d8, r2, r3
 80113a8:	a367      	add	r3, pc, #412	; (adr r3, 8011548 <__ieee754_rem_pio2+0x300>)
 80113aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113ae:	f7ef f933 	bl	8000618 <__aeabi_dmul>
 80113b2:	4602      	mov	r2, r0
 80113b4:	460b      	mov	r3, r1
 80113b6:	4620      	mov	r0, r4
 80113b8:	4629      	mov	r1, r5
 80113ba:	f7ee ff75 	bl	80002a8 <__aeabi_dsub>
 80113be:	a364      	add	r3, pc, #400	; (adr r3, 8011550 <__ieee754_rem_pio2+0x308>)
 80113c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113c4:	4606      	mov	r6, r0
 80113c6:	460f      	mov	r7, r1
 80113c8:	ec51 0b18 	vmov	r0, r1, d8
 80113cc:	f7ef f924 	bl	8000618 <__aeabi_dmul>
 80113d0:	f1bb 0f1f 	cmp.w	fp, #31
 80113d4:	4604      	mov	r4, r0
 80113d6:	460d      	mov	r5, r1
 80113d8:	dc0d      	bgt.n	80113f6 <__ieee754_rem_pio2+0x1ae>
 80113da:	4b6e      	ldr	r3, [pc, #440]	; (8011594 <__ieee754_rem_pio2+0x34c>)
 80113dc:	f10b 32ff 	add.w	r2, fp, #4294967295
 80113e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113e4:	4543      	cmp	r3, r8
 80113e6:	d006      	beq.n	80113f6 <__ieee754_rem_pio2+0x1ae>
 80113e8:	4622      	mov	r2, r4
 80113ea:	462b      	mov	r3, r5
 80113ec:	4630      	mov	r0, r6
 80113ee:	4639      	mov	r1, r7
 80113f0:	f7ee ff5a 	bl	80002a8 <__aeabi_dsub>
 80113f4:	e00e      	b.n	8011414 <__ieee754_rem_pio2+0x1cc>
 80113f6:	462b      	mov	r3, r5
 80113f8:	4622      	mov	r2, r4
 80113fa:	4630      	mov	r0, r6
 80113fc:	4639      	mov	r1, r7
 80113fe:	f7ee ff53 	bl	80002a8 <__aeabi_dsub>
 8011402:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011406:	9303      	str	r3, [sp, #12]
 8011408:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801140c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8011410:	2b10      	cmp	r3, #16
 8011412:	dc02      	bgt.n	801141a <__ieee754_rem_pio2+0x1d2>
 8011414:	e9ca 0100 	strd	r0, r1, [sl]
 8011418:	e039      	b.n	801148e <__ieee754_rem_pio2+0x246>
 801141a:	a34f      	add	r3, pc, #316	; (adr r3, 8011558 <__ieee754_rem_pio2+0x310>)
 801141c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011420:	ec51 0b18 	vmov	r0, r1, d8
 8011424:	f7ef f8f8 	bl	8000618 <__aeabi_dmul>
 8011428:	4604      	mov	r4, r0
 801142a:	460d      	mov	r5, r1
 801142c:	4602      	mov	r2, r0
 801142e:	460b      	mov	r3, r1
 8011430:	4630      	mov	r0, r6
 8011432:	4639      	mov	r1, r7
 8011434:	f7ee ff38 	bl	80002a8 <__aeabi_dsub>
 8011438:	4602      	mov	r2, r0
 801143a:	460b      	mov	r3, r1
 801143c:	4680      	mov	r8, r0
 801143e:	4689      	mov	r9, r1
 8011440:	4630      	mov	r0, r6
 8011442:	4639      	mov	r1, r7
 8011444:	f7ee ff30 	bl	80002a8 <__aeabi_dsub>
 8011448:	4622      	mov	r2, r4
 801144a:	462b      	mov	r3, r5
 801144c:	f7ee ff2c 	bl	80002a8 <__aeabi_dsub>
 8011450:	a343      	add	r3, pc, #268	; (adr r3, 8011560 <__ieee754_rem_pio2+0x318>)
 8011452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011456:	4604      	mov	r4, r0
 8011458:	460d      	mov	r5, r1
 801145a:	ec51 0b18 	vmov	r0, r1, d8
 801145e:	f7ef f8db 	bl	8000618 <__aeabi_dmul>
 8011462:	4622      	mov	r2, r4
 8011464:	462b      	mov	r3, r5
 8011466:	f7ee ff1f 	bl	80002a8 <__aeabi_dsub>
 801146a:	4602      	mov	r2, r0
 801146c:	460b      	mov	r3, r1
 801146e:	4604      	mov	r4, r0
 8011470:	460d      	mov	r5, r1
 8011472:	4640      	mov	r0, r8
 8011474:	4649      	mov	r1, r9
 8011476:	f7ee ff17 	bl	80002a8 <__aeabi_dsub>
 801147a:	9a03      	ldr	r2, [sp, #12]
 801147c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011480:	1ad3      	subs	r3, r2, r3
 8011482:	2b31      	cmp	r3, #49	; 0x31
 8011484:	dc24      	bgt.n	80114d0 <__ieee754_rem_pio2+0x288>
 8011486:	e9ca 0100 	strd	r0, r1, [sl]
 801148a:	4646      	mov	r6, r8
 801148c:	464f      	mov	r7, r9
 801148e:	e9da 8900 	ldrd	r8, r9, [sl]
 8011492:	4630      	mov	r0, r6
 8011494:	4642      	mov	r2, r8
 8011496:	464b      	mov	r3, r9
 8011498:	4639      	mov	r1, r7
 801149a:	f7ee ff05 	bl	80002a8 <__aeabi_dsub>
 801149e:	462b      	mov	r3, r5
 80114a0:	4622      	mov	r2, r4
 80114a2:	f7ee ff01 	bl	80002a8 <__aeabi_dsub>
 80114a6:	9b02      	ldr	r3, [sp, #8]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80114ae:	f6bf af0b 	bge.w	80112c8 <__ieee754_rem_pio2+0x80>
 80114b2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80114b6:	f8ca 3004 	str.w	r3, [sl, #4]
 80114ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80114be:	f8ca 8000 	str.w	r8, [sl]
 80114c2:	f8ca 0008 	str.w	r0, [sl, #8]
 80114c6:	f8ca 300c 	str.w	r3, [sl, #12]
 80114ca:	f1cb 0b00 	rsb	fp, fp, #0
 80114ce:	e6fb      	b.n	80112c8 <__ieee754_rem_pio2+0x80>
 80114d0:	a327      	add	r3, pc, #156	; (adr r3, 8011570 <__ieee754_rem_pio2+0x328>)
 80114d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114d6:	ec51 0b18 	vmov	r0, r1, d8
 80114da:	f7ef f89d 	bl	8000618 <__aeabi_dmul>
 80114de:	4604      	mov	r4, r0
 80114e0:	460d      	mov	r5, r1
 80114e2:	4602      	mov	r2, r0
 80114e4:	460b      	mov	r3, r1
 80114e6:	4640      	mov	r0, r8
 80114e8:	4649      	mov	r1, r9
 80114ea:	f7ee fedd 	bl	80002a8 <__aeabi_dsub>
 80114ee:	4602      	mov	r2, r0
 80114f0:	460b      	mov	r3, r1
 80114f2:	4606      	mov	r6, r0
 80114f4:	460f      	mov	r7, r1
 80114f6:	4640      	mov	r0, r8
 80114f8:	4649      	mov	r1, r9
 80114fa:	f7ee fed5 	bl	80002a8 <__aeabi_dsub>
 80114fe:	4622      	mov	r2, r4
 8011500:	462b      	mov	r3, r5
 8011502:	f7ee fed1 	bl	80002a8 <__aeabi_dsub>
 8011506:	a31c      	add	r3, pc, #112	; (adr r3, 8011578 <__ieee754_rem_pio2+0x330>)
 8011508:	e9d3 2300 	ldrd	r2, r3, [r3]
 801150c:	4604      	mov	r4, r0
 801150e:	460d      	mov	r5, r1
 8011510:	ec51 0b18 	vmov	r0, r1, d8
 8011514:	f7ef f880 	bl	8000618 <__aeabi_dmul>
 8011518:	4622      	mov	r2, r4
 801151a:	462b      	mov	r3, r5
 801151c:	f7ee fec4 	bl	80002a8 <__aeabi_dsub>
 8011520:	4604      	mov	r4, r0
 8011522:	460d      	mov	r5, r1
 8011524:	e760      	b.n	80113e8 <__ieee754_rem_pio2+0x1a0>
 8011526:	4b1c      	ldr	r3, [pc, #112]	; (8011598 <__ieee754_rem_pio2+0x350>)
 8011528:	4598      	cmp	r8, r3
 801152a:	dd37      	ble.n	801159c <__ieee754_rem_pio2+0x354>
 801152c:	ee10 2a10 	vmov	r2, s0
 8011530:	462b      	mov	r3, r5
 8011532:	4620      	mov	r0, r4
 8011534:	4629      	mov	r1, r5
 8011536:	f7ee feb7 	bl	80002a8 <__aeabi_dsub>
 801153a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801153e:	e9ca 0100 	strd	r0, r1, [sl]
 8011542:	e695      	b.n	8011270 <__ieee754_rem_pio2+0x28>
 8011544:	f3af 8000 	nop.w
 8011548:	54400000 	.word	0x54400000
 801154c:	3ff921fb 	.word	0x3ff921fb
 8011550:	1a626331 	.word	0x1a626331
 8011554:	3dd0b461 	.word	0x3dd0b461
 8011558:	1a600000 	.word	0x1a600000
 801155c:	3dd0b461 	.word	0x3dd0b461
 8011560:	2e037073 	.word	0x2e037073
 8011564:	3ba3198a 	.word	0x3ba3198a
 8011568:	6dc9c883 	.word	0x6dc9c883
 801156c:	3fe45f30 	.word	0x3fe45f30
 8011570:	2e000000 	.word	0x2e000000
 8011574:	3ba3198a 	.word	0x3ba3198a
 8011578:	252049c1 	.word	0x252049c1
 801157c:	397b839a 	.word	0x397b839a
 8011580:	3fe921fb 	.word	0x3fe921fb
 8011584:	4002d97b 	.word	0x4002d97b
 8011588:	3ff921fb 	.word	0x3ff921fb
 801158c:	413921fb 	.word	0x413921fb
 8011590:	3fe00000 	.word	0x3fe00000
 8011594:	08015688 	.word	0x08015688
 8011598:	7fefffff 	.word	0x7fefffff
 801159c:	ea4f 5628 	mov.w	r6, r8, asr #20
 80115a0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80115a4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80115a8:	4620      	mov	r0, r4
 80115aa:	460d      	mov	r5, r1
 80115ac:	f7ef fae4 	bl	8000b78 <__aeabi_d2iz>
 80115b0:	f7ee ffc8 	bl	8000544 <__aeabi_i2d>
 80115b4:	4602      	mov	r2, r0
 80115b6:	460b      	mov	r3, r1
 80115b8:	4620      	mov	r0, r4
 80115ba:	4629      	mov	r1, r5
 80115bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80115c0:	f7ee fe72 	bl	80002a8 <__aeabi_dsub>
 80115c4:	4b21      	ldr	r3, [pc, #132]	; (801164c <__ieee754_rem_pio2+0x404>)
 80115c6:	2200      	movs	r2, #0
 80115c8:	f7ef f826 	bl	8000618 <__aeabi_dmul>
 80115cc:	460d      	mov	r5, r1
 80115ce:	4604      	mov	r4, r0
 80115d0:	f7ef fad2 	bl	8000b78 <__aeabi_d2iz>
 80115d4:	f7ee ffb6 	bl	8000544 <__aeabi_i2d>
 80115d8:	4602      	mov	r2, r0
 80115da:	460b      	mov	r3, r1
 80115dc:	4620      	mov	r0, r4
 80115de:	4629      	mov	r1, r5
 80115e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80115e4:	f7ee fe60 	bl	80002a8 <__aeabi_dsub>
 80115e8:	4b18      	ldr	r3, [pc, #96]	; (801164c <__ieee754_rem_pio2+0x404>)
 80115ea:	2200      	movs	r2, #0
 80115ec:	f7ef f814 	bl	8000618 <__aeabi_dmul>
 80115f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80115f4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80115f8:	2703      	movs	r7, #3
 80115fa:	2400      	movs	r4, #0
 80115fc:	2500      	movs	r5, #0
 80115fe:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8011602:	4622      	mov	r2, r4
 8011604:	462b      	mov	r3, r5
 8011606:	46b9      	mov	r9, r7
 8011608:	3f01      	subs	r7, #1
 801160a:	f7ef fa6d 	bl	8000ae8 <__aeabi_dcmpeq>
 801160e:	2800      	cmp	r0, #0
 8011610:	d1f5      	bne.n	80115fe <__ieee754_rem_pio2+0x3b6>
 8011612:	4b0f      	ldr	r3, [pc, #60]	; (8011650 <__ieee754_rem_pio2+0x408>)
 8011614:	9301      	str	r3, [sp, #4]
 8011616:	2302      	movs	r3, #2
 8011618:	9300      	str	r3, [sp, #0]
 801161a:	4632      	mov	r2, r6
 801161c:	464b      	mov	r3, r9
 801161e:	4651      	mov	r1, sl
 8011620:	a804      	add	r0, sp, #16
 8011622:	f000 f8d1 	bl	80117c8 <__kernel_rem_pio2>
 8011626:	9b02      	ldr	r3, [sp, #8]
 8011628:	2b00      	cmp	r3, #0
 801162a:	4683      	mov	fp, r0
 801162c:	f6bf ae4c 	bge.w	80112c8 <__ieee754_rem_pio2+0x80>
 8011630:	e9da 2100 	ldrd	r2, r1, [sl]
 8011634:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011638:	e9ca 2300 	strd	r2, r3, [sl]
 801163c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8011640:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011644:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8011648:	e73f      	b.n	80114ca <__ieee754_rem_pio2+0x282>
 801164a:	bf00      	nop
 801164c:	41700000 	.word	0x41700000
 8011650:	08015708 	.word	0x08015708

08011654 <fabs>:
 8011654:	ec51 0b10 	vmov	r0, r1, d0
 8011658:	ee10 2a10 	vmov	r2, s0
 801165c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011660:	ec43 2b10 	vmov	d0, r2, r3
 8011664:	4770      	bx	lr
	...

08011668 <scalbn>:
 8011668:	b570      	push	{r4, r5, r6, lr}
 801166a:	ec55 4b10 	vmov	r4, r5, d0
 801166e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8011672:	4606      	mov	r6, r0
 8011674:	462b      	mov	r3, r5
 8011676:	b999      	cbnz	r1, 80116a0 <scalbn+0x38>
 8011678:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801167c:	4323      	orrs	r3, r4
 801167e:	d03f      	beq.n	8011700 <scalbn+0x98>
 8011680:	4b35      	ldr	r3, [pc, #212]	; (8011758 <scalbn+0xf0>)
 8011682:	4629      	mov	r1, r5
 8011684:	ee10 0a10 	vmov	r0, s0
 8011688:	2200      	movs	r2, #0
 801168a:	f7ee ffc5 	bl	8000618 <__aeabi_dmul>
 801168e:	4b33      	ldr	r3, [pc, #204]	; (801175c <scalbn+0xf4>)
 8011690:	429e      	cmp	r6, r3
 8011692:	4604      	mov	r4, r0
 8011694:	460d      	mov	r5, r1
 8011696:	da10      	bge.n	80116ba <scalbn+0x52>
 8011698:	a327      	add	r3, pc, #156	; (adr r3, 8011738 <scalbn+0xd0>)
 801169a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801169e:	e01f      	b.n	80116e0 <scalbn+0x78>
 80116a0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80116a4:	4291      	cmp	r1, r2
 80116a6:	d10c      	bne.n	80116c2 <scalbn+0x5a>
 80116a8:	ee10 2a10 	vmov	r2, s0
 80116ac:	4620      	mov	r0, r4
 80116ae:	4629      	mov	r1, r5
 80116b0:	f7ee fdfc 	bl	80002ac <__adddf3>
 80116b4:	4604      	mov	r4, r0
 80116b6:	460d      	mov	r5, r1
 80116b8:	e022      	b.n	8011700 <scalbn+0x98>
 80116ba:	460b      	mov	r3, r1
 80116bc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80116c0:	3936      	subs	r1, #54	; 0x36
 80116c2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80116c6:	4296      	cmp	r6, r2
 80116c8:	dd0d      	ble.n	80116e6 <scalbn+0x7e>
 80116ca:	2d00      	cmp	r5, #0
 80116cc:	a11c      	add	r1, pc, #112	; (adr r1, 8011740 <scalbn+0xd8>)
 80116ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80116d2:	da02      	bge.n	80116da <scalbn+0x72>
 80116d4:	a11c      	add	r1, pc, #112	; (adr r1, 8011748 <scalbn+0xe0>)
 80116d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80116da:	a319      	add	r3, pc, #100	; (adr r3, 8011740 <scalbn+0xd8>)
 80116dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116e0:	f7ee ff9a 	bl	8000618 <__aeabi_dmul>
 80116e4:	e7e6      	b.n	80116b4 <scalbn+0x4c>
 80116e6:	1872      	adds	r2, r6, r1
 80116e8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80116ec:	428a      	cmp	r2, r1
 80116ee:	dcec      	bgt.n	80116ca <scalbn+0x62>
 80116f0:	2a00      	cmp	r2, #0
 80116f2:	dd08      	ble.n	8011706 <scalbn+0x9e>
 80116f4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80116f8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80116fc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011700:	ec45 4b10 	vmov	d0, r4, r5
 8011704:	bd70      	pop	{r4, r5, r6, pc}
 8011706:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801170a:	da08      	bge.n	801171e <scalbn+0xb6>
 801170c:	2d00      	cmp	r5, #0
 801170e:	a10a      	add	r1, pc, #40	; (adr r1, 8011738 <scalbn+0xd0>)
 8011710:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011714:	dac0      	bge.n	8011698 <scalbn+0x30>
 8011716:	a10e      	add	r1, pc, #56	; (adr r1, 8011750 <scalbn+0xe8>)
 8011718:	e9d1 0100 	ldrd	r0, r1, [r1]
 801171c:	e7bc      	b.n	8011698 <scalbn+0x30>
 801171e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011722:	3236      	adds	r2, #54	; 0x36
 8011724:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011728:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801172c:	4620      	mov	r0, r4
 801172e:	4b0c      	ldr	r3, [pc, #48]	; (8011760 <scalbn+0xf8>)
 8011730:	2200      	movs	r2, #0
 8011732:	e7d5      	b.n	80116e0 <scalbn+0x78>
 8011734:	f3af 8000 	nop.w
 8011738:	c2f8f359 	.word	0xc2f8f359
 801173c:	01a56e1f 	.word	0x01a56e1f
 8011740:	8800759c 	.word	0x8800759c
 8011744:	7e37e43c 	.word	0x7e37e43c
 8011748:	8800759c 	.word	0x8800759c
 801174c:	fe37e43c 	.word	0xfe37e43c
 8011750:	c2f8f359 	.word	0xc2f8f359
 8011754:	81a56e1f 	.word	0x81a56e1f
 8011758:	43500000 	.word	0x43500000
 801175c:	ffff3cb0 	.word	0xffff3cb0
 8011760:	3c900000 	.word	0x3c900000

08011764 <with_errno>:
 8011764:	b570      	push	{r4, r5, r6, lr}
 8011766:	4604      	mov	r4, r0
 8011768:	460d      	mov	r5, r1
 801176a:	4616      	mov	r6, r2
 801176c:	f001 fb6a 	bl	8012e44 <__errno>
 8011770:	4629      	mov	r1, r5
 8011772:	6006      	str	r6, [r0, #0]
 8011774:	4620      	mov	r0, r4
 8011776:	bd70      	pop	{r4, r5, r6, pc}

08011778 <xflow>:
 8011778:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801177a:	4614      	mov	r4, r2
 801177c:	461d      	mov	r5, r3
 801177e:	b108      	cbz	r0, 8011784 <xflow+0xc>
 8011780:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011784:	e9cd 2300 	strd	r2, r3, [sp]
 8011788:	e9dd 2300 	ldrd	r2, r3, [sp]
 801178c:	4620      	mov	r0, r4
 801178e:	4629      	mov	r1, r5
 8011790:	f7ee ff42 	bl	8000618 <__aeabi_dmul>
 8011794:	2222      	movs	r2, #34	; 0x22
 8011796:	b003      	add	sp, #12
 8011798:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801179c:	f7ff bfe2 	b.w	8011764 <with_errno>

080117a0 <__math_uflow>:
 80117a0:	b508      	push	{r3, lr}
 80117a2:	2200      	movs	r2, #0
 80117a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80117a8:	f7ff ffe6 	bl	8011778 <xflow>
 80117ac:	ec41 0b10 	vmov	d0, r0, r1
 80117b0:	bd08      	pop	{r3, pc}

080117b2 <__math_oflow>:
 80117b2:	b508      	push	{r3, lr}
 80117b4:	2200      	movs	r2, #0
 80117b6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80117ba:	f7ff ffdd 	bl	8011778 <xflow>
 80117be:	ec41 0b10 	vmov	d0, r0, r1
 80117c2:	bd08      	pop	{r3, pc}
 80117c4:	0000      	movs	r0, r0
	...

080117c8 <__kernel_rem_pio2>:
 80117c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117cc:	ed2d 8b02 	vpush	{d8}
 80117d0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80117d4:	f112 0f14 	cmn.w	r2, #20
 80117d8:	9306      	str	r3, [sp, #24]
 80117da:	9104      	str	r1, [sp, #16]
 80117dc:	4bc2      	ldr	r3, [pc, #776]	; (8011ae8 <__kernel_rem_pio2+0x320>)
 80117de:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80117e0:	9009      	str	r0, [sp, #36]	; 0x24
 80117e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80117e6:	9300      	str	r3, [sp, #0]
 80117e8:	9b06      	ldr	r3, [sp, #24]
 80117ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80117ee:	bfa8      	it	ge
 80117f0:	1ed4      	subge	r4, r2, #3
 80117f2:	9305      	str	r3, [sp, #20]
 80117f4:	bfb2      	itee	lt
 80117f6:	2400      	movlt	r4, #0
 80117f8:	2318      	movge	r3, #24
 80117fa:	fb94 f4f3 	sdivge	r4, r4, r3
 80117fe:	f06f 0317 	mvn.w	r3, #23
 8011802:	fb04 3303 	mla	r3, r4, r3, r3
 8011806:	eb03 0a02 	add.w	sl, r3, r2
 801180a:	9b00      	ldr	r3, [sp, #0]
 801180c:	9a05      	ldr	r2, [sp, #20]
 801180e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8011ad8 <__kernel_rem_pio2+0x310>
 8011812:	eb03 0802 	add.w	r8, r3, r2
 8011816:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8011818:	1aa7      	subs	r7, r4, r2
 801181a:	ae20      	add	r6, sp, #128	; 0x80
 801181c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011820:	2500      	movs	r5, #0
 8011822:	4545      	cmp	r5, r8
 8011824:	dd13      	ble.n	801184e <__kernel_rem_pio2+0x86>
 8011826:	9b06      	ldr	r3, [sp, #24]
 8011828:	aa20      	add	r2, sp, #128	; 0x80
 801182a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801182e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8011832:	f04f 0800 	mov.w	r8, #0
 8011836:	9b00      	ldr	r3, [sp, #0]
 8011838:	4598      	cmp	r8, r3
 801183a:	dc31      	bgt.n	80118a0 <__kernel_rem_pio2+0xd8>
 801183c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8011ad8 <__kernel_rem_pio2+0x310>
 8011840:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8011844:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011848:	462f      	mov	r7, r5
 801184a:	2600      	movs	r6, #0
 801184c:	e01b      	b.n	8011886 <__kernel_rem_pio2+0xbe>
 801184e:	42ef      	cmn	r7, r5
 8011850:	d407      	bmi.n	8011862 <__kernel_rem_pio2+0x9a>
 8011852:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011856:	f7ee fe75 	bl	8000544 <__aeabi_i2d>
 801185a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801185e:	3501      	adds	r5, #1
 8011860:	e7df      	b.n	8011822 <__kernel_rem_pio2+0x5a>
 8011862:	ec51 0b18 	vmov	r0, r1, d8
 8011866:	e7f8      	b.n	801185a <__kernel_rem_pio2+0x92>
 8011868:	e9d7 2300 	ldrd	r2, r3, [r7]
 801186c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011870:	f7ee fed2 	bl	8000618 <__aeabi_dmul>
 8011874:	4602      	mov	r2, r0
 8011876:	460b      	mov	r3, r1
 8011878:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801187c:	f7ee fd16 	bl	80002ac <__adddf3>
 8011880:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011884:	3601      	adds	r6, #1
 8011886:	9b05      	ldr	r3, [sp, #20]
 8011888:	429e      	cmp	r6, r3
 801188a:	f1a7 0708 	sub.w	r7, r7, #8
 801188e:	ddeb      	ble.n	8011868 <__kernel_rem_pio2+0xa0>
 8011890:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011894:	f108 0801 	add.w	r8, r8, #1
 8011898:	ecab 7b02 	vstmia	fp!, {d7}
 801189c:	3508      	adds	r5, #8
 801189e:	e7ca      	b.n	8011836 <__kernel_rem_pio2+0x6e>
 80118a0:	9b00      	ldr	r3, [sp, #0]
 80118a2:	aa0c      	add	r2, sp, #48	; 0x30
 80118a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80118a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80118aa:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80118ac:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80118b0:	9c00      	ldr	r4, [sp, #0]
 80118b2:	930a      	str	r3, [sp, #40]	; 0x28
 80118b4:	00e3      	lsls	r3, r4, #3
 80118b6:	9308      	str	r3, [sp, #32]
 80118b8:	ab98      	add	r3, sp, #608	; 0x260
 80118ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80118be:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80118c2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80118c6:	ab70      	add	r3, sp, #448	; 0x1c0
 80118c8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80118cc:	46c3      	mov	fp, r8
 80118ce:	46a1      	mov	r9, r4
 80118d0:	f1b9 0f00 	cmp.w	r9, #0
 80118d4:	f1a5 0508 	sub.w	r5, r5, #8
 80118d8:	dc77      	bgt.n	80119ca <__kernel_rem_pio2+0x202>
 80118da:	ec47 6b10 	vmov	d0, r6, r7
 80118de:	4650      	mov	r0, sl
 80118e0:	f7ff fec2 	bl	8011668 <scalbn>
 80118e4:	ec57 6b10 	vmov	r6, r7, d0
 80118e8:	2200      	movs	r2, #0
 80118ea:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80118ee:	ee10 0a10 	vmov	r0, s0
 80118f2:	4639      	mov	r1, r7
 80118f4:	f7ee fe90 	bl	8000618 <__aeabi_dmul>
 80118f8:	ec41 0b10 	vmov	d0, r0, r1
 80118fc:	f000 fab4 	bl	8011e68 <floor>
 8011900:	4b7a      	ldr	r3, [pc, #488]	; (8011aec <__kernel_rem_pio2+0x324>)
 8011902:	ec51 0b10 	vmov	r0, r1, d0
 8011906:	2200      	movs	r2, #0
 8011908:	f7ee fe86 	bl	8000618 <__aeabi_dmul>
 801190c:	4602      	mov	r2, r0
 801190e:	460b      	mov	r3, r1
 8011910:	4630      	mov	r0, r6
 8011912:	4639      	mov	r1, r7
 8011914:	f7ee fcc8 	bl	80002a8 <__aeabi_dsub>
 8011918:	460f      	mov	r7, r1
 801191a:	4606      	mov	r6, r0
 801191c:	f7ef f92c 	bl	8000b78 <__aeabi_d2iz>
 8011920:	9002      	str	r0, [sp, #8]
 8011922:	f7ee fe0f 	bl	8000544 <__aeabi_i2d>
 8011926:	4602      	mov	r2, r0
 8011928:	460b      	mov	r3, r1
 801192a:	4630      	mov	r0, r6
 801192c:	4639      	mov	r1, r7
 801192e:	f7ee fcbb 	bl	80002a8 <__aeabi_dsub>
 8011932:	f1ba 0f00 	cmp.w	sl, #0
 8011936:	4606      	mov	r6, r0
 8011938:	460f      	mov	r7, r1
 801193a:	dd6d      	ble.n	8011a18 <__kernel_rem_pio2+0x250>
 801193c:	1e61      	subs	r1, r4, #1
 801193e:	ab0c      	add	r3, sp, #48	; 0x30
 8011940:	9d02      	ldr	r5, [sp, #8]
 8011942:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011946:	f1ca 0018 	rsb	r0, sl, #24
 801194a:	fa43 f200 	asr.w	r2, r3, r0
 801194e:	4415      	add	r5, r2
 8011950:	4082      	lsls	r2, r0
 8011952:	1a9b      	subs	r3, r3, r2
 8011954:	aa0c      	add	r2, sp, #48	; 0x30
 8011956:	9502      	str	r5, [sp, #8]
 8011958:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801195c:	f1ca 0217 	rsb	r2, sl, #23
 8011960:	fa43 fb02 	asr.w	fp, r3, r2
 8011964:	f1bb 0f00 	cmp.w	fp, #0
 8011968:	dd65      	ble.n	8011a36 <__kernel_rem_pio2+0x26e>
 801196a:	9b02      	ldr	r3, [sp, #8]
 801196c:	2200      	movs	r2, #0
 801196e:	3301      	adds	r3, #1
 8011970:	9302      	str	r3, [sp, #8]
 8011972:	4615      	mov	r5, r2
 8011974:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8011978:	4294      	cmp	r4, r2
 801197a:	f300 809f 	bgt.w	8011abc <__kernel_rem_pio2+0x2f4>
 801197e:	f1ba 0f00 	cmp.w	sl, #0
 8011982:	dd07      	ble.n	8011994 <__kernel_rem_pio2+0x1cc>
 8011984:	f1ba 0f01 	cmp.w	sl, #1
 8011988:	f000 80c1 	beq.w	8011b0e <__kernel_rem_pio2+0x346>
 801198c:	f1ba 0f02 	cmp.w	sl, #2
 8011990:	f000 80c7 	beq.w	8011b22 <__kernel_rem_pio2+0x35a>
 8011994:	f1bb 0f02 	cmp.w	fp, #2
 8011998:	d14d      	bne.n	8011a36 <__kernel_rem_pio2+0x26e>
 801199a:	4632      	mov	r2, r6
 801199c:	463b      	mov	r3, r7
 801199e:	4954      	ldr	r1, [pc, #336]	; (8011af0 <__kernel_rem_pio2+0x328>)
 80119a0:	2000      	movs	r0, #0
 80119a2:	f7ee fc81 	bl	80002a8 <__aeabi_dsub>
 80119a6:	4606      	mov	r6, r0
 80119a8:	460f      	mov	r7, r1
 80119aa:	2d00      	cmp	r5, #0
 80119ac:	d043      	beq.n	8011a36 <__kernel_rem_pio2+0x26e>
 80119ae:	4650      	mov	r0, sl
 80119b0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8011ae0 <__kernel_rem_pio2+0x318>
 80119b4:	f7ff fe58 	bl	8011668 <scalbn>
 80119b8:	4630      	mov	r0, r6
 80119ba:	4639      	mov	r1, r7
 80119bc:	ec53 2b10 	vmov	r2, r3, d0
 80119c0:	f7ee fc72 	bl	80002a8 <__aeabi_dsub>
 80119c4:	4606      	mov	r6, r0
 80119c6:	460f      	mov	r7, r1
 80119c8:	e035      	b.n	8011a36 <__kernel_rem_pio2+0x26e>
 80119ca:	4b4a      	ldr	r3, [pc, #296]	; (8011af4 <__kernel_rem_pio2+0x32c>)
 80119cc:	2200      	movs	r2, #0
 80119ce:	4630      	mov	r0, r6
 80119d0:	4639      	mov	r1, r7
 80119d2:	f7ee fe21 	bl	8000618 <__aeabi_dmul>
 80119d6:	f7ef f8cf 	bl	8000b78 <__aeabi_d2iz>
 80119da:	f7ee fdb3 	bl	8000544 <__aeabi_i2d>
 80119de:	4602      	mov	r2, r0
 80119e0:	460b      	mov	r3, r1
 80119e2:	ec43 2b18 	vmov	d8, r2, r3
 80119e6:	4b44      	ldr	r3, [pc, #272]	; (8011af8 <__kernel_rem_pio2+0x330>)
 80119e8:	2200      	movs	r2, #0
 80119ea:	f7ee fe15 	bl	8000618 <__aeabi_dmul>
 80119ee:	4602      	mov	r2, r0
 80119f0:	460b      	mov	r3, r1
 80119f2:	4630      	mov	r0, r6
 80119f4:	4639      	mov	r1, r7
 80119f6:	f7ee fc57 	bl	80002a8 <__aeabi_dsub>
 80119fa:	f7ef f8bd 	bl	8000b78 <__aeabi_d2iz>
 80119fe:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011a02:	f84b 0b04 	str.w	r0, [fp], #4
 8011a06:	ec51 0b18 	vmov	r0, r1, d8
 8011a0a:	f7ee fc4f 	bl	80002ac <__adddf3>
 8011a0e:	f109 39ff 	add.w	r9, r9, #4294967295
 8011a12:	4606      	mov	r6, r0
 8011a14:	460f      	mov	r7, r1
 8011a16:	e75b      	b.n	80118d0 <__kernel_rem_pio2+0x108>
 8011a18:	d106      	bne.n	8011a28 <__kernel_rem_pio2+0x260>
 8011a1a:	1e63      	subs	r3, r4, #1
 8011a1c:	aa0c      	add	r2, sp, #48	; 0x30
 8011a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011a22:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8011a26:	e79d      	b.n	8011964 <__kernel_rem_pio2+0x19c>
 8011a28:	4b34      	ldr	r3, [pc, #208]	; (8011afc <__kernel_rem_pio2+0x334>)
 8011a2a:	2200      	movs	r2, #0
 8011a2c:	f7ef f87a 	bl	8000b24 <__aeabi_dcmpge>
 8011a30:	2800      	cmp	r0, #0
 8011a32:	d140      	bne.n	8011ab6 <__kernel_rem_pio2+0x2ee>
 8011a34:	4683      	mov	fp, r0
 8011a36:	2200      	movs	r2, #0
 8011a38:	2300      	movs	r3, #0
 8011a3a:	4630      	mov	r0, r6
 8011a3c:	4639      	mov	r1, r7
 8011a3e:	f7ef f853 	bl	8000ae8 <__aeabi_dcmpeq>
 8011a42:	2800      	cmp	r0, #0
 8011a44:	f000 80c1 	beq.w	8011bca <__kernel_rem_pio2+0x402>
 8011a48:	1e65      	subs	r5, r4, #1
 8011a4a:	462b      	mov	r3, r5
 8011a4c:	2200      	movs	r2, #0
 8011a4e:	9900      	ldr	r1, [sp, #0]
 8011a50:	428b      	cmp	r3, r1
 8011a52:	da6d      	bge.n	8011b30 <__kernel_rem_pio2+0x368>
 8011a54:	2a00      	cmp	r2, #0
 8011a56:	f000 808a 	beq.w	8011b6e <__kernel_rem_pio2+0x3a6>
 8011a5a:	ab0c      	add	r3, sp, #48	; 0x30
 8011a5c:	f1aa 0a18 	sub.w	sl, sl, #24
 8011a60:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	f000 80ae 	beq.w	8011bc6 <__kernel_rem_pio2+0x3fe>
 8011a6a:	4650      	mov	r0, sl
 8011a6c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8011ae0 <__kernel_rem_pio2+0x318>
 8011a70:	f7ff fdfa 	bl	8011668 <scalbn>
 8011a74:	1c6b      	adds	r3, r5, #1
 8011a76:	00da      	lsls	r2, r3, #3
 8011a78:	9205      	str	r2, [sp, #20]
 8011a7a:	ec57 6b10 	vmov	r6, r7, d0
 8011a7e:	aa70      	add	r2, sp, #448	; 0x1c0
 8011a80:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8011af4 <__kernel_rem_pio2+0x32c>
 8011a84:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8011a88:	462c      	mov	r4, r5
 8011a8a:	f04f 0800 	mov.w	r8, #0
 8011a8e:	2c00      	cmp	r4, #0
 8011a90:	f280 80d4 	bge.w	8011c3c <__kernel_rem_pio2+0x474>
 8011a94:	462c      	mov	r4, r5
 8011a96:	2c00      	cmp	r4, #0
 8011a98:	f2c0 8102 	blt.w	8011ca0 <__kernel_rem_pio2+0x4d8>
 8011a9c:	4b18      	ldr	r3, [pc, #96]	; (8011b00 <__kernel_rem_pio2+0x338>)
 8011a9e:	461e      	mov	r6, r3
 8011aa0:	ab70      	add	r3, sp, #448	; 0x1c0
 8011aa2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8011aa6:	1b2b      	subs	r3, r5, r4
 8011aa8:	f04f 0900 	mov.w	r9, #0
 8011aac:	f04f 0a00 	mov.w	sl, #0
 8011ab0:	2700      	movs	r7, #0
 8011ab2:	9306      	str	r3, [sp, #24]
 8011ab4:	e0e6      	b.n	8011c84 <__kernel_rem_pio2+0x4bc>
 8011ab6:	f04f 0b02 	mov.w	fp, #2
 8011aba:	e756      	b.n	801196a <__kernel_rem_pio2+0x1a2>
 8011abc:	f8d8 3000 	ldr.w	r3, [r8]
 8011ac0:	bb05      	cbnz	r5, 8011b04 <__kernel_rem_pio2+0x33c>
 8011ac2:	b123      	cbz	r3, 8011ace <__kernel_rem_pio2+0x306>
 8011ac4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8011ac8:	f8c8 3000 	str.w	r3, [r8]
 8011acc:	2301      	movs	r3, #1
 8011ace:	3201      	adds	r2, #1
 8011ad0:	f108 0804 	add.w	r8, r8, #4
 8011ad4:	461d      	mov	r5, r3
 8011ad6:	e74f      	b.n	8011978 <__kernel_rem_pio2+0x1b0>
	...
 8011ae4:	3ff00000 	.word	0x3ff00000
 8011ae8:	08015850 	.word	0x08015850
 8011aec:	40200000 	.word	0x40200000
 8011af0:	3ff00000 	.word	0x3ff00000
 8011af4:	3e700000 	.word	0x3e700000
 8011af8:	41700000 	.word	0x41700000
 8011afc:	3fe00000 	.word	0x3fe00000
 8011b00:	08015810 	.word	0x08015810
 8011b04:	1acb      	subs	r3, r1, r3
 8011b06:	f8c8 3000 	str.w	r3, [r8]
 8011b0a:	462b      	mov	r3, r5
 8011b0c:	e7df      	b.n	8011ace <__kernel_rem_pio2+0x306>
 8011b0e:	1e62      	subs	r2, r4, #1
 8011b10:	ab0c      	add	r3, sp, #48	; 0x30
 8011b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b16:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011b1a:	a90c      	add	r1, sp, #48	; 0x30
 8011b1c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011b20:	e738      	b.n	8011994 <__kernel_rem_pio2+0x1cc>
 8011b22:	1e62      	subs	r2, r4, #1
 8011b24:	ab0c      	add	r3, sp, #48	; 0x30
 8011b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b2a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011b2e:	e7f4      	b.n	8011b1a <__kernel_rem_pio2+0x352>
 8011b30:	a90c      	add	r1, sp, #48	; 0x30
 8011b32:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011b36:	3b01      	subs	r3, #1
 8011b38:	430a      	orrs	r2, r1
 8011b3a:	e788      	b.n	8011a4e <__kernel_rem_pio2+0x286>
 8011b3c:	3301      	adds	r3, #1
 8011b3e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8011b42:	2900      	cmp	r1, #0
 8011b44:	d0fa      	beq.n	8011b3c <__kernel_rem_pio2+0x374>
 8011b46:	9a08      	ldr	r2, [sp, #32]
 8011b48:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8011b4c:	446a      	add	r2, sp
 8011b4e:	3a98      	subs	r2, #152	; 0x98
 8011b50:	9208      	str	r2, [sp, #32]
 8011b52:	9a06      	ldr	r2, [sp, #24]
 8011b54:	a920      	add	r1, sp, #128	; 0x80
 8011b56:	18a2      	adds	r2, r4, r2
 8011b58:	18e3      	adds	r3, r4, r3
 8011b5a:	f104 0801 	add.w	r8, r4, #1
 8011b5e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8011b62:	9302      	str	r3, [sp, #8]
 8011b64:	9b02      	ldr	r3, [sp, #8]
 8011b66:	4543      	cmp	r3, r8
 8011b68:	da04      	bge.n	8011b74 <__kernel_rem_pio2+0x3ac>
 8011b6a:	461c      	mov	r4, r3
 8011b6c:	e6a2      	b.n	80118b4 <__kernel_rem_pio2+0xec>
 8011b6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011b70:	2301      	movs	r3, #1
 8011b72:	e7e4      	b.n	8011b3e <__kernel_rem_pio2+0x376>
 8011b74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b76:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8011b7a:	f7ee fce3 	bl	8000544 <__aeabi_i2d>
 8011b7e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8011b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b84:	46ab      	mov	fp, r5
 8011b86:	461c      	mov	r4, r3
 8011b88:	f04f 0900 	mov.w	r9, #0
 8011b8c:	2600      	movs	r6, #0
 8011b8e:	2700      	movs	r7, #0
 8011b90:	9b05      	ldr	r3, [sp, #20]
 8011b92:	4599      	cmp	r9, r3
 8011b94:	dd06      	ble.n	8011ba4 <__kernel_rem_pio2+0x3dc>
 8011b96:	9b08      	ldr	r3, [sp, #32]
 8011b98:	e8e3 6702 	strd	r6, r7, [r3], #8
 8011b9c:	f108 0801 	add.w	r8, r8, #1
 8011ba0:	9308      	str	r3, [sp, #32]
 8011ba2:	e7df      	b.n	8011b64 <__kernel_rem_pio2+0x39c>
 8011ba4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8011ba8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8011bac:	f7ee fd34 	bl	8000618 <__aeabi_dmul>
 8011bb0:	4602      	mov	r2, r0
 8011bb2:	460b      	mov	r3, r1
 8011bb4:	4630      	mov	r0, r6
 8011bb6:	4639      	mov	r1, r7
 8011bb8:	f7ee fb78 	bl	80002ac <__adddf3>
 8011bbc:	f109 0901 	add.w	r9, r9, #1
 8011bc0:	4606      	mov	r6, r0
 8011bc2:	460f      	mov	r7, r1
 8011bc4:	e7e4      	b.n	8011b90 <__kernel_rem_pio2+0x3c8>
 8011bc6:	3d01      	subs	r5, #1
 8011bc8:	e747      	b.n	8011a5a <__kernel_rem_pio2+0x292>
 8011bca:	ec47 6b10 	vmov	d0, r6, r7
 8011bce:	f1ca 0000 	rsb	r0, sl, #0
 8011bd2:	f7ff fd49 	bl	8011668 <scalbn>
 8011bd6:	ec57 6b10 	vmov	r6, r7, d0
 8011bda:	4ba0      	ldr	r3, [pc, #640]	; (8011e5c <__kernel_rem_pio2+0x694>)
 8011bdc:	ee10 0a10 	vmov	r0, s0
 8011be0:	2200      	movs	r2, #0
 8011be2:	4639      	mov	r1, r7
 8011be4:	f7ee ff9e 	bl	8000b24 <__aeabi_dcmpge>
 8011be8:	b1f8      	cbz	r0, 8011c2a <__kernel_rem_pio2+0x462>
 8011bea:	4b9d      	ldr	r3, [pc, #628]	; (8011e60 <__kernel_rem_pio2+0x698>)
 8011bec:	2200      	movs	r2, #0
 8011bee:	4630      	mov	r0, r6
 8011bf0:	4639      	mov	r1, r7
 8011bf2:	f7ee fd11 	bl	8000618 <__aeabi_dmul>
 8011bf6:	f7ee ffbf 	bl	8000b78 <__aeabi_d2iz>
 8011bfa:	4680      	mov	r8, r0
 8011bfc:	f7ee fca2 	bl	8000544 <__aeabi_i2d>
 8011c00:	4b96      	ldr	r3, [pc, #600]	; (8011e5c <__kernel_rem_pio2+0x694>)
 8011c02:	2200      	movs	r2, #0
 8011c04:	f7ee fd08 	bl	8000618 <__aeabi_dmul>
 8011c08:	460b      	mov	r3, r1
 8011c0a:	4602      	mov	r2, r0
 8011c0c:	4639      	mov	r1, r7
 8011c0e:	4630      	mov	r0, r6
 8011c10:	f7ee fb4a 	bl	80002a8 <__aeabi_dsub>
 8011c14:	f7ee ffb0 	bl	8000b78 <__aeabi_d2iz>
 8011c18:	1c65      	adds	r5, r4, #1
 8011c1a:	ab0c      	add	r3, sp, #48	; 0x30
 8011c1c:	f10a 0a18 	add.w	sl, sl, #24
 8011c20:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011c24:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8011c28:	e71f      	b.n	8011a6a <__kernel_rem_pio2+0x2a2>
 8011c2a:	4630      	mov	r0, r6
 8011c2c:	4639      	mov	r1, r7
 8011c2e:	f7ee ffa3 	bl	8000b78 <__aeabi_d2iz>
 8011c32:	ab0c      	add	r3, sp, #48	; 0x30
 8011c34:	4625      	mov	r5, r4
 8011c36:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011c3a:	e716      	b.n	8011a6a <__kernel_rem_pio2+0x2a2>
 8011c3c:	ab0c      	add	r3, sp, #48	; 0x30
 8011c3e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011c42:	f7ee fc7f 	bl	8000544 <__aeabi_i2d>
 8011c46:	4632      	mov	r2, r6
 8011c48:	463b      	mov	r3, r7
 8011c4a:	f7ee fce5 	bl	8000618 <__aeabi_dmul>
 8011c4e:	4642      	mov	r2, r8
 8011c50:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8011c54:	464b      	mov	r3, r9
 8011c56:	4630      	mov	r0, r6
 8011c58:	4639      	mov	r1, r7
 8011c5a:	f7ee fcdd 	bl	8000618 <__aeabi_dmul>
 8011c5e:	3c01      	subs	r4, #1
 8011c60:	4606      	mov	r6, r0
 8011c62:	460f      	mov	r7, r1
 8011c64:	e713      	b.n	8011a8e <__kernel_rem_pio2+0x2c6>
 8011c66:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8011c6a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8011c6e:	f7ee fcd3 	bl	8000618 <__aeabi_dmul>
 8011c72:	4602      	mov	r2, r0
 8011c74:	460b      	mov	r3, r1
 8011c76:	4648      	mov	r0, r9
 8011c78:	4651      	mov	r1, sl
 8011c7a:	f7ee fb17 	bl	80002ac <__adddf3>
 8011c7e:	3701      	adds	r7, #1
 8011c80:	4681      	mov	r9, r0
 8011c82:	468a      	mov	sl, r1
 8011c84:	9b00      	ldr	r3, [sp, #0]
 8011c86:	429f      	cmp	r7, r3
 8011c88:	dc02      	bgt.n	8011c90 <__kernel_rem_pio2+0x4c8>
 8011c8a:	9b06      	ldr	r3, [sp, #24]
 8011c8c:	429f      	cmp	r7, r3
 8011c8e:	ddea      	ble.n	8011c66 <__kernel_rem_pio2+0x49e>
 8011c90:	9a06      	ldr	r2, [sp, #24]
 8011c92:	ab48      	add	r3, sp, #288	; 0x120
 8011c94:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8011c98:	e9c6 9a00 	strd	r9, sl, [r6]
 8011c9c:	3c01      	subs	r4, #1
 8011c9e:	e6fa      	b.n	8011a96 <__kernel_rem_pio2+0x2ce>
 8011ca0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8011ca2:	2b02      	cmp	r3, #2
 8011ca4:	dc0b      	bgt.n	8011cbe <__kernel_rem_pio2+0x4f6>
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	dc39      	bgt.n	8011d1e <__kernel_rem_pio2+0x556>
 8011caa:	d05d      	beq.n	8011d68 <__kernel_rem_pio2+0x5a0>
 8011cac:	9b02      	ldr	r3, [sp, #8]
 8011cae:	f003 0007 	and.w	r0, r3, #7
 8011cb2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8011cb6:	ecbd 8b02 	vpop	{d8}
 8011cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cbe:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8011cc0:	2b03      	cmp	r3, #3
 8011cc2:	d1f3      	bne.n	8011cac <__kernel_rem_pio2+0x4e4>
 8011cc4:	9b05      	ldr	r3, [sp, #20]
 8011cc6:	9500      	str	r5, [sp, #0]
 8011cc8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8011ccc:	eb0d 0403 	add.w	r4, sp, r3
 8011cd0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8011cd4:	46a2      	mov	sl, r4
 8011cd6:	9b00      	ldr	r3, [sp, #0]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	f1aa 0a08 	sub.w	sl, sl, #8
 8011cde:	dc69      	bgt.n	8011db4 <__kernel_rem_pio2+0x5ec>
 8011ce0:	46aa      	mov	sl, r5
 8011ce2:	f1ba 0f01 	cmp.w	sl, #1
 8011ce6:	f1a4 0408 	sub.w	r4, r4, #8
 8011cea:	f300 8083 	bgt.w	8011df4 <__kernel_rem_pio2+0x62c>
 8011cee:	9c05      	ldr	r4, [sp, #20]
 8011cf0:	ab48      	add	r3, sp, #288	; 0x120
 8011cf2:	441c      	add	r4, r3
 8011cf4:	2000      	movs	r0, #0
 8011cf6:	2100      	movs	r1, #0
 8011cf8:	2d01      	cmp	r5, #1
 8011cfa:	f300 809a 	bgt.w	8011e32 <__kernel_rem_pio2+0x66a>
 8011cfe:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8011d02:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8011d06:	f1bb 0f00 	cmp.w	fp, #0
 8011d0a:	f040 8098 	bne.w	8011e3e <__kernel_rem_pio2+0x676>
 8011d0e:	9b04      	ldr	r3, [sp, #16]
 8011d10:	e9c3 7800 	strd	r7, r8, [r3]
 8011d14:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8011d18:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8011d1c:	e7c6      	b.n	8011cac <__kernel_rem_pio2+0x4e4>
 8011d1e:	9e05      	ldr	r6, [sp, #20]
 8011d20:	ab48      	add	r3, sp, #288	; 0x120
 8011d22:	441e      	add	r6, r3
 8011d24:	462c      	mov	r4, r5
 8011d26:	2000      	movs	r0, #0
 8011d28:	2100      	movs	r1, #0
 8011d2a:	2c00      	cmp	r4, #0
 8011d2c:	da33      	bge.n	8011d96 <__kernel_rem_pio2+0x5ce>
 8011d2e:	f1bb 0f00 	cmp.w	fp, #0
 8011d32:	d036      	beq.n	8011da2 <__kernel_rem_pio2+0x5da>
 8011d34:	4602      	mov	r2, r0
 8011d36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011d3a:	9c04      	ldr	r4, [sp, #16]
 8011d3c:	e9c4 2300 	strd	r2, r3, [r4]
 8011d40:	4602      	mov	r2, r0
 8011d42:	460b      	mov	r3, r1
 8011d44:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8011d48:	f7ee faae 	bl	80002a8 <__aeabi_dsub>
 8011d4c:	ae4a      	add	r6, sp, #296	; 0x128
 8011d4e:	2401      	movs	r4, #1
 8011d50:	42a5      	cmp	r5, r4
 8011d52:	da29      	bge.n	8011da8 <__kernel_rem_pio2+0x5e0>
 8011d54:	f1bb 0f00 	cmp.w	fp, #0
 8011d58:	d002      	beq.n	8011d60 <__kernel_rem_pio2+0x598>
 8011d5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011d5e:	4619      	mov	r1, r3
 8011d60:	9b04      	ldr	r3, [sp, #16]
 8011d62:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011d66:	e7a1      	b.n	8011cac <__kernel_rem_pio2+0x4e4>
 8011d68:	9c05      	ldr	r4, [sp, #20]
 8011d6a:	ab48      	add	r3, sp, #288	; 0x120
 8011d6c:	441c      	add	r4, r3
 8011d6e:	2000      	movs	r0, #0
 8011d70:	2100      	movs	r1, #0
 8011d72:	2d00      	cmp	r5, #0
 8011d74:	da09      	bge.n	8011d8a <__kernel_rem_pio2+0x5c2>
 8011d76:	f1bb 0f00 	cmp.w	fp, #0
 8011d7a:	d002      	beq.n	8011d82 <__kernel_rem_pio2+0x5ba>
 8011d7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011d80:	4619      	mov	r1, r3
 8011d82:	9b04      	ldr	r3, [sp, #16]
 8011d84:	e9c3 0100 	strd	r0, r1, [r3]
 8011d88:	e790      	b.n	8011cac <__kernel_rem_pio2+0x4e4>
 8011d8a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011d8e:	f7ee fa8d 	bl	80002ac <__adddf3>
 8011d92:	3d01      	subs	r5, #1
 8011d94:	e7ed      	b.n	8011d72 <__kernel_rem_pio2+0x5aa>
 8011d96:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8011d9a:	f7ee fa87 	bl	80002ac <__adddf3>
 8011d9e:	3c01      	subs	r4, #1
 8011da0:	e7c3      	b.n	8011d2a <__kernel_rem_pio2+0x562>
 8011da2:	4602      	mov	r2, r0
 8011da4:	460b      	mov	r3, r1
 8011da6:	e7c8      	b.n	8011d3a <__kernel_rem_pio2+0x572>
 8011da8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8011dac:	f7ee fa7e 	bl	80002ac <__adddf3>
 8011db0:	3401      	adds	r4, #1
 8011db2:	e7cd      	b.n	8011d50 <__kernel_rem_pio2+0x588>
 8011db4:	e9da 8900 	ldrd	r8, r9, [sl]
 8011db8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8011dbc:	9b00      	ldr	r3, [sp, #0]
 8011dbe:	3b01      	subs	r3, #1
 8011dc0:	9300      	str	r3, [sp, #0]
 8011dc2:	4632      	mov	r2, r6
 8011dc4:	463b      	mov	r3, r7
 8011dc6:	4640      	mov	r0, r8
 8011dc8:	4649      	mov	r1, r9
 8011dca:	f7ee fa6f 	bl	80002ac <__adddf3>
 8011dce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011dd2:	4602      	mov	r2, r0
 8011dd4:	460b      	mov	r3, r1
 8011dd6:	4640      	mov	r0, r8
 8011dd8:	4649      	mov	r1, r9
 8011dda:	f7ee fa65 	bl	80002a8 <__aeabi_dsub>
 8011dde:	4632      	mov	r2, r6
 8011de0:	463b      	mov	r3, r7
 8011de2:	f7ee fa63 	bl	80002ac <__adddf3>
 8011de6:	ed9d 7b06 	vldr	d7, [sp, #24]
 8011dea:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011dee:	ed8a 7b00 	vstr	d7, [sl]
 8011df2:	e770      	b.n	8011cd6 <__kernel_rem_pio2+0x50e>
 8011df4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011df8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8011dfc:	4640      	mov	r0, r8
 8011dfe:	4632      	mov	r2, r6
 8011e00:	463b      	mov	r3, r7
 8011e02:	4649      	mov	r1, r9
 8011e04:	f7ee fa52 	bl	80002ac <__adddf3>
 8011e08:	e9cd 0100 	strd	r0, r1, [sp]
 8011e0c:	4602      	mov	r2, r0
 8011e0e:	460b      	mov	r3, r1
 8011e10:	4640      	mov	r0, r8
 8011e12:	4649      	mov	r1, r9
 8011e14:	f7ee fa48 	bl	80002a8 <__aeabi_dsub>
 8011e18:	4632      	mov	r2, r6
 8011e1a:	463b      	mov	r3, r7
 8011e1c:	f7ee fa46 	bl	80002ac <__adddf3>
 8011e20:	ed9d 7b00 	vldr	d7, [sp]
 8011e24:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011e28:	ed84 7b00 	vstr	d7, [r4]
 8011e2c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011e30:	e757      	b.n	8011ce2 <__kernel_rem_pio2+0x51a>
 8011e32:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011e36:	f7ee fa39 	bl	80002ac <__adddf3>
 8011e3a:	3d01      	subs	r5, #1
 8011e3c:	e75c      	b.n	8011cf8 <__kernel_rem_pio2+0x530>
 8011e3e:	9b04      	ldr	r3, [sp, #16]
 8011e40:	9a04      	ldr	r2, [sp, #16]
 8011e42:	601f      	str	r7, [r3, #0]
 8011e44:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8011e48:	605c      	str	r4, [r3, #4]
 8011e4a:	609d      	str	r5, [r3, #8]
 8011e4c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8011e50:	60d3      	str	r3, [r2, #12]
 8011e52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011e56:	6110      	str	r0, [r2, #16]
 8011e58:	6153      	str	r3, [r2, #20]
 8011e5a:	e727      	b.n	8011cac <__kernel_rem_pio2+0x4e4>
 8011e5c:	41700000 	.word	0x41700000
 8011e60:	3e700000 	.word	0x3e700000
 8011e64:	00000000 	.word	0x00000000

08011e68 <floor>:
 8011e68:	ec51 0b10 	vmov	r0, r1, d0
 8011e6c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e74:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8011e78:	2e13      	cmp	r6, #19
 8011e7a:	ee10 5a10 	vmov	r5, s0
 8011e7e:	ee10 8a10 	vmov	r8, s0
 8011e82:	460c      	mov	r4, r1
 8011e84:	dc31      	bgt.n	8011eea <floor+0x82>
 8011e86:	2e00      	cmp	r6, #0
 8011e88:	da14      	bge.n	8011eb4 <floor+0x4c>
 8011e8a:	a333      	add	r3, pc, #204	; (adr r3, 8011f58 <floor+0xf0>)
 8011e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e90:	f7ee fa0c 	bl	80002ac <__adddf3>
 8011e94:	2200      	movs	r2, #0
 8011e96:	2300      	movs	r3, #0
 8011e98:	f7ee fe4e 	bl	8000b38 <__aeabi_dcmpgt>
 8011e9c:	b138      	cbz	r0, 8011eae <floor+0x46>
 8011e9e:	2c00      	cmp	r4, #0
 8011ea0:	da53      	bge.n	8011f4a <floor+0xe2>
 8011ea2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8011ea6:	4325      	orrs	r5, r4
 8011ea8:	d052      	beq.n	8011f50 <floor+0xe8>
 8011eaa:	4c2d      	ldr	r4, [pc, #180]	; (8011f60 <floor+0xf8>)
 8011eac:	2500      	movs	r5, #0
 8011eae:	4621      	mov	r1, r4
 8011eb0:	4628      	mov	r0, r5
 8011eb2:	e024      	b.n	8011efe <floor+0x96>
 8011eb4:	4f2b      	ldr	r7, [pc, #172]	; (8011f64 <floor+0xfc>)
 8011eb6:	4137      	asrs	r7, r6
 8011eb8:	ea01 0307 	and.w	r3, r1, r7
 8011ebc:	4303      	orrs	r3, r0
 8011ebe:	d01e      	beq.n	8011efe <floor+0x96>
 8011ec0:	a325      	add	r3, pc, #148	; (adr r3, 8011f58 <floor+0xf0>)
 8011ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ec6:	f7ee f9f1 	bl	80002ac <__adddf3>
 8011eca:	2200      	movs	r2, #0
 8011ecc:	2300      	movs	r3, #0
 8011ece:	f7ee fe33 	bl	8000b38 <__aeabi_dcmpgt>
 8011ed2:	2800      	cmp	r0, #0
 8011ed4:	d0eb      	beq.n	8011eae <floor+0x46>
 8011ed6:	2c00      	cmp	r4, #0
 8011ed8:	bfbe      	ittt	lt
 8011eda:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8011ede:	4133      	asrlt	r3, r6
 8011ee0:	18e4      	addlt	r4, r4, r3
 8011ee2:	ea24 0407 	bic.w	r4, r4, r7
 8011ee6:	2500      	movs	r5, #0
 8011ee8:	e7e1      	b.n	8011eae <floor+0x46>
 8011eea:	2e33      	cmp	r6, #51	; 0x33
 8011eec:	dd0b      	ble.n	8011f06 <floor+0x9e>
 8011eee:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8011ef2:	d104      	bne.n	8011efe <floor+0x96>
 8011ef4:	ee10 2a10 	vmov	r2, s0
 8011ef8:	460b      	mov	r3, r1
 8011efa:	f7ee f9d7 	bl	80002ac <__adddf3>
 8011efe:	ec41 0b10 	vmov	d0, r0, r1
 8011f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f06:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8011f0a:	f04f 37ff 	mov.w	r7, #4294967295
 8011f0e:	40df      	lsrs	r7, r3
 8011f10:	4238      	tst	r0, r7
 8011f12:	d0f4      	beq.n	8011efe <floor+0x96>
 8011f14:	a310      	add	r3, pc, #64	; (adr r3, 8011f58 <floor+0xf0>)
 8011f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f1a:	f7ee f9c7 	bl	80002ac <__adddf3>
 8011f1e:	2200      	movs	r2, #0
 8011f20:	2300      	movs	r3, #0
 8011f22:	f7ee fe09 	bl	8000b38 <__aeabi_dcmpgt>
 8011f26:	2800      	cmp	r0, #0
 8011f28:	d0c1      	beq.n	8011eae <floor+0x46>
 8011f2a:	2c00      	cmp	r4, #0
 8011f2c:	da0a      	bge.n	8011f44 <floor+0xdc>
 8011f2e:	2e14      	cmp	r6, #20
 8011f30:	d101      	bne.n	8011f36 <floor+0xce>
 8011f32:	3401      	adds	r4, #1
 8011f34:	e006      	b.n	8011f44 <floor+0xdc>
 8011f36:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8011f3a:	2301      	movs	r3, #1
 8011f3c:	40b3      	lsls	r3, r6
 8011f3e:	441d      	add	r5, r3
 8011f40:	45a8      	cmp	r8, r5
 8011f42:	d8f6      	bhi.n	8011f32 <floor+0xca>
 8011f44:	ea25 0507 	bic.w	r5, r5, r7
 8011f48:	e7b1      	b.n	8011eae <floor+0x46>
 8011f4a:	2500      	movs	r5, #0
 8011f4c:	462c      	mov	r4, r5
 8011f4e:	e7ae      	b.n	8011eae <floor+0x46>
 8011f50:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8011f54:	e7ab      	b.n	8011eae <floor+0x46>
 8011f56:	bf00      	nop
 8011f58:	8800759c 	.word	0x8800759c
 8011f5c:	7e37e43c 	.word	0x7e37e43c
 8011f60:	bff00000 	.word	0xbff00000
 8011f64:	000fffff 	.word	0x000fffff

08011f68 <realloc>:
 8011f68:	4b02      	ldr	r3, [pc, #8]	; (8011f74 <realloc+0xc>)
 8011f6a:	460a      	mov	r2, r1
 8011f6c:	4601      	mov	r1, r0
 8011f6e:	6818      	ldr	r0, [r3, #0]
 8011f70:	f000 b802 	b.w	8011f78 <_realloc_r>
 8011f74:	20000088 	.word	0x20000088

08011f78 <_realloc_r>:
 8011f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f7c:	4680      	mov	r8, r0
 8011f7e:	4614      	mov	r4, r2
 8011f80:	460e      	mov	r6, r1
 8011f82:	b921      	cbnz	r1, 8011f8e <_realloc_r+0x16>
 8011f84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011f88:	4611      	mov	r1, r2
 8011f8a:	f001 be87 	b.w	8013c9c <_malloc_r>
 8011f8e:	b92a      	cbnz	r2, 8011f9c <_realloc_r+0x24>
 8011f90:	f001 fe10 	bl	8013bb4 <_free_r>
 8011f94:	4625      	mov	r5, r4
 8011f96:	4628      	mov	r0, r5
 8011f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f9c:	f002 fa86 	bl	80144ac <_malloc_usable_size_r>
 8011fa0:	4284      	cmp	r4, r0
 8011fa2:	4607      	mov	r7, r0
 8011fa4:	d802      	bhi.n	8011fac <_realloc_r+0x34>
 8011fa6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011faa:	d812      	bhi.n	8011fd2 <_realloc_r+0x5a>
 8011fac:	4621      	mov	r1, r4
 8011fae:	4640      	mov	r0, r8
 8011fb0:	f001 fe74 	bl	8013c9c <_malloc_r>
 8011fb4:	4605      	mov	r5, r0
 8011fb6:	2800      	cmp	r0, #0
 8011fb8:	d0ed      	beq.n	8011f96 <_realloc_r+0x1e>
 8011fba:	42bc      	cmp	r4, r7
 8011fbc:	4622      	mov	r2, r4
 8011fbe:	4631      	mov	r1, r6
 8011fc0:	bf28      	it	cs
 8011fc2:	463a      	movcs	r2, r7
 8011fc4:	f000 ff6b 	bl	8012e9e <memcpy>
 8011fc8:	4631      	mov	r1, r6
 8011fca:	4640      	mov	r0, r8
 8011fcc:	f001 fdf2 	bl	8013bb4 <_free_r>
 8011fd0:	e7e1      	b.n	8011f96 <_realloc_r+0x1e>
 8011fd2:	4635      	mov	r5, r6
 8011fd4:	e7df      	b.n	8011f96 <_realloc_r+0x1e>

08011fd6 <__cvt>:
 8011fd6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011fda:	ec55 4b10 	vmov	r4, r5, d0
 8011fde:	2d00      	cmp	r5, #0
 8011fe0:	460e      	mov	r6, r1
 8011fe2:	4619      	mov	r1, r3
 8011fe4:	462b      	mov	r3, r5
 8011fe6:	bfbb      	ittet	lt
 8011fe8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011fec:	461d      	movlt	r5, r3
 8011fee:	2300      	movge	r3, #0
 8011ff0:	232d      	movlt	r3, #45	; 0x2d
 8011ff2:	700b      	strb	r3, [r1, #0]
 8011ff4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011ff6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011ffa:	4691      	mov	r9, r2
 8011ffc:	f023 0820 	bic.w	r8, r3, #32
 8012000:	bfbc      	itt	lt
 8012002:	4622      	movlt	r2, r4
 8012004:	4614      	movlt	r4, r2
 8012006:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801200a:	d005      	beq.n	8012018 <__cvt+0x42>
 801200c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8012010:	d100      	bne.n	8012014 <__cvt+0x3e>
 8012012:	3601      	adds	r6, #1
 8012014:	2102      	movs	r1, #2
 8012016:	e000      	b.n	801201a <__cvt+0x44>
 8012018:	2103      	movs	r1, #3
 801201a:	ab03      	add	r3, sp, #12
 801201c:	9301      	str	r3, [sp, #4]
 801201e:	ab02      	add	r3, sp, #8
 8012020:	9300      	str	r3, [sp, #0]
 8012022:	ec45 4b10 	vmov	d0, r4, r5
 8012026:	4653      	mov	r3, sl
 8012028:	4632      	mov	r2, r6
 801202a:	f000 ffd1 	bl	8012fd0 <_dtoa_r>
 801202e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8012032:	4607      	mov	r7, r0
 8012034:	d102      	bne.n	801203c <__cvt+0x66>
 8012036:	f019 0f01 	tst.w	r9, #1
 801203a:	d022      	beq.n	8012082 <__cvt+0xac>
 801203c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012040:	eb07 0906 	add.w	r9, r7, r6
 8012044:	d110      	bne.n	8012068 <__cvt+0x92>
 8012046:	783b      	ldrb	r3, [r7, #0]
 8012048:	2b30      	cmp	r3, #48	; 0x30
 801204a:	d10a      	bne.n	8012062 <__cvt+0x8c>
 801204c:	2200      	movs	r2, #0
 801204e:	2300      	movs	r3, #0
 8012050:	4620      	mov	r0, r4
 8012052:	4629      	mov	r1, r5
 8012054:	f7ee fd48 	bl	8000ae8 <__aeabi_dcmpeq>
 8012058:	b918      	cbnz	r0, 8012062 <__cvt+0x8c>
 801205a:	f1c6 0601 	rsb	r6, r6, #1
 801205e:	f8ca 6000 	str.w	r6, [sl]
 8012062:	f8da 3000 	ldr.w	r3, [sl]
 8012066:	4499      	add	r9, r3
 8012068:	2200      	movs	r2, #0
 801206a:	2300      	movs	r3, #0
 801206c:	4620      	mov	r0, r4
 801206e:	4629      	mov	r1, r5
 8012070:	f7ee fd3a 	bl	8000ae8 <__aeabi_dcmpeq>
 8012074:	b108      	cbz	r0, 801207a <__cvt+0xa4>
 8012076:	f8cd 900c 	str.w	r9, [sp, #12]
 801207a:	2230      	movs	r2, #48	; 0x30
 801207c:	9b03      	ldr	r3, [sp, #12]
 801207e:	454b      	cmp	r3, r9
 8012080:	d307      	bcc.n	8012092 <__cvt+0xbc>
 8012082:	9b03      	ldr	r3, [sp, #12]
 8012084:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012086:	1bdb      	subs	r3, r3, r7
 8012088:	4638      	mov	r0, r7
 801208a:	6013      	str	r3, [r2, #0]
 801208c:	b004      	add	sp, #16
 801208e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012092:	1c59      	adds	r1, r3, #1
 8012094:	9103      	str	r1, [sp, #12]
 8012096:	701a      	strb	r2, [r3, #0]
 8012098:	e7f0      	b.n	801207c <__cvt+0xa6>

0801209a <__exponent>:
 801209a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801209c:	4603      	mov	r3, r0
 801209e:	2900      	cmp	r1, #0
 80120a0:	bfb8      	it	lt
 80120a2:	4249      	neglt	r1, r1
 80120a4:	f803 2b02 	strb.w	r2, [r3], #2
 80120a8:	bfb4      	ite	lt
 80120aa:	222d      	movlt	r2, #45	; 0x2d
 80120ac:	222b      	movge	r2, #43	; 0x2b
 80120ae:	2909      	cmp	r1, #9
 80120b0:	7042      	strb	r2, [r0, #1]
 80120b2:	dd2a      	ble.n	801210a <__exponent+0x70>
 80120b4:	f10d 0207 	add.w	r2, sp, #7
 80120b8:	4617      	mov	r7, r2
 80120ba:	260a      	movs	r6, #10
 80120bc:	4694      	mov	ip, r2
 80120be:	fb91 f5f6 	sdiv	r5, r1, r6
 80120c2:	fb06 1415 	mls	r4, r6, r5, r1
 80120c6:	3430      	adds	r4, #48	; 0x30
 80120c8:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80120cc:	460c      	mov	r4, r1
 80120ce:	2c63      	cmp	r4, #99	; 0x63
 80120d0:	f102 32ff 	add.w	r2, r2, #4294967295
 80120d4:	4629      	mov	r1, r5
 80120d6:	dcf1      	bgt.n	80120bc <__exponent+0x22>
 80120d8:	3130      	adds	r1, #48	; 0x30
 80120da:	f1ac 0402 	sub.w	r4, ip, #2
 80120de:	f802 1c01 	strb.w	r1, [r2, #-1]
 80120e2:	1c41      	adds	r1, r0, #1
 80120e4:	4622      	mov	r2, r4
 80120e6:	42ba      	cmp	r2, r7
 80120e8:	d30a      	bcc.n	8012100 <__exponent+0x66>
 80120ea:	f10d 0209 	add.w	r2, sp, #9
 80120ee:	eba2 020c 	sub.w	r2, r2, ip
 80120f2:	42bc      	cmp	r4, r7
 80120f4:	bf88      	it	hi
 80120f6:	2200      	movhi	r2, #0
 80120f8:	4413      	add	r3, r2
 80120fa:	1a18      	subs	r0, r3, r0
 80120fc:	b003      	add	sp, #12
 80120fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012100:	f812 5b01 	ldrb.w	r5, [r2], #1
 8012104:	f801 5f01 	strb.w	r5, [r1, #1]!
 8012108:	e7ed      	b.n	80120e6 <__exponent+0x4c>
 801210a:	2330      	movs	r3, #48	; 0x30
 801210c:	3130      	adds	r1, #48	; 0x30
 801210e:	7083      	strb	r3, [r0, #2]
 8012110:	70c1      	strb	r1, [r0, #3]
 8012112:	1d03      	adds	r3, r0, #4
 8012114:	e7f1      	b.n	80120fa <__exponent+0x60>
	...

08012118 <_printf_float>:
 8012118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801211c:	ed2d 8b02 	vpush	{d8}
 8012120:	b08d      	sub	sp, #52	; 0x34
 8012122:	460c      	mov	r4, r1
 8012124:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012128:	4616      	mov	r6, r2
 801212a:	461f      	mov	r7, r3
 801212c:	4605      	mov	r5, r0
 801212e:	f000 fde9 	bl	8012d04 <_localeconv_r>
 8012132:	f8d0 a000 	ldr.w	sl, [r0]
 8012136:	4650      	mov	r0, sl
 8012138:	f7ee f8aa 	bl	8000290 <strlen>
 801213c:	2300      	movs	r3, #0
 801213e:	930a      	str	r3, [sp, #40]	; 0x28
 8012140:	6823      	ldr	r3, [r4, #0]
 8012142:	9305      	str	r3, [sp, #20]
 8012144:	f8d8 3000 	ldr.w	r3, [r8]
 8012148:	f894 b018 	ldrb.w	fp, [r4, #24]
 801214c:	3307      	adds	r3, #7
 801214e:	f023 0307 	bic.w	r3, r3, #7
 8012152:	f103 0208 	add.w	r2, r3, #8
 8012156:	f8c8 2000 	str.w	r2, [r8]
 801215a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801215e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012162:	9307      	str	r3, [sp, #28]
 8012164:	f8cd 8018 	str.w	r8, [sp, #24]
 8012168:	ee08 0a10 	vmov	s16, r0
 801216c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8012170:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012174:	4b9e      	ldr	r3, [pc, #632]	; (80123f0 <_printf_float+0x2d8>)
 8012176:	f04f 32ff 	mov.w	r2, #4294967295
 801217a:	f7ee fce7 	bl	8000b4c <__aeabi_dcmpun>
 801217e:	bb88      	cbnz	r0, 80121e4 <_printf_float+0xcc>
 8012180:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012184:	4b9a      	ldr	r3, [pc, #616]	; (80123f0 <_printf_float+0x2d8>)
 8012186:	f04f 32ff 	mov.w	r2, #4294967295
 801218a:	f7ee fcc1 	bl	8000b10 <__aeabi_dcmple>
 801218e:	bb48      	cbnz	r0, 80121e4 <_printf_float+0xcc>
 8012190:	2200      	movs	r2, #0
 8012192:	2300      	movs	r3, #0
 8012194:	4640      	mov	r0, r8
 8012196:	4649      	mov	r1, r9
 8012198:	f7ee fcb0 	bl	8000afc <__aeabi_dcmplt>
 801219c:	b110      	cbz	r0, 80121a4 <_printf_float+0x8c>
 801219e:	232d      	movs	r3, #45	; 0x2d
 80121a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80121a4:	4a93      	ldr	r2, [pc, #588]	; (80123f4 <_printf_float+0x2dc>)
 80121a6:	4b94      	ldr	r3, [pc, #592]	; (80123f8 <_printf_float+0x2e0>)
 80121a8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80121ac:	bf94      	ite	ls
 80121ae:	4690      	movls	r8, r2
 80121b0:	4698      	movhi	r8, r3
 80121b2:	2303      	movs	r3, #3
 80121b4:	6123      	str	r3, [r4, #16]
 80121b6:	9b05      	ldr	r3, [sp, #20]
 80121b8:	f023 0304 	bic.w	r3, r3, #4
 80121bc:	6023      	str	r3, [r4, #0]
 80121be:	f04f 0900 	mov.w	r9, #0
 80121c2:	9700      	str	r7, [sp, #0]
 80121c4:	4633      	mov	r3, r6
 80121c6:	aa0b      	add	r2, sp, #44	; 0x2c
 80121c8:	4621      	mov	r1, r4
 80121ca:	4628      	mov	r0, r5
 80121cc:	f000 f9da 	bl	8012584 <_printf_common>
 80121d0:	3001      	adds	r0, #1
 80121d2:	f040 8090 	bne.w	80122f6 <_printf_float+0x1de>
 80121d6:	f04f 30ff 	mov.w	r0, #4294967295
 80121da:	b00d      	add	sp, #52	; 0x34
 80121dc:	ecbd 8b02 	vpop	{d8}
 80121e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121e4:	4642      	mov	r2, r8
 80121e6:	464b      	mov	r3, r9
 80121e8:	4640      	mov	r0, r8
 80121ea:	4649      	mov	r1, r9
 80121ec:	f7ee fcae 	bl	8000b4c <__aeabi_dcmpun>
 80121f0:	b140      	cbz	r0, 8012204 <_printf_float+0xec>
 80121f2:	464b      	mov	r3, r9
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	bfbc      	itt	lt
 80121f8:	232d      	movlt	r3, #45	; 0x2d
 80121fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80121fe:	4a7f      	ldr	r2, [pc, #508]	; (80123fc <_printf_float+0x2e4>)
 8012200:	4b7f      	ldr	r3, [pc, #508]	; (8012400 <_printf_float+0x2e8>)
 8012202:	e7d1      	b.n	80121a8 <_printf_float+0x90>
 8012204:	6863      	ldr	r3, [r4, #4]
 8012206:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801220a:	9206      	str	r2, [sp, #24]
 801220c:	1c5a      	adds	r2, r3, #1
 801220e:	d13f      	bne.n	8012290 <_printf_float+0x178>
 8012210:	2306      	movs	r3, #6
 8012212:	6063      	str	r3, [r4, #4]
 8012214:	9b05      	ldr	r3, [sp, #20]
 8012216:	6861      	ldr	r1, [r4, #4]
 8012218:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801221c:	2300      	movs	r3, #0
 801221e:	9303      	str	r3, [sp, #12]
 8012220:	ab0a      	add	r3, sp, #40	; 0x28
 8012222:	e9cd b301 	strd	fp, r3, [sp, #4]
 8012226:	ab09      	add	r3, sp, #36	; 0x24
 8012228:	ec49 8b10 	vmov	d0, r8, r9
 801222c:	9300      	str	r3, [sp, #0]
 801222e:	6022      	str	r2, [r4, #0]
 8012230:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012234:	4628      	mov	r0, r5
 8012236:	f7ff fece 	bl	8011fd6 <__cvt>
 801223a:	9b06      	ldr	r3, [sp, #24]
 801223c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801223e:	2b47      	cmp	r3, #71	; 0x47
 8012240:	4680      	mov	r8, r0
 8012242:	d108      	bne.n	8012256 <_printf_float+0x13e>
 8012244:	1cc8      	adds	r0, r1, #3
 8012246:	db02      	blt.n	801224e <_printf_float+0x136>
 8012248:	6863      	ldr	r3, [r4, #4]
 801224a:	4299      	cmp	r1, r3
 801224c:	dd41      	ble.n	80122d2 <_printf_float+0x1ba>
 801224e:	f1ab 0302 	sub.w	r3, fp, #2
 8012252:	fa5f fb83 	uxtb.w	fp, r3
 8012256:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801225a:	d820      	bhi.n	801229e <_printf_float+0x186>
 801225c:	3901      	subs	r1, #1
 801225e:	465a      	mov	r2, fp
 8012260:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012264:	9109      	str	r1, [sp, #36]	; 0x24
 8012266:	f7ff ff18 	bl	801209a <__exponent>
 801226a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801226c:	1813      	adds	r3, r2, r0
 801226e:	2a01      	cmp	r2, #1
 8012270:	4681      	mov	r9, r0
 8012272:	6123      	str	r3, [r4, #16]
 8012274:	dc02      	bgt.n	801227c <_printf_float+0x164>
 8012276:	6822      	ldr	r2, [r4, #0]
 8012278:	07d2      	lsls	r2, r2, #31
 801227a:	d501      	bpl.n	8012280 <_printf_float+0x168>
 801227c:	3301      	adds	r3, #1
 801227e:	6123      	str	r3, [r4, #16]
 8012280:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012284:	2b00      	cmp	r3, #0
 8012286:	d09c      	beq.n	80121c2 <_printf_float+0xaa>
 8012288:	232d      	movs	r3, #45	; 0x2d
 801228a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801228e:	e798      	b.n	80121c2 <_printf_float+0xaa>
 8012290:	9a06      	ldr	r2, [sp, #24]
 8012292:	2a47      	cmp	r2, #71	; 0x47
 8012294:	d1be      	bne.n	8012214 <_printf_float+0xfc>
 8012296:	2b00      	cmp	r3, #0
 8012298:	d1bc      	bne.n	8012214 <_printf_float+0xfc>
 801229a:	2301      	movs	r3, #1
 801229c:	e7b9      	b.n	8012212 <_printf_float+0xfa>
 801229e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80122a2:	d118      	bne.n	80122d6 <_printf_float+0x1be>
 80122a4:	2900      	cmp	r1, #0
 80122a6:	6863      	ldr	r3, [r4, #4]
 80122a8:	dd0b      	ble.n	80122c2 <_printf_float+0x1aa>
 80122aa:	6121      	str	r1, [r4, #16]
 80122ac:	b913      	cbnz	r3, 80122b4 <_printf_float+0x19c>
 80122ae:	6822      	ldr	r2, [r4, #0]
 80122b0:	07d0      	lsls	r0, r2, #31
 80122b2:	d502      	bpl.n	80122ba <_printf_float+0x1a2>
 80122b4:	3301      	adds	r3, #1
 80122b6:	440b      	add	r3, r1
 80122b8:	6123      	str	r3, [r4, #16]
 80122ba:	65a1      	str	r1, [r4, #88]	; 0x58
 80122bc:	f04f 0900 	mov.w	r9, #0
 80122c0:	e7de      	b.n	8012280 <_printf_float+0x168>
 80122c2:	b913      	cbnz	r3, 80122ca <_printf_float+0x1b2>
 80122c4:	6822      	ldr	r2, [r4, #0]
 80122c6:	07d2      	lsls	r2, r2, #31
 80122c8:	d501      	bpl.n	80122ce <_printf_float+0x1b6>
 80122ca:	3302      	adds	r3, #2
 80122cc:	e7f4      	b.n	80122b8 <_printf_float+0x1a0>
 80122ce:	2301      	movs	r3, #1
 80122d0:	e7f2      	b.n	80122b8 <_printf_float+0x1a0>
 80122d2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80122d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122d8:	4299      	cmp	r1, r3
 80122da:	db05      	blt.n	80122e8 <_printf_float+0x1d0>
 80122dc:	6823      	ldr	r3, [r4, #0]
 80122de:	6121      	str	r1, [r4, #16]
 80122e0:	07d8      	lsls	r0, r3, #31
 80122e2:	d5ea      	bpl.n	80122ba <_printf_float+0x1a2>
 80122e4:	1c4b      	adds	r3, r1, #1
 80122e6:	e7e7      	b.n	80122b8 <_printf_float+0x1a0>
 80122e8:	2900      	cmp	r1, #0
 80122ea:	bfd4      	ite	le
 80122ec:	f1c1 0202 	rsble	r2, r1, #2
 80122f0:	2201      	movgt	r2, #1
 80122f2:	4413      	add	r3, r2
 80122f4:	e7e0      	b.n	80122b8 <_printf_float+0x1a0>
 80122f6:	6823      	ldr	r3, [r4, #0]
 80122f8:	055a      	lsls	r2, r3, #21
 80122fa:	d407      	bmi.n	801230c <_printf_float+0x1f4>
 80122fc:	6923      	ldr	r3, [r4, #16]
 80122fe:	4642      	mov	r2, r8
 8012300:	4631      	mov	r1, r6
 8012302:	4628      	mov	r0, r5
 8012304:	47b8      	blx	r7
 8012306:	3001      	adds	r0, #1
 8012308:	d12c      	bne.n	8012364 <_printf_float+0x24c>
 801230a:	e764      	b.n	80121d6 <_printf_float+0xbe>
 801230c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012310:	f240 80e0 	bls.w	80124d4 <_printf_float+0x3bc>
 8012314:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012318:	2200      	movs	r2, #0
 801231a:	2300      	movs	r3, #0
 801231c:	f7ee fbe4 	bl	8000ae8 <__aeabi_dcmpeq>
 8012320:	2800      	cmp	r0, #0
 8012322:	d034      	beq.n	801238e <_printf_float+0x276>
 8012324:	4a37      	ldr	r2, [pc, #220]	; (8012404 <_printf_float+0x2ec>)
 8012326:	2301      	movs	r3, #1
 8012328:	4631      	mov	r1, r6
 801232a:	4628      	mov	r0, r5
 801232c:	47b8      	blx	r7
 801232e:	3001      	adds	r0, #1
 8012330:	f43f af51 	beq.w	80121d6 <_printf_float+0xbe>
 8012334:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012338:	429a      	cmp	r2, r3
 801233a:	db02      	blt.n	8012342 <_printf_float+0x22a>
 801233c:	6823      	ldr	r3, [r4, #0]
 801233e:	07d8      	lsls	r0, r3, #31
 8012340:	d510      	bpl.n	8012364 <_printf_float+0x24c>
 8012342:	ee18 3a10 	vmov	r3, s16
 8012346:	4652      	mov	r2, sl
 8012348:	4631      	mov	r1, r6
 801234a:	4628      	mov	r0, r5
 801234c:	47b8      	blx	r7
 801234e:	3001      	adds	r0, #1
 8012350:	f43f af41 	beq.w	80121d6 <_printf_float+0xbe>
 8012354:	f04f 0800 	mov.w	r8, #0
 8012358:	f104 091a 	add.w	r9, r4, #26
 801235c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801235e:	3b01      	subs	r3, #1
 8012360:	4543      	cmp	r3, r8
 8012362:	dc09      	bgt.n	8012378 <_printf_float+0x260>
 8012364:	6823      	ldr	r3, [r4, #0]
 8012366:	079b      	lsls	r3, r3, #30
 8012368:	f100 8107 	bmi.w	801257a <_printf_float+0x462>
 801236c:	68e0      	ldr	r0, [r4, #12]
 801236e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012370:	4298      	cmp	r0, r3
 8012372:	bfb8      	it	lt
 8012374:	4618      	movlt	r0, r3
 8012376:	e730      	b.n	80121da <_printf_float+0xc2>
 8012378:	2301      	movs	r3, #1
 801237a:	464a      	mov	r2, r9
 801237c:	4631      	mov	r1, r6
 801237e:	4628      	mov	r0, r5
 8012380:	47b8      	blx	r7
 8012382:	3001      	adds	r0, #1
 8012384:	f43f af27 	beq.w	80121d6 <_printf_float+0xbe>
 8012388:	f108 0801 	add.w	r8, r8, #1
 801238c:	e7e6      	b.n	801235c <_printf_float+0x244>
 801238e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012390:	2b00      	cmp	r3, #0
 8012392:	dc39      	bgt.n	8012408 <_printf_float+0x2f0>
 8012394:	4a1b      	ldr	r2, [pc, #108]	; (8012404 <_printf_float+0x2ec>)
 8012396:	2301      	movs	r3, #1
 8012398:	4631      	mov	r1, r6
 801239a:	4628      	mov	r0, r5
 801239c:	47b8      	blx	r7
 801239e:	3001      	adds	r0, #1
 80123a0:	f43f af19 	beq.w	80121d6 <_printf_float+0xbe>
 80123a4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80123a8:	4313      	orrs	r3, r2
 80123aa:	d102      	bne.n	80123b2 <_printf_float+0x29a>
 80123ac:	6823      	ldr	r3, [r4, #0]
 80123ae:	07d9      	lsls	r1, r3, #31
 80123b0:	d5d8      	bpl.n	8012364 <_printf_float+0x24c>
 80123b2:	ee18 3a10 	vmov	r3, s16
 80123b6:	4652      	mov	r2, sl
 80123b8:	4631      	mov	r1, r6
 80123ba:	4628      	mov	r0, r5
 80123bc:	47b8      	blx	r7
 80123be:	3001      	adds	r0, #1
 80123c0:	f43f af09 	beq.w	80121d6 <_printf_float+0xbe>
 80123c4:	f04f 0900 	mov.w	r9, #0
 80123c8:	f104 0a1a 	add.w	sl, r4, #26
 80123cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123ce:	425b      	negs	r3, r3
 80123d0:	454b      	cmp	r3, r9
 80123d2:	dc01      	bgt.n	80123d8 <_printf_float+0x2c0>
 80123d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123d6:	e792      	b.n	80122fe <_printf_float+0x1e6>
 80123d8:	2301      	movs	r3, #1
 80123da:	4652      	mov	r2, sl
 80123dc:	4631      	mov	r1, r6
 80123de:	4628      	mov	r0, r5
 80123e0:	47b8      	blx	r7
 80123e2:	3001      	adds	r0, #1
 80123e4:	f43f aef7 	beq.w	80121d6 <_printf_float+0xbe>
 80123e8:	f109 0901 	add.w	r9, r9, #1
 80123ec:	e7ee      	b.n	80123cc <_printf_float+0x2b4>
 80123ee:	bf00      	nop
 80123f0:	7fefffff 	.word	0x7fefffff
 80123f4:	08015860 	.word	0x08015860
 80123f8:	08015864 	.word	0x08015864
 80123fc:	08015868 	.word	0x08015868
 8012400:	0801586c 	.word	0x0801586c
 8012404:	08015870 	.word	0x08015870
 8012408:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801240a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801240c:	429a      	cmp	r2, r3
 801240e:	bfa8      	it	ge
 8012410:	461a      	movge	r2, r3
 8012412:	2a00      	cmp	r2, #0
 8012414:	4691      	mov	r9, r2
 8012416:	dc37      	bgt.n	8012488 <_printf_float+0x370>
 8012418:	f04f 0b00 	mov.w	fp, #0
 801241c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012420:	f104 021a 	add.w	r2, r4, #26
 8012424:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012426:	9305      	str	r3, [sp, #20]
 8012428:	eba3 0309 	sub.w	r3, r3, r9
 801242c:	455b      	cmp	r3, fp
 801242e:	dc33      	bgt.n	8012498 <_printf_float+0x380>
 8012430:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012434:	429a      	cmp	r2, r3
 8012436:	db3b      	blt.n	80124b0 <_printf_float+0x398>
 8012438:	6823      	ldr	r3, [r4, #0]
 801243a:	07da      	lsls	r2, r3, #31
 801243c:	d438      	bmi.n	80124b0 <_printf_float+0x398>
 801243e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012442:	eba2 0903 	sub.w	r9, r2, r3
 8012446:	9b05      	ldr	r3, [sp, #20]
 8012448:	1ad2      	subs	r2, r2, r3
 801244a:	4591      	cmp	r9, r2
 801244c:	bfa8      	it	ge
 801244e:	4691      	movge	r9, r2
 8012450:	f1b9 0f00 	cmp.w	r9, #0
 8012454:	dc35      	bgt.n	80124c2 <_printf_float+0x3aa>
 8012456:	f04f 0800 	mov.w	r8, #0
 801245a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801245e:	f104 0a1a 	add.w	sl, r4, #26
 8012462:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012466:	1a9b      	subs	r3, r3, r2
 8012468:	eba3 0309 	sub.w	r3, r3, r9
 801246c:	4543      	cmp	r3, r8
 801246e:	f77f af79 	ble.w	8012364 <_printf_float+0x24c>
 8012472:	2301      	movs	r3, #1
 8012474:	4652      	mov	r2, sl
 8012476:	4631      	mov	r1, r6
 8012478:	4628      	mov	r0, r5
 801247a:	47b8      	blx	r7
 801247c:	3001      	adds	r0, #1
 801247e:	f43f aeaa 	beq.w	80121d6 <_printf_float+0xbe>
 8012482:	f108 0801 	add.w	r8, r8, #1
 8012486:	e7ec      	b.n	8012462 <_printf_float+0x34a>
 8012488:	4613      	mov	r3, r2
 801248a:	4631      	mov	r1, r6
 801248c:	4642      	mov	r2, r8
 801248e:	4628      	mov	r0, r5
 8012490:	47b8      	blx	r7
 8012492:	3001      	adds	r0, #1
 8012494:	d1c0      	bne.n	8012418 <_printf_float+0x300>
 8012496:	e69e      	b.n	80121d6 <_printf_float+0xbe>
 8012498:	2301      	movs	r3, #1
 801249a:	4631      	mov	r1, r6
 801249c:	4628      	mov	r0, r5
 801249e:	9205      	str	r2, [sp, #20]
 80124a0:	47b8      	blx	r7
 80124a2:	3001      	adds	r0, #1
 80124a4:	f43f ae97 	beq.w	80121d6 <_printf_float+0xbe>
 80124a8:	9a05      	ldr	r2, [sp, #20]
 80124aa:	f10b 0b01 	add.w	fp, fp, #1
 80124ae:	e7b9      	b.n	8012424 <_printf_float+0x30c>
 80124b0:	ee18 3a10 	vmov	r3, s16
 80124b4:	4652      	mov	r2, sl
 80124b6:	4631      	mov	r1, r6
 80124b8:	4628      	mov	r0, r5
 80124ba:	47b8      	blx	r7
 80124bc:	3001      	adds	r0, #1
 80124be:	d1be      	bne.n	801243e <_printf_float+0x326>
 80124c0:	e689      	b.n	80121d6 <_printf_float+0xbe>
 80124c2:	9a05      	ldr	r2, [sp, #20]
 80124c4:	464b      	mov	r3, r9
 80124c6:	4442      	add	r2, r8
 80124c8:	4631      	mov	r1, r6
 80124ca:	4628      	mov	r0, r5
 80124cc:	47b8      	blx	r7
 80124ce:	3001      	adds	r0, #1
 80124d0:	d1c1      	bne.n	8012456 <_printf_float+0x33e>
 80124d2:	e680      	b.n	80121d6 <_printf_float+0xbe>
 80124d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80124d6:	2a01      	cmp	r2, #1
 80124d8:	dc01      	bgt.n	80124de <_printf_float+0x3c6>
 80124da:	07db      	lsls	r3, r3, #31
 80124dc:	d53a      	bpl.n	8012554 <_printf_float+0x43c>
 80124de:	2301      	movs	r3, #1
 80124e0:	4642      	mov	r2, r8
 80124e2:	4631      	mov	r1, r6
 80124e4:	4628      	mov	r0, r5
 80124e6:	47b8      	blx	r7
 80124e8:	3001      	adds	r0, #1
 80124ea:	f43f ae74 	beq.w	80121d6 <_printf_float+0xbe>
 80124ee:	ee18 3a10 	vmov	r3, s16
 80124f2:	4652      	mov	r2, sl
 80124f4:	4631      	mov	r1, r6
 80124f6:	4628      	mov	r0, r5
 80124f8:	47b8      	blx	r7
 80124fa:	3001      	adds	r0, #1
 80124fc:	f43f ae6b 	beq.w	80121d6 <_printf_float+0xbe>
 8012500:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012504:	2200      	movs	r2, #0
 8012506:	2300      	movs	r3, #0
 8012508:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801250c:	f7ee faec 	bl	8000ae8 <__aeabi_dcmpeq>
 8012510:	b9d8      	cbnz	r0, 801254a <_printf_float+0x432>
 8012512:	f10a 33ff 	add.w	r3, sl, #4294967295
 8012516:	f108 0201 	add.w	r2, r8, #1
 801251a:	4631      	mov	r1, r6
 801251c:	4628      	mov	r0, r5
 801251e:	47b8      	blx	r7
 8012520:	3001      	adds	r0, #1
 8012522:	d10e      	bne.n	8012542 <_printf_float+0x42a>
 8012524:	e657      	b.n	80121d6 <_printf_float+0xbe>
 8012526:	2301      	movs	r3, #1
 8012528:	4652      	mov	r2, sl
 801252a:	4631      	mov	r1, r6
 801252c:	4628      	mov	r0, r5
 801252e:	47b8      	blx	r7
 8012530:	3001      	adds	r0, #1
 8012532:	f43f ae50 	beq.w	80121d6 <_printf_float+0xbe>
 8012536:	f108 0801 	add.w	r8, r8, #1
 801253a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801253c:	3b01      	subs	r3, #1
 801253e:	4543      	cmp	r3, r8
 8012540:	dcf1      	bgt.n	8012526 <_printf_float+0x40e>
 8012542:	464b      	mov	r3, r9
 8012544:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012548:	e6da      	b.n	8012300 <_printf_float+0x1e8>
 801254a:	f04f 0800 	mov.w	r8, #0
 801254e:	f104 0a1a 	add.w	sl, r4, #26
 8012552:	e7f2      	b.n	801253a <_printf_float+0x422>
 8012554:	2301      	movs	r3, #1
 8012556:	4642      	mov	r2, r8
 8012558:	e7df      	b.n	801251a <_printf_float+0x402>
 801255a:	2301      	movs	r3, #1
 801255c:	464a      	mov	r2, r9
 801255e:	4631      	mov	r1, r6
 8012560:	4628      	mov	r0, r5
 8012562:	47b8      	blx	r7
 8012564:	3001      	adds	r0, #1
 8012566:	f43f ae36 	beq.w	80121d6 <_printf_float+0xbe>
 801256a:	f108 0801 	add.w	r8, r8, #1
 801256e:	68e3      	ldr	r3, [r4, #12]
 8012570:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012572:	1a5b      	subs	r3, r3, r1
 8012574:	4543      	cmp	r3, r8
 8012576:	dcf0      	bgt.n	801255a <_printf_float+0x442>
 8012578:	e6f8      	b.n	801236c <_printf_float+0x254>
 801257a:	f04f 0800 	mov.w	r8, #0
 801257e:	f104 0919 	add.w	r9, r4, #25
 8012582:	e7f4      	b.n	801256e <_printf_float+0x456>

08012584 <_printf_common>:
 8012584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012588:	4616      	mov	r6, r2
 801258a:	4699      	mov	r9, r3
 801258c:	688a      	ldr	r2, [r1, #8]
 801258e:	690b      	ldr	r3, [r1, #16]
 8012590:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012594:	4293      	cmp	r3, r2
 8012596:	bfb8      	it	lt
 8012598:	4613      	movlt	r3, r2
 801259a:	6033      	str	r3, [r6, #0]
 801259c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80125a0:	4607      	mov	r7, r0
 80125a2:	460c      	mov	r4, r1
 80125a4:	b10a      	cbz	r2, 80125aa <_printf_common+0x26>
 80125a6:	3301      	adds	r3, #1
 80125a8:	6033      	str	r3, [r6, #0]
 80125aa:	6823      	ldr	r3, [r4, #0]
 80125ac:	0699      	lsls	r1, r3, #26
 80125ae:	bf42      	ittt	mi
 80125b0:	6833      	ldrmi	r3, [r6, #0]
 80125b2:	3302      	addmi	r3, #2
 80125b4:	6033      	strmi	r3, [r6, #0]
 80125b6:	6825      	ldr	r5, [r4, #0]
 80125b8:	f015 0506 	ands.w	r5, r5, #6
 80125bc:	d106      	bne.n	80125cc <_printf_common+0x48>
 80125be:	f104 0a19 	add.w	sl, r4, #25
 80125c2:	68e3      	ldr	r3, [r4, #12]
 80125c4:	6832      	ldr	r2, [r6, #0]
 80125c6:	1a9b      	subs	r3, r3, r2
 80125c8:	42ab      	cmp	r3, r5
 80125ca:	dc26      	bgt.n	801261a <_printf_common+0x96>
 80125cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80125d0:	1e13      	subs	r3, r2, #0
 80125d2:	6822      	ldr	r2, [r4, #0]
 80125d4:	bf18      	it	ne
 80125d6:	2301      	movne	r3, #1
 80125d8:	0692      	lsls	r2, r2, #26
 80125da:	d42b      	bmi.n	8012634 <_printf_common+0xb0>
 80125dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80125e0:	4649      	mov	r1, r9
 80125e2:	4638      	mov	r0, r7
 80125e4:	47c0      	blx	r8
 80125e6:	3001      	adds	r0, #1
 80125e8:	d01e      	beq.n	8012628 <_printf_common+0xa4>
 80125ea:	6823      	ldr	r3, [r4, #0]
 80125ec:	6922      	ldr	r2, [r4, #16]
 80125ee:	f003 0306 	and.w	r3, r3, #6
 80125f2:	2b04      	cmp	r3, #4
 80125f4:	bf02      	ittt	eq
 80125f6:	68e5      	ldreq	r5, [r4, #12]
 80125f8:	6833      	ldreq	r3, [r6, #0]
 80125fa:	1aed      	subeq	r5, r5, r3
 80125fc:	68a3      	ldr	r3, [r4, #8]
 80125fe:	bf0c      	ite	eq
 8012600:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012604:	2500      	movne	r5, #0
 8012606:	4293      	cmp	r3, r2
 8012608:	bfc4      	itt	gt
 801260a:	1a9b      	subgt	r3, r3, r2
 801260c:	18ed      	addgt	r5, r5, r3
 801260e:	2600      	movs	r6, #0
 8012610:	341a      	adds	r4, #26
 8012612:	42b5      	cmp	r5, r6
 8012614:	d11a      	bne.n	801264c <_printf_common+0xc8>
 8012616:	2000      	movs	r0, #0
 8012618:	e008      	b.n	801262c <_printf_common+0xa8>
 801261a:	2301      	movs	r3, #1
 801261c:	4652      	mov	r2, sl
 801261e:	4649      	mov	r1, r9
 8012620:	4638      	mov	r0, r7
 8012622:	47c0      	blx	r8
 8012624:	3001      	adds	r0, #1
 8012626:	d103      	bne.n	8012630 <_printf_common+0xac>
 8012628:	f04f 30ff 	mov.w	r0, #4294967295
 801262c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012630:	3501      	adds	r5, #1
 8012632:	e7c6      	b.n	80125c2 <_printf_common+0x3e>
 8012634:	18e1      	adds	r1, r4, r3
 8012636:	1c5a      	adds	r2, r3, #1
 8012638:	2030      	movs	r0, #48	; 0x30
 801263a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801263e:	4422      	add	r2, r4
 8012640:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012644:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012648:	3302      	adds	r3, #2
 801264a:	e7c7      	b.n	80125dc <_printf_common+0x58>
 801264c:	2301      	movs	r3, #1
 801264e:	4622      	mov	r2, r4
 8012650:	4649      	mov	r1, r9
 8012652:	4638      	mov	r0, r7
 8012654:	47c0      	blx	r8
 8012656:	3001      	adds	r0, #1
 8012658:	d0e6      	beq.n	8012628 <_printf_common+0xa4>
 801265a:	3601      	adds	r6, #1
 801265c:	e7d9      	b.n	8012612 <_printf_common+0x8e>
	...

08012660 <_printf_i>:
 8012660:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012664:	7e0f      	ldrb	r7, [r1, #24]
 8012666:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012668:	2f78      	cmp	r7, #120	; 0x78
 801266a:	4691      	mov	r9, r2
 801266c:	4680      	mov	r8, r0
 801266e:	460c      	mov	r4, r1
 8012670:	469a      	mov	sl, r3
 8012672:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012676:	d807      	bhi.n	8012688 <_printf_i+0x28>
 8012678:	2f62      	cmp	r7, #98	; 0x62
 801267a:	d80a      	bhi.n	8012692 <_printf_i+0x32>
 801267c:	2f00      	cmp	r7, #0
 801267e:	f000 80d4 	beq.w	801282a <_printf_i+0x1ca>
 8012682:	2f58      	cmp	r7, #88	; 0x58
 8012684:	f000 80c0 	beq.w	8012808 <_printf_i+0x1a8>
 8012688:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801268c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012690:	e03a      	b.n	8012708 <_printf_i+0xa8>
 8012692:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012696:	2b15      	cmp	r3, #21
 8012698:	d8f6      	bhi.n	8012688 <_printf_i+0x28>
 801269a:	a101      	add	r1, pc, #4	; (adr r1, 80126a0 <_printf_i+0x40>)
 801269c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80126a0:	080126f9 	.word	0x080126f9
 80126a4:	0801270d 	.word	0x0801270d
 80126a8:	08012689 	.word	0x08012689
 80126ac:	08012689 	.word	0x08012689
 80126b0:	08012689 	.word	0x08012689
 80126b4:	08012689 	.word	0x08012689
 80126b8:	0801270d 	.word	0x0801270d
 80126bc:	08012689 	.word	0x08012689
 80126c0:	08012689 	.word	0x08012689
 80126c4:	08012689 	.word	0x08012689
 80126c8:	08012689 	.word	0x08012689
 80126cc:	08012811 	.word	0x08012811
 80126d0:	08012739 	.word	0x08012739
 80126d4:	080127cb 	.word	0x080127cb
 80126d8:	08012689 	.word	0x08012689
 80126dc:	08012689 	.word	0x08012689
 80126e0:	08012833 	.word	0x08012833
 80126e4:	08012689 	.word	0x08012689
 80126e8:	08012739 	.word	0x08012739
 80126ec:	08012689 	.word	0x08012689
 80126f0:	08012689 	.word	0x08012689
 80126f4:	080127d3 	.word	0x080127d3
 80126f8:	682b      	ldr	r3, [r5, #0]
 80126fa:	1d1a      	adds	r2, r3, #4
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	602a      	str	r2, [r5, #0]
 8012700:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012704:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012708:	2301      	movs	r3, #1
 801270a:	e09f      	b.n	801284c <_printf_i+0x1ec>
 801270c:	6820      	ldr	r0, [r4, #0]
 801270e:	682b      	ldr	r3, [r5, #0]
 8012710:	0607      	lsls	r7, r0, #24
 8012712:	f103 0104 	add.w	r1, r3, #4
 8012716:	6029      	str	r1, [r5, #0]
 8012718:	d501      	bpl.n	801271e <_printf_i+0xbe>
 801271a:	681e      	ldr	r6, [r3, #0]
 801271c:	e003      	b.n	8012726 <_printf_i+0xc6>
 801271e:	0646      	lsls	r6, r0, #25
 8012720:	d5fb      	bpl.n	801271a <_printf_i+0xba>
 8012722:	f9b3 6000 	ldrsh.w	r6, [r3]
 8012726:	2e00      	cmp	r6, #0
 8012728:	da03      	bge.n	8012732 <_printf_i+0xd2>
 801272a:	232d      	movs	r3, #45	; 0x2d
 801272c:	4276      	negs	r6, r6
 801272e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012732:	485a      	ldr	r0, [pc, #360]	; (801289c <_printf_i+0x23c>)
 8012734:	230a      	movs	r3, #10
 8012736:	e012      	b.n	801275e <_printf_i+0xfe>
 8012738:	682b      	ldr	r3, [r5, #0]
 801273a:	6820      	ldr	r0, [r4, #0]
 801273c:	1d19      	adds	r1, r3, #4
 801273e:	6029      	str	r1, [r5, #0]
 8012740:	0605      	lsls	r5, r0, #24
 8012742:	d501      	bpl.n	8012748 <_printf_i+0xe8>
 8012744:	681e      	ldr	r6, [r3, #0]
 8012746:	e002      	b.n	801274e <_printf_i+0xee>
 8012748:	0641      	lsls	r1, r0, #25
 801274a:	d5fb      	bpl.n	8012744 <_printf_i+0xe4>
 801274c:	881e      	ldrh	r6, [r3, #0]
 801274e:	4853      	ldr	r0, [pc, #332]	; (801289c <_printf_i+0x23c>)
 8012750:	2f6f      	cmp	r7, #111	; 0x6f
 8012752:	bf0c      	ite	eq
 8012754:	2308      	moveq	r3, #8
 8012756:	230a      	movne	r3, #10
 8012758:	2100      	movs	r1, #0
 801275a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801275e:	6865      	ldr	r5, [r4, #4]
 8012760:	60a5      	str	r5, [r4, #8]
 8012762:	2d00      	cmp	r5, #0
 8012764:	bfa2      	ittt	ge
 8012766:	6821      	ldrge	r1, [r4, #0]
 8012768:	f021 0104 	bicge.w	r1, r1, #4
 801276c:	6021      	strge	r1, [r4, #0]
 801276e:	b90e      	cbnz	r6, 8012774 <_printf_i+0x114>
 8012770:	2d00      	cmp	r5, #0
 8012772:	d04b      	beq.n	801280c <_printf_i+0x1ac>
 8012774:	4615      	mov	r5, r2
 8012776:	fbb6 f1f3 	udiv	r1, r6, r3
 801277a:	fb03 6711 	mls	r7, r3, r1, r6
 801277e:	5dc7      	ldrb	r7, [r0, r7]
 8012780:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012784:	4637      	mov	r7, r6
 8012786:	42bb      	cmp	r3, r7
 8012788:	460e      	mov	r6, r1
 801278a:	d9f4      	bls.n	8012776 <_printf_i+0x116>
 801278c:	2b08      	cmp	r3, #8
 801278e:	d10b      	bne.n	80127a8 <_printf_i+0x148>
 8012790:	6823      	ldr	r3, [r4, #0]
 8012792:	07de      	lsls	r6, r3, #31
 8012794:	d508      	bpl.n	80127a8 <_printf_i+0x148>
 8012796:	6923      	ldr	r3, [r4, #16]
 8012798:	6861      	ldr	r1, [r4, #4]
 801279a:	4299      	cmp	r1, r3
 801279c:	bfde      	ittt	le
 801279e:	2330      	movle	r3, #48	; 0x30
 80127a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80127a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80127a8:	1b52      	subs	r2, r2, r5
 80127aa:	6122      	str	r2, [r4, #16]
 80127ac:	f8cd a000 	str.w	sl, [sp]
 80127b0:	464b      	mov	r3, r9
 80127b2:	aa03      	add	r2, sp, #12
 80127b4:	4621      	mov	r1, r4
 80127b6:	4640      	mov	r0, r8
 80127b8:	f7ff fee4 	bl	8012584 <_printf_common>
 80127bc:	3001      	adds	r0, #1
 80127be:	d14a      	bne.n	8012856 <_printf_i+0x1f6>
 80127c0:	f04f 30ff 	mov.w	r0, #4294967295
 80127c4:	b004      	add	sp, #16
 80127c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127ca:	6823      	ldr	r3, [r4, #0]
 80127cc:	f043 0320 	orr.w	r3, r3, #32
 80127d0:	6023      	str	r3, [r4, #0]
 80127d2:	4833      	ldr	r0, [pc, #204]	; (80128a0 <_printf_i+0x240>)
 80127d4:	2778      	movs	r7, #120	; 0x78
 80127d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80127da:	6823      	ldr	r3, [r4, #0]
 80127dc:	6829      	ldr	r1, [r5, #0]
 80127de:	061f      	lsls	r7, r3, #24
 80127e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80127e4:	d402      	bmi.n	80127ec <_printf_i+0x18c>
 80127e6:	065f      	lsls	r7, r3, #25
 80127e8:	bf48      	it	mi
 80127ea:	b2b6      	uxthmi	r6, r6
 80127ec:	07df      	lsls	r7, r3, #31
 80127ee:	bf48      	it	mi
 80127f0:	f043 0320 	orrmi.w	r3, r3, #32
 80127f4:	6029      	str	r1, [r5, #0]
 80127f6:	bf48      	it	mi
 80127f8:	6023      	strmi	r3, [r4, #0]
 80127fa:	b91e      	cbnz	r6, 8012804 <_printf_i+0x1a4>
 80127fc:	6823      	ldr	r3, [r4, #0]
 80127fe:	f023 0320 	bic.w	r3, r3, #32
 8012802:	6023      	str	r3, [r4, #0]
 8012804:	2310      	movs	r3, #16
 8012806:	e7a7      	b.n	8012758 <_printf_i+0xf8>
 8012808:	4824      	ldr	r0, [pc, #144]	; (801289c <_printf_i+0x23c>)
 801280a:	e7e4      	b.n	80127d6 <_printf_i+0x176>
 801280c:	4615      	mov	r5, r2
 801280e:	e7bd      	b.n	801278c <_printf_i+0x12c>
 8012810:	682b      	ldr	r3, [r5, #0]
 8012812:	6826      	ldr	r6, [r4, #0]
 8012814:	6961      	ldr	r1, [r4, #20]
 8012816:	1d18      	adds	r0, r3, #4
 8012818:	6028      	str	r0, [r5, #0]
 801281a:	0635      	lsls	r5, r6, #24
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	d501      	bpl.n	8012824 <_printf_i+0x1c4>
 8012820:	6019      	str	r1, [r3, #0]
 8012822:	e002      	b.n	801282a <_printf_i+0x1ca>
 8012824:	0670      	lsls	r0, r6, #25
 8012826:	d5fb      	bpl.n	8012820 <_printf_i+0x1c0>
 8012828:	8019      	strh	r1, [r3, #0]
 801282a:	2300      	movs	r3, #0
 801282c:	6123      	str	r3, [r4, #16]
 801282e:	4615      	mov	r5, r2
 8012830:	e7bc      	b.n	80127ac <_printf_i+0x14c>
 8012832:	682b      	ldr	r3, [r5, #0]
 8012834:	1d1a      	adds	r2, r3, #4
 8012836:	602a      	str	r2, [r5, #0]
 8012838:	681d      	ldr	r5, [r3, #0]
 801283a:	6862      	ldr	r2, [r4, #4]
 801283c:	2100      	movs	r1, #0
 801283e:	4628      	mov	r0, r5
 8012840:	f7ed fcd6 	bl	80001f0 <memchr>
 8012844:	b108      	cbz	r0, 801284a <_printf_i+0x1ea>
 8012846:	1b40      	subs	r0, r0, r5
 8012848:	6060      	str	r0, [r4, #4]
 801284a:	6863      	ldr	r3, [r4, #4]
 801284c:	6123      	str	r3, [r4, #16]
 801284e:	2300      	movs	r3, #0
 8012850:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012854:	e7aa      	b.n	80127ac <_printf_i+0x14c>
 8012856:	6923      	ldr	r3, [r4, #16]
 8012858:	462a      	mov	r2, r5
 801285a:	4649      	mov	r1, r9
 801285c:	4640      	mov	r0, r8
 801285e:	47d0      	blx	sl
 8012860:	3001      	adds	r0, #1
 8012862:	d0ad      	beq.n	80127c0 <_printf_i+0x160>
 8012864:	6823      	ldr	r3, [r4, #0]
 8012866:	079b      	lsls	r3, r3, #30
 8012868:	d413      	bmi.n	8012892 <_printf_i+0x232>
 801286a:	68e0      	ldr	r0, [r4, #12]
 801286c:	9b03      	ldr	r3, [sp, #12]
 801286e:	4298      	cmp	r0, r3
 8012870:	bfb8      	it	lt
 8012872:	4618      	movlt	r0, r3
 8012874:	e7a6      	b.n	80127c4 <_printf_i+0x164>
 8012876:	2301      	movs	r3, #1
 8012878:	4632      	mov	r2, r6
 801287a:	4649      	mov	r1, r9
 801287c:	4640      	mov	r0, r8
 801287e:	47d0      	blx	sl
 8012880:	3001      	adds	r0, #1
 8012882:	d09d      	beq.n	80127c0 <_printf_i+0x160>
 8012884:	3501      	adds	r5, #1
 8012886:	68e3      	ldr	r3, [r4, #12]
 8012888:	9903      	ldr	r1, [sp, #12]
 801288a:	1a5b      	subs	r3, r3, r1
 801288c:	42ab      	cmp	r3, r5
 801288e:	dcf2      	bgt.n	8012876 <_printf_i+0x216>
 8012890:	e7eb      	b.n	801286a <_printf_i+0x20a>
 8012892:	2500      	movs	r5, #0
 8012894:	f104 0619 	add.w	r6, r4, #25
 8012898:	e7f5      	b.n	8012886 <_printf_i+0x226>
 801289a:	bf00      	nop
 801289c:	08015872 	.word	0x08015872
 80128a0:	08015883 	.word	0x08015883

080128a4 <std>:
 80128a4:	2300      	movs	r3, #0
 80128a6:	b510      	push	{r4, lr}
 80128a8:	4604      	mov	r4, r0
 80128aa:	e9c0 3300 	strd	r3, r3, [r0]
 80128ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80128b2:	6083      	str	r3, [r0, #8]
 80128b4:	8181      	strh	r1, [r0, #12]
 80128b6:	6643      	str	r3, [r0, #100]	; 0x64
 80128b8:	81c2      	strh	r2, [r0, #14]
 80128ba:	6183      	str	r3, [r0, #24]
 80128bc:	4619      	mov	r1, r3
 80128be:	2208      	movs	r2, #8
 80128c0:	305c      	adds	r0, #92	; 0x5c
 80128c2:	f000 fa17 	bl	8012cf4 <memset>
 80128c6:	4b0d      	ldr	r3, [pc, #52]	; (80128fc <std+0x58>)
 80128c8:	6263      	str	r3, [r4, #36]	; 0x24
 80128ca:	4b0d      	ldr	r3, [pc, #52]	; (8012900 <std+0x5c>)
 80128cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80128ce:	4b0d      	ldr	r3, [pc, #52]	; (8012904 <std+0x60>)
 80128d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80128d2:	4b0d      	ldr	r3, [pc, #52]	; (8012908 <std+0x64>)
 80128d4:	6323      	str	r3, [r4, #48]	; 0x30
 80128d6:	4b0d      	ldr	r3, [pc, #52]	; (801290c <std+0x68>)
 80128d8:	6224      	str	r4, [r4, #32]
 80128da:	429c      	cmp	r4, r3
 80128dc:	d006      	beq.n	80128ec <std+0x48>
 80128de:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80128e2:	4294      	cmp	r4, r2
 80128e4:	d002      	beq.n	80128ec <std+0x48>
 80128e6:	33d0      	adds	r3, #208	; 0xd0
 80128e8:	429c      	cmp	r4, r3
 80128ea:	d105      	bne.n	80128f8 <std+0x54>
 80128ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80128f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80128f4:	f000 bad0 	b.w	8012e98 <__retarget_lock_init_recursive>
 80128f8:	bd10      	pop	{r4, pc}
 80128fa:	bf00      	nop
 80128fc:	08012b45 	.word	0x08012b45
 8012900:	08012b67 	.word	0x08012b67
 8012904:	08012b9f 	.word	0x08012b9f
 8012908:	08012bc3 	.word	0x08012bc3
 801290c:	20008014 	.word	0x20008014

08012910 <stdio_exit_handler>:
 8012910:	4a02      	ldr	r2, [pc, #8]	; (801291c <stdio_exit_handler+0xc>)
 8012912:	4903      	ldr	r1, [pc, #12]	; (8012920 <stdio_exit_handler+0x10>)
 8012914:	4803      	ldr	r0, [pc, #12]	; (8012924 <stdio_exit_handler+0x14>)
 8012916:	f000 b869 	b.w	80129ec <_fwalk_sglue>
 801291a:	bf00      	nop
 801291c:	20000030 	.word	0x20000030
 8012920:	08014b01 	.word	0x08014b01
 8012924:	2000003c 	.word	0x2000003c

08012928 <cleanup_stdio>:
 8012928:	6841      	ldr	r1, [r0, #4]
 801292a:	4b0c      	ldr	r3, [pc, #48]	; (801295c <cleanup_stdio+0x34>)
 801292c:	4299      	cmp	r1, r3
 801292e:	b510      	push	{r4, lr}
 8012930:	4604      	mov	r4, r0
 8012932:	d001      	beq.n	8012938 <cleanup_stdio+0x10>
 8012934:	f002 f8e4 	bl	8014b00 <_fflush_r>
 8012938:	68a1      	ldr	r1, [r4, #8]
 801293a:	4b09      	ldr	r3, [pc, #36]	; (8012960 <cleanup_stdio+0x38>)
 801293c:	4299      	cmp	r1, r3
 801293e:	d002      	beq.n	8012946 <cleanup_stdio+0x1e>
 8012940:	4620      	mov	r0, r4
 8012942:	f002 f8dd 	bl	8014b00 <_fflush_r>
 8012946:	68e1      	ldr	r1, [r4, #12]
 8012948:	4b06      	ldr	r3, [pc, #24]	; (8012964 <cleanup_stdio+0x3c>)
 801294a:	4299      	cmp	r1, r3
 801294c:	d004      	beq.n	8012958 <cleanup_stdio+0x30>
 801294e:	4620      	mov	r0, r4
 8012950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012954:	f002 b8d4 	b.w	8014b00 <_fflush_r>
 8012958:	bd10      	pop	{r4, pc}
 801295a:	bf00      	nop
 801295c:	20008014 	.word	0x20008014
 8012960:	2000807c 	.word	0x2000807c
 8012964:	200080e4 	.word	0x200080e4

08012968 <global_stdio_init.part.0>:
 8012968:	b510      	push	{r4, lr}
 801296a:	4b0b      	ldr	r3, [pc, #44]	; (8012998 <global_stdio_init.part.0+0x30>)
 801296c:	4c0b      	ldr	r4, [pc, #44]	; (801299c <global_stdio_init.part.0+0x34>)
 801296e:	4a0c      	ldr	r2, [pc, #48]	; (80129a0 <global_stdio_init.part.0+0x38>)
 8012970:	601a      	str	r2, [r3, #0]
 8012972:	4620      	mov	r0, r4
 8012974:	2200      	movs	r2, #0
 8012976:	2104      	movs	r1, #4
 8012978:	f7ff ff94 	bl	80128a4 <std>
 801297c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8012980:	2201      	movs	r2, #1
 8012982:	2109      	movs	r1, #9
 8012984:	f7ff ff8e 	bl	80128a4 <std>
 8012988:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801298c:	2202      	movs	r2, #2
 801298e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012992:	2112      	movs	r1, #18
 8012994:	f7ff bf86 	b.w	80128a4 <std>
 8012998:	2000814c 	.word	0x2000814c
 801299c:	20008014 	.word	0x20008014
 80129a0:	08012911 	.word	0x08012911

080129a4 <__sfp_lock_acquire>:
 80129a4:	4801      	ldr	r0, [pc, #4]	; (80129ac <__sfp_lock_acquire+0x8>)
 80129a6:	f000 ba78 	b.w	8012e9a <__retarget_lock_acquire_recursive>
 80129aa:	bf00      	nop
 80129ac:	20008155 	.word	0x20008155

080129b0 <__sfp_lock_release>:
 80129b0:	4801      	ldr	r0, [pc, #4]	; (80129b8 <__sfp_lock_release+0x8>)
 80129b2:	f000 ba73 	b.w	8012e9c <__retarget_lock_release_recursive>
 80129b6:	bf00      	nop
 80129b8:	20008155 	.word	0x20008155

080129bc <__sinit>:
 80129bc:	b510      	push	{r4, lr}
 80129be:	4604      	mov	r4, r0
 80129c0:	f7ff fff0 	bl	80129a4 <__sfp_lock_acquire>
 80129c4:	6a23      	ldr	r3, [r4, #32]
 80129c6:	b11b      	cbz	r3, 80129d0 <__sinit+0x14>
 80129c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80129cc:	f7ff bff0 	b.w	80129b0 <__sfp_lock_release>
 80129d0:	4b04      	ldr	r3, [pc, #16]	; (80129e4 <__sinit+0x28>)
 80129d2:	6223      	str	r3, [r4, #32]
 80129d4:	4b04      	ldr	r3, [pc, #16]	; (80129e8 <__sinit+0x2c>)
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d1f5      	bne.n	80129c8 <__sinit+0xc>
 80129dc:	f7ff ffc4 	bl	8012968 <global_stdio_init.part.0>
 80129e0:	e7f2      	b.n	80129c8 <__sinit+0xc>
 80129e2:	bf00      	nop
 80129e4:	08012929 	.word	0x08012929
 80129e8:	2000814c 	.word	0x2000814c

080129ec <_fwalk_sglue>:
 80129ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80129f0:	4607      	mov	r7, r0
 80129f2:	4688      	mov	r8, r1
 80129f4:	4614      	mov	r4, r2
 80129f6:	2600      	movs	r6, #0
 80129f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80129fc:	f1b9 0901 	subs.w	r9, r9, #1
 8012a00:	d505      	bpl.n	8012a0e <_fwalk_sglue+0x22>
 8012a02:	6824      	ldr	r4, [r4, #0]
 8012a04:	2c00      	cmp	r4, #0
 8012a06:	d1f7      	bne.n	80129f8 <_fwalk_sglue+0xc>
 8012a08:	4630      	mov	r0, r6
 8012a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a0e:	89ab      	ldrh	r3, [r5, #12]
 8012a10:	2b01      	cmp	r3, #1
 8012a12:	d907      	bls.n	8012a24 <_fwalk_sglue+0x38>
 8012a14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012a18:	3301      	adds	r3, #1
 8012a1a:	d003      	beq.n	8012a24 <_fwalk_sglue+0x38>
 8012a1c:	4629      	mov	r1, r5
 8012a1e:	4638      	mov	r0, r7
 8012a20:	47c0      	blx	r8
 8012a22:	4306      	orrs	r6, r0
 8012a24:	3568      	adds	r5, #104	; 0x68
 8012a26:	e7e9      	b.n	80129fc <_fwalk_sglue+0x10>

08012a28 <iprintf>:
 8012a28:	b40f      	push	{r0, r1, r2, r3}
 8012a2a:	b507      	push	{r0, r1, r2, lr}
 8012a2c:	4906      	ldr	r1, [pc, #24]	; (8012a48 <iprintf+0x20>)
 8012a2e:	ab04      	add	r3, sp, #16
 8012a30:	6808      	ldr	r0, [r1, #0]
 8012a32:	f853 2b04 	ldr.w	r2, [r3], #4
 8012a36:	6881      	ldr	r1, [r0, #8]
 8012a38:	9301      	str	r3, [sp, #4]
 8012a3a:	f001 fec1 	bl	80147c0 <_vfiprintf_r>
 8012a3e:	b003      	add	sp, #12
 8012a40:	f85d eb04 	ldr.w	lr, [sp], #4
 8012a44:	b004      	add	sp, #16
 8012a46:	4770      	bx	lr
 8012a48:	20000088 	.word	0x20000088

08012a4c <_puts_r>:
 8012a4c:	6a03      	ldr	r3, [r0, #32]
 8012a4e:	b570      	push	{r4, r5, r6, lr}
 8012a50:	6884      	ldr	r4, [r0, #8]
 8012a52:	4605      	mov	r5, r0
 8012a54:	460e      	mov	r6, r1
 8012a56:	b90b      	cbnz	r3, 8012a5c <_puts_r+0x10>
 8012a58:	f7ff ffb0 	bl	80129bc <__sinit>
 8012a5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012a5e:	07db      	lsls	r3, r3, #31
 8012a60:	d405      	bmi.n	8012a6e <_puts_r+0x22>
 8012a62:	89a3      	ldrh	r3, [r4, #12]
 8012a64:	0598      	lsls	r0, r3, #22
 8012a66:	d402      	bmi.n	8012a6e <_puts_r+0x22>
 8012a68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012a6a:	f000 fa16 	bl	8012e9a <__retarget_lock_acquire_recursive>
 8012a6e:	89a3      	ldrh	r3, [r4, #12]
 8012a70:	0719      	lsls	r1, r3, #28
 8012a72:	d513      	bpl.n	8012a9c <_puts_r+0x50>
 8012a74:	6923      	ldr	r3, [r4, #16]
 8012a76:	b18b      	cbz	r3, 8012a9c <_puts_r+0x50>
 8012a78:	3e01      	subs	r6, #1
 8012a7a:	68a3      	ldr	r3, [r4, #8]
 8012a7c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012a80:	3b01      	subs	r3, #1
 8012a82:	60a3      	str	r3, [r4, #8]
 8012a84:	b9e9      	cbnz	r1, 8012ac2 <_puts_r+0x76>
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	da2e      	bge.n	8012ae8 <_puts_r+0x9c>
 8012a8a:	4622      	mov	r2, r4
 8012a8c:	210a      	movs	r1, #10
 8012a8e:	4628      	mov	r0, r5
 8012a90:	f000 f89b 	bl	8012bca <__swbuf_r>
 8012a94:	3001      	adds	r0, #1
 8012a96:	d007      	beq.n	8012aa8 <_puts_r+0x5c>
 8012a98:	250a      	movs	r5, #10
 8012a9a:	e007      	b.n	8012aac <_puts_r+0x60>
 8012a9c:	4621      	mov	r1, r4
 8012a9e:	4628      	mov	r0, r5
 8012aa0:	f000 f8d0 	bl	8012c44 <__swsetup_r>
 8012aa4:	2800      	cmp	r0, #0
 8012aa6:	d0e7      	beq.n	8012a78 <_puts_r+0x2c>
 8012aa8:	f04f 35ff 	mov.w	r5, #4294967295
 8012aac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012aae:	07da      	lsls	r2, r3, #31
 8012ab0:	d405      	bmi.n	8012abe <_puts_r+0x72>
 8012ab2:	89a3      	ldrh	r3, [r4, #12]
 8012ab4:	059b      	lsls	r3, r3, #22
 8012ab6:	d402      	bmi.n	8012abe <_puts_r+0x72>
 8012ab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012aba:	f000 f9ef 	bl	8012e9c <__retarget_lock_release_recursive>
 8012abe:	4628      	mov	r0, r5
 8012ac0:	bd70      	pop	{r4, r5, r6, pc}
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	da04      	bge.n	8012ad0 <_puts_r+0x84>
 8012ac6:	69a2      	ldr	r2, [r4, #24]
 8012ac8:	429a      	cmp	r2, r3
 8012aca:	dc06      	bgt.n	8012ada <_puts_r+0x8e>
 8012acc:	290a      	cmp	r1, #10
 8012ace:	d004      	beq.n	8012ada <_puts_r+0x8e>
 8012ad0:	6823      	ldr	r3, [r4, #0]
 8012ad2:	1c5a      	adds	r2, r3, #1
 8012ad4:	6022      	str	r2, [r4, #0]
 8012ad6:	7019      	strb	r1, [r3, #0]
 8012ad8:	e7cf      	b.n	8012a7a <_puts_r+0x2e>
 8012ada:	4622      	mov	r2, r4
 8012adc:	4628      	mov	r0, r5
 8012ade:	f000 f874 	bl	8012bca <__swbuf_r>
 8012ae2:	3001      	adds	r0, #1
 8012ae4:	d1c9      	bne.n	8012a7a <_puts_r+0x2e>
 8012ae6:	e7df      	b.n	8012aa8 <_puts_r+0x5c>
 8012ae8:	6823      	ldr	r3, [r4, #0]
 8012aea:	250a      	movs	r5, #10
 8012aec:	1c5a      	adds	r2, r3, #1
 8012aee:	6022      	str	r2, [r4, #0]
 8012af0:	701d      	strb	r5, [r3, #0]
 8012af2:	e7db      	b.n	8012aac <_puts_r+0x60>

08012af4 <puts>:
 8012af4:	4b02      	ldr	r3, [pc, #8]	; (8012b00 <puts+0xc>)
 8012af6:	4601      	mov	r1, r0
 8012af8:	6818      	ldr	r0, [r3, #0]
 8012afa:	f7ff bfa7 	b.w	8012a4c <_puts_r>
 8012afe:	bf00      	nop
 8012b00:	20000088 	.word	0x20000088

08012b04 <siprintf>:
 8012b04:	b40e      	push	{r1, r2, r3}
 8012b06:	b500      	push	{lr}
 8012b08:	b09c      	sub	sp, #112	; 0x70
 8012b0a:	ab1d      	add	r3, sp, #116	; 0x74
 8012b0c:	9002      	str	r0, [sp, #8]
 8012b0e:	9006      	str	r0, [sp, #24]
 8012b10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012b14:	4809      	ldr	r0, [pc, #36]	; (8012b3c <siprintf+0x38>)
 8012b16:	9107      	str	r1, [sp, #28]
 8012b18:	9104      	str	r1, [sp, #16]
 8012b1a:	4909      	ldr	r1, [pc, #36]	; (8012b40 <siprintf+0x3c>)
 8012b1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012b20:	9105      	str	r1, [sp, #20]
 8012b22:	6800      	ldr	r0, [r0, #0]
 8012b24:	9301      	str	r3, [sp, #4]
 8012b26:	a902      	add	r1, sp, #8
 8012b28:	f001 fd22 	bl	8014570 <_svfiprintf_r>
 8012b2c:	9b02      	ldr	r3, [sp, #8]
 8012b2e:	2200      	movs	r2, #0
 8012b30:	701a      	strb	r2, [r3, #0]
 8012b32:	b01c      	add	sp, #112	; 0x70
 8012b34:	f85d eb04 	ldr.w	lr, [sp], #4
 8012b38:	b003      	add	sp, #12
 8012b3a:	4770      	bx	lr
 8012b3c:	20000088 	.word	0x20000088
 8012b40:	ffff0208 	.word	0xffff0208

08012b44 <__sread>:
 8012b44:	b510      	push	{r4, lr}
 8012b46:	460c      	mov	r4, r1
 8012b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b4c:	f000 f956 	bl	8012dfc <_read_r>
 8012b50:	2800      	cmp	r0, #0
 8012b52:	bfab      	itete	ge
 8012b54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012b56:	89a3      	ldrhlt	r3, [r4, #12]
 8012b58:	181b      	addge	r3, r3, r0
 8012b5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012b5e:	bfac      	ite	ge
 8012b60:	6563      	strge	r3, [r4, #84]	; 0x54
 8012b62:	81a3      	strhlt	r3, [r4, #12]
 8012b64:	bd10      	pop	{r4, pc}

08012b66 <__swrite>:
 8012b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b6a:	461f      	mov	r7, r3
 8012b6c:	898b      	ldrh	r3, [r1, #12]
 8012b6e:	05db      	lsls	r3, r3, #23
 8012b70:	4605      	mov	r5, r0
 8012b72:	460c      	mov	r4, r1
 8012b74:	4616      	mov	r6, r2
 8012b76:	d505      	bpl.n	8012b84 <__swrite+0x1e>
 8012b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b7c:	2302      	movs	r3, #2
 8012b7e:	2200      	movs	r2, #0
 8012b80:	f000 f92a 	bl	8012dd8 <_lseek_r>
 8012b84:	89a3      	ldrh	r3, [r4, #12]
 8012b86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012b8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012b8e:	81a3      	strh	r3, [r4, #12]
 8012b90:	4632      	mov	r2, r6
 8012b92:	463b      	mov	r3, r7
 8012b94:	4628      	mov	r0, r5
 8012b96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012b9a:	f000 b941 	b.w	8012e20 <_write_r>

08012b9e <__sseek>:
 8012b9e:	b510      	push	{r4, lr}
 8012ba0:	460c      	mov	r4, r1
 8012ba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ba6:	f000 f917 	bl	8012dd8 <_lseek_r>
 8012baa:	1c43      	adds	r3, r0, #1
 8012bac:	89a3      	ldrh	r3, [r4, #12]
 8012bae:	bf15      	itete	ne
 8012bb0:	6560      	strne	r0, [r4, #84]	; 0x54
 8012bb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012bb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012bba:	81a3      	strheq	r3, [r4, #12]
 8012bbc:	bf18      	it	ne
 8012bbe:	81a3      	strhne	r3, [r4, #12]
 8012bc0:	bd10      	pop	{r4, pc}

08012bc2 <__sclose>:
 8012bc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012bc6:	f000 b8a1 	b.w	8012d0c <_close_r>

08012bca <__swbuf_r>:
 8012bca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bcc:	460e      	mov	r6, r1
 8012bce:	4614      	mov	r4, r2
 8012bd0:	4605      	mov	r5, r0
 8012bd2:	b118      	cbz	r0, 8012bdc <__swbuf_r+0x12>
 8012bd4:	6a03      	ldr	r3, [r0, #32]
 8012bd6:	b90b      	cbnz	r3, 8012bdc <__swbuf_r+0x12>
 8012bd8:	f7ff fef0 	bl	80129bc <__sinit>
 8012bdc:	69a3      	ldr	r3, [r4, #24]
 8012bde:	60a3      	str	r3, [r4, #8]
 8012be0:	89a3      	ldrh	r3, [r4, #12]
 8012be2:	071a      	lsls	r2, r3, #28
 8012be4:	d525      	bpl.n	8012c32 <__swbuf_r+0x68>
 8012be6:	6923      	ldr	r3, [r4, #16]
 8012be8:	b31b      	cbz	r3, 8012c32 <__swbuf_r+0x68>
 8012bea:	6823      	ldr	r3, [r4, #0]
 8012bec:	6922      	ldr	r2, [r4, #16]
 8012bee:	1a98      	subs	r0, r3, r2
 8012bf0:	6963      	ldr	r3, [r4, #20]
 8012bf2:	b2f6      	uxtb	r6, r6
 8012bf4:	4283      	cmp	r3, r0
 8012bf6:	4637      	mov	r7, r6
 8012bf8:	dc04      	bgt.n	8012c04 <__swbuf_r+0x3a>
 8012bfa:	4621      	mov	r1, r4
 8012bfc:	4628      	mov	r0, r5
 8012bfe:	f001 ff7f 	bl	8014b00 <_fflush_r>
 8012c02:	b9e0      	cbnz	r0, 8012c3e <__swbuf_r+0x74>
 8012c04:	68a3      	ldr	r3, [r4, #8]
 8012c06:	3b01      	subs	r3, #1
 8012c08:	60a3      	str	r3, [r4, #8]
 8012c0a:	6823      	ldr	r3, [r4, #0]
 8012c0c:	1c5a      	adds	r2, r3, #1
 8012c0e:	6022      	str	r2, [r4, #0]
 8012c10:	701e      	strb	r6, [r3, #0]
 8012c12:	6962      	ldr	r2, [r4, #20]
 8012c14:	1c43      	adds	r3, r0, #1
 8012c16:	429a      	cmp	r2, r3
 8012c18:	d004      	beq.n	8012c24 <__swbuf_r+0x5a>
 8012c1a:	89a3      	ldrh	r3, [r4, #12]
 8012c1c:	07db      	lsls	r3, r3, #31
 8012c1e:	d506      	bpl.n	8012c2e <__swbuf_r+0x64>
 8012c20:	2e0a      	cmp	r6, #10
 8012c22:	d104      	bne.n	8012c2e <__swbuf_r+0x64>
 8012c24:	4621      	mov	r1, r4
 8012c26:	4628      	mov	r0, r5
 8012c28:	f001 ff6a 	bl	8014b00 <_fflush_r>
 8012c2c:	b938      	cbnz	r0, 8012c3e <__swbuf_r+0x74>
 8012c2e:	4638      	mov	r0, r7
 8012c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c32:	4621      	mov	r1, r4
 8012c34:	4628      	mov	r0, r5
 8012c36:	f000 f805 	bl	8012c44 <__swsetup_r>
 8012c3a:	2800      	cmp	r0, #0
 8012c3c:	d0d5      	beq.n	8012bea <__swbuf_r+0x20>
 8012c3e:	f04f 37ff 	mov.w	r7, #4294967295
 8012c42:	e7f4      	b.n	8012c2e <__swbuf_r+0x64>

08012c44 <__swsetup_r>:
 8012c44:	b538      	push	{r3, r4, r5, lr}
 8012c46:	4b2a      	ldr	r3, [pc, #168]	; (8012cf0 <__swsetup_r+0xac>)
 8012c48:	4605      	mov	r5, r0
 8012c4a:	6818      	ldr	r0, [r3, #0]
 8012c4c:	460c      	mov	r4, r1
 8012c4e:	b118      	cbz	r0, 8012c58 <__swsetup_r+0x14>
 8012c50:	6a03      	ldr	r3, [r0, #32]
 8012c52:	b90b      	cbnz	r3, 8012c58 <__swsetup_r+0x14>
 8012c54:	f7ff feb2 	bl	80129bc <__sinit>
 8012c58:	89a3      	ldrh	r3, [r4, #12]
 8012c5a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012c5e:	0718      	lsls	r0, r3, #28
 8012c60:	d422      	bmi.n	8012ca8 <__swsetup_r+0x64>
 8012c62:	06d9      	lsls	r1, r3, #27
 8012c64:	d407      	bmi.n	8012c76 <__swsetup_r+0x32>
 8012c66:	2309      	movs	r3, #9
 8012c68:	602b      	str	r3, [r5, #0]
 8012c6a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012c6e:	81a3      	strh	r3, [r4, #12]
 8012c70:	f04f 30ff 	mov.w	r0, #4294967295
 8012c74:	e034      	b.n	8012ce0 <__swsetup_r+0x9c>
 8012c76:	0758      	lsls	r0, r3, #29
 8012c78:	d512      	bpl.n	8012ca0 <__swsetup_r+0x5c>
 8012c7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012c7c:	b141      	cbz	r1, 8012c90 <__swsetup_r+0x4c>
 8012c7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012c82:	4299      	cmp	r1, r3
 8012c84:	d002      	beq.n	8012c8c <__swsetup_r+0x48>
 8012c86:	4628      	mov	r0, r5
 8012c88:	f000 ff94 	bl	8013bb4 <_free_r>
 8012c8c:	2300      	movs	r3, #0
 8012c8e:	6363      	str	r3, [r4, #52]	; 0x34
 8012c90:	89a3      	ldrh	r3, [r4, #12]
 8012c92:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012c96:	81a3      	strh	r3, [r4, #12]
 8012c98:	2300      	movs	r3, #0
 8012c9a:	6063      	str	r3, [r4, #4]
 8012c9c:	6923      	ldr	r3, [r4, #16]
 8012c9e:	6023      	str	r3, [r4, #0]
 8012ca0:	89a3      	ldrh	r3, [r4, #12]
 8012ca2:	f043 0308 	orr.w	r3, r3, #8
 8012ca6:	81a3      	strh	r3, [r4, #12]
 8012ca8:	6923      	ldr	r3, [r4, #16]
 8012caa:	b94b      	cbnz	r3, 8012cc0 <__swsetup_r+0x7c>
 8012cac:	89a3      	ldrh	r3, [r4, #12]
 8012cae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012cb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012cb6:	d003      	beq.n	8012cc0 <__swsetup_r+0x7c>
 8012cb8:	4621      	mov	r1, r4
 8012cba:	4628      	mov	r0, r5
 8012cbc:	f001 ff6e 	bl	8014b9c <__smakebuf_r>
 8012cc0:	89a0      	ldrh	r0, [r4, #12]
 8012cc2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012cc6:	f010 0301 	ands.w	r3, r0, #1
 8012cca:	d00a      	beq.n	8012ce2 <__swsetup_r+0x9e>
 8012ccc:	2300      	movs	r3, #0
 8012cce:	60a3      	str	r3, [r4, #8]
 8012cd0:	6963      	ldr	r3, [r4, #20]
 8012cd2:	425b      	negs	r3, r3
 8012cd4:	61a3      	str	r3, [r4, #24]
 8012cd6:	6923      	ldr	r3, [r4, #16]
 8012cd8:	b943      	cbnz	r3, 8012cec <__swsetup_r+0xa8>
 8012cda:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012cde:	d1c4      	bne.n	8012c6a <__swsetup_r+0x26>
 8012ce0:	bd38      	pop	{r3, r4, r5, pc}
 8012ce2:	0781      	lsls	r1, r0, #30
 8012ce4:	bf58      	it	pl
 8012ce6:	6963      	ldrpl	r3, [r4, #20]
 8012ce8:	60a3      	str	r3, [r4, #8]
 8012cea:	e7f4      	b.n	8012cd6 <__swsetup_r+0x92>
 8012cec:	2000      	movs	r0, #0
 8012cee:	e7f7      	b.n	8012ce0 <__swsetup_r+0x9c>
 8012cf0:	20000088 	.word	0x20000088

08012cf4 <memset>:
 8012cf4:	4402      	add	r2, r0
 8012cf6:	4603      	mov	r3, r0
 8012cf8:	4293      	cmp	r3, r2
 8012cfa:	d100      	bne.n	8012cfe <memset+0xa>
 8012cfc:	4770      	bx	lr
 8012cfe:	f803 1b01 	strb.w	r1, [r3], #1
 8012d02:	e7f9      	b.n	8012cf8 <memset+0x4>

08012d04 <_localeconv_r>:
 8012d04:	4800      	ldr	r0, [pc, #0]	; (8012d08 <_localeconv_r+0x4>)
 8012d06:	4770      	bx	lr
 8012d08:	2000017c 	.word	0x2000017c

08012d0c <_close_r>:
 8012d0c:	b538      	push	{r3, r4, r5, lr}
 8012d0e:	4d06      	ldr	r5, [pc, #24]	; (8012d28 <_close_r+0x1c>)
 8012d10:	2300      	movs	r3, #0
 8012d12:	4604      	mov	r4, r0
 8012d14:	4608      	mov	r0, r1
 8012d16:	602b      	str	r3, [r5, #0]
 8012d18:	f7f5 fc73 	bl	8008602 <_close>
 8012d1c:	1c43      	adds	r3, r0, #1
 8012d1e:	d102      	bne.n	8012d26 <_close_r+0x1a>
 8012d20:	682b      	ldr	r3, [r5, #0]
 8012d22:	b103      	cbz	r3, 8012d26 <_close_r+0x1a>
 8012d24:	6023      	str	r3, [r4, #0]
 8012d26:	bd38      	pop	{r3, r4, r5, pc}
 8012d28:	20008150 	.word	0x20008150

08012d2c <_reclaim_reent>:
 8012d2c:	4b29      	ldr	r3, [pc, #164]	; (8012dd4 <_reclaim_reent+0xa8>)
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	4283      	cmp	r3, r0
 8012d32:	b570      	push	{r4, r5, r6, lr}
 8012d34:	4604      	mov	r4, r0
 8012d36:	d04b      	beq.n	8012dd0 <_reclaim_reent+0xa4>
 8012d38:	69c3      	ldr	r3, [r0, #28]
 8012d3a:	b143      	cbz	r3, 8012d4e <_reclaim_reent+0x22>
 8012d3c:	68db      	ldr	r3, [r3, #12]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d144      	bne.n	8012dcc <_reclaim_reent+0xa0>
 8012d42:	69e3      	ldr	r3, [r4, #28]
 8012d44:	6819      	ldr	r1, [r3, #0]
 8012d46:	b111      	cbz	r1, 8012d4e <_reclaim_reent+0x22>
 8012d48:	4620      	mov	r0, r4
 8012d4a:	f000 ff33 	bl	8013bb4 <_free_r>
 8012d4e:	6961      	ldr	r1, [r4, #20]
 8012d50:	b111      	cbz	r1, 8012d58 <_reclaim_reent+0x2c>
 8012d52:	4620      	mov	r0, r4
 8012d54:	f000 ff2e 	bl	8013bb4 <_free_r>
 8012d58:	69e1      	ldr	r1, [r4, #28]
 8012d5a:	b111      	cbz	r1, 8012d62 <_reclaim_reent+0x36>
 8012d5c:	4620      	mov	r0, r4
 8012d5e:	f000 ff29 	bl	8013bb4 <_free_r>
 8012d62:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012d64:	b111      	cbz	r1, 8012d6c <_reclaim_reent+0x40>
 8012d66:	4620      	mov	r0, r4
 8012d68:	f000 ff24 	bl	8013bb4 <_free_r>
 8012d6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012d6e:	b111      	cbz	r1, 8012d76 <_reclaim_reent+0x4a>
 8012d70:	4620      	mov	r0, r4
 8012d72:	f000 ff1f 	bl	8013bb4 <_free_r>
 8012d76:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012d78:	b111      	cbz	r1, 8012d80 <_reclaim_reent+0x54>
 8012d7a:	4620      	mov	r0, r4
 8012d7c:	f000 ff1a 	bl	8013bb4 <_free_r>
 8012d80:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012d82:	b111      	cbz	r1, 8012d8a <_reclaim_reent+0x5e>
 8012d84:	4620      	mov	r0, r4
 8012d86:	f000 ff15 	bl	8013bb4 <_free_r>
 8012d8a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8012d8c:	b111      	cbz	r1, 8012d94 <_reclaim_reent+0x68>
 8012d8e:	4620      	mov	r0, r4
 8012d90:	f000 ff10 	bl	8013bb4 <_free_r>
 8012d94:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8012d96:	b111      	cbz	r1, 8012d9e <_reclaim_reent+0x72>
 8012d98:	4620      	mov	r0, r4
 8012d9a:	f000 ff0b 	bl	8013bb4 <_free_r>
 8012d9e:	6a23      	ldr	r3, [r4, #32]
 8012da0:	b1b3      	cbz	r3, 8012dd0 <_reclaim_reent+0xa4>
 8012da2:	4620      	mov	r0, r4
 8012da4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012da8:	4718      	bx	r3
 8012daa:	5949      	ldr	r1, [r1, r5]
 8012dac:	b941      	cbnz	r1, 8012dc0 <_reclaim_reent+0x94>
 8012dae:	3504      	adds	r5, #4
 8012db0:	69e3      	ldr	r3, [r4, #28]
 8012db2:	2d80      	cmp	r5, #128	; 0x80
 8012db4:	68d9      	ldr	r1, [r3, #12]
 8012db6:	d1f8      	bne.n	8012daa <_reclaim_reent+0x7e>
 8012db8:	4620      	mov	r0, r4
 8012dba:	f000 fefb 	bl	8013bb4 <_free_r>
 8012dbe:	e7c0      	b.n	8012d42 <_reclaim_reent+0x16>
 8012dc0:	680e      	ldr	r6, [r1, #0]
 8012dc2:	4620      	mov	r0, r4
 8012dc4:	f000 fef6 	bl	8013bb4 <_free_r>
 8012dc8:	4631      	mov	r1, r6
 8012dca:	e7ef      	b.n	8012dac <_reclaim_reent+0x80>
 8012dcc:	2500      	movs	r5, #0
 8012dce:	e7ef      	b.n	8012db0 <_reclaim_reent+0x84>
 8012dd0:	bd70      	pop	{r4, r5, r6, pc}
 8012dd2:	bf00      	nop
 8012dd4:	20000088 	.word	0x20000088

08012dd8 <_lseek_r>:
 8012dd8:	b538      	push	{r3, r4, r5, lr}
 8012dda:	4d07      	ldr	r5, [pc, #28]	; (8012df8 <_lseek_r+0x20>)
 8012ddc:	4604      	mov	r4, r0
 8012dde:	4608      	mov	r0, r1
 8012de0:	4611      	mov	r1, r2
 8012de2:	2200      	movs	r2, #0
 8012de4:	602a      	str	r2, [r5, #0]
 8012de6:	461a      	mov	r2, r3
 8012de8:	f7f5 fc32 	bl	8008650 <_lseek>
 8012dec:	1c43      	adds	r3, r0, #1
 8012dee:	d102      	bne.n	8012df6 <_lseek_r+0x1e>
 8012df0:	682b      	ldr	r3, [r5, #0]
 8012df2:	b103      	cbz	r3, 8012df6 <_lseek_r+0x1e>
 8012df4:	6023      	str	r3, [r4, #0]
 8012df6:	bd38      	pop	{r3, r4, r5, pc}
 8012df8:	20008150 	.word	0x20008150

08012dfc <_read_r>:
 8012dfc:	b538      	push	{r3, r4, r5, lr}
 8012dfe:	4d07      	ldr	r5, [pc, #28]	; (8012e1c <_read_r+0x20>)
 8012e00:	4604      	mov	r4, r0
 8012e02:	4608      	mov	r0, r1
 8012e04:	4611      	mov	r1, r2
 8012e06:	2200      	movs	r2, #0
 8012e08:	602a      	str	r2, [r5, #0]
 8012e0a:	461a      	mov	r2, r3
 8012e0c:	f7f5 fbc0 	bl	8008590 <_read>
 8012e10:	1c43      	adds	r3, r0, #1
 8012e12:	d102      	bne.n	8012e1a <_read_r+0x1e>
 8012e14:	682b      	ldr	r3, [r5, #0]
 8012e16:	b103      	cbz	r3, 8012e1a <_read_r+0x1e>
 8012e18:	6023      	str	r3, [r4, #0]
 8012e1a:	bd38      	pop	{r3, r4, r5, pc}
 8012e1c:	20008150 	.word	0x20008150

08012e20 <_write_r>:
 8012e20:	b538      	push	{r3, r4, r5, lr}
 8012e22:	4d07      	ldr	r5, [pc, #28]	; (8012e40 <_write_r+0x20>)
 8012e24:	4604      	mov	r4, r0
 8012e26:	4608      	mov	r0, r1
 8012e28:	4611      	mov	r1, r2
 8012e2a:	2200      	movs	r2, #0
 8012e2c:	602a      	str	r2, [r5, #0]
 8012e2e:	461a      	mov	r2, r3
 8012e30:	f7f5 fbcb 	bl	80085ca <_write>
 8012e34:	1c43      	adds	r3, r0, #1
 8012e36:	d102      	bne.n	8012e3e <_write_r+0x1e>
 8012e38:	682b      	ldr	r3, [r5, #0]
 8012e3a:	b103      	cbz	r3, 8012e3e <_write_r+0x1e>
 8012e3c:	6023      	str	r3, [r4, #0]
 8012e3e:	bd38      	pop	{r3, r4, r5, pc}
 8012e40:	20008150 	.word	0x20008150

08012e44 <__errno>:
 8012e44:	4b01      	ldr	r3, [pc, #4]	; (8012e4c <__errno+0x8>)
 8012e46:	6818      	ldr	r0, [r3, #0]
 8012e48:	4770      	bx	lr
 8012e4a:	bf00      	nop
 8012e4c:	20000088 	.word	0x20000088

08012e50 <__libc_init_array>:
 8012e50:	b570      	push	{r4, r5, r6, lr}
 8012e52:	4d0d      	ldr	r5, [pc, #52]	; (8012e88 <__libc_init_array+0x38>)
 8012e54:	4c0d      	ldr	r4, [pc, #52]	; (8012e8c <__libc_init_array+0x3c>)
 8012e56:	1b64      	subs	r4, r4, r5
 8012e58:	10a4      	asrs	r4, r4, #2
 8012e5a:	2600      	movs	r6, #0
 8012e5c:	42a6      	cmp	r6, r4
 8012e5e:	d109      	bne.n	8012e74 <__libc_init_array+0x24>
 8012e60:	4d0b      	ldr	r5, [pc, #44]	; (8012e90 <__libc_init_array+0x40>)
 8012e62:	4c0c      	ldr	r4, [pc, #48]	; (8012e94 <__libc_init_array+0x44>)
 8012e64:	f001 ffd4 	bl	8014e10 <_init>
 8012e68:	1b64      	subs	r4, r4, r5
 8012e6a:	10a4      	asrs	r4, r4, #2
 8012e6c:	2600      	movs	r6, #0
 8012e6e:	42a6      	cmp	r6, r4
 8012e70:	d105      	bne.n	8012e7e <__libc_init_array+0x2e>
 8012e72:	bd70      	pop	{r4, r5, r6, pc}
 8012e74:	f855 3b04 	ldr.w	r3, [r5], #4
 8012e78:	4798      	blx	r3
 8012e7a:	3601      	adds	r6, #1
 8012e7c:	e7ee      	b.n	8012e5c <__libc_init_array+0xc>
 8012e7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012e82:	4798      	blx	r3
 8012e84:	3601      	adds	r6, #1
 8012e86:	e7f2      	b.n	8012e6e <__libc_init_array+0x1e>
 8012e88:	08015bdc 	.word	0x08015bdc
 8012e8c:	08015bdc 	.word	0x08015bdc
 8012e90:	08015bdc 	.word	0x08015bdc
 8012e94:	08015be4 	.word	0x08015be4

08012e98 <__retarget_lock_init_recursive>:
 8012e98:	4770      	bx	lr

08012e9a <__retarget_lock_acquire_recursive>:
 8012e9a:	4770      	bx	lr

08012e9c <__retarget_lock_release_recursive>:
 8012e9c:	4770      	bx	lr

08012e9e <memcpy>:
 8012e9e:	440a      	add	r2, r1
 8012ea0:	4291      	cmp	r1, r2
 8012ea2:	f100 33ff 	add.w	r3, r0, #4294967295
 8012ea6:	d100      	bne.n	8012eaa <memcpy+0xc>
 8012ea8:	4770      	bx	lr
 8012eaa:	b510      	push	{r4, lr}
 8012eac:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012eb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012eb4:	4291      	cmp	r1, r2
 8012eb6:	d1f9      	bne.n	8012eac <memcpy+0xe>
 8012eb8:	bd10      	pop	{r4, pc}

08012eba <quorem>:
 8012eba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ebe:	6903      	ldr	r3, [r0, #16]
 8012ec0:	690c      	ldr	r4, [r1, #16]
 8012ec2:	42a3      	cmp	r3, r4
 8012ec4:	4607      	mov	r7, r0
 8012ec6:	db7e      	blt.n	8012fc6 <quorem+0x10c>
 8012ec8:	3c01      	subs	r4, #1
 8012eca:	f101 0814 	add.w	r8, r1, #20
 8012ece:	f100 0514 	add.w	r5, r0, #20
 8012ed2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012ed6:	9301      	str	r3, [sp, #4]
 8012ed8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012edc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012ee0:	3301      	adds	r3, #1
 8012ee2:	429a      	cmp	r2, r3
 8012ee4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012ee8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012eec:	fbb2 f6f3 	udiv	r6, r2, r3
 8012ef0:	d331      	bcc.n	8012f56 <quorem+0x9c>
 8012ef2:	f04f 0e00 	mov.w	lr, #0
 8012ef6:	4640      	mov	r0, r8
 8012ef8:	46ac      	mov	ip, r5
 8012efa:	46f2      	mov	sl, lr
 8012efc:	f850 2b04 	ldr.w	r2, [r0], #4
 8012f00:	b293      	uxth	r3, r2
 8012f02:	fb06 e303 	mla	r3, r6, r3, lr
 8012f06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012f0a:	0c1a      	lsrs	r2, r3, #16
 8012f0c:	b29b      	uxth	r3, r3
 8012f0e:	ebaa 0303 	sub.w	r3, sl, r3
 8012f12:	f8dc a000 	ldr.w	sl, [ip]
 8012f16:	fa13 f38a 	uxtah	r3, r3, sl
 8012f1a:	fb06 220e 	mla	r2, r6, lr, r2
 8012f1e:	9300      	str	r3, [sp, #0]
 8012f20:	9b00      	ldr	r3, [sp, #0]
 8012f22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012f26:	b292      	uxth	r2, r2
 8012f28:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012f2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012f30:	f8bd 3000 	ldrh.w	r3, [sp]
 8012f34:	4581      	cmp	r9, r0
 8012f36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012f3a:	f84c 3b04 	str.w	r3, [ip], #4
 8012f3e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012f42:	d2db      	bcs.n	8012efc <quorem+0x42>
 8012f44:	f855 300b 	ldr.w	r3, [r5, fp]
 8012f48:	b92b      	cbnz	r3, 8012f56 <quorem+0x9c>
 8012f4a:	9b01      	ldr	r3, [sp, #4]
 8012f4c:	3b04      	subs	r3, #4
 8012f4e:	429d      	cmp	r5, r3
 8012f50:	461a      	mov	r2, r3
 8012f52:	d32c      	bcc.n	8012fae <quorem+0xf4>
 8012f54:	613c      	str	r4, [r7, #16]
 8012f56:	4638      	mov	r0, r7
 8012f58:	f001 f9a8 	bl	80142ac <__mcmp>
 8012f5c:	2800      	cmp	r0, #0
 8012f5e:	db22      	blt.n	8012fa6 <quorem+0xec>
 8012f60:	3601      	adds	r6, #1
 8012f62:	4629      	mov	r1, r5
 8012f64:	2000      	movs	r0, #0
 8012f66:	f858 2b04 	ldr.w	r2, [r8], #4
 8012f6a:	f8d1 c000 	ldr.w	ip, [r1]
 8012f6e:	b293      	uxth	r3, r2
 8012f70:	1ac3      	subs	r3, r0, r3
 8012f72:	0c12      	lsrs	r2, r2, #16
 8012f74:	fa13 f38c 	uxtah	r3, r3, ip
 8012f78:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8012f7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012f80:	b29b      	uxth	r3, r3
 8012f82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012f86:	45c1      	cmp	r9, r8
 8012f88:	f841 3b04 	str.w	r3, [r1], #4
 8012f8c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012f90:	d2e9      	bcs.n	8012f66 <quorem+0xac>
 8012f92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012f96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012f9a:	b922      	cbnz	r2, 8012fa6 <quorem+0xec>
 8012f9c:	3b04      	subs	r3, #4
 8012f9e:	429d      	cmp	r5, r3
 8012fa0:	461a      	mov	r2, r3
 8012fa2:	d30a      	bcc.n	8012fba <quorem+0x100>
 8012fa4:	613c      	str	r4, [r7, #16]
 8012fa6:	4630      	mov	r0, r6
 8012fa8:	b003      	add	sp, #12
 8012faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fae:	6812      	ldr	r2, [r2, #0]
 8012fb0:	3b04      	subs	r3, #4
 8012fb2:	2a00      	cmp	r2, #0
 8012fb4:	d1ce      	bne.n	8012f54 <quorem+0x9a>
 8012fb6:	3c01      	subs	r4, #1
 8012fb8:	e7c9      	b.n	8012f4e <quorem+0x94>
 8012fba:	6812      	ldr	r2, [r2, #0]
 8012fbc:	3b04      	subs	r3, #4
 8012fbe:	2a00      	cmp	r2, #0
 8012fc0:	d1f0      	bne.n	8012fa4 <quorem+0xea>
 8012fc2:	3c01      	subs	r4, #1
 8012fc4:	e7eb      	b.n	8012f9e <quorem+0xe4>
 8012fc6:	2000      	movs	r0, #0
 8012fc8:	e7ee      	b.n	8012fa8 <quorem+0xee>
 8012fca:	0000      	movs	r0, r0
 8012fcc:	0000      	movs	r0, r0
	...

08012fd0 <_dtoa_r>:
 8012fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fd4:	ed2d 8b04 	vpush	{d8-d9}
 8012fd8:	69c5      	ldr	r5, [r0, #28]
 8012fda:	b093      	sub	sp, #76	; 0x4c
 8012fdc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012fe0:	ec57 6b10 	vmov	r6, r7, d0
 8012fe4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012fe8:	9107      	str	r1, [sp, #28]
 8012fea:	4604      	mov	r4, r0
 8012fec:	920a      	str	r2, [sp, #40]	; 0x28
 8012fee:	930d      	str	r3, [sp, #52]	; 0x34
 8012ff0:	b975      	cbnz	r5, 8013010 <_dtoa_r+0x40>
 8012ff2:	2010      	movs	r0, #16
 8012ff4:	f000 fe2a 	bl	8013c4c <malloc>
 8012ff8:	4602      	mov	r2, r0
 8012ffa:	61e0      	str	r0, [r4, #28]
 8012ffc:	b920      	cbnz	r0, 8013008 <_dtoa_r+0x38>
 8012ffe:	4bae      	ldr	r3, [pc, #696]	; (80132b8 <_dtoa_r+0x2e8>)
 8013000:	21ef      	movs	r1, #239	; 0xef
 8013002:	48ae      	ldr	r0, [pc, #696]	; (80132bc <_dtoa_r+0x2ec>)
 8013004:	f001 fe52 	bl	8014cac <__assert_func>
 8013008:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801300c:	6005      	str	r5, [r0, #0]
 801300e:	60c5      	str	r5, [r0, #12]
 8013010:	69e3      	ldr	r3, [r4, #28]
 8013012:	6819      	ldr	r1, [r3, #0]
 8013014:	b151      	cbz	r1, 801302c <_dtoa_r+0x5c>
 8013016:	685a      	ldr	r2, [r3, #4]
 8013018:	604a      	str	r2, [r1, #4]
 801301a:	2301      	movs	r3, #1
 801301c:	4093      	lsls	r3, r2
 801301e:	608b      	str	r3, [r1, #8]
 8013020:	4620      	mov	r0, r4
 8013022:	f000 ff07 	bl	8013e34 <_Bfree>
 8013026:	69e3      	ldr	r3, [r4, #28]
 8013028:	2200      	movs	r2, #0
 801302a:	601a      	str	r2, [r3, #0]
 801302c:	1e3b      	subs	r3, r7, #0
 801302e:	bfbb      	ittet	lt
 8013030:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013034:	9303      	strlt	r3, [sp, #12]
 8013036:	2300      	movge	r3, #0
 8013038:	2201      	movlt	r2, #1
 801303a:	bfac      	ite	ge
 801303c:	f8c8 3000 	strge.w	r3, [r8]
 8013040:	f8c8 2000 	strlt.w	r2, [r8]
 8013044:	4b9e      	ldr	r3, [pc, #632]	; (80132c0 <_dtoa_r+0x2f0>)
 8013046:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801304a:	ea33 0308 	bics.w	r3, r3, r8
 801304e:	d11b      	bne.n	8013088 <_dtoa_r+0xb8>
 8013050:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013052:	f242 730f 	movw	r3, #9999	; 0x270f
 8013056:	6013      	str	r3, [r2, #0]
 8013058:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801305c:	4333      	orrs	r3, r6
 801305e:	f000 8593 	beq.w	8013b88 <_dtoa_r+0xbb8>
 8013062:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013064:	b963      	cbnz	r3, 8013080 <_dtoa_r+0xb0>
 8013066:	4b97      	ldr	r3, [pc, #604]	; (80132c4 <_dtoa_r+0x2f4>)
 8013068:	e027      	b.n	80130ba <_dtoa_r+0xea>
 801306a:	4b97      	ldr	r3, [pc, #604]	; (80132c8 <_dtoa_r+0x2f8>)
 801306c:	9300      	str	r3, [sp, #0]
 801306e:	3308      	adds	r3, #8
 8013070:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013072:	6013      	str	r3, [r2, #0]
 8013074:	9800      	ldr	r0, [sp, #0]
 8013076:	b013      	add	sp, #76	; 0x4c
 8013078:	ecbd 8b04 	vpop	{d8-d9}
 801307c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013080:	4b90      	ldr	r3, [pc, #576]	; (80132c4 <_dtoa_r+0x2f4>)
 8013082:	9300      	str	r3, [sp, #0]
 8013084:	3303      	adds	r3, #3
 8013086:	e7f3      	b.n	8013070 <_dtoa_r+0xa0>
 8013088:	ed9d 7b02 	vldr	d7, [sp, #8]
 801308c:	2200      	movs	r2, #0
 801308e:	ec51 0b17 	vmov	r0, r1, d7
 8013092:	eeb0 8a47 	vmov.f32	s16, s14
 8013096:	eef0 8a67 	vmov.f32	s17, s15
 801309a:	2300      	movs	r3, #0
 801309c:	f7ed fd24 	bl	8000ae8 <__aeabi_dcmpeq>
 80130a0:	4681      	mov	r9, r0
 80130a2:	b160      	cbz	r0, 80130be <_dtoa_r+0xee>
 80130a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80130a6:	2301      	movs	r3, #1
 80130a8:	6013      	str	r3, [r2, #0]
 80130aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	f000 8568 	beq.w	8013b82 <_dtoa_r+0xbb2>
 80130b2:	4b86      	ldr	r3, [pc, #536]	; (80132cc <_dtoa_r+0x2fc>)
 80130b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80130b6:	6013      	str	r3, [r2, #0]
 80130b8:	3b01      	subs	r3, #1
 80130ba:	9300      	str	r3, [sp, #0]
 80130bc:	e7da      	b.n	8013074 <_dtoa_r+0xa4>
 80130be:	aa10      	add	r2, sp, #64	; 0x40
 80130c0:	a911      	add	r1, sp, #68	; 0x44
 80130c2:	4620      	mov	r0, r4
 80130c4:	eeb0 0a48 	vmov.f32	s0, s16
 80130c8:	eef0 0a68 	vmov.f32	s1, s17
 80130cc:	f001 f994 	bl	80143f8 <__d2b>
 80130d0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80130d4:	4682      	mov	sl, r0
 80130d6:	2d00      	cmp	r5, #0
 80130d8:	d07f      	beq.n	80131da <_dtoa_r+0x20a>
 80130da:	ee18 3a90 	vmov	r3, s17
 80130de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80130e2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80130e6:	ec51 0b18 	vmov	r0, r1, d8
 80130ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80130ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80130f2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80130f6:	4619      	mov	r1, r3
 80130f8:	2200      	movs	r2, #0
 80130fa:	4b75      	ldr	r3, [pc, #468]	; (80132d0 <_dtoa_r+0x300>)
 80130fc:	f7ed f8d4 	bl	80002a8 <__aeabi_dsub>
 8013100:	a367      	add	r3, pc, #412	; (adr r3, 80132a0 <_dtoa_r+0x2d0>)
 8013102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013106:	f7ed fa87 	bl	8000618 <__aeabi_dmul>
 801310a:	a367      	add	r3, pc, #412	; (adr r3, 80132a8 <_dtoa_r+0x2d8>)
 801310c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013110:	f7ed f8cc 	bl	80002ac <__adddf3>
 8013114:	4606      	mov	r6, r0
 8013116:	4628      	mov	r0, r5
 8013118:	460f      	mov	r7, r1
 801311a:	f7ed fa13 	bl	8000544 <__aeabi_i2d>
 801311e:	a364      	add	r3, pc, #400	; (adr r3, 80132b0 <_dtoa_r+0x2e0>)
 8013120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013124:	f7ed fa78 	bl	8000618 <__aeabi_dmul>
 8013128:	4602      	mov	r2, r0
 801312a:	460b      	mov	r3, r1
 801312c:	4630      	mov	r0, r6
 801312e:	4639      	mov	r1, r7
 8013130:	f7ed f8bc 	bl	80002ac <__adddf3>
 8013134:	4606      	mov	r6, r0
 8013136:	460f      	mov	r7, r1
 8013138:	f7ed fd1e 	bl	8000b78 <__aeabi_d2iz>
 801313c:	2200      	movs	r2, #0
 801313e:	4683      	mov	fp, r0
 8013140:	2300      	movs	r3, #0
 8013142:	4630      	mov	r0, r6
 8013144:	4639      	mov	r1, r7
 8013146:	f7ed fcd9 	bl	8000afc <__aeabi_dcmplt>
 801314a:	b148      	cbz	r0, 8013160 <_dtoa_r+0x190>
 801314c:	4658      	mov	r0, fp
 801314e:	f7ed f9f9 	bl	8000544 <__aeabi_i2d>
 8013152:	4632      	mov	r2, r6
 8013154:	463b      	mov	r3, r7
 8013156:	f7ed fcc7 	bl	8000ae8 <__aeabi_dcmpeq>
 801315a:	b908      	cbnz	r0, 8013160 <_dtoa_r+0x190>
 801315c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013160:	f1bb 0f16 	cmp.w	fp, #22
 8013164:	d857      	bhi.n	8013216 <_dtoa_r+0x246>
 8013166:	4b5b      	ldr	r3, [pc, #364]	; (80132d4 <_dtoa_r+0x304>)
 8013168:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801316c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013170:	ec51 0b18 	vmov	r0, r1, d8
 8013174:	f7ed fcc2 	bl	8000afc <__aeabi_dcmplt>
 8013178:	2800      	cmp	r0, #0
 801317a:	d04e      	beq.n	801321a <_dtoa_r+0x24a>
 801317c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013180:	2300      	movs	r3, #0
 8013182:	930c      	str	r3, [sp, #48]	; 0x30
 8013184:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013186:	1b5b      	subs	r3, r3, r5
 8013188:	1e5a      	subs	r2, r3, #1
 801318a:	bf45      	ittet	mi
 801318c:	f1c3 0301 	rsbmi	r3, r3, #1
 8013190:	9305      	strmi	r3, [sp, #20]
 8013192:	2300      	movpl	r3, #0
 8013194:	2300      	movmi	r3, #0
 8013196:	9206      	str	r2, [sp, #24]
 8013198:	bf54      	ite	pl
 801319a:	9305      	strpl	r3, [sp, #20]
 801319c:	9306      	strmi	r3, [sp, #24]
 801319e:	f1bb 0f00 	cmp.w	fp, #0
 80131a2:	db3c      	blt.n	801321e <_dtoa_r+0x24e>
 80131a4:	9b06      	ldr	r3, [sp, #24]
 80131a6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80131aa:	445b      	add	r3, fp
 80131ac:	9306      	str	r3, [sp, #24]
 80131ae:	2300      	movs	r3, #0
 80131b0:	9308      	str	r3, [sp, #32]
 80131b2:	9b07      	ldr	r3, [sp, #28]
 80131b4:	2b09      	cmp	r3, #9
 80131b6:	d868      	bhi.n	801328a <_dtoa_r+0x2ba>
 80131b8:	2b05      	cmp	r3, #5
 80131ba:	bfc4      	itt	gt
 80131bc:	3b04      	subgt	r3, #4
 80131be:	9307      	strgt	r3, [sp, #28]
 80131c0:	9b07      	ldr	r3, [sp, #28]
 80131c2:	f1a3 0302 	sub.w	r3, r3, #2
 80131c6:	bfcc      	ite	gt
 80131c8:	2500      	movgt	r5, #0
 80131ca:	2501      	movle	r5, #1
 80131cc:	2b03      	cmp	r3, #3
 80131ce:	f200 8085 	bhi.w	80132dc <_dtoa_r+0x30c>
 80131d2:	e8df f003 	tbb	[pc, r3]
 80131d6:	3b2e      	.short	0x3b2e
 80131d8:	5839      	.short	0x5839
 80131da:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80131de:	441d      	add	r5, r3
 80131e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80131e4:	2b20      	cmp	r3, #32
 80131e6:	bfc1      	itttt	gt
 80131e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80131ec:	fa08 f803 	lslgt.w	r8, r8, r3
 80131f0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80131f4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80131f8:	bfd6      	itet	le
 80131fa:	f1c3 0320 	rsble	r3, r3, #32
 80131fe:	ea48 0003 	orrgt.w	r0, r8, r3
 8013202:	fa06 f003 	lslle.w	r0, r6, r3
 8013206:	f7ed f98d 	bl	8000524 <__aeabi_ui2d>
 801320a:	2201      	movs	r2, #1
 801320c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8013210:	3d01      	subs	r5, #1
 8013212:	920e      	str	r2, [sp, #56]	; 0x38
 8013214:	e76f      	b.n	80130f6 <_dtoa_r+0x126>
 8013216:	2301      	movs	r3, #1
 8013218:	e7b3      	b.n	8013182 <_dtoa_r+0x1b2>
 801321a:	900c      	str	r0, [sp, #48]	; 0x30
 801321c:	e7b2      	b.n	8013184 <_dtoa_r+0x1b4>
 801321e:	9b05      	ldr	r3, [sp, #20]
 8013220:	eba3 030b 	sub.w	r3, r3, fp
 8013224:	9305      	str	r3, [sp, #20]
 8013226:	f1cb 0300 	rsb	r3, fp, #0
 801322a:	9308      	str	r3, [sp, #32]
 801322c:	2300      	movs	r3, #0
 801322e:	930b      	str	r3, [sp, #44]	; 0x2c
 8013230:	e7bf      	b.n	80131b2 <_dtoa_r+0x1e2>
 8013232:	2300      	movs	r3, #0
 8013234:	9309      	str	r3, [sp, #36]	; 0x24
 8013236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013238:	2b00      	cmp	r3, #0
 801323a:	dc52      	bgt.n	80132e2 <_dtoa_r+0x312>
 801323c:	2301      	movs	r3, #1
 801323e:	9301      	str	r3, [sp, #4]
 8013240:	9304      	str	r3, [sp, #16]
 8013242:	461a      	mov	r2, r3
 8013244:	920a      	str	r2, [sp, #40]	; 0x28
 8013246:	e00b      	b.n	8013260 <_dtoa_r+0x290>
 8013248:	2301      	movs	r3, #1
 801324a:	e7f3      	b.n	8013234 <_dtoa_r+0x264>
 801324c:	2300      	movs	r3, #0
 801324e:	9309      	str	r3, [sp, #36]	; 0x24
 8013250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013252:	445b      	add	r3, fp
 8013254:	9301      	str	r3, [sp, #4]
 8013256:	3301      	adds	r3, #1
 8013258:	2b01      	cmp	r3, #1
 801325a:	9304      	str	r3, [sp, #16]
 801325c:	bfb8      	it	lt
 801325e:	2301      	movlt	r3, #1
 8013260:	69e0      	ldr	r0, [r4, #28]
 8013262:	2100      	movs	r1, #0
 8013264:	2204      	movs	r2, #4
 8013266:	f102 0614 	add.w	r6, r2, #20
 801326a:	429e      	cmp	r6, r3
 801326c:	d93d      	bls.n	80132ea <_dtoa_r+0x31a>
 801326e:	6041      	str	r1, [r0, #4]
 8013270:	4620      	mov	r0, r4
 8013272:	f000 fd9f 	bl	8013db4 <_Balloc>
 8013276:	9000      	str	r0, [sp, #0]
 8013278:	2800      	cmp	r0, #0
 801327a:	d139      	bne.n	80132f0 <_dtoa_r+0x320>
 801327c:	4b16      	ldr	r3, [pc, #88]	; (80132d8 <_dtoa_r+0x308>)
 801327e:	4602      	mov	r2, r0
 8013280:	f240 11af 	movw	r1, #431	; 0x1af
 8013284:	e6bd      	b.n	8013002 <_dtoa_r+0x32>
 8013286:	2301      	movs	r3, #1
 8013288:	e7e1      	b.n	801324e <_dtoa_r+0x27e>
 801328a:	2501      	movs	r5, #1
 801328c:	2300      	movs	r3, #0
 801328e:	9307      	str	r3, [sp, #28]
 8013290:	9509      	str	r5, [sp, #36]	; 0x24
 8013292:	f04f 33ff 	mov.w	r3, #4294967295
 8013296:	9301      	str	r3, [sp, #4]
 8013298:	9304      	str	r3, [sp, #16]
 801329a:	2200      	movs	r2, #0
 801329c:	2312      	movs	r3, #18
 801329e:	e7d1      	b.n	8013244 <_dtoa_r+0x274>
 80132a0:	636f4361 	.word	0x636f4361
 80132a4:	3fd287a7 	.word	0x3fd287a7
 80132a8:	8b60c8b3 	.word	0x8b60c8b3
 80132ac:	3fc68a28 	.word	0x3fc68a28
 80132b0:	509f79fb 	.word	0x509f79fb
 80132b4:	3fd34413 	.word	0x3fd34413
 80132b8:	080158a1 	.word	0x080158a1
 80132bc:	080158b8 	.word	0x080158b8
 80132c0:	7ff00000 	.word	0x7ff00000
 80132c4:	0801589d 	.word	0x0801589d
 80132c8:	08015894 	.word	0x08015894
 80132cc:	08015871 	.word	0x08015871
 80132d0:	3ff80000 	.word	0x3ff80000
 80132d4:	080159a8 	.word	0x080159a8
 80132d8:	08015910 	.word	0x08015910
 80132dc:	2301      	movs	r3, #1
 80132de:	9309      	str	r3, [sp, #36]	; 0x24
 80132e0:	e7d7      	b.n	8013292 <_dtoa_r+0x2c2>
 80132e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80132e4:	9301      	str	r3, [sp, #4]
 80132e6:	9304      	str	r3, [sp, #16]
 80132e8:	e7ba      	b.n	8013260 <_dtoa_r+0x290>
 80132ea:	3101      	adds	r1, #1
 80132ec:	0052      	lsls	r2, r2, #1
 80132ee:	e7ba      	b.n	8013266 <_dtoa_r+0x296>
 80132f0:	69e3      	ldr	r3, [r4, #28]
 80132f2:	9a00      	ldr	r2, [sp, #0]
 80132f4:	601a      	str	r2, [r3, #0]
 80132f6:	9b04      	ldr	r3, [sp, #16]
 80132f8:	2b0e      	cmp	r3, #14
 80132fa:	f200 80a8 	bhi.w	801344e <_dtoa_r+0x47e>
 80132fe:	2d00      	cmp	r5, #0
 8013300:	f000 80a5 	beq.w	801344e <_dtoa_r+0x47e>
 8013304:	f1bb 0f00 	cmp.w	fp, #0
 8013308:	dd38      	ble.n	801337c <_dtoa_r+0x3ac>
 801330a:	4bc0      	ldr	r3, [pc, #768]	; (801360c <_dtoa_r+0x63c>)
 801330c:	f00b 020f 	and.w	r2, fp, #15
 8013310:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013314:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8013318:	e9d3 6700 	ldrd	r6, r7, [r3]
 801331c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8013320:	d019      	beq.n	8013356 <_dtoa_r+0x386>
 8013322:	4bbb      	ldr	r3, [pc, #748]	; (8013610 <_dtoa_r+0x640>)
 8013324:	ec51 0b18 	vmov	r0, r1, d8
 8013328:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801332c:	f7ed fa9e 	bl	800086c <__aeabi_ddiv>
 8013330:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013334:	f008 080f 	and.w	r8, r8, #15
 8013338:	2503      	movs	r5, #3
 801333a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8013610 <_dtoa_r+0x640>
 801333e:	f1b8 0f00 	cmp.w	r8, #0
 8013342:	d10a      	bne.n	801335a <_dtoa_r+0x38a>
 8013344:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013348:	4632      	mov	r2, r6
 801334a:	463b      	mov	r3, r7
 801334c:	f7ed fa8e 	bl	800086c <__aeabi_ddiv>
 8013350:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013354:	e02b      	b.n	80133ae <_dtoa_r+0x3de>
 8013356:	2502      	movs	r5, #2
 8013358:	e7ef      	b.n	801333a <_dtoa_r+0x36a>
 801335a:	f018 0f01 	tst.w	r8, #1
 801335e:	d008      	beq.n	8013372 <_dtoa_r+0x3a2>
 8013360:	4630      	mov	r0, r6
 8013362:	4639      	mov	r1, r7
 8013364:	e9d9 2300 	ldrd	r2, r3, [r9]
 8013368:	f7ed f956 	bl	8000618 <__aeabi_dmul>
 801336c:	3501      	adds	r5, #1
 801336e:	4606      	mov	r6, r0
 8013370:	460f      	mov	r7, r1
 8013372:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013376:	f109 0908 	add.w	r9, r9, #8
 801337a:	e7e0      	b.n	801333e <_dtoa_r+0x36e>
 801337c:	f000 809f 	beq.w	80134be <_dtoa_r+0x4ee>
 8013380:	f1cb 0600 	rsb	r6, fp, #0
 8013384:	4ba1      	ldr	r3, [pc, #644]	; (801360c <_dtoa_r+0x63c>)
 8013386:	4fa2      	ldr	r7, [pc, #648]	; (8013610 <_dtoa_r+0x640>)
 8013388:	f006 020f 	and.w	r2, r6, #15
 801338c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013394:	ec51 0b18 	vmov	r0, r1, d8
 8013398:	f7ed f93e 	bl	8000618 <__aeabi_dmul>
 801339c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80133a0:	1136      	asrs	r6, r6, #4
 80133a2:	2300      	movs	r3, #0
 80133a4:	2502      	movs	r5, #2
 80133a6:	2e00      	cmp	r6, #0
 80133a8:	d17e      	bne.n	80134a8 <_dtoa_r+0x4d8>
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d1d0      	bne.n	8013350 <_dtoa_r+0x380>
 80133ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80133b0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	f000 8084 	beq.w	80134c2 <_dtoa_r+0x4f2>
 80133ba:	4b96      	ldr	r3, [pc, #600]	; (8013614 <_dtoa_r+0x644>)
 80133bc:	2200      	movs	r2, #0
 80133be:	4640      	mov	r0, r8
 80133c0:	4649      	mov	r1, r9
 80133c2:	f7ed fb9b 	bl	8000afc <__aeabi_dcmplt>
 80133c6:	2800      	cmp	r0, #0
 80133c8:	d07b      	beq.n	80134c2 <_dtoa_r+0x4f2>
 80133ca:	9b04      	ldr	r3, [sp, #16]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d078      	beq.n	80134c2 <_dtoa_r+0x4f2>
 80133d0:	9b01      	ldr	r3, [sp, #4]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	dd39      	ble.n	801344a <_dtoa_r+0x47a>
 80133d6:	4b90      	ldr	r3, [pc, #576]	; (8013618 <_dtoa_r+0x648>)
 80133d8:	2200      	movs	r2, #0
 80133da:	4640      	mov	r0, r8
 80133dc:	4649      	mov	r1, r9
 80133de:	f7ed f91b 	bl	8000618 <__aeabi_dmul>
 80133e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80133e6:	9e01      	ldr	r6, [sp, #4]
 80133e8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80133ec:	3501      	adds	r5, #1
 80133ee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80133f2:	4628      	mov	r0, r5
 80133f4:	f7ed f8a6 	bl	8000544 <__aeabi_i2d>
 80133f8:	4642      	mov	r2, r8
 80133fa:	464b      	mov	r3, r9
 80133fc:	f7ed f90c 	bl	8000618 <__aeabi_dmul>
 8013400:	4b86      	ldr	r3, [pc, #536]	; (801361c <_dtoa_r+0x64c>)
 8013402:	2200      	movs	r2, #0
 8013404:	f7ec ff52 	bl	80002ac <__adddf3>
 8013408:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801340c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013410:	9303      	str	r3, [sp, #12]
 8013412:	2e00      	cmp	r6, #0
 8013414:	d158      	bne.n	80134c8 <_dtoa_r+0x4f8>
 8013416:	4b82      	ldr	r3, [pc, #520]	; (8013620 <_dtoa_r+0x650>)
 8013418:	2200      	movs	r2, #0
 801341a:	4640      	mov	r0, r8
 801341c:	4649      	mov	r1, r9
 801341e:	f7ec ff43 	bl	80002a8 <__aeabi_dsub>
 8013422:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013426:	4680      	mov	r8, r0
 8013428:	4689      	mov	r9, r1
 801342a:	f7ed fb85 	bl	8000b38 <__aeabi_dcmpgt>
 801342e:	2800      	cmp	r0, #0
 8013430:	f040 8296 	bne.w	8013960 <_dtoa_r+0x990>
 8013434:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013438:	4640      	mov	r0, r8
 801343a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801343e:	4649      	mov	r1, r9
 8013440:	f7ed fb5c 	bl	8000afc <__aeabi_dcmplt>
 8013444:	2800      	cmp	r0, #0
 8013446:	f040 8289 	bne.w	801395c <_dtoa_r+0x98c>
 801344a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801344e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013450:	2b00      	cmp	r3, #0
 8013452:	f2c0 814e 	blt.w	80136f2 <_dtoa_r+0x722>
 8013456:	f1bb 0f0e 	cmp.w	fp, #14
 801345a:	f300 814a 	bgt.w	80136f2 <_dtoa_r+0x722>
 801345e:	4b6b      	ldr	r3, [pc, #428]	; (801360c <_dtoa_r+0x63c>)
 8013460:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013464:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801346a:	2b00      	cmp	r3, #0
 801346c:	f280 80dc 	bge.w	8013628 <_dtoa_r+0x658>
 8013470:	9b04      	ldr	r3, [sp, #16]
 8013472:	2b00      	cmp	r3, #0
 8013474:	f300 80d8 	bgt.w	8013628 <_dtoa_r+0x658>
 8013478:	f040 826f 	bne.w	801395a <_dtoa_r+0x98a>
 801347c:	4b68      	ldr	r3, [pc, #416]	; (8013620 <_dtoa_r+0x650>)
 801347e:	2200      	movs	r2, #0
 8013480:	4640      	mov	r0, r8
 8013482:	4649      	mov	r1, r9
 8013484:	f7ed f8c8 	bl	8000618 <__aeabi_dmul>
 8013488:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801348c:	f7ed fb4a 	bl	8000b24 <__aeabi_dcmpge>
 8013490:	9e04      	ldr	r6, [sp, #16]
 8013492:	4637      	mov	r7, r6
 8013494:	2800      	cmp	r0, #0
 8013496:	f040 8245 	bne.w	8013924 <_dtoa_r+0x954>
 801349a:	9d00      	ldr	r5, [sp, #0]
 801349c:	2331      	movs	r3, #49	; 0x31
 801349e:	f805 3b01 	strb.w	r3, [r5], #1
 80134a2:	f10b 0b01 	add.w	fp, fp, #1
 80134a6:	e241      	b.n	801392c <_dtoa_r+0x95c>
 80134a8:	07f2      	lsls	r2, r6, #31
 80134aa:	d505      	bpl.n	80134b8 <_dtoa_r+0x4e8>
 80134ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80134b0:	f7ed f8b2 	bl	8000618 <__aeabi_dmul>
 80134b4:	3501      	adds	r5, #1
 80134b6:	2301      	movs	r3, #1
 80134b8:	1076      	asrs	r6, r6, #1
 80134ba:	3708      	adds	r7, #8
 80134bc:	e773      	b.n	80133a6 <_dtoa_r+0x3d6>
 80134be:	2502      	movs	r5, #2
 80134c0:	e775      	b.n	80133ae <_dtoa_r+0x3de>
 80134c2:	9e04      	ldr	r6, [sp, #16]
 80134c4:	465f      	mov	r7, fp
 80134c6:	e792      	b.n	80133ee <_dtoa_r+0x41e>
 80134c8:	9900      	ldr	r1, [sp, #0]
 80134ca:	4b50      	ldr	r3, [pc, #320]	; (801360c <_dtoa_r+0x63c>)
 80134cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80134d0:	4431      	add	r1, r6
 80134d2:	9102      	str	r1, [sp, #8]
 80134d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80134d6:	eeb0 9a47 	vmov.f32	s18, s14
 80134da:	eef0 9a67 	vmov.f32	s19, s15
 80134de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80134e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80134e6:	2900      	cmp	r1, #0
 80134e8:	d044      	beq.n	8013574 <_dtoa_r+0x5a4>
 80134ea:	494e      	ldr	r1, [pc, #312]	; (8013624 <_dtoa_r+0x654>)
 80134ec:	2000      	movs	r0, #0
 80134ee:	f7ed f9bd 	bl	800086c <__aeabi_ddiv>
 80134f2:	ec53 2b19 	vmov	r2, r3, d9
 80134f6:	f7ec fed7 	bl	80002a8 <__aeabi_dsub>
 80134fa:	9d00      	ldr	r5, [sp, #0]
 80134fc:	ec41 0b19 	vmov	d9, r0, r1
 8013500:	4649      	mov	r1, r9
 8013502:	4640      	mov	r0, r8
 8013504:	f7ed fb38 	bl	8000b78 <__aeabi_d2iz>
 8013508:	4606      	mov	r6, r0
 801350a:	f7ed f81b 	bl	8000544 <__aeabi_i2d>
 801350e:	4602      	mov	r2, r0
 8013510:	460b      	mov	r3, r1
 8013512:	4640      	mov	r0, r8
 8013514:	4649      	mov	r1, r9
 8013516:	f7ec fec7 	bl	80002a8 <__aeabi_dsub>
 801351a:	3630      	adds	r6, #48	; 0x30
 801351c:	f805 6b01 	strb.w	r6, [r5], #1
 8013520:	ec53 2b19 	vmov	r2, r3, d9
 8013524:	4680      	mov	r8, r0
 8013526:	4689      	mov	r9, r1
 8013528:	f7ed fae8 	bl	8000afc <__aeabi_dcmplt>
 801352c:	2800      	cmp	r0, #0
 801352e:	d164      	bne.n	80135fa <_dtoa_r+0x62a>
 8013530:	4642      	mov	r2, r8
 8013532:	464b      	mov	r3, r9
 8013534:	4937      	ldr	r1, [pc, #220]	; (8013614 <_dtoa_r+0x644>)
 8013536:	2000      	movs	r0, #0
 8013538:	f7ec feb6 	bl	80002a8 <__aeabi_dsub>
 801353c:	ec53 2b19 	vmov	r2, r3, d9
 8013540:	f7ed fadc 	bl	8000afc <__aeabi_dcmplt>
 8013544:	2800      	cmp	r0, #0
 8013546:	f040 80b6 	bne.w	80136b6 <_dtoa_r+0x6e6>
 801354a:	9b02      	ldr	r3, [sp, #8]
 801354c:	429d      	cmp	r5, r3
 801354e:	f43f af7c 	beq.w	801344a <_dtoa_r+0x47a>
 8013552:	4b31      	ldr	r3, [pc, #196]	; (8013618 <_dtoa_r+0x648>)
 8013554:	ec51 0b19 	vmov	r0, r1, d9
 8013558:	2200      	movs	r2, #0
 801355a:	f7ed f85d 	bl	8000618 <__aeabi_dmul>
 801355e:	4b2e      	ldr	r3, [pc, #184]	; (8013618 <_dtoa_r+0x648>)
 8013560:	ec41 0b19 	vmov	d9, r0, r1
 8013564:	2200      	movs	r2, #0
 8013566:	4640      	mov	r0, r8
 8013568:	4649      	mov	r1, r9
 801356a:	f7ed f855 	bl	8000618 <__aeabi_dmul>
 801356e:	4680      	mov	r8, r0
 8013570:	4689      	mov	r9, r1
 8013572:	e7c5      	b.n	8013500 <_dtoa_r+0x530>
 8013574:	ec51 0b17 	vmov	r0, r1, d7
 8013578:	f7ed f84e 	bl	8000618 <__aeabi_dmul>
 801357c:	9b02      	ldr	r3, [sp, #8]
 801357e:	9d00      	ldr	r5, [sp, #0]
 8013580:	930f      	str	r3, [sp, #60]	; 0x3c
 8013582:	ec41 0b19 	vmov	d9, r0, r1
 8013586:	4649      	mov	r1, r9
 8013588:	4640      	mov	r0, r8
 801358a:	f7ed faf5 	bl	8000b78 <__aeabi_d2iz>
 801358e:	4606      	mov	r6, r0
 8013590:	f7ec ffd8 	bl	8000544 <__aeabi_i2d>
 8013594:	3630      	adds	r6, #48	; 0x30
 8013596:	4602      	mov	r2, r0
 8013598:	460b      	mov	r3, r1
 801359a:	4640      	mov	r0, r8
 801359c:	4649      	mov	r1, r9
 801359e:	f7ec fe83 	bl	80002a8 <__aeabi_dsub>
 80135a2:	f805 6b01 	strb.w	r6, [r5], #1
 80135a6:	9b02      	ldr	r3, [sp, #8]
 80135a8:	429d      	cmp	r5, r3
 80135aa:	4680      	mov	r8, r0
 80135ac:	4689      	mov	r9, r1
 80135ae:	f04f 0200 	mov.w	r2, #0
 80135b2:	d124      	bne.n	80135fe <_dtoa_r+0x62e>
 80135b4:	4b1b      	ldr	r3, [pc, #108]	; (8013624 <_dtoa_r+0x654>)
 80135b6:	ec51 0b19 	vmov	r0, r1, d9
 80135ba:	f7ec fe77 	bl	80002ac <__adddf3>
 80135be:	4602      	mov	r2, r0
 80135c0:	460b      	mov	r3, r1
 80135c2:	4640      	mov	r0, r8
 80135c4:	4649      	mov	r1, r9
 80135c6:	f7ed fab7 	bl	8000b38 <__aeabi_dcmpgt>
 80135ca:	2800      	cmp	r0, #0
 80135cc:	d173      	bne.n	80136b6 <_dtoa_r+0x6e6>
 80135ce:	ec53 2b19 	vmov	r2, r3, d9
 80135d2:	4914      	ldr	r1, [pc, #80]	; (8013624 <_dtoa_r+0x654>)
 80135d4:	2000      	movs	r0, #0
 80135d6:	f7ec fe67 	bl	80002a8 <__aeabi_dsub>
 80135da:	4602      	mov	r2, r0
 80135dc:	460b      	mov	r3, r1
 80135de:	4640      	mov	r0, r8
 80135e0:	4649      	mov	r1, r9
 80135e2:	f7ed fa8b 	bl	8000afc <__aeabi_dcmplt>
 80135e6:	2800      	cmp	r0, #0
 80135e8:	f43f af2f 	beq.w	801344a <_dtoa_r+0x47a>
 80135ec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80135ee:	1e6b      	subs	r3, r5, #1
 80135f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80135f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80135f6:	2b30      	cmp	r3, #48	; 0x30
 80135f8:	d0f8      	beq.n	80135ec <_dtoa_r+0x61c>
 80135fa:	46bb      	mov	fp, r7
 80135fc:	e04a      	b.n	8013694 <_dtoa_r+0x6c4>
 80135fe:	4b06      	ldr	r3, [pc, #24]	; (8013618 <_dtoa_r+0x648>)
 8013600:	f7ed f80a 	bl	8000618 <__aeabi_dmul>
 8013604:	4680      	mov	r8, r0
 8013606:	4689      	mov	r9, r1
 8013608:	e7bd      	b.n	8013586 <_dtoa_r+0x5b6>
 801360a:	bf00      	nop
 801360c:	080159a8 	.word	0x080159a8
 8013610:	08015980 	.word	0x08015980
 8013614:	3ff00000 	.word	0x3ff00000
 8013618:	40240000 	.word	0x40240000
 801361c:	401c0000 	.word	0x401c0000
 8013620:	40140000 	.word	0x40140000
 8013624:	3fe00000 	.word	0x3fe00000
 8013628:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801362c:	9d00      	ldr	r5, [sp, #0]
 801362e:	4642      	mov	r2, r8
 8013630:	464b      	mov	r3, r9
 8013632:	4630      	mov	r0, r6
 8013634:	4639      	mov	r1, r7
 8013636:	f7ed f919 	bl	800086c <__aeabi_ddiv>
 801363a:	f7ed fa9d 	bl	8000b78 <__aeabi_d2iz>
 801363e:	9001      	str	r0, [sp, #4]
 8013640:	f7ec ff80 	bl	8000544 <__aeabi_i2d>
 8013644:	4642      	mov	r2, r8
 8013646:	464b      	mov	r3, r9
 8013648:	f7ec ffe6 	bl	8000618 <__aeabi_dmul>
 801364c:	4602      	mov	r2, r0
 801364e:	460b      	mov	r3, r1
 8013650:	4630      	mov	r0, r6
 8013652:	4639      	mov	r1, r7
 8013654:	f7ec fe28 	bl	80002a8 <__aeabi_dsub>
 8013658:	9e01      	ldr	r6, [sp, #4]
 801365a:	9f04      	ldr	r7, [sp, #16]
 801365c:	3630      	adds	r6, #48	; 0x30
 801365e:	f805 6b01 	strb.w	r6, [r5], #1
 8013662:	9e00      	ldr	r6, [sp, #0]
 8013664:	1bae      	subs	r6, r5, r6
 8013666:	42b7      	cmp	r7, r6
 8013668:	4602      	mov	r2, r0
 801366a:	460b      	mov	r3, r1
 801366c:	d134      	bne.n	80136d8 <_dtoa_r+0x708>
 801366e:	f7ec fe1d 	bl	80002ac <__adddf3>
 8013672:	4642      	mov	r2, r8
 8013674:	464b      	mov	r3, r9
 8013676:	4606      	mov	r6, r0
 8013678:	460f      	mov	r7, r1
 801367a:	f7ed fa5d 	bl	8000b38 <__aeabi_dcmpgt>
 801367e:	b9c8      	cbnz	r0, 80136b4 <_dtoa_r+0x6e4>
 8013680:	4642      	mov	r2, r8
 8013682:	464b      	mov	r3, r9
 8013684:	4630      	mov	r0, r6
 8013686:	4639      	mov	r1, r7
 8013688:	f7ed fa2e 	bl	8000ae8 <__aeabi_dcmpeq>
 801368c:	b110      	cbz	r0, 8013694 <_dtoa_r+0x6c4>
 801368e:	9b01      	ldr	r3, [sp, #4]
 8013690:	07db      	lsls	r3, r3, #31
 8013692:	d40f      	bmi.n	80136b4 <_dtoa_r+0x6e4>
 8013694:	4651      	mov	r1, sl
 8013696:	4620      	mov	r0, r4
 8013698:	f000 fbcc 	bl	8013e34 <_Bfree>
 801369c:	2300      	movs	r3, #0
 801369e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80136a0:	702b      	strb	r3, [r5, #0]
 80136a2:	f10b 0301 	add.w	r3, fp, #1
 80136a6:	6013      	str	r3, [r2, #0]
 80136a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	f43f ace2 	beq.w	8013074 <_dtoa_r+0xa4>
 80136b0:	601d      	str	r5, [r3, #0]
 80136b2:	e4df      	b.n	8013074 <_dtoa_r+0xa4>
 80136b4:	465f      	mov	r7, fp
 80136b6:	462b      	mov	r3, r5
 80136b8:	461d      	mov	r5, r3
 80136ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80136be:	2a39      	cmp	r2, #57	; 0x39
 80136c0:	d106      	bne.n	80136d0 <_dtoa_r+0x700>
 80136c2:	9a00      	ldr	r2, [sp, #0]
 80136c4:	429a      	cmp	r2, r3
 80136c6:	d1f7      	bne.n	80136b8 <_dtoa_r+0x6e8>
 80136c8:	9900      	ldr	r1, [sp, #0]
 80136ca:	2230      	movs	r2, #48	; 0x30
 80136cc:	3701      	adds	r7, #1
 80136ce:	700a      	strb	r2, [r1, #0]
 80136d0:	781a      	ldrb	r2, [r3, #0]
 80136d2:	3201      	adds	r2, #1
 80136d4:	701a      	strb	r2, [r3, #0]
 80136d6:	e790      	b.n	80135fa <_dtoa_r+0x62a>
 80136d8:	4ba3      	ldr	r3, [pc, #652]	; (8013968 <_dtoa_r+0x998>)
 80136da:	2200      	movs	r2, #0
 80136dc:	f7ec ff9c 	bl	8000618 <__aeabi_dmul>
 80136e0:	2200      	movs	r2, #0
 80136e2:	2300      	movs	r3, #0
 80136e4:	4606      	mov	r6, r0
 80136e6:	460f      	mov	r7, r1
 80136e8:	f7ed f9fe 	bl	8000ae8 <__aeabi_dcmpeq>
 80136ec:	2800      	cmp	r0, #0
 80136ee:	d09e      	beq.n	801362e <_dtoa_r+0x65e>
 80136f0:	e7d0      	b.n	8013694 <_dtoa_r+0x6c4>
 80136f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80136f4:	2a00      	cmp	r2, #0
 80136f6:	f000 80ca 	beq.w	801388e <_dtoa_r+0x8be>
 80136fa:	9a07      	ldr	r2, [sp, #28]
 80136fc:	2a01      	cmp	r2, #1
 80136fe:	f300 80ad 	bgt.w	801385c <_dtoa_r+0x88c>
 8013702:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013704:	2a00      	cmp	r2, #0
 8013706:	f000 80a5 	beq.w	8013854 <_dtoa_r+0x884>
 801370a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801370e:	9e08      	ldr	r6, [sp, #32]
 8013710:	9d05      	ldr	r5, [sp, #20]
 8013712:	9a05      	ldr	r2, [sp, #20]
 8013714:	441a      	add	r2, r3
 8013716:	9205      	str	r2, [sp, #20]
 8013718:	9a06      	ldr	r2, [sp, #24]
 801371a:	2101      	movs	r1, #1
 801371c:	441a      	add	r2, r3
 801371e:	4620      	mov	r0, r4
 8013720:	9206      	str	r2, [sp, #24]
 8013722:	f000 fc3d 	bl	8013fa0 <__i2b>
 8013726:	4607      	mov	r7, r0
 8013728:	b165      	cbz	r5, 8013744 <_dtoa_r+0x774>
 801372a:	9b06      	ldr	r3, [sp, #24]
 801372c:	2b00      	cmp	r3, #0
 801372e:	dd09      	ble.n	8013744 <_dtoa_r+0x774>
 8013730:	42ab      	cmp	r3, r5
 8013732:	9a05      	ldr	r2, [sp, #20]
 8013734:	bfa8      	it	ge
 8013736:	462b      	movge	r3, r5
 8013738:	1ad2      	subs	r2, r2, r3
 801373a:	9205      	str	r2, [sp, #20]
 801373c:	9a06      	ldr	r2, [sp, #24]
 801373e:	1aed      	subs	r5, r5, r3
 8013740:	1ad3      	subs	r3, r2, r3
 8013742:	9306      	str	r3, [sp, #24]
 8013744:	9b08      	ldr	r3, [sp, #32]
 8013746:	b1f3      	cbz	r3, 8013786 <_dtoa_r+0x7b6>
 8013748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801374a:	2b00      	cmp	r3, #0
 801374c:	f000 80a3 	beq.w	8013896 <_dtoa_r+0x8c6>
 8013750:	2e00      	cmp	r6, #0
 8013752:	dd10      	ble.n	8013776 <_dtoa_r+0x7a6>
 8013754:	4639      	mov	r1, r7
 8013756:	4632      	mov	r2, r6
 8013758:	4620      	mov	r0, r4
 801375a:	f000 fce1 	bl	8014120 <__pow5mult>
 801375e:	4652      	mov	r2, sl
 8013760:	4601      	mov	r1, r0
 8013762:	4607      	mov	r7, r0
 8013764:	4620      	mov	r0, r4
 8013766:	f000 fc31 	bl	8013fcc <__multiply>
 801376a:	4651      	mov	r1, sl
 801376c:	4680      	mov	r8, r0
 801376e:	4620      	mov	r0, r4
 8013770:	f000 fb60 	bl	8013e34 <_Bfree>
 8013774:	46c2      	mov	sl, r8
 8013776:	9b08      	ldr	r3, [sp, #32]
 8013778:	1b9a      	subs	r2, r3, r6
 801377a:	d004      	beq.n	8013786 <_dtoa_r+0x7b6>
 801377c:	4651      	mov	r1, sl
 801377e:	4620      	mov	r0, r4
 8013780:	f000 fcce 	bl	8014120 <__pow5mult>
 8013784:	4682      	mov	sl, r0
 8013786:	2101      	movs	r1, #1
 8013788:	4620      	mov	r0, r4
 801378a:	f000 fc09 	bl	8013fa0 <__i2b>
 801378e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013790:	2b00      	cmp	r3, #0
 8013792:	4606      	mov	r6, r0
 8013794:	f340 8081 	ble.w	801389a <_dtoa_r+0x8ca>
 8013798:	461a      	mov	r2, r3
 801379a:	4601      	mov	r1, r0
 801379c:	4620      	mov	r0, r4
 801379e:	f000 fcbf 	bl	8014120 <__pow5mult>
 80137a2:	9b07      	ldr	r3, [sp, #28]
 80137a4:	2b01      	cmp	r3, #1
 80137a6:	4606      	mov	r6, r0
 80137a8:	dd7a      	ble.n	80138a0 <_dtoa_r+0x8d0>
 80137aa:	f04f 0800 	mov.w	r8, #0
 80137ae:	6933      	ldr	r3, [r6, #16]
 80137b0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80137b4:	6918      	ldr	r0, [r3, #16]
 80137b6:	f000 fba5 	bl	8013f04 <__hi0bits>
 80137ba:	f1c0 0020 	rsb	r0, r0, #32
 80137be:	9b06      	ldr	r3, [sp, #24]
 80137c0:	4418      	add	r0, r3
 80137c2:	f010 001f 	ands.w	r0, r0, #31
 80137c6:	f000 8094 	beq.w	80138f2 <_dtoa_r+0x922>
 80137ca:	f1c0 0320 	rsb	r3, r0, #32
 80137ce:	2b04      	cmp	r3, #4
 80137d0:	f340 8085 	ble.w	80138de <_dtoa_r+0x90e>
 80137d4:	9b05      	ldr	r3, [sp, #20]
 80137d6:	f1c0 001c 	rsb	r0, r0, #28
 80137da:	4403      	add	r3, r0
 80137dc:	9305      	str	r3, [sp, #20]
 80137de:	9b06      	ldr	r3, [sp, #24]
 80137e0:	4403      	add	r3, r0
 80137e2:	4405      	add	r5, r0
 80137e4:	9306      	str	r3, [sp, #24]
 80137e6:	9b05      	ldr	r3, [sp, #20]
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	dd05      	ble.n	80137f8 <_dtoa_r+0x828>
 80137ec:	4651      	mov	r1, sl
 80137ee:	461a      	mov	r2, r3
 80137f0:	4620      	mov	r0, r4
 80137f2:	f000 fcef 	bl	80141d4 <__lshift>
 80137f6:	4682      	mov	sl, r0
 80137f8:	9b06      	ldr	r3, [sp, #24]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	dd05      	ble.n	801380a <_dtoa_r+0x83a>
 80137fe:	4631      	mov	r1, r6
 8013800:	461a      	mov	r2, r3
 8013802:	4620      	mov	r0, r4
 8013804:	f000 fce6 	bl	80141d4 <__lshift>
 8013808:	4606      	mov	r6, r0
 801380a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801380c:	2b00      	cmp	r3, #0
 801380e:	d072      	beq.n	80138f6 <_dtoa_r+0x926>
 8013810:	4631      	mov	r1, r6
 8013812:	4650      	mov	r0, sl
 8013814:	f000 fd4a 	bl	80142ac <__mcmp>
 8013818:	2800      	cmp	r0, #0
 801381a:	da6c      	bge.n	80138f6 <_dtoa_r+0x926>
 801381c:	2300      	movs	r3, #0
 801381e:	4651      	mov	r1, sl
 8013820:	220a      	movs	r2, #10
 8013822:	4620      	mov	r0, r4
 8013824:	f000 fb28 	bl	8013e78 <__multadd>
 8013828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801382a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801382e:	4682      	mov	sl, r0
 8013830:	2b00      	cmp	r3, #0
 8013832:	f000 81b0 	beq.w	8013b96 <_dtoa_r+0xbc6>
 8013836:	2300      	movs	r3, #0
 8013838:	4639      	mov	r1, r7
 801383a:	220a      	movs	r2, #10
 801383c:	4620      	mov	r0, r4
 801383e:	f000 fb1b 	bl	8013e78 <__multadd>
 8013842:	9b01      	ldr	r3, [sp, #4]
 8013844:	2b00      	cmp	r3, #0
 8013846:	4607      	mov	r7, r0
 8013848:	f300 8096 	bgt.w	8013978 <_dtoa_r+0x9a8>
 801384c:	9b07      	ldr	r3, [sp, #28]
 801384e:	2b02      	cmp	r3, #2
 8013850:	dc59      	bgt.n	8013906 <_dtoa_r+0x936>
 8013852:	e091      	b.n	8013978 <_dtoa_r+0x9a8>
 8013854:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013856:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801385a:	e758      	b.n	801370e <_dtoa_r+0x73e>
 801385c:	9b04      	ldr	r3, [sp, #16]
 801385e:	1e5e      	subs	r6, r3, #1
 8013860:	9b08      	ldr	r3, [sp, #32]
 8013862:	42b3      	cmp	r3, r6
 8013864:	bfbf      	itttt	lt
 8013866:	9b08      	ldrlt	r3, [sp, #32]
 8013868:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801386a:	9608      	strlt	r6, [sp, #32]
 801386c:	1af3      	sublt	r3, r6, r3
 801386e:	bfb4      	ite	lt
 8013870:	18d2      	addlt	r2, r2, r3
 8013872:	1b9e      	subge	r6, r3, r6
 8013874:	9b04      	ldr	r3, [sp, #16]
 8013876:	bfbc      	itt	lt
 8013878:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801387a:	2600      	movlt	r6, #0
 801387c:	2b00      	cmp	r3, #0
 801387e:	bfb7      	itett	lt
 8013880:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8013884:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8013888:	1a9d      	sublt	r5, r3, r2
 801388a:	2300      	movlt	r3, #0
 801388c:	e741      	b.n	8013712 <_dtoa_r+0x742>
 801388e:	9e08      	ldr	r6, [sp, #32]
 8013890:	9d05      	ldr	r5, [sp, #20]
 8013892:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8013894:	e748      	b.n	8013728 <_dtoa_r+0x758>
 8013896:	9a08      	ldr	r2, [sp, #32]
 8013898:	e770      	b.n	801377c <_dtoa_r+0x7ac>
 801389a:	9b07      	ldr	r3, [sp, #28]
 801389c:	2b01      	cmp	r3, #1
 801389e:	dc19      	bgt.n	80138d4 <_dtoa_r+0x904>
 80138a0:	9b02      	ldr	r3, [sp, #8]
 80138a2:	b9bb      	cbnz	r3, 80138d4 <_dtoa_r+0x904>
 80138a4:	9b03      	ldr	r3, [sp, #12]
 80138a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80138aa:	b99b      	cbnz	r3, 80138d4 <_dtoa_r+0x904>
 80138ac:	9b03      	ldr	r3, [sp, #12]
 80138ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80138b2:	0d1b      	lsrs	r3, r3, #20
 80138b4:	051b      	lsls	r3, r3, #20
 80138b6:	b183      	cbz	r3, 80138da <_dtoa_r+0x90a>
 80138b8:	9b05      	ldr	r3, [sp, #20]
 80138ba:	3301      	adds	r3, #1
 80138bc:	9305      	str	r3, [sp, #20]
 80138be:	9b06      	ldr	r3, [sp, #24]
 80138c0:	3301      	adds	r3, #1
 80138c2:	9306      	str	r3, [sp, #24]
 80138c4:	f04f 0801 	mov.w	r8, #1
 80138c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	f47f af6f 	bne.w	80137ae <_dtoa_r+0x7de>
 80138d0:	2001      	movs	r0, #1
 80138d2:	e774      	b.n	80137be <_dtoa_r+0x7ee>
 80138d4:	f04f 0800 	mov.w	r8, #0
 80138d8:	e7f6      	b.n	80138c8 <_dtoa_r+0x8f8>
 80138da:	4698      	mov	r8, r3
 80138dc:	e7f4      	b.n	80138c8 <_dtoa_r+0x8f8>
 80138de:	d082      	beq.n	80137e6 <_dtoa_r+0x816>
 80138e0:	9a05      	ldr	r2, [sp, #20]
 80138e2:	331c      	adds	r3, #28
 80138e4:	441a      	add	r2, r3
 80138e6:	9205      	str	r2, [sp, #20]
 80138e8:	9a06      	ldr	r2, [sp, #24]
 80138ea:	441a      	add	r2, r3
 80138ec:	441d      	add	r5, r3
 80138ee:	9206      	str	r2, [sp, #24]
 80138f0:	e779      	b.n	80137e6 <_dtoa_r+0x816>
 80138f2:	4603      	mov	r3, r0
 80138f4:	e7f4      	b.n	80138e0 <_dtoa_r+0x910>
 80138f6:	9b04      	ldr	r3, [sp, #16]
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	dc37      	bgt.n	801396c <_dtoa_r+0x99c>
 80138fc:	9b07      	ldr	r3, [sp, #28]
 80138fe:	2b02      	cmp	r3, #2
 8013900:	dd34      	ble.n	801396c <_dtoa_r+0x99c>
 8013902:	9b04      	ldr	r3, [sp, #16]
 8013904:	9301      	str	r3, [sp, #4]
 8013906:	9b01      	ldr	r3, [sp, #4]
 8013908:	b963      	cbnz	r3, 8013924 <_dtoa_r+0x954>
 801390a:	4631      	mov	r1, r6
 801390c:	2205      	movs	r2, #5
 801390e:	4620      	mov	r0, r4
 8013910:	f000 fab2 	bl	8013e78 <__multadd>
 8013914:	4601      	mov	r1, r0
 8013916:	4606      	mov	r6, r0
 8013918:	4650      	mov	r0, sl
 801391a:	f000 fcc7 	bl	80142ac <__mcmp>
 801391e:	2800      	cmp	r0, #0
 8013920:	f73f adbb 	bgt.w	801349a <_dtoa_r+0x4ca>
 8013924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013926:	9d00      	ldr	r5, [sp, #0]
 8013928:	ea6f 0b03 	mvn.w	fp, r3
 801392c:	f04f 0800 	mov.w	r8, #0
 8013930:	4631      	mov	r1, r6
 8013932:	4620      	mov	r0, r4
 8013934:	f000 fa7e 	bl	8013e34 <_Bfree>
 8013938:	2f00      	cmp	r7, #0
 801393a:	f43f aeab 	beq.w	8013694 <_dtoa_r+0x6c4>
 801393e:	f1b8 0f00 	cmp.w	r8, #0
 8013942:	d005      	beq.n	8013950 <_dtoa_r+0x980>
 8013944:	45b8      	cmp	r8, r7
 8013946:	d003      	beq.n	8013950 <_dtoa_r+0x980>
 8013948:	4641      	mov	r1, r8
 801394a:	4620      	mov	r0, r4
 801394c:	f000 fa72 	bl	8013e34 <_Bfree>
 8013950:	4639      	mov	r1, r7
 8013952:	4620      	mov	r0, r4
 8013954:	f000 fa6e 	bl	8013e34 <_Bfree>
 8013958:	e69c      	b.n	8013694 <_dtoa_r+0x6c4>
 801395a:	2600      	movs	r6, #0
 801395c:	4637      	mov	r7, r6
 801395e:	e7e1      	b.n	8013924 <_dtoa_r+0x954>
 8013960:	46bb      	mov	fp, r7
 8013962:	4637      	mov	r7, r6
 8013964:	e599      	b.n	801349a <_dtoa_r+0x4ca>
 8013966:	bf00      	nop
 8013968:	40240000 	.word	0x40240000
 801396c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801396e:	2b00      	cmp	r3, #0
 8013970:	f000 80c8 	beq.w	8013b04 <_dtoa_r+0xb34>
 8013974:	9b04      	ldr	r3, [sp, #16]
 8013976:	9301      	str	r3, [sp, #4]
 8013978:	2d00      	cmp	r5, #0
 801397a:	dd05      	ble.n	8013988 <_dtoa_r+0x9b8>
 801397c:	4639      	mov	r1, r7
 801397e:	462a      	mov	r2, r5
 8013980:	4620      	mov	r0, r4
 8013982:	f000 fc27 	bl	80141d4 <__lshift>
 8013986:	4607      	mov	r7, r0
 8013988:	f1b8 0f00 	cmp.w	r8, #0
 801398c:	d05b      	beq.n	8013a46 <_dtoa_r+0xa76>
 801398e:	6879      	ldr	r1, [r7, #4]
 8013990:	4620      	mov	r0, r4
 8013992:	f000 fa0f 	bl	8013db4 <_Balloc>
 8013996:	4605      	mov	r5, r0
 8013998:	b928      	cbnz	r0, 80139a6 <_dtoa_r+0x9d6>
 801399a:	4b83      	ldr	r3, [pc, #524]	; (8013ba8 <_dtoa_r+0xbd8>)
 801399c:	4602      	mov	r2, r0
 801399e:	f240 21ef 	movw	r1, #751	; 0x2ef
 80139a2:	f7ff bb2e 	b.w	8013002 <_dtoa_r+0x32>
 80139a6:	693a      	ldr	r2, [r7, #16]
 80139a8:	3202      	adds	r2, #2
 80139aa:	0092      	lsls	r2, r2, #2
 80139ac:	f107 010c 	add.w	r1, r7, #12
 80139b0:	300c      	adds	r0, #12
 80139b2:	f7ff fa74 	bl	8012e9e <memcpy>
 80139b6:	2201      	movs	r2, #1
 80139b8:	4629      	mov	r1, r5
 80139ba:	4620      	mov	r0, r4
 80139bc:	f000 fc0a 	bl	80141d4 <__lshift>
 80139c0:	9b00      	ldr	r3, [sp, #0]
 80139c2:	3301      	adds	r3, #1
 80139c4:	9304      	str	r3, [sp, #16]
 80139c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80139ca:	4413      	add	r3, r2
 80139cc:	9308      	str	r3, [sp, #32]
 80139ce:	9b02      	ldr	r3, [sp, #8]
 80139d0:	f003 0301 	and.w	r3, r3, #1
 80139d4:	46b8      	mov	r8, r7
 80139d6:	9306      	str	r3, [sp, #24]
 80139d8:	4607      	mov	r7, r0
 80139da:	9b04      	ldr	r3, [sp, #16]
 80139dc:	4631      	mov	r1, r6
 80139de:	3b01      	subs	r3, #1
 80139e0:	4650      	mov	r0, sl
 80139e2:	9301      	str	r3, [sp, #4]
 80139e4:	f7ff fa69 	bl	8012eba <quorem>
 80139e8:	4641      	mov	r1, r8
 80139ea:	9002      	str	r0, [sp, #8]
 80139ec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80139f0:	4650      	mov	r0, sl
 80139f2:	f000 fc5b 	bl	80142ac <__mcmp>
 80139f6:	463a      	mov	r2, r7
 80139f8:	9005      	str	r0, [sp, #20]
 80139fa:	4631      	mov	r1, r6
 80139fc:	4620      	mov	r0, r4
 80139fe:	f000 fc71 	bl	80142e4 <__mdiff>
 8013a02:	68c2      	ldr	r2, [r0, #12]
 8013a04:	4605      	mov	r5, r0
 8013a06:	bb02      	cbnz	r2, 8013a4a <_dtoa_r+0xa7a>
 8013a08:	4601      	mov	r1, r0
 8013a0a:	4650      	mov	r0, sl
 8013a0c:	f000 fc4e 	bl	80142ac <__mcmp>
 8013a10:	4602      	mov	r2, r0
 8013a12:	4629      	mov	r1, r5
 8013a14:	4620      	mov	r0, r4
 8013a16:	9209      	str	r2, [sp, #36]	; 0x24
 8013a18:	f000 fa0c 	bl	8013e34 <_Bfree>
 8013a1c:	9b07      	ldr	r3, [sp, #28]
 8013a1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013a20:	9d04      	ldr	r5, [sp, #16]
 8013a22:	ea43 0102 	orr.w	r1, r3, r2
 8013a26:	9b06      	ldr	r3, [sp, #24]
 8013a28:	4319      	orrs	r1, r3
 8013a2a:	d110      	bne.n	8013a4e <_dtoa_r+0xa7e>
 8013a2c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013a30:	d029      	beq.n	8013a86 <_dtoa_r+0xab6>
 8013a32:	9b05      	ldr	r3, [sp, #20]
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	dd02      	ble.n	8013a3e <_dtoa_r+0xa6e>
 8013a38:	9b02      	ldr	r3, [sp, #8]
 8013a3a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8013a3e:	9b01      	ldr	r3, [sp, #4]
 8013a40:	f883 9000 	strb.w	r9, [r3]
 8013a44:	e774      	b.n	8013930 <_dtoa_r+0x960>
 8013a46:	4638      	mov	r0, r7
 8013a48:	e7ba      	b.n	80139c0 <_dtoa_r+0x9f0>
 8013a4a:	2201      	movs	r2, #1
 8013a4c:	e7e1      	b.n	8013a12 <_dtoa_r+0xa42>
 8013a4e:	9b05      	ldr	r3, [sp, #20]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	db04      	blt.n	8013a5e <_dtoa_r+0xa8e>
 8013a54:	9907      	ldr	r1, [sp, #28]
 8013a56:	430b      	orrs	r3, r1
 8013a58:	9906      	ldr	r1, [sp, #24]
 8013a5a:	430b      	orrs	r3, r1
 8013a5c:	d120      	bne.n	8013aa0 <_dtoa_r+0xad0>
 8013a5e:	2a00      	cmp	r2, #0
 8013a60:	dded      	ble.n	8013a3e <_dtoa_r+0xa6e>
 8013a62:	4651      	mov	r1, sl
 8013a64:	2201      	movs	r2, #1
 8013a66:	4620      	mov	r0, r4
 8013a68:	f000 fbb4 	bl	80141d4 <__lshift>
 8013a6c:	4631      	mov	r1, r6
 8013a6e:	4682      	mov	sl, r0
 8013a70:	f000 fc1c 	bl	80142ac <__mcmp>
 8013a74:	2800      	cmp	r0, #0
 8013a76:	dc03      	bgt.n	8013a80 <_dtoa_r+0xab0>
 8013a78:	d1e1      	bne.n	8013a3e <_dtoa_r+0xa6e>
 8013a7a:	f019 0f01 	tst.w	r9, #1
 8013a7e:	d0de      	beq.n	8013a3e <_dtoa_r+0xa6e>
 8013a80:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013a84:	d1d8      	bne.n	8013a38 <_dtoa_r+0xa68>
 8013a86:	9a01      	ldr	r2, [sp, #4]
 8013a88:	2339      	movs	r3, #57	; 0x39
 8013a8a:	7013      	strb	r3, [r2, #0]
 8013a8c:	462b      	mov	r3, r5
 8013a8e:	461d      	mov	r5, r3
 8013a90:	3b01      	subs	r3, #1
 8013a92:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013a96:	2a39      	cmp	r2, #57	; 0x39
 8013a98:	d06c      	beq.n	8013b74 <_dtoa_r+0xba4>
 8013a9a:	3201      	adds	r2, #1
 8013a9c:	701a      	strb	r2, [r3, #0]
 8013a9e:	e747      	b.n	8013930 <_dtoa_r+0x960>
 8013aa0:	2a00      	cmp	r2, #0
 8013aa2:	dd07      	ble.n	8013ab4 <_dtoa_r+0xae4>
 8013aa4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013aa8:	d0ed      	beq.n	8013a86 <_dtoa_r+0xab6>
 8013aaa:	9a01      	ldr	r2, [sp, #4]
 8013aac:	f109 0301 	add.w	r3, r9, #1
 8013ab0:	7013      	strb	r3, [r2, #0]
 8013ab2:	e73d      	b.n	8013930 <_dtoa_r+0x960>
 8013ab4:	9b04      	ldr	r3, [sp, #16]
 8013ab6:	9a08      	ldr	r2, [sp, #32]
 8013ab8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8013abc:	4293      	cmp	r3, r2
 8013abe:	d043      	beq.n	8013b48 <_dtoa_r+0xb78>
 8013ac0:	4651      	mov	r1, sl
 8013ac2:	2300      	movs	r3, #0
 8013ac4:	220a      	movs	r2, #10
 8013ac6:	4620      	mov	r0, r4
 8013ac8:	f000 f9d6 	bl	8013e78 <__multadd>
 8013acc:	45b8      	cmp	r8, r7
 8013ace:	4682      	mov	sl, r0
 8013ad0:	f04f 0300 	mov.w	r3, #0
 8013ad4:	f04f 020a 	mov.w	r2, #10
 8013ad8:	4641      	mov	r1, r8
 8013ada:	4620      	mov	r0, r4
 8013adc:	d107      	bne.n	8013aee <_dtoa_r+0xb1e>
 8013ade:	f000 f9cb 	bl	8013e78 <__multadd>
 8013ae2:	4680      	mov	r8, r0
 8013ae4:	4607      	mov	r7, r0
 8013ae6:	9b04      	ldr	r3, [sp, #16]
 8013ae8:	3301      	adds	r3, #1
 8013aea:	9304      	str	r3, [sp, #16]
 8013aec:	e775      	b.n	80139da <_dtoa_r+0xa0a>
 8013aee:	f000 f9c3 	bl	8013e78 <__multadd>
 8013af2:	4639      	mov	r1, r7
 8013af4:	4680      	mov	r8, r0
 8013af6:	2300      	movs	r3, #0
 8013af8:	220a      	movs	r2, #10
 8013afa:	4620      	mov	r0, r4
 8013afc:	f000 f9bc 	bl	8013e78 <__multadd>
 8013b00:	4607      	mov	r7, r0
 8013b02:	e7f0      	b.n	8013ae6 <_dtoa_r+0xb16>
 8013b04:	9b04      	ldr	r3, [sp, #16]
 8013b06:	9301      	str	r3, [sp, #4]
 8013b08:	9d00      	ldr	r5, [sp, #0]
 8013b0a:	4631      	mov	r1, r6
 8013b0c:	4650      	mov	r0, sl
 8013b0e:	f7ff f9d4 	bl	8012eba <quorem>
 8013b12:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8013b16:	9b00      	ldr	r3, [sp, #0]
 8013b18:	f805 9b01 	strb.w	r9, [r5], #1
 8013b1c:	1aea      	subs	r2, r5, r3
 8013b1e:	9b01      	ldr	r3, [sp, #4]
 8013b20:	4293      	cmp	r3, r2
 8013b22:	dd07      	ble.n	8013b34 <_dtoa_r+0xb64>
 8013b24:	4651      	mov	r1, sl
 8013b26:	2300      	movs	r3, #0
 8013b28:	220a      	movs	r2, #10
 8013b2a:	4620      	mov	r0, r4
 8013b2c:	f000 f9a4 	bl	8013e78 <__multadd>
 8013b30:	4682      	mov	sl, r0
 8013b32:	e7ea      	b.n	8013b0a <_dtoa_r+0xb3a>
 8013b34:	9b01      	ldr	r3, [sp, #4]
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	bfc8      	it	gt
 8013b3a:	461d      	movgt	r5, r3
 8013b3c:	9b00      	ldr	r3, [sp, #0]
 8013b3e:	bfd8      	it	le
 8013b40:	2501      	movle	r5, #1
 8013b42:	441d      	add	r5, r3
 8013b44:	f04f 0800 	mov.w	r8, #0
 8013b48:	4651      	mov	r1, sl
 8013b4a:	2201      	movs	r2, #1
 8013b4c:	4620      	mov	r0, r4
 8013b4e:	f000 fb41 	bl	80141d4 <__lshift>
 8013b52:	4631      	mov	r1, r6
 8013b54:	4682      	mov	sl, r0
 8013b56:	f000 fba9 	bl	80142ac <__mcmp>
 8013b5a:	2800      	cmp	r0, #0
 8013b5c:	dc96      	bgt.n	8013a8c <_dtoa_r+0xabc>
 8013b5e:	d102      	bne.n	8013b66 <_dtoa_r+0xb96>
 8013b60:	f019 0f01 	tst.w	r9, #1
 8013b64:	d192      	bne.n	8013a8c <_dtoa_r+0xabc>
 8013b66:	462b      	mov	r3, r5
 8013b68:	461d      	mov	r5, r3
 8013b6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013b6e:	2a30      	cmp	r2, #48	; 0x30
 8013b70:	d0fa      	beq.n	8013b68 <_dtoa_r+0xb98>
 8013b72:	e6dd      	b.n	8013930 <_dtoa_r+0x960>
 8013b74:	9a00      	ldr	r2, [sp, #0]
 8013b76:	429a      	cmp	r2, r3
 8013b78:	d189      	bne.n	8013a8e <_dtoa_r+0xabe>
 8013b7a:	f10b 0b01 	add.w	fp, fp, #1
 8013b7e:	2331      	movs	r3, #49	; 0x31
 8013b80:	e796      	b.n	8013ab0 <_dtoa_r+0xae0>
 8013b82:	4b0a      	ldr	r3, [pc, #40]	; (8013bac <_dtoa_r+0xbdc>)
 8013b84:	f7ff ba99 	b.w	80130ba <_dtoa_r+0xea>
 8013b88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	f47f aa6d 	bne.w	801306a <_dtoa_r+0x9a>
 8013b90:	4b07      	ldr	r3, [pc, #28]	; (8013bb0 <_dtoa_r+0xbe0>)
 8013b92:	f7ff ba92 	b.w	80130ba <_dtoa_r+0xea>
 8013b96:	9b01      	ldr	r3, [sp, #4]
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	dcb5      	bgt.n	8013b08 <_dtoa_r+0xb38>
 8013b9c:	9b07      	ldr	r3, [sp, #28]
 8013b9e:	2b02      	cmp	r3, #2
 8013ba0:	f73f aeb1 	bgt.w	8013906 <_dtoa_r+0x936>
 8013ba4:	e7b0      	b.n	8013b08 <_dtoa_r+0xb38>
 8013ba6:	bf00      	nop
 8013ba8:	08015910 	.word	0x08015910
 8013bac:	08015870 	.word	0x08015870
 8013bb0:	08015894 	.word	0x08015894

08013bb4 <_free_r>:
 8013bb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013bb6:	2900      	cmp	r1, #0
 8013bb8:	d044      	beq.n	8013c44 <_free_r+0x90>
 8013bba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013bbe:	9001      	str	r0, [sp, #4]
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	f1a1 0404 	sub.w	r4, r1, #4
 8013bc6:	bfb8      	it	lt
 8013bc8:	18e4      	addlt	r4, r4, r3
 8013bca:	f000 f8e7 	bl	8013d9c <__malloc_lock>
 8013bce:	4a1e      	ldr	r2, [pc, #120]	; (8013c48 <_free_r+0x94>)
 8013bd0:	9801      	ldr	r0, [sp, #4]
 8013bd2:	6813      	ldr	r3, [r2, #0]
 8013bd4:	b933      	cbnz	r3, 8013be4 <_free_r+0x30>
 8013bd6:	6063      	str	r3, [r4, #4]
 8013bd8:	6014      	str	r4, [r2, #0]
 8013bda:	b003      	add	sp, #12
 8013bdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013be0:	f000 b8e2 	b.w	8013da8 <__malloc_unlock>
 8013be4:	42a3      	cmp	r3, r4
 8013be6:	d908      	bls.n	8013bfa <_free_r+0x46>
 8013be8:	6825      	ldr	r5, [r4, #0]
 8013bea:	1961      	adds	r1, r4, r5
 8013bec:	428b      	cmp	r3, r1
 8013bee:	bf01      	itttt	eq
 8013bf0:	6819      	ldreq	r1, [r3, #0]
 8013bf2:	685b      	ldreq	r3, [r3, #4]
 8013bf4:	1949      	addeq	r1, r1, r5
 8013bf6:	6021      	streq	r1, [r4, #0]
 8013bf8:	e7ed      	b.n	8013bd6 <_free_r+0x22>
 8013bfa:	461a      	mov	r2, r3
 8013bfc:	685b      	ldr	r3, [r3, #4]
 8013bfe:	b10b      	cbz	r3, 8013c04 <_free_r+0x50>
 8013c00:	42a3      	cmp	r3, r4
 8013c02:	d9fa      	bls.n	8013bfa <_free_r+0x46>
 8013c04:	6811      	ldr	r1, [r2, #0]
 8013c06:	1855      	adds	r5, r2, r1
 8013c08:	42a5      	cmp	r5, r4
 8013c0a:	d10b      	bne.n	8013c24 <_free_r+0x70>
 8013c0c:	6824      	ldr	r4, [r4, #0]
 8013c0e:	4421      	add	r1, r4
 8013c10:	1854      	adds	r4, r2, r1
 8013c12:	42a3      	cmp	r3, r4
 8013c14:	6011      	str	r1, [r2, #0]
 8013c16:	d1e0      	bne.n	8013bda <_free_r+0x26>
 8013c18:	681c      	ldr	r4, [r3, #0]
 8013c1a:	685b      	ldr	r3, [r3, #4]
 8013c1c:	6053      	str	r3, [r2, #4]
 8013c1e:	440c      	add	r4, r1
 8013c20:	6014      	str	r4, [r2, #0]
 8013c22:	e7da      	b.n	8013bda <_free_r+0x26>
 8013c24:	d902      	bls.n	8013c2c <_free_r+0x78>
 8013c26:	230c      	movs	r3, #12
 8013c28:	6003      	str	r3, [r0, #0]
 8013c2a:	e7d6      	b.n	8013bda <_free_r+0x26>
 8013c2c:	6825      	ldr	r5, [r4, #0]
 8013c2e:	1961      	adds	r1, r4, r5
 8013c30:	428b      	cmp	r3, r1
 8013c32:	bf04      	itt	eq
 8013c34:	6819      	ldreq	r1, [r3, #0]
 8013c36:	685b      	ldreq	r3, [r3, #4]
 8013c38:	6063      	str	r3, [r4, #4]
 8013c3a:	bf04      	itt	eq
 8013c3c:	1949      	addeq	r1, r1, r5
 8013c3e:	6021      	streq	r1, [r4, #0]
 8013c40:	6054      	str	r4, [r2, #4]
 8013c42:	e7ca      	b.n	8013bda <_free_r+0x26>
 8013c44:	b003      	add	sp, #12
 8013c46:	bd30      	pop	{r4, r5, pc}
 8013c48:	20008158 	.word	0x20008158

08013c4c <malloc>:
 8013c4c:	4b02      	ldr	r3, [pc, #8]	; (8013c58 <malloc+0xc>)
 8013c4e:	4601      	mov	r1, r0
 8013c50:	6818      	ldr	r0, [r3, #0]
 8013c52:	f000 b823 	b.w	8013c9c <_malloc_r>
 8013c56:	bf00      	nop
 8013c58:	20000088 	.word	0x20000088

08013c5c <sbrk_aligned>:
 8013c5c:	b570      	push	{r4, r5, r6, lr}
 8013c5e:	4e0e      	ldr	r6, [pc, #56]	; (8013c98 <sbrk_aligned+0x3c>)
 8013c60:	460c      	mov	r4, r1
 8013c62:	6831      	ldr	r1, [r6, #0]
 8013c64:	4605      	mov	r5, r0
 8013c66:	b911      	cbnz	r1, 8013c6e <sbrk_aligned+0x12>
 8013c68:	f001 f810 	bl	8014c8c <_sbrk_r>
 8013c6c:	6030      	str	r0, [r6, #0]
 8013c6e:	4621      	mov	r1, r4
 8013c70:	4628      	mov	r0, r5
 8013c72:	f001 f80b 	bl	8014c8c <_sbrk_r>
 8013c76:	1c43      	adds	r3, r0, #1
 8013c78:	d00a      	beq.n	8013c90 <sbrk_aligned+0x34>
 8013c7a:	1cc4      	adds	r4, r0, #3
 8013c7c:	f024 0403 	bic.w	r4, r4, #3
 8013c80:	42a0      	cmp	r0, r4
 8013c82:	d007      	beq.n	8013c94 <sbrk_aligned+0x38>
 8013c84:	1a21      	subs	r1, r4, r0
 8013c86:	4628      	mov	r0, r5
 8013c88:	f001 f800 	bl	8014c8c <_sbrk_r>
 8013c8c:	3001      	adds	r0, #1
 8013c8e:	d101      	bne.n	8013c94 <sbrk_aligned+0x38>
 8013c90:	f04f 34ff 	mov.w	r4, #4294967295
 8013c94:	4620      	mov	r0, r4
 8013c96:	bd70      	pop	{r4, r5, r6, pc}
 8013c98:	2000815c 	.word	0x2000815c

08013c9c <_malloc_r>:
 8013c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ca0:	1ccd      	adds	r5, r1, #3
 8013ca2:	f025 0503 	bic.w	r5, r5, #3
 8013ca6:	3508      	adds	r5, #8
 8013ca8:	2d0c      	cmp	r5, #12
 8013caa:	bf38      	it	cc
 8013cac:	250c      	movcc	r5, #12
 8013cae:	2d00      	cmp	r5, #0
 8013cb0:	4607      	mov	r7, r0
 8013cb2:	db01      	blt.n	8013cb8 <_malloc_r+0x1c>
 8013cb4:	42a9      	cmp	r1, r5
 8013cb6:	d905      	bls.n	8013cc4 <_malloc_r+0x28>
 8013cb8:	230c      	movs	r3, #12
 8013cba:	603b      	str	r3, [r7, #0]
 8013cbc:	2600      	movs	r6, #0
 8013cbe:	4630      	mov	r0, r6
 8013cc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013cc4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8013d98 <_malloc_r+0xfc>
 8013cc8:	f000 f868 	bl	8013d9c <__malloc_lock>
 8013ccc:	f8d8 3000 	ldr.w	r3, [r8]
 8013cd0:	461c      	mov	r4, r3
 8013cd2:	bb5c      	cbnz	r4, 8013d2c <_malloc_r+0x90>
 8013cd4:	4629      	mov	r1, r5
 8013cd6:	4638      	mov	r0, r7
 8013cd8:	f7ff ffc0 	bl	8013c5c <sbrk_aligned>
 8013cdc:	1c43      	adds	r3, r0, #1
 8013cde:	4604      	mov	r4, r0
 8013ce0:	d155      	bne.n	8013d8e <_malloc_r+0xf2>
 8013ce2:	f8d8 4000 	ldr.w	r4, [r8]
 8013ce6:	4626      	mov	r6, r4
 8013ce8:	2e00      	cmp	r6, #0
 8013cea:	d145      	bne.n	8013d78 <_malloc_r+0xdc>
 8013cec:	2c00      	cmp	r4, #0
 8013cee:	d048      	beq.n	8013d82 <_malloc_r+0xe6>
 8013cf0:	6823      	ldr	r3, [r4, #0]
 8013cf2:	4631      	mov	r1, r6
 8013cf4:	4638      	mov	r0, r7
 8013cf6:	eb04 0903 	add.w	r9, r4, r3
 8013cfa:	f000 ffc7 	bl	8014c8c <_sbrk_r>
 8013cfe:	4581      	cmp	r9, r0
 8013d00:	d13f      	bne.n	8013d82 <_malloc_r+0xe6>
 8013d02:	6821      	ldr	r1, [r4, #0]
 8013d04:	1a6d      	subs	r5, r5, r1
 8013d06:	4629      	mov	r1, r5
 8013d08:	4638      	mov	r0, r7
 8013d0a:	f7ff ffa7 	bl	8013c5c <sbrk_aligned>
 8013d0e:	3001      	adds	r0, #1
 8013d10:	d037      	beq.n	8013d82 <_malloc_r+0xe6>
 8013d12:	6823      	ldr	r3, [r4, #0]
 8013d14:	442b      	add	r3, r5
 8013d16:	6023      	str	r3, [r4, #0]
 8013d18:	f8d8 3000 	ldr.w	r3, [r8]
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d038      	beq.n	8013d92 <_malloc_r+0xf6>
 8013d20:	685a      	ldr	r2, [r3, #4]
 8013d22:	42a2      	cmp	r2, r4
 8013d24:	d12b      	bne.n	8013d7e <_malloc_r+0xe2>
 8013d26:	2200      	movs	r2, #0
 8013d28:	605a      	str	r2, [r3, #4]
 8013d2a:	e00f      	b.n	8013d4c <_malloc_r+0xb0>
 8013d2c:	6822      	ldr	r2, [r4, #0]
 8013d2e:	1b52      	subs	r2, r2, r5
 8013d30:	d41f      	bmi.n	8013d72 <_malloc_r+0xd6>
 8013d32:	2a0b      	cmp	r2, #11
 8013d34:	d917      	bls.n	8013d66 <_malloc_r+0xca>
 8013d36:	1961      	adds	r1, r4, r5
 8013d38:	42a3      	cmp	r3, r4
 8013d3a:	6025      	str	r5, [r4, #0]
 8013d3c:	bf18      	it	ne
 8013d3e:	6059      	strne	r1, [r3, #4]
 8013d40:	6863      	ldr	r3, [r4, #4]
 8013d42:	bf08      	it	eq
 8013d44:	f8c8 1000 	streq.w	r1, [r8]
 8013d48:	5162      	str	r2, [r4, r5]
 8013d4a:	604b      	str	r3, [r1, #4]
 8013d4c:	4638      	mov	r0, r7
 8013d4e:	f104 060b 	add.w	r6, r4, #11
 8013d52:	f000 f829 	bl	8013da8 <__malloc_unlock>
 8013d56:	f026 0607 	bic.w	r6, r6, #7
 8013d5a:	1d23      	adds	r3, r4, #4
 8013d5c:	1af2      	subs	r2, r6, r3
 8013d5e:	d0ae      	beq.n	8013cbe <_malloc_r+0x22>
 8013d60:	1b9b      	subs	r3, r3, r6
 8013d62:	50a3      	str	r3, [r4, r2]
 8013d64:	e7ab      	b.n	8013cbe <_malloc_r+0x22>
 8013d66:	42a3      	cmp	r3, r4
 8013d68:	6862      	ldr	r2, [r4, #4]
 8013d6a:	d1dd      	bne.n	8013d28 <_malloc_r+0x8c>
 8013d6c:	f8c8 2000 	str.w	r2, [r8]
 8013d70:	e7ec      	b.n	8013d4c <_malloc_r+0xb0>
 8013d72:	4623      	mov	r3, r4
 8013d74:	6864      	ldr	r4, [r4, #4]
 8013d76:	e7ac      	b.n	8013cd2 <_malloc_r+0x36>
 8013d78:	4634      	mov	r4, r6
 8013d7a:	6876      	ldr	r6, [r6, #4]
 8013d7c:	e7b4      	b.n	8013ce8 <_malloc_r+0x4c>
 8013d7e:	4613      	mov	r3, r2
 8013d80:	e7cc      	b.n	8013d1c <_malloc_r+0x80>
 8013d82:	230c      	movs	r3, #12
 8013d84:	603b      	str	r3, [r7, #0]
 8013d86:	4638      	mov	r0, r7
 8013d88:	f000 f80e 	bl	8013da8 <__malloc_unlock>
 8013d8c:	e797      	b.n	8013cbe <_malloc_r+0x22>
 8013d8e:	6025      	str	r5, [r4, #0]
 8013d90:	e7dc      	b.n	8013d4c <_malloc_r+0xb0>
 8013d92:	605b      	str	r3, [r3, #4]
 8013d94:	deff      	udf	#255	; 0xff
 8013d96:	bf00      	nop
 8013d98:	20008158 	.word	0x20008158

08013d9c <__malloc_lock>:
 8013d9c:	4801      	ldr	r0, [pc, #4]	; (8013da4 <__malloc_lock+0x8>)
 8013d9e:	f7ff b87c 	b.w	8012e9a <__retarget_lock_acquire_recursive>
 8013da2:	bf00      	nop
 8013da4:	20008154 	.word	0x20008154

08013da8 <__malloc_unlock>:
 8013da8:	4801      	ldr	r0, [pc, #4]	; (8013db0 <__malloc_unlock+0x8>)
 8013daa:	f7ff b877 	b.w	8012e9c <__retarget_lock_release_recursive>
 8013dae:	bf00      	nop
 8013db0:	20008154 	.word	0x20008154

08013db4 <_Balloc>:
 8013db4:	b570      	push	{r4, r5, r6, lr}
 8013db6:	69c6      	ldr	r6, [r0, #28]
 8013db8:	4604      	mov	r4, r0
 8013dba:	460d      	mov	r5, r1
 8013dbc:	b976      	cbnz	r6, 8013ddc <_Balloc+0x28>
 8013dbe:	2010      	movs	r0, #16
 8013dc0:	f7ff ff44 	bl	8013c4c <malloc>
 8013dc4:	4602      	mov	r2, r0
 8013dc6:	61e0      	str	r0, [r4, #28]
 8013dc8:	b920      	cbnz	r0, 8013dd4 <_Balloc+0x20>
 8013dca:	4b18      	ldr	r3, [pc, #96]	; (8013e2c <_Balloc+0x78>)
 8013dcc:	4818      	ldr	r0, [pc, #96]	; (8013e30 <_Balloc+0x7c>)
 8013dce:	216b      	movs	r1, #107	; 0x6b
 8013dd0:	f000 ff6c 	bl	8014cac <__assert_func>
 8013dd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013dd8:	6006      	str	r6, [r0, #0]
 8013dda:	60c6      	str	r6, [r0, #12]
 8013ddc:	69e6      	ldr	r6, [r4, #28]
 8013dde:	68f3      	ldr	r3, [r6, #12]
 8013de0:	b183      	cbz	r3, 8013e04 <_Balloc+0x50>
 8013de2:	69e3      	ldr	r3, [r4, #28]
 8013de4:	68db      	ldr	r3, [r3, #12]
 8013de6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013dea:	b9b8      	cbnz	r0, 8013e1c <_Balloc+0x68>
 8013dec:	2101      	movs	r1, #1
 8013dee:	fa01 f605 	lsl.w	r6, r1, r5
 8013df2:	1d72      	adds	r2, r6, #5
 8013df4:	0092      	lsls	r2, r2, #2
 8013df6:	4620      	mov	r0, r4
 8013df8:	f000 ff76 	bl	8014ce8 <_calloc_r>
 8013dfc:	b160      	cbz	r0, 8013e18 <_Balloc+0x64>
 8013dfe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013e02:	e00e      	b.n	8013e22 <_Balloc+0x6e>
 8013e04:	2221      	movs	r2, #33	; 0x21
 8013e06:	2104      	movs	r1, #4
 8013e08:	4620      	mov	r0, r4
 8013e0a:	f000 ff6d 	bl	8014ce8 <_calloc_r>
 8013e0e:	69e3      	ldr	r3, [r4, #28]
 8013e10:	60f0      	str	r0, [r6, #12]
 8013e12:	68db      	ldr	r3, [r3, #12]
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d1e4      	bne.n	8013de2 <_Balloc+0x2e>
 8013e18:	2000      	movs	r0, #0
 8013e1a:	bd70      	pop	{r4, r5, r6, pc}
 8013e1c:	6802      	ldr	r2, [r0, #0]
 8013e1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013e22:	2300      	movs	r3, #0
 8013e24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013e28:	e7f7      	b.n	8013e1a <_Balloc+0x66>
 8013e2a:	bf00      	nop
 8013e2c:	080158a1 	.word	0x080158a1
 8013e30:	08015921 	.word	0x08015921

08013e34 <_Bfree>:
 8013e34:	b570      	push	{r4, r5, r6, lr}
 8013e36:	69c6      	ldr	r6, [r0, #28]
 8013e38:	4605      	mov	r5, r0
 8013e3a:	460c      	mov	r4, r1
 8013e3c:	b976      	cbnz	r6, 8013e5c <_Bfree+0x28>
 8013e3e:	2010      	movs	r0, #16
 8013e40:	f7ff ff04 	bl	8013c4c <malloc>
 8013e44:	4602      	mov	r2, r0
 8013e46:	61e8      	str	r0, [r5, #28]
 8013e48:	b920      	cbnz	r0, 8013e54 <_Bfree+0x20>
 8013e4a:	4b09      	ldr	r3, [pc, #36]	; (8013e70 <_Bfree+0x3c>)
 8013e4c:	4809      	ldr	r0, [pc, #36]	; (8013e74 <_Bfree+0x40>)
 8013e4e:	218f      	movs	r1, #143	; 0x8f
 8013e50:	f000 ff2c 	bl	8014cac <__assert_func>
 8013e54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013e58:	6006      	str	r6, [r0, #0]
 8013e5a:	60c6      	str	r6, [r0, #12]
 8013e5c:	b13c      	cbz	r4, 8013e6e <_Bfree+0x3a>
 8013e5e:	69eb      	ldr	r3, [r5, #28]
 8013e60:	6862      	ldr	r2, [r4, #4]
 8013e62:	68db      	ldr	r3, [r3, #12]
 8013e64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013e68:	6021      	str	r1, [r4, #0]
 8013e6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013e6e:	bd70      	pop	{r4, r5, r6, pc}
 8013e70:	080158a1 	.word	0x080158a1
 8013e74:	08015921 	.word	0x08015921

08013e78 <__multadd>:
 8013e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e7c:	690d      	ldr	r5, [r1, #16]
 8013e7e:	4607      	mov	r7, r0
 8013e80:	460c      	mov	r4, r1
 8013e82:	461e      	mov	r6, r3
 8013e84:	f101 0c14 	add.w	ip, r1, #20
 8013e88:	2000      	movs	r0, #0
 8013e8a:	f8dc 3000 	ldr.w	r3, [ip]
 8013e8e:	b299      	uxth	r1, r3
 8013e90:	fb02 6101 	mla	r1, r2, r1, r6
 8013e94:	0c1e      	lsrs	r6, r3, #16
 8013e96:	0c0b      	lsrs	r3, r1, #16
 8013e98:	fb02 3306 	mla	r3, r2, r6, r3
 8013e9c:	b289      	uxth	r1, r1
 8013e9e:	3001      	adds	r0, #1
 8013ea0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013ea4:	4285      	cmp	r5, r0
 8013ea6:	f84c 1b04 	str.w	r1, [ip], #4
 8013eaa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013eae:	dcec      	bgt.n	8013e8a <__multadd+0x12>
 8013eb0:	b30e      	cbz	r6, 8013ef6 <__multadd+0x7e>
 8013eb2:	68a3      	ldr	r3, [r4, #8]
 8013eb4:	42ab      	cmp	r3, r5
 8013eb6:	dc19      	bgt.n	8013eec <__multadd+0x74>
 8013eb8:	6861      	ldr	r1, [r4, #4]
 8013eba:	4638      	mov	r0, r7
 8013ebc:	3101      	adds	r1, #1
 8013ebe:	f7ff ff79 	bl	8013db4 <_Balloc>
 8013ec2:	4680      	mov	r8, r0
 8013ec4:	b928      	cbnz	r0, 8013ed2 <__multadd+0x5a>
 8013ec6:	4602      	mov	r2, r0
 8013ec8:	4b0c      	ldr	r3, [pc, #48]	; (8013efc <__multadd+0x84>)
 8013eca:	480d      	ldr	r0, [pc, #52]	; (8013f00 <__multadd+0x88>)
 8013ecc:	21ba      	movs	r1, #186	; 0xba
 8013ece:	f000 feed 	bl	8014cac <__assert_func>
 8013ed2:	6922      	ldr	r2, [r4, #16]
 8013ed4:	3202      	adds	r2, #2
 8013ed6:	f104 010c 	add.w	r1, r4, #12
 8013eda:	0092      	lsls	r2, r2, #2
 8013edc:	300c      	adds	r0, #12
 8013ede:	f7fe ffde 	bl	8012e9e <memcpy>
 8013ee2:	4621      	mov	r1, r4
 8013ee4:	4638      	mov	r0, r7
 8013ee6:	f7ff ffa5 	bl	8013e34 <_Bfree>
 8013eea:	4644      	mov	r4, r8
 8013eec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013ef0:	3501      	adds	r5, #1
 8013ef2:	615e      	str	r6, [r3, #20]
 8013ef4:	6125      	str	r5, [r4, #16]
 8013ef6:	4620      	mov	r0, r4
 8013ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013efc:	08015910 	.word	0x08015910
 8013f00:	08015921 	.word	0x08015921

08013f04 <__hi0bits>:
 8013f04:	0c03      	lsrs	r3, r0, #16
 8013f06:	041b      	lsls	r3, r3, #16
 8013f08:	b9d3      	cbnz	r3, 8013f40 <__hi0bits+0x3c>
 8013f0a:	0400      	lsls	r0, r0, #16
 8013f0c:	2310      	movs	r3, #16
 8013f0e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013f12:	bf04      	itt	eq
 8013f14:	0200      	lsleq	r0, r0, #8
 8013f16:	3308      	addeq	r3, #8
 8013f18:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013f1c:	bf04      	itt	eq
 8013f1e:	0100      	lsleq	r0, r0, #4
 8013f20:	3304      	addeq	r3, #4
 8013f22:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013f26:	bf04      	itt	eq
 8013f28:	0080      	lsleq	r0, r0, #2
 8013f2a:	3302      	addeq	r3, #2
 8013f2c:	2800      	cmp	r0, #0
 8013f2e:	db05      	blt.n	8013f3c <__hi0bits+0x38>
 8013f30:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013f34:	f103 0301 	add.w	r3, r3, #1
 8013f38:	bf08      	it	eq
 8013f3a:	2320      	moveq	r3, #32
 8013f3c:	4618      	mov	r0, r3
 8013f3e:	4770      	bx	lr
 8013f40:	2300      	movs	r3, #0
 8013f42:	e7e4      	b.n	8013f0e <__hi0bits+0xa>

08013f44 <__lo0bits>:
 8013f44:	6803      	ldr	r3, [r0, #0]
 8013f46:	f013 0207 	ands.w	r2, r3, #7
 8013f4a:	d00c      	beq.n	8013f66 <__lo0bits+0x22>
 8013f4c:	07d9      	lsls	r1, r3, #31
 8013f4e:	d422      	bmi.n	8013f96 <__lo0bits+0x52>
 8013f50:	079a      	lsls	r2, r3, #30
 8013f52:	bf49      	itett	mi
 8013f54:	085b      	lsrmi	r3, r3, #1
 8013f56:	089b      	lsrpl	r3, r3, #2
 8013f58:	6003      	strmi	r3, [r0, #0]
 8013f5a:	2201      	movmi	r2, #1
 8013f5c:	bf5c      	itt	pl
 8013f5e:	6003      	strpl	r3, [r0, #0]
 8013f60:	2202      	movpl	r2, #2
 8013f62:	4610      	mov	r0, r2
 8013f64:	4770      	bx	lr
 8013f66:	b299      	uxth	r1, r3
 8013f68:	b909      	cbnz	r1, 8013f6e <__lo0bits+0x2a>
 8013f6a:	0c1b      	lsrs	r3, r3, #16
 8013f6c:	2210      	movs	r2, #16
 8013f6e:	b2d9      	uxtb	r1, r3
 8013f70:	b909      	cbnz	r1, 8013f76 <__lo0bits+0x32>
 8013f72:	3208      	adds	r2, #8
 8013f74:	0a1b      	lsrs	r3, r3, #8
 8013f76:	0719      	lsls	r1, r3, #28
 8013f78:	bf04      	itt	eq
 8013f7a:	091b      	lsreq	r3, r3, #4
 8013f7c:	3204      	addeq	r2, #4
 8013f7e:	0799      	lsls	r1, r3, #30
 8013f80:	bf04      	itt	eq
 8013f82:	089b      	lsreq	r3, r3, #2
 8013f84:	3202      	addeq	r2, #2
 8013f86:	07d9      	lsls	r1, r3, #31
 8013f88:	d403      	bmi.n	8013f92 <__lo0bits+0x4e>
 8013f8a:	085b      	lsrs	r3, r3, #1
 8013f8c:	f102 0201 	add.w	r2, r2, #1
 8013f90:	d003      	beq.n	8013f9a <__lo0bits+0x56>
 8013f92:	6003      	str	r3, [r0, #0]
 8013f94:	e7e5      	b.n	8013f62 <__lo0bits+0x1e>
 8013f96:	2200      	movs	r2, #0
 8013f98:	e7e3      	b.n	8013f62 <__lo0bits+0x1e>
 8013f9a:	2220      	movs	r2, #32
 8013f9c:	e7e1      	b.n	8013f62 <__lo0bits+0x1e>
	...

08013fa0 <__i2b>:
 8013fa0:	b510      	push	{r4, lr}
 8013fa2:	460c      	mov	r4, r1
 8013fa4:	2101      	movs	r1, #1
 8013fa6:	f7ff ff05 	bl	8013db4 <_Balloc>
 8013faa:	4602      	mov	r2, r0
 8013fac:	b928      	cbnz	r0, 8013fba <__i2b+0x1a>
 8013fae:	4b05      	ldr	r3, [pc, #20]	; (8013fc4 <__i2b+0x24>)
 8013fb0:	4805      	ldr	r0, [pc, #20]	; (8013fc8 <__i2b+0x28>)
 8013fb2:	f240 1145 	movw	r1, #325	; 0x145
 8013fb6:	f000 fe79 	bl	8014cac <__assert_func>
 8013fba:	2301      	movs	r3, #1
 8013fbc:	6144      	str	r4, [r0, #20]
 8013fbe:	6103      	str	r3, [r0, #16]
 8013fc0:	bd10      	pop	{r4, pc}
 8013fc2:	bf00      	nop
 8013fc4:	08015910 	.word	0x08015910
 8013fc8:	08015921 	.word	0x08015921

08013fcc <__multiply>:
 8013fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fd0:	4691      	mov	r9, r2
 8013fd2:	690a      	ldr	r2, [r1, #16]
 8013fd4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013fd8:	429a      	cmp	r2, r3
 8013fda:	bfb8      	it	lt
 8013fdc:	460b      	movlt	r3, r1
 8013fde:	460c      	mov	r4, r1
 8013fe0:	bfbc      	itt	lt
 8013fe2:	464c      	movlt	r4, r9
 8013fe4:	4699      	movlt	r9, r3
 8013fe6:	6927      	ldr	r7, [r4, #16]
 8013fe8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013fec:	68a3      	ldr	r3, [r4, #8]
 8013fee:	6861      	ldr	r1, [r4, #4]
 8013ff0:	eb07 060a 	add.w	r6, r7, sl
 8013ff4:	42b3      	cmp	r3, r6
 8013ff6:	b085      	sub	sp, #20
 8013ff8:	bfb8      	it	lt
 8013ffa:	3101      	addlt	r1, #1
 8013ffc:	f7ff feda 	bl	8013db4 <_Balloc>
 8014000:	b930      	cbnz	r0, 8014010 <__multiply+0x44>
 8014002:	4602      	mov	r2, r0
 8014004:	4b44      	ldr	r3, [pc, #272]	; (8014118 <__multiply+0x14c>)
 8014006:	4845      	ldr	r0, [pc, #276]	; (801411c <__multiply+0x150>)
 8014008:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801400c:	f000 fe4e 	bl	8014cac <__assert_func>
 8014010:	f100 0514 	add.w	r5, r0, #20
 8014014:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014018:	462b      	mov	r3, r5
 801401a:	2200      	movs	r2, #0
 801401c:	4543      	cmp	r3, r8
 801401e:	d321      	bcc.n	8014064 <__multiply+0x98>
 8014020:	f104 0314 	add.w	r3, r4, #20
 8014024:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8014028:	f109 0314 	add.w	r3, r9, #20
 801402c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8014030:	9202      	str	r2, [sp, #8]
 8014032:	1b3a      	subs	r2, r7, r4
 8014034:	3a15      	subs	r2, #21
 8014036:	f022 0203 	bic.w	r2, r2, #3
 801403a:	3204      	adds	r2, #4
 801403c:	f104 0115 	add.w	r1, r4, #21
 8014040:	428f      	cmp	r7, r1
 8014042:	bf38      	it	cc
 8014044:	2204      	movcc	r2, #4
 8014046:	9201      	str	r2, [sp, #4]
 8014048:	9a02      	ldr	r2, [sp, #8]
 801404a:	9303      	str	r3, [sp, #12]
 801404c:	429a      	cmp	r2, r3
 801404e:	d80c      	bhi.n	801406a <__multiply+0x9e>
 8014050:	2e00      	cmp	r6, #0
 8014052:	dd03      	ble.n	801405c <__multiply+0x90>
 8014054:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014058:	2b00      	cmp	r3, #0
 801405a:	d05b      	beq.n	8014114 <__multiply+0x148>
 801405c:	6106      	str	r6, [r0, #16]
 801405e:	b005      	add	sp, #20
 8014060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014064:	f843 2b04 	str.w	r2, [r3], #4
 8014068:	e7d8      	b.n	801401c <__multiply+0x50>
 801406a:	f8b3 a000 	ldrh.w	sl, [r3]
 801406e:	f1ba 0f00 	cmp.w	sl, #0
 8014072:	d024      	beq.n	80140be <__multiply+0xf2>
 8014074:	f104 0e14 	add.w	lr, r4, #20
 8014078:	46a9      	mov	r9, r5
 801407a:	f04f 0c00 	mov.w	ip, #0
 801407e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8014082:	f8d9 1000 	ldr.w	r1, [r9]
 8014086:	fa1f fb82 	uxth.w	fp, r2
 801408a:	b289      	uxth	r1, r1
 801408c:	fb0a 110b 	mla	r1, sl, fp, r1
 8014090:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8014094:	f8d9 2000 	ldr.w	r2, [r9]
 8014098:	4461      	add	r1, ip
 801409a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801409e:	fb0a c20b 	mla	r2, sl, fp, ip
 80140a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80140a6:	b289      	uxth	r1, r1
 80140a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80140ac:	4577      	cmp	r7, lr
 80140ae:	f849 1b04 	str.w	r1, [r9], #4
 80140b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80140b6:	d8e2      	bhi.n	801407e <__multiply+0xb2>
 80140b8:	9a01      	ldr	r2, [sp, #4]
 80140ba:	f845 c002 	str.w	ip, [r5, r2]
 80140be:	9a03      	ldr	r2, [sp, #12]
 80140c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80140c4:	3304      	adds	r3, #4
 80140c6:	f1b9 0f00 	cmp.w	r9, #0
 80140ca:	d021      	beq.n	8014110 <__multiply+0x144>
 80140cc:	6829      	ldr	r1, [r5, #0]
 80140ce:	f104 0c14 	add.w	ip, r4, #20
 80140d2:	46ae      	mov	lr, r5
 80140d4:	f04f 0a00 	mov.w	sl, #0
 80140d8:	f8bc b000 	ldrh.w	fp, [ip]
 80140dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80140e0:	fb09 220b 	mla	r2, r9, fp, r2
 80140e4:	4452      	add	r2, sl
 80140e6:	b289      	uxth	r1, r1
 80140e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80140ec:	f84e 1b04 	str.w	r1, [lr], #4
 80140f0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80140f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80140f8:	f8be 1000 	ldrh.w	r1, [lr]
 80140fc:	fb09 110a 	mla	r1, r9, sl, r1
 8014100:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8014104:	4567      	cmp	r7, ip
 8014106:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801410a:	d8e5      	bhi.n	80140d8 <__multiply+0x10c>
 801410c:	9a01      	ldr	r2, [sp, #4]
 801410e:	50a9      	str	r1, [r5, r2]
 8014110:	3504      	adds	r5, #4
 8014112:	e799      	b.n	8014048 <__multiply+0x7c>
 8014114:	3e01      	subs	r6, #1
 8014116:	e79b      	b.n	8014050 <__multiply+0x84>
 8014118:	08015910 	.word	0x08015910
 801411c:	08015921 	.word	0x08015921

08014120 <__pow5mult>:
 8014120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014124:	4615      	mov	r5, r2
 8014126:	f012 0203 	ands.w	r2, r2, #3
 801412a:	4606      	mov	r6, r0
 801412c:	460f      	mov	r7, r1
 801412e:	d007      	beq.n	8014140 <__pow5mult+0x20>
 8014130:	4c25      	ldr	r4, [pc, #148]	; (80141c8 <__pow5mult+0xa8>)
 8014132:	3a01      	subs	r2, #1
 8014134:	2300      	movs	r3, #0
 8014136:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801413a:	f7ff fe9d 	bl	8013e78 <__multadd>
 801413e:	4607      	mov	r7, r0
 8014140:	10ad      	asrs	r5, r5, #2
 8014142:	d03d      	beq.n	80141c0 <__pow5mult+0xa0>
 8014144:	69f4      	ldr	r4, [r6, #28]
 8014146:	b97c      	cbnz	r4, 8014168 <__pow5mult+0x48>
 8014148:	2010      	movs	r0, #16
 801414a:	f7ff fd7f 	bl	8013c4c <malloc>
 801414e:	4602      	mov	r2, r0
 8014150:	61f0      	str	r0, [r6, #28]
 8014152:	b928      	cbnz	r0, 8014160 <__pow5mult+0x40>
 8014154:	4b1d      	ldr	r3, [pc, #116]	; (80141cc <__pow5mult+0xac>)
 8014156:	481e      	ldr	r0, [pc, #120]	; (80141d0 <__pow5mult+0xb0>)
 8014158:	f240 11b3 	movw	r1, #435	; 0x1b3
 801415c:	f000 fda6 	bl	8014cac <__assert_func>
 8014160:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014164:	6004      	str	r4, [r0, #0]
 8014166:	60c4      	str	r4, [r0, #12]
 8014168:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801416c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014170:	b94c      	cbnz	r4, 8014186 <__pow5mult+0x66>
 8014172:	f240 2171 	movw	r1, #625	; 0x271
 8014176:	4630      	mov	r0, r6
 8014178:	f7ff ff12 	bl	8013fa0 <__i2b>
 801417c:	2300      	movs	r3, #0
 801417e:	f8c8 0008 	str.w	r0, [r8, #8]
 8014182:	4604      	mov	r4, r0
 8014184:	6003      	str	r3, [r0, #0]
 8014186:	f04f 0900 	mov.w	r9, #0
 801418a:	07eb      	lsls	r3, r5, #31
 801418c:	d50a      	bpl.n	80141a4 <__pow5mult+0x84>
 801418e:	4639      	mov	r1, r7
 8014190:	4622      	mov	r2, r4
 8014192:	4630      	mov	r0, r6
 8014194:	f7ff ff1a 	bl	8013fcc <__multiply>
 8014198:	4639      	mov	r1, r7
 801419a:	4680      	mov	r8, r0
 801419c:	4630      	mov	r0, r6
 801419e:	f7ff fe49 	bl	8013e34 <_Bfree>
 80141a2:	4647      	mov	r7, r8
 80141a4:	106d      	asrs	r5, r5, #1
 80141a6:	d00b      	beq.n	80141c0 <__pow5mult+0xa0>
 80141a8:	6820      	ldr	r0, [r4, #0]
 80141aa:	b938      	cbnz	r0, 80141bc <__pow5mult+0x9c>
 80141ac:	4622      	mov	r2, r4
 80141ae:	4621      	mov	r1, r4
 80141b0:	4630      	mov	r0, r6
 80141b2:	f7ff ff0b 	bl	8013fcc <__multiply>
 80141b6:	6020      	str	r0, [r4, #0]
 80141b8:	f8c0 9000 	str.w	r9, [r0]
 80141bc:	4604      	mov	r4, r0
 80141be:	e7e4      	b.n	801418a <__pow5mult+0x6a>
 80141c0:	4638      	mov	r0, r7
 80141c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80141c6:	bf00      	nop
 80141c8:	08015a70 	.word	0x08015a70
 80141cc:	080158a1 	.word	0x080158a1
 80141d0:	08015921 	.word	0x08015921

080141d4 <__lshift>:
 80141d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80141d8:	460c      	mov	r4, r1
 80141da:	6849      	ldr	r1, [r1, #4]
 80141dc:	6923      	ldr	r3, [r4, #16]
 80141de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80141e2:	68a3      	ldr	r3, [r4, #8]
 80141e4:	4607      	mov	r7, r0
 80141e6:	4691      	mov	r9, r2
 80141e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80141ec:	f108 0601 	add.w	r6, r8, #1
 80141f0:	42b3      	cmp	r3, r6
 80141f2:	db0b      	blt.n	801420c <__lshift+0x38>
 80141f4:	4638      	mov	r0, r7
 80141f6:	f7ff fddd 	bl	8013db4 <_Balloc>
 80141fa:	4605      	mov	r5, r0
 80141fc:	b948      	cbnz	r0, 8014212 <__lshift+0x3e>
 80141fe:	4602      	mov	r2, r0
 8014200:	4b28      	ldr	r3, [pc, #160]	; (80142a4 <__lshift+0xd0>)
 8014202:	4829      	ldr	r0, [pc, #164]	; (80142a8 <__lshift+0xd4>)
 8014204:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8014208:	f000 fd50 	bl	8014cac <__assert_func>
 801420c:	3101      	adds	r1, #1
 801420e:	005b      	lsls	r3, r3, #1
 8014210:	e7ee      	b.n	80141f0 <__lshift+0x1c>
 8014212:	2300      	movs	r3, #0
 8014214:	f100 0114 	add.w	r1, r0, #20
 8014218:	f100 0210 	add.w	r2, r0, #16
 801421c:	4618      	mov	r0, r3
 801421e:	4553      	cmp	r3, sl
 8014220:	db33      	blt.n	801428a <__lshift+0xb6>
 8014222:	6920      	ldr	r0, [r4, #16]
 8014224:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014228:	f104 0314 	add.w	r3, r4, #20
 801422c:	f019 091f 	ands.w	r9, r9, #31
 8014230:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014234:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014238:	d02b      	beq.n	8014292 <__lshift+0xbe>
 801423a:	f1c9 0e20 	rsb	lr, r9, #32
 801423e:	468a      	mov	sl, r1
 8014240:	2200      	movs	r2, #0
 8014242:	6818      	ldr	r0, [r3, #0]
 8014244:	fa00 f009 	lsl.w	r0, r0, r9
 8014248:	4310      	orrs	r0, r2
 801424a:	f84a 0b04 	str.w	r0, [sl], #4
 801424e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014252:	459c      	cmp	ip, r3
 8014254:	fa22 f20e 	lsr.w	r2, r2, lr
 8014258:	d8f3      	bhi.n	8014242 <__lshift+0x6e>
 801425a:	ebac 0304 	sub.w	r3, ip, r4
 801425e:	3b15      	subs	r3, #21
 8014260:	f023 0303 	bic.w	r3, r3, #3
 8014264:	3304      	adds	r3, #4
 8014266:	f104 0015 	add.w	r0, r4, #21
 801426a:	4584      	cmp	ip, r0
 801426c:	bf38      	it	cc
 801426e:	2304      	movcc	r3, #4
 8014270:	50ca      	str	r2, [r1, r3]
 8014272:	b10a      	cbz	r2, 8014278 <__lshift+0xa4>
 8014274:	f108 0602 	add.w	r6, r8, #2
 8014278:	3e01      	subs	r6, #1
 801427a:	4638      	mov	r0, r7
 801427c:	612e      	str	r6, [r5, #16]
 801427e:	4621      	mov	r1, r4
 8014280:	f7ff fdd8 	bl	8013e34 <_Bfree>
 8014284:	4628      	mov	r0, r5
 8014286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801428a:	f842 0f04 	str.w	r0, [r2, #4]!
 801428e:	3301      	adds	r3, #1
 8014290:	e7c5      	b.n	801421e <__lshift+0x4a>
 8014292:	3904      	subs	r1, #4
 8014294:	f853 2b04 	ldr.w	r2, [r3], #4
 8014298:	f841 2f04 	str.w	r2, [r1, #4]!
 801429c:	459c      	cmp	ip, r3
 801429e:	d8f9      	bhi.n	8014294 <__lshift+0xc0>
 80142a0:	e7ea      	b.n	8014278 <__lshift+0xa4>
 80142a2:	bf00      	nop
 80142a4:	08015910 	.word	0x08015910
 80142a8:	08015921 	.word	0x08015921

080142ac <__mcmp>:
 80142ac:	b530      	push	{r4, r5, lr}
 80142ae:	6902      	ldr	r2, [r0, #16]
 80142b0:	690c      	ldr	r4, [r1, #16]
 80142b2:	1b12      	subs	r2, r2, r4
 80142b4:	d10e      	bne.n	80142d4 <__mcmp+0x28>
 80142b6:	f100 0314 	add.w	r3, r0, #20
 80142ba:	3114      	adds	r1, #20
 80142bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80142c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80142c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80142c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80142cc:	42a5      	cmp	r5, r4
 80142ce:	d003      	beq.n	80142d8 <__mcmp+0x2c>
 80142d0:	d305      	bcc.n	80142de <__mcmp+0x32>
 80142d2:	2201      	movs	r2, #1
 80142d4:	4610      	mov	r0, r2
 80142d6:	bd30      	pop	{r4, r5, pc}
 80142d8:	4283      	cmp	r3, r0
 80142da:	d3f3      	bcc.n	80142c4 <__mcmp+0x18>
 80142dc:	e7fa      	b.n	80142d4 <__mcmp+0x28>
 80142de:	f04f 32ff 	mov.w	r2, #4294967295
 80142e2:	e7f7      	b.n	80142d4 <__mcmp+0x28>

080142e4 <__mdiff>:
 80142e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142e8:	460c      	mov	r4, r1
 80142ea:	4606      	mov	r6, r0
 80142ec:	4611      	mov	r1, r2
 80142ee:	4620      	mov	r0, r4
 80142f0:	4690      	mov	r8, r2
 80142f2:	f7ff ffdb 	bl	80142ac <__mcmp>
 80142f6:	1e05      	subs	r5, r0, #0
 80142f8:	d110      	bne.n	801431c <__mdiff+0x38>
 80142fa:	4629      	mov	r1, r5
 80142fc:	4630      	mov	r0, r6
 80142fe:	f7ff fd59 	bl	8013db4 <_Balloc>
 8014302:	b930      	cbnz	r0, 8014312 <__mdiff+0x2e>
 8014304:	4b3a      	ldr	r3, [pc, #232]	; (80143f0 <__mdiff+0x10c>)
 8014306:	4602      	mov	r2, r0
 8014308:	f240 2137 	movw	r1, #567	; 0x237
 801430c:	4839      	ldr	r0, [pc, #228]	; (80143f4 <__mdiff+0x110>)
 801430e:	f000 fccd 	bl	8014cac <__assert_func>
 8014312:	2301      	movs	r3, #1
 8014314:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014318:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801431c:	bfa4      	itt	ge
 801431e:	4643      	movge	r3, r8
 8014320:	46a0      	movge	r8, r4
 8014322:	4630      	mov	r0, r6
 8014324:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014328:	bfa6      	itte	ge
 801432a:	461c      	movge	r4, r3
 801432c:	2500      	movge	r5, #0
 801432e:	2501      	movlt	r5, #1
 8014330:	f7ff fd40 	bl	8013db4 <_Balloc>
 8014334:	b920      	cbnz	r0, 8014340 <__mdiff+0x5c>
 8014336:	4b2e      	ldr	r3, [pc, #184]	; (80143f0 <__mdiff+0x10c>)
 8014338:	4602      	mov	r2, r0
 801433a:	f240 2145 	movw	r1, #581	; 0x245
 801433e:	e7e5      	b.n	801430c <__mdiff+0x28>
 8014340:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014344:	6926      	ldr	r6, [r4, #16]
 8014346:	60c5      	str	r5, [r0, #12]
 8014348:	f104 0914 	add.w	r9, r4, #20
 801434c:	f108 0514 	add.w	r5, r8, #20
 8014350:	f100 0e14 	add.w	lr, r0, #20
 8014354:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8014358:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801435c:	f108 0210 	add.w	r2, r8, #16
 8014360:	46f2      	mov	sl, lr
 8014362:	2100      	movs	r1, #0
 8014364:	f859 3b04 	ldr.w	r3, [r9], #4
 8014368:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801436c:	fa11 f88b 	uxtah	r8, r1, fp
 8014370:	b299      	uxth	r1, r3
 8014372:	0c1b      	lsrs	r3, r3, #16
 8014374:	eba8 0801 	sub.w	r8, r8, r1
 8014378:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801437c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8014380:	fa1f f888 	uxth.w	r8, r8
 8014384:	1419      	asrs	r1, r3, #16
 8014386:	454e      	cmp	r6, r9
 8014388:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801438c:	f84a 3b04 	str.w	r3, [sl], #4
 8014390:	d8e8      	bhi.n	8014364 <__mdiff+0x80>
 8014392:	1b33      	subs	r3, r6, r4
 8014394:	3b15      	subs	r3, #21
 8014396:	f023 0303 	bic.w	r3, r3, #3
 801439a:	3304      	adds	r3, #4
 801439c:	3415      	adds	r4, #21
 801439e:	42a6      	cmp	r6, r4
 80143a0:	bf38      	it	cc
 80143a2:	2304      	movcc	r3, #4
 80143a4:	441d      	add	r5, r3
 80143a6:	4473      	add	r3, lr
 80143a8:	469e      	mov	lr, r3
 80143aa:	462e      	mov	r6, r5
 80143ac:	4566      	cmp	r6, ip
 80143ae:	d30e      	bcc.n	80143ce <__mdiff+0xea>
 80143b0:	f10c 0203 	add.w	r2, ip, #3
 80143b4:	1b52      	subs	r2, r2, r5
 80143b6:	f022 0203 	bic.w	r2, r2, #3
 80143ba:	3d03      	subs	r5, #3
 80143bc:	45ac      	cmp	ip, r5
 80143be:	bf38      	it	cc
 80143c0:	2200      	movcc	r2, #0
 80143c2:	4413      	add	r3, r2
 80143c4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80143c8:	b17a      	cbz	r2, 80143ea <__mdiff+0x106>
 80143ca:	6107      	str	r7, [r0, #16]
 80143cc:	e7a4      	b.n	8014318 <__mdiff+0x34>
 80143ce:	f856 8b04 	ldr.w	r8, [r6], #4
 80143d2:	fa11 f288 	uxtah	r2, r1, r8
 80143d6:	1414      	asrs	r4, r2, #16
 80143d8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80143dc:	b292      	uxth	r2, r2
 80143de:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80143e2:	f84e 2b04 	str.w	r2, [lr], #4
 80143e6:	1421      	asrs	r1, r4, #16
 80143e8:	e7e0      	b.n	80143ac <__mdiff+0xc8>
 80143ea:	3f01      	subs	r7, #1
 80143ec:	e7ea      	b.n	80143c4 <__mdiff+0xe0>
 80143ee:	bf00      	nop
 80143f0:	08015910 	.word	0x08015910
 80143f4:	08015921 	.word	0x08015921

080143f8 <__d2b>:
 80143f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80143fc:	460f      	mov	r7, r1
 80143fe:	2101      	movs	r1, #1
 8014400:	ec59 8b10 	vmov	r8, r9, d0
 8014404:	4616      	mov	r6, r2
 8014406:	f7ff fcd5 	bl	8013db4 <_Balloc>
 801440a:	4604      	mov	r4, r0
 801440c:	b930      	cbnz	r0, 801441c <__d2b+0x24>
 801440e:	4602      	mov	r2, r0
 8014410:	4b24      	ldr	r3, [pc, #144]	; (80144a4 <__d2b+0xac>)
 8014412:	4825      	ldr	r0, [pc, #148]	; (80144a8 <__d2b+0xb0>)
 8014414:	f240 310f 	movw	r1, #783	; 0x30f
 8014418:	f000 fc48 	bl	8014cac <__assert_func>
 801441c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014420:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014424:	bb2d      	cbnz	r5, 8014472 <__d2b+0x7a>
 8014426:	9301      	str	r3, [sp, #4]
 8014428:	f1b8 0300 	subs.w	r3, r8, #0
 801442c:	d026      	beq.n	801447c <__d2b+0x84>
 801442e:	4668      	mov	r0, sp
 8014430:	9300      	str	r3, [sp, #0]
 8014432:	f7ff fd87 	bl	8013f44 <__lo0bits>
 8014436:	e9dd 1200 	ldrd	r1, r2, [sp]
 801443a:	b1e8      	cbz	r0, 8014478 <__d2b+0x80>
 801443c:	f1c0 0320 	rsb	r3, r0, #32
 8014440:	fa02 f303 	lsl.w	r3, r2, r3
 8014444:	430b      	orrs	r3, r1
 8014446:	40c2      	lsrs	r2, r0
 8014448:	6163      	str	r3, [r4, #20]
 801444a:	9201      	str	r2, [sp, #4]
 801444c:	9b01      	ldr	r3, [sp, #4]
 801444e:	61a3      	str	r3, [r4, #24]
 8014450:	2b00      	cmp	r3, #0
 8014452:	bf14      	ite	ne
 8014454:	2202      	movne	r2, #2
 8014456:	2201      	moveq	r2, #1
 8014458:	6122      	str	r2, [r4, #16]
 801445a:	b1bd      	cbz	r5, 801448c <__d2b+0x94>
 801445c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014460:	4405      	add	r5, r0
 8014462:	603d      	str	r5, [r7, #0]
 8014464:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014468:	6030      	str	r0, [r6, #0]
 801446a:	4620      	mov	r0, r4
 801446c:	b003      	add	sp, #12
 801446e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014472:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014476:	e7d6      	b.n	8014426 <__d2b+0x2e>
 8014478:	6161      	str	r1, [r4, #20]
 801447a:	e7e7      	b.n	801444c <__d2b+0x54>
 801447c:	a801      	add	r0, sp, #4
 801447e:	f7ff fd61 	bl	8013f44 <__lo0bits>
 8014482:	9b01      	ldr	r3, [sp, #4]
 8014484:	6163      	str	r3, [r4, #20]
 8014486:	3020      	adds	r0, #32
 8014488:	2201      	movs	r2, #1
 801448a:	e7e5      	b.n	8014458 <__d2b+0x60>
 801448c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014490:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014494:	6038      	str	r0, [r7, #0]
 8014496:	6918      	ldr	r0, [r3, #16]
 8014498:	f7ff fd34 	bl	8013f04 <__hi0bits>
 801449c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80144a0:	e7e2      	b.n	8014468 <__d2b+0x70>
 80144a2:	bf00      	nop
 80144a4:	08015910 	.word	0x08015910
 80144a8:	08015921 	.word	0x08015921

080144ac <_malloc_usable_size_r>:
 80144ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80144b0:	1f18      	subs	r0, r3, #4
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	bfbc      	itt	lt
 80144b6:	580b      	ldrlt	r3, [r1, r0]
 80144b8:	18c0      	addlt	r0, r0, r3
 80144ba:	4770      	bx	lr

080144bc <__ssputs_r>:
 80144bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80144c0:	688e      	ldr	r6, [r1, #8]
 80144c2:	461f      	mov	r7, r3
 80144c4:	42be      	cmp	r6, r7
 80144c6:	680b      	ldr	r3, [r1, #0]
 80144c8:	4682      	mov	sl, r0
 80144ca:	460c      	mov	r4, r1
 80144cc:	4690      	mov	r8, r2
 80144ce:	d82c      	bhi.n	801452a <__ssputs_r+0x6e>
 80144d0:	898a      	ldrh	r2, [r1, #12]
 80144d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80144d6:	d026      	beq.n	8014526 <__ssputs_r+0x6a>
 80144d8:	6965      	ldr	r5, [r4, #20]
 80144da:	6909      	ldr	r1, [r1, #16]
 80144dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80144e0:	eba3 0901 	sub.w	r9, r3, r1
 80144e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80144e8:	1c7b      	adds	r3, r7, #1
 80144ea:	444b      	add	r3, r9
 80144ec:	106d      	asrs	r5, r5, #1
 80144ee:	429d      	cmp	r5, r3
 80144f0:	bf38      	it	cc
 80144f2:	461d      	movcc	r5, r3
 80144f4:	0553      	lsls	r3, r2, #21
 80144f6:	d527      	bpl.n	8014548 <__ssputs_r+0x8c>
 80144f8:	4629      	mov	r1, r5
 80144fa:	f7ff fbcf 	bl	8013c9c <_malloc_r>
 80144fe:	4606      	mov	r6, r0
 8014500:	b360      	cbz	r0, 801455c <__ssputs_r+0xa0>
 8014502:	6921      	ldr	r1, [r4, #16]
 8014504:	464a      	mov	r2, r9
 8014506:	f7fe fcca 	bl	8012e9e <memcpy>
 801450a:	89a3      	ldrh	r3, [r4, #12]
 801450c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014514:	81a3      	strh	r3, [r4, #12]
 8014516:	6126      	str	r6, [r4, #16]
 8014518:	6165      	str	r5, [r4, #20]
 801451a:	444e      	add	r6, r9
 801451c:	eba5 0509 	sub.w	r5, r5, r9
 8014520:	6026      	str	r6, [r4, #0]
 8014522:	60a5      	str	r5, [r4, #8]
 8014524:	463e      	mov	r6, r7
 8014526:	42be      	cmp	r6, r7
 8014528:	d900      	bls.n	801452c <__ssputs_r+0x70>
 801452a:	463e      	mov	r6, r7
 801452c:	6820      	ldr	r0, [r4, #0]
 801452e:	4632      	mov	r2, r6
 8014530:	4641      	mov	r1, r8
 8014532:	f000 fb6f 	bl	8014c14 <memmove>
 8014536:	68a3      	ldr	r3, [r4, #8]
 8014538:	1b9b      	subs	r3, r3, r6
 801453a:	60a3      	str	r3, [r4, #8]
 801453c:	6823      	ldr	r3, [r4, #0]
 801453e:	4433      	add	r3, r6
 8014540:	6023      	str	r3, [r4, #0]
 8014542:	2000      	movs	r0, #0
 8014544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014548:	462a      	mov	r2, r5
 801454a:	f7fd fd15 	bl	8011f78 <_realloc_r>
 801454e:	4606      	mov	r6, r0
 8014550:	2800      	cmp	r0, #0
 8014552:	d1e0      	bne.n	8014516 <__ssputs_r+0x5a>
 8014554:	6921      	ldr	r1, [r4, #16]
 8014556:	4650      	mov	r0, sl
 8014558:	f7ff fb2c 	bl	8013bb4 <_free_r>
 801455c:	230c      	movs	r3, #12
 801455e:	f8ca 3000 	str.w	r3, [sl]
 8014562:	89a3      	ldrh	r3, [r4, #12]
 8014564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014568:	81a3      	strh	r3, [r4, #12]
 801456a:	f04f 30ff 	mov.w	r0, #4294967295
 801456e:	e7e9      	b.n	8014544 <__ssputs_r+0x88>

08014570 <_svfiprintf_r>:
 8014570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014574:	4698      	mov	r8, r3
 8014576:	898b      	ldrh	r3, [r1, #12]
 8014578:	061b      	lsls	r3, r3, #24
 801457a:	b09d      	sub	sp, #116	; 0x74
 801457c:	4607      	mov	r7, r0
 801457e:	460d      	mov	r5, r1
 8014580:	4614      	mov	r4, r2
 8014582:	d50e      	bpl.n	80145a2 <_svfiprintf_r+0x32>
 8014584:	690b      	ldr	r3, [r1, #16]
 8014586:	b963      	cbnz	r3, 80145a2 <_svfiprintf_r+0x32>
 8014588:	2140      	movs	r1, #64	; 0x40
 801458a:	f7ff fb87 	bl	8013c9c <_malloc_r>
 801458e:	6028      	str	r0, [r5, #0]
 8014590:	6128      	str	r0, [r5, #16]
 8014592:	b920      	cbnz	r0, 801459e <_svfiprintf_r+0x2e>
 8014594:	230c      	movs	r3, #12
 8014596:	603b      	str	r3, [r7, #0]
 8014598:	f04f 30ff 	mov.w	r0, #4294967295
 801459c:	e0d0      	b.n	8014740 <_svfiprintf_r+0x1d0>
 801459e:	2340      	movs	r3, #64	; 0x40
 80145a0:	616b      	str	r3, [r5, #20]
 80145a2:	2300      	movs	r3, #0
 80145a4:	9309      	str	r3, [sp, #36]	; 0x24
 80145a6:	2320      	movs	r3, #32
 80145a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80145ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80145b0:	2330      	movs	r3, #48	; 0x30
 80145b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8014758 <_svfiprintf_r+0x1e8>
 80145b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80145ba:	f04f 0901 	mov.w	r9, #1
 80145be:	4623      	mov	r3, r4
 80145c0:	469a      	mov	sl, r3
 80145c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80145c6:	b10a      	cbz	r2, 80145cc <_svfiprintf_r+0x5c>
 80145c8:	2a25      	cmp	r2, #37	; 0x25
 80145ca:	d1f9      	bne.n	80145c0 <_svfiprintf_r+0x50>
 80145cc:	ebba 0b04 	subs.w	fp, sl, r4
 80145d0:	d00b      	beq.n	80145ea <_svfiprintf_r+0x7a>
 80145d2:	465b      	mov	r3, fp
 80145d4:	4622      	mov	r2, r4
 80145d6:	4629      	mov	r1, r5
 80145d8:	4638      	mov	r0, r7
 80145da:	f7ff ff6f 	bl	80144bc <__ssputs_r>
 80145de:	3001      	adds	r0, #1
 80145e0:	f000 80a9 	beq.w	8014736 <_svfiprintf_r+0x1c6>
 80145e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80145e6:	445a      	add	r2, fp
 80145e8:	9209      	str	r2, [sp, #36]	; 0x24
 80145ea:	f89a 3000 	ldrb.w	r3, [sl]
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	f000 80a1 	beq.w	8014736 <_svfiprintf_r+0x1c6>
 80145f4:	2300      	movs	r3, #0
 80145f6:	f04f 32ff 	mov.w	r2, #4294967295
 80145fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80145fe:	f10a 0a01 	add.w	sl, sl, #1
 8014602:	9304      	str	r3, [sp, #16]
 8014604:	9307      	str	r3, [sp, #28]
 8014606:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801460a:	931a      	str	r3, [sp, #104]	; 0x68
 801460c:	4654      	mov	r4, sl
 801460e:	2205      	movs	r2, #5
 8014610:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014614:	4850      	ldr	r0, [pc, #320]	; (8014758 <_svfiprintf_r+0x1e8>)
 8014616:	f7eb fdeb 	bl	80001f0 <memchr>
 801461a:	9a04      	ldr	r2, [sp, #16]
 801461c:	b9d8      	cbnz	r0, 8014656 <_svfiprintf_r+0xe6>
 801461e:	06d0      	lsls	r0, r2, #27
 8014620:	bf44      	itt	mi
 8014622:	2320      	movmi	r3, #32
 8014624:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014628:	0711      	lsls	r1, r2, #28
 801462a:	bf44      	itt	mi
 801462c:	232b      	movmi	r3, #43	; 0x2b
 801462e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014632:	f89a 3000 	ldrb.w	r3, [sl]
 8014636:	2b2a      	cmp	r3, #42	; 0x2a
 8014638:	d015      	beq.n	8014666 <_svfiprintf_r+0xf6>
 801463a:	9a07      	ldr	r2, [sp, #28]
 801463c:	4654      	mov	r4, sl
 801463e:	2000      	movs	r0, #0
 8014640:	f04f 0c0a 	mov.w	ip, #10
 8014644:	4621      	mov	r1, r4
 8014646:	f811 3b01 	ldrb.w	r3, [r1], #1
 801464a:	3b30      	subs	r3, #48	; 0x30
 801464c:	2b09      	cmp	r3, #9
 801464e:	d94d      	bls.n	80146ec <_svfiprintf_r+0x17c>
 8014650:	b1b0      	cbz	r0, 8014680 <_svfiprintf_r+0x110>
 8014652:	9207      	str	r2, [sp, #28]
 8014654:	e014      	b.n	8014680 <_svfiprintf_r+0x110>
 8014656:	eba0 0308 	sub.w	r3, r0, r8
 801465a:	fa09 f303 	lsl.w	r3, r9, r3
 801465e:	4313      	orrs	r3, r2
 8014660:	9304      	str	r3, [sp, #16]
 8014662:	46a2      	mov	sl, r4
 8014664:	e7d2      	b.n	801460c <_svfiprintf_r+0x9c>
 8014666:	9b03      	ldr	r3, [sp, #12]
 8014668:	1d19      	adds	r1, r3, #4
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	9103      	str	r1, [sp, #12]
 801466e:	2b00      	cmp	r3, #0
 8014670:	bfbb      	ittet	lt
 8014672:	425b      	neglt	r3, r3
 8014674:	f042 0202 	orrlt.w	r2, r2, #2
 8014678:	9307      	strge	r3, [sp, #28]
 801467a:	9307      	strlt	r3, [sp, #28]
 801467c:	bfb8      	it	lt
 801467e:	9204      	strlt	r2, [sp, #16]
 8014680:	7823      	ldrb	r3, [r4, #0]
 8014682:	2b2e      	cmp	r3, #46	; 0x2e
 8014684:	d10c      	bne.n	80146a0 <_svfiprintf_r+0x130>
 8014686:	7863      	ldrb	r3, [r4, #1]
 8014688:	2b2a      	cmp	r3, #42	; 0x2a
 801468a:	d134      	bne.n	80146f6 <_svfiprintf_r+0x186>
 801468c:	9b03      	ldr	r3, [sp, #12]
 801468e:	1d1a      	adds	r2, r3, #4
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	9203      	str	r2, [sp, #12]
 8014694:	2b00      	cmp	r3, #0
 8014696:	bfb8      	it	lt
 8014698:	f04f 33ff 	movlt.w	r3, #4294967295
 801469c:	3402      	adds	r4, #2
 801469e:	9305      	str	r3, [sp, #20]
 80146a0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8014768 <_svfiprintf_r+0x1f8>
 80146a4:	7821      	ldrb	r1, [r4, #0]
 80146a6:	2203      	movs	r2, #3
 80146a8:	4650      	mov	r0, sl
 80146aa:	f7eb fda1 	bl	80001f0 <memchr>
 80146ae:	b138      	cbz	r0, 80146c0 <_svfiprintf_r+0x150>
 80146b0:	9b04      	ldr	r3, [sp, #16]
 80146b2:	eba0 000a 	sub.w	r0, r0, sl
 80146b6:	2240      	movs	r2, #64	; 0x40
 80146b8:	4082      	lsls	r2, r0
 80146ba:	4313      	orrs	r3, r2
 80146bc:	3401      	adds	r4, #1
 80146be:	9304      	str	r3, [sp, #16]
 80146c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80146c4:	4825      	ldr	r0, [pc, #148]	; (801475c <_svfiprintf_r+0x1ec>)
 80146c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80146ca:	2206      	movs	r2, #6
 80146cc:	f7eb fd90 	bl	80001f0 <memchr>
 80146d0:	2800      	cmp	r0, #0
 80146d2:	d038      	beq.n	8014746 <_svfiprintf_r+0x1d6>
 80146d4:	4b22      	ldr	r3, [pc, #136]	; (8014760 <_svfiprintf_r+0x1f0>)
 80146d6:	bb1b      	cbnz	r3, 8014720 <_svfiprintf_r+0x1b0>
 80146d8:	9b03      	ldr	r3, [sp, #12]
 80146da:	3307      	adds	r3, #7
 80146dc:	f023 0307 	bic.w	r3, r3, #7
 80146e0:	3308      	adds	r3, #8
 80146e2:	9303      	str	r3, [sp, #12]
 80146e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80146e6:	4433      	add	r3, r6
 80146e8:	9309      	str	r3, [sp, #36]	; 0x24
 80146ea:	e768      	b.n	80145be <_svfiprintf_r+0x4e>
 80146ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80146f0:	460c      	mov	r4, r1
 80146f2:	2001      	movs	r0, #1
 80146f4:	e7a6      	b.n	8014644 <_svfiprintf_r+0xd4>
 80146f6:	2300      	movs	r3, #0
 80146f8:	3401      	adds	r4, #1
 80146fa:	9305      	str	r3, [sp, #20]
 80146fc:	4619      	mov	r1, r3
 80146fe:	f04f 0c0a 	mov.w	ip, #10
 8014702:	4620      	mov	r0, r4
 8014704:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014708:	3a30      	subs	r2, #48	; 0x30
 801470a:	2a09      	cmp	r2, #9
 801470c:	d903      	bls.n	8014716 <_svfiprintf_r+0x1a6>
 801470e:	2b00      	cmp	r3, #0
 8014710:	d0c6      	beq.n	80146a0 <_svfiprintf_r+0x130>
 8014712:	9105      	str	r1, [sp, #20]
 8014714:	e7c4      	b.n	80146a0 <_svfiprintf_r+0x130>
 8014716:	fb0c 2101 	mla	r1, ip, r1, r2
 801471a:	4604      	mov	r4, r0
 801471c:	2301      	movs	r3, #1
 801471e:	e7f0      	b.n	8014702 <_svfiprintf_r+0x192>
 8014720:	ab03      	add	r3, sp, #12
 8014722:	9300      	str	r3, [sp, #0]
 8014724:	462a      	mov	r2, r5
 8014726:	4b0f      	ldr	r3, [pc, #60]	; (8014764 <_svfiprintf_r+0x1f4>)
 8014728:	a904      	add	r1, sp, #16
 801472a:	4638      	mov	r0, r7
 801472c:	f7fd fcf4 	bl	8012118 <_printf_float>
 8014730:	1c42      	adds	r2, r0, #1
 8014732:	4606      	mov	r6, r0
 8014734:	d1d6      	bne.n	80146e4 <_svfiprintf_r+0x174>
 8014736:	89ab      	ldrh	r3, [r5, #12]
 8014738:	065b      	lsls	r3, r3, #25
 801473a:	f53f af2d 	bmi.w	8014598 <_svfiprintf_r+0x28>
 801473e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014740:	b01d      	add	sp, #116	; 0x74
 8014742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014746:	ab03      	add	r3, sp, #12
 8014748:	9300      	str	r3, [sp, #0]
 801474a:	462a      	mov	r2, r5
 801474c:	4b05      	ldr	r3, [pc, #20]	; (8014764 <_svfiprintf_r+0x1f4>)
 801474e:	a904      	add	r1, sp, #16
 8014750:	4638      	mov	r0, r7
 8014752:	f7fd ff85 	bl	8012660 <_printf_i>
 8014756:	e7eb      	b.n	8014730 <_svfiprintf_r+0x1c0>
 8014758:	08015a7c 	.word	0x08015a7c
 801475c:	08015a86 	.word	0x08015a86
 8014760:	08012119 	.word	0x08012119
 8014764:	080144bd 	.word	0x080144bd
 8014768:	08015a82 	.word	0x08015a82

0801476c <__sfputc_r>:
 801476c:	6893      	ldr	r3, [r2, #8]
 801476e:	3b01      	subs	r3, #1
 8014770:	2b00      	cmp	r3, #0
 8014772:	b410      	push	{r4}
 8014774:	6093      	str	r3, [r2, #8]
 8014776:	da08      	bge.n	801478a <__sfputc_r+0x1e>
 8014778:	6994      	ldr	r4, [r2, #24]
 801477a:	42a3      	cmp	r3, r4
 801477c:	db01      	blt.n	8014782 <__sfputc_r+0x16>
 801477e:	290a      	cmp	r1, #10
 8014780:	d103      	bne.n	801478a <__sfputc_r+0x1e>
 8014782:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014786:	f7fe ba20 	b.w	8012bca <__swbuf_r>
 801478a:	6813      	ldr	r3, [r2, #0]
 801478c:	1c58      	adds	r0, r3, #1
 801478e:	6010      	str	r0, [r2, #0]
 8014790:	7019      	strb	r1, [r3, #0]
 8014792:	4608      	mov	r0, r1
 8014794:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014798:	4770      	bx	lr

0801479a <__sfputs_r>:
 801479a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801479c:	4606      	mov	r6, r0
 801479e:	460f      	mov	r7, r1
 80147a0:	4614      	mov	r4, r2
 80147a2:	18d5      	adds	r5, r2, r3
 80147a4:	42ac      	cmp	r4, r5
 80147a6:	d101      	bne.n	80147ac <__sfputs_r+0x12>
 80147a8:	2000      	movs	r0, #0
 80147aa:	e007      	b.n	80147bc <__sfputs_r+0x22>
 80147ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80147b0:	463a      	mov	r2, r7
 80147b2:	4630      	mov	r0, r6
 80147b4:	f7ff ffda 	bl	801476c <__sfputc_r>
 80147b8:	1c43      	adds	r3, r0, #1
 80147ba:	d1f3      	bne.n	80147a4 <__sfputs_r+0xa>
 80147bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080147c0 <_vfiprintf_r>:
 80147c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147c4:	460d      	mov	r5, r1
 80147c6:	b09d      	sub	sp, #116	; 0x74
 80147c8:	4614      	mov	r4, r2
 80147ca:	4698      	mov	r8, r3
 80147cc:	4606      	mov	r6, r0
 80147ce:	b118      	cbz	r0, 80147d8 <_vfiprintf_r+0x18>
 80147d0:	6a03      	ldr	r3, [r0, #32]
 80147d2:	b90b      	cbnz	r3, 80147d8 <_vfiprintf_r+0x18>
 80147d4:	f7fe f8f2 	bl	80129bc <__sinit>
 80147d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80147da:	07d9      	lsls	r1, r3, #31
 80147dc:	d405      	bmi.n	80147ea <_vfiprintf_r+0x2a>
 80147de:	89ab      	ldrh	r3, [r5, #12]
 80147e0:	059a      	lsls	r2, r3, #22
 80147e2:	d402      	bmi.n	80147ea <_vfiprintf_r+0x2a>
 80147e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80147e6:	f7fe fb58 	bl	8012e9a <__retarget_lock_acquire_recursive>
 80147ea:	89ab      	ldrh	r3, [r5, #12]
 80147ec:	071b      	lsls	r3, r3, #28
 80147ee:	d501      	bpl.n	80147f4 <_vfiprintf_r+0x34>
 80147f0:	692b      	ldr	r3, [r5, #16]
 80147f2:	b99b      	cbnz	r3, 801481c <_vfiprintf_r+0x5c>
 80147f4:	4629      	mov	r1, r5
 80147f6:	4630      	mov	r0, r6
 80147f8:	f7fe fa24 	bl	8012c44 <__swsetup_r>
 80147fc:	b170      	cbz	r0, 801481c <_vfiprintf_r+0x5c>
 80147fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014800:	07dc      	lsls	r4, r3, #31
 8014802:	d504      	bpl.n	801480e <_vfiprintf_r+0x4e>
 8014804:	f04f 30ff 	mov.w	r0, #4294967295
 8014808:	b01d      	add	sp, #116	; 0x74
 801480a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801480e:	89ab      	ldrh	r3, [r5, #12]
 8014810:	0598      	lsls	r0, r3, #22
 8014812:	d4f7      	bmi.n	8014804 <_vfiprintf_r+0x44>
 8014814:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014816:	f7fe fb41 	bl	8012e9c <__retarget_lock_release_recursive>
 801481a:	e7f3      	b.n	8014804 <_vfiprintf_r+0x44>
 801481c:	2300      	movs	r3, #0
 801481e:	9309      	str	r3, [sp, #36]	; 0x24
 8014820:	2320      	movs	r3, #32
 8014822:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014826:	f8cd 800c 	str.w	r8, [sp, #12]
 801482a:	2330      	movs	r3, #48	; 0x30
 801482c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80149e0 <_vfiprintf_r+0x220>
 8014830:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014834:	f04f 0901 	mov.w	r9, #1
 8014838:	4623      	mov	r3, r4
 801483a:	469a      	mov	sl, r3
 801483c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014840:	b10a      	cbz	r2, 8014846 <_vfiprintf_r+0x86>
 8014842:	2a25      	cmp	r2, #37	; 0x25
 8014844:	d1f9      	bne.n	801483a <_vfiprintf_r+0x7a>
 8014846:	ebba 0b04 	subs.w	fp, sl, r4
 801484a:	d00b      	beq.n	8014864 <_vfiprintf_r+0xa4>
 801484c:	465b      	mov	r3, fp
 801484e:	4622      	mov	r2, r4
 8014850:	4629      	mov	r1, r5
 8014852:	4630      	mov	r0, r6
 8014854:	f7ff ffa1 	bl	801479a <__sfputs_r>
 8014858:	3001      	adds	r0, #1
 801485a:	f000 80a9 	beq.w	80149b0 <_vfiprintf_r+0x1f0>
 801485e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014860:	445a      	add	r2, fp
 8014862:	9209      	str	r2, [sp, #36]	; 0x24
 8014864:	f89a 3000 	ldrb.w	r3, [sl]
 8014868:	2b00      	cmp	r3, #0
 801486a:	f000 80a1 	beq.w	80149b0 <_vfiprintf_r+0x1f0>
 801486e:	2300      	movs	r3, #0
 8014870:	f04f 32ff 	mov.w	r2, #4294967295
 8014874:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014878:	f10a 0a01 	add.w	sl, sl, #1
 801487c:	9304      	str	r3, [sp, #16]
 801487e:	9307      	str	r3, [sp, #28]
 8014880:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014884:	931a      	str	r3, [sp, #104]	; 0x68
 8014886:	4654      	mov	r4, sl
 8014888:	2205      	movs	r2, #5
 801488a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801488e:	4854      	ldr	r0, [pc, #336]	; (80149e0 <_vfiprintf_r+0x220>)
 8014890:	f7eb fcae 	bl	80001f0 <memchr>
 8014894:	9a04      	ldr	r2, [sp, #16]
 8014896:	b9d8      	cbnz	r0, 80148d0 <_vfiprintf_r+0x110>
 8014898:	06d1      	lsls	r1, r2, #27
 801489a:	bf44      	itt	mi
 801489c:	2320      	movmi	r3, #32
 801489e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80148a2:	0713      	lsls	r3, r2, #28
 80148a4:	bf44      	itt	mi
 80148a6:	232b      	movmi	r3, #43	; 0x2b
 80148a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80148ac:	f89a 3000 	ldrb.w	r3, [sl]
 80148b0:	2b2a      	cmp	r3, #42	; 0x2a
 80148b2:	d015      	beq.n	80148e0 <_vfiprintf_r+0x120>
 80148b4:	9a07      	ldr	r2, [sp, #28]
 80148b6:	4654      	mov	r4, sl
 80148b8:	2000      	movs	r0, #0
 80148ba:	f04f 0c0a 	mov.w	ip, #10
 80148be:	4621      	mov	r1, r4
 80148c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80148c4:	3b30      	subs	r3, #48	; 0x30
 80148c6:	2b09      	cmp	r3, #9
 80148c8:	d94d      	bls.n	8014966 <_vfiprintf_r+0x1a6>
 80148ca:	b1b0      	cbz	r0, 80148fa <_vfiprintf_r+0x13a>
 80148cc:	9207      	str	r2, [sp, #28]
 80148ce:	e014      	b.n	80148fa <_vfiprintf_r+0x13a>
 80148d0:	eba0 0308 	sub.w	r3, r0, r8
 80148d4:	fa09 f303 	lsl.w	r3, r9, r3
 80148d8:	4313      	orrs	r3, r2
 80148da:	9304      	str	r3, [sp, #16]
 80148dc:	46a2      	mov	sl, r4
 80148de:	e7d2      	b.n	8014886 <_vfiprintf_r+0xc6>
 80148e0:	9b03      	ldr	r3, [sp, #12]
 80148e2:	1d19      	adds	r1, r3, #4
 80148e4:	681b      	ldr	r3, [r3, #0]
 80148e6:	9103      	str	r1, [sp, #12]
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	bfbb      	ittet	lt
 80148ec:	425b      	neglt	r3, r3
 80148ee:	f042 0202 	orrlt.w	r2, r2, #2
 80148f2:	9307      	strge	r3, [sp, #28]
 80148f4:	9307      	strlt	r3, [sp, #28]
 80148f6:	bfb8      	it	lt
 80148f8:	9204      	strlt	r2, [sp, #16]
 80148fa:	7823      	ldrb	r3, [r4, #0]
 80148fc:	2b2e      	cmp	r3, #46	; 0x2e
 80148fe:	d10c      	bne.n	801491a <_vfiprintf_r+0x15a>
 8014900:	7863      	ldrb	r3, [r4, #1]
 8014902:	2b2a      	cmp	r3, #42	; 0x2a
 8014904:	d134      	bne.n	8014970 <_vfiprintf_r+0x1b0>
 8014906:	9b03      	ldr	r3, [sp, #12]
 8014908:	1d1a      	adds	r2, r3, #4
 801490a:	681b      	ldr	r3, [r3, #0]
 801490c:	9203      	str	r2, [sp, #12]
 801490e:	2b00      	cmp	r3, #0
 8014910:	bfb8      	it	lt
 8014912:	f04f 33ff 	movlt.w	r3, #4294967295
 8014916:	3402      	adds	r4, #2
 8014918:	9305      	str	r3, [sp, #20]
 801491a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80149f0 <_vfiprintf_r+0x230>
 801491e:	7821      	ldrb	r1, [r4, #0]
 8014920:	2203      	movs	r2, #3
 8014922:	4650      	mov	r0, sl
 8014924:	f7eb fc64 	bl	80001f0 <memchr>
 8014928:	b138      	cbz	r0, 801493a <_vfiprintf_r+0x17a>
 801492a:	9b04      	ldr	r3, [sp, #16]
 801492c:	eba0 000a 	sub.w	r0, r0, sl
 8014930:	2240      	movs	r2, #64	; 0x40
 8014932:	4082      	lsls	r2, r0
 8014934:	4313      	orrs	r3, r2
 8014936:	3401      	adds	r4, #1
 8014938:	9304      	str	r3, [sp, #16]
 801493a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801493e:	4829      	ldr	r0, [pc, #164]	; (80149e4 <_vfiprintf_r+0x224>)
 8014940:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014944:	2206      	movs	r2, #6
 8014946:	f7eb fc53 	bl	80001f0 <memchr>
 801494a:	2800      	cmp	r0, #0
 801494c:	d03f      	beq.n	80149ce <_vfiprintf_r+0x20e>
 801494e:	4b26      	ldr	r3, [pc, #152]	; (80149e8 <_vfiprintf_r+0x228>)
 8014950:	bb1b      	cbnz	r3, 801499a <_vfiprintf_r+0x1da>
 8014952:	9b03      	ldr	r3, [sp, #12]
 8014954:	3307      	adds	r3, #7
 8014956:	f023 0307 	bic.w	r3, r3, #7
 801495a:	3308      	adds	r3, #8
 801495c:	9303      	str	r3, [sp, #12]
 801495e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014960:	443b      	add	r3, r7
 8014962:	9309      	str	r3, [sp, #36]	; 0x24
 8014964:	e768      	b.n	8014838 <_vfiprintf_r+0x78>
 8014966:	fb0c 3202 	mla	r2, ip, r2, r3
 801496a:	460c      	mov	r4, r1
 801496c:	2001      	movs	r0, #1
 801496e:	e7a6      	b.n	80148be <_vfiprintf_r+0xfe>
 8014970:	2300      	movs	r3, #0
 8014972:	3401      	adds	r4, #1
 8014974:	9305      	str	r3, [sp, #20]
 8014976:	4619      	mov	r1, r3
 8014978:	f04f 0c0a 	mov.w	ip, #10
 801497c:	4620      	mov	r0, r4
 801497e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014982:	3a30      	subs	r2, #48	; 0x30
 8014984:	2a09      	cmp	r2, #9
 8014986:	d903      	bls.n	8014990 <_vfiprintf_r+0x1d0>
 8014988:	2b00      	cmp	r3, #0
 801498a:	d0c6      	beq.n	801491a <_vfiprintf_r+0x15a>
 801498c:	9105      	str	r1, [sp, #20]
 801498e:	e7c4      	b.n	801491a <_vfiprintf_r+0x15a>
 8014990:	fb0c 2101 	mla	r1, ip, r1, r2
 8014994:	4604      	mov	r4, r0
 8014996:	2301      	movs	r3, #1
 8014998:	e7f0      	b.n	801497c <_vfiprintf_r+0x1bc>
 801499a:	ab03      	add	r3, sp, #12
 801499c:	9300      	str	r3, [sp, #0]
 801499e:	462a      	mov	r2, r5
 80149a0:	4b12      	ldr	r3, [pc, #72]	; (80149ec <_vfiprintf_r+0x22c>)
 80149a2:	a904      	add	r1, sp, #16
 80149a4:	4630      	mov	r0, r6
 80149a6:	f7fd fbb7 	bl	8012118 <_printf_float>
 80149aa:	4607      	mov	r7, r0
 80149ac:	1c78      	adds	r0, r7, #1
 80149ae:	d1d6      	bne.n	801495e <_vfiprintf_r+0x19e>
 80149b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80149b2:	07d9      	lsls	r1, r3, #31
 80149b4:	d405      	bmi.n	80149c2 <_vfiprintf_r+0x202>
 80149b6:	89ab      	ldrh	r3, [r5, #12]
 80149b8:	059a      	lsls	r2, r3, #22
 80149ba:	d402      	bmi.n	80149c2 <_vfiprintf_r+0x202>
 80149bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80149be:	f7fe fa6d 	bl	8012e9c <__retarget_lock_release_recursive>
 80149c2:	89ab      	ldrh	r3, [r5, #12]
 80149c4:	065b      	lsls	r3, r3, #25
 80149c6:	f53f af1d 	bmi.w	8014804 <_vfiprintf_r+0x44>
 80149ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80149cc:	e71c      	b.n	8014808 <_vfiprintf_r+0x48>
 80149ce:	ab03      	add	r3, sp, #12
 80149d0:	9300      	str	r3, [sp, #0]
 80149d2:	462a      	mov	r2, r5
 80149d4:	4b05      	ldr	r3, [pc, #20]	; (80149ec <_vfiprintf_r+0x22c>)
 80149d6:	a904      	add	r1, sp, #16
 80149d8:	4630      	mov	r0, r6
 80149da:	f7fd fe41 	bl	8012660 <_printf_i>
 80149de:	e7e4      	b.n	80149aa <_vfiprintf_r+0x1ea>
 80149e0:	08015a7c 	.word	0x08015a7c
 80149e4:	08015a86 	.word	0x08015a86
 80149e8:	08012119 	.word	0x08012119
 80149ec:	0801479b 	.word	0x0801479b
 80149f0:	08015a82 	.word	0x08015a82

080149f4 <__sflush_r>:
 80149f4:	898a      	ldrh	r2, [r1, #12]
 80149f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149fa:	4605      	mov	r5, r0
 80149fc:	0710      	lsls	r0, r2, #28
 80149fe:	460c      	mov	r4, r1
 8014a00:	d458      	bmi.n	8014ab4 <__sflush_r+0xc0>
 8014a02:	684b      	ldr	r3, [r1, #4]
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	dc05      	bgt.n	8014a14 <__sflush_r+0x20>
 8014a08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	dc02      	bgt.n	8014a14 <__sflush_r+0x20>
 8014a0e:	2000      	movs	r0, #0
 8014a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014a16:	2e00      	cmp	r6, #0
 8014a18:	d0f9      	beq.n	8014a0e <__sflush_r+0x1a>
 8014a1a:	2300      	movs	r3, #0
 8014a1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014a20:	682f      	ldr	r7, [r5, #0]
 8014a22:	6a21      	ldr	r1, [r4, #32]
 8014a24:	602b      	str	r3, [r5, #0]
 8014a26:	d032      	beq.n	8014a8e <__sflush_r+0x9a>
 8014a28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014a2a:	89a3      	ldrh	r3, [r4, #12]
 8014a2c:	075a      	lsls	r2, r3, #29
 8014a2e:	d505      	bpl.n	8014a3c <__sflush_r+0x48>
 8014a30:	6863      	ldr	r3, [r4, #4]
 8014a32:	1ac0      	subs	r0, r0, r3
 8014a34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014a36:	b10b      	cbz	r3, 8014a3c <__sflush_r+0x48>
 8014a38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014a3a:	1ac0      	subs	r0, r0, r3
 8014a3c:	2300      	movs	r3, #0
 8014a3e:	4602      	mov	r2, r0
 8014a40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014a42:	6a21      	ldr	r1, [r4, #32]
 8014a44:	4628      	mov	r0, r5
 8014a46:	47b0      	blx	r6
 8014a48:	1c43      	adds	r3, r0, #1
 8014a4a:	89a3      	ldrh	r3, [r4, #12]
 8014a4c:	d106      	bne.n	8014a5c <__sflush_r+0x68>
 8014a4e:	6829      	ldr	r1, [r5, #0]
 8014a50:	291d      	cmp	r1, #29
 8014a52:	d82b      	bhi.n	8014aac <__sflush_r+0xb8>
 8014a54:	4a29      	ldr	r2, [pc, #164]	; (8014afc <__sflush_r+0x108>)
 8014a56:	410a      	asrs	r2, r1
 8014a58:	07d6      	lsls	r6, r2, #31
 8014a5a:	d427      	bmi.n	8014aac <__sflush_r+0xb8>
 8014a5c:	2200      	movs	r2, #0
 8014a5e:	6062      	str	r2, [r4, #4]
 8014a60:	04d9      	lsls	r1, r3, #19
 8014a62:	6922      	ldr	r2, [r4, #16]
 8014a64:	6022      	str	r2, [r4, #0]
 8014a66:	d504      	bpl.n	8014a72 <__sflush_r+0x7e>
 8014a68:	1c42      	adds	r2, r0, #1
 8014a6a:	d101      	bne.n	8014a70 <__sflush_r+0x7c>
 8014a6c:	682b      	ldr	r3, [r5, #0]
 8014a6e:	b903      	cbnz	r3, 8014a72 <__sflush_r+0x7e>
 8014a70:	6560      	str	r0, [r4, #84]	; 0x54
 8014a72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014a74:	602f      	str	r7, [r5, #0]
 8014a76:	2900      	cmp	r1, #0
 8014a78:	d0c9      	beq.n	8014a0e <__sflush_r+0x1a>
 8014a7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014a7e:	4299      	cmp	r1, r3
 8014a80:	d002      	beq.n	8014a88 <__sflush_r+0x94>
 8014a82:	4628      	mov	r0, r5
 8014a84:	f7ff f896 	bl	8013bb4 <_free_r>
 8014a88:	2000      	movs	r0, #0
 8014a8a:	6360      	str	r0, [r4, #52]	; 0x34
 8014a8c:	e7c0      	b.n	8014a10 <__sflush_r+0x1c>
 8014a8e:	2301      	movs	r3, #1
 8014a90:	4628      	mov	r0, r5
 8014a92:	47b0      	blx	r6
 8014a94:	1c41      	adds	r1, r0, #1
 8014a96:	d1c8      	bne.n	8014a2a <__sflush_r+0x36>
 8014a98:	682b      	ldr	r3, [r5, #0]
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d0c5      	beq.n	8014a2a <__sflush_r+0x36>
 8014a9e:	2b1d      	cmp	r3, #29
 8014aa0:	d001      	beq.n	8014aa6 <__sflush_r+0xb2>
 8014aa2:	2b16      	cmp	r3, #22
 8014aa4:	d101      	bne.n	8014aaa <__sflush_r+0xb6>
 8014aa6:	602f      	str	r7, [r5, #0]
 8014aa8:	e7b1      	b.n	8014a0e <__sflush_r+0x1a>
 8014aaa:	89a3      	ldrh	r3, [r4, #12]
 8014aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014ab0:	81a3      	strh	r3, [r4, #12]
 8014ab2:	e7ad      	b.n	8014a10 <__sflush_r+0x1c>
 8014ab4:	690f      	ldr	r7, [r1, #16]
 8014ab6:	2f00      	cmp	r7, #0
 8014ab8:	d0a9      	beq.n	8014a0e <__sflush_r+0x1a>
 8014aba:	0793      	lsls	r3, r2, #30
 8014abc:	680e      	ldr	r6, [r1, #0]
 8014abe:	bf08      	it	eq
 8014ac0:	694b      	ldreq	r3, [r1, #20]
 8014ac2:	600f      	str	r7, [r1, #0]
 8014ac4:	bf18      	it	ne
 8014ac6:	2300      	movne	r3, #0
 8014ac8:	eba6 0807 	sub.w	r8, r6, r7
 8014acc:	608b      	str	r3, [r1, #8]
 8014ace:	f1b8 0f00 	cmp.w	r8, #0
 8014ad2:	dd9c      	ble.n	8014a0e <__sflush_r+0x1a>
 8014ad4:	6a21      	ldr	r1, [r4, #32]
 8014ad6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014ad8:	4643      	mov	r3, r8
 8014ada:	463a      	mov	r2, r7
 8014adc:	4628      	mov	r0, r5
 8014ade:	47b0      	blx	r6
 8014ae0:	2800      	cmp	r0, #0
 8014ae2:	dc06      	bgt.n	8014af2 <__sflush_r+0xfe>
 8014ae4:	89a3      	ldrh	r3, [r4, #12]
 8014ae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014aea:	81a3      	strh	r3, [r4, #12]
 8014aec:	f04f 30ff 	mov.w	r0, #4294967295
 8014af0:	e78e      	b.n	8014a10 <__sflush_r+0x1c>
 8014af2:	4407      	add	r7, r0
 8014af4:	eba8 0800 	sub.w	r8, r8, r0
 8014af8:	e7e9      	b.n	8014ace <__sflush_r+0xda>
 8014afa:	bf00      	nop
 8014afc:	dfbffffe 	.word	0xdfbffffe

08014b00 <_fflush_r>:
 8014b00:	b538      	push	{r3, r4, r5, lr}
 8014b02:	690b      	ldr	r3, [r1, #16]
 8014b04:	4605      	mov	r5, r0
 8014b06:	460c      	mov	r4, r1
 8014b08:	b913      	cbnz	r3, 8014b10 <_fflush_r+0x10>
 8014b0a:	2500      	movs	r5, #0
 8014b0c:	4628      	mov	r0, r5
 8014b0e:	bd38      	pop	{r3, r4, r5, pc}
 8014b10:	b118      	cbz	r0, 8014b1a <_fflush_r+0x1a>
 8014b12:	6a03      	ldr	r3, [r0, #32]
 8014b14:	b90b      	cbnz	r3, 8014b1a <_fflush_r+0x1a>
 8014b16:	f7fd ff51 	bl	80129bc <__sinit>
 8014b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d0f3      	beq.n	8014b0a <_fflush_r+0xa>
 8014b22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014b24:	07d0      	lsls	r0, r2, #31
 8014b26:	d404      	bmi.n	8014b32 <_fflush_r+0x32>
 8014b28:	0599      	lsls	r1, r3, #22
 8014b2a:	d402      	bmi.n	8014b32 <_fflush_r+0x32>
 8014b2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014b2e:	f7fe f9b4 	bl	8012e9a <__retarget_lock_acquire_recursive>
 8014b32:	4628      	mov	r0, r5
 8014b34:	4621      	mov	r1, r4
 8014b36:	f7ff ff5d 	bl	80149f4 <__sflush_r>
 8014b3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014b3c:	07da      	lsls	r2, r3, #31
 8014b3e:	4605      	mov	r5, r0
 8014b40:	d4e4      	bmi.n	8014b0c <_fflush_r+0xc>
 8014b42:	89a3      	ldrh	r3, [r4, #12]
 8014b44:	059b      	lsls	r3, r3, #22
 8014b46:	d4e1      	bmi.n	8014b0c <_fflush_r+0xc>
 8014b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014b4a:	f7fe f9a7 	bl	8012e9c <__retarget_lock_release_recursive>
 8014b4e:	e7dd      	b.n	8014b0c <_fflush_r+0xc>

08014b50 <__swhatbuf_r>:
 8014b50:	b570      	push	{r4, r5, r6, lr}
 8014b52:	460c      	mov	r4, r1
 8014b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b58:	2900      	cmp	r1, #0
 8014b5a:	b096      	sub	sp, #88	; 0x58
 8014b5c:	4615      	mov	r5, r2
 8014b5e:	461e      	mov	r6, r3
 8014b60:	da0d      	bge.n	8014b7e <__swhatbuf_r+0x2e>
 8014b62:	89a3      	ldrh	r3, [r4, #12]
 8014b64:	f013 0f80 	tst.w	r3, #128	; 0x80
 8014b68:	f04f 0100 	mov.w	r1, #0
 8014b6c:	bf0c      	ite	eq
 8014b6e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8014b72:	2340      	movne	r3, #64	; 0x40
 8014b74:	2000      	movs	r0, #0
 8014b76:	6031      	str	r1, [r6, #0]
 8014b78:	602b      	str	r3, [r5, #0]
 8014b7a:	b016      	add	sp, #88	; 0x58
 8014b7c:	bd70      	pop	{r4, r5, r6, pc}
 8014b7e:	466a      	mov	r2, sp
 8014b80:	f000 f862 	bl	8014c48 <_fstat_r>
 8014b84:	2800      	cmp	r0, #0
 8014b86:	dbec      	blt.n	8014b62 <__swhatbuf_r+0x12>
 8014b88:	9901      	ldr	r1, [sp, #4]
 8014b8a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8014b8e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8014b92:	4259      	negs	r1, r3
 8014b94:	4159      	adcs	r1, r3
 8014b96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014b9a:	e7eb      	b.n	8014b74 <__swhatbuf_r+0x24>

08014b9c <__smakebuf_r>:
 8014b9c:	898b      	ldrh	r3, [r1, #12]
 8014b9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014ba0:	079d      	lsls	r5, r3, #30
 8014ba2:	4606      	mov	r6, r0
 8014ba4:	460c      	mov	r4, r1
 8014ba6:	d507      	bpl.n	8014bb8 <__smakebuf_r+0x1c>
 8014ba8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014bac:	6023      	str	r3, [r4, #0]
 8014bae:	6123      	str	r3, [r4, #16]
 8014bb0:	2301      	movs	r3, #1
 8014bb2:	6163      	str	r3, [r4, #20]
 8014bb4:	b002      	add	sp, #8
 8014bb6:	bd70      	pop	{r4, r5, r6, pc}
 8014bb8:	ab01      	add	r3, sp, #4
 8014bba:	466a      	mov	r2, sp
 8014bbc:	f7ff ffc8 	bl	8014b50 <__swhatbuf_r>
 8014bc0:	9900      	ldr	r1, [sp, #0]
 8014bc2:	4605      	mov	r5, r0
 8014bc4:	4630      	mov	r0, r6
 8014bc6:	f7ff f869 	bl	8013c9c <_malloc_r>
 8014bca:	b948      	cbnz	r0, 8014be0 <__smakebuf_r+0x44>
 8014bcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014bd0:	059a      	lsls	r2, r3, #22
 8014bd2:	d4ef      	bmi.n	8014bb4 <__smakebuf_r+0x18>
 8014bd4:	f023 0303 	bic.w	r3, r3, #3
 8014bd8:	f043 0302 	orr.w	r3, r3, #2
 8014bdc:	81a3      	strh	r3, [r4, #12]
 8014bde:	e7e3      	b.n	8014ba8 <__smakebuf_r+0xc>
 8014be0:	89a3      	ldrh	r3, [r4, #12]
 8014be2:	6020      	str	r0, [r4, #0]
 8014be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014be8:	81a3      	strh	r3, [r4, #12]
 8014bea:	9b00      	ldr	r3, [sp, #0]
 8014bec:	6163      	str	r3, [r4, #20]
 8014bee:	9b01      	ldr	r3, [sp, #4]
 8014bf0:	6120      	str	r0, [r4, #16]
 8014bf2:	b15b      	cbz	r3, 8014c0c <__smakebuf_r+0x70>
 8014bf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014bf8:	4630      	mov	r0, r6
 8014bfa:	f000 f837 	bl	8014c6c <_isatty_r>
 8014bfe:	b128      	cbz	r0, 8014c0c <__smakebuf_r+0x70>
 8014c00:	89a3      	ldrh	r3, [r4, #12]
 8014c02:	f023 0303 	bic.w	r3, r3, #3
 8014c06:	f043 0301 	orr.w	r3, r3, #1
 8014c0a:	81a3      	strh	r3, [r4, #12]
 8014c0c:	89a3      	ldrh	r3, [r4, #12]
 8014c0e:	431d      	orrs	r5, r3
 8014c10:	81a5      	strh	r5, [r4, #12]
 8014c12:	e7cf      	b.n	8014bb4 <__smakebuf_r+0x18>

08014c14 <memmove>:
 8014c14:	4288      	cmp	r0, r1
 8014c16:	b510      	push	{r4, lr}
 8014c18:	eb01 0402 	add.w	r4, r1, r2
 8014c1c:	d902      	bls.n	8014c24 <memmove+0x10>
 8014c1e:	4284      	cmp	r4, r0
 8014c20:	4623      	mov	r3, r4
 8014c22:	d807      	bhi.n	8014c34 <memmove+0x20>
 8014c24:	1e43      	subs	r3, r0, #1
 8014c26:	42a1      	cmp	r1, r4
 8014c28:	d008      	beq.n	8014c3c <memmove+0x28>
 8014c2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014c2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014c32:	e7f8      	b.n	8014c26 <memmove+0x12>
 8014c34:	4402      	add	r2, r0
 8014c36:	4601      	mov	r1, r0
 8014c38:	428a      	cmp	r2, r1
 8014c3a:	d100      	bne.n	8014c3e <memmove+0x2a>
 8014c3c:	bd10      	pop	{r4, pc}
 8014c3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014c42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014c46:	e7f7      	b.n	8014c38 <memmove+0x24>

08014c48 <_fstat_r>:
 8014c48:	b538      	push	{r3, r4, r5, lr}
 8014c4a:	4d07      	ldr	r5, [pc, #28]	; (8014c68 <_fstat_r+0x20>)
 8014c4c:	2300      	movs	r3, #0
 8014c4e:	4604      	mov	r4, r0
 8014c50:	4608      	mov	r0, r1
 8014c52:	4611      	mov	r1, r2
 8014c54:	602b      	str	r3, [r5, #0]
 8014c56:	f7f3 fce0 	bl	800861a <_fstat>
 8014c5a:	1c43      	adds	r3, r0, #1
 8014c5c:	d102      	bne.n	8014c64 <_fstat_r+0x1c>
 8014c5e:	682b      	ldr	r3, [r5, #0]
 8014c60:	b103      	cbz	r3, 8014c64 <_fstat_r+0x1c>
 8014c62:	6023      	str	r3, [r4, #0]
 8014c64:	bd38      	pop	{r3, r4, r5, pc}
 8014c66:	bf00      	nop
 8014c68:	20008150 	.word	0x20008150

08014c6c <_isatty_r>:
 8014c6c:	b538      	push	{r3, r4, r5, lr}
 8014c6e:	4d06      	ldr	r5, [pc, #24]	; (8014c88 <_isatty_r+0x1c>)
 8014c70:	2300      	movs	r3, #0
 8014c72:	4604      	mov	r4, r0
 8014c74:	4608      	mov	r0, r1
 8014c76:	602b      	str	r3, [r5, #0]
 8014c78:	f7f3 fcdf 	bl	800863a <_isatty>
 8014c7c:	1c43      	adds	r3, r0, #1
 8014c7e:	d102      	bne.n	8014c86 <_isatty_r+0x1a>
 8014c80:	682b      	ldr	r3, [r5, #0]
 8014c82:	b103      	cbz	r3, 8014c86 <_isatty_r+0x1a>
 8014c84:	6023      	str	r3, [r4, #0]
 8014c86:	bd38      	pop	{r3, r4, r5, pc}
 8014c88:	20008150 	.word	0x20008150

08014c8c <_sbrk_r>:
 8014c8c:	b538      	push	{r3, r4, r5, lr}
 8014c8e:	4d06      	ldr	r5, [pc, #24]	; (8014ca8 <_sbrk_r+0x1c>)
 8014c90:	2300      	movs	r3, #0
 8014c92:	4604      	mov	r4, r0
 8014c94:	4608      	mov	r0, r1
 8014c96:	602b      	str	r3, [r5, #0]
 8014c98:	f7f3 fce8 	bl	800866c <_sbrk>
 8014c9c:	1c43      	adds	r3, r0, #1
 8014c9e:	d102      	bne.n	8014ca6 <_sbrk_r+0x1a>
 8014ca0:	682b      	ldr	r3, [r5, #0]
 8014ca2:	b103      	cbz	r3, 8014ca6 <_sbrk_r+0x1a>
 8014ca4:	6023      	str	r3, [r4, #0]
 8014ca6:	bd38      	pop	{r3, r4, r5, pc}
 8014ca8:	20008150 	.word	0x20008150

08014cac <__assert_func>:
 8014cac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014cae:	4614      	mov	r4, r2
 8014cb0:	461a      	mov	r2, r3
 8014cb2:	4b09      	ldr	r3, [pc, #36]	; (8014cd8 <__assert_func+0x2c>)
 8014cb4:	681b      	ldr	r3, [r3, #0]
 8014cb6:	4605      	mov	r5, r0
 8014cb8:	68d8      	ldr	r0, [r3, #12]
 8014cba:	b14c      	cbz	r4, 8014cd0 <__assert_func+0x24>
 8014cbc:	4b07      	ldr	r3, [pc, #28]	; (8014cdc <__assert_func+0x30>)
 8014cbe:	9100      	str	r1, [sp, #0]
 8014cc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014cc4:	4906      	ldr	r1, [pc, #24]	; (8014ce0 <__assert_func+0x34>)
 8014cc6:	462b      	mov	r3, r5
 8014cc8:	f000 f844 	bl	8014d54 <fiprintf>
 8014ccc:	f000 f854 	bl	8014d78 <abort>
 8014cd0:	4b04      	ldr	r3, [pc, #16]	; (8014ce4 <__assert_func+0x38>)
 8014cd2:	461c      	mov	r4, r3
 8014cd4:	e7f3      	b.n	8014cbe <__assert_func+0x12>
 8014cd6:	bf00      	nop
 8014cd8:	20000088 	.word	0x20000088
 8014cdc:	08015a97 	.word	0x08015a97
 8014ce0:	08015aa4 	.word	0x08015aa4
 8014ce4:	08015ad2 	.word	0x08015ad2

08014ce8 <_calloc_r>:
 8014ce8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014cea:	fba1 2402 	umull	r2, r4, r1, r2
 8014cee:	b94c      	cbnz	r4, 8014d04 <_calloc_r+0x1c>
 8014cf0:	4611      	mov	r1, r2
 8014cf2:	9201      	str	r2, [sp, #4]
 8014cf4:	f7fe ffd2 	bl	8013c9c <_malloc_r>
 8014cf8:	9a01      	ldr	r2, [sp, #4]
 8014cfa:	4605      	mov	r5, r0
 8014cfc:	b930      	cbnz	r0, 8014d0c <_calloc_r+0x24>
 8014cfe:	4628      	mov	r0, r5
 8014d00:	b003      	add	sp, #12
 8014d02:	bd30      	pop	{r4, r5, pc}
 8014d04:	220c      	movs	r2, #12
 8014d06:	6002      	str	r2, [r0, #0]
 8014d08:	2500      	movs	r5, #0
 8014d0a:	e7f8      	b.n	8014cfe <_calloc_r+0x16>
 8014d0c:	4621      	mov	r1, r4
 8014d0e:	f7fd fff1 	bl	8012cf4 <memset>
 8014d12:	e7f4      	b.n	8014cfe <_calloc_r+0x16>

08014d14 <__ascii_mbtowc>:
 8014d14:	b082      	sub	sp, #8
 8014d16:	b901      	cbnz	r1, 8014d1a <__ascii_mbtowc+0x6>
 8014d18:	a901      	add	r1, sp, #4
 8014d1a:	b142      	cbz	r2, 8014d2e <__ascii_mbtowc+0x1a>
 8014d1c:	b14b      	cbz	r3, 8014d32 <__ascii_mbtowc+0x1e>
 8014d1e:	7813      	ldrb	r3, [r2, #0]
 8014d20:	600b      	str	r3, [r1, #0]
 8014d22:	7812      	ldrb	r2, [r2, #0]
 8014d24:	1e10      	subs	r0, r2, #0
 8014d26:	bf18      	it	ne
 8014d28:	2001      	movne	r0, #1
 8014d2a:	b002      	add	sp, #8
 8014d2c:	4770      	bx	lr
 8014d2e:	4610      	mov	r0, r2
 8014d30:	e7fb      	b.n	8014d2a <__ascii_mbtowc+0x16>
 8014d32:	f06f 0001 	mvn.w	r0, #1
 8014d36:	e7f8      	b.n	8014d2a <__ascii_mbtowc+0x16>

08014d38 <__ascii_wctomb>:
 8014d38:	b149      	cbz	r1, 8014d4e <__ascii_wctomb+0x16>
 8014d3a:	2aff      	cmp	r2, #255	; 0xff
 8014d3c:	bf85      	ittet	hi
 8014d3e:	238a      	movhi	r3, #138	; 0x8a
 8014d40:	6003      	strhi	r3, [r0, #0]
 8014d42:	700a      	strbls	r2, [r1, #0]
 8014d44:	f04f 30ff 	movhi.w	r0, #4294967295
 8014d48:	bf98      	it	ls
 8014d4a:	2001      	movls	r0, #1
 8014d4c:	4770      	bx	lr
 8014d4e:	4608      	mov	r0, r1
 8014d50:	4770      	bx	lr
	...

08014d54 <fiprintf>:
 8014d54:	b40e      	push	{r1, r2, r3}
 8014d56:	b503      	push	{r0, r1, lr}
 8014d58:	4601      	mov	r1, r0
 8014d5a:	ab03      	add	r3, sp, #12
 8014d5c:	4805      	ldr	r0, [pc, #20]	; (8014d74 <fiprintf+0x20>)
 8014d5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014d62:	6800      	ldr	r0, [r0, #0]
 8014d64:	9301      	str	r3, [sp, #4]
 8014d66:	f7ff fd2b 	bl	80147c0 <_vfiprintf_r>
 8014d6a:	b002      	add	sp, #8
 8014d6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014d70:	b003      	add	sp, #12
 8014d72:	4770      	bx	lr
 8014d74:	20000088 	.word	0x20000088

08014d78 <abort>:
 8014d78:	b508      	push	{r3, lr}
 8014d7a:	2006      	movs	r0, #6
 8014d7c:	f000 f82c 	bl	8014dd8 <raise>
 8014d80:	2001      	movs	r0, #1
 8014d82:	f7f3 fbfb 	bl	800857c <_exit>

08014d86 <_raise_r>:
 8014d86:	291f      	cmp	r1, #31
 8014d88:	b538      	push	{r3, r4, r5, lr}
 8014d8a:	4604      	mov	r4, r0
 8014d8c:	460d      	mov	r5, r1
 8014d8e:	d904      	bls.n	8014d9a <_raise_r+0x14>
 8014d90:	2316      	movs	r3, #22
 8014d92:	6003      	str	r3, [r0, #0]
 8014d94:	f04f 30ff 	mov.w	r0, #4294967295
 8014d98:	bd38      	pop	{r3, r4, r5, pc}
 8014d9a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8014d9c:	b112      	cbz	r2, 8014da4 <_raise_r+0x1e>
 8014d9e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014da2:	b94b      	cbnz	r3, 8014db8 <_raise_r+0x32>
 8014da4:	4620      	mov	r0, r4
 8014da6:	f000 f831 	bl	8014e0c <_getpid_r>
 8014daa:	462a      	mov	r2, r5
 8014dac:	4601      	mov	r1, r0
 8014dae:	4620      	mov	r0, r4
 8014db0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014db4:	f000 b818 	b.w	8014de8 <_kill_r>
 8014db8:	2b01      	cmp	r3, #1
 8014dba:	d00a      	beq.n	8014dd2 <_raise_r+0x4c>
 8014dbc:	1c59      	adds	r1, r3, #1
 8014dbe:	d103      	bne.n	8014dc8 <_raise_r+0x42>
 8014dc0:	2316      	movs	r3, #22
 8014dc2:	6003      	str	r3, [r0, #0]
 8014dc4:	2001      	movs	r0, #1
 8014dc6:	e7e7      	b.n	8014d98 <_raise_r+0x12>
 8014dc8:	2400      	movs	r4, #0
 8014dca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014dce:	4628      	mov	r0, r5
 8014dd0:	4798      	blx	r3
 8014dd2:	2000      	movs	r0, #0
 8014dd4:	e7e0      	b.n	8014d98 <_raise_r+0x12>
	...

08014dd8 <raise>:
 8014dd8:	4b02      	ldr	r3, [pc, #8]	; (8014de4 <raise+0xc>)
 8014dda:	4601      	mov	r1, r0
 8014ddc:	6818      	ldr	r0, [r3, #0]
 8014dde:	f7ff bfd2 	b.w	8014d86 <_raise_r>
 8014de2:	bf00      	nop
 8014de4:	20000088 	.word	0x20000088

08014de8 <_kill_r>:
 8014de8:	b538      	push	{r3, r4, r5, lr}
 8014dea:	4d07      	ldr	r5, [pc, #28]	; (8014e08 <_kill_r+0x20>)
 8014dec:	2300      	movs	r3, #0
 8014dee:	4604      	mov	r4, r0
 8014df0:	4608      	mov	r0, r1
 8014df2:	4611      	mov	r1, r2
 8014df4:	602b      	str	r3, [r5, #0]
 8014df6:	f7f3 fbb1 	bl	800855c <_kill>
 8014dfa:	1c43      	adds	r3, r0, #1
 8014dfc:	d102      	bne.n	8014e04 <_kill_r+0x1c>
 8014dfe:	682b      	ldr	r3, [r5, #0]
 8014e00:	b103      	cbz	r3, 8014e04 <_kill_r+0x1c>
 8014e02:	6023      	str	r3, [r4, #0]
 8014e04:	bd38      	pop	{r3, r4, r5, pc}
 8014e06:	bf00      	nop
 8014e08:	20008150 	.word	0x20008150

08014e0c <_getpid_r>:
 8014e0c:	f7f3 bb9e 	b.w	800854c <_getpid>

08014e10 <_init>:
 8014e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e12:	bf00      	nop
 8014e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014e16:	bc08      	pop	{r3}
 8014e18:	469e      	mov	lr, r3
 8014e1a:	4770      	bx	lr

08014e1c <_fini>:
 8014e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e1e:	bf00      	nop
 8014e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014e22:	bc08      	pop	{r3}
 8014e24:	469e      	mov	lr, r3
 8014e26:	4770      	bx	lr
