
Krai_Main_Oto_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014ef8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dbc  080150a8  080150a8  000250a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015e64  08015e64  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  08015e64  08015e64  00025e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015e6c  08015e6c  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08015e6c  08015e6c  00025e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015e74  08015e74  00025e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08015e78  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301f8  2**0
                  CONTENTS
 10 .bss          00007ffc  200001f8  200001f8  000301f8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200081f4  200081f4  000301f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY
 14 .debug_info   000297bf  00000000  00000000  0003026b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004eff  00000000  00000000  00059a2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001e08  00000000  00000000  0005e930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000177a  00000000  00000000  00060738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000a840  00000000  00000000  00061eb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00023513  00000000  00000000  0006c6f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f2ecf  00000000  00000000  0008fc05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000097a0  00000000  00000000  00182ad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0018c274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08015090 	.word	0x08015090

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	08015090 	.word	0x08015090

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b970 	b.w	8000f60 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	460d      	mov	r5, r1
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	460f      	mov	r7, r1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d14a      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4694      	mov	ip, r2
 8000cac:	d965      	bls.n	8000d7a <__udivmoddi4+0xe2>
 8000cae:	fab2 f382 	clz	r3, r2
 8000cb2:	b143      	cbz	r3, 8000cc6 <__udivmoddi4+0x2e>
 8000cb4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cb8:	f1c3 0220 	rsb	r2, r3, #32
 8000cbc:	409f      	lsls	r7, r3
 8000cbe:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc2:	4317      	orrs	r7, r2
 8000cc4:	409c      	lsls	r4, r3
 8000cc6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cca:	fa1f f58c 	uxth.w	r5, ip
 8000cce:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cd2:	0c22      	lsrs	r2, r4, #16
 8000cd4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cd8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cdc:	fb01 f005 	mul.w	r0, r1, r5
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	d90a      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ce8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cec:	f080 811c 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	f240 8119 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4462      	add	r2, ip
 8000cfa:	1a12      	subs	r2, r2, r0
 8000cfc:	b2a4      	uxth	r4, r4
 8000cfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0a:	fb00 f505 	mul.w	r5, r0, r5
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	d90a      	bls.n	8000d28 <__udivmoddi4+0x90>
 8000d12:	eb1c 0404 	adds.w	r4, ip, r4
 8000d16:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1a:	f080 8107 	bcs.w	8000f2c <__udivmoddi4+0x294>
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	f240 8104 	bls.w	8000f2c <__udivmoddi4+0x294>
 8000d24:	4464      	add	r4, ip
 8000d26:	3802      	subs	r0, #2
 8000d28:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2c:	1b64      	subs	r4, r4, r5
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b11e      	cbz	r6, 8000d3a <__udivmoddi4+0xa2>
 8000d32:	40dc      	lsrs	r4, r3
 8000d34:	2300      	movs	r3, #0
 8000d36:	e9c6 4300 	strd	r4, r3, [r6]
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0xbc>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80ed 	beq.w	8000f22 <__udivmoddi4+0x28a>
 8000d48:	2100      	movs	r1, #0
 8000d4a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d54:	fab3 f183 	clz	r1, r3
 8000d58:	2900      	cmp	r1, #0
 8000d5a:	d149      	bne.n	8000df0 <__udivmoddi4+0x158>
 8000d5c:	42ab      	cmp	r3, r5
 8000d5e:	d302      	bcc.n	8000d66 <__udivmoddi4+0xce>
 8000d60:	4282      	cmp	r2, r0
 8000d62:	f200 80f8 	bhi.w	8000f56 <__udivmoddi4+0x2be>
 8000d66:	1a84      	subs	r4, r0, r2
 8000d68:	eb65 0203 	sbc.w	r2, r5, r3
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	4617      	mov	r7, r2
 8000d70:	2e00      	cmp	r6, #0
 8000d72:	d0e2      	beq.n	8000d3a <__udivmoddi4+0xa2>
 8000d74:	e9c6 4700 	strd	r4, r7, [r6]
 8000d78:	e7df      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d7a:	b902      	cbnz	r2, 8000d7e <__udivmoddi4+0xe6>
 8000d7c:	deff      	udf	#255	; 0xff
 8000d7e:	fab2 f382 	clz	r3, r2
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f040 8090 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d88:	1a8a      	subs	r2, r1, r2
 8000d8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8e:	fa1f fe8c 	uxth.w	lr, ip
 8000d92:	2101      	movs	r1, #1
 8000d94:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d98:	fb07 2015 	mls	r0, r7, r5, r2
 8000d9c:	0c22      	lsrs	r2, r4, #16
 8000d9e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000da2:	fb0e f005 	mul.w	r0, lr, r5
 8000da6:	4290      	cmp	r0, r2
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000daa:	eb1c 0202 	adds.w	r2, ip, r2
 8000dae:	f105 38ff 	add.w	r8, r5, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4290      	cmp	r0, r2
 8000db6:	f200 80cb 	bhi.w	8000f50 <__udivmoddi4+0x2b8>
 8000dba:	4645      	mov	r5, r8
 8000dbc:	1a12      	subs	r2, r2, r0
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dc4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dc8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dcc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd0:	45a6      	cmp	lr, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x14e>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ddc:	d202      	bcs.n	8000de4 <__udivmoddi4+0x14c>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	f200 80bb 	bhi.w	8000f5a <__udivmoddi4+0x2c2>
 8000de4:	4610      	mov	r0, r2
 8000de6:	eba4 040e 	sub.w	r4, r4, lr
 8000dea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dee:	e79f      	b.n	8000d30 <__udivmoddi4+0x98>
 8000df0:	f1c1 0720 	rsb	r7, r1, #32
 8000df4:	408b      	lsls	r3, r1
 8000df6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dfa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dfe:	fa05 f401 	lsl.w	r4, r5, r1
 8000e02:	fa20 f307 	lsr.w	r3, r0, r7
 8000e06:	40fd      	lsrs	r5, r7
 8000e08:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e0c:	4323      	orrs	r3, r4
 8000e0e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e12:	fa1f fe8c 	uxth.w	lr, ip
 8000e16:	fb09 5518 	mls	r5, r9, r8, r5
 8000e1a:	0c1c      	lsrs	r4, r3, #16
 8000e1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e20:	fb08 f50e 	mul.w	r5, r8, lr
 8000e24:	42a5      	cmp	r5, r4
 8000e26:	fa02 f201 	lsl.w	r2, r2, r1
 8000e2a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e38:	f080 8088 	bcs.w	8000f4c <__udivmoddi4+0x2b4>
 8000e3c:	42a5      	cmp	r5, r4
 8000e3e:	f240 8085 	bls.w	8000f4c <__udivmoddi4+0x2b4>
 8000e42:	f1a8 0802 	sub.w	r8, r8, #2
 8000e46:	4464      	add	r4, ip
 8000e48:	1b64      	subs	r4, r4, r5
 8000e4a:	b29d      	uxth	r5, r3
 8000e4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e50:	fb09 4413 	mls	r4, r9, r3, r4
 8000e54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e68:	d26c      	bcs.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	d96a      	bls.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6e:	3b02      	subs	r3, #2
 8000e70:	4464      	add	r4, ip
 8000e72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e76:	fba3 9502 	umull	r9, r5, r3, r2
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	42ac      	cmp	r4, r5
 8000e80:	46c8      	mov	r8, r9
 8000e82:	46ae      	mov	lr, r5
 8000e84:	d356      	bcc.n	8000f34 <__udivmoddi4+0x29c>
 8000e86:	d053      	beq.n	8000f30 <__udivmoddi4+0x298>
 8000e88:	b156      	cbz	r6, 8000ea0 <__udivmoddi4+0x208>
 8000e8a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e8e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e92:	fa04 f707 	lsl.w	r7, r4, r7
 8000e96:	40ca      	lsrs	r2, r1
 8000e98:	40cc      	lsrs	r4, r1
 8000e9a:	4317      	orrs	r7, r2
 8000e9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea8:	f1c3 0120 	rsb	r1, r3, #32
 8000eac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eb0:	fa20 f201 	lsr.w	r2, r0, r1
 8000eb4:	fa25 f101 	lsr.w	r1, r5, r1
 8000eb8:	409d      	lsls	r5, r3
 8000eba:	432a      	orrs	r2, r5
 8000ebc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec0:	fa1f fe8c 	uxth.w	lr, ip
 8000ec4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ec8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ed2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ed6:	428d      	cmp	r5, r1
 8000ed8:	fa04 f403 	lsl.w	r4, r4, r3
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x258>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ee6:	d22f      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000ee8:	428d      	cmp	r5, r1
 8000eea:	d92d      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000eec:	3802      	subs	r0, #2
 8000eee:	4461      	add	r1, ip
 8000ef0:	1b49      	subs	r1, r1, r5
 8000ef2:	b292      	uxth	r2, r2
 8000ef4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ef8:	fb07 1115 	mls	r1, r7, r5, r1
 8000efc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f00:	fb05 f10e 	mul.w	r1, r5, lr
 8000f04:	4291      	cmp	r1, r2
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x282>
 8000f08:	eb1c 0202 	adds.w	r2, ip, r2
 8000f0c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f10:	d216      	bcs.n	8000f40 <__udivmoddi4+0x2a8>
 8000f12:	4291      	cmp	r1, r2
 8000f14:	d914      	bls.n	8000f40 <__udivmoddi4+0x2a8>
 8000f16:	3d02      	subs	r5, #2
 8000f18:	4462      	add	r2, ip
 8000f1a:	1a52      	subs	r2, r2, r1
 8000f1c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f20:	e738      	b.n	8000d94 <__udivmoddi4+0xfc>
 8000f22:	4631      	mov	r1, r6
 8000f24:	4630      	mov	r0, r6
 8000f26:	e708      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000f28:	4639      	mov	r1, r7
 8000f2a:	e6e6      	b.n	8000cfa <__udivmoddi4+0x62>
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	e6fb      	b.n	8000d28 <__udivmoddi4+0x90>
 8000f30:	4548      	cmp	r0, r9
 8000f32:	d2a9      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f34:	ebb9 0802 	subs.w	r8, r9, r2
 8000f38:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	e7a3      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f40:	4645      	mov	r5, r8
 8000f42:	e7ea      	b.n	8000f1a <__udivmoddi4+0x282>
 8000f44:	462b      	mov	r3, r5
 8000f46:	e794      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f48:	4640      	mov	r0, r8
 8000f4a:	e7d1      	b.n	8000ef0 <__udivmoddi4+0x258>
 8000f4c:	46d0      	mov	r8, sl
 8000f4e:	e77b      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f50:	3d02      	subs	r5, #2
 8000f52:	4462      	add	r2, ip
 8000f54:	e732      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e70a      	b.n	8000d70 <__udivmoddi4+0xd8>
 8000f5a:	4464      	add	r4, ip
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	e742      	b.n	8000de6 <__udivmoddi4+0x14e>

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	4619      	mov	r1, r3
 8000f72:	2007      	movs	r0, #7
 8000f74:	f001 fc1c 	bl	80027b0 <bno055_writeData>
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	203d      	movs	r0, #61	; 0x3d
 8000f90:	f001 fc0e 	bl	80027b0 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d103      	bne.n	8000fa2 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8000f9a:	2013      	movs	r0, #19
 8000f9c:	f001 fbfc 	bl	8002798 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8000fa0:	e002      	b.n	8000fa8 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8000fa2:	2007      	movs	r0, #7
 8000fa4:	f001 fbf8 	bl	8002798 <bno055_delay>
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	f7ff ffe3 	bl	8000f80 <bno055_setOperationMode>
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8000fc2:	200c      	movs	r0, #12
 8000fc4:	f7ff ffdc 	bl	8000f80 <bno055_setOperationMode>
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8000fd0:	2120      	movs	r1, #32
 8000fd2:	203f      	movs	r0, #63	; 0x3f
 8000fd4:	f001 fbec 	bl	80027b0 <bno055_writeData>
  bno055_delay(700);
 8000fd8:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000fdc:	f001 fbdc 	bl	8002798 <bno055_delay>
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
  bno055_reset();
 8000fea:	f7ff ffef 	bl	8000fcc <bno055_reset>

  uint8_t id = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8000ff2:	1dfb      	adds	r3, r7, #7
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f001 fcc5 	bl	8002988 <bno055_readData>
  if (id != BNO055_ID) {
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2ba0      	cmp	r3, #160	; 0xa0
 8001002:	d004      	beq.n	800100e <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	4619      	mov	r1, r3
 8001008:	4809      	ldr	r0, [pc, #36]	; (8001030 <bno055_setup+0x4c>)
 800100a:	f011 fe4d 	bl	8012ca8 <iprintf>
  }
  bno055_setPage(0);
 800100e:	2000      	movs	r0, #0
 8001010:	f7ff ffa8 	bl	8000f64 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8001014:	2100      	movs	r1, #0
 8001016:	203f      	movs	r0, #63	; 0x3f
 8001018:	f001 fbca 	bl	80027b0 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 800101c:	f7ff ffc8 	bl	8000fb0 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8001020:	200a      	movs	r0, #10
 8001022:	f001 fbb9 	bl	8002798 <bno055_delay>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	080150a8 	.word	0x080150a8

08001034 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8001034:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001038:	b09e      	sub	sp, #120	; 0x78
 800103a:	af00      	add	r7, sp, #0
 800103c:	4603      	mov	r3, r0
 800103e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 8001042:	2000      	movs	r0, #0
 8001044:	f7ff ff8e 	bl	8000f64 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8001048:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800104c:	2b20      	cmp	r3, #32
 800104e:	d108      	bne.n	8001062 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8001050:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001054:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001058:	2208      	movs	r2, #8
 800105a:	4618      	mov	r0, r3
 800105c:	f001 fc94 	bl	8002988 <bno055_readData>
 8001060:	e007      	b.n	8001072 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8001062:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001066:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800106a:	2206      	movs	r2, #6
 800106c:	4618      	mov	r0, r3
 800106e:	f001 fc8b 	bl	8002988 <bno055_readData>

  double scale = 1;
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	4b8b      	ldr	r3, [pc, #556]	; (80012a4 <bno055_getVector+0x270>)
 8001078:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 800107c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001080:	2b0e      	cmp	r3, #14
 8001082:	d109      	bne.n	8001098 <bno055_getVector+0x64>
    scale = magScale;
 8001084:	4b88      	ldr	r3, [pc, #544]	; (80012a8 <bno055_getVector+0x274>)
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fa4b 	bl	8000524 <__aeabi_ui2d>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8001096:	e03e      	b.n	8001116 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8001098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800109c:	2b08      	cmp	r3, #8
 800109e:	d007      	beq.n	80010b0 <bno055_getVector+0x7c>
 80010a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010a4:	2b28      	cmp	r3, #40	; 0x28
 80010a6:	d003      	beq.n	80010b0 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 80010a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010ac:	2b2e      	cmp	r3, #46	; 0x2e
 80010ae:	d109      	bne.n	80010c4 <bno055_getVector+0x90>
    scale = accelScale;
 80010b0:	4b7e      	ldr	r3, [pc, #504]	; (80012ac <bno055_getVector+0x278>)
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff fa35 	bl	8000524 <__aeabi_ui2d>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80010c2:	e028      	b.n	8001116 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 80010c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010c8:	2b14      	cmp	r3, #20
 80010ca:	d109      	bne.n	80010e0 <bno055_getVector+0xac>
    scale = angularRateScale;
 80010cc:	4b78      	ldr	r3, [pc, #480]	; (80012b0 <bno055_getVector+0x27c>)
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff fa27 	bl	8000524 <__aeabi_ui2d>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80010de:	e01a      	b.n	8001116 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 80010e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010e4:	2b1a      	cmp	r3, #26
 80010e6:	d109      	bne.n	80010fc <bno055_getVector+0xc8>
    scale = eulerScale;
 80010e8:	4b72      	ldr	r3, [pc, #456]	; (80012b4 <bno055_getVector+0x280>)
 80010ea:	881b      	ldrh	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fa19 	bl	8000524 <__aeabi_ui2d>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80010fa:	e00c      	b.n	8001116 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 80010fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001100:	2b20      	cmp	r3, #32
 8001102:	d108      	bne.n	8001116 <bno055_getVector+0xe2>
    scale = quaScale;
 8001104:	4b6c      	ldr	r3, [pc, #432]	; (80012b8 <bno055_getVector+0x284>)
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fa0b 	bl	8000524 <__aeabi_ui2d>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8001116:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800111a:	2220      	movs	r2, #32
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f011 ff28 	bl	8012f74 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8001124:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001128:	2b20      	cmp	r3, #32
 800112a:	d150      	bne.n	80011ce <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 800112c:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	b21a      	sxth	r2, r3
 8001134:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001138:	b21b      	sxth	r3, r3
 800113a:	4313      	orrs	r3, r2
 800113c:	b21b      	sxth	r3, r3
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fa00 	bl	8000544 <__aeabi_i2d>
 8001144:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001148:	f7ff fb90 	bl	800086c <__aeabi_ddiv>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001154:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	b21a      	sxth	r2, r3
 800115c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001160:	b21b      	sxth	r3, r3
 8001162:	4313      	orrs	r3, r2
 8001164:	b21b      	sxth	r3, r3
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff f9ec 	bl	8000544 <__aeabi_i2d>
 800116c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001170:	f7ff fb7c 	bl	800086c <__aeabi_ddiv>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 800117c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001180:	021b      	lsls	r3, r3, #8
 8001182:	b21a      	sxth	r2, r3
 8001184:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001188:	b21b      	sxth	r3, r3
 800118a:	4313      	orrs	r3, r2
 800118c:	b21b      	sxth	r3, r3
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff f9d8 	bl	8000544 <__aeabi_i2d>
 8001194:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001198:	f7ff fb68 	bl	800086c <__aeabi_ddiv>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 80011a4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	b21a      	sxth	r2, r3
 80011ac:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80011b0:	b21b      	sxth	r3, r3
 80011b2:	4313      	orrs	r3, r2
 80011b4:	b21b      	sxth	r3, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f9c4 	bl	8000544 <__aeabi_i2d>
 80011bc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80011c0:	f7ff fb54 	bl	800086c <__aeabi_ddiv>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80011cc:	e03b      	b.n	8001246 <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80011ce:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80011d2:	021b      	lsls	r3, r3, #8
 80011d4:	b21a      	sxth	r2, r3
 80011d6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80011da:	b21b      	sxth	r3, r3
 80011dc:	4313      	orrs	r3, r2
 80011de:	b21b      	sxth	r3, r3
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff f9af 	bl	8000544 <__aeabi_i2d>
 80011e6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80011ea:	f7ff fb3f 	bl	800086c <__aeabi_ddiv>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80011f6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80011fa:	021b      	lsls	r3, r3, #8
 80011fc:	b21a      	sxth	r2, r3
 80011fe:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001202:	b21b      	sxth	r3, r3
 8001204:	4313      	orrs	r3, r2
 8001206:	b21b      	sxth	r3, r3
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f99b 	bl	8000544 <__aeabi_i2d>
 800120e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001212:	f7ff fb2b 	bl	800086c <__aeabi_ddiv>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 800121e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001222:	021b      	lsls	r3, r3, #8
 8001224:	b21a      	sxth	r2, r3
 8001226:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800122a:	b21b      	sxth	r3, r3
 800122c:	4313      	orrs	r3, r2
 800122e:	b21b      	sxth	r3, r3
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f987 	bl	8000544 <__aeabi_i2d>
 8001236:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800123a:	f7ff fb17 	bl	800086c <__aeabi_ddiv>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 8001246:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800124a:	f107 0528 	add.w	r5, r7, #40	; 0x28
 800124e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001250:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001252:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001256:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800125a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800125e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001262:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001266:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800126a:	ec49 8b14 	vmov	d4, r8, r9
 800126e:	ec45 4b15 	vmov	d5, r4, r5
 8001272:	ec41 0b16 	vmov	d6, r0, r1
 8001276:	ec43 2b17 	vmov	d7, r2, r3
}
 800127a:	eeb0 0a44 	vmov.f32	s0, s8
 800127e:	eef0 0a64 	vmov.f32	s1, s9
 8001282:	eeb0 1a45 	vmov.f32	s2, s10
 8001286:	eef0 1a65 	vmov.f32	s3, s11
 800128a:	eeb0 2a46 	vmov.f32	s4, s12
 800128e:	eef0 2a66 	vmov.f32	s5, s13
 8001292:	eeb0 3a47 	vmov.f32	s6, s14
 8001296:	eef0 3a67 	vmov.f32	s7, s15
 800129a:	3778      	adds	r7, #120	; 0x78
 800129c:	46bd      	mov	sp, r7
 800129e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80012a2:	bf00      	nop
 80012a4:	3ff00000 	.word	0x3ff00000
 80012a8:	20000006 	.word	0x20000006
 80012ac:	20000000 	.word	0x20000000
 80012b0:	20000002 	.word	0x20000002
 80012b4:	20000004 	.word	0x20000004
 80012b8:	20000008 	.word	0x20000008

080012bc <bno055_getVectorGyroscope>:
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
}
bno055_vector_t bno055_getVectorMagnetometer() {
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
 80012bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012c0:	b090      	sub	sp, #64	; 0x40
 80012c2:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
 80012c4:	2014      	movs	r0, #20
 80012c6:	f7ff feb5 	bl	8001034 <bno055_getVector>
 80012ca:	eeb0 4a40 	vmov.f32	s8, s0
 80012ce:	eef0 4a60 	vmov.f32	s9, s1
 80012d2:	eeb0 5a41 	vmov.f32	s10, s2
 80012d6:	eef0 5a61 	vmov.f32	s11, s3
 80012da:	eeb0 6a42 	vmov.f32	s12, s4
 80012de:	eef0 6a62 	vmov.f32	s13, s5
 80012e2:	eeb0 7a43 	vmov.f32	s14, s6
 80012e6:	eef0 7a63 	vmov.f32	s15, s7
 80012ea:	ed87 4b08 	vstr	d4, [r7, #32]
 80012ee:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 80012f2:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 80012f6:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 80012fa:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80012fe:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001302:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001306:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800130a:	ec49 8b14 	vmov	d4, r8, r9
 800130e:	ec45 4b15 	vmov	d5, r4, r5
 8001312:	ec41 0b16 	vmov	d6, r0, r1
 8001316:	ec43 2b17 	vmov	d7, r2, r3
}
 800131a:	eeb0 0a44 	vmov.f32	s0, s8
 800131e:	eef0 0a64 	vmov.f32	s1, s9
 8001322:	eeb0 1a45 	vmov.f32	s2, s10
 8001326:	eef0 1a65 	vmov.f32	s3, s11
 800132a:	eeb0 2a46 	vmov.f32	s4, s12
 800132e:	eef0 2a66 	vmov.f32	s5, s13
 8001332:	eeb0 3a47 	vmov.f32	s6, s14
 8001336:	eef0 3a67 	vmov.f32	s7, s15
 800133a:	3740      	adds	r7, #64	; 0x40
 800133c:	46bd      	mov	sp, r7
 800133e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001342 <bno055_getVectorEuler>:
bno055_vector_t bno055_getVectorEuler() {
 8001342:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001346:	b090      	sub	sp, #64	; 0x40
 8001348:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 800134a:	201a      	movs	r0, #26
 800134c:	f7ff fe72 	bl	8001034 <bno055_getVector>
 8001350:	eeb0 4a40 	vmov.f32	s8, s0
 8001354:	eef0 4a60 	vmov.f32	s9, s1
 8001358:	eeb0 5a41 	vmov.f32	s10, s2
 800135c:	eef0 5a61 	vmov.f32	s11, s3
 8001360:	eeb0 6a42 	vmov.f32	s12, s4
 8001364:	eef0 6a62 	vmov.f32	s13, s5
 8001368:	eeb0 7a43 	vmov.f32	s14, s6
 800136c:	eef0 7a63 	vmov.f32	s15, s7
 8001370:	ed87 4b08 	vstr	d4, [r7, #32]
 8001374:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8001378:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 800137c:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8001380:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001384:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001388:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800138c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001390:	ec49 8b14 	vmov	d4, r8, r9
 8001394:	ec45 4b15 	vmov	d5, r4, r5
 8001398:	ec41 0b16 	vmov	d6, r0, r1
 800139c:	ec43 2b17 	vmov	d7, r2, r3
}
 80013a0:	eeb0 0a44 	vmov.f32	s0, s8
 80013a4:	eef0 0a64 	vmov.f32	s1, s9
 80013a8:	eeb0 1a45 	vmov.f32	s2, s10
 80013ac:	eef0 1a65 	vmov.f32	s3, s11
 80013b0:	eeb0 2a46 	vmov.f32	s4, s12
 80013b4:	eef0 2a66 	vmov.f32	s5, s13
 80013b8:	eeb0 3a47 	vmov.f32	s6, s14
 80013bc:	eef0 3a67 	vmov.f32	s7, s15
 80013c0:	3740      	adds	r7, #64	; 0x40
 80013c2:	46bd      	mov	sp, r7
 80013c4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080013c8 <bno055_getVectorLinearAccel>:
bno055_vector_t bno055_getVectorLinearAccel() {
 80013c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013cc:	b090      	sub	sp, #64	; 0x40
 80013ce:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
 80013d0:	2028      	movs	r0, #40	; 0x28
 80013d2:	f7ff fe2f 	bl	8001034 <bno055_getVector>
 80013d6:	eeb0 4a40 	vmov.f32	s8, s0
 80013da:	eef0 4a60 	vmov.f32	s9, s1
 80013de:	eeb0 5a41 	vmov.f32	s10, s2
 80013e2:	eef0 5a61 	vmov.f32	s11, s3
 80013e6:	eeb0 6a42 	vmov.f32	s12, s4
 80013ea:	eef0 6a62 	vmov.f32	s13, s5
 80013ee:	eeb0 7a43 	vmov.f32	s14, s6
 80013f2:	eef0 7a63 	vmov.f32	s15, s7
 80013f6:	ed87 4b08 	vstr	d4, [r7, #32]
 80013fa:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 80013fe:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8001402:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8001406:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800140a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800140e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001412:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001416:	ec49 8b14 	vmov	d4, r8, r9
 800141a:	ec45 4b15 	vmov	d5, r4, r5
 800141e:	ec41 0b16 	vmov	d6, r0, r1
 8001422:	ec43 2b17 	vmov	d7, r2, r3
}
 8001426:	eeb0 0a44 	vmov.f32	s0, s8
 800142a:	eef0 0a64 	vmov.f32	s1, s9
 800142e:	eeb0 1a45 	vmov.f32	s2, s10
 8001432:	eef0 1a65 	vmov.f32	s3, s11
 8001436:	eeb0 2a46 	vmov.f32	s4, s12
 800143a:	eef0 2a66 	vmov.f32	s5, s13
 800143e:	eeb0 3a47 	vmov.f32	s6, s14
 8001442:	eef0 3a67 	vmov.f32	s7, s15
 8001446:	3740      	adds	r7, #64	; 0x40
 8001448:	46bd      	mov	sp, r7
 800144a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800144e <bno055_getVectorQuaternion>:
bno055_vector_t bno055_getVectorGravity() {
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
}
bno055_vector_t bno055_getVectorQuaternion() {
 800144e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001452:	b090      	sub	sp, #64	; 0x40
 8001454:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_QUATERNION);
 8001456:	2020      	movs	r0, #32
 8001458:	f7ff fdec 	bl	8001034 <bno055_getVector>
 800145c:	eeb0 4a40 	vmov.f32	s8, s0
 8001460:	eef0 4a60 	vmov.f32	s9, s1
 8001464:	eeb0 5a41 	vmov.f32	s10, s2
 8001468:	eef0 5a61 	vmov.f32	s11, s3
 800146c:	eeb0 6a42 	vmov.f32	s12, s4
 8001470:	eef0 6a62 	vmov.f32	s13, s5
 8001474:	eeb0 7a43 	vmov.f32	s14, s6
 8001478:	eef0 7a63 	vmov.f32	s15, s7
 800147c:	ed87 4b08 	vstr	d4, [r7, #32]
 8001480:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8001484:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8001488:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 800148c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001490:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001494:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001498:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800149c:	ec49 8b14 	vmov	d4, r8, r9
 80014a0:	ec45 4b15 	vmov	d5, r4, r5
 80014a4:	ec41 0b16 	vmov	d6, r0, r1
 80014a8:	ec43 2b17 	vmov	d7, r2, r3
}
 80014ac:	eeb0 0a44 	vmov.f32	s0, s8
 80014b0:	eef0 0a64 	vmov.f32	s1, s9
 80014b4:	eeb0 1a45 	vmov.f32	s2, s10
 80014b8:	eef0 1a65 	vmov.f32	s3, s11
 80014bc:	eeb0 2a46 	vmov.f32	s4, s12
 80014c0:	eef0 2a66 	vmov.f32	s5, s13
 80014c4:	eeb0 3a47 	vmov.f32	s6, s14
 80014c8:	eef0 3a67 	vmov.f32	s7, s15
 80014cc:	3740      	adds	r7, #64	; 0x40
 80014ce:	46bd      	mov	sp, r7
 80014d0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080014d4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af02      	add	r7, sp, #8
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	f023 030f 	bic.w	r3, r3, #15
 80014e4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	011b      	lsls	r3, r3, #4
 80014ea:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
 80014ee:	f043 030c 	orr.w	r3, r3, #12
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80014f6:	7bfb      	ldrb	r3, [r7, #15]
 80014f8:	f043 0308 	orr.w	r3, r3, #8
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001500:	7bbb      	ldrb	r3, [r7, #14]
 8001502:	f043 030c 	orr.w	r3, r3, #12
 8001506:	b2db      	uxtb	r3, r3
 8001508:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800150a:	7bbb      	ldrb	r3, [r7, #14]
 800150c:	f043 0308 	orr.w	r3, r3, #8
 8001510:	b2db      	uxtb	r3, r3
 8001512:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001514:	f107 0208 	add.w	r2, r7, #8
 8001518:	2364      	movs	r3, #100	; 0x64
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	2304      	movs	r3, #4
 800151e:	214e      	movs	r1, #78	; 0x4e
 8001520:	4803      	ldr	r0, [pc, #12]	; (8001530 <lcd_send_cmd+0x5c>)
 8001522:	f008 fb03 	bl	8009b2c <HAL_I2C_Master_Transmit>
}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	200002b0 	.word	0x200002b0

08001534 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af02      	add	r7, sp, #8
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	f023 030f 	bic.w	r3, r3, #15
 8001544:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	011b      	lsls	r3, r3, #4
 800154a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	f043 030d 	orr.w	r3, r3, #13
 8001552:	b2db      	uxtb	r3, r3
 8001554:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	f043 0309 	orr.w	r3, r3, #9
 800155c:	b2db      	uxtb	r3, r3
 800155e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8001560:	7bbb      	ldrb	r3, [r7, #14]
 8001562:	f043 030d 	orr.w	r3, r3, #13
 8001566:	b2db      	uxtb	r3, r3
 8001568:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 800156a:	7bbb      	ldrb	r3, [r7, #14]
 800156c:	f043 0309 	orr.w	r3, r3, #9
 8001570:	b2db      	uxtb	r3, r3
 8001572:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001574:	f107 0208 	add.w	r2, r7, #8
 8001578:	2364      	movs	r3, #100	; 0x64
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	2304      	movs	r3, #4
 800157e:	214e      	movs	r1, #78	; 0x4e
 8001580:	4803      	ldr	r0, [pc, #12]	; (8001590 <lcd_send_data+0x5c>)
 8001582:	f008 fad3 	bl	8009b2c <HAL_I2C_Master_Transmit>
}
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200002b0 	.word	0x200002b0

08001594 <lcd_clear>:

void lcd_clear (void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x00);
 800159a:	2000      	movs	r0, #0
 800159c:	f7ff ff9a 	bl	80014d4 <lcd_send_cmd>
	for (int i=0; i<100; i++)
 80015a0:	2300      	movs	r3, #0
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	e005      	b.n	80015b2 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80015a6:	2020      	movs	r0, #32
 80015a8:	f7ff ffc4 	bl	8001534 <lcd_send_data>
	for (int i=0; i<100; i++)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3301      	adds	r3, #1
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b63      	cmp	r3, #99	; 0x63
 80015b6:	ddf6      	ble.n	80015a6 <lcd_clear+0x12>
	}
}
 80015b8:	bf00      	nop
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <lcd_init>:

void lcd_init (void)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	af00      	add	r7, sp, #0
	// 4 bit initialisation
//	HAL_Delay(50);  // wait for >40ms
	vTaskDelay(50);
 80015c6:	2032      	movs	r0, #50	; 0x32
 80015c8:	f00d f9a0 	bl	800e90c <vTaskDelay>
	lcd_send_cmd (0x30);
 80015cc:	2030      	movs	r0, #48	; 0x30
 80015ce:	f7ff ff81 	bl	80014d4 <lcd_send_cmd>
//	HAL_Delay(5);  // wait for >4.1ms
	vTaskDelay(5);
 80015d2:	2005      	movs	r0, #5
 80015d4:	f00d f99a 	bl	800e90c <vTaskDelay>
	lcd_send_cmd (0x30);
 80015d8:	2030      	movs	r0, #48	; 0x30
 80015da:	f7ff ff7b 	bl	80014d4 <lcd_send_cmd>
//	HAL_Delay(1);  // wait for >100us
	vTaskDelay(1);
 80015de:	2001      	movs	r0, #1
 80015e0:	f00d f994 	bl	800e90c <vTaskDelay>
	lcd_send_cmd (0x30);
 80015e4:	2030      	movs	r0, #48	; 0x30
 80015e6:	f7ff ff75 	bl	80014d4 <lcd_send_cmd>
//	HAL_Delay(10);
	vTaskDelay(10);
 80015ea:	200a      	movs	r0, #10
 80015ec:	f00d f98e 	bl	800e90c <vTaskDelay>
	lcd_send_cmd (0x20);  // 4bit mode
 80015f0:	2020      	movs	r0, #32
 80015f2:	f7ff ff6f 	bl	80014d4 <lcd_send_cmd>
//	HAL_Delay(10);
	vTaskDelay(10);
 80015f6:	200a      	movs	r0, #10
 80015f8:	f00d f988 	bl	800e90c <vTaskDelay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80015fc:	2028      	movs	r0, #40	; 0x28
 80015fe:	f7ff ff69 	bl	80014d4 <lcd_send_cmd>
//	HAL_Delay(1);
	vTaskDelay(1);
 8001602:	2001      	movs	r0, #1
 8001604:	f00d f982 	bl	800e90c <vTaskDelay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001608:	2008      	movs	r0, #8
 800160a:	f7ff ff63 	bl	80014d4 <lcd_send_cmd>
//	HAL_Delay(1);
	vTaskDelay(1);
 800160e:	2001      	movs	r0, #1
 8001610:	f00d f97c 	bl	800e90c <vTaskDelay>
	lcd_send_cmd (0x01);  // clear display
 8001614:	2001      	movs	r0, #1
 8001616:	f7ff ff5d 	bl	80014d4 <lcd_send_cmd>
//	HAL_Delay(1);
	vTaskDelay(1);
 800161a:	2001      	movs	r0, #1
 800161c:	f00d f976 	bl	800e90c <vTaskDelay>
//	HAL_Delay(1);
	vTaskDelay(1);
 8001620:	2001      	movs	r0, #1
 8001622:	f00d f973 	bl	800e90c <vTaskDelay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001626:	2006      	movs	r0, #6
 8001628:	f7ff ff54 	bl	80014d4 <lcd_send_cmd>
//	HAL_Delay(1);
	vTaskDelay(1);
 800162c:	2001      	movs	r0, #1
 800162e:	f00d f96d 	bl	800e90c <vTaskDelay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001632:	200c      	movs	r0, #12
 8001634:	f7ff ff4e 	bl	80014d4 <lcd_send_cmd>
}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}

0800163c <lcd_send_string>:

void lcd_send_string (char *str)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001644:	e006      	b.n	8001654 <lcd_send_string+0x18>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	1c5a      	adds	r2, r3, #1
 800164a:	607a      	str	r2, [r7, #4]
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff ff70 	bl	8001534 <lcd_send_data>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d1f4      	bne.n	8001646 <lcd_send_string+0xa>
}
 800165c:	bf00      	nop
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <Lcd_send_int>:

void Lcd_send_int(int number) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8001670:	f107 030c 	add.w	r3, r7, #12
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	4906      	ldr	r1, [pc, #24]	; (8001690 <Lcd_send_int+0x28>)
 8001678:	4618      	mov	r0, r3
 800167a:	f011 fb83 	bl	8012d84 <siprintf>
	lcd_send_string(buffer);
 800167e:	f107 030c 	add.w	r3, r7, #12
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff ffda 	bl	800163c <lcd_send_string>
}
 8001688:	bf00      	nop
 800168a:	3718      	adds	r7, #24
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	080150e4 	.word	0x080150e4
 8001694:	00000000 	.word	0x00000000

08001698 <ForwardKin>:
unsigned long prevTime;
double last_outDot[3];
float error_arrived; // Variable only kin.cpp


vector3Kin ForwardKin(float xStar, float yStar, float thStar){
 8001698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800169c:	b08e      	sub	sp, #56	; 0x38
 800169e:	af00      	add	r7, sp, #0
 80016a0:	ed87 0a07 	vstr	s0, [r7, #28]
 80016a4:	edc7 0a06 	vstr	s1, [r7, #24]
 80016a8:	ed87 1a05 	vstr	s2, [r7, #20]
	vector3Kin calOut = {
 80016ac:	f04f 0300 	mov.w	r3, #0
 80016b0:	623b      	str	r3, [r7, #32]
 80016b2:	f04f 0300 	mov.w	r3, #0
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
 80016b8:	f04f 0300 	mov.w	r3, #0
 80016bc:	62bb      	str	r3, [r7, #40]	; 0x28
			.x = 0, .y = 0, .th = 0
	};

	outDot[0] = cos(d2r(yawVal)) * (cos(d2r(ENC_1)) * rpmExt[0] + cos(d2r(ENC_2)) * rpmExt[1] + cos(d2r(ENC_3)) * rpmExt[2]) +
 80016be:	4be4      	ldr	r3, [pc, #912]	; (8001a50 <ForwardKin+0x3b8>)
 80016c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7fe ff3d 	bl	8000544 <__aeabi_i2d>
 80016ca:	a3d5      	add	r3, pc, #852	; (adr r3, 8001a20 <ForwardKin+0x388>)
 80016cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d0:	f7fe ffa2 	bl	8000618 <__aeabi_dmul>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	ec43 2b17 	vmov	d7, r2, r3
 80016dc:	eeb0 0a47 	vmov.f32	s0, s14
 80016e0:	eef0 0a67 	vmov.f32	s1, s15
 80016e4:	f00e fea8 	bl	8010438 <cos>
 80016e8:	ec5b ab10 	vmov	sl, fp, d0
 80016ec:	4bd9      	ldr	r3, [pc, #868]	; (8001a54 <ForwardKin+0x3bc>)
 80016ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7fe ff26 	bl	8000544 <__aeabi_i2d>
 80016f8:	a3cb      	add	r3, pc, #812	; (adr r3, 8001a28 <ForwardKin+0x390>)
 80016fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fe:	f7fe ff8b 	bl	8000618 <__aeabi_dmul>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	4690      	mov	r8, r2
 8001708:	4699      	mov	r9, r3
 800170a:	4bd2      	ldr	r3, [pc, #840]	; (8001a54 <ForwardKin+0x3bc>)
 800170c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001710:	4618      	mov	r0, r3
 8001712:	f7fe ff17 	bl	8000544 <__aeabi_i2d>
 8001716:	a3c6      	add	r3, pc, #792	; (adr r3, 8001a30 <ForwardKin+0x398>)
 8001718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171c:	f7fe ff7c 	bl	8000618 <__aeabi_dmul>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4640      	mov	r0, r8
 8001726:	4649      	mov	r1, r9
 8001728:	f7fe fdc0 	bl	80002ac <__adddf3>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4690      	mov	r8, r2
 8001732:	4699      	mov	r9, r3
 8001734:	4bc7      	ldr	r3, [pc, #796]	; (8001a54 <ForwardKin+0x3bc>)
 8001736:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe ff02 	bl	8000544 <__aeabi_i2d>
 8001740:	a3bd      	add	r3, pc, #756	; (adr r3, 8001a38 <ForwardKin+0x3a0>)
 8001742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001746:	f7fe ff67 	bl	8000618 <__aeabi_dmul>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	4640      	mov	r0, r8
 8001750:	4649      	mov	r1, r9
 8001752:	f7fe fdab 	bl	80002ac <__adddf3>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4650      	mov	r0, sl
 800175c:	4659      	mov	r1, fp
 800175e:	f7fe ff5b 	bl	8000618 <__aeabi_dmul>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4690      	mov	r8, r2
 8001768:	4699      	mov	r9, r3
				-sin(d2r(yawVal)) * (sin(d2r(ENC_1)) * rpmExt[0] + sin(d2r(ENC_2)) * rpmExt[1] + sin(d2r(ENC_3)) * rpmExt[2]); // X
 800176a:	4bb9      	ldr	r3, [pc, #740]	; (8001a50 <ForwardKin+0x3b8>)
 800176c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001770:	4618      	mov	r0, r3
 8001772:	f7fe fee7 	bl	8000544 <__aeabi_i2d>
 8001776:	a3aa      	add	r3, pc, #680	; (adr r3, 8001a20 <ForwardKin+0x388>)
 8001778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177c:	f7fe ff4c 	bl	8000618 <__aeabi_dmul>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	ec43 2b17 	vmov	d7, r2, r3
 8001788:	eeb0 0a47 	vmov.f32	s0, s14
 800178c:	eef0 0a67 	vmov.f32	s1, s15
 8001790:	f00e fea6 	bl	80104e0 <sin>
 8001794:	ec53 2b10 	vmov	r2, r3, d0
 8001798:	4614      	mov	r4, r2
 800179a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800179e:	4bad      	ldr	r3, [pc, #692]	; (8001a54 <ForwardKin+0x3bc>)
 80017a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7fe fecd 	bl	8000544 <__aeabi_i2d>
 80017aa:	a3a1      	add	r3, pc, #644	; (adr r3, 8001a30 <ForwardKin+0x398>)
 80017ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b0:	f7fe ff32 	bl	8000618 <__aeabi_dmul>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4692      	mov	sl, r2
 80017ba:	469b      	mov	fp, r3
 80017bc:	4ba5      	ldr	r3, [pc, #660]	; (8001a54 <ForwardKin+0x3bc>)
 80017be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7fe febe 	bl	8000544 <__aeabi_i2d>
 80017c8:	a39d      	add	r3, pc, #628	; (adr r3, 8001a40 <ForwardKin+0x3a8>)
 80017ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ce:	f7fe ff23 	bl	8000618 <__aeabi_dmul>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4650      	mov	r0, sl
 80017d8:	4659      	mov	r1, fp
 80017da:	f7fe fd67 	bl	80002ac <__adddf3>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4692      	mov	sl, r2
 80017e4:	469b      	mov	fp, r3
 80017e6:	4b9b      	ldr	r3, [pc, #620]	; (8001a54 <ForwardKin+0x3bc>)
 80017e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7fe fea9 	bl	8000544 <__aeabi_i2d>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4650      	mov	r0, sl
 80017f8:	4659      	mov	r1, fp
 80017fa:	f7fe fd55 	bl	80002a8 <__aeabi_dsub>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4620      	mov	r0, r4
 8001804:	4629      	mov	r1, r5
 8001806:	f7fe ff07 	bl	8000618 <__aeabi_dmul>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
	outDot[0] = cos(d2r(yawVal)) * (cos(d2r(ENC_1)) * rpmExt[0] + cos(d2r(ENC_2)) * rpmExt[1] + cos(d2r(ENC_3)) * rpmExt[2]) +
 800180e:	4640      	mov	r0, r8
 8001810:	4649      	mov	r1, r9
 8001812:	f7fe fd4b 	bl	80002ac <__adddf3>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	4610      	mov	r0, r2
 800181c:	4619      	mov	r1, r3
 800181e:	f7ff f9d3 	bl	8000bc8 <__aeabi_d2f>
 8001822:	4603      	mov	r3, r0
 8001824:	4a8c      	ldr	r2, [pc, #560]	; (8001a58 <ForwardKin+0x3c0>)
 8001826:	6013      	str	r3, [r2, #0]
	outDot[1] = sin(d2r(yawVal)) * (cos(d2r(ENC_1)) * rpmExt[0] + cos(d2r(ENC_2)) * rpmExt[1] + cos(d2r(ENC_3)) * rpmExt[2]) +
 8001828:	4b89      	ldr	r3, [pc, #548]	; (8001a50 <ForwardKin+0x3b8>)
 800182a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800182e:	4618      	mov	r0, r3
 8001830:	f7fe fe88 	bl	8000544 <__aeabi_i2d>
 8001834:	a37a      	add	r3, pc, #488	; (adr r3, 8001a20 <ForwardKin+0x388>)
 8001836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183a:	f7fe feed 	bl	8000618 <__aeabi_dmul>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	ec43 2b17 	vmov	d7, r2, r3
 8001846:	eeb0 0a47 	vmov.f32	s0, s14
 800184a:	eef0 0a67 	vmov.f32	s1, s15
 800184e:	f00e fe47 	bl	80104e0 <sin>
 8001852:	ec59 8b10 	vmov	r8, r9, d0
 8001856:	4b7f      	ldr	r3, [pc, #508]	; (8001a54 <ForwardKin+0x3bc>)
 8001858:	f9b3 3000 	ldrsh.w	r3, [r3]
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fe71 	bl	8000544 <__aeabi_i2d>
 8001862:	a371      	add	r3, pc, #452	; (adr r3, 8001a28 <ForwardKin+0x390>)
 8001864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001868:	f7fe fed6 	bl	8000618 <__aeabi_dmul>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4614      	mov	r4, r2
 8001872:	461d      	mov	r5, r3
 8001874:	4b77      	ldr	r3, [pc, #476]	; (8001a54 <ForwardKin+0x3bc>)
 8001876:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800187a:	4618      	mov	r0, r3
 800187c:	f7fe fe62 	bl	8000544 <__aeabi_i2d>
 8001880:	a36b      	add	r3, pc, #428	; (adr r3, 8001a30 <ForwardKin+0x398>)
 8001882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001886:	f7fe fec7 	bl	8000618 <__aeabi_dmul>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4620      	mov	r0, r4
 8001890:	4629      	mov	r1, r5
 8001892:	f7fe fd0b 	bl	80002ac <__adddf3>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4614      	mov	r4, r2
 800189c:	461d      	mov	r5, r3
 800189e:	4b6d      	ldr	r3, [pc, #436]	; (8001a54 <ForwardKin+0x3bc>)
 80018a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe fe4d 	bl	8000544 <__aeabi_i2d>
 80018aa:	a363      	add	r3, pc, #396	; (adr r3, 8001a38 <ForwardKin+0x3a0>)
 80018ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b0:	f7fe feb2 	bl	8000618 <__aeabi_dmul>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4620      	mov	r0, r4
 80018ba:	4629      	mov	r1, r5
 80018bc:	f7fe fcf6 	bl	80002ac <__adddf3>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4640      	mov	r0, r8
 80018c6:	4649      	mov	r1, r9
 80018c8:	f7fe fea6 	bl	8000618 <__aeabi_dmul>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4614      	mov	r4, r2
 80018d2:	461d      	mov	r5, r3
				cos(d2r(yawVal)) * (sin(d2r(ENC_1)) * rpmExt[0] + sin(d2r(ENC_2)) * rpmExt[1] + sin(d2r(ENC_3)) * rpmExt[2]); // Y
 80018d4:	4b5e      	ldr	r3, [pc, #376]	; (8001a50 <ForwardKin+0x3b8>)
 80018d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7fe fe32 	bl	8000544 <__aeabi_i2d>
 80018e0:	a34f      	add	r3, pc, #316	; (adr r3, 8001a20 <ForwardKin+0x388>)
 80018e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e6:	f7fe fe97 	bl	8000618 <__aeabi_dmul>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	ec43 2b17 	vmov	d7, r2, r3
 80018f2:	eeb0 0a47 	vmov.f32	s0, s14
 80018f6:	eef0 0a67 	vmov.f32	s1, s15
 80018fa:	f00e fd9d 	bl	8010438 <cos>
 80018fe:	ec5b ab10 	vmov	sl, fp, d0
 8001902:	4b54      	ldr	r3, [pc, #336]	; (8001a54 <ForwardKin+0x3bc>)
 8001904:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fe1b 	bl	8000544 <__aeabi_i2d>
 800190e:	a348      	add	r3, pc, #288	; (adr r3, 8001a30 <ForwardKin+0x398>)
 8001910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001914:	f7fe fe80 	bl	8000618 <__aeabi_dmul>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4690      	mov	r8, r2
 800191e:	4699      	mov	r9, r3
 8001920:	4b4c      	ldr	r3, [pc, #304]	; (8001a54 <ForwardKin+0x3bc>)
 8001922:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fe0c 	bl	8000544 <__aeabi_i2d>
 800192c:	a344      	add	r3, pc, #272	; (adr r3, 8001a40 <ForwardKin+0x3a8>)
 800192e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001932:	f7fe fe71 	bl	8000618 <__aeabi_dmul>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	4640      	mov	r0, r8
 800193c:	4649      	mov	r1, r9
 800193e:	f7fe fcb5 	bl	80002ac <__adddf3>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4690      	mov	r8, r2
 8001948:	4699      	mov	r9, r3
 800194a:	4b42      	ldr	r3, [pc, #264]	; (8001a54 <ForwardKin+0x3bc>)
 800194c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001950:	4618      	mov	r0, r3
 8001952:	f7fe fdf7 	bl	8000544 <__aeabi_i2d>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4640      	mov	r0, r8
 800195c:	4649      	mov	r1, r9
 800195e:	f7fe fca3 	bl	80002a8 <__aeabi_dsub>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4650      	mov	r0, sl
 8001968:	4659      	mov	r1, fp
 800196a:	f7fe fe55 	bl	8000618 <__aeabi_dmul>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
	outDot[1] = sin(d2r(yawVal)) * (cos(d2r(ENC_1)) * rpmExt[0] + cos(d2r(ENC_2)) * rpmExt[1] + cos(d2r(ENC_3)) * rpmExt[2]) +
 8001972:	4620      	mov	r0, r4
 8001974:	4629      	mov	r1, r5
 8001976:	f7fe fc99 	bl	80002ac <__adddf3>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	4610      	mov	r0, r2
 8001980:	4619      	mov	r1, r3
 8001982:	f7ff f921 	bl	8000bc8 <__aeabi_d2f>
 8001986:	4603      	mov	r3, r0
 8001988:	4a33      	ldr	r2, [pc, #204]	; (8001a58 <ForwardKin+0x3c0>)
 800198a:	6053      	str	r3, [r2, #4]
	outDot[2] = lengthAlpha * rpmExt[0] + lengthAlpha * rpmExt[1] + lengthAlpha * rpmExt[2]; // TH
 800198c:	4b31      	ldr	r3, [pc, #196]	; (8001a54 <ForwardKin+0x3bc>)
 800198e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe fdd6 	bl	8000544 <__aeabi_i2d>
 8001998:	a32b      	add	r3, pc, #172	; (adr r3, 8001a48 <ForwardKin+0x3b0>)
 800199a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199e:	f7fe fe3b 	bl	8000618 <__aeabi_dmul>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4614      	mov	r4, r2
 80019a8:	461d      	mov	r5, r3
 80019aa:	4b2a      	ldr	r3, [pc, #168]	; (8001a54 <ForwardKin+0x3bc>)
 80019ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7fe fdc7 	bl	8000544 <__aeabi_i2d>
 80019b6:	a324      	add	r3, pc, #144	; (adr r3, 8001a48 <ForwardKin+0x3b0>)
 80019b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019bc:	f7fe fe2c 	bl	8000618 <__aeabi_dmul>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	4620      	mov	r0, r4
 80019c6:	4629      	mov	r1, r5
 80019c8:	f7fe fc70 	bl	80002ac <__adddf3>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4614      	mov	r4, r2
 80019d2:	461d      	mov	r5, r3
 80019d4:	4b1f      	ldr	r3, [pc, #124]	; (8001a54 <ForwardKin+0x3bc>)
 80019d6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7fe fdb2 	bl	8000544 <__aeabi_i2d>
 80019e0:	a319      	add	r3, pc, #100	; (adr r3, 8001a48 <ForwardKin+0x3b0>)
 80019e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e6:	f7fe fe17 	bl	8000618 <__aeabi_dmul>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4620      	mov	r0, r4
 80019f0:	4629      	mov	r1, r5
 80019f2:	f7fe fc5b 	bl	80002ac <__adddf3>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	4610      	mov	r0, r2
 80019fc:	4619      	mov	r1, r3
 80019fe:	f7ff f8e3 	bl	8000bc8 <__aeabi_d2f>
 8001a02:	4603      	mov	r3, r0
 8001a04:	4a14      	ldr	r2, [pc, #80]	; (8001a58 <ForwardKin+0x3c0>)
 8001a06:	6093      	str	r3, [r2, #8]

	if(HAL_GetTick() - prevTime >= 100){
 8001a08:	f007 f842 	bl	8008a90 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <ForwardKin+0x3c4>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b63      	cmp	r3, #99	; 0x63
 8001a16:	bf8c      	ite	hi
 8001a18:	2301      	movhi	r3, #1
 8001a1a:	2300      	movls	r3, #0
 8001a1c:	e020      	b.n	8001a60 <ForwardKin+0x3c8>
 8001a1e:	bf00      	nop
 8001a20:	a2529d39 	.word	0xa2529d39
 8001a24:	3f91df46 	.word	0x3f91df46
 8001a28:	667f3bcc 	.word	0x667f3bcc
 8001a2c:	bfe6a09e 	.word	0xbfe6a09e
 8001a30:	667f3bcd 	.word	0x667f3bcd
 8001a34:	3fe6a09e 	.word	0x3fe6a09e
 8001a38:	33145c07 	.word	0x33145c07
 8001a3c:	3c91a626 	.word	0x3c91a626
 8001a40:	667f3bcc 	.word	0x667f3bcc
 8001a44:	3fe6a09e 	.word	0x3fe6a09e
 8001a48:	70a3d70a 	.word	0x70a3d70a
 8001a4c:	3fc70a3d 	.word	0x3fc70a3d
 8001a50:	20000214 	.word	0x20000214
 8001a54:	20000218 	.word	0x20000218
 8001a58:	20000220 	.word	0x20000220
 8001a5c:	20000250 	.word	0x20000250
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 8088 	beq.w	8001b78 <ForwardKin+0x4e0>
		Aksen[0] = Aksen[0] + outDot[0] * 100 * scale1; // X
 8001a68:	4b63      	ldr	r3, [pc, #396]	; (8001bf8 <ForwardKin+0x560>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7fe fd7b 	bl	8000568 <__aeabi_f2d>
 8001a72:	4604      	mov	r4, r0
 8001a74:	460d      	mov	r5, r1
 8001a76:	4b61      	ldr	r3, [pc, #388]	; (8001bfc <ForwardKin+0x564>)
 8001a78:	edd3 7a00 	vldr	s15, [r3]
 8001a7c:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8001c00 <ForwardKin+0x568>
 8001a80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a84:	ee17 0a90 	vmov	r0, s15
 8001a88:	f7fe fd6e 	bl	8000568 <__aeabi_f2d>
 8001a8c:	a356      	add	r3, pc, #344	; (adr r3, 8001be8 <ForwardKin+0x550>)
 8001a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a92:	f7fe fdc1 	bl	8000618 <__aeabi_dmul>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4620      	mov	r0, r4
 8001a9c:	4629      	mov	r1, r5
 8001a9e:	f7fe fc05 	bl	80002ac <__adddf3>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	4610      	mov	r0, r2
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f7ff f88d 	bl	8000bc8 <__aeabi_d2f>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	4a51      	ldr	r2, [pc, #324]	; (8001bf8 <ForwardKin+0x560>)
 8001ab2:	6013      	str	r3, [r2, #0]
		Aksen[1] = Aksen[1] + outDot[1] * 100 * scale2; // Y
 8001ab4:	4b50      	ldr	r3, [pc, #320]	; (8001bf8 <ForwardKin+0x560>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7fe fd55 	bl	8000568 <__aeabi_f2d>
 8001abe:	4604      	mov	r4, r0
 8001ac0:	460d      	mov	r5, r1
 8001ac2:	4b4e      	ldr	r3, [pc, #312]	; (8001bfc <ForwardKin+0x564>)
 8001ac4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ac8:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001c00 <ForwardKin+0x568>
 8001acc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ad0:	ee17 0a90 	vmov	r0, s15
 8001ad4:	f7fe fd48 	bl	8000568 <__aeabi_f2d>
 8001ad8:	a345      	add	r3, pc, #276	; (adr r3, 8001bf0 <ForwardKin+0x558>)
 8001ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ade:	f7fe fd9b 	bl	8000618 <__aeabi_dmul>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4620      	mov	r0, r4
 8001ae8:	4629      	mov	r1, r5
 8001aea:	f7fe fbdf 	bl	80002ac <__adddf3>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	4610      	mov	r0, r2
 8001af4:	4619      	mov	r1, r3
 8001af6:	f7ff f867 	bl	8000bc8 <__aeabi_d2f>
 8001afa:	4603      	mov	r3, r0
 8001afc:	4a3e      	ldr	r2, [pc, #248]	; (8001bf8 <ForwardKin+0x560>)
 8001afe:	6053      	str	r3, [r2, #4]
	//	Aksen[2] = (Aksen[2] + outDot[2] * 100) * scale3; // theta
		Aksen[2] = yawVal; // theta diambil dari heading imu
 8001b00:	4b40      	ldr	r3, [pc, #256]	; (8001c04 <ForwardKin+0x56c>)
 8001b02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b06:	ee07 3a90 	vmov	s15, r3
 8001b0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b0e:	4b3a      	ldr	r3, [pc, #232]	; (8001bf8 <ForwardKin+0x560>)
 8001b10:	edc3 7a02 	vstr	s15, [r3, #8]

		velo[0] = Aksen[0] - prevAksen[0];
 8001b14:	4b38      	ldr	r3, [pc, #224]	; (8001bf8 <ForwardKin+0x560>)
 8001b16:	ed93 7a00 	vldr	s14, [r3]
 8001b1a:	4b3b      	ldr	r3, [pc, #236]	; (8001c08 <ForwardKin+0x570>)
 8001b1c:	edd3 7a00 	vldr	s15, [r3]
 8001b20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b24:	4b39      	ldr	r3, [pc, #228]	; (8001c0c <ForwardKin+0x574>)
 8001b26:	edc3 7a00 	vstr	s15, [r3]
		velo[1] = Aksen[1] - prevAksen[1];
 8001b2a:	4b33      	ldr	r3, [pc, #204]	; (8001bf8 <ForwardKin+0x560>)
 8001b2c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b30:	4b35      	ldr	r3, [pc, #212]	; (8001c08 <ForwardKin+0x570>)
 8001b32:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b3a:	4b34      	ldr	r3, [pc, #208]	; (8001c0c <ForwardKin+0x574>)
 8001b3c:	edc3 7a01 	vstr	s15, [r3, #4]
		velo[2] = Aksen[2] - prevAksen[2];
 8001b40:	4b2d      	ldr	r3, [pc, #180]	; (8001bf8 <ForwardKin+0x560>)
 8001b42:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b46:	4b30      	ldr	r3, [pc, #192]	; (8001c08 <ForwardKin+0x570>)
 8001b48:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b50:	4b2e      	ldr	r3, [pc, #184]	; (8001c0c <ForwardKin+0x574>)
 8001b52:	edc3 7a02 	vstr	s15, [r3, #8]

		prevAksen[0] = Aksen[0];
 8001b56:	4b28      	ldr	r3, [pc, #160]	; (8001bf8 <ForwardKin+0x560>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a2b      	ldr	r2, [pc, #172]	; (8001c08 <ForwardKin+0x570>)
 8001b5c:	6013      	str	r3, [r2, #0]
		prevAksen[1] = Aksen[1];
 8001b5e:	4b26      	ldr	r3, [pc, #152]	; (8001bf8 <ForwardKin+0x560>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	4a29      	ldr	r2, [pc, #164]	; (8001c08 <ForwardKin+0x570>)
 8001b64:	6053      	str	r3, [r2, #4]
		prevAksen[2] = Aksen[2];
 8001b66:	4b24      	ldr	r3, [pc, #144]	; (8001bf8 <ForwardKin+0x560>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	4a27      	ldr	r2, [pc, #156]	; (8001c08 <ForwardKin+0x570>)
 8001b6c:	6093      	str	r3, [r2, #8]

		prevTime = HAL_GetTick();
 8001b6e:	f006 ff8f 	bl	8008a90 <HAL_GetTick>
 8001b72:	4603      	mov	r3, r0
 8001b74:	4a26      	ldr	r2, [pc, #152]	; (8001c10 <ForwardKin+0x578>)
 8001b76:	6013      	str	r3, [r2, #0]
	}

	calOut.x = xStar - Aksen[0];
 8001b78:	4b1f      	ldr	r3, [pc, #124]	; (8001bf8 <ForwardKin+0x560>)
 8001b7a:	edd3 7a00 	vldr	s15, [r3]
 8001b7e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b86:	edc7 7a08 	vstr	s15, [r7, #32]
	calOut.y = yStar - Aksen[1];
 8001b8a:	4b1b      	ldr	r3, [pc, #108]	; (8001bf8 <ForwardKin+0x560>)
 8001b8c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b90:	ed97 7a06 	vldr	s14, [r7, #24]
 8001b94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b98:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	calOut.th = thStar - Aksen[2];
 8001b9c:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <ForwardKin+0x560>)
 8001b9e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ba2:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ba6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001baa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	return calOut;
 8001bae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bb2:	f107 0220 	add.w	r2, r7, #32
 8001bb6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bb8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001bbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001bbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bc2:	ee06 1a90 	vmov	s13, r1
 8001bc6:	ee07 2a10 	vmov	s14, r2
 8001bca:	ee07 3a90 	vmov	s15, r3
}
 8001bce:	eeb0 0a66 	vmov.f32	s0, s13
 8001bd2:	eef0 0a47 	vmov.f32	s1, s14
 8001bd6:	eeb0 1a67 	vmov.f32	s2, s15
 8001bda:	3738      	adds	r7, #56	; 0x38
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001be2:	bf00      	nop
 8001be4:	f3af 8000 	nop.w
 8001be8:	88dfb80c 	.word	0x88dfb80c
 8001bec:	3ecc2f8b 	.word	0x3ecc2f8b
 8001bf0:	416f8bff 	.word	0x416f8bff
 8001bf4:	3eba5719 	.word	0x3eba5719
 8001bf8:	2000022c 	.word	0x2000022c
 8001bfc:	20000220 	.word	0x20000220
 8001c00:	42c80000 	.word	0x42c80000
 8001c04:	20000214 	.word	0x20000214
 8001c08:	20000238 	.word	0x20000238
 8001c0c:	20000244 	.word	0x20000244
 8001c10:	20000250 	.word	0x20000250

08001c14 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8001c14:	b5b0      	push	{r4, r5, r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c1e:	6038      	str	r0, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f7fe fca1 	bl	8000568 <__aeabi_f2d>
 8001c26:	4604      	mov	r4, r0
 8001c28:	460d      	mov	r5, r1
 8001c2a:	6838      	ldr	r0, [r7, #0]
 8001c2c:	f7fe fc8a 	bl	8000544 <__aeabi_i2d>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	ec43 2b11 	vmov	d1, r2, r3
 8001c38:	ec45 4b10 	vmov	d0, r4, r5
 8001c3c:	f00e fb5e 	bl	80102fc <pow>
 8001c40:	eeb0 7a40 	vmov.f32	s14, s0
 8001c44:	eef0 7a60 	vmov.f32	s15, s1
    }
 8001c48:	eeb0 0a47 	vmov.f32	s0, s14
 8001c4c:	eef0 0a67 	vmov.f32	s1, s15
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001c58 <InverseKin>:

MotorKin InverseKin(vector3Kin *calOut){
 8001c58:	b5b0      	push	{r4, r5, r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
	MotorKin mtr = {
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	461a      	mov	r2, r3
 8001c66:	2300      	movs	r3, #0
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	6053      	str	r3, [r2, #4]
 8001c6c:	6093      	str	r3, [r2, #8]
 8001c6e:	60d3      	str	r3, [r2, #12]
			.w1=0, .w2=0, .w3=0, .w4=0
	};

	errorPub = error_arrived = sqrt(pow(calOut->x, 2) + pow(calOut->y, 2) + pow(calOut->th, 2));
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	edd3 7a00 	vldr	s15, [r3]
 8001c76:	2002      	movs	r0, #2
 8001c78:	eeb0 0a67 	vmov.f32	s0, s15
 8001c7c:	f7ff ffca 	bl	8001c14 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001c80:	ec55 4b10 	vmov	r4, r5, d0
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c8a:	2002      	movs	r0, #2
 8001c8c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c90:	f7ff ffc0 	bl	8001c14 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001c94:	ec53 2b10 	vmov	r2, r3, d0
 8001c98:	4620      	mov	r0, r4
 8001c9a:	4629      	mov	r1, r5
 8001c9c:	f7fe fb06 	bl	80002ac <__adddf3>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4614      	mov	r4, r2
 8001ca6:	461d      	mov	r5, r3
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cae:	2002      	movs	r0, #2
 8001cb0:	eeb0 0a67 	vmov.f32	s0, s15
 8001cb4:	f7ff ffae 	bl	8001c14 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001cb8:	ec53 2b10 	vmov	r2, r3, d0
 8001cbc:	4620      	mov	r0, r4
 8001cbe:	4629      	mov	r1, r5
 8001cc0:	f7fe faf4 	bl	80002ac <__adddf3>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	ec43 2b17 	vmov	d7, r2, r3
 8001ccc:	eeb0 0a47 	vmov.f32	s0, s14
 8001cd0:	eef0 0a67 	vmov.f32	s1, s15
 8001cd4:	f00e fb82 	bl	80103dc <sqrt>
 8001cd8:	ec53 2b10 	vmov	r2, r3, d0
 8001cdc:	4610      	mov	r0, r2
 8001cde:	4619      	mov	r1, r3
 8001ce0:	f7fe ff72 	bl	8000bc8 <__aeabi_d2f>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	4a1e      	ldr	r2, [pc, #120]	; (8001d60 <InverseKin+0x108>)
 8001ce8:	6013      	str	r3, [r2, #0]
 8001cea:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <InverseKin+0x108>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a1d      	ldr	r2, [pc, #116]	; (8001d64 <InverseKin+0x10c>)
 8001cf0:	6013      	str	r3, [r2, #0]

	if(error_arrived < 0.2)
 8001cf2:	4b1b      	ldr	r3, [pc, #108]	; (8001d60 <InverseKin+0x108>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7fe fc36 	bl	8000568 <__aeabi_f2d>
 8001cfc:	a316      	add	r3, pc, #88	; (adr r3, 8001d58 <InverseKin+0x100>)
 8001cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d02:	f7fe fefb 	bl	8000afc <__aeabi_dcmplt>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d00c      	beq.n	8001d26 <InverseKin+0xce>
	{
		calOut->x = 0;
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
		calOut->y = 0;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	605a      	str	r2, [r3, #4]
		calOut->th = 0; // klo pake ini jgn lupa tambahin yg theta juga di normnya
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	f04f 0200 	mov.w	r2, #0
 8001d22:	609a      	str	r2, [r3, #8]
	else
	{
		kinMotor_V3(&mtr, calOut->x, calOut->y, calOut->th);
	}

	return mtr;
 8001d24:	e011      	b.n	8001d4a <InverseKin+0xf2>
		kinMotor_V3(&mtr, calOut->x, calOut->y, calOut->th);
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	edd3 7a00 	vldr	s15, [r3]
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	edd3 6a02 	vldr	s13, [r3, #8]
 8001d38:	eeb0 1a66 	vmov.f32	s2, s13
 8001d3c:	eef0 0a47 	vmov.f32	s1, s14
 8001d40:	eeb0 0a67 	vmov.f32	s0, s15
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f80f 	bl	8001d68 <kinMotor_V3>
	return mtr;
 8001d4a:	bf00      	nop
}
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bdb0      	pop	{r4, r5, r7, pc}
 8001d54:	f3af 8000 	nop.w
 8001d58:	9999999a 	.word	0x9999999a
 8001d5c:	3fc99999 	.word	0x3fc99999
 8001d60:	20000254 	.word	0x20000254
 8001d64:	20000b18 	.word	0x20000b18

08001d68 <kinMotor_V3>:

void kinMotor_V3(MotorKin *mtrKin, float Ex, float Ey, float Eth)
{
 8001d68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d6c:	b08a      	sub	sp, #40	; 0x28
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6278      	str	r0, [r7, #36]	; 0x24
 8001d72:	ed87 0a08 	vstr	s0, [r7, #32]
 8001d76:	edc7 0a07 	vstr	s1, [r7, #28]
 8001d7a:	ed87 1a06 	vstr	s2, [r7, #24]
	mtrKin->w1 = (lambdaX * cos(d2r(135)) * (cos(d2r(yawVal)) * Ex + sin(d2r(yawVal)) * Ey)) +
 8001d7e:	4be8      	ldr	r3, [pc, #928]	; (8002120 <kinMotor_V3+0x3b8>)
 8001d80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe fbdd 	bl	8000544 <__aeabi_i2d>
 8001d8a:	a3db      	add	r3, pc, #876	; (adr r3, 80020f8 <kinMotor_V3+0x390>)
 8001d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d90:	f7fe fc42 	bl	8000618 <__aeabi_dmul>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	ec43 2b17 	vmov	d7, r2, r3
 8001d9c:	eeb0 0a47 	vmov.f32	s0, s14
 8001da0:	eef0 0a67 	vmov.f32	s1, s15
 8001da4:	f00e fb48 	bl	8010438 <cos>
 8001da8:	ec55 4b10 	vmov	r4, r5, d0
 8001dac:	6a38      	ldr	r0, [r7, #32]
 8001dae:	f7fe fbdb 	bl	8000568 <__aeabi_f2d>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	4620      	mov	r0, r4
 8001db8:	4629      	mov	r1, r5
 8001dba:	f7fe fc2d 	bl	8000618 <__aeabi_dmul>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	4614      	mov	r4, r2
 8001dc4:	461d      	mov	r5, r3
 8001dc6:	4bd6      	ldr	r3, [pc, #856]	; (8002120 <kinMotor_V3+0x3b8>)
 8001dc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe fbb9 	bl	8000544 <__aeabi_i2d>
 8001dd2:	a3c9      	add	r3, pc, #804	; (adr r3, 80020f8 <kinMotor_V3+0x390>)
 8001dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd8:	f7fe fc1e 	bl	8000618 <__aeabi_dmul>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	ec43 2b17 	vmov	d7, r2, r3
 8001de4:	eeb0 0a47 	vmov.f32	s0, s14
 8001de8:	eef0 0a67 	vmov.f32	s1, s15
 8001dec:	f00e fb78 	bl	80104e0 <sin>
 8001df0:	ec5b ab10 	vmov	sl, fp, d0
 8001df4:	69f8      	ldr	r0, [r7, #28]
 8001df6:	f7fe fbb7 	bl	8000568 <__aeabi_f2d>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	4650      	mov	r0, sl
 8001e00:	4659      	mov	r1, fp
 8001e02:	f7fe fc09 	bl	8000618 <__aeabi_dmul>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4620      	mov	r0, r4
 8001e0c:	4629      	mov	r1, r5
 8001e0e:	f7fe fa4d 	bl	80002ac <__adddf3>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	4610      	mov	r0, r2
 8001e18:	4619      	mov	r1, r3
 8001e1a:	a3b9      	add	r3, pc, #740	; (adr r3, 8002100 <kinMotor_V3+0x398>)
 8001e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e20:	f7fe fbfa 	bl	8000618 <__aeabi_dmul>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4692      	mov	sl, r2
 8001e2a:	469b      	mov	fp, r3
				 (lambdaY * sin(d2r(135)) * (-sin(d2r(yawVal)) * Ex + cos(d2r(yawVal)) * Ey)) +
 8001e2c:	4bbc      	ldr	r3, [pc, #752]	; (8002120 <kinMotor_V3+0x3b8>)
 8001e2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe fb86 	bl	8000544 <__aeabi_i2d>
 8001e38:	a3af      	add	r3, pc, #700	; (adr r3, 80020f8 <kinMotor_V3+0x390>)
 8001e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3e:	f7fe fbeb 	bl	8000618 <__aeabi_dmul>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	ec43 2b17 	vmov	d7, r2, r3
 8001e4a:	eeb0 0a47 	vmov.f32	s0, s14
 8001e4e:	eef0 0a67 	vmov.f32	s1, s15
 8001e52:	f00e fb45 	bl	80104e0 <sin>
 8001e56:	ec53 2b10 	vmov	r2, r3, d0
 8001e5a:	4690      	mov	r8, r2
 8001e5c:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001e60:	6a38      	ldr	r0, [r7, #32]
 8001e62:	f7fe fb81 	bl	8000568 <__aeabi_f2d>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4640      	mov	r0, r8
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	f7fe fbd3 	bl	8000618 <__aeabi_dmul>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	4614      	mov	r4, r2
 8001e78:	461d      	mov	r5, r3
 8001e7a:	4ba9      	ldr	r3, [pc, #676]	; (8002120 <kinMotor_V3+0x3b8>)
 8001e7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7fe fb5f 	bl	8000544 <__aeabi_i2d>
 8001e86:	a39c      	add	r3, pc, #624	; (adr r3, 80020f8 <kinMotor_V3+0x390>)
 8001e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8c:	f7fe fbc4 	bl	8000618 <__aeabi_dmul>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	ec43 2b17 	vmov	d7, r2, r3
 8001e98:	eeb0 0a47 	vmov.f32	s0, s14
 8001e9c:	eef0 0a67 	vmov.f32	s1, s15
 8001ea0:	f00e faca 	bl	8010438 <cos>
 8001ea4:	ec59 8b10 	vmov	r8, r9, d0
 8001ea8:	69f8      	ldr	r0, [r7, #28]
 8001eaa:	f7fe fb5d 	bl	8000568 <__aeabi_f2d>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	4640      	mov	r0, r8
 8001eb4:	4649      	mov	r1, r9
 8001eb6:	f7fe fbaf 	bl	8000618 <__aeabi_dmul>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	4629      	mov	r1, r5
 8001ec2:	f7fe f9f3 	bl	80002ac <__adddf3>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	4610      	mov	r0, r2
 8001ecc:	4619      	mov	r1, r3
 8001ece:	a38e      	add	r3, pc, #568	; (adr r3, 8002108 <kinMotor_V3+0x3a0>)
 8001ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed4:	f7fe fba0 	bl	8000618 <__aeabi_dmul>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
	mtrKin->w1 = (lambdaX * cos(d2r(135)) * (cos(d2r(yawVal)) * Ex + sin(d2r(yawVal)) * Ey)) +
 8001edc:	4650      	mov	r0, sl
 8001ede:	4659      	mov	r1, fp
 8001ee0:	f7fe f9e4 	bl	80002ac <__adddf3>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4614      	mov	r4, r2
 8001eea:	461d      	mov	r5, r3
				 (lambdaTH * alphaLengthMotor * Eth);
 8001eec:	69b8      	ldr	r0, [r7, #24]
 8001eee:	f7fe fb3b 	bl	8000568 <__aeabi_f2d>
 8001ef2:	a387      	add	r3, pc, #540	; (adr r3, 8002110 <kinMotor_V3+0x3a8>)
 8001ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef8:	f7fe fb8e 	bl	8000618 <__aeabi_dmul>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
				 (lambdaY * sin(d2r(135)) * (-sin(d2r(yawVal)) * Ex + cos(d2r(yawVal)) * Ey)) +
 8001f00:	4620      	mov	r0, r4
 8001f02:	4629      	mov	r1, r5
 8001f04:	f7fe f9d2 	bl	80002ac <__adddf3>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
	mtrKin->w1 = (lambdaX * cos(d2r(135)) * (cos(d2r(yawVal)) * Ex + sin(d2r(yawVal)) * Ey)) +
 8001f0c:	4610      	mov	r0, r2
 8001f0e:	4619      	mov	r1, r3
 8001f10:	f7fe fe32 	bl	8000b78 <__aeabi_d2iz>
 8001f14:	4602      	mov	r2, r0
 8001f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f18:	601a      	str	r2, [r3, #0]
	mtrKin->w2 = (lambdaX * cos(d2r(-135)) * (cos(d2r(yawVal)) * Ex + sin(d2r(yawVal)) * Ey)) +
 8001f1a:	4b81      	ldr	r3, [pc, #516]	; (8002120 <kinMotor_V3+0x3b8>)
 8001f1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7fe fb0f 	bl	8000544 <__aeabi_i2d>
 8001f26:	a374      	add	r3, pc, #464	; (adr r3, 80020f8 <kinMotor_V3+0x390>)
 8001f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2c:	f7fe fb74 	bl	8000618 <__aeabi_dmul>
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	ec43 2b17 	vmov	d7, r2, r3
 8001f38:	eeb0 0a47 	vmov.f32	s0, s14
 8001f3c:	eef0 0a67 	vmov.f32	s1, s15
 8001f40:	f00e fa7a 	bl	8010438 <cos>
 8001f44:	ec55 4b10 	vmov	r4, r5, d0
 8001f48:	6a38      	ldr	r0, [r7, #32]
 8001f4a:	f7fe fb0d 	bl	8000568 <__aeabi_f2d>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	4620      	mov	r0, r4
 8001f54:	4629      	mov	r1, r5
 8001f56:	f7fe fb5f 	bl	8000618 <__aeabi_dmul>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4614      	mov	r4, r2
 8001f60:	461d      	mov	r5, r3
 8001f62:	4b6f      	ldr	r3, [pc, #444]	; (8002120 <kinMotor_V3+0x3b8>)
 8001f64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7fe faeb 	bl	8000544 <__aeabi_i2d>
 8001f6e:	a362      	add	r3, pc, #392	; (adr r3, 80020f8 <kinMotor_V3+0x390>)
 8001f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f74:	f7fe fb50 	bl	8000618 <__aeabi_dmul>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	ec43 2b17 	vmov	d7, r2, r3
 8001f80:	eeb0 0a47 	vmov.f32	s0, s14
 8001f84:	eef0 0a67 	vmov.f32	s1, s15
 8001f88:	f00e faaa 	bl	80104e0 <sin>
 8001f8c:	ec59 8b10 	vmov	r8, r9, d0
 8001f90:	69f8      	ldr	r0, [r7, #28]
 8001f92:	f7fe fae9 	bl	8000568 <__aeabi_f2d>
 8001f96:	4602      	mov	r2, r0
 8001f98:	460b      	mov	r3, r1
 8001f9a:	4640      	mov	r0, r8
 8001f9c:	4649      	mov	r1, r9
 8001f9e:	f7fe fb3b 	bl	8000618 <__aeabi_dmul>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	4620      	mov	r0, r4
 8001fa8:	4629      	mov	r1, r5
 8001faa:	f7fe f97f 	bl	80002ac <__adddf3>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	4610      	mov	r0, r2
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	a352      	add	r3, pc, #328	; (adr r3, 8002100 <kinMotor_V3+0x398>)
 8001fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbc:	f7fe fb2c 	bl	8000618 <__aeabi_dmul>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	4692      	mov	sl, r2
 8001fc6:	469b      	mov	fp, r3
				 (lambdaY * sin(d2r(-135)) * (-sin(d2r(yawVal)) * Ex + cos(d2r(yawVal)) * Ey)) +
 8001fc8:	4b55      	ldr	r3, [pc, #340]	; (8002120 <kinMotor_V3+0x3b8>)
 8001fca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7fe fab8 	bl	8000544 <__aeabi_i2d>
 8001fd4:	a348      	add	r3, pc, #288	; (adr r3, 80020f8 <kinMotor_V3+0x390>)
 8001fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fda:	f7fe fb1d 	bl	8000618 <__aeabi_dmul>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	ec43 2b17 	vmov	d7, r2, r3
 8001fe6:	eeb0 0a47 	vmov.f32	s0, s14
 8001fea:	eef0 0a67 	vmov.f32	s1, s15
 8001fee:	f00e fa77 	bl	80104e0 <sin>
 8001ff2:	ec53 2b10 	vmov	r2, r3, d0
 8001ff6:	613a      	str	r2, [r7, #16]
 8001ff8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001ffc:	617b      	str	r3, [r7, #20]
 8001ffe:	6a38      	ldr	r0, [r7, #32]
 8002000:	f7fe fab2 	bl	8000568 <__aeabi_f2d>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800200c:	f7fe fb04 	bl	8000618 <__aeabi_dmul>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	4614      	mov	r4, r2
 8002016:	461d      	mov	r5, r3
 8002018:	4b41      	ldr	r3, [pc, #260]	; (8002120 <kinMotor_V3+0x3b8>)
 800201a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe fa90 	bl	8000544 <__aeabi_i2d>
 8002024:	a334      	add	r3, pc, #208	; (adr r3, 80020f8 <kinMotor_V3+0x390>)
 8002026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202a:	f7fe faf5 	bl	8000618 <__aeabi_dmul>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	ec43 2b17 	vmov	d7, r2, r3
 8002036:	eeb0 0a47 	vmov.f32	s0, s14
 800203a:	eef0 0a67 	vmov.f32	s1, s15
 800203e:	f00e f9fb 	bl	8010438 <cos>
 8002042:	ec59 8b10 	vmov	r8, r9, d0
 8002046:	69f8      	ldr	r0, [r7, #28]
 8002048:	f7fe fa8e 	bl	8000568 <__aeabi_f2d>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4640      	mov	r0, r8
 8002052:	4649      	mov	r1, r9
 8002054:	f7fe fae0 	bl	8000618 <__aeabi_dmul>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4620      	mov	r0, r4
 800205e:	4629      	mov	r1, r5
 8002060:	f7fe f924 	bl	80002ac <__adddf3>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	4610      	mov	r0, r2
 800206a:	4619      	mov	r1, r3
 800206c:	a32a      	add	r3, pc, #168	; (adr r3, 8002118 <kinMotor_V3+0x3b0>)
 800206e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002072:	f7fe fad1 	bl	8000618 <__aeabi_dmul>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
	mtrKin->w2 = (lambdaX * cos(d2r(-135)) * (cos(d2r(yawVal)) * Ex + sin(d2r(yawVal)) * Ey)) +
 800207a:	4650      	mov	r0, sl
 800207c:	4659      	mov	r1, fp
 800207e:	f7fe f915 	bl	80002ac <__adddf3>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4614      	mov	r4, r2
 8002088:	461d      	mov	r5, r3
				 (lambdaTH * alphaLengthMotor * Eth);
 800208a:	69b8      	ldr	r0, [r7, #24]
 800208c:	f7fe fa6c 	bl	8000568 <__aeabi_f2d>
 8002090:	a31f      	add	r3, pc, #124	; (adr r3, 8002110 <kinMotor_V3+0x3a8>)
 8002092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002096:	f7fe fabf 	bl	8000618 <__aeabi_dmul>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
				 (lambdaY * sin(d2r(-135)) * (-sin(d2r(yawVal)) * Ex + cos(d2r(yawVal)) * Ey)) +
 800209e:	4620      	mov	r0, r4
 80020a0:	4629      	mov	r1, r5
 80020a2:	f7fe f903 	bl	80002ac <__adddf3>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
	mtrKin->w2 = (lambdaX * cos(d2r(-135)) * (cos(d2r(yawVal)) * Ex + sin(d2r(yawVal)) * Ey)) +
 80020aa:	4610      	mov	r0, r2
 80020ac:	4619      	mov	r1, r3
 80020ae:	f7fe fd63 	bl	8000b78 <__aeabi_d2iz>
 80020b2:	4602      	mov	r2, r0
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	605a      	str	r2, [r3, #4]
	mtrKin->w3 = (lambdaX * cos(d2r(-45)) * (cos(d2r(yawVal)) * Ex + sin(d2r(yawVal)) * Ey)) +
 80020b8:	4b19      	ldr	r3, [pc, #100]	; (8002120 <kinMotor_V3+0x3b8>)
 80020ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7fe fa40 	bl	8000544 <__aeabi_i2d>
 80020c4:	a30c      	add	r3, pc, #48	; (adr r3, 80020f8 <kinMotor_V3+0x390>)
 80020c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ca:	f7fe faa5 	bl	8000618 <__aeabi_dmul>
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	ec43 2b17 	vmov	d7, r2, r3
 80020d6:	eeb0 0a47 	vmov.f32	s0, s14
 80020da:	eef0 0a67 	vmov.f32	s1, s15
 80020de:	f00e f9ab 	bl	8010438 <cos>
 80020e2:	ec55 4b10 	vmov	r4, r5, d0
 80020e6:	6a38      	ldr	r0, [r7, #32]
 80020e8:	f7fe fa3e 	bl	8000568 <__aeabi_f2d>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	4620      	mov	r0, r4
 80020f2:	4629      	mov	r1, r5
 80020f4:	e016      	b.n	8002124 <kinMotor_V3+0x3bc>
 80020f6:	bf00      	nop
 80020f8:	a2529d39 	.word	0xa2529d39
 80020fc:	3f91df46 	.word	0x3f91df46
 8002100:	3815d38e 	.word	0x3815d38e
 8002104:	c083e32b 	.word	0xc083e32b
 8002108:	3815d38f 	.word	0x3815d38f
 800210c:	4083e32b 	.word	0x4083e32b
 8002110:	33333334 	.word	0x33333334
 8002114:	402f3333 	.word	0x402f3333
 8002118:	3815d38f 	.word	0x3815d38f
 800211c:	c083e32b 	.word	0xc083e32b
 8002120:	20000214 	.word	0x20000214
 8002124:	f7fe fa78 	bl	8000618 <__aeabi_dmul>
 8002128:	4602      	mov	r2, r0
 800212a:	460b      	mov	r3, r1
 800212c:	4614      	mov	r4, r2
 800212e:	461d      	mov	r5, r3
 8002130:	4bd5      	ldr	r3, [pc, #852]	; (8002488 <kinMotor_V3+0x720>)
 8002132:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe fa04 	bl	8000544 <__aeabi_i2d>
 800213c:	a3c8      	add	r3, pc, #800	; (adr r3, 8002460 <kinMotor_V3+0x6f8>)
 800213e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002142:	f7fe fa69 	bl	8000618 <__aeabi_dmul>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	ec43 2b17 	vmov	d7, r2, r3
 800214e:	eeb0 0a47 	vmov.f32	s0, s14
 8002152:	eef0 0a67 	vmov.f32	s1, s15
 8002156:	f00e f9c3 	bl	80104e0 <sin>
 800215a:	ec59 8b10 	vmov	r8, r9, d0
 800215e:	69f8      	ldr	r0, [r7, #28]
 8002160:	f7fe fa02 	bl	8000568 <__aeabi_f2d>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	4640      	mov	r0, r8
 800216a:	4649      	mov	r1, r9
 800216c:	f7fe fa54 	bl	8000618 <__aeabi_dmul>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	4620      	mov	r0, r4
 8002176:	4629      	mov	r1, r5
 8002178:	f7fe f898 	bl	80002ac <__adddf3>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	4610      	mov	r0, r2
 8002182:	4619      	mov	r1, r3
 8002184:	a3b8      	add	r3, pc, #736	; (adr r3, 8002468 <kinMotor_V3+0x700>)
 8002186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218a:	f7fe fa45 	bl	8000618 <__aeabi_dmul>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	4614      	mov	r4, r2
 8002194:	461d      	mov	r5, r3
			     (lambdaY * sin(d2r(-45)) * (-sin(d2r(yawVal)) * Ex + cos(d2r(yawVal)) * Ey)) +
 8002196:	4bbc      	ldr	r3, [pc, #752]	; (8002488 <kinMotor_V3+0x720>)
 8002198:	f9b3 3000 	ldrsh.w	r3, [r3]
 800219c:	4618      	mov	r0, r3
 800219e:	f7fe f9d1 	bl	8000544 <__aeabi_i2d>
 80021a2:	a3af      	add	r3, pc, #700	; (adr r3, 8002460 <kinMotor_V3+0x6f8>)
 80021a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a8:	f7fe fa36 	bl	8000618 <__aeabi_dmul>
 80021ac:	4602      	mov	r2, r0
 80021ae:	460b      	mov	r3, r1
 80021b0:	ec43 2b17 	vmov	d7, r2, r3
 80021b4:	eeb0 0a47 	vmov.f32	s0, s14
 80021b8:	eef0 0a67 	vmov.f32	s1, s15
 80021bc:	f00e f990 	bl	80104e0 <sin>
 80021c0:	ec53 2b10 	vmov	r2, r3, d0
 80021c4:	60ba      	str	r2, [r7, #8]
 80021c6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	6a38      	ldr	r0, [r7, #32]
 80021ce:	f7fe f9cb 	bl	8000568 <__aeabi_f2d>
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021da:	f7fe fa1d 	bl	8000618 <__aeabi_dmul>
 80021de:	4602      	mov	r2, r0
 80021e0:	460b      	mov	r3, r1
 80021e2:	4690      	mov	r8, r2
 80021e4:	4699      	mov	r9, r3
 80021e6:	4ba8      	ldr	r3, [pc, #672]	; (8002488 <kinMotor_V3+0x720>)
 80021e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7fe f9a9 	bl	8000544 <__aeabi_i2d>
 80021f2:	a39b      	add	r3, pc, #620	; (adr r3, 8002460 <kinMotor_V3+0x6f8>)
 80021f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f8:	f7fe fa0e 	bl	8000618 <__aeabi_dmul>
 80021fc:	4602      	mov	r2, r0
 80021fe:	460b      	mov	r3, r1
 8002200:	ec43 2b17 	vmov	d7, r2, r3
 8002204:	eeb0 0a47 	vmov.f32	s0, s14
 8002208:	eef0 0a67 	vmov.f32	s1, s15
 800220c:	f00e f914 	bl	8010438 <cos>
 8002210:	ec5b ab10 	vmov	sl, fp, d0
 8002214:	69f8      	ldr	r0, [r7, #28]
 8002216:	f7fe f9a7 	bl	8000568 <__aeabi_f2d>
 800221a:	4602      	mov	r2, r0
 800221c:	460b      	mov	r3, r1
 800221e:	4650      	mov	r0, sl
 8002220:	4659      	mov	r1, fp
 8002222:	f7fe f9f9 	bl	8000618 <__aeabi_dmul>
 8002226:	4602      	mov	r2, r0
 8002228:	460b      	mov	r3, r1
 800222a:	4640      	mov	r0, r8
 800222c:	4649      	mov	r1, r9
 800222e:	f7fe f83d 	bl	80002ac <__adddf3>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	4610      	mov	r0, r2
 8002238:	4619      	mov	r1, r3
 800223a:	a38d      	add	r3, pc, #564	; (adr r3, 8002470 <kinMotor_V3+0x708>)
 800223c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002240:	f7fe f9ea 	bl	8000618 <__aeabi_dmul>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
	mtrKin->w3 = (lambdaX * cos(d2r(-45)) * (cos(d2r(yawVal)) * Ex + sin(d2r(yawVal)) * Ey)) +
 8002248:	4620      	mov	r0, r4
 800224a:	4629      	mov	r1, r5
 800224c:	f7fe f82e 	bl	80002ac <__adddf3>
 8002250:	4602      	mov	r2, r0
 8002252:	460b      	mov	r3, r1
 8002254:	4614      	mov	r4, r2
 8002256:	461d      	mov	r5, r3
				 (lambdaTH * alphaLengthMotor * Eth);
 8002258:	69b8      	ldr	r0, [r7, #24]
 800225a:	f7fe f985 	bl	8000568 <__aeabi_f2d>
 800225e:	a386      	add	r3, pc, #536	; (adr r3, 8002478 <kinMotor_V3+0x710>)
 8002260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002264:	f7fe f9d8 	bl	8000618 <__aeabi_dmul>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
			     (lambdaY * sin(d2r(-45)) * (-sin(d2r(yawVal)) * Ex + cos(d2r(yawVal)) * Ey)) +
 800226c:	4620      	mov	r0, r4
 800226e:	4629      	mov	r1, r5
 8002270:	f7fe f81c 	bl	80002ac <__adddf3>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
	mtrKin->w3 = (lambdaX * cos(d2r(-45)) * (cos(d2r(yawVal)) * Ex + sin(d2r(yawVal)) * Ey)) +
 8002278:	4610      	mov	r0, r2
 800227a:	4619      	mov	r1, r3
 800227c:	f7fe fc7c 	bl	8000b78 <__aeabi_d2iz>
 8002280:	4602      	mov	r2, r0
 8002282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002284:	609a      	str	r2, [r3, #8]
	mtrKin->w4 = (lambdaX * cos(d2r(45)) * (cos(d2r(yawVal)) * Ex + sin(d2r(yawVal)) * Ey)) +
 8002286:	4b80      	ldr	r3, [pc, #512]	; (8002488 <kinMotor_V3+0x720>)
 8002288:	f9b3 3000 	ldrsh.w	r3, [r3]
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe f959 	bl	8000544 <__aeabi_i2d>
 8002292:	a373      	add	r3, pc, #460	; (adr r3, 8002460 <kinMotor_V3+0x6f8>)
 8002294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002298:	f7fe f9be 	bl	8000618 <__aeabi_dmul>
 800229c:	4602      	mov	r2, r0
 800229e:	460b      	mov	r3, r1
 80022a0:	ec43 2b17 	vmov	d7, r2, r3
 80022a4:	eeb0 0a47 	vmov.f32	s0, s14
 80022a8:	eef0 0a67 	vmov.f32	s1, s15
 80022ac:	f00e f8c4 	bl	8010438 <cos>
 80022b0:	ec55 4b10 	vmov	r4, r5, d0
 80022b4:	6a38      	ldr	r0, [r7, #32]
 80022b6:	f7fe f957 	bl	8000568 <__aeabi_f2d>
 80022ba:	4602      	mov	r2, r0
 80022bc:	460b      	mov	r3, r1
 80022be:	4620      	mov	r0, r4
 80022c0:	4629      	mov	r1, r5
 80022c2:	f7fe f9a9 	bl	8000618 <__aeabi_dmul>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	4614      	mov	r4, r2
 80022cc:	461d      	mov	r5, r3
 80022ce:	4b6e      	ldr	r3, [pc, #440]	; (8002488 <kinMotor_V3+0x720>)
 80022d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7fe f935 	bl	8000544 <__aeabi_i2d>
 80022da:	a361      	add	r3, pc, #388	; (adr r3, 8002460 <kinMotor_V3+0x6f8>)
 80022dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e0:	f7fe f99a 	bl	8000618 <__aeabi_dmul>
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	ec43 2b17 	vmov	d7, r2, r3
 80022ec:	eeb0 0a47 	vmov.f32	s0, s14
 80022f0:	eef0 0a67 	vmov.f32	s1, s15
 80022f4:	f00e f8f4 	bl	80104e0 <sin>
 80022f8:	ec59 8b10 	vmov	r8, r9, d0
 80022fc:	69f8      	ldr	r0, [r7, #28]
 80022fe:	f7fe f933 	bl	8000568 <__aeabi_f2d>
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	4640      	mov	r0, r8
 8002308:	4649      	mov	r1, r9
 800230a:	f7fe f985 	bl	8000618 <__aeabi_dmul>
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	4620      	mov	r0, r4
 8002314:	4629      	mov	r1, r5
 8002316:	f7fd ffc9 	bl	80002ac <__adddf3>
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	4610      	mov	r0, r2
 8002320:	4619      	mov	r1, r3
 8002322:	a351      	add	r3, pc, #324	; (adr r3, 8002468 <kinMotor_V3+0x700>)
 8002324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002328:	f7fe f976 	bl	8000618 <__aeabi_dmul>
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	4614      	mov	r4, r2
 8002332:	461d      	mov	r5, r3
			     (lambdaY * sin(d2r(45)) * (-sin(d2r(yawVal)) * Ex + cos(d2r(yawVal)) * Ey)) +
 8002334:	4b54      	ldr	r3, [pc, #336]	; (8002488 <kinMotor_V3+0x720>)
 8002336:	f9b3 3000 	ldrsh.w	r3, [r3]
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe f902 	bl	8000544 <__aeabi_i2d>
 8002340:	a347      	add	r3, pc, #284	; (adr r3, 8002460 <kinMotor_V3+0x6f8>)
 8002342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002346:	f7fe f967 	bl	8000618 <__aeabi_dmul>
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	ec43 2b17 	vmov	d7, r2, r3
 8002352:	eeb0 0a47 	vmov.f32	s0, s14
 8002356:	eef0 0a67 	vmov.f32	s1, s15
 800235a:	f00e f8c1 	bl	80104e0 <sin>
 800235e:	ec53 2b10 	vmov	r2, r3, d0
 8002362:	603a      	str	r2, [r7, #0]
 8002364:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002368:	607b      	str	r3, [r7, #4]
 800236a:	6a38      	ldr	r0, [r7, #32]
 800236c:	f7fe f8fc 	bl	8000568 <__aeabi_f2d>
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002378:	f7fe f94e 	bl	8000618 <__aeabi_dmul>
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	4690      	mov	r8, r2
 8002382:	4699      	mov	r9, r3
 8002384:	4b40      	ldr	r3, [pc, #256]	; (8002488 <kinMotor_V3+0x720>)
 8002386:	f9b3 3000 	ldrsh.w	r3, [r3]
 800238a:	4618      	mov	r0, r3
 800238c:	f7fe f8da 	bl	8000544 <__aeabi_i2d>
 8002390:	a333      	add	r3, pc, #204	; (adr r3, 8002460 <kinMotor_V3+0x6f8>)
 8002392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002396:	f7fe f93f 	bl	8000618 <__aeabi_dmul>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	ec43 2b17 	vmov	d7, r2, r3
 80023a2:	eeb0 0a47 	vmov.f32	s0, s14
 80023a6:	eef0 0a67 	vmov.f32	s1, s15
 80023aa:	f00e f845 	bl	8010438 <cos>
 80023ae:	ec5b ab10 	vmov	sl, fp, d0
 80023b2:	69f8      	ldr	r0, [r7, #28]
 80023b4:	f7fe f8d8 	bl	8000568 <__aeabi_f2d>
 80023b8:	4602      	mov	r2, r0
 80023ba:	460b      	mov	r3, r1
 80023bc:	4650      	mov	r0, sl
 80023be:	4659      	mov	r1, fp
 80023c0:	f7fe f92a 	bl	8000618 <__aeabi_dmul>
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	4640      	mov	r0, r8
 80023ca:	4649      	mov	r1, r9
 80023cc:	f7fd ff6e 	bl	80002ac <__adddf3>
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
 80023d4:	4610      	mov	r0, r2
 80023d6:	4619      	mov	r1, r3
 80023d8:	a329      	add	r3, pc, #164	; (adr r3, 8002480 <kinMotor_V3+0x718>)
 80023da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023de:	f7fe f91b 	bl	8000618 <__aeabi_dmul>
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
	mtrKin->w4 = (lambdaX * cos(d2r(45)) * (cos(d2r(yawVal)) * Ex + sin(d2r(yawVal)) * Ey)) +
 80023e6:	4620      	mov	r0, r4
 80023e8:	4629      	mov	r1, r5
 80023ea:	f7fd ff5f 	bl	80002ac <__adddf3>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	4614      	mov	r4, r2
 80023f4:	461d      	mov	r5, r3
			     (lambdaTH * alphaLengthMotor * Eth);
 80023f6:	69b8      	ldr	r0, [r7, #24]
 80023f8:	f7fe f8b6 	bl	8000568 <__aeabi_f2d>
 80023fc:	a31e      	add	r3, pc, #120	; (adr r3, 8002478 <kinMotor_V3+0x710>)
 80023fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002402:	f7fe f909 	bl	8000618 <__aeabi_dmul>
 8002406:	4602      	mov	r2, r0
 8002408:	460b      	mov	r3, r1
			     (lambdaY * sin(d2r(45)) * (-sin(d2r(yawVal)) * Ex + cos(d2r(yawVal)) * Ey)) +
 800240a:	4620      	mov	r0, r4
 800240c:	4629      	mov	r1, r5
 800240e:	f7fd ff4d 	bl	80002ac <__adddf3>
 8002412:	4602      	mov	r2, r0
 8002414:	460b      	mov	r3, r1
	mtrKin->w4 = (lambdaX * cos(d2r(45)) * (cos(d2r(yawVal)) * Ex + sin(d2r(yawVal)) * Ey)) +
 8002416:	4610      	mov	r0, r2
 8002418:	4619      	mov	r1, r3
 800241a:	f7fe fbad 	bl	8000b78 <__aeabi_d2iz>
 800241e:	4602      	mov	r2, r0
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	60da      	str	r2, [r3, #12]

	if(mtrKin->w1 > Max_Cutoff_Mtr) mtrKin->w1 = Max_Cutoff_Mtr;
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800242c:	dd04      	ble.n	8002438 <kinMotor_V3+0x6d0>
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	e007      	b.n	8002448 <kinMotor_V3+0x6e0>
	else if(mtrKin->w1 < Min_Cutoff_Mtr) mtrKin->w1 = Min_Cutoff_Mtr;
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f513 7f16 	cmn.w	r3, #600	; 0x258
 8002440:	da02      	bge.n	8002448 <kinMotor_V3+0x6e0>
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	4a11      	ldr	r2, [pc, #68]	; (800248c <kinMotor_V3+0x724>)
 8002446:	601a      	str	r2, [r3, #0]

	if(mtrKin->w2 > Max_Cutoff_Mtr) mtrKin->w2 = Max_Cutoff_Mtr;
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002450:	dd1e      	ble.n	8002490 <kinMotor_V3+0x728>
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002458:	605a      	str	r2, [r3, #4]
 800245a:	e021      	b.n	80024a0 <kinMotor_V3+0x738>
 800245c:	f3af 8000 	nop.w
 8002460:	a2529d39 	.word	0xa2529d39
 8002464:	3f91df46 	.word	0x3f91df46
 8002468:	3815d38f 	.word	0x3815d38f
 800246c:	4083e32b 	.word	0x4083e32b
 8002470:	3815d38e 	.word	0x3815d38e
 8002474:	c083e32b 	.word	0xc083e32b
 8002478:	33333334 	.word	0x33333334
 800247c:	402f3333 	.word	0x402f3333
 8002480:	3815d38e 	.word	0x3815d38e
 8002484:	4083e32b 	.word	0x4083e32b
 8002488:	20000214 	.word	0x20000214
 800248c:	fffffda8 	.word	0xfffffda8
	else if(mtrKin->w2 < Min_Cutoff_Mtr) mtrKin->w2 = Min_Cutoff_Mtr;
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f513 7f16 	cmn.w	r3, #600	; 0x258
 8002498:	da02      	bge.n	80024a0 <kinMotor_V3+0x738>
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	4a15      	ldr	r2, [pc, #84]	; (80024f4 <kinMotor_V3+0x78c>)
 800249e:	605a      	str	r2, [r3, #4]

	if(mtrKin->w3 > Max_Cutoff_Mtr) mtrKin->w3 = Max_Cutoff_Mtr;
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80024a8:	dd04      	ble.n	80024b4 <kinMotor_V3+0x74c>
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	f44f 7216 	mov.w	r2, #600	; 0x258
 80024b0:	609a      	str	r2, [r3, #8]
 80024b2:	e007      	b.n	80024c4 <kinMotor_V3+0x75c>
	else if(mtrKin->w3 < Min_Cutoff_Mtr) mtrKin->w3 = Min_Cutoff_Mtr;
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f513 7f16 	cmn.w	r3, #600	; 0x258
 80024bc:	da02      	bge.n	80024c4 <kinMotor_V3+0x75c>
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	4a0c      	ldr	r2, [pc, #48]	; (80024f4 <kinMotor_V3+0x78c>)
 80024c2:	609a      	str	r2, [r3, #8]

	if(mtrKin->w4 > Max_Cutoff_Mtr) mtrKin->w4 = Max_Cutoff_Mtr;
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80024cc:	dd04      	ble.n	80024d8 <kinMotor_V3+0x770>
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	f44f 7216 	mov.w	r2, #600	; 0x258
 80024d4:	60da      	str	r2, [r3, #12]
	else if(mtrKin->w4 < Min_Cutoff_Mtr) mtrKin->w4 = Min_Cutoff_Mtr;
}
 80024d6:	e007      	b.n	80024e8 <kinMotor_V3+0x780>
	else if(mtrKin->w4 < Min_Cutoff_Mtr) mtrKin->w4 = Min_Cutoff_Mtr;
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f513 7f16 	cmn.w	r3, #600	; 0x258
 80024e0:	da02      	bge.n	80024e8 <kinMotor_V3+0x780>
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	4a03      	ldr	r2, [pc, #12]	; (80024f4 <kinMotor_V3+0x78c>)
 80024e6:	60da      	str	r2, [r3, #12]
}
 80024e8:	bf00      	nop
 80024ea:	3728      	adds	r7, #40	; 0x28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024f2:	bf00      	nop
 80024f4:	fffffda8 	.word	0xfffffda8

080024f8 <kinMotor>:

	if(mtrKin->w4 > Max_Cutoff_Mtr) mtrKin->w4 = Max_Cutoff_Mtr;
	else if(mtrKin->w4 < Min_Cutoff_Mtr) mtrKin->w4 = Min_Cutoff_Mtr;
}

void kinMotor(MotorKin *mtrKin, float x, float y, float th) {
 80024f8:	b5b0      	push	{r4, r5, r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	ed87 0a02 	vstr	s0, [r7, #8]
 8002504:	edc7 0a01 	vstr	s1, [r7, #4]
 8002508:	ed87 1a00 	vstr	s2, [r7]
	mtrKin->w1 = (lambdaInv_X * cos(d2r(135)) * x) +
 800250c:	68b8      	ldr	r0, [r7, #8]
 800250e:	f7fe f82b 	bl	8000568 <__aeabi_f2d>
 8002512:	a38f      	add	r3, pc, #572	; (adr r3, 8002750 <kinMotor+0x258>)
 8002514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002518:	f7fe f87e 	bl	8000618 <__aeabi_dmul>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	4614      	mov	r4, r2
 8002522:	461d      	mov	r5, r3
				 (lambdaInv_Y * sin(d2r(135)) * y) +
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7fe f81f 	bl	8000568 <__aeabi_f2d>
 800252a:	a38d      	add	r3, pc, #564	; (adr r3, 8002760 <kinMotor+0x268>)
 800252c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002530:	f7fe f872 	bl	8000618 <__aeabi_dmul>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
	mtrKin->w1 = (lambdaInv_X * cos(d2r(135)) * x) +
 8002538:	4620      	mov	r0, r4
 800253a:	4629      	mov	r1, r5
 800253c:	f7fd feb6 	bl	80002ac <__adddf3>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4614      	mov	r4, r2
 8002546:	461d      	mov	r5, r3
				 (lambdaInv_TH * lengthAlpha * th);
 8002548:	6838      	ldr	r0, [r7, #0]
 800254a:	f7fe f80d 	bl	8000568 <__aeabi_f2d>
 800254e:	f04f 0200 	mov.w	r2, #0
 8002552:	4b87      	ldr	r3, [pc, #540]	; (8002770 <kinMotor+0x278>)
 8002554:	f7fe f860 	bl	8000618 <__aeabi_dmul>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
				 (lambdaInv_Y * sin(d2r(135)) * y) +
 800255c:	4620      	mov	r0, r4
 800255e:	4629      	mov	r1, r5
 8002560:	f7fd fea4 	bl	80002ac <__adddf3>
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
	mtrKin->w1 = (lambdaInv_X * cos(d2r(135)) * x) +
 8002568:	4610      	mov	r0, r2
 800256a:	4619      	mov	r1, r3
 800256c:	f7fe fb04 	bl	8000b78 <__aeabi_d2iz>
 8002570:	4602      	mov	r2, r0
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	601a      	str	r2, [r3, #0]
	mtrKin->w2 = (lambdaInv_X * cos(d2r(-135)) * x) +
 8002576:	68b8      	ldr	r0, [r7, #8]
 8002578:	f7fd fff6 	bl	8000568 <__aeabi_f2d>
 800257c:	a374      	add	r3, pc, #464	; (adr r3, 8002750 <kinMotor+0x258>)
 800257e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002582:	f7fe f849 	bl	8000618 <__aeabi_dmul>
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	4614      	mov	r4, r2
 800258c:	461d      	mov	r5, r3
				 (lambdaInv_Y * sin(d2r(-135)) * y) +
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7fd ffea 	bl	8000568 <__aeabi_f2d>
 8002594:	a370      	add	r3, pc, #448	; (adr r3, 8002758 <kinMotor+0x260>)
 8002596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259a:	f7fe f83d 	bl	8000618 <__aeabi_dmul>
 800259e:	4602      	mov	r2, r0
 80025a0:	460b      	mov	r3, r1
	mtrKin->w2 = (lambdaInv_X * cos(d2r(-135)) * x) +
 80025a2:	4620      	mov	r0, r4
 80025a4:	4629      	mov	r1, r5
 80025a6:	f7fd fe81 	bl	80002ac <__adddf3>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	4614      	mov	r4, r2
 80025b0:	461d      	mov	r5, r3
				 (lambdaInv_TH * lengthAlpha * th);
 80025b2:	6838      	ldr	r0, [r7, #0]
 80025b4:	f7fd ffd8 	bl	8000568 <__aeabi_f2d>
 80025b8:	f04f 0200 	mov.w	r2, #0
 80025bc:	4b6c      	ldr	r3, [pc, #432]	; (8002770 <kinMotor+0x278>)
 80025be:	f7fe f82b 	bl	8000618 <__aeabi_dmul>
 80025c2:	4602      	mov	r2, r0
 80025c4:	460b      	mov	r3, r1
				 (lambdaInv_Y * sin(d2r(-135)) * y) +
 80025c6:	4620      	mov	r0, r4
 80025c8:	4629      	mov	r1, r5
 80025ca:	f7fd fe6f 	bl	80002ac <__adddf3>
 80025ce:	4602      	mov	r2, r0
 80025d0:	460b      	mov	r3, r1
	mtrKin->w2 = (lambdaInv_X * cos(d2r(-135)) * x) +
 80025d2:	4610      	mov	r0, r2
 80025d4:	4619      	mov	r1, r3
 80025d6:	f7fe facf 	bl	8000b78 <__aeabi_d2iz>
 80025da:	4602      	mov	r2, r0
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	605a      	str	r2, [r3, #4]
	mtrKin->w3 = (lambdaInv_X * cos(d2r(-45)) * x) +
 80025e0:	68b8      	ldr	r0, [r7, #8]
 80025e2:	f7fd ffc1 	bl	8000568 <__aeabi_f2d>
 80025e6:	a35e      	add	r3, pc, #376	; (adr r3, 8002760 <kinMotor+0x268>)
 80025e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ec:	f7fe f814 	bl	8000618 <__aeabi_dmul>
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	4614      	mov	r4, r2
 80025f6:	461d      	mov	r5, r3
			     (lambdaInv_Y * sin(d2r(-45)) * y) +
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f7fd ffb5 	bl	8000568 <__aeabi_f2d>
 80025fe:	a354      	add	r3, pc, #336	; (adr r3, 8002750 <kinMotor+0x258>)
 8002600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002604:	f7fe f808 	bl	8000618 <__aeabi_dmul>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
	mtrKin->w3 = (lambdaInv_X * cos(d2r(-45)) * x) +
 800260c:	4620      	mov	r0, r4
 800260e:	4629      	mov	r1, r5
 8002610:	f7fd fe4c 	bl	80002ac <__adddf3>
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	4614      	mov	r4, r2
 800261a:	461d      	mov	r5, r3
				 (lambdaInv_TH * lengthAlpha * th);
 800261c:	6838      	ldr	r0, [r7, #0]
 800261e:	f7fd ffa3 	bl	8000568 <__aeabi_f2d>
 8002622:	f04f 0200 	mov.w	r2, #0
 8002626:	4b52      	ldr	r3, [pc, #328]	; (8002770 <kinMotor+0x278>)
 8002628:	f7fd fff6 	bl	8000618 <__aeabi_dmul>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
			     (lambdaInv_Y * sin(d2r(-45)) * y) +
 8002630:	4620      	mov	r0, r4
 8002632:	4629      	mov	r1, r5
 8002634:	f7fd fe3a 	bl	80002ac <__adddf3>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
	mtrKin->w3 = (lambdaInv_X * cos(d2r(-45)) * x) +
 800263c:	4610      	mov	r0, r2
 800263e:	4619      	mov	r1, r3
 8002640:	f7fe fa9a 	bl	8000b78 <__aeabi_d2iz>
 8002644:	4602      	mov	r2, r0
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	609a      	str	r2, [r3, #8]
	mtrKin->w4 = (lambdaInv_X * cos(d2r(45)) * x) +
 800264a:	68b8      	ldr	r0, [r7, #8]
 800264c:	f7fd ff8c 	bl	8000568 <__aeabi_f2d>
 8002650:	a343      	add	r3, pc, #268	; (adr r3, 8002760 <kinMotor+0x268>)
 8002652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002656:	f7fd ffdf 	bl	8000618 <__aeabi_dmul>
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	4614      	mov	r4, r2
 8002660:	461d      	mov	r5, r3
				 (lambdaInv_Y * sin(d2r(45)) * y) +
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7fd ff80 	bl	8000568 <__aeabi_f2d>
 8002668:	a33f      	add	r3, pc, #252	; (adr r3, 8002768 <kinMotor+0x270>)
 800266a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266e:	f7fd ffd3 	bl	8000618 <__aeabi_dmul>
 8002672:	4602      	mov	r2, r0
 8002674:	460b      	mov	r3, r1
	mtrKin->w4 = (lambdaInv_X * cos(d2r(45)) * x) +
 8002676:	4620      	mov	r0, r4
 8002678:	4629      	mov	r1, r5
 800267a:	f7fd fe17 	bl	80002ac <__adddf3>
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	4614      	mov	r4, r2
 8002684:	461d      	mov	r5, r3
				 (lambdaInv_TH * lengthAlpha * th);
 8002686:	6838      	ldr	r0, [r7, #0]
 8002688:	f7fd ff6e 	bl	8000568 <__aeabi_f2d>
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	4b37      	ldr	r3, [pc, #220]	; (8002770 <kinMotor+0x278>)
 8002692:	f7fd ffc1 	bl	8000618 <__aeabi_dmul>
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
				 (lambdaInv_Y * sin(d2r(45)) * y) +
 800269a:	4620      	mov	r0, r4
 800269c:	4629      	mov	r1, r5
 800269e:	f7fd fe05 	bl	80002ac <__adddf3>
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
	mtrKin->w4 = (lambdaInv_X * cos(d2r(45)) * x) +
 80026a6:	4610      	mov	r0, r2
 80026a8:	4619      	mov	r1, r3
 80026aa:	f7fe fa65 	bl	8000b78 <__aeabi_d2iz>
 80026ae:	4602      	mov	r2, r0
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	60da      	str	r2, [r3, #12]

	if(mtrKin->w1 > Max_Cutoff_Mtr_Inv) mtrKin->w1 = Max_Cutoff_Mtr_Inv;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80026bc:	dd04      	ble.n	80026c8 <kinMotor+0x1d0>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	e007      	b.n	80026d8 <kinMotor+0x1e0>
	else if(mtrKin->w1 < Min_Cutoff_Mtr_Inv) mtrKin->w1 = Min_Cutoff_Mtr_Inv;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f513 7fc8 	cmn.w	r3, #400	; 0x190
 80026d0:	da02      	bge.n	80026d8 <kinMotor+0x1e0>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	4a27      	ldr	r2, [pc, #156]	; (8002774 <kinMotor+0x27c>)
 80026d6:	601a      	str	r2, [r3, #0]

	if(mtrKin->w2 > Max_Cutoff_Mtr_Inv) mtrKin->w2 = Max_Cutoff_Mtr_Inv;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80026e0:	dd04      	ble.n	80026ec <kinMotor+0x1f4>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80026e8:	605a      	str	r2, [r3, #4]
 80026ea:	e007      	b.n	80026fc <kinMotor+0x204>
	else if(mtrKin->w2 < Min_Cutoff_Mtr_Inv) mtrKin->w2 = Min_Cutoff_Mtr_Inv;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f513 7fc8 	cmn.w	r3, #400	; 0x190
 80026f4:	da02      	bge.n	80026fc <kinMotor+0x204>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	4a1e      	ldr	r2, [pc, #120]	; (8002774 <kinMotor+0x27c>)
 80026fa:	605a      	str	r2, [r3, #4]

	if(mtrKin->w3 > Max_Cutoff_Mtr_Inv) mtrKin->w3 = Max_Cutoff_Mtr_Inv;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002704:	dd04      	ble.n	8002710 <kinMotor+0x218>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800270c:	609a      	str	r2, [r3, #8]
 800270e:	e007      	b.n	8002720 <kinMotor+0x228>
	else if(mtrKin->w3 < Min_Cutoff_Mtr_Inv) mtrKin->w3 = Min_Cutoff_Mtr_Inv;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f513 7fc8 	cmn.w	r3, #400	; 0x190
 8002718:	da02      	bge.n	8002720 <kinMotor+0x228>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	4a15      	ldr	r2, [pc, #84]	; (8002774 <kinMotor+0x27c>)
 800271e:	609a      	str	r2, [r3, #8]

	if(mtrKin->w4 > Max_Cutoff_Mtr_Inv) mtrKin->w4 = Max_Cutoff_Mtr_Inv;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002728:	dd04      	ble.n	8002734 <kinMotor+0x23c>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002730:	60da      	str	r2, [r3, #12]
	else if(mtrKin->w4 < Min_Cutoff_Mtr_Inv) mtrKin->w4 = Min_Cutoff_Mtr_Inv;
}
 8002732:	e007      	b.n	8002744 <kinMotor+0x24c>
	else if(mtrKin->w4 < Min_Cutoff_Mtr_Inv) mtrKin->w4 = Min_Cutoff_Mtr_Inv;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	f513 7fc8 	cmn.w	r3, #400	; 0x190
 800273c:	da02      	bge.n	8002744 <kinMotor+0x24c>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	4a0c      	ldr	r2, [pc, #48]	; (8002774 <kinMotor+0x27c>)
 8002742:	60da      	str	r2, [r3, #12]
}
 8002744:	bf00      	nop
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bdb0      	pop	{r4, r5, r7, pc}
 800274c:	f3af 8000 	nop.w
 8002750:	b0184065 	.word	0xb0184065
 8002754:	c08618da 	.word	0xc08618da
 8002758:	b0184066 	.word	0xb0184066
 800275c:	c08618da 	.word	0xc08618da
 8002760:	b0184066 	.word	0xb0184066
 8002764:	408618da 	.word	0x408618da
 8002768:	b0184065 	.word	0xb0184065
 800276c:	408618da 	.word	0x408618da
 8002770:	40568000 	.word	0x40568000
 8002774:	fffffe70 	.word	0xfffffe70

08002778 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8002780:	4a04      	ldr	r2, [pc, #16]	; (8002794 <bno055_assignI2C+0x1c>)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6013      	str	r3, [r2, #0]
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	20000258 	.word	0x20000258

08002798 <bno055_delay>:

void bno055_delay(int time) {
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f00b f90a 	bl	800d9bc <osDelay>
#else
  HAL_Delay(time);
#endif
}
 80027a8:	bf00      	nop
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b088      	sub	sp, #32
 80027b4:	af02      	add	r7, sp, #8
 80027b6:	4603      	mov	r3, r0
 80027b8:	460a      	mov	r2, r1
 80027ba:	71fb      	strb	r3, [r7, #7]
 80027bc:	4613      	mov	r3, r2
 80027be:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	733b      	strb	r3, [r7, #12]
 80027c4:	79bb      	ldrb	r3, [r7, #6]
 80027c6:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 80027c8:	4b5a      	ldr	r3, [pc, #360]	; (8002934 <bno055_writeData+0x184>)
 80027ca:	6818      	ldr	r0, [r3, #0]
 80027cc:	f107 020c 	add.w	r2, r7, #12
 80027d0:	230a      	movs	r3, #10
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	2302      	movs	r3, #2
 80027d6:	2150      	movs	r1, #80	; 0x50
 80027d8:	f007 f9a8 	bl	8009b2c <HAL_I2C_Master_Transmit>
 80027dc:	4603      	mov	r3, r0
 80027de:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 80027e0:	7dfb      	ldrb	r3, [r7, #23]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f000 80a0 	beq.w	8002928 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 80027e8:	7dfb      	ldrb	r3, [r7, #23]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d103      	bne.n	80027f6 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 80027ee:	4852      	ldr	r0, [pc, #328]	; (8002938 <bno055_writeData+0x188>)
 80027f0:	f010 fac0 	bl	8012d74 <puts>
 80027f4:	e012      	b.n	800281c <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 80027f6:	7dfb      	ldrb	r3, [r7, #23]
 80027f8:	2b03      	cmp	r3, #3
 80027fa:	d103      	bne.n	8002804 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 80027fc:	484f      	ldr	r0, [pc, #316]	; (800293c <bno055_writeData+0x18c>)
 80027fe:	f010 fab9 	bl	8012d74 <puts>
 8002802:	e00b      	b.n	800281c <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8002804:	7dfb      	ldrb	r3, [r7, #23]
 8002806:	2b02      	cmp	r3, #2
 8002808:	d103      	bne.n	8002812 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 800280a:	484d      	ldr	r0, [pc, #308]	; (8002940 <bno055_writeData+0x190>)
 800280c:	f010 fab2 	bl	8012d74 <puts>
 8002810:	e004      	b.n	800281c <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8002812:	7dfb      	ldrb	r3, [r7, #23]
 8002814:	4619      	mov	r1, r3
 8002816:	484b      	ldr	r0, [pc, #300]	; (8002944 <bno055_writeData+0x194>)
 8002818:	f010 fa46 	bl	8012ca8 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 800281c:	4b45      	ldr	r3, [pc, #276]	; (8002934 <bno055_writeData+0x184>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4618      	mov	r0, r3
 8002822:	f007 fcc1 	bl	800a1a8 <HAL_I2C_GetError>
 8002826:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d07e      	beq.n	800292c <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d103      	bne.n	800283c <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8002834:	4844      	ldr	r0, [pc, #272]	; (8002948 <bno055_writeData+0x198>)
 8002836:	f010 fa9d 	bl	8012d74 <puts>
 800283a:	e021      	b.n	8002880 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	2b02      	cmp	r3, #2
 8002840:	d103      	bne.n	800284a <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8002842:	4842      	ldr	r0, [pc, #264]	; (800294c <bno055_writeData+0x19c>)
 8002844:	f010 fa96 	bl	8012d74 <puts>
 8002848:	e01a      	b.n	8002880 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	2b04      	cmp	r3, #4
 800284e:	d103      	bne.n	8002858 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8002850:	483f      	ldr	r0, [pc, #252]	; (8002950 <bno055_writeData+0x1a0>)
 8002852:	f010 fa8f 	bl	8012d74 <puts>
 8002856:	e013      	b.n	8002880 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	2b08      	cmp	r3, #8
 800285c:	d103      	bne.n	8002866 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 800285e:	483d      	ldr	r0, [pc, #244]	; (8002954 <bno055_writeData+0x1a4>)
 8002860:	f010 fa88 	bl	8012d74 <puts>
 8002864:	e00c      	b.n	8002880 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	2b10      	cmp	r3, #16
 800286a:	d103      	bne.n	8002874 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 800286c:	483a      	ldr	r0, [pc, #232]	; (8002958 <bno055_writeData+0x1a8>)
 800286e:	f010 fa81 	bl	8012d74 <puts>
 8002872:	e005      	b.n	8002880 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	2b20      	cmp	r3, #32
 8002878:	d102      	bne.n	8002880 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 800287a:	4838      	ldr	r0, [pc, #224]	; (800295c <bno055_writeData+0x1ac>)
 800287c:	f010 fa7a 	bl	8012d74 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8002880:	4b2c      	ldr	r3, [pc, #176]	; (8002934 <bno055_writeData+0x184>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f007 fc81 	bl	800a18c <HAL_I2C_GetState>
 800288a:	4603      	mov	r3, r0
 800288c:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 800288e:	7bfb      	ldrb	r3, [r7, #15]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d103      	bne.n	800289c <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8002894:	4832      	ldr	r0, [pc, #200]	; (8002960 <bno055_writeData+0x1b0>)
 8002896:	f010 fa6d 	bl	8012d74 <puts>
 800289a:	e048      	b.n	800292e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 800289c:	7bfb      	ldrb	r3, [r7, #15]
 800289e:	2b20      	cmp	r3, #32
 80028a0:	d103      	bne.n	80028aa <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 80028a2:	482f      	ldr	r0, [pc, #188]	; (8002960 <bno055_writeData+0x1b0>)
 80028a4:	f010 fa66 	bl	8012d74 <puts>
 80028a8:	e041      	b.n	800292e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
 80028ac:	2b24      	cmp	r3, #36	; 0x24
 80028ae:	d103      	bne.n	80028b8 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 80028b0:	482c      	ldr	r0, [pc, #176]	; (8002964 <bno055_writeData+0x1b4>)
 80028b2:	f010 fa5f 	bl	8012d74 <puts>
 80028b6:	e03a      	b.n	800292e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
 80028ba:	2b21      	cmp	r3, #33	; 0x21
 80028bc:	d103      	bne.n	80028c6 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 80028be:	482a      	ldr	r0, [pc, #168]	; (8002968 <bno055_writeData+0x1b8>)
 80028c0:	f010 fa58 	bl	8012d74 <puts>
 80028c4:	e033      	b.n	800292e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	2b22      	cmp	r3, #34	; 0x22
 80028ca:	d103      	bne.n	80028d4 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 80028cc:	4827      	ldr	r0, [pc, #156]	; (800296c <bno055_writeData+0x1bc>)
 80028ce:	f010 fa51 	bl	8012d74 <puts>
 80028d2:	e02c      	b.n	800292e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
 80028d6:	2b28      	cmp	r3, #40	; 0x28
 80028d8:	d103      	bne.n	80028e2 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 80028da:	4825      	ldr	r0, [pc, #148]	; (8002970 <bno055_writeData+0x1c0>)
 80028dc:	f010 fa4a 	bl	8012d74 <puts>
 80028e0:	e025      	b.n	800292e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 80028e2:	7bfb      	ldrb	r3, [r7, #15]
 80028e4:	2b29      	cmp	r3, #41	; 0x29
 80028e6:	d103      	bne.n	80028f0 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 80028e8:	4822      	ldr	r0, [pc, #136]	; (8002974 <bno055_writeData+0x1c4>)
 80028ea:	f010 fa43 	bl	8012d74 <puts>
 80028ee:	e01e      	b.n	800292e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
 80028f2:	2b2a      	cmp	r3, #42	; 0x2a
 80028f4:	d103      	bne.n	80028fe <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 80028f6:	4820      	ldr	r0, [pc, #128]	; (8002978 <bno055_writeData+0x1c8>)
 80028f8:	f010 fa3c 	bl	8012d74 <puts>
 80028fc:	e017      	b.n	800292e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 80028fe:	7bfb      	ldrb	r3, [r7, #15]
 8002900:	2b60      	cmp	r3, #96	; 0x60
 8002902:	d103      	bne.n	800290c <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8002904:	481d      	ldr	r0, [pc, #116]	; (800297c <bno055_writeData+0x1cc>)
 8002906:	f010 fa35 	bl	8012d74 <puts>
 800290a:	e010      	b.n	800292e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 800290c:	7bfb      	ldrb	r3, [r7, #15]
 800290e:	2ba0      	cmp	r3, #160	; 0xa0
 8002910:	d103      	bne.n	800291a <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8002912:	481b      	ldr	r0, [pc, #108]	; (8002980 <bno055_writeData+0x1d0>)
 8002914:	f010 fa2e 	bl	8012d74 <puts>
 8002918:	e009      	b.n	800292e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 800291a:	7bfb      	ldrb	r3, [r7, #15]
 800291c:	2be0      	cmp	r3, #224	; 0xe0
 800291e:	d106      	bne.n	800292e <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8002920:	4818      	ldr	r0, [pc, #96]	; (8002984 <bno055_writeData+0x1d4>)
 8002922:	f010 fa27 	bl	8012d74 <puts>
 8002926:	e002      	b.n	800292e <bno055_writeData+0x17e>
    return;
 8002928:	bf00      	nop
 800292a:	e000      	b.n	800292e <bno055_writeData+0x17e>
    return;
 800292c:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 800292e:	3718      	adds	r7, #24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	20000258 	.word	0x20000258
 8002938:	080150e8 	.word	0x080150e8
 800293c:	0801510c 	.word	0x0801510c
 8002940:	08015134 	.word	0x08015134
 8002944:	08015158 	.word	0x08015158
 8002948:	08015170 	.word	0x08015170
 800294c:	08015184 	.word	0x08015184
 8002950:	08015198 	.word	0x08015198
 8002954:	080151ac 	.word	0x080151ac
 8002958:	080151c0 	.word	0x080151c0
 800295c:	080151d4 	.word	0x080151d4
 8002960:	080151ec 	.word	0x080151ec
 8002964:	08015204 	.word	0x08015204
 8002968:	08015218 	.word	0x08015218
 800296c:	08015230 	.word	0x08015230
 8002970:	08015248 	.word	0x08015248
 8002974:	08015260 	.word	0x08015260
 8002978:	08015280 	.word	0x08015280
 800297c:	080152a0 	.word	0x080152a0
 8002980:	080152b8 	.word	0x080152b8
 8002984:	080152d0 	.word	0x080152d0

08002988 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af02      	add	r7, sp, #8
 800298e:	4603      	mov	r3, r0
 8002990:	6039      	str	r1, [r7, #0]
 8002992:	71fb      	strb	r3, [r7, #7]
 8002994:	4613      	mov	r3, r2
 8002996:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8002998:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <bno055_readData+0x40>)
 800299a:	6818      	ldr	r0, [r3, #0]
 800299c:	1dfa      	adds	r2, r7, #7
 800299e:	2364      	movs	r3, #100	; 0x64
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	2301      	movs	r3, #1
 80029a4:	2150      	movs	r1, #80	; 0x50
 80029a6:	f007 f8c1 	bl	8009b2c <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 80029aa:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <bno055_readData+0x40>)
 80029ac:	6818      	ldr	r0, [r3, #0]
 80029ae:	79bb      	ldrb	r3, [r7, #6]
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	2264      	movs	r2, #100	; 0x64
 80029b4:	9200      	str	r2, [sp, #0]
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	2150      	movs	r1, #80	; 0x50
 80029ba:	f007 f9b5 	bl	8009d28 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20000258 	.word	0x20000258

080029cc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80029d0:	f006 f828 	bl	8008a24 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80029d4:	f000 f852 	bl	8002a7c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80029d8:	f000 fb1c 	bl	8003014 <MX_GPIO_Init>
	MX_DMA_Init();
 80029dc:	f000 fae2 	bl	8002fa4 <MX_DMA_Init>
	MX_I2C1_Init();
 80029e0:	f000 f8b6 	bl	8002b50 <MX_I2C1_Init>
	MX_USART3_UART_Init();
 80029e4:	f000 fab4 	bl	8002f50 <MX_USART3_UART_Init>
	MX_TIM1_Init();
 80029e8:	f000 f932 	bl	8002c50 <MX_TIM1_Init>
	MX_TIM3_Init();
 80029ec:	f000 f9f4 	bl	8002dd8 <MX_TIM3_Init>
	MX_TIM13_Init();
 80029f0:	f000 fa8a 	bl	8002f08 <MX_TIM13_Init>
	MX_I2C2_Init();
 80029f4:	f000 f8ec 	bl	8002bd0 <MX_I2C2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim13);
 80029f8:	4813      	ldr	r0, [pc, #76]	; (8002a48 <main+0x7c>)
 80029fa:	f008 fcbd 	bl	800b378 <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80029fe:	f00a ff01 	bl	800d804 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of myTask01 */
	myTask01Handle = osThreadNew(StartDefaultTask, NULL, &myTask01_attributes);
 8002a02:	4a12      	ldr	r2, [pc, #72]	; (8002a4c <main+0x80>)
 8002a04:	2100      	movs	r1, #0
 8002a06:	4812      	ldr	r0, [pc, #72]	; (8002a50 <main+0x84>)
 8002a08:	f00a ff46 	bl	800d898 <osThreadNew>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	4a11      	ldr	r2, [pc, #68]	; (8002a54 <main+0x88>)
 8002a10:	6013      	str	r3, [r2, #0]

	/* creation of myTask02 */
	myTask02Handle = osThreadNew(commTask, NULL, &myTask02_attributes);
 8002a12:	4a11      	ldr	r2, [pc, #68]	; (8002a58 <main+0x8c>)
 8002a14:	2100      	movs	r1, #0
 8002a16:	4811      	ldr	r0, [pc, #68]	; (8002a5c <main+0x90>)
 8002a18:	f00a ff3e 	bl	800d898 <osThreadNew>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	4a10      	ldr	r2, [pc, #64]	; (8002a60 <main+0x94>)
 8002a20:	6013      	str	r3, [r2, #0]

	/* creation of ImuTask */
	ImuTaskHandle = osThreadNew(ImuTask_Function, NULL, &ImuTask_attributes);
 8002a22:	4a10      	ldr	r2, [pc, #64]	; (8002a64 <main+0x98>)
 8002a24:	2100      	movs	r1, #0
 8002a26:	4810      	ldr	r0, [pc, #64]	; (8002a68 <main+0x9c>)
 8002a28:	f00a ff36 	bl	800d898 <osThreadNew>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	4a0f      	ldr	r2, [pc, #60]	; (8002a6c <main+0xa0>)
 8002a30:	6013      	str	r3, [r2, #0]

	/* creation of myTask04 */
	myTask04Handle = osThreadNew(GUI_Task, NULL, &myTask04_attributes);
 8002a32:	4a0f      	ldr	r2, [pc, #60]	; (8002a70 <main+0xa4>)
 8002a34:	2100      	movs	r1, #0
 8002a36:	480f      	ldr	r0, [pc, #60]	; (8002a74 <main+0xa8>)
 8002a38:	f00a ff2e 	bl	800d898 <osThreadNew>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	4a0e      	ldr	r2, [pc, #56]	; (8002a78 <main+0xac>)
 8002a40:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8002a42:	f00a ff03 	bl	800d84c <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8002a46:	e7fe      	b.n	8002a46 <main+0x7a>
 8002a48:	20000454 	.word	0x20000454
 8002a4c:	08015688 	.word	0x08015688
 8002a50:	08003881 	.word	0x08003881
 8002a54:	200005a4 	.word	0x200005a4
 8002a58:	080156ac 	.word	0x080156ac
 8002a5c:	0800396d 	.word	0x0800396d
 8002a60:	200005a8 	.word	0x200005a8
 8002a64:	080156d0 	.word	0x080156d0
 8002a68:	08003985 	.word	0x08003985
 8002a6c:	200005ac 	.word	0x200005ac
 8002a70:	080156f4 	.word	0x080156f4
 8002a74:	08003ad9 	.word	0x08003ad9
 8002a78:	200005b0 	.word	0x200005b0

08002a7c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b094      	sub	sp, #80	; 0x50
 8002a80:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002a82:	f107 0320 	add.w	r3, r7, #32
 8002a86:	2230      	movs	r2, #48	; 0x30
 8002a88:	2100      	movs	r1, #0
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f010 fa72 	bl	8012f74 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002a90:	f107 030c 	add.w	r3, r7, #12
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	609a      	str	r2, [r3, #8]
 8002a9c:	60da      	str	r2, [r3, #12]
 8002a9e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60bb      	str	r3, [r7, #8]
 8002aa4:	4b28      	ldr	r3, [pc, #160]	; (8002b48 <SystemClock_Config+0xcc>)
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa8:	4a27      	ldr	r2, [pc, #156]	; (8002b48 <SystemClock_Config+0xcc>)
 8002aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aae:	6413      	str	r3, [r2, #64]	; 0x40
 8002ab0:	4b25      	ldr	r3, [pc, #148]	; (8002b48 <SystemClock_Config+0xcc>)
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab8:	60bb      	str	r3, [r7, #8]
 8002aba:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002abc:	2300      	movs	r3, #0
 8002abe:	607b      	str	r3, [r7, #4]
 8002ac0:	4b22      	ldr	r3, [pc, #136]	; (8002b4c <SystemClock_Config+0xd0>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a21      	ldr	r2, [pc, #132]	; (8002b4c <SystemClock_Config+0xd0>)
 8002ac6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002aca:	6013      	str	r3, [r2, #0]
 8002acc:	4b1f      	ldr	r3, [pc, #124]	; (8002b4c <SystemClock_Config+0xd0>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ad4:	607b      	str	r3, [r7, #4]
 8002ad6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ad8:	2302      	movs	r3, #2
 8002ada:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002adc:	2301      	movs	r3, #1
 8002ade:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ae0:	2310      	movs	r3, #16
 8002ae2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002aec:	2308      	movs	r3, #8
 8002aee:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8002af0:	23a8      	movs	r3, #168	; 0xa8
 8002af2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002af4:	2302      	movs	r3, #2
 8002af6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002af8:	2304      	movs	r3, #4
 8002afa:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002afc:	f107 0320 	add.w	r3, r7, #32
 8002b00:	4618      	mov	r0, r3
 8002b02:	f007 ff5f 	bl	800a9c4 <HAL_RCC_OscConfig>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <SystemClock_Config+0x94>
		Error_Handler();
 8002b0c:	f001 f8ce 	bl	8003cac <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002b10:	230f      	movs	r3, #15
 8002b12:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b14:	2302      	movs	r3, #2
 8002b16:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002b1c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002b20:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002b22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b26:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8002b28:	f107 030c 	add.w	r3, r7, #12
 8002b2c:	2105      	movs	r1, #5
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f008 f9c0 	bl	800aeb4 <HAL_RCC_ClockConfig>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <SystemClock_Config+0xc2>
		Error_Handler();
 8002b3a:	f001 f8b7 	bl	8003cac <Error_Handler>
	}
}
 8002b3e:	bf00      	nop
 8002b40:	3750      	adds	r7, #80	; 0x50
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	40007000 	.word	0x40007000

08002b50 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002b54:	4b1b      	ldr	r3, [pc, #108]	; (8002bc4 <MX_I2C1_Init+0x74>)
 8002b56:	4a1c      	ldr	r2, [pc, #112]	; (8002bc8 <MX_I2C1_Init+0x78>)
 8002b58:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8002b5a:	4b1a      	ldr	r3, [pc, #104]	; (8002bc4 <MX_I2C1_Init+0x74>)
 8002b5c:	4a1b      	ldr	r2, [pc, #108]	; (8002bcc <MX_I2C1_Init+0x7c>)
 8002b5e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b60:	4b18      	ldr	r3, [pc, #96]	; (8002bc4 <MX_I2C1_Init+0x74>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8002b66:	4b17      	ldr	r3, [pc, #92]	; (8002bc4 <MX_I2C1_Init+0x74>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b6c:	4b15      	ldr	r3, [pc, #84]	; (8002bc4 <MX_I2C1_Init+0x74>)
 8002b6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b72:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b74:	4b13      	ldr	r3, [pc, #76]	; (8002bc4 <MX_I2C1_Init+0x74>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8002b7a:	4b12      	ldr	r3, [pc, #72]	; (8002bc4 <MX_I2C1_Init+0x74>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b80:	4b10      	ldr	r3, [pc, #64]	; (8002bc4 <MX_I2C1_Init+0x74>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b86:	4b0f      	ldr	r3, [pc, #60]	; (8002bc4 <MX_I2C1_Init+0x74>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002b8c:	480d      	ldr	r0, [pc, #52]	; (8002bc4 <MX_I2C1_Init+0x74>)
 8002b8e:	f006 fe89 	bl	80098a4 <HAL_I2C_Init>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <MX_I2C1_Init+0x4c>
		Error_Handler();
 8002b98:	f001 f888 	bl	8003cac <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	4809      	ldr	r0, [pc, #36]	; (8002bc4 <MX_I2C1_Init+0x74>)
 8002ba0:	f007 fe94 	bl	800a8cc <HAL_I2CEx_ConfigAnalogFilter>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <MX_I2C1_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 8002baa:	f001 f87f 	bl	8003cac <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8002bae:	2100      	movs	r1, #0
 8002bb0:	4804      	ldr	r0, [pc, #16]	; (8002bc4 <MX_I2C1_Init+0x74>)
 8002bb2:	f007 fec7 	bl	800a944 <HAL_I2CEx_ConfigDigitalFilter>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <MX_I2C1_Init+0x70>
		Error_Handler();
 8002bbc:	f001 f876 	bl	8003cac <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002bc0:	bf00      	nop
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	2000025c 	.word	0x2000025c
 8002bc8:	40005400 	.word	0x40005400
 8002bcc:	000186a0 	.word	0x000186a0

08002bd0 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8002bd4:	4b1b      	ldr	r3, [pc, #108]	; (8002c44 <MX_I2C2_Init+0x74>)
 8002bd6:	4a1c      	ldr	r2, [pc, #112]	; (8002c48 <MX_I2C2_Init+0x78>)
 8002bd8:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 8002bda:	4b1a      	ldr	r3, [pc, #104]	; (8002c44 <MX_I2C2_Init+0x74>)
 8002bdc:	4a1b      	ldr	r2, [pc, #108]	; (8002c4c <MX_I2C2_Init+0x7c>)
 8002bde:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002be0:	4b18      	ldr	r3, [pc, #96]	; (8002c44 <MX_I2C2_Init+0x74>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8002be6:	4b17      	ldr	r3, [pc, #92]	; (8002c44 <MX_I2C2_Init+0x74>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bec:	4b15      	ldr	r3, [pc, #84]	; (8002c44 <MX_I2C2_Init+0x74>)
 8002bee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002bf2:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bf4:	4b13      	ldr	r3, [pc, #76]	; (8002c44 <MX_I2C2_Init+0x74>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8002bfa:	4b12      	ldr	r3, [pc, #72]	; (8002c44 <MX_I2C2_Init+0x74>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c00:	4b10      	ldr	r3, [pc, #64]	; (8002c44 <MX_I2C2_Init+0x74>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c06:	4b0f      	ldr	r3, [pc, #60]	; (8002c44 <MX_I2C2_Init+0x74>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8002c0c:	480d      	ldr	r0, [pc, #52]	; (8002c44 <MX_I2C2_Init+0x74>)
 8002c0e:	f006 fe49 	bl	80098a4 <HAL_I2C_Init>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <MX_I2C2_Init+0x4c>
		Error_Handler();
 8002c18:	f001 f848 	bl	8003cac <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	4809      	ldr	r0, [pc, #36]	; (8002c44 <MX_I2C2_Init+0x74>)
 8002c20:	f007 fe54 	bl	800a8cc <HAL_I2CEx_ConfigAnalogFilter>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <MX_I2C2_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 8002c2a:	f001 f83f 	bl	8003cac <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8002c2e:	2100      	movs	r1, #0
 8002c30:	4804      	ldr	r0, [pc, #16]	; (8002c44 <MX_I2C2_Init+0x74>)
 8002c32:	f007 fe87 	bl	800a944 <HAL_I2CEx_ConfigDigitalFilter>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <MX_I2C2_Init+0x70>
		Error_Handler();
 8002c3c:	f001 f836 	bl	8003cac <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8002c40:	bf00      	nop
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	200002b0 	.word	0x200002b0
 8002c48:	40005800 	.word	0x40005800
 8002c4c:	000186a0 	.word	0x000186a0

08002c50 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b096      	sub	sp, #88	; 0x58
 8002c54:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002c56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	605a      	str	r2, [r3, #4]
 8002c60:	609a      	str	r2, [r3, #8]
 8002c62:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002c64:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	605a      	str	r2, [r3, #4]
 8002c78:	609a      	str	r2, [r3, #8]
 8002c7a:	60da      	str	r2, [r3, #12]
 8002c7c:	611a      	str	r2, [r3, #16]
 8002c7e:	615a      	str	r2, [r3, #20]
 8002c80:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8002c82:	1d3b      	adds	r3, r7, #4
 8002c84:	2220      	movs	r2, #32
 8002c86:	2100      	movs	r1, #0
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f010 f973 	bl	8012f74 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8002c8e:	4b50      	ldr	r3, [pc, #320]	; (8002dd0 <MX_TIM1_Init+0x180>)
 8002c90:	4a50      	ldr	r2, [pc, #320]	; (8002dd4 <MX_TIM1_Init+0x184>)
 8002c92:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 7 - 1;
 8002c94:	4b4e      	ldr	r3, [pc, #312]	; (8002dd0 <MX_TIM1_Init+0x180>)
 8002c96:	2206      	movs	r2, #6
 8002c98:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c9a:	4b4d      	ldr	r3, [pc, #308]	; (8002dd0 <MX_TIM1_Init+0x180>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000 - 1;
 8002ca0:	4b4b      	ldr	r3, [pc, #300]	; (8002dd0 <MX_TIM1_Init+0x180>)
 8002ca2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ca6:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ca8:	4b49      	ldr	r3, [pc, #292]	; (8002dd0 <MX_TIM1_Init+0x180>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002cae:	4b48      	ldr	r3, [pc, #288]	; (8002dd0 <MX_TIM1_Init+0x180>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002cb4:	4b46      	ldr	r3, [pc, #280]	; (8002dd0 <MX_TIM1_Init+0x180>)
 8002cb6:	2280      	movs	r2, #128	; 0x80
 8002cb8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8002cba:	4845      	ldr	r0, [pc, #276]	; (8002dd0 <MX_TIM1_Init+0x180>)
 8002cbc:	f008 fb0c 	bl	800b2d8 <HAL_TIM_Base_Init>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <MX_TIM1_Init+0x7a>
		Error_Handler();
 8002cc6:	f000 fff1 	bl	8003cac <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cce:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8002cd0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	483e      	ldr	r0, [pc, #248]	; (8002dd0 <MX_TIM1_Init+0x180>)
 8002cd8:	f008 fe92 	bl	800ba00 <HAL_TIM_ConfigClockSource>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <MX_TIM1_Init+0x96>
		Error_Handler();
 8002ce2:	f000 ffe3 	bl	8003cac <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8002ce6:	483a      	ldr	r0, [pc, #232]	; (8002dd0 <MX_TIM1_Init+0x180>)
 8002ce8:	f008 fbb6 	bl	800b458 <HAL_TIM_PWM_Init>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_TIM1_Init+0xa6>
		Error_Handler();
 8002cf2:	f000 ffdb 	bl	8003cac <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8002cfe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d02:	4619      	mov	r1, r3
 8002d04:	4832      	ldr	r0, [pc, #200]	; (8002dd0 <MX_TIM1_Init+0x180>)
 8002d06:	f009 fa87 	bl	800c218 <HAL_TIMEx_MasterConfigSynchronization>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 8002d10:	f000 ffcc 	bl	8003cac <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d14:	2360      	movs	r3, #96	; 0x60
 8002d16:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002d20:	2300      	movs	r3, #0
 8002d22:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d24:	2300      	movs	r3, #0
 8002d26:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8002d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d34:	2200      	movs	r2, #0
 8002d36:	4619      	mov	r1, r3
 8002d38:	4825      	ldr	r0, [pc, #148]	; (8002dd0 <MX_TIM1_Init+0x180>)
 8002d3a:	f008 fd9f 	bl	800b87c <HAL_TIM_PWM_ConfigChannel>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <MX_TIM1_Init+0xf8>
			!= HAL_OK) {
		Error_Handler();
 8002d44:	f000 ffb2 	bl	8003cac <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 8002d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d4c:	2204      	movs	r2, #4
 8002d4e:	4619      	mov	r1, r3
 8002d50:	481f      	ldr	r0, [pc, #124]	; (8002dd0 <MX_TIM1_Init+0x180>)
 8002d52:	f008 fd93 	bl	800b87c <HAL_TIM_PWM_ConfigChannel>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <MX_TIM1_Init+0x110>
			!= HAL_OK) {
		Error_Handler();
 8002d5c:	f000 ffa6 	bl	8003cac <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 8002d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d64:	2208      	movs	r2, #8
 8002d66:	4619      	mov	r1, r3
 8002d68:	4819      	ldr	r0, [pc, #100]	; (8002dd0 <MX_TIM1_Init+0x180>)
 8002d6a:	f008 fd87 	bl	800b87c <HAL_TIM_PWM_ConfigChannel>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <MX_TIM1_Init+0x128>
			!= HAL_OK) {
		Error_Handler();
 8002d74:	f000 ff9a 	bl	8003cac <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 8002d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d7c:	220c      	movs	r2, #12
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4813      	ldr	r0, [pc, #76]	; (8002dd0 <MX_TIM1_Init+0x180>)
 8002d82:	f008 fd7b 	bl	800b87c <HAL_TIM_PWM_ConfigChannel>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <MX_TIM1_Init+0x140>
			!= HAL_OK) {
		Error_Handler();
 8002d8c:	f000 ff8e 	bl	8003cac <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d90:	2300      	movs	r3, #0
 8002d92:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d94:	2300      	movs	r3, #0
 8002d96:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002da0:	2300      	movs	r3, #0
 8002da2:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002da4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002da8:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002daa:	2300      	movs	r3, #0
 8002dac:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8002dae:	1d3b      	adds	r3, r7, #4
 8002db0:	4619      	mov	r1, r3
 8002db2:	4807      	ldr	r0, [pc, #28]	; (8002dd0 <MX_TIM1_Init+0x180>)
 8002db4:	f009 faac 	bl	800c310 <HAL_TIMEx_ConfigBreakDeadTime>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <MX_TIM1_Init+0x172>
			!= HAL_OK) {
		Error_Handler();
 8002dbe:	f000 ff75 	bl	8003cac <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8002dc2:	4803      	ldr	r0, [pc, #12]	; (8002dd0 <MX_TIM1_Init+0x180>)
 8002dc4:	f005 faac 	bl	8008320 <HAL_TIM_MspPostInit>

}
 8002dc8:	bf00      	nop
 8002dca:	3758      	adds	r7, #88	; 0x58
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	200003c4 	.word	0x200003c4
 8002dd4:	40010000 	.word	0x40010000

08002dd8 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b08e      	sub	sp, #56	; 0x38
 8002ddc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002dde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	605a      	str	r2, [r3, #4]
 8002de8:	609a      	str	r2, [r3, #8]
 8002dea:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002dec:	f107 0320 	add.w	r3, r7, #32
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002df6:	1d3b      	adds	r3, r7, #4
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	605a      	str	r2, [r3, #4]
 8002dfe:	609a      	str	r2, [r3, #8]
 8002e00:	60da      	str	r2, [r3, #12]
 8002e02:	611a      	str	r2, [r3, #16]
 8002e04:	615a      	str	r2, [r3, #20]
 8002e06:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002e08:	4b3d      	ldr	r3, [pc, #244]	; (8002f00 <MX_TIM3_Init+0x128>)
 8002e0a:	4a3e      	ldr	r2, [pc, #248]	; (8002f04 <MX_TIM3_Init+0x12c>)
 8002e0c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 4 - 1;
 8002e0e:	4b3c      	ldr	r3, [pc, #240]	; (8002f00 <MX_TIM3_Init+0x128>)
 8002e10:	2203      	movs	r2, #3
 8002e12:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e14:	4b3a      	ldr	r3, [pc, #232]	; (8002f00 <MX_TIM3_Init+0x128>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000 - 1;
 8002e1a:	4b39      	ldr	r3, [pc, #228]	; (8002f00 <MX_TIM3_Init+0x128>)
 8002e1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e20:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e22:	4b37      	ldr	r3, [pc, #220]	; (8002f00 <MX_TIM3_Init+0x128>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e28:	4b35      	ldr	r3, [pc, #212]	; (8002f00 <MX_TIM3_Init+0x128>)
 8002e2a:	2280      	movs	r2, #128	; 0x80
 8002e2c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8002e2e:	4834      	ldr	r0, [pc, #208]	; (8002f00 <MX_TIM3_Init+0x128>)
 8002e30:	f008 fa52 	bl	800b2d8 <HAL_TIM_Base_Init>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <MX_TIM3_Init+0x66>
		Error_Handler();
 8002e3a:	f000 ff37 	bl	8003cac <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e42:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8002e44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e48:	4619      	mov	r1, r3
 8002e4a:	482d      	ldr	r0, [pc, #180]	; (8002f00 <MX_TIM3_Init+0x128>)
 8002e4c:	f008 fdd8 	bl	800ba00 <HAL_TIM_ConfigClockSource>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <MX_TIM3_Init+0x82>
		Error_Handler();
 8002e56:	f000 ff29 	bl	8003cac <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8002e5a:	4829      	ldr	r0, [pc, #164]	; (8002f00 <MX_TIM3_Init+0x128>)
 8002e5c:	f008 fafc 	bl	800b458 <HAL_TIM_PWM_Init>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <MX_TIM3_Init+0x92>
		Error_Handler();
 8002e66:	f000 ff21 	bl	8003cac <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8002e72:	f107 0320 	add.w	r3, r7, #32
 8002e76:	4619      	mov	r1, r3
 8002e78:	4821      	ldr	r0, [pc, #132]	; (8002f00 <MX_TIM3_Init+0x128>)
 8002e7a:	f009 f9cd 	bl	800c218 <HAL_TIMEx_MasterConfigSynchronization>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <MX_TIM3_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8002e84:	f000 ff12 	bl	8003cac <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e88:	2360      	movs	r3, #96	; 0x60
 8002e8a:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e90:	2300      	movs	r3, #0
 8002e92:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e94:	2300      	movs	r3, #0
 8002e96:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8002e98:	1d3b      	adds	r3, r7, #4
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4818      	ldr	r0, [pc, #96]	; (8002f00 <MX_TIM3_Init+0x128>)
 8002ea0:	f008 fcec 	bl	800b87c <HAL_TIM_PWM_ConfigChannel>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <MX_TIM3_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 8002eaa:	f000 feff 	bl	8003cac <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8002eae:	1d3b      	adds	r3, r7, #4
 8002eb0:	2204      	movs	r2, #4
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	4812      	ldr	r0, [pc, #72]	; (8002f00 <MX_TIM3_Init+0x128>)
 8002eb6:	f008 fce1 	bl	800b87c <HAL_TIM_PWM_ConfigChannel>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <MX_TIM3_Init+0xec>
			!= HAL_OK) {
		Error_Handler();
 8002ec0:	f000 fef4 	bl	8003cac <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 8002ec4:	1d3b      	adds	r3, r7, #4
 8002ec6:	2208      	movs	r2, #8
 8002ec8:	4619      	mov	r1, r3
 8002eca:	480d      	ldr	r0, [pc, #52]	; (8002f00 <MX_TIM3_Init+0x128>)
 8002ecc:	f008 fcd6 	bl	800b87c <HAL_TIM_PWM_ConfigChannel>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <MX_TIM3_Init+0x102>
			!= HAL_OK) {
		Error_Handler();
 8002ed6:	f000 fee9 	bl	8003cac <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4)
 8002eda:	1d3b      	adds	r3, r7, #4
 8002edc:	220c      	movs	r2, #12
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4807      	ldr	r0, [pc, #28]	; (8002f00 <MX_TIM3_Init+0x128>)
 8002ee2:	f008 fccb 	bl	800b87c <HAL_TIM_PWM_ConfigChannel>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <MX_TIM3_Init+0x118>
			!= HAL_OK) {
		Error_Handler();
 8002eec:	f000 fede 	bl	8003cac <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8002ef0:	4803      	ldr	r0, [pc, #12]	; (8002f00 <MX_TIM3_Init+0x128>)
 8002ef2:	f005 fa15 	bl	8008320 <HAL_TIM_MspPostInit>

}
 8002ef6:	bf00      	nop
 8002ef8:	3738      	adds	r7, #56	; 0x38
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	2000040c 	.word	0x2000040c
 8002f04:	40000400 	.word	0x40000400

08002f08 <MX_TIM13_Init>:
/**
 * @brief TIM13 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM13_Init(void) {
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
	/* USER CODE END TIM13_Init 0 */

	/* USER CODE BEGIN TIM13_Init 1 */

	/* USER CODE END TIM13_Init 1 */
	htim13.Instance = TIM13;
 8002f0c:	4b0e      	ldr	r3, [pc, #56]	; (8002f48 <MX_TIM13_Init+0x40>)
 8002f0e:	4a0f      	ldr	r2, [pc, #60]	; (8002f4c <MX_TIM13_Init+0x44>)
 8002f10:	601a      	str	r2, [r3, #0]
	htim13.Init.Prescaler = 13;
 8002f12:	4b0d      	ldr	r3, [pc, #52]	; (8002f48 <MX_TIM13_Init+0x40>)
 8002f14:	220d      	movs	r2, #13
 8002f16:	605a      	str	r2, [r3, #4]
	htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f18:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <MX_TIM13_Init+0x40>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	609a      	str	r2, [r3, #8]
	htim13.Init.Period = 59999;
 8002f1e:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <MX_TIM13_Init+0x40>)
 8002f20:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8002f24:	60da      	str	r2, [r3, #12]
	htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f26:	4b08      	ldr	r3, [pc, #32]	; (8002f48 <MX_TIM13_Init+0x40>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	611a      	str	r2, [r3, #16]
	htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f2c:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <MX_TIM13_Init+0x40>)
 8002f2e:	2280      	movs	r2, #128	; 0x80
 8002f30:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim13) != HAL_OK) {
 8002f32:	4805      	ldr	r0, [pc, #20]	; (8002f48 <MX_TIM13_Init+0x40>)
 8002f34:	f008 f9d0 	bl	800b2d8 <HAL_TIM_Base_Init>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <MX_TIM13_Init+0x3a>
		Error_Handler();
 8002f3e:	f000 feb5 	bl	8003cac <Error_Handler>
	}
	/* USER CODE BEGIN TIM13_Init 2 */

	/* USER CODE END TIM13_Init 2 */

}
 8002f42:	bf00      	nop
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	20000454 	.word	0x20000454
 8002f4c:	40001c00 	.word	0x40001c00

08002f50 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8002f54:	4b11      	ldr	r3, [pc, #68]	; (8002f9c <MX_USART3_UART_Init+0x4c>)
 8002f56:	4a12      	ldr	r2, [pc, #72]	; (8002fa0 <MX_USART3_UART_Init+0x50>)
 8002f58:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8002f5a:	4b10      	ldr	r3, [pc, #64]	; (8002f9c <MX_USART3_UART_Init+0x4c>)
 8002f5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f60:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f62:	4b0e      	ldr	r3, [pc, #56]	; (8002f9c <MX_USART3_UART_Init+0x4c>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8002f68:	4b0c      	ldr	r3, [pc, #48]	; (8002f9c <MX_USART3_UART_Init+0x4c>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8002f6e:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <MX_USART3_UART_Init+0x4c>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8002f74:	4b09      	ldr	r3, [pc, #36]	; (8002f9c <MX_USART3_UART_Init+0x4c>)
 8002f76:	220c      	movs	r2, #12
 8002f78:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f7a:	4b08      	ldr	r3, [pc, #32]	; (8002f9c <MX_USART3_UART_Init+0x4c>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f80:	4b06      	ldr	r3, [pc, #24]	; (8002f9c <MX_USART3_UART_Init+0x4c>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8002f86:	4805      	ldr	r0, [pc, #20]	; (8002f9c <MX_USART3_UART_Init+0x4c>)
 8002f88:	f009 fa28 	bl	800c3dc <HAL_UART_Init>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8002f92:	f000 fe8b 	bl	8003cac <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8002f96:	bf00      	nop
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	2000049c 	.word	0x2000049c
 8002fa0:	40004800 	.word	0x40004800

08002fa4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002faa:	2300      	movs	r3, #0
 8002fac:	607b      	str	r3, [r7, #4]
 8002fae:	4b18      	ldr	r3, [pc, #96]	; (8003010 <MX_DMA_Init+0x6c>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	4a17      	ldr	r2, [pc, #92]	; (8003010 <MX_DMA_Init+0x6c>)
 8002fb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fba:	4b15      	ldr	r3, [pc, #84]	; (8003010 <MX_DMA_Init+0x6c>)
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fc2:	607b      	str	r3, [r7, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	2105      	movs	r1, #5
 8002fca:	200b      	movs	r0, #11
 8002fcc:	f005 fe48 	bl	8008c60 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002fd0:	200b      	movs	r0, #11
 8002fd2:	f005 fe61 	bl	8008c98 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	2105      	movs	r1, #5
 8002fda:	200c      	movs	r0, #12
 8002fdc:	f005 fe40 	bl	8008c60 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002fe0:	200c      	movs	r0, #12
 8002fe2:	f005 fe59 	bl	8008c98 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	2105      	movs	r1, #5
 8002fea:	200e      	movs	r0, #14
 8002fec:	f005 fe38 	bl	8008c60 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002ff0:	200e      	movs	r0, #14
 8002ff2:	f005 fe51 	bl	8008c98 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	2105      	movs	r1, #5
 8002ffa:	2011      	movs	r0, #17
 8002ffc:	f005 fe30 	bl	8008c60 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003000:	2011      	movs	r0, #17
 8003002:	f005 fe49 	bl	8008c98 <HAL_NVIC_EnableIRQ>

}
 8003006:	bf00      	nop
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40023800 	.word	0x40023800

08003014 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003014:	b580      	push	{r7, lr}
 8003016:	b08e      	sub	sp, #56	; 0x38
 8003018:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800301a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	605a      	str	r2, [r3, #4]
 8003024:	609a      	str	r2, [r3, #8]
 8003026:	60da      	str	r2, [r3, #12]
 8003028:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	623b      	str	r3, [r7, #32]
 800302e:	4b6d      	ldr	r3, [pc, #436]	; (80031e4 <MX_GPIO_Init+0x1d0>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	4a6c      	ldr	r2, [pc, #432]	; (80031e4 <MX_GPIO_Init+0x1d0>)
 8003034:	f043 0304 	orr.w	r3, r3, #4
 8003038:	6313      	str	r3, [r2, #48]	; 0x30
 800303a:	4b6a      	ldr	r3, [pc, #424]	; (80031e4 <MX_GPIO_Init+0x1d0>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	f003 0304 	and.w	r3, r3, #4
 8003042:	623b      	str	r3, [r7, #32]
 8003044:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	61fb      	str	r3, [r7, #28]
 800304a:	4b66      	ldr	r3, [pc, #408]	; (80031e4 <MX_GPIO_Init+0x1d0>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	4a65      	ldr	r2, [pc, #404]	; (80031e4 <MX_GPIO_Init+0x1d0>)
 8003050:	f043 0320 	orr.w	r3, r3, #32
 8003054:	6313      	str	r3, [r2, #48]	; 0x30
 8003056:	4b63      	ldr	r3, [pc, #396]	; (80031e4 <MX_GPIO_Init+0x1d0>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	f003 0320 	and.w	r3, r3, #32
 800305e:	61fb      	str	r3, [r7, #28]
 8003060:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	61bb      	str	r3, [r7, #24]
 8003066:	4b5f      	ldr	r3, [pc, #380]	; (80031e4 <MX_GPIO_Init+0x1d0>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	4a5e      	ldr	r2, [pc, #376]	; (80031e4 <MX_GPIO_Init+0x1d0>)
 800306c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003070:	6313      	str	r3, [r2, #48]	; 0x30
 8003072:	4b5c      	ldr	r3, [pc, #368]	; (80031e4 <MX_GPIO_Init+0x1d0>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307a:	61bb      	str	r3, [r7, #24]
 800307c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800307e:	2300      	movs	r3, #0
 8003080:	617b      	str	r3, [r7, #20]
 8003082:	4b58      	ldr	r3, [pc, #352]	; (80031e4 <MX_GPIO_Init+0x1d0>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	4a57      	ldr	r2, [pc, #348]	; (80031e4 <MX_GPIO_Init+0x1d0>)
 8003088:	f043 0301 	orr.w	r3, r3, #1
 800308c:	6313      	str	r3, [r2, #48]	; 0x30
 800308e:	4b55      	ldr	r3, [pc, #340]	; (80031e4 <MX_GPIO_Init+0x1d0>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800309a:	2300      	movs	r3, #0
 800309c:	613b      	str	r3, [r7, #16]
 800309e:	4b51      	ldr	r3, [pc, #324]	; (80031e4 <MX_GPIO_Init+0x1d0>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	4a50      	ldr	r2, [pc, #320]	; (80031e4 <MX_GPIO_Init+0x1d0>)
 80030a4:	f043 0302 	orr.w	r3, r3, #2
 80030a8:	6313      	str	r3, [r2, #48]	; 0x30
 80030aa:	4b4e      	ldr	r3, [pc, #312]	; (80031e4 <MX_GPIO_Init+0x1d0>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	613b      	str	r3, [r7, #16]
 80030b4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80030b6:	2300      	movs	r3, #0
 80030b8:	60fb      	str	r3, [r7, #12]
 80030ba:	4b4a      	ldr	r3, [pc, #296]	; (80031e4 <MX_GPIO_Init+0x1d0>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	4a49      	ldr	r2, [pc, #292]	; (80031e4 <MX_GPIO_Init+0x1d0>)
 80030c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030c4:	6313      	str	r3, [r2, #48]	; 0x30
 80030c6:	4b47      	ldr	r3, [pc, #284]	; (80031e4 <MX_GPIO_Init+0x1d0>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80030d2:	2300      	movs	r3, #0
 80030d4:	60bb      	str	r3, [r7, #8]
 80030d6:	4b43      	ldr	r3, [pc, #268]	; (80031e4 <MX_GPIO_Init+0x1d0>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030da:	4a42      	ldr	r2, [pc, #264]	; (80031e4 <MX_GPIO_Init+0x1d0>)
 80030dc:	f043 0310 	orr.w	r3, r3, #16
 80030e0:	6313      	str	r3, [r2, #48]	; 0x30
 80030e2:	4b40      	ldr	r3, [pc, #256]	; (80031e4 <MX_GPIO_Init+0x1d0>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	f003 0310 	and.w	r3, r3, #16
 80030ea:	60bb      	str	r3, [r7, #8]
 80030ec:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80030ee:	2300      	movs	r3, #0
 80030f0:	607b      	str	r3, [r7, #4]
 80030f2:	4b3c      	ldr	r3, [pc, #240]	; (80031e4 <MX_GPIO_Init+0x1d0>)
 80030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f6:	4a3b      	ldr	r2, [pc, #236]	; (80031e4 <MX_GPIO_Init+0x1d0>)
 80030f8:	f043 0308 	orr.w	r3, r3, #8
 80030fc:	6313      	str	r3, [r2, #48]	; 0x30
 80030fe:	4b39      	ldr	r3, [pc, #228]	; (80031e4 <MX_GPIO_Init+0x1d0>)
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	607b      	str	r3, [r7, #4]
 8003108:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, ENB2_Pin | ENB3_Pin | ENB4_Pin, GPIO_PIN_RESET);
 800310a:	2200      	movs	r2, #0
 800310c:	f241 4102 	movw	r1, #5122	; 0x1402
 8003110:	4835      	ldr	r0, [pc, #212]	; (80031e8 <MX_GPIO_Init+0x1d4>)
 8003112:	f006 fb95 	bl	8009840 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD_RED_GPIO_Port, LD_RED_Pin, GPIO_PIN_RESET);
 8003116:	2200      	movs	r2, #0
 8003118:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800311c:	4833      	ldr	r0, [pc, #204]	; (80031ec <MX_GPIO_Init+0x1d8>)
 800311e:	f006 fb8f 	bl	8009840 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ENB1_GPIO_Port, ENB1_Pin, GPIO_PIN_RESET);
 8003122:	2200      	movs	r2, #0
 8003124:	2101      	movs	r1, #1
 8003126:	4832      	ldr	r0, [pc, #200]	; (80031f0 <MX_GPIO_Init+0x1dc>)
 8003128:	f006 fb8a 	bl	8009840 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : ENC_EXT3_B_Pin ENC_EXT1_A_Pin ENC_EXT2_A_Pin ENC_EXT3_A_Pin
	 ENC_EXT2_B_Pin */
	GPIO_InitStruct.Pin = ENC_EXT3_B_Pin | ENC_EXT1_A_Pin | ENC_EXT2_A_Pin
 800312c:	f64b 0308 	movw	r3, #47112	; 0xb808
 8003130:	627b      	str	r3, [r7, #36]	; 0x24
			| ENC_EXT3_A_Pin | ENC_EXT2_B_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003132:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003136:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003138:	2301      	movs	r3, #1
 800313a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800313c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003140:	4619      	mov	r1, r3
 8003142:	482c      	ldr	r0, [pc, #176]	; (80031f4 <MX_GPIO_Init+0x1e0>)
 8003144:	f006 f9b8 	bl	80094b8 <HAL_GPIO_Init>

	/*Configure GPIO pins : ENB2_Pin ENB3_Pin ENB4_Pin */
	GPIO_InitStruct.Pin = ENB2_Pin | ENB3_Pin | ENB4_Pin;
 8003148:	f241 4302 	movw	r3, #5122	; 0x1402
 800314c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800314e:	2301      	movs	r3, #1
 8003150:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003152:	2300      	movs	r3, #0
 8003154:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003156:	2300      	movs	r3, #0
 8003158:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800315a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800315e:	4619      	mov	r1, r3
 8003160:	4821      	ldr	r0, [pc, #132]	; (80031e8 <MX_GPIO_Init+0x1d4>)
 8003162:	f006 f9a9 	bl	80094b8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD_RED_Pin */
	GPIO_InitStruct.Pin = LD_RED_Pin;
 8003166:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800316a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800316c:	2301      	movs	r3, #1
 800316e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003170:	2300      	movs	r3, #0
 8003172:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003174:	2300      	movs	r3, #0
 8003176:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(LD_RED_GPIO_Port, &GPIO_InitStruct);
 8003178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800317c:	4619      	mov	r1, r3
 800317e:	481b      	ldr	r0, [pc, #108]	; (80031ec <MX_GPIO_Init+0x1d8>)
 8003180:	f006 f99a 	bl	80094b8 <HAL_GPIO_Init>

	/*Configure GPIO pin : ENB1_Pin */
	GPIO_InitStruct.Pin = ENB1_Pin;
 8003184:	2301      	movs	r3, #1
 8003186:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003188:	2301      	movs	r3, #1
 800318a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318c:	2300      	movs	r3, #0
 800318e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003190:	2300      	movs	r3, #0
 8003192:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(ENB1_GPIO_Port, &GPIO_InitStruct);
 8003194:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003198:	4619      	mov	r1, r3
 800319a:	4815      	ldr	r0, [pc, #84]	; (80031f0 <MX_GPIO_Init+0x1dc>)
 800319c:	f006 f98c 	bl	80094b8 <HAL_GPIO_Init>

	/*Configure GPIO pin : ENC_EXT1_B_Pin */
	GPIO_InitStruct.Pin = ENC_EXT1_B_Pin;
 80031a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80031a4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80031a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80031aa:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031ac:	2301      	movs	r3, #1
 80031ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(ENC_EXT1_B_GPIO_Port, &GPIO_InitStruct);
 80031b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031b4:	4619      	mov	r1, r3
 80031b6:	480c      	ldr	r0, [pc, #48]	; (80031e8 <MX_GPIO_Init+0x1d4>)
 80031b8:	f006 f97e 	bl	80094b8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80031bc:	2200      	movs	r2, #0
 80031be:	2105      	movs	r1, #5
 80031c0:	2009      	movs	r0, #9
 80031c2:	f005 fd4d 	bl	8008c60 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80031c6:	2009      	movs	r0, #9
 80031c8:	f005 fd66 	bl	8008c98 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80031cc:	2200      	movs	r2, #0
 80031ce:	2105      	movs	r1, #5
 80031d0:	2028      	movs	r0, #40	; 0x28
 80031d2:	f005 fd45 	bl	8008c60 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80031d6:	2028      	movs	r0, #40	; 0x28
 80031d8:	f005 fd5e 	bl	8008c98 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80031dc:	bf00      	nop
 80031de:	3738      	adds	r7, #56	; 0x38
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40023800 	.word	0x40023800
 80031e8:	40021800 	.word	0x40021800
 80031ec:	40020400 	.word	0x40020400
 80031f0:	40020c00 	.word	0x40020c00
 80031f4:	40021400 	.word	0x40021400

080031f8 <imuCallback>:

/* USER CODE BEGIN 4 */

int imuCallback(int degree) {
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
	int theta = 0;
 8003200:	2300      	movs	r3, #0
 8003202:	60fb      	str	r3, [r7, #12]
	int z = degree;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	60bb      	str	r3, [r7, #8]
	if (z > 180)
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	2bb4      	cmp	r3, #180	; 0xb4
 800320c:	dd03      	ble.n	8003216 <imuCallback+0x1e>
		z -= 360;
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003214:	60bb      	str	r3, [r7, #8]
	if (yawRef > 180)
 8003216:	4b13      	ldr	r3, [pc, #76]	; (8003264 <imuCallback+0x6c>)
 8003218:	f9b3 3000 	ldrsh.w	r3, [r3]
 800321c:	2bb4      	cmp	r3, #180	; 0xb4
 800321e:	dd02      	ble.n	8003226 <imuCallback+0x2e>
		yawRef -= yawRef;
 8003220:	4b10      	ldr	r3, [pc, #64]	; (8003264 <imuCallback+0x6c>)
 8003222:	2200      	movs	r2, #0
 8003224:	801a      	strh	r2, [r3, #0]
	theta = -z + yawRef;
 8003226:	4b0f      	ldr	r3, [pc, #60]	; (8003264 <imuCallback+0x6c>)
 8003228:	f9b3 3000 	ldrsh.w	r3, [r3]
 800322c:	461a      	mov	r2, r3
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	60fb      	str	r3, [r7, #12]
	if (theta < -180)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 800323a:	da04      	bge.n	8003246 <imuCallback+0x4e>
		theta += 360;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	e006      	b.n	8003254 <imuCallback+0x5c>
	else if (theta > 180)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2bb4      	cmp	r3, #180	; 0xb4
 800324a:	dd03      	ble.n	8003254 <imuCallback+0x5c>
		theta -= 360;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003252:	60fb      	str	r3, [r7, #12]

	return theta;
 8003254:	68fb      	ldr	r3, [r7, #12]
}
 8003256:	4618      	mov	r0, r3
 8003258:	3714      	adds	r7, #20
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	20000a5c 	.word	0x20000a5c

08003268 <initializeMotor>:

void initializeMotor() {
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800326c:	2100      	movs	r1, #0
 800326e:	481b      	ldr	r0, [pc, #108]	; (80032dc <initializeMotor+0x74>)
 8003270:	f008 f94c 	bl	800b50c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003274:	2104      	movs	r1, #4
 8003276:	4819      	ldr	r0, [pc, #100]	; (80032dc <initializeMotor+0x74>)
 8003278:	f008 f948 	bl	800b50c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800327c:	2108      	movs	r1, #8
 800327e:	4817      	ldr	r0, [pc, #92]	; (80032dc <initializeMotor+0x74>)
 8003280:	f008 f944 	bl	800b50c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8003284:	210c      	movs	r1, #12
 8003286:	4815      	ldr	r0, [pc, #84]	; (80032dc <initializeMotor+0x74>)
 8003288:	f008 f940 	bl	800b50c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800328c:	2100      	movs	r1, #0
 800328e:	4814      	ldr	r0, [pc, #80]	; (80032e0 <initializeMotor+0x78>)
 8003290:	f008 f93c 	bl	800b50c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003294:	2104      	movs	r1, #4
 8003296:	4812      	ldr	r0, [pc, #72]	; (80032e0 <initializeMotor+0x78>)
 8003298:	f008 f938 	bl	800b50c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800329c:	2108      	movs	r1, #8
 800329e:	4810      	ldr	r0, [pc, #64]	; (80032e0 <initializeMotor+0x78>)
 80032a0:	f008 f934 	bl	800b50c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80032a4:	210c      	movs	r1, #12
 80032a6:	480e      	ldr	r0, [pc, #56]	; (80032e0 <initializeMotor+0x78>)
 80032a8:	f008 f930 	bl	800b50c <HAL_TIM_PWM_Start>

	HAL_GPIO_WritePin(ENB1_GPIO_Port, ENB1_Pin, GPIO_PIN_SET);
 80032ac:	2201      	movs	r2, #1
 80032ae:	2101      	movs	r1, #1
 80032b0:	480c      	ldr	r0, [pc, #48]	; (80032e4 <initializeMotor+0x7c>)
 80032b2:	f006 fac5 	bl	8009840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENB2_GPIO_Port, ENB2_Pin, GPIO_PIN_SET);
 80032b6:	2201      	movs	r2, #1
 80032b8:	2102      	movs	r1, #2
 80032ba:	480b      	ldr	r0, [pc, #44]	; (80032e8 <initializeMotor+0x80>)
 80032bc:	f006 fac0 	bl	8009840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENB3_GPIO_Port, ENB3_Pin, GPIO_PIN_SET);
 80032c0:	2201      	movs	r2, #1
 80032c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80032c6:	4808      	ldr	r0, [pc, #32]	; (80032e8 <initializeMotor+0x80>)
 80032c8:	f006 faba 	bl	8009840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENB4_GPIO_Port, ENB4_Pin, GPIO_PIN_SET);
 80032cc:	2201      	movs	r2, #1
 80032ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032d2:	4805      	ldr	r0, [pc, #20]	; (80032e8 <initializeMotor+0x80>)
 80032d4:	f006 fab4 	bl	8009840 <HAL_GPIO_WritePin>
}
 80032d8:	bf00      	nop
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	200003c4 	.word	0x200003c4
 80032e0:	2000040c 	.word	0x2000040c
 80032e4:	40020c00 	.word	0x40020c00
 80032e8:	40021800 	.word	0x40021800

080032ec <setPwm>:

void setPwm(uint8_t Motor, int pwm) {
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	4603      	mov	r3, r0
 80032f4:	6039      	str	r1, [r7, #0]
 80032f6:	71fb      	strb	r3, [r7, #7]
	switch (Motor) {
 80032f8:	79fb      	ldrb	r3, [r7, #7]
 80032fa:	2b03      	cmp	r3, #3
 80032fc:	f200 8088 	bhi.w	8003410 <setPwm+0x124>
 8003300:	a201      	add	r2, pc, #4	; (adr r2, 8003308 <setPwm+0x1c>)
 8003302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003306:	bf00      	nop
 8003308:	08003319 	.word	0x08003319
 800330c:	08003357 	.word	0x08003357
 8003310:	08003395 	.word	0x08003395
 8003314:	080033d3 	.word	0x080033d3
	case 0: // LEFT FRONT
		if (pwm > 0) {
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	2b00      	cmp	r3, #0
 800331c:	dd06      	ble.n	800332c <setPwm+0x40>
			TIM3->CCR1 = pwm;
 800331e:	4a4c      	ldr	r2, [pc, #304]	; (8003450 <setPwm+0x164>)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	6353      	str	r3, [r2, #52]	; 0x34
			TIM3->CCR4 = 0;
 8003324:	4b4a      	ldr	r3, [pc, #296]	; (8003450 <setPwm+0x164>)
 8003326:	2200      	movs	r2, #0
 8003328:	641a      	str	r2, [r3, #64]	; 0x40
			TIM3->CCR4 = abs(pwm);
		} else {
			TIM3->CCR1 = 0;
			TIM3->CCR4 = 0;
		}
		break;
 800332a:	e08a      	b.n	8003442 <setPwm+0x156>
		} else if (pwm < 0) {
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	da0a      	bge.n	8003348 <setPwm+0x5c>
			TIM3->CCR1 = 0;
 8003332:	4b47      	ldr	r3, [pc, #284]	; (8003450 <setPwm+0x164>)
 8003334:	2200      	movs	r2, #0
 8003336:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR4 = abs(pwm);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800333e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003342:	4b43      	ldr	r3, [pc, #268]	; (8003450 <setPwm+0x164>)
 8003344:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8003346:	e07c      	b.n	8003442 <setPwm+0x156>
			TIM3->CCR1 = 0;
 8003348:	4b41      	ldr	r3, [pc, #260]	; (8003450 <setPwm+0x164>)
 800334a:	2200      	movs	r2, #0
 800334c:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR4 = 0;
 800334e:	4b40      	ldr	r3, [pc, #256]	; (8003450 <setPwm+0x164>)
 8003350:	2200      	movs	r2, #0
 8003352:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8003354:	e075      	b.n	8003442 <setPwm+0x156>
	case 1: // LEFT BACK
		if (pwm > 0) {
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	dd06      	ble.n	800336a <setPwm+0x7e>
			TIM1->CCR1 = pwm;
 800335c:	4a3d      	ldr	r2, [pc, #244]	; (8003454 <setPwm+0x168>)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	6353      	str	r3, [r2, #52]	; 0x34
			TIM1->CCR2 = 0;
 8003362:	4b3c      	ldr	r3, [pc, #240]	; (8003454 <setPwm+0x168>)
 8003364:	2200      	movs	r2, #0
 8003366:	639a      	str	r2, [r3, #56]	; 0x38
		} else {
			TIM1->CCR1 = 0;
			TIM1->CCR2 = 0;
		}

		break;
 8003368:	e06b      	b.n	8003442 <setPwm+0x156>
		} else if (pwm < 0) {
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	da0a      	bge.n	8003386 <setPwm+0x9a>
			TIM1->CCR1 = 0;
 8003370:	4b38      	ldr	r3, [pc, #224]	; (8003454 <setPwm+0x168>)
 8003372:	2200      	movs	r2, #0
 8003374:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = abs(pwm);
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800337c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003380:	4b34      	ldr	r3, [pc, #208]	; (8003454 <setPwm+0x168>)
 8003382:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8003384:	e05d      	b.n	8003442 <setPwm+0x156>
			TIM1->CCR1 = 0;
 8003386:	4b33      	ldr	r3, [pc, #204]	; (8003454 <setPwm+0x168>)
 8003388:	2200      	movs	r2, #0
 800338a:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = 0;
 800338c:	4b31      	ldr	r3, [pc, #196]	; (8003454 <setPwm+0x168>)
 800338e:	2200      	movs	r2, #0
 8003390:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8003392:	e056      	b.n	8003442 <setPwm+0x156>
	case 2: // RIGHT BACK
		if (pwm > 0) {
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	dd06      	ble.n	80033a8 <setPwm+0xbc>
			TIM1->CCR3 = 0;
 800339a:	4b2e      	ldr	r3, [pc, #184]	; (8003454 <setPwm+0x168>)
 800339c:	2200      	movs	r2, #0
 800339e:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM1->CCR4 = pwm;
 80033a0:	4a2c      	ldr	r2, [pc, #176]	; (8003454 <setPwm+0x168>)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	6413      	str	r3, [r2, #64]	; 0x40
		} else {
			TIM1->CCR3 = 0;
			TIM1->CCR4 = 0;
		}

		break;
 80033a6:	e04c      	b.n	8003442 <setPwm+0x156>
		} else if (pwm < 0) {
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	da0a      	bge.n	80033c4 <setPwm+0xd8>
			TIM1->CCR3 = abs(pwm);
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80033b4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80033b8:	4b26      	ldr	r3, [pc, #152]	; (8003454 <setPwm+0x168>)
 80033ba:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM1->CCR4 = 0;
 80033bc:	4b25      	ldr	r3, [pc, #148]	; (8003454 <setPwm+0x168>)
 80033be:	2200      	movs	r2, #0
 80033c0:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 80033c2:	e03e      	b.n	8003442 <setPwm+0x156>
			TIM1->CCR3 = 0;
 80033c4:	4b23      	ldr	r3, [pc, #140]	; (8003454 <setPwm+0x168>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM1->CCR4 = 0;
 80033ca:	4b22      	ldr	r3, [pc, #136]	; (8003454 <setPwm+0x168>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 80033d0:	e037      	b.n	8003442 <setPwm+0x156>
	case 3: // RIGHT FRONT
		if (pwm > 0) {
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	dd06      	ble.n	80033e6 <setPwm+0xfa>
			TIM3->CCR2 = pwm;
 80033d8:	4a1d      	ldr	r2, [pc, #116]	; (8003450 <setPwm+0x164>)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	6393      	str	r3, [r2, #56]	; 0x38
			TIM3->CCR3 = 0;
 80033de:	4b1c      	ldr	r3, [pc, #112]	; (8003450 <setPwm+0x164>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM3->CCR3 = abs(pwm);
		} else {
			TIM3->CCR2 = 0;
			TIM3->CCR3 = 0;
		}
		break;
 80033e4:	e02d      	b.n	8003442 <setPwm+0x156>
		} else if (pwm < 0) {
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	da0a      	bge.n	8003402 <setPwm+0x116>
			TIM3->CCR2 = 0;
 80033ec:	4b18      	ldr	r3, [pc, #96]	; (8003450 <setPwm+0x164>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3->CCR3 = abs(pwm);
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80033f8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80033fc:	4b14      	ldr	r3, [pc, #80]	; (8003450 <setPwm+0x164>)
 80033fe:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8003400:	e01f      	b.n	8003442 <setPwm+0x156>
			TIM3->CCR2 = 0;
 8003402:	4b13      	ldr	r3, [pc, #76]	; (8003450 <setPwm+0x164>)
 8003404:	2200      	movs	r2, #0
 8003406:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3->CCR3 = 0;
 8003408:	4b11      	ldr	r3, [pc, #68]	; (8003450 <setPwm+0x164>)
 800340a:	2200      	movs	r2, #0
 800340c:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 800340e:	e018      	b.n	8003442 <setPwm+0x156>

	default:
		TIM1->CCR1 = 0;
 8003410:	4b10      	ldr	r3, [pc, #64]	; (8003454 <setPwm+0x168>)
 8003412:	2200      	movs	r2, #0
 8003414:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8003416:	4b0f      	ldr	r3, [pc, #60]	; (8003454 <setPwm+0x168>)
 8003418:	2200      	movs	r2, #0
 800341a:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 800341c:	4b0d      	ldr	r3, [pc, #52]	; (8003454 <setPwm+0x168>)
 800341e:	2200      	movs	r2, #0
 8003420:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR4 = 0;
 8003422:	4b0c      	ldr	r3, [pc, #48]	; (8003454 <setPwm+0x168>)
 8003424:	2200      	movs	r2, #0
 8003426:	641a      	str	r2, [r3, #64]	; 0x40
		TIM3->CCR1 = 0;
 8003428:	4b09      	ldr	r3, [pc, #36]	; (8003450 <setPwm+0x164>)
 800342a:	2200      	movs	r2, #0
 800342c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = 0;
 800342e:	4b08      	ldr	r3, [pc, #32]	; (8003450 <setPwm+0x164>)
 8003430:	2200      	movs	r2, #0
 8003432:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = 0;
 8003434:	4b06      	ldr	r3, [pc, #24]	; (8003450 <setPwm+0x164>)
 8003436:	2200      	movs	r2, #0
 8003438:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM3->CCR4 = 0;
 800343a:	4b05      	ldr	r3, [pc, #20]	; (8003450 <setPwm+0x164>)
 800343c:	2200      	movs	r2, #0
 800343e:	641a      	str	r2, [r3, #64]	; 0x40
	}
}
 8003440:	bf00      	nop
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	40000400 	.word	0x40000400
 8003454:	40010000 	.word	0x40010000

08003458 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	4603      	mov	r3, r0
 8003460:	80fb      	strh	r3, [r7, #6]
	//Encoder External 1
	if (GPIO_Pin == ENC_EXT1_A_Pin) {
 8003462:	88fb      	ldrh	r3, [r7, #6]
 8003464:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003468:	d152      	bne.n	8003510 <HAL_GPIO_EXTI_Callback+0xb8>
		if ((ENC1B_HIGH && ENC1A_LOW) || (ENC1B_LOW && ENC1A_HIGH)) {
 800346a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800346e:	4896      	ldr	r0, [pc, #600]	; (80036c8 <HAL_GPIO_EXTI_Callback+0x270>)
 8003470:	f006 f9ce 	bl	8009810 <HAL_GPIO_ReadPin>
 8003474:	4603      	mov	r3, r0
 8003476:	2b01      	cmp	r3, #1
 8003478:	d107      	bne.n	800348a <HAL_GPIO_EXTI_Callback+0x32>
 800347a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800347e:	4893      	ldr	r0, [pc, #588]	; (80036cc <HAL_GPIO_EXTI_Callback+0x274>)
 8003480:	f006 f9c6 	bl	8009810 <HAL_GPIO_ReadPin>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00f      	beq.n	80034aa <HAL_GPIO_EXTI_Callback+0x52>
 800348a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800348e:	488e      	ldr	r0, [pc, #568]	; (80036c8 <HAL_GPIO_EXTI_Callback+0x270>)
 8003490:	f006 f9be 	bl	8009810 <HAL_GPIO_ReadPin>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d111      	bne.n	80034be <HAL_GPIO_EXTI_Callback+0x66>
 800349a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800349e:	488b      	ldr	r0, [pc, #556]	; (80036cc <HAL_GPIO_EXTI_Callback+0x274>)
 80034a0:	f006 f9b6 	bl	8009810 <HAL_GPIO_ReadPin>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d109      	bne.n	80034be <HAL_GPIO_EXTI_Callback+0x66>
			valueENC_EXT[0]--;
 80034aa:	4b89      	ldr	r3, [pc, #548]	; (80036d0 <HAL_GPIO_EXTI_Callback+0x278>)
 80034ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	3b01      	subs	r3, #1
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	b21a      	sxth	r2, r3
 80034b8:	4b85      	ldr	r3, [pc, #532]	; (80036d0 <HAL_GPIO_EXTI_Callback+0x278>)
 80034ba:	801a      	strh	r2, [r3, #0]
 80034bc:	e028      	b.n	8003510 <HAL_GPIO_EXTI_Callback+0xb8>
		} else if ((ENC1B_HIGH && ENC1A_HIGH) || (ENC1B_LOW && ENC1A_LOW)) {
 80034be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034c2:	4881      	ldr	r0, [pc, #516]	; (80036c8 <HAL_GPIO_EXTI_Callback+0x270>)
 80034c4:	f006 f9a4 	bl	8009810 <HAL_GPIO_ReadPin>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d107      	bne.n	80034de <HAL_GPIO_EXTI_Callback+0x86>
 80034ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80034d2:	487e      	ldr	r0, [pc, #504]	; (80036cc <HAL_GPIO_EXTI_Callback+0x274>)
 80034d4:	f006 f99c 	bl	8009810 <HAL_GPIO_ReadPin>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d00f      	beq.n	80034fe <HAL_GPIO_EXTI_Callback+0xa6>
 80034de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034e2:	4879      	ldr	r0, [pc, #484]	; (80036c8 <HAL_GPIO_EXTI_Callback+0x270>)
 80034e4:	f006 f994 	bl	8009810 <HAL_GPIO_ReadPin>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d110      	bne.n	8003510 <HAL_GPIO_EXTI_Callback+0xb8>
 80034ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80034f2:	4876      	ldr	r0, [pc, #472]	; (80036cc <HAL_GPIO_EXTI_Callback+0x274>)
 80034f4:	f006 f98c 	bl	8009810 <HAL_GPIO_ReadPin>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d108      	bne.n	8003510 <HAL_GPIO_EXTI_Callback+0xb8>
			valueENC_EXT[0]++;
 80034fe:	4b74      	ldr	r3, [pc, #464]	; (80036d0 <HAL_GPIO_EXTI_Callback+0x278>)
 8003500:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003504:	b29b      	uxth	r3, r3
 8003506:	3301      	adds	r3, #1
 8003508:	b29b      	uxth	r3, r3
 800350a:	b21a      	sxth	r2, r3
 800350c:	4b70      	ldr	r3, [pc, #448]	; (80036d0 <HAL_GPIO_EXTI_Callback+0x278>)
 800350e:	801a      	strh	r2, [r3, #0]
		}
	}

	if (GPIO_Pin == ENC_EXT1_B_Pin) {
 8003510:	88fb      	ldrh	r3, [r7, #6]
 8003512:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003516:	d152      	bne.n	80035be <HAL_GPIO_EXTI_Callback+0x166>
		if ((ENC1B_HIGH && ENC1A_HIGH) || (ENC1B_LOW && ENC1A_LOW)) {
 8003518:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800351c:	486a      	ldr	r0, [pc, #424]	; (80036c8 <HAL_GPIO_EXTI_Callback+0x270>)
 800351e:	f006 f977 	bl	8009810 <HAL_GPIO_ReadPin>
 8003522:	4603      	mov	r3, r0
 8003524:	2b01      	cmp	r3, #1
 8003526:	d107      	bne.n	8003538 <HAL_GPIO_EXTI_Callback+0xe0>
 8003528:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800352c:	4867      	ldr	r0, [pc, #412]	; (80036cc <HAL_GPIO_EXTI_Callback+0x274>)
 800352e:	f006 f96f 	bl	8009810 <HAL_GPIO_ReadPin>
 8003532:	4603      	mov	r3, r0
 8003534:	2b01      	cmp	r3, #1
 8003536:	d00f      	beq.n	8003558 <HAL_GPIO_EXTI_Callback+0x100>
 8003538:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800353c:	4862      	ldr	r0, [pc, #392]	; (80036c8 <HAL_GPIO_EXTI_Callback+0x270>)
 800353e:	f006 f967 	bl	8009810 <HAL_GPIO_ReadPin>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d111      	bne.n	800356c <HAL_GPIO_EXTI_Callback+0x114>
 8003548:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800354c:	485f      	ldr	r0, [pc, #380]	; (80036cc <HAL_GPIO_EXTI_Callback+0x274>)
 800354e:	f006 f95f 	bl	8009810 <HAL_GPIO_ReadPin>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d109      	bne.n	800356c <HAL_GPIO_EXTI_Callback+0x114>
			valueENC_EXT[0]--;
 8003558:	4b5d      	ldr	r3, [pc, #372]	; (80036d0 <HAL_GPIO_EXTI_Callback+0x278>)
 800355a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800355e:	b29b      	uxth	r3, r3
 8003560:	3b01      	subs	r3, #1
 8003562:	b29b      	uxth	r3, r3
 8003564:	b21a      	sxth	r2, r3
 8003566:	4b5a      	ldr	r3, [pc, #360]	; (80036d0 <HAL_GPIO_EXTI_Callback+0x278>)
 8003568:	801a      	strh	r2, [r3, #0]
 800356a:	e028      	b.n	80035be <HAL_GPIO_EXTI_Callback+0x166>
		} else if ((ENC1B_LOW && ENC1A_HIGH) || (ENC1B_HIGH && ENC1A_LOW)) {
 800356c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003570:	4855      	ldr	r0, [pc, #340]	; (80036c8 <HAL_GPIO_EXTI_Callback+0x270>)
 8003572:	f006 f94d 	bl	8009810 <HAL_GPIO_ReadPin>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d107      	bne.n	800358c <HAL_GPIO_EXTI_Callback+0x134>
 800357c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003580:	4852      	ldr	r0, [pc, #328]	; (80036cc <HAL_GPIO_EXTI_Callback+0x274>)
 8003582:	f006 f945 	bl	8009810 <HAL_GPIO_ReadPin>
 8003586:	4603      	mov	r3, r0
 8003588:	2b01      	cmp	r3, #1
 800358a:	d00f      	beq.n	80035ac <HAL_GPIO_EXTI_Callback+0x154>
 800358c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003590:	484d      	ldr	r0, [pc, #308]	; (80036c8 <HAL_GPIO_EXTI_Callback+0x270>)
 8003592:	f006 f93d 	bl	8009810 <HAL_GPIO_ReadPin>
 8003596:	4603      	mov	r3, r0
 8003598:	2b01      	cmp	r3, #1
 800359a:	d110      	bne.n	80035be <HAL_GPIO_EXTI_Callback+0x166>
 800359c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80035a0:	484a      	ldr	r0, [pc, #296]	; (80036cc <HAL_GPIO_EXTI_Callback+0x274>)
 80035a2:	f006 f935 	bl	8009810 <HAL_GPIO_ReadPin>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d108      	bne.n	80035be <HAL_GPIO_EXTI_Callback+0x166>
			valueENC_EXT[0]++;
 80035ac:	4b48      	ldr	r3, [pc, #288]	; (80036d0 <HAL_GPIO_EXTI_Callback+0x278>)
 80035ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	3301      	adds	r3, #1
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	b21a      	sxth	r2, r3
 80035ba:	4b45      	ldr	r3, [pc, #276]	; (80036d0 <HAL_GPIO_EXTI_Callback+0x278>)
 80035bc:	801a      	strh	r2, [r3, #0]
		}
	}
	//Encoder External 2
	if (GPIO_Pin == ENC_EXT2_A_Pin) {
 80035be:	88fb      	ldrh	r3, [r7, #6]
 80035c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035c4:	d152      	bne.n	800366c <HAL_GPIO_EXTI_Callback+0x214>
		if ((ENC2B_HIGH && ENC2A_LOW) || (ENC2B_LOW && ENC2A_HIGH)) {
 80035c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035ca:	4840      	ldr	r0, [pc, #256]	; (80036cc <HAL_GPIO_EXTI_Callback+0x274>)
 80035cc:	f006 f920 	bl	8009810 <HAL_GPIO_ReadPin>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d107      	bne.n	80035e6 <HAL_GPIO_EXTI_Callback+0x18e>
 80035d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035da:	483c      	ldr	r0, [pc, #240]	; (80036cc <HAL_GPIO_EXTI_Callback+0x274>)
 80035dc:	f006 f918 	bl	8009810 <HAL_GPIO_ReadPin>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00f      	beq.n	8003606 <HAL_GPIO_EXTI_Callback+0x1ae>
 80035e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035ea:	4838      	ldr	r0, [pc, #224]	; (80036cc <HAL_GPIO_EXTI_Callback+0x274>)
 80035ec:	f006 f910 	bl	8009810 <HAL_GPIO_ReadPin>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d111      	bne.n	800361a <HAL_GPIO_EXTI_Callback+0x1c2>
 80035f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035fa:	4834      	ldr	r0, [pc, #208]	; (80036cc <HAL_GPIO_EXTI_Callback+0x274>)
 80035fc:	f006 f908 	bl	8009810 <HAL_GPIO_ReadPin>
 8003600:	4603      	mov	r3, r0
 8003602:	2b01      	cmp	r3, #1
 8003604:	d109      	bne.n	800361a <HAL_GPIO_EXTI_Callback+0x1c2>
			valueENC_EXT[1]--;
 8003606:	4b32      	ldr	r3, [pc, #200]	; (80036d0 <HAL_GPIO_EXTI_Callback+0x278>)
 8003608:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800360c:	b29b      	uxth	r3, r3
 800360e:	3b01      	subs	r3, #1
 8003610:	b29b      	uxth	r3, r3
 8003612:	b21a      	sxth	r2, r3
 8003614:	4b2e      	ldr	r3, [pc, #184]	; (80036d0 <HAL_GPIO_EXTI_Callback+0x278>)
 8003616:	805a      	strh	r2, [r3, #2]
 8003618:	e028      	b.n	800366c <HAL_GPIO_EXTI_Callback+0x214>
		} else if ((ENC2B_HIGH && ENC2A_HIGH) || (ENC2B_LOW && ENC2A_LOW)) {
 800361a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800361e:	482b      	ldr	r0, [pc, #172]	; (80036cc <HAL_GPIO_EXTI_Callback+0x274>)
 8003620:	f006 f8f6 	bl	8009810 <HAL_GPIO_ReadPin>
 8003624:	4603      	mov	r3, r0
 8003626:	2b01      	cmp	r3, #1
 8003628:	d107      	bne.n	800363a <HAL_GPIO_EXTI_Callback+0x1e2>
 800362a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800362e:	4827      	ldr	r0, [pc, #156]	; (80036cc <HAL_GPIO_EXTI_Callback+0x274>)
 8003630:	f006 f8ee 	bl	8009810 <HAL_GPIO_ReadPin>
 8003634:	4603      	mov	r3, r0
 8003636:	2b01      	cmp	r3, #1
 8003638:	d00f      	beq.n	800365a <HAL_GPIO_EXTI_Callback+0x202>
 800363a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800363e:	4823      	ldr	r0, [pc, #140]	; (80036cc <HAL_GPIO_EXTI_Callback+0x274>)
 8003640:	f006 f8e6 	bl	8009810 <HAL_GPIO_ReadPin>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d110      	bne.n	800366c <HAL_GPIO_EXTI_Callback+0x214>
 800364a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800364e:	481f      	ldr	r0, [pc, #124]	; (80036cc <HAL_GPIO_EXTI_Callback+0x274>)
 8003650:	f006 f8de 	bl	8009810 <HAL_GPIO_ReadPin>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d108      	bne.n	800366c <HAL_GPIO_EXTI_Callback+0x214>
			valueENC_EXT[1]++;
 800365a:	4b1d      	ldr	r3, [pc, #116]	; (80036d0 <HAL_GPIO_EXTI_Callback+0x278>)
 800365c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003660:	b29b      	uxth	r3, r3
 8003662:	3301      	adds	r3, #1
 8003664:	b29b      	uxth	r3, r3
 8003666:	b21a      	sxth	r2, r3
 8003668:	4b19      	ldr	r3, [pc, #100]	; (80036d0 <HAL_GPIO_EXTI_Callback+0x278>)
 800366a:	805a      	strh	r2, [r3, #2]
		}
	}

	if (GPIO_Pin == ENC_EXT2_B_Pin) {
 800366c:	88fb      	ldrh	r3, [r7, #6]
 800366e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003672:	d158      	bne.n	8003726 <HAL_GPIO_EXTI_Callback+0x2ce>
		if ((ENC2B_HIGH && ENC2A_HIGH) || (ENC2B_LOW && ENC2A_LOW)) {
 8003674:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003678:	4814      	ldr	r0, [pc, #80]	; (80036cc <HAL_GPIO_EXTI_Callback+0x274>)
 800367a:	f006 f8c9 	bl	8009810 <HAL_GPIO_ReadPin>
 800367e:	4603      	mov	r3, r0
 8003680:	2b01      	cmp	r3, #1
 8003682:	d107      	bne.n	8003694 <HAL_GPIO_EXTI_Callback+0x23c>
 8003684:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003688:	4810      	ldr	r0, [pc, #64]	; (80036cc <HAL_GPIO_EXTI_Callback+0x274>)
 800368a:	f006 f8c1 	bl	8009810 <HAL_GPIO_ReadPin>
 800368e:	4603      	mov	r3, r0
 8003690:	2b01      	cmp	r3, #1
 8003692:	d00f      	beq.n	80036b4 <HAL_GPIO_EXTI_Callback+0x25c>
 8003694:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003698:	480c      	ldr	r0, [pc, #48]	; (80036cc <HAL_GPIO_EXTI_Callback+0x274>)
 800369a:	f006 f8b9 	bl	8009810 <HAL_GPIO_ReadPin>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d117      	bne.n	80036d4 <HAL_GPIO_EXTI_Callback+0x27c>
 80036a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80036a8:	4808      	ldr	r0, [pc, #32]	; (80036cc <HAL_GPIO_EXTI_Callback+0x274>)
 80036aa:	f006 f8b1 	bl	8009810 <HAL_GPIO_ReadPin>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10f      	bne.n	80036d4 <HAL_GPIO_EXTI_Callback+0x27c>
			valueENC_EXT[1]--;
 80036b4:	4b06      	ldr	r3, [pc, #24]	; (80036d0 <HAL_GPIO_EXTI_Callback+0x278>)
 80036b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29b      	uxth	r3, r3
 80036c0:	b21a      	sxth	r2, r3
 80036c2:	4b03      	ldr	r3, [pc, #12]	; (80036d0 <HAL_GPIO_EXTI_Callback+0x278>)
 80036c4:	805a      	strh	r2, [r3, #2]
 80036c6:	e02e      	b.n	8003726 <HAL_GPIO_EXTI_Callback+0x2ce>
 80036c8:	40021800 	.word	0x40021800
 80036cc:	40021400 	.word	0x40021400
 80036d0:	20000a60 	.word	0x20000a60
		} else if ((ENC2B_LOW && ENC2A_HIGH) || (ENC2B_HIGH && ENC2A_LOW)) {
 80036d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036d8:	4867      	ldr	r0, [pc, #412]	; (8003878 <HAL_GPIO_EXTI_Callback+0x420>)
 80036da:	f006 f899 	bl	8009810 <HAL_GPIO_ReadPin>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d107      	bne.n	80036f4 <HAL_GPIO_EXTI_Callback+0x29c>
 80036e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80036e8:	4863      	ldr	r0, [pc, #396]	; (8003878 <HAL_GPIO_EXTI_Callback+0x420>)
 80036ea:	f006 f891 	bl	8009810 <HAL_GPIO_ReadPin>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d00f      	beq.n	8003714 <HAL_GPIO_EXTI_Callback+0x2bc>
 80036f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036f8:	485f      	ldr	r0, [pc, #380]	; (8003878 <HAL_GPIO_EXTI_Callback+0x420>)
 80036fa:	f006 f889 	bl	8009810 <HAL_GPIO_ReadPin>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b01      	cmp	r3, #1
 8003702:	d110      	bne.n	8003726 <HAL_GPIO_EXTI_Callback+0x2ce>
 8003704:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003708:	485b      	ldr	r0, [pc, #364]	; (8003878 <HAL_GPIO_EXTI_Callback+0x420>)
 800370a:	f006 f881 	bl	8009810 <HAL_GPIO_ReadPin>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d108      	bne.n	8003726 <HAL_GPIO_EXTI_Callback+0x2ce>
			valueENC_EXT[1]++;
 8003714:	4b59      	ldr	r3, [pc, #356]	; (800387c <HAL_GPIO_EXTI_Callback+0x424>)
 8003716:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800371a:	b29b      	uxth	r3, r3
 800371c:	3301      	adds	r3, #1
 800371e:	b29b      	uxth	r3, r3
 8003720:	b21a      	sxth	r2, r3
 8003722:	4b56      	ldr	r3, [pc, #344]	; (800387c <HAL_GPIO_EXTI_Callback+0x424>)
 8003724:	805a      	strh	r2, [r3, #2]
		}
	}
	//Encoder External 3
	if (GPIO_Pin == ENC_EXT3_A_Pin) {
 8003726:	88fb      	ldrh	r3, [r7, #6]
 8003728:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800372c:	d14e      	bne.n	80037cc <HAL_GPIO_EXTI_Callback+0x374>
		if ((ENC3B_HIGH && ENC3A_LOW) || (ENC3B_LOW && ENC3A_HIGH)) {
 800372e:	2108      	movs	r1, #8
 8003730:	4851      	ldr	r0, [pc, #324]	; (8003878 <HAL_GPIO_EXTI_Callback+0x420>)
 8003732:	f006 f86d 	bl	8009810 <HAL_GPIO_ReadPin>
 8003736:	4603      	mov	r3, r0
 8003738:	2b01      	cmp	r3, #1
 800373a:	d107      	bne.n	800374c <HAL_GPIO_EXTI_Callback+0x2f4>
 800373c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003740:	484d      	ldr	r0, [pc, #308]	; (8003878 <HAL_GPIO_EXTI_Callback+0x420>)
 8003742:	f006 f865 	bl	8009810 <HAL_GPIO_ReadPin>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00e      	beq.n	800376a <HAL_GPIO_EXTI_Callback+0x312>
 800374c:	2108      	movs	r1, #8
 800374e:	484a      	ldr	r0, [pc, #296]	; (8003878 <HAL_GPIO_EXTI_Callback+0x420>)
 8003750:	f006 f85e 	bl	8009810 <HAL_GPIO_ReadPin>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d111      	bne.n	800377e <HAL_GPIO_EXTI_Callback+0x326>
 800375a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800375e:	4846      	ldr	r0, [pc, #280]	; (8003878 <HAL_GPIO_EXTI_Callback+0x420>)
 8003760:	f006 f856 	bl	8009810 <HAL_GPIO_ReadPin>
 8003764:	4603      	mov	r3, r0
 8003766:	2b01      	cmp	r3, #1
 8003768:	d109      	bne.n	800377e <HAL_GPIO_EXTI_Callback+0x326>
			valueENC_EXT[2]--;
 800376a:	4b44      	ldr	r3, [pc, #272]	; (800387c <HAL_GPIO_EXTI_Callback+0x424>)
 800376c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003770:	b29b      	uxth	r3, r3
 8003772:	3b01      	subs	r3, #1
 8003774:	b29b      	uxth	r3, r3
 8003776:	b21a      	sxth	r2, r3
 8003778:	4b40      	ldr	r3, [pc, #256]	; (800387c <HAL_GPIO_EXTI_Callback+0x424>)
 800377a:	809a      	strh	r2, [r3, #4]
 800377c:	e026      	b.n	80037cc <HAL_GPIO_EXTI_Callback+0x374>
		} else if ((ENC3B_HIGH && ENC3A_HIGH) || (ENC3B_LOW && ENC3A_LOW)) {
 800377e:	2108      	movs	r1, #8
 8003780:	483d      	ldr	r0, [pc, #244]	; (8003878 <HAL_GPIO_EXTI_Callback+0x420>)
 8003782:	f006 f845 	bl	8009810 <HAL_GPIO_ReadPin>
 8003786:	4603      	mov	r3, r0
 8003788:	2b01      	cmp	r3, #1
 800378a:	d107      	bne.n	800379c <HAL_GPIO_EXTI_Callback+0x344>
 800378c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003790:	4839      	ldr	r0, [pc, #228]	; (8003878 <HAL_GPIO_EXTI_Callback+0x420>)
 8003792:	f006 f83d 	bl	8009810 <HAL_GPIO_ReadPin>
 8003796:	4603      	mov	r3, r0
 8003798:	2b01      	cmp	r3, #1
 800379a:	d00e      	beq.n	80037ba <HAL_GPIO_EXTI_Callback+0x362>
 800379c:	2108      	movs	r1, #8
 800379e:	4836      	ldr	r0, [pc, #216]	; (8003878 <HAL_GPIO_EXTI_Callback+0x420>)
 80037a0:	f006 f836 	bl	8009810 <HAL_GPIO_ReadPin>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d110      	bne.n	80037cc <HAL_GPIO_EXTI_Callback+0x374>
 80037aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80037ae:	4832      	ldr	r0, [pc, #200]	; (8003878 <HAL_GPIO_EXTI_Callback+0x420>)
 80037b0:	f006 f82e 	bl	8009810 <HAL_GPIO_ReadPin>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d108      	bne.n	80037cc <HAL_GPIO_EXTI_Callback+0x374>
			valueENC_EXT[2]++;
 80037ba:	4b30      	ldr	r3, [pc, #192]	; (800387c <HAL_GPIO_EXTI_Callback+0x424>)
 80037bc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	3301      	adds	r3, #1
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	b21a      	sxth	r2, r3
 80037c8:	4b2c      	ldr	r3, [pc, #176]	; (800387c <HAL_GPIO_EXTI_Callback+0x424>)
 80037ca:	809a      	strh	r2, [r3, #4]
		}
	}

	if (GPIO_Pin == ENC_EXT3_B_Pin) {
 80037cc:	88fb      	ldrh	r3, [r7, #6]
 80037ce:	2b08      	cmp	r3, #8
 80037d0:	d14e      	bne.n	8003870 <HAL_GPIO_EXTI_Callback+0x418>
		if ((ENC3B_HIGH && ENC3A_HIGH) || (ENC3B_LOW && ENC3A_LOW)) {
 80037d2:	2108      	movs	r1, #8
 80037d4:	4828      	ldr	r0, [pc, #160]	; (8003878 <HAL_GPIO_EXTI_Callback+0x420>)
 80037d6:	f006 f81b 	bl	8009810 <HAL_GPIO_ReadPin>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d107      	bne.n	80037f0 <HAL_GPIO_EXTI_Callback+0x398>
 80037e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80037e4:	4824      	ldr	r0, [pc, #144]	; (8003878 <HAL_GPIO_EXTI_Callback+0x420>)
 80037e6:	f006 f813 	bl	8009810 <HAL_GPIO_ReadPin>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d00e      	beq.n	800380e <HAL_GPIO_EXTI_Callback+0x3b6>
 80037f0:	2108      	movs	r1, #8
 80037f2:	4821      	ldr	r0, [pc, #132]	; (8003878 <HAL_GPIO_EXTI_Callback+0x420>)
 80037f4:	f006 f80c 	bl	8009810 <HAL_GPIO_ReadPin>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d111      	bne.n	8003822 <HAL_GPIO_EXTI_Callback+0x3ca>
 80037fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003802:	481d      	ldr	r0, [pc, #116]	; (8003878 <HAL_GPIO_EXTI_Callback+0x420>)
 8003804:	f006 f804 	bl	8009810 <HAL_GPIO_ReadPin>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d109      	bne.n	8003822 <HAL_GPIO_EXTI_Callback+0x3ca>
			valueENC_EXT[2]--;
 800380e:	4b1b      	ldr	r3, [pc, #108]	; (800387c <HAL_GPIO_EXTI_Callback+0x424>)
 8003810:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003814:	b29b      	uxth	r3, r3
 8003816:	3b01      	subs	r3, #1
 8003818:	b29b      	uxth	r3, r3
 800381a:	b21a      	sxth	r2, r3
 800381c:	4b17      	ldr	r3, [pc, #92]	; (800387c <HAL_GPIO_EXTI_Callback+0x424>)
 800381e:	809a      	strh	r2, [r3, #4]
		} else if ((ENC3B_LOW && ENC3A_HIGH) || (ENC3B_HIGH && ENC3A_LOW)) {
			valueENC_EXT[2]++;
		}
	}
}
 8003820:	e026      	b.n	8003870 <HAL_GPIO_EXTI_Callback+0x418>
		} else if ((ENC3B_LOW && ENC3A_HIGH) || (ENC3B_HIGH && ENC3A_LOW)) {
 8003822:	2108      	movs	r1, #8
 8003824:	4814      	ldr	r0, [pc, #80]	; (8003878 <HAL_GPIO_EXTI_Callback+0x420>)
 8003826:	f005 fff3 	bl	8009810 <HAL_GPIO_ReadPin>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d107      	bne.n	8003840 <HAL_GPIO_EXTI_Callback+0x3e8>
 8003830:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003834:	4810      	ldr	r0, [pc, #64]	; (8003878 <HAL_GPIO_EXTI_Callback+0x420>)
 8003836:	f005 ffeb 	bl	8009810 <HAL_GPIO_ReadPin>
 800383a:	4603      	mov	r3, r0
 800383c:	2b01      	cmp	r3, #1
 800383e:	d00e      	beq.n	800385e <HAL_GPIO_EXTI_Callback+0x406>
 8003840:	2108      	movs	r1, #8
 8003842:	480d      	ldr	r0, [pc, #52]	; (8003878 <HAL_GPIO_EXTI_Callback+0x420>)
 8003844:	f005 ffe4 	bl	8009810 <HAL_GPIO_ReadPin>
 8003848:	4603      	mov	r3, r0
 800384a:	2b01      	cmp	r3, #1
 800384c:	d110      	bne.n	8003870 <HAL_GPIO_EXTI_Callback+0x418>
 800384e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003852:	4809      	ldr	r0, [pc, #36]	; (8003878 <HAL_GPIO_EXTI_Callback+0x420>)
 8003854:	f005 ffdc 	bl	8009810 <HAL_GPIO_ReadPin>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d108      	bne.n	8003870 <HAL_GPIO_EXTI_Callback+0x418>
			valueENC_EXT[2]++;
 800385e:	4b07      	ldr	r3, [pc, #28]	; (800387c <HAL_GPIO_EXTI_Callback+0x424>)
 8003860:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003864:	b29b      	uxth	r3, r3
 8003866:	3301      	adds	r3, #1
 8003868:	b29b      	uxth	r3, r3
 800386a:	b21a      	sxth	r2, r3
 800386c:	4b03      	ldr	r3, [pc, #12]	; (800387c <HAL_GPIO_EXTI_Callback+0x424>)
 800386e:	809a      	strh	r2, [r3, #4]
}
 8003870:	bf00      	nop
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40021400 	.word	0x40021400
 800387c:	20000a60 	.word	0x20000a60

08003880 <StartDefaultTask>:
 * @brief  Function implementing the myTask01 thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8003880:	b590      	push	{r4, r7, lr}
 8003882:	b087      	sub	sp, #28
 8003884:	af00      	add	r7, sp, #0
 8003886:	6178      	str	r0, [r7, #20]
	/* USER CODE BEGIN 5 */
	initializeMotor();
 8003888:	f7ff fcee 	bl	8003268 <initializeMotor>
	vTaskDelay(10);
 800388c:	200a      	movs	r0, #10
 800388e:	f00b f83d 	bl	800e90c <vTaskDelay>
	stateInv = false;
 8003892:	4b2f      	ldr	r3, [pc, #188]	; (8003950 <StartDefaultTask+0xd0>)
 8003894:	2200      	movs	r2, #0
 8003896:	701a      	strb	r2, [r3, #0]
	/* Infinite loop */
	for (;;) {
		if (stateInv == true) {
 8003898:	4b2d      	ldr	r3, [pc, #180]	; (8003950 <StartDefaultTask+0xd0>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d012      	beq.n	80038c6 <StartDefaultTask+0x46>
			kinMotor(&MotorOut, InvTarget[0], InvTarget[1], InvTarget[2]);
 80038a0:	4b2c      	ldr	r3, [pc, #176]	; (8003954 <StartDefaultTask+0xd4>)
 80038a2:	edd3 7a00 	vldr	s15, [r3]
 80038a6:	4b2b      	ldr	r3, [pc, #172]	; (8003954 <StartDefaultTask+0xd4>)
 80038a8:	ed93 7a01 	vldr	s14, [r3, #4]
 80038ac:	4b29      	ldr	r3, [pc, #164]	; (8003954 <StartDefaultTask+0xd4>)
 80038ae:	edd3 6a02 	vldr	s13, [r3, #8]
 80038b2:	eeb0 1a66 	vmov.f32	s2, s13
 80038b6:	eef0 0a47 	vmov.f32	s1, s14
 80038ba:	eeb0 0a67 	vmov.f32	s0, s15
 80038be:	4826      	ldr	r0, [pc, #152]	; (8003958 <StartDefaultTask+0xd8>)
 80038c0:	f7fe fe1a 	bl	80024f8 <kinMotor>
 80038c4:	e027      	b.n	8003916 <StartDefaultTask+0x96>
		} else {
			vect3_Kin = ForwardKin(xtarget, ytarget, thtarget);
 80038c6:	4b25      	ldr	r3, [pc, #148]	; (800395c <StartDefaultTask+0xdc>)
 80038c8:	edd3 7a00 	vldr	s15, [r3]
 80038cc:	4b24      	ldr	r3, [pc, #144]	; (8003960 <StartDefaultTask+0xe0>)
 80038ce:	ed93 7a00 	vldr	s14, [r3]
 80038d2:	4b24      	ldr	r3, [pc, #144]	; (8003964 <StartDefaultTask+0xe4>)
 80038d4:	edd3 6a00 	vldr	s13, [r3]
 80038d8:	eeb0 1a66 	vmov.f32	s2, s13
 80038dc:	eef0 0a47 	vmov.f32	s1, s14
 80038e0:	eeb0 0a67 	vmov.f32	s0, s15
 80038e4:	f7fd fed8 	bl	8001698 <ForwardKin>
 80038e8:	eef0 6a40 	vmov.f32	s13, s0
 80038ec:	eeb0 7a60 	vmov.f32	s14, s1
 80038f0:	eef0 7a41 	vmov.f32	s15, s2
 80038f4:	4b1c      	ldr	r3, [pc, #112]	; (8003968 <StartDefaultTask+0xe8>)
 80038f6:	edc3 6a00 	vstr	s13, [r3]
 80038fa:	ed83 7a01 	vstr	s14, [r3, #4]
 80038fe:	edc3 7a02 	vstr	s15, [r3, #8]
			MotorOut = InverseKin(&vect3_Kin);
 8003902:	4c15      	ldr	r4, [pc, #84]	; (8003958 <StartDefaultTask+0xd8>)
 8003904:	463b      	mov	r3, r7
 8003906:	4918      	ldr	r1, [pc, #96]	; (8003968 <StartDefaultTask+0xe8>)
 8003908:	4618      	mov	r0, r3
 800390a:	f7fe f9a5 	bl	8001c58 <InverseKin>
 800390e:	463b      	mov	r3, r7
 8003910:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003912:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}
		setPwm(0, MotorOut.w1); setPwm(1, MotorOut.w2);
 8003916:	4b10      	ldr	r3, [pc, #64]	; (8003958 <StartDefaultTask+0xd8>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4619      	mov	r1, r3
 800391c:	2000      	movs	r0, #0
 800391e:	f7ff fce5 	bl	80032ec <setPwm>
 8003922:	4b0d      	ldr	r3, [pc, #52]	; (8003958 <StartDefaultTask+0xd8>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	4619      	mov	r1, r3
 8003928:	2001      	movs	r0, #1
 800392a:	f7ff fcdf 	bl	80032ec <setPwm>
		setPwm(2, MotorOut.w3); setPwm(3, MotorOut.w4);
 800392e:	4b0a      	ldr	r3, [pc, #40]	; (8003958 <StartDefaultTask+0xd8>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	4619      	mov	r1, r3
 8003934:	2002      	movs	r0, #2
 8003936:	f7ff fcd9 	bl	80032ec <setPwm>
 800393a:	4b07      	ldr	r3, [pc, #28]	; (8003958 <StartDefaultTask+0xd8>)
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	4619      	mov	r1, r3
 8003940:	2003      	movs	r0, #3
 8003942:	f7ff fcd3 	bl	80032ec <setPwm>
		osDelay(1);
 8003946:	2001      	movs	r0, #1
 8003948:	f00a f838 	bl	800d9bc <osDelay>
		if (stateInv == true) {
 800394c:	e7a4      	b.n	8003898 <StartDefaultTask+0x18>
 800394e:	bf00      	nop
 8003950:	20000b6c 	.word	0x20000b6c
 8003954:	20000b1c 	.word	0x20000b1c
 8003958:	20000a74 	.word	0x20000a74
 800395c:	20000b0c 	.word	0x20000b0c
 8003960:	20000b10 	.word	0x20000b10
 8003964:	20000b14 	.word	0x20000b14
 8003968:	20000a68 	.word	0x20000a68

0800396c <commTask>:
 * @brief Function implementing the myTask02 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_commTask */
void commTask(void *argument) {
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN commTask */
	setup();
 8003974:	f003 fb1a 	bl	8006fac <setup>
	/* Infinite loop */
	for (;;) {
		loop();
 8003978:	f003 fb48 	bl	800700c <loop>
		osDelay(1);
 800397c:	2001      	movs	r0, #1
 800397e:	f00a f81d 	bl	800d9bc <osDelay>
		loop();
 8003982:	e7f9      	b.n	8003978 <commTask+0xc>

08003984 <ImuTask_Function>:
 * @brief Function implementing the ImuTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ImuTask_Function */
void ImuTask_Function(void *argument) {
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN ImuTask_Function */
	bno055_assignI2C(&hi2c1);
 800398c:	484b      	ldr	r0, [pc, #300]	; (8003abc <ImuTask_Function+0x138>)
 800398e:	f7fe fef3 	bl	8002778 <bno055_assignI2C>
	bno055_setup();
 8003992:	f7fd fb27 	bl	8000fe4 <bno055_setup>
	bno055_setOperationModeNDOF();
 8003996:	f7fd fb12 	bl	8000fbe <bno055_setOperationModeNDOF>
	vTaskDelay(100);
 800399a:	2064      	movs	r0, #100	; 0x64
 800399c:	f00a ffb6 	bl	800e90c <vTaskDelay>
	/* Infinite loop */
	for (;;) {
		vector = bno055_getVectorEuler();
 80039a0:	f7fd fccf 	bl	8001342 <bno055_getVectorEuler>
 80039a4:	eeb0 4a40 	vmov.f32	s8, s0
 80039a8:	eef0 4a60 	vmov.f32	s9, s1
 80039ac:	eeb0 5a41 	vmov.f32	s10, s2
 80039b0:	eef0 5a61 	vmov.f32	s11, s3
 80039b4:	eeb0 6a42 	vmov.f32	s12, s4
 80039b8:	eef0 6a62 	vmov.f32	s13, s5
 80039bc:	eeb0 7a43 	vmov.f32	s14, s6
 80039c0:	eef0 7a63 	vmov.f32	s15, s7
 80039c4:	4b3e      	ldr	r3, [pc, #248]	; (8003ac0 <ImuTask_Function+0x13c>)
 80039c6:	ed83 4b00 	vstr	d4, [r3]
 80039ca:	ed83 5b02 	vstr	d5, [r3, #8]
 80039ce:	ed83 6b04 	vstr	d6, [r3, #16]
 80039d2:	ed83 7b06 	vstr	d7, [r3, #24]
		gyro = bno055_getVectorGyroscope();
 80039d6:	f7fd fc71 	bl	80012bc <bno055_getVectorGyroscope>
 80039da:	eeb0 4a40 	vmov.f32	s8, s0
 80039de:	eef0 4a60 	vmov.f32	s9, s1
 80039e2:	eeb0 5a41 	vmov.f32	s10, s2
 80039e6:	eef0 5a61 	vmov.f32	s11, s3
 80039ea:	eeb0 6a42 	vmov.f32	s12, s4
 80039ee:	eef0 6a62 	vmov.f32	s13, s5
 80039f2:	eeb0 7a43 	vmov.f32	s14, s6
 80039f6:	eef0 7a63 	vmov.f32	s15, s7
 80039fa:	4b32      	ldr	r3, [pc, #200]	; (8003ac4 <ImuTask_Function+0x140>)
 80039fc:	ed83 4b00 	vstr	d4, [r3]
 8003a00:	ed83 5b02 	vstr	d5, [r3, #8]
 8003a04:	ed83 6b04 	vstr	d6, [r3, #16]
 8003a08:	ed83 7b06 	vstr	d7, [r3, #24]
		line = bno055_getVectorLinearAccel();
 8003a0c:	f7fd fcdc 	bl	80013c8 <bno055_getVectorLinearAccel>
 8003a10:	eeb0 4a40 	vmov.f32	s8, s0
 8003a14:	eef0 4a60 	vmov.f32	s9, s1
 8003a18:	eeb0 5a41 	vmov.f32	s10, s2
 8003a1c:	eef0 5a61 	vmov.f32	s11, s3
 8003a20:	eeb0 6a42 	vmov.f32	s12, s4
 8003a24:	eef0 6a62 	vmov.f32	s13, s5
 8003a28:	eeb0 7a43 	vmov.f32	s14, s6
 8003a2c:	eef0 7a63 	vmov.f32	s15, s7
 8003a30:	4b25      	ldr	r3, [pc, #148]	; (8003ac8 <ImuTask_Function+0x144>)
 8003a32:	ed83 4b00 	vstr	d4, [r3]
 8003a36:	ed83 5b02 	vstr	d5, [r3, #8]
 8003a3a:	ed83 6b04 	vstr	d6, [r3, #16]
 8003a3e:	ed83 7b06 	vstr	d7, [r3, #24]
		quat = bno055_getVectorQuaternion();
 8003a42:	f7fd fd04 	bl	800144e <bno055_getVectorQuaternion>
 8003a46:	eeb0 4a40 	vmov.f32	s8, s0
 8003a4a:	eef0 4a60 	vmov.f32	s9, s1
 8003a4e:	eeb0 5a41 	vmov.f32	s10, s2
 8003a52:	eef0 5a61 	vmov.f32	s11, s3
 8003a56:	eeb0 6a42 	vmov.f32	s12, s4
 8003a5a:	eef0 6a62 	vmov.f32	s13, s5
 8003a5e:	eeb0 7a43 	vmov.f32	s14, s6
 8003a62:	eef0 7a63 	vmov.f32	s15, s7
 8003a66:	4b19      	ldr	r3, [pc, #100]	; (8003acc <ImuTask_Function+0x148>)
 8003a68:	ed83 4b00 	vstr	d4, [r3]
 8003a6c:	ed83 5b02 	vstr	d5, [r3, #8]
 8003a70:	ed83 6b04 	vstr	d6, [r3, #16]
 8003a74:	ed83 7b06 	vstr	d7, [r3, #24]
		imuPublish(&quat, &line, &gyro);
 8003a78:	4a12      	ldr	r2, [pc, #72]	; (8003ac4 <ImuTask_Function+0x140>)
 8003a7a:	4913      	ldr	r1, [pc, #76]	; (8003ac8 <ImuTask_Function+0x144>)
 8003a7c:	4813      	ldr	r0, [pc, #76]	; (8003acc <ImuTask_Function+0x148>)
 8003a7e:	f003 fae7 	bl	8007050 <imuPublish>
		vTaskDelay(1);
 8003a82:	2001      	movs	r0, #1
 8003a84:	f00a ff42 	bl	800e90c <vTaskDelay>
		rawYaw = vector.x;
 8003a88:	4b0d      	ldr	r3, [pc, #52]	; (8003ac0 <ImuTask_Function+0x13c>)
 8003a8a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003a8e:	4610      	mov	r0, r2
 8003a90:	4619      	mov	r1, r3
 8003a92:	f7fd f871 	bl	8000b78 <__aeabi_d2iz>
 8003a96:	4603      	mov	r3, r0
 8003a98:	b21a      	sxth	r2, r3
 8003a9a:	4b0d      	ldr	r3, [pc, #52]	; (8003ad0 <ImuTask_Function+0x14c>)
 8003a9c:	801a      	strh	r2, [r3, #0]
		yawVal = imuCallback(rawYaw);
 8003a9e:	4b0c      	ldr	r3, [pc, #48]	; (8003ad0 <ImuTask_Function+0x14c>)
 8003aa0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff fba7 	bl	80031f8 <imuCallback>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	b21a      	sxth	r2, r3
 8003aae:	4b09      	ldr	r3, [pc, #36]	; (8003ad4 <ImuTask_Function+0x150>)
 8003ab0:	801a      	strh	r2, [r3, #0]
		osDelay(1);
 8003ab2:	2001      	movs	r0, #1
 8003ab4:	f009 ff82 	bl	800d9bc <osDelay>
		vector = bno055_getVectorEuler();
 8003ab8:	e772      	b.n	80039a0 <ImuTask_Function+0x1c>
 8003aba:	bf00      	nop
 8003abc:	2000025c 	.word	0x2000025c
 8003ac0:	20000a88 	.word	0x20000a88
 8003ac4:	20000aa8 	.word	0x20000aa8
 8003ac8:	20000ac8 	.word	0x20000ac8
 8003acc:	20000ae8 	.word	0x20000ae8
 8003ad0:	20000b6e 	.word	0x20000b6e
 8003ad4:	20000214 	.word	0x20000214

08003ad8 <GUI_Task>:
 * @brief Function implementing the myTask04 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GUI_Task */
void GUI_Task(void *argument) {
 8003ad8:	b5b0      	push	{r4, r5, r7, lr}
 8003ada:	b092      	sub	sp, #72	; 0x48
 8003adc:	af02      	add	r7, sp, #8
 8003ade:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN GUI_Task */
	lcd_init();
 8003ae0:	f7fd fd6f 	bl	80015c2 <lcd_init>
	char buff[50];
	/* Infinite loop */
	for (;;) {
		lcd_send_cmd(0x80 | 0x04);
 8003ae4:	2084      	movs	r0, #132	; 0x84
 8003ae6:	f7fd fcf5 	bl	80014d4 <lcd_send_cmd>
		lcd_send_string("ABUROBONEMA");
 8003aea:	4849      	ldr	r0, [pc, #292]	; (8003c10 <GUI_Task+0x138>)
 8003aec:	f7fd fda6 	bl	800163c <lcd_send_string>

		lcd_send_cmd(0x80 | 0x40);
 8003af0:	20c0      	movs	r0, #192	; 0xc0
 8003af2:	f7fd fcef 	bl	80014d4 <lcd_send_cmd>
		lcd_send_string("Head:");
 8003af6:	4847      	ldr	r0, [pc, #284]	; (8003c14 <GUI_Task+0x13c>)
 8003af8:	f7fd fda0 	bl	800163c <lcd_send_string>
		lcd_send_cmd(0x80 | 0x45);
 8003afc:	20c5      	movs	r0, #197	; 0xc5
 8003afe:	f7fd fce9 	bl	80014d4 <lcd_send_cmd>
		Lcd_send_int(yawVal);
 8003b02:	4b45      	ldr	r3, [pc, #276]	; (8003c18 <GUI_Task+0x140>)
 8003b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7fd fdad 	bl	8001668 <Lcd_send_int>
		lcd_send_cmd(0x80 | 0x14);
 8003b0e:	2094      	movs	r0, #148	; 0x94
 8003b10:	f7fd fce0 	bl	80014d4 <lcd_send_cmd>
		sprintf(buff, "X:%.2f  Y:%.2f", Aksen[0], Aksen[1]);
 8003b14:	4b41      	ldr	r3, [pc, #260]	; (8003c1c <GUI_Task+0x144>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7fc fd25 	bl	8000568 <__aeabi_f2d>
 8003b1e:	4604      	mov	r4, r0
 8003b20:	460d      	mov	r5, r1
 8003b22:	4b3e      	ldr	r3, [pc, #248]	; (8003c1c <GUI_Task+0x144>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fc fd1e 	bl	8000568 <__aeabi_f2d>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	460b      	mov	r3, r1
 8003b30:	f107 000c 	add.w	r0, r7, #12
 8003b34:	e9cd 2300 	strd	r2, r3, [sp]
 8003b38:	4622      	mov	r2, r4
 8003b3a:	462b      	mov	r3, r5
 8003b3c:	4938      	ldr	r1, [pc, #224]	; (8003c20 <GUI_Task+0x148>)
 8003b3e:	f00f f921 	bl	8012d84 <siprintf>
		lcd_send_string(buff);
 8003b42:	f107 030c 	add.w	r3, r7, #12
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7fd fd78 	bl	800163c <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 8003b4c:	20d4      	movs	r0, #212	; 0xd4
 8003b4e:	f7fd fcc1 	bl	80014d4 <lcd_send_cmd>
		sprintf(buff, "err:%.3f", sqrt(pow(vect3_Kin.x, 2) + pow(vect3_Kin.y, 2) + pow(vect3_Kin.th, 2)));
 8003b52:	4b34      	ldr	r3, [pc, #208]	; (8003c24 <GUI_Task+0x14c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7fc fd06 	bl	8000568 <__aeabi_f2d>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	460b      	mov	r3, r1
 8003b60:	ed9f 1b29 	vldr	d1, [pc, #164]	; 8003c08 <GUI_Task+0x130>
 8003b64:	ec43 2b10 	vmov	d0, r2, r3
 8003b68:	f00c fbc8 	bl	80102fc <pow>
 8003b6c:	ec55 4b10 	vmov	r4, r5, d0
 8003b70:	4b2c      	ldr	r3, [pc, #176]	; (8003c24 <GUI_Task+0x14c>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7fc fcf7 	bl	8000568 <__aeabi_f2d>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	ed9f 1b22 	vldr	d1, [pc, #136]	; 8003c08 <GUI_Task+0x130>
 8003b82:	ec43 2b10 	vmov	d0, r2, r3
 8003b86:	f00c fbb9 	bl	80102fc <pow>
 8003b8a:	ec53 2b10 	vmov	r2, r3, d0
 8003b8e:	4620      	mov	r0, r4
 8003b90:	4629      	mov	r1, r5
 8003b92:	f7fc fb8b 	bl	80002ac <__adddf3>
 8003b96:	4602      	mov	r2, r0
 8003b98:	460b      	mov	r3, r1
 8003b9a:	4614      	mov	r4, r2
 8003b9c:	461d      	mov	r5, r3
 8003b9e:	4b21      	ldr	r3, [pc, #132]	; (8003c24 <GUI_Task+0x14c>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fc fce0 	bl	8000568 <__aeabi_f2d>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	460b      	mov	r3, r1
 8003bac:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8003c08 <GUI_Task+0x130>
 8003bb0:	ec43 2b10 	vmov	d0, r2, r3
 8003bb4:	f00c fba2 	bl	80102fc <pow>
 8003bb8:	ec53 2b10 	vmov	r2, r3, d0
 8003bbc:	4620      	mov	r0, r4
 8003bbe:	4629      	mov	r1, r5
 8003bc0:	f7fc fb74 	bl	80002ac <__adddf3>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	ec43 2b17 	vmov	d7, r2, r3
 8003bcc:	eeb0 0a47 	vmov.f32	s0, s14
 8003bd0:	eef0 0a67 	vmov.f32	s1, s15
 8003bd4:	f00c fc02 	bl	80103dc <sqrt>
 8003bd8:	ec53 2b10 	vmov	r2, r3, d0
 8003bdc:	f107 000c 	add.w	r0, r7, #12
 8003be0:	4911      	ldr	r1, [pc, #68]	; (8003c28 <GUI_Task+0x150>)
 8003be2:	f00f f8cf 	bl	8012d84 <siprintf>
		lcd_send_string(buff);
 8003be6:	f107 030c 	add.w	r3, r7, #12
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7fd fd26 	bl	800163c <lcd_send_string>
		lcd_clear();
 8003bf0:	f7fd fcd0 	bl	8001594 <lcd_clear>
		vTaskDelay(10);
 8003bf4:	200a      	movs	r0, #10
 8003bf6:	f00a fe89 	bl	800e90c <vTaskDelay>
		osDelay(1);
 8003bfa:	2001      	movs	r0, #1
 8003bfc:	f009 fede 	bl	800d9bc <osDelay>
		lcd_send_cmd(0x80 | 0x04);
 8003c00:	e770      	b.n	8003ae4 <GUI_Task+0xc>
 8003c02:	bf00      	nop
 8003c04:	f3af 8000 	nop.w
 8003c08:	00000000 	.word	0x00000000
 8003c0c:	40000000 	.word	0x40000000
 8003c10:	08015314 	.word	0x08015314
 8003c14:	08015320 	.word	0x08015320
 8003c18:	20000214 	.word	0x20000214
 8003c1c:	2000022c 	.word	0x2000022c
 8003c20:	08015328 	.word	0x08015328
 8003c24:	20000a68 	.word	0x20000a68
 8003c28:	08015338 	.word	0x08015338

08003c2c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM14) {
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a17      	ldr	r2, [pc, #92]	; (8003c98 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d101      	bne.n	8003c42 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8003c3e:	f004 ff13 	bl	8008a68 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM13) {
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a15      	ldr	r2, [pc, #84]	; (8003c9c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d121      	bne.n	8003c90 <HAL_TIM_PeriodElapsedCallback+0x64>
		for (uint8_t i = 0; i < 3; i++) {
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	73fb      	strb	r3, [r7, #15]
 8003c50:	e01b      	b.n	8003c8a <HAL_TIM_PeriodElapsedCallback+0x5e>
			rpmExt[i] = valueENC_EXT[i] * 6000 / 715;
 8003c52:	7bfb      	ldrb	r3, [r7, #15]
 8003c54:	4a12      	ldr	r2, [pc, #72]	; (8003ca0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003c56:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	f241 7370 	movw	r3, #6000	; 0x1770
 8003c60:	fb02 f303 	mul.w	r3, r2, r3
 8003c64:	4a0f      	ldr	r2, [pc, #60]	; (8003ca4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003c66:	fb82 1203 	smull	r1, r2, r2, r3
 8003c6a:	1212      	asrs	r2, r2, #8
 8003c6c:	17db      	asrs	r3, r3, #31
 8003c6e:	1ad2      	subs	r2, r2, r3
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
 8003c72:	b211      	sxth	r1, r2
 8003c74:	4a0c      	ldr	r2, [pc, #48]	; (8003ca8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003c76:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			valueENC_EXT[i] = 0;
 8003c7a:	7bfb      	ldrb	r3, [r7, #15]
 8003c7c:	4a08      	ldr	r2, [pc, #32]	; (8003ca0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003c7e:	2100      	movs	r1, #0
 8003c80:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint8_t i = 0; i < 3; i++) {
 8003c84:	7bfb      	ldrb	r3, [r7, #15]
 8003c86:	3301      	adds	r3, #1
 8003c88:	73fb      	strb	r3, [r7, #15]
 8003c8a:	7bfb      	ldrb	r3, [r7, #15]
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d9e0      	bls.n	8003c52 <HAL_TIM_PeriodElapsedCallback+0x26>
		}
	}

	/* USER CODE END Callback 1 */
}
 8003c90:	bf00      	nop
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	40002000 	.word	0x40002000
 8003c9c:	40001c00 	.word	0x40001c00
 8003ca0:	20000a60 	.word	0x20000a60
 8003ca4:	5ba8a345 	.word	0x5ba8a345
 8003ca8:	20000218 	.word	0x20000218

08003cac <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cb0:	b672      	cpsid	i
}
 8003cb2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003cb4:	e7fe      	b.n	8003cb4 <Error_Handler+0x8>

08003cb6 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8003cb6:	b480      	push	{r7}
 8003cb8:	b083      	sub	sp, #12
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	605a      	str	r2, [r3, #4]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	4a04      	ldr	r2, [pc, #16]	; (8003cf4 <_ZN3ros3MsgC1Ev+0x1c>)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	080158b4 	.word	0x080158b4

08003cf8 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
      data()
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7ff ffe8 	bl	8003cd8 <_ZN3ros3MsgC1Ev>
 8003d08:	4a06      	ldr	r2, [pc, #24]	; (8003d24 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	601a      	str	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	3304      	adds	r3, #4
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7ff ffcf 	bl	8003cb6 <_ZN3ros4TimeC1Ev>
    {
    }
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	0801589c 	.word	0x0801589c

08003d28 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003d32:	2300      	movs	r3, #0
 8003d34:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6859      	ldr	r1, [r3, #4]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	4413      	add	r3, r2
 8003d40:	b2ca      	uxtb	r2, r1
 8003d42:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	0a19      	lsrs	r1, r3, #8
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	4413      	add	r3, r2
 8003d52:	b2ca      	uxtb	r2, r1
 8003d54:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	0c19      	lsrs	r1, r3, #16
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	3302      	adds	r3, #2
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	4413      	add	r3, r2
 8003d64:	b2ca      	uxtb	r2, r1
 8003d66:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	0e19      	lsrs	r1, r3, #24
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	3303      	adds	r3, #3
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	4413      	add	r3, r2
 8003d76:	b2ca      	uxtb	r2, r1
 8003d78:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6899      	ldr	r1, [r3, #8]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	4413      	add	r3, r2
 8003d8a:	b2ca      	uxtb	r2, r1
 8003d8c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	0a19      	lsrs	r1, r3, #8
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	3301      	adds	r3, #1
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	b2ca      	uxtb	r2, r1
 8003d9e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	0c19      	lsrs	r1, r3, #16
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	3302      	adds	r3, #2
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	4413      	add	r3, r2
 8003dae:	b2ca      	uxtb	r2, r1
 8003db0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	0e19      	lsrs	r1, r3, #24
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	3303      	adds	r3, #3
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	b2ca      	uxtb	r2, r1
 8003dc2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	60fb      	str	r3, [r7, #12]
      return offset;
 8003dca:	68fb      	ldr	r3, [r7, #12]
    }
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003de2:	2300      	movs	r3, #0
 8003de4:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	4413      	add	r3, r2
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	461a      	mov	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	6839      	ldr	r1, [r7, #0]
 8003dfe:	440b      	add	r3, r1
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	021b      	lsls	r3, r3, #8
 8003e04:	431a      	orrs	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	3302      	adds	r3, #2
 8003e12:	6839      	ldr	r1, [r7, #0]
 8003e14:	440b      	add	r3, r1
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	041b      	lsls	r3, r3, #16
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	3303      	adds	r3, #3
 8003e28:	6839      	ldr	r1, [r7, #0]
 8003e2a:	440b      	add	r3, r1
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	061b      	lsls	r3, r3, #24
 8003e30:	431a      	orrs	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	3304      	adds	r3, #4
 8003e3a:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	4413      	add	r3, r2
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	461a      	mov	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	689a      	ldr	r2, [r3, #8]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	3301      	adds	r3, #1
 8003e52:	6839      	ldr	r1, [r7, #0]
 8003e54:	440b      	add	r3, r1
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	021b      	lsls	r3, r3, #8
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	3302      	adds	r3, #2
 8003e68:	6839      	ldr	r1, [r7, #0]
 8003e6a:	440b      	add	r3, r1
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	041b      	lsls	r3, r3, #16
 8003e70:	431a      	orrs	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689a      	ldr	r2, [r3, #8]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	3303      	adds	r3, #3
 8003e7e:	6839      	ldr	r1, [r7, #0]
 8003e80:	440b      	add	r3, r1
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	061b      	lsls	r3, r3, #24
 8003e86:	431a      	orrs	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	3304      	adds	r3, #4
 8003e90:	60fb      	str	r3, [r7, #12]
     return offset;
 8003e92:	68fb      	ldr	r3, [r7, #12]
    }
 8003e94:	4618      	mov	r0, r3
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	4b03      	ldr	r3, [pc, #12]	; (8003eb8 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8003eaa:	4618      	mov	r0, r3
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	08015344 	.word	0x08015344

08003ebc <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	4b03      	ldr	r3, [pc, #12]	; (8003ed4 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	08015354 	.word	0x08015354

08003ed8 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff fef8 	bl	8003cd8 <_ZN3ros3MsgC1Ev>
 8003ee8:	4a0b      	ldr	r2, [pc, #44]	; (8003f18 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a09      	ldr	r2, [pc, #36]	; (8003f1c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003ef8:	609a      	str	r2, [r3, #8]
      message_type(""),
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a07      	ldr	r2, [pc, #28]	; (8003f1c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003efe:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a06      	ldr	r2, [pc, #24]	; (8003f1c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003f04:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	615a      	str	r2, [r3, #20]
    {
    }
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	08015884 	.word	0x08015884
 8003f1c:	08015378 	.word	0x08015378

08003f20 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b088      	sub	sp, #32
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	8899      	ldrh	r1, [r3, #4]
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	4413      	add	r3, r2
 8003f38:	b2ca      	uxtb	r2, r1
 8003f3a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	889b      	ldrh	r3, [r3, #4]
 8003f40:	0a1b      	lsrs	r3, r3, #8
 8003f42:	b299      	uxth	r1, r3
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	3301      	adds	r3, #1
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	b2ca      	uxtb	r2, r1
 8003f4e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	3302      	adds	r3, #2
 8003f54:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7fc f998 	bl	8000290 <strlen>
 8003f60:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	4413      	add	r3, r2
 8003f68:	69b9      	ldr	r1, [r7, #24]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f003 f92a 	bl	80071c4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	3304      	adds	r3, #4
 8003f74:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	18d0      	adds	r0, r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	4619      	mov	r1, r3
 8003f84:	f00f f8cb 	bl	801311e <memcpy>
      offset += length_topic_name;
 8003f88:	69fa      	ldr	r2, [r7, #28]
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7fc f97b 	bl	8000290 <strlen>
 8003f9a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	6979      	ldr	r1, [r7, #20]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f003 f90d 	bl	80071c4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	3304      	adds	r3, #4
 8003fae:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	683a      	ldr	r2, [r7, #0]
 8003fb4:	18d0      	adds	r0, r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	f00f f8ae 	bl	801311e <memcpy>
      offset += length_message_type;
 8003fc2:	69fa      	ldr	r2, [r7, #28]
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7fc f95e 	bl	8000290 <strlen>
 8003fd4:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	4413      	add	r3, r2
 8003fdc:	6939      	ldr	r1, [r7, #16]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f003 f8f0 	bl	80071c4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	18d0      	adds	r0, r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	f00f f891 	bl	801311e <memcpy>
      offset += length_md5sum;
 8003ffc:	69fa      	ldr	r2, [r7, #28]
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	4413      	add	r3, r2
 8004002:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800400a:	68f9      	ldr	r1, [r7, #12]
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	4413      	add	r3, r2
 8004012:	b2ca      	uxtb	r2, r1
 8004014:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	0a19      	lsrs	r1, r3, #8
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	3301      	adds	r3, #1
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	4413      	add	r3, r2
 8004022:	b2ca      	uxtb	r2, r1
 8004024:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	0c19      	lsrs	r1, r3, #16
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	3302      	adds	r3, #2
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	4413      	add	r3, r2
 8004032:	b2ca      	uxtb	r2, r1
 8004034:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	0e19      	lsrs	r1, r3, #24
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	3303      	adds	r3, #3
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	4413      	add	r3, r2
 8004042:	b2ca      	uxtb	r2, r1
 8004044:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	3304      	adds	r3, #4
 800404a:	61fb      	str	r3, [r7, #28]
      return offset;
 800404c:	69fb      	ldr	r3, [r7, #28]
    }
 800404e:	4618      	mov	r0, r3
 8004050:	3720      	adds	r7, #32
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004056:	b580      	push	{r7, lr}
 8004058:	b08a      	sub	sp, #40	; 0x28
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
 800405e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004060:	2300      	movs	r3, #0
 8004062:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	4413      	add	r3, r2
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	b29a      	uxth	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	889b      	ldrh	r3, [r3, #4]
 8004076:	b21a      	sxth	r2, r3
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	3301      	adds	r3, #1
 800407c:	6839      	ldr	r1, [r7, #0]
 800407e:	440b      	add	r3, r1
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	021b      	lsls	r3, r3, #8
 8004084:	b21b      	sxth	r3, r3
 8004086:	4313      	orrs	r3, r2
 8004088:	b21b      	sxth	r3, r3
 800408a:	b29a      	uxth	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	3302      	adds	r3, #2
 8004094:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	441a      	add	r2, r3
 800409c:	f107 0314 	add.w	r3, r7, #20
 80040a0:	4611      	mov	r1, r2
 80040a2:	4618      	mov	r0, r3
 80040a4:	f003 f8ad 	bl	8007202 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	3304      	adds	r3, #4
 80040ac:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	627b      	str	r3, [r7, #36]	; 0x24
 80040b2:	e00b      	b.n	80040cc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b8:	441a      	add	r2, r3
 80040ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040bc:	3b01      	subs	r3, #1
 80040be:	6839      	ldr	r1, [r7, #0]
 80040c0:	440b      	add	r3, r1
 80040c2:	7812      	ldrb	r2, [r2, #0]
 80040c4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80040c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c8:	3301      	adds	r3, #1
 80040ca:	627b      	str	r3, [r7, #36]	; 0x24
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	4413      	add	r3, r2
 80040d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d3ed      	bcc.n	80040b4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	4413      	add	r3, r2
 80040de:	3b01      	subs	r3, #1
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	4413      	add	r3, r2
 80040e4:	2200      	movs	r2, #0
 80040e6:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	3b01      	subs	r3, #1
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	441a      	add	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	4413      	add	r3, r2
 80040fa:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	441a      	add	r2, r3
 8004102:	f107 0310 	add.w	r3, r7, #16
 8004106:	4611      	mov	r1, r2
 8004108:	4618      	mov	r0, r3
 800410a:	f003 f87a 	bl	8007202 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	3304      	adds	r3, #4
 8004112:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	623b      	str	r3, [r7, #32]
 8004118:	e00b      	b.n	8004132 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	6a3b      	ldr	r3, [r7, #32]
 800411e:	441a      	add	r2, r3
 8004120:	6a3b      	ldr	r3, [r7, #32]
 8004122:	3b01      	subs	r3, #1
 8004124:	6839      	ldr	r1, [r7, #0]
 8004126:	440b      	add	r3, r1
 8004128:	7812      	ldrb	r2, [r2, #0]
 800412a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800412c:	6a3b      	ldr	r3, [r7, #32]
 800412e:	3301      	adds	r3, #1
 8004130:	623b      	str	r3, [r7, #32]
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	4413      	add	r3, r2
 8004138:	6a3a      	ldr	r2, [r7, #32]
 800413a:	429a      	cmp	r2, r3
 800413c:	d3ed      	bcc.n	800411a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	4413      	add	r3, r2
 8004144:	3b01      	subs	r3, #1
 8004146:	683a      	ldr	r2, [r7, #0]
 8004148:	4413      	add	r3, r2
 800414a:	2200      	movs	r2, #0
 800414c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	3b01      	subs	r3, #1
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	441a      	add	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	4413      	add	r3, r2
 8004160:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	441a      	add	r2, r3
 8004168:	f107 030c 	add.w	r3, r7, #12
 800416c:	4611      	mov	r1, r2
 800416e:	4618      	mov	r0, r3
 8004170:	f003 f847 	bl	8007202 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	3304      	adds	r3, #4
 8004178:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	61fb      	str	r3, [r7, #28]
 800417e:	e00b      	b.n	8004198 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	441a      	add	r2, r3
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	3b01      	subs	r3, #1
 800418a:	6839      	ldr	r1, [r7, #0]
 800418c:	440b      	add	r3, r1
 800418e:	7812      	ldrb	r2, [r2, #0]
 8004190:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	3301      	adds	r3, #1
 8004196:	61fb      	str	r3, [r7, #28]
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	4413      	add	r3, r2
 800419e:	69fa      	ldr	r2, [r7, #28]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d3ed      	bcc.n	8004180 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	4413      	add	r3, r2
 80041aa:	3b01      	subs	r3, #1
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	4413      	add	r3, r2
 80041b0:	2200      	movs	r2, #0
 80041b2:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	3b01      	subs	r3, #1
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	441a      	add	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	4413      	add	r3, r2
 80041c6:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80041c8:	2300      	movs	r3, #0
 80041ca:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	6839      	ldr	r1, [r7, #0]
 80041d2:	440a      	add	r2, r1
 80041d4:	7812      	ldrb	r2, [r2, #0]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80041da:	68ba      	ldr	r2, [r7, #8]
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	3301      	adds	r3, #1
 80041e0:	6839      	ldr	r1, [r7, #0]
 80041e2:	440b      	add	r3, r1
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	021b      	lsls	r3, r3, #8
 80041e8:	4313      	orrs	r3, r2
 80041ea:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	3302      	adds	r3, #2
 80041f2:	6839      	ldr	r1, [r7, #0]
 80041f4:	440b      	add	r3, r1
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	041b      	lsls	r3, r3, #16
 80041fa:	4313      	orrs	r3, r2
 80041fc:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80041fe:	68ba      	ldr	r2, [r7, #8]
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	3303      	adds	r3, #3
 8004204:	6839      	ldr	r1, [r7, #0]
 8004206:	440b      	add	r3, r1
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	061b      	lsls	r3, r3, #24
 800420c:	4313      	orrs	r3, r2
 800420e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	3304      	adds	r3, #4
 800421a:	61bb      	str	r3, [r7, #24]
     return offset;
 800421c:	69bb      	ldr	r3, [r7, #24]
    }
 800421e:	4618      	mov	r0, r3
 8004220:	3728      	adds	r7, #40	; 0x28
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
	...

08004228 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	4b03      	ldr	r3, [pc, #12]	; (8004240 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8004232:	4618      	mov	r0, r3
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	0801537c 	.word	0x0801537c

08004244 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	4b03      	ldr	r3, [pc, #12]	; (800425c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800424e:	4618      	mov	r0, r3
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	08015398 	.word	0x08015398

08004260 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff fd34 	bl	8003cd8 <_ZN3ros3MsgC1Ev>
 8004270:	4a06      	ldr	r2, [pc, #24]	; (800428c <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	601a      	str	r2, [r3, #0]
      level(0),
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	711a      	strb	r2, [r3, #4]
      msg("")
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a04      	ldr	r2, [pc, #16]	; (8004290 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8004280:	609a      	str	r2, [r3, #8]
    {
    }
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4618      	mov	r0, r3
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	0801586c 	.word	0x0801586c
 8004290:	08015378 	.word	0x08015378

08004294 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800429e:	2300      	movs	r3, #0
 80042a0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	4413      	add	r3, r2
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	7912      	ldrb	r2, [r2, #4]
 80042ac:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	3301      	adds	r3, #1
 80042b2:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7fb ffe9 	bl	8000290 <strlen>
 80042be:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	4413      	add	r3, r2
 80042c6:	68b9      	ldr	r1, [r7, #8]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f002 ff7b 	bl	80071c4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	3304      	adds	r3, #4
 80042d2:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	18d0      	adds	r0, r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	4619      	mov	r1, r3
 80042e2:	f00e ff1c 	bl	801311e <memcpy>
      offset += length_msg;
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	4413      	add	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]
      return offset;
 80042ee:	68fb      	ldr	r3, [r7, #12]
    }
 80042f0:	4618      	mov	r0, r3
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004302:	2300      	movs	r3, #0
 8004304:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	4413      	add	r3, r2
 800430c:	781a      	ldrb	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	3301      	adds	r3, #1
 8004316:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	441a      	add	r2, r3
 800431e:	f107 030c 	add.w	r3, r7, #12
 8004322:	4611      	mov	r1, r2
 8004324:	4618      	mov	r0, r3
 8004326:	f002 ff6c 	bl	8007202 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	3304      	adds	r3, #4
 800432e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	617b      	str	r3, [r7, #20]
 8004334:	e00b      	b.n	800434e <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	441a      	add	r2, r3
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	3b01      	subs	r3, #1
 8004340:	6839      	ldr	r1, [r7, #0]
 8004342:	440b      	add	r3, r1
 8004344:	7812      	ldrb	r2, [r2, #0]
 8004346:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	3301      	adds	r3, #1
 800434c:	617b      	str	r3, [r7, #20]
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4413      	add	r3, r2
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	429a      	cmp	r2, r3
 8004358:	d3ed      	bcc.n	8004336 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	4413      	add	r3, r2
 8004360:	3b01      	subs	r3, #1
 8004362:	683a      	ldr	r2, [r7, #0]
 8004364:	4413      	add	r3, r2
 8004366:	2200      	movs	r2, #0
 8004368:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	3b01      	subs	r3, #1
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	441a      	add	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	4413      	add	r3, r2
 800437c:	613b      	str	r3, [r7, #16]
     return offset;
 800437e:	693b      	ldr	r3, [r7, #16]
    }
 8004380:	4618      	mov	r0, r3
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	4b03      	ldr	r3, [pc, #12]	; (80043a0 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8004392:	4618      	mov	r0, r3
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	080153bc 	.word	0x080153bc

080043a4 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	4b03      	ldr	r3, [pc, #12]	; (80043bc <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80043ae:	4618      	mov	r0, r3
 80043b0:	370c      	adds	r7, #12
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	080153d0 	.word	0x080153d0

080043c0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7ff fc84 	bl	8003cd8 <_ZN3ros3MsgC1Ev>
 80043d0:	4a11      	ldr	r2, [pc, #68]	; (8004418 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	605a      	str	r2, [r3, #4]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	609a      	str	r2, [r3, #8]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	611a      	str	r2, [r3, #16]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f04f 0200 	mov.w	r2, #0
 80043f4:	615a      	str	r2, [r3, #20]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	61da      	str	r2, [r3, #28]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	621a      	str	r2, [r3, #32]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4618      	mov	r0, r3
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	08015854 	.word	0x08015854

0800441c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800441c:	b580      	push	{r7, lr}
 800441e:	b08a      	sub	sp, #40	; 0x28
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004426:	2300      	movs	r3, #0
 8004428:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6859      	ldr	r1, [r3, #4]
 800442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	4413      	add	r3, r2
 8004434:	b2ca      	uxtb	r2, r1
 8004436:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	0a19      	lsrs	r1, r3, #8
 800443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004440:	3301      	adds	r3, #1
 8004442:	683a      	ldr	r2, [r7, #0]
 8004444:	4413      	add	r3, r2
 8004446:	b2ca      	uxtb	r2, r1
 8004448:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	0c19      	lsrs	r1, r3, #16
 8004450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004452:	3302      	adds	r3, #2
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	4413      	add	r3, r2
 8004458:	b2ca      	uxtb	r2, r1
 800445a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	0e19      	lsrs	r1, r3, #24
 8004462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004464:	3303      	adds	r3, #3
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	4413      	add	r3, r2
 800446a:	b2ca      	uxtb	r2, r1
 800446c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004470:	3304      	adds	r3, #4
 8004472:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8004474:	2300      	movs	r3, #0
 8004476:	623b      	str	r3, [r7, #32]
 8004478:	e02a      	b.n	80044d0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68da      	ldr	r2, [r3, #12]
 800447e:	6a3b      	ldr	r3, [r7, #32]
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4413      	add	r3, r2
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8004488:	6939      	ldr	r1, [r7, #16]
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	4413      	add	r3, r2
 8004490:	b2ca      	uxtb	r2, r1
 8004492:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	0a19      	lsrs	r1, r3, #8
 8004498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449a:	3301      	adds	r3, #1
 800449c:	683a      	ldr	r2, [r7, #0]
 800449e:	4413      	add	r3, r2
 80044a0:	b2ca      	uxtb	r2, r1
 80044a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	0c19      	lsrs	r1, r3, #16
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	3302      	adds	r3, #2
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	4413      	add	r3, r2
 80044b0:	b2ca      	uxtb	r2, r1
 80044b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	0e19      	lsrs	r1, r3, #24
 80044b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ba:	3303      	adds	r3, #3
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	4413      	add	r3, r2
 80044c0:	b2ca      	uxtb	r2, r1
 80044c2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	3304      	adds	r3, #4
 80044c8:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	3301      	adds	r3, #1
 80044ce:	623b      	str	r3, [r7, #32]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	6a3a      	ldr	r2, [r7, #32]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d3cf      	bcc.n	800447a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6919      	ldr	r1, [r3, #16]
 80044de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	4413      	add	r3, r2
 80044e4:	b2ca      	uxtb	r2, r1
 80044e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	0a19      	lsrs	r1, r3, #8
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f0:	3301      	adds	r3, #1
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	4413      	add	r3, r2
 80044f6:	b2ca      	uxtb	r2, r1
 80044f8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	0c19      	lsrs	r1, r3, #16
 8004500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004502:	3302      	adds	r3, #2
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	4413      	add	r3, r2
 8004508:	b2ca      	uxtb	r2, r1
 800450a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	0e19      	lsrs	r1, r3, #24
 8004512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004514:	3303      	adds	r3, #3
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	4413      	add	r3, r2
 800451a:	b2ca      	uxtb	r2, r1
 800451c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004520:	3304      	adds	r3, #4
 8004522:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8004524:	2300      	movs	r3, #0
 8004526:	61fb      	str	r3, [r7, #28]
 8004528:	e02a      	b.n	8004580 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	699a      	ldr	r2, [r3, #24]
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	4413      	add	r3, r2
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8004538:	68f9      	ldr	r1, [r7, #12]
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	683a      	ldr	r2, [r7, #0]
 800453e:	4413      	add	r3, r2
 8004540:	b2ca      	uxtb	r2, r1
 8004542:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	0a19      	lsrs	r1, r3, #8
 8004548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454a:	3301      	adds	r3, #1
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	4413      	add	r3, r2
 8004550:	b2ca      	uxtb	r2, r1
 8004552:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	0c19      	lsrs	r1, r3, #16
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455a:	3302      	adds	r3, #2
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	4413      	add	r3, r2
 8004560:	b2ca      	uxtb	r2, r1
 8004562:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	0e19      	lsrs	r1, r3, #24
 8004568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456a:	3303      	adds	r3, #3
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	4413      	add	r3, r2
 8004570:	b2ca      	uxtb	r2, r1
 8004572:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	3304      	adds	r3, #4
 8004578:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	3301      	adds	r3, #1
 800457e:	61fb      	str	r3, [r7, #28]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	69fa      	ldr	r2, [r7, #28]
 8004586:	429a      	cmp	r2, r3
 8004588:	d3cf      	bcc.n	800452a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	69d9      	ldr	r1, [r3, #28]
 800458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	4413      	add	r3, r2
 8004594:	b2ca      	uxtb	r2, r1
 8004596:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	69db      	ldr	r3, [r3, #28]
 800459c:	0a19      	lsrs	r1, r3, #8
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	3301      	adds	r3, #1
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	4413      	add	r3, r2
 80045a6:	b2ca      	uxtb	r2, r1
 80045a8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	0c19      	lsrs	r1, r3, #16
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	3302      	adds	r3, #2
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	4413      	add	r3, r2
 80045b8:	b2ca      	uxtb	r2, r1
 80045ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	69db      	ldr	r3, [r3, #28]
 80045c0:	0e19      	lsrs	r1, r3, #24
 80045c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c4:	3303      	adds	r3, #3
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	4413      	add	r3, r2
 80045ca:	b2ca      	uxtb	r2, r1
 80045cc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80045ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d0:	3304      	adds	r3, #4
 80045d2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80045d4:	2300      	movs	r3, #0
 80045d6:	61bb      	str	r3, [r7, #24]
 80045d8:	e027      	b.n	800462a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4413      	add	r3, r2
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fb fe52 	bl	8000290 <strlen>
 80045ec:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80045ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f0:	683a      	ldr	r2, [r7, #0]
 80045f2:	4413      	add	r3, r2
 80045f4:	6979      	ldr	r1, [r7, #20]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f002 fde4 	bl	80071c4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80045fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fe:	3304      	adds	r3, #4
 8004600:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8004602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	18d0      	adds	r0, r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4413      	add	r3, r2
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	4619      	mov	r1, r3
 8004618:	f00e fd81 	bl	801311e <memcpy>
      offset += length_stringsi;
 800461c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	4413      	add	r3, r2
 8004622:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	3301      	adds	r3, #1
 8004628:	61bb      	str	r3, [r7, #24]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	69db      	ldr	r3, [r3, #28]
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	429a      	cmp	r2, r3
 8004632:	d3d2      	bcc.n	80045da <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004636:	4618      	mov	r0, r3
 8004638:	3728      	adds	r7, #40	; 0x28
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800463e:	b580      	push	{r7, lr}
 8004640:	b08e      	sub	sp, #56	; 0x38
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
 8004646:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004648:	2300      	movs	r3, #0
 800464a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800464c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	4413      	add	r3, r2
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8004656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004658:	3301      	adds	r3, #1
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	4413      	add	r3, r2
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	021b      	lsls	r3, r3, #8
 8004662:	6a3a      	ldr	r2, [r7, #32]
 8004664:	4313      	orrs	r3, r2
 8004666:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8004668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800466a:	3302      	adds	r3, #2
 800466c:	683a      	ldr	r2, [r7, #0]
 800466e:	4413      	add	r3, r2
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	041b      	lsls	r3, r3, #16
 8004674:	6a3a      	ldr	r2, [r7, #32]
 8004676:	4313      	orrs	r3, r2
 8004678:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800467a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800467c:	3303      	adds	r3, #3
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	4413      	add	r3, r2
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	061b      	lsls	r3, r3, #24
 8004686:	6a3a      	ldr	r2, [r7, #32]
 8004688:	4313      	orrs	r3, r2
 800468a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 800468c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800468e:	3304      	adds	r3, #4
 8004690:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	6a3a      	ldr	r2, [r7, #32]
 8004698:	429a      	cmp	r2, r3
 800469a:	d90a      	bls.n	80046b2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68da      	ldr	r2, [r3, #12]
 80046a0:	6a3b      	ldr	r3, [r7, #32]
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	4619      	mov	r1, r3
 80046a6:	4610      	mov	r0, r2
 80046a8:	f00d fd9e 	bl	80121e8 <realloc>
 80046ac:	4602      	mov	r2, r0
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a3a      	ldr	r2, [r7, #32]
 80046b6:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80046b8:	2300      	movs	r3, #0
 80046ba:	633b      	str	r3, [r7, #48]	; 0x30
 80046bc:	e035      	b.n	800472a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80046be:	2300      	movs	r3, #0
 80046c0:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046c6:	6839      	ldr	r1, [r7, #0]
 80046c8:	440a      	add	r2, r1
 80046ca:	7812      	ldrb	r2, [r2, #0]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046d4:	3301      	adds	r3, #1
 80046d6:	6839      	ldr	r1, [r7, #0]
 80046d8:	440b      	add	r3, r1
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	021b      	lsls	r3, r3, #8
 80046de:	4313      	orrs	r3, r2
 80046e0:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e6:	3302      	adds	r3, #2
 80046e8:	6839      	ldr	r1, [r7, #0]
 80046ea:	440b      	add	r3, r1
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	041b      	lsls	r3, r3, #16
 80046f0:	4313      	orrs	r3, r2
 80046f2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046f8:	3303      	adds	r3, #3
 80046fa:	6839      	ldr	r1, [r7, #0]
 80046fc:	440b      	add	r3, r1
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	061b      	lsls	r3, r3, #24
 8004702:	4313      	orrs	r3, r2
 8004704:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 800470c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800470e:	3304      	adds	r3, #4
 8004710:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68da      	ldr	r2, [r3, #12]
 8004716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	4413      	add	r3, r2
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	3208      	adds	r2, #8
 8004720:	6812      	ldr	r2, [r2, #0]
 8004722:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8004724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004726:	3301      	adds	r3, #1
 8004728:	633b      	str	r3, [r7, #48]	; 0x30
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004730:	429a      	cmp	r2, r3
 8004732:	d3c4      	bcc.n	80046be <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8004734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	4413      	add	r3, r2
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800473e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004740:	3301      	adds	r3, #1
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	4413      	add	r3, r2
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	021b      	lsls	r3, r3, #8
 800474a:	69fa      	ldr	r2, [r7, #28]
 800474c:	4313      	orrs	r3, r2
 800474e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8004750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004752:	3302      	adds	r3, #2
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	4413      	add	r3, r2
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	041b      	lsls	r3, r3, #16
 800475c:	69fa      	ldr	r2, [r7, #28]
 800475e:	4313      	orrs	r3, r2
 8004760:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8004762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004764:	3303      	adds	r3, #3
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	4413      	add	r3, r2
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	061b      	lsls	r3, r3, #24
 800476e:	69fa      	ldr	r2, [r7, #28]
 8004770:	4313      	orrs	r3, r2
 8004772:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8004774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004776:	3304      	adds	r3, #4
 8004778:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	69fa      	ldr	r2, [r7, #28]
 8004780:	429a      	cmp	r2, r3
 8004782:	d90a      	bls.n	800479a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	699a      	ldr	r2, [r3, #24]
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4619      	mov	r1, r3
 800478e:	4610      	mov	r0, r2
 8004790:	f00d fd2a 	bl	80121e8 <realloc>
 8004794:	4602      	mov	r2, r0
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	69fa      	ldr	r2, [r7, #28]
 800479e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80047a0:	2300      	movs	r3, #0
 80047a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047a4:	e035      	b.n	8004812 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80047a6:	2300      	movs	r3, #0
 80047a8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047ae:	6839      	ldr	r1, [r7, #0]
 80047b0:	440a      	add	r2, r1
 80047b2:	7812      	ldrb	r2, [r2, #0]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047bc:	3301      	adds	r3, #1
 80047be:	6839      	ldr	r1, [r7, #0]
 80047c0:	440b      	add	r3, r1
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	021b      	lsls	r3, r3, #8
 80047c6:	4313      	orrs	r3, r2
 80047c8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ce:	3302      	adds	r3, #2
 80047d0:	6839      	ldr	r1, [r7, #0]
 80047d2:	440b      	add	r3, r1
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	041b      	lsls	r3, r3, #16
 80047d8:	4313      	orrs	r3, r2
 80047da:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e0:	3303      	adds	r3, #3
 80047e2:	6839      	ldr	r1, [r7, #0]
 80047e4:	440b      	add	r3, r1
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	061b      	lsls	r3, r3, #24
 80047ea:	4313      	orrs	r3, r2
 80047ec:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80047f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f6:	3304      	adds	r3, #4
 80047f8:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	699a      	ldr	r2, [r3, #24]
 80047fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4413      	add	r3, r2
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	3214      	adds	r2, #20
 8004808:	6812      	ldr	r2, [r2, #0]
 800480a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 800480c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480e:	3301      	adds	r3, #1
 8004810:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004818:	429a      	cmp	r2, r3
 800481a:	d3c4      	bcc.n	80047a6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800481c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800481e:	683a      	ldr	r2, [r7, #0]
 8004820:	4413      	add	r3, r2
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8004826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004828:	3301      	adds	r3, #1
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	4413      	add	r3, r2
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	021b      	lsls	r3, r3, #8
 8004832:	69ba      	ldr	r2, [r7, #24]
 8004834:	4313      	orrs	r3, r2
 8004836:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8004838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800483a:	3302      	adds	r3, #2
 800483c:	683a      	ldr	r2, [r7, #0]
 800483e:	4413      	add	r3, r2
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	041b      	lsls	r3, r3, #16
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	4313      	orrs	r3, r2
 8004848:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800484a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800484c:	3303      	adds	r3, #3
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	4413      	add	r3, r2
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	061b      	lsls	r3, r3, #24
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	4313      	orrs	r3, r2
 800485a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 800485c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800485e:	3304      	adds	r3, #4
 8004860:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	69ba      	ldr	r2, [r7, #24]
 8004868:	429a      	cmp	r2, r3
 800486a:	d90a      	bls.n	8004882 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4619      	mov	r1, r3
 8004876:	4610      	mov	r0, r2
 8004878:	f00d fcb6 	bl	80121e8 <realloc>
 800487c:	4602      	mov	r2, r0
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8004888:	2300      	movs	r3, #0
 800488a:	62bb      	str	r3, [r7, #40]	; 0x28
 800488c:	e03e      	b.n	800490c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800488e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	441a      	add	r2, r3
 8004894:	f107 030c 	add.w	r3, r7, #12
 8004898:	4611      	mov	r1, r2
 800489a:	4618      	mov	r0, r3
 800489c:	f002 fcb1 	bl	8007202 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80048a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a2:	3304      	adds	r3, #4
 80048a4:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80048a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a8:	627b      	str	r3, [r7, #36]	; 0x24
 80048aa:	e00b      	b.n	80048c4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b0:	441a      	add	r2, r3
 80048b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b4:	3b01      	subs	r3, #1
 80048b6:	6839      	ldr	r1, [r7, #0]
 80048b8:	440b      	add	r3, r1
 80048ba:	7812      	ldrb	r2, [r2, #0]
 80048bc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80048be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c0:	3301      	adds	r3, #1
 80048c2:	627b      	str	r3, [r7, #36]	; 0x24
 80048c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	4413      	add	r3, r2
 80048ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d3ed      	bcc.n	80048ac <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80048d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	4413      	add	r3, r2
 80048d6:	3b01      	subs	r3, #1
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	4413      	add	r3, r2
 80048dc:	2200      	movs	r2, #0
 80048de:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80048e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048e2:	3b01      	subs	r3, #1
 80048e4:	683a      	ldr	r2, [r7, #0]
 80048e6:	441a      	add	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80048ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	4413      	add	r3, r2
 80048f2:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	4413      	add	r3, r2
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	3220      	adds	r2, #32
 8004902:	6812      	ldr	r2, [r2, #0]
 8004904:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8004906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004908:	3301      	adds	r3, #1
 800490a:	62bb      	str	r3, [r7, #40]	; 0x28
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	69db      	ldr	r3, [r3, #28]
 8004910:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004912:	429a      	cmp	r2, r3
 8004914:	d3bb      	bcc.n	800488e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8004916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8004918:	4618      	mov	r0, r3
 800491a:	3738      	adds	r7, #56	; 0x38
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	4b03      	ldr	r3, [pc, #12]	; (8004938 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800492a:	4618      	mov	r0, r3
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	08015718 	.word	0x08015718

0800493c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	4b03      	ldr	r3, [pc, #12]	; (8004954 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8004946:	4618      	mov	r0, r3
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	080153f4 	.word	0x080153f4

08004958 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
 8004964:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	601a      	str	r2, [r3, #0]
    msg_(msg),
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	611a      	str	r2, [r3, #16]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	4618      	mov	r0, r3
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8004986:	b580      	push	{r7, lr}
 8004988:	b082      	sub	sp, #8
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
 800498e:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	68d8      	ldr	r0, [r3, #12]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	6891      	ldr	r1, [r2, #8]
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	4798      	blx	r3
 80049a4:	4603      	mov	r3, r0
  };
 80049a6:	4618      	mov	r0, r3
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	691b      	ldr	r3, [r3, #16]
  }
 80049ba:	4618      	mov	r0, r3
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 1024;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80049c6:	b480      	push	{r7}
 80049c8:	b083      	sub	sp, #12
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80049dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049e0:	4618      	mov	r0, r3
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 1024;//512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a0a      	ldr	r2, [pc, #40]	; (8004a20 <_ZN13STM32HardwareC1Ev+0x34>)
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
    }
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4618      	mov	r0, r3
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	2000049c 	.word	0x2000049c

08004a24 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f804 	bl	8004a3a <_ZN13STM32Hardware10reset_rbufEv>
    }
 8004a32:	bf00      	nop
 8004a34:	3708      	adds	r7, #8
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b082      	sub	sp, #8
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6818      	ldr	r0, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	3304      	adds	r3, #4
 8004a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a4e:	4619      	mov	r1, r3
 8004a50:	f007 fd84 	bl	800c55c <HAL_UART_Receive_DMA>
    }
 8004a54:	bf00      	nop
 8004a56:	3708      	adds	r7, #8
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <_ZN13STM32Hardware4readEv>:

    int read(){
 8004a5c:	b590      	push	{r4, r7, lr}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
      int c = -1;
 8004a64:	f04f 33ff 	mov.w	r3, #4294967295
 8004a68:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f8d3 4404 	ldr.w	r4, [r3, #1028]	; 0x404
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7ff ffa8 	bl	80049c6 <_ZN13STM32Hardware10getRdmaIndEv>
 8004a76:	4603      	mov	r3, r0
 8004a78:	429c      	cmp	r4, r3
 8004a7a:	bf14      	ite	ne
 8004a7c:	2301      	movne	r3, #1
 8004a7e:	2300      	moveq	r3, #0
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d012      	beq.n	8004aac <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004a8c:	1c59      	adds	r1, r3, #1
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	4413      	add	r3, r2
 8004a98:	791b      	ldrb	r3, [r3, #4]
 8004a9a:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004aa2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      }
      return c;
 8004aac:	68fb      	ldr	r3, [r7, #12]
    }
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3714      	adds	r7, #20
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd90      	pop	{r4, r7, pc}
	...

08004ab8 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b20      	cmp	r3, #32
 8004acc:	d108      	bne.n	8004ae0 <_ZN13STM32Hardware5flushEv+0x28>
 8004ace:	4b28      	ldr	r3, [pc, #160]	; (8004b70 <_ZN13STM32Hardware5flushEv+0xb8>)
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	f083 0301 	eor.w	r3, r3, #1
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d001      	beq.n	8004ae0 <_ZN13STM32Hardware5flushEv+0x28>
 8004adc:	2301      	movs	r3, #1
 8004ade:	e000      	b.n	8004ae2 <_ZN13STM32Hardware5flushEv+0x2a>
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d03f      	beq.n	8004b66 <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 8004ae6:	4b22      	ldr	r3, [pc, #136]	; (8004b70 <_ZN13STM32Hardware5flushEv+0xb8>)
 8004ae8:	2201      	movs	r2, #1
 8004aea:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d031      	beq.n	8004b60 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d20a      	bcs.n	8004b22 <_ZN13STM32Hardware5flushEv+0x6a>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	e006      	b.n	8004b30 <_ZN13STM32Hardware5flushEv+0x78>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6818      	ldr	r0, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8004b3c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	4413      	add	r3, r2
 8004b44:	89fa      	ldrh	r2, [r7, #14]
 8004b46:	4619      	mov	r1, r3
 8004b48:	f007 fc98 	bl	800c47c <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 8004b52:	89fb      	ldrh	r3, [r7, #14]
 8004b54:	4413      	add	r3, r2
 8004b56:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
        }
        mutex = false;
 8004b60:	4b03      	ldr	r3, [pc, #12]	; (8004b70 <_ZN13STM32Hardware5flushEv+0xb8>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	701a      	strb	r2, [r3, #0]
      }
    }
 8004b66:	bf00      	nop
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	20000b08 	.word	0x20000b08

08004b74 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
          long n = length;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	617b      	str	r3, [r7, #20]
          n = n <= tbuflen ? n : tbuflen;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b8a:	bfa8      	it	ge
 8004b8c:	f44f 6380 	movge.w	r3, #1024	; 0x400
 8004b90:	617b      	str	r3, [r7, #20]

          long n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8004b98:	f5c3 6280 	rsb	r2, r3, #1024	; 0x400
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	bf28      	it	cs
 8004ba2:	4613      	movcs	r3, r2
 8004ba4:	613b      	str	r3, [r7, #16]
          memcpy(&(tbuf[twind]), data, n_tail);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8004bac:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	68b9      	ldr	r1, [r7, #8]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f00e fab0 	bl	801311e <memcpy>
          twind = (twind + n) & (tbuflen - 1);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808

          if(n != n_tail){
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d00b      	beq.n	8004bf2 <_ZN13STM32Hardware5writeEPhi+0x7e>
            memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f503 6081 	add.w	r0, r3, #1032	; 0x408
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	18d1      	adds	r1, r2, r3
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	461a      	mov	r2, r3
 8004bee:	f00e fa96 	bl	801311e <memcpy>
          }

          flush();
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f7ff ff60 	bl	8004ab8 <_ZN13STM32Hardware5flushEv>
        }
 8004bf8:	bf00      	nop
 8004bfa:	3718      	adds	r7, #24
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	f003 ff42 	bl	8008a90 <HAL_GetTick>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3708      	adds	r7, #8
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
	...

08004c18 <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef double _z_type;
      _z_type z;
      typedef double _w_type;
      _w_type w;

    Quaternion():
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7ff f858 	bl	8003cd8 <_ZN3ros3MsgC1Ev>
 8004c28:	4a11      	ldr	r2, [pc, #68]	; (8004c70 <_ZN13geometry_msgs10QuaternionC1Ev+0x58>)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	601a      	str	r2, [r3, #0]
      x(0),
 8004c2e:	6879      	ldr	r1, [r7, #4]
 8004c30:	f04f 0200 	mov.w	r2, #0
 8004c34:	f04f 0300 	mov.w	r3, #0
 8004c38:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 8004c3c:	6879      	ldr	r1, [r7, #4]
 8004c3e:	f04f 0200 	mov.w	r2, #0
 8004c42:	f04f 0300 	mov.w	r3, #0
 8004c46:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0),
 8004c4a:	6879      	ldr	r1, [r7, #4]
 8004c4c:	f04f 0200 	mov.w	r2, #0
 8004c50:	f04f 0300 	mov.w	r3, #0
 8004c54:	e9c1 2306 	strd	r2, r3, [r1, #24]
      w(0)
 8004c58:	6879      	ldr	r1, [r7, #4]
 8004c5a:	f04f 0200 	mov.w	r2, #0
 8004c5e:	f04f 0300 	mov.w	r3, #0
 8004c62:	e9c1 2308 	strd	r2, r3, [r1, #32]
    {
    }
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3708      	adds	r7, #8
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	08015810 	.word	0x08015810

08004c74 <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004c74:	b480      	push	{r7}
 8004c76:	b08d      	sub	sp, #52	; 0x34
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004c88:	e9c7 2308 	strd	r2, r3, [r7, #32]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8004c8c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c92:	6838      	ldr	r0, [r7, #0]
 8004c94:	4401      	add	r1, r0
 8004c96:	b2d3      	uxtb	r3, r2
 8004c98:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8004c9a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004c9e:	f04f 0200 	mov.w	r2, #0
 8004ca2:	f04f 0300 	mov.w	r3, #0
 8004ca6:	0a02      	lsrs	r2, r0, #8
 8004ca8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004cac:	0a0b      	lsrs	r3, r1, #8
 8004cae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cb0:	3101      	adds	r1, #1
 8004cb2:	6838      	ldr	r0, [r7, #0]
 8004cb4:	4401      	add	r1, r0
 8004cb6:	b2d3      	uxtb	r3, r2
 8004cb8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8004cba:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004cbe:	f04f 0200 	mov.w	r2, #0
 8004cc2:	f04f 0300 	mov.w	r3, #0
 8004cc6:	0c02      	lsrs	r2, r0, #16
 8004cc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004ccc:	0c0b      	lsrs	r3, r1, #16
 8004cce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cd0:	3102      	adds	r1, #2
 8004cd2:	6838      	ldr	r0, [r7, #0]
 8004cd4:	4401      	add	r1, r0
 8004cd6:	b2d3      	uxtb	r3, r2
 8004cd8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8004cda:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004cde:	f04f 0200 	mov.w	r2, #0
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	0e02      	lsrs	r2, r0, #24
 8004ce8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004cec:	0e0b      	lsrs	r3, r1, #24
 8004cee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cf0:	3103      	adds	r1, #3
 8004cf2:	6838      	ldr	r0, [r7, #0]
 8004cf4:	4401      	add	r1, r0
 8004cf6:	b2d3      	uxtb	r3, r2
 8004cf8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8004cfa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004cfe:	f04f 0200 	mov.w	r2, #0
 8004d02:	f04f 0300 	mov.w	r3, #0
 8004d06:	000a      	movs	r2, r1
 8004d08:	2300      	movs	r3, #0
 8004d0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d0c:	3104      	adds	r1, #4
 8004d0e:	6838      	ldr	r0, [r7, #0]
 8004d10:	4401      	add	r1, r0
 8004d12:	b2d3      	uxtb	r3, r2
 8004d14:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8004d16:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004d1a:	f04f 0200 	mov.w	r2, #0
 8004d1e:	f04f 0300 	mov.w	r3, #0
 8004d22:	0a0a      	lsrs	r2, r1, #8
 8004d24:	2300      	movs	r3, #0
 8004d26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d28:	3105      	adds	r1, #5
 8004d2a:	6838      	ldr	r0, [r7, #0]
 8004d2c:	4401      	add	r1, r0
 8004d2e:	b2d3      	uxtb	r3, r2
 8004d30:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8004d32:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004d36:	f04f 0200 	mov.w	r2, #0
 8004d3a:	f04f 0300 	mov.w	r3, #0
 8004d3e:	0c0a      	lsrs	r2, r1, #16
 8004d40:	2300      	movs	r3, #0
 8004d42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d44:	3106      	adds	r1, #6
 8004d46:	6838      	ldr	r0, [r7, #0]
 8004d48:	4401      	add	r1, r0
 8004d4a:	b2d3      	uxtb	r3, r2
 8004d4c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8004d4e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004d52:	f04f 0200 	mov.w	r2, #0
 8004d56:	f04f 0300 	mov.w	r3, #0
 8004d5a:	0e0a      	lsrs	r2, r1, #24
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d60:	3107      	adds	r1, #7
 8004d62:	6838      	ldr	r0, [r7, #0]
 8004d64:	4401      	add	r1, r0
 8004d66:	b2d3      	uxtb	r3, r2
 8004d68:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8004d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d6c:	3308      	adds	r3, #8
 8004d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004d76:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8004d7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d80:	6838      	ldr	r0, [r7, #0]
 8004d82:	4401      	add	r1, r0
 8004d84:	b2d3      	uxtb	r3, r2
 8004d86:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8004d88:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004d8c:	f04f 0200 	mov.w	r2, #0
 8004d90:	f04f 0300 	mov.w	r3, #0
 8004d94:	0a02      	lsrs	r2, r0, #8
 8004d96:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004d9a:	0a0b      	lsrs	r3, r1, #8
 8004d9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d9e:	3101      	adds	r1, #1
 8004da0:	6838      	ldr	r0, [r7, #0]
 8004da2:	4401      	add	r1, r0
 8004da4:	b2d3      	uxtb	r3, r2
 8004da6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8004da8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004dac:	f04f 0200 	mov.w	r2, #0
 8004db0:	f04f 0300 	mov.w	r3, #0
 8004db4:	0c02      	lsrs	r2, r0, #16
 8004db6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004dba:	0c0b      	lsrs	r3, r1, #16
 8004dbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dbe:	3102      	adds	r1, #2
 8004dc0:	6838      	ldr	r0, [r7, #0]
 8004dc2:	4401      	add	r1, r0
 8004dc4:	b2d3      	uxtb	r3, r2
 8004dc6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8004dc8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004dcc:	f04f 0200 	mov.w	r2, #0
 8004dd0:	f04f 0300 	mov.w	r3, #0
 8004dd4:	0e02      	lsrs	r2, r0, #24
 8004dd6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004dda:	0e0b      	lsrs	r3, r1, #24
 8004ddc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dde:	3103      	adds	r1, #3
 8004de0:	6838      	ldr	r0, [r7, #0]
 8004de2:	4401      	add	r1, r0
 8004de4:	b2d3      	uxtb	r3, r2
 8004de6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8004de8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004dec:	f04f 0200 	mov.w	r2, #0
 8004df0:	f04f 0300 	mov.w	r3, #0
 8004df4:	000a      	movs	r2, r1
 8004df6:	2300      	movs	r3, #0
 8004df8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dfa:	3104      	adds	r1, #4
 8004dfc:	6838      	ldr	r0, [r7, #0]
 8004dfe:	4401      	add	r1, r0
 8004e00:	b2d3      	uxtb	r3, r2
 8004e02:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8004e04:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004e08:	f04f 0200 	mov.w	r2, #0
 8004e0c:	f04f 0300 	mov.w	r3, #0
 8004e10:	0a0a      	lsrs	r2, r1, #8
 8004e12:	2300      	movs	r3, #0
 8004e14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e16:	3105      	adds	r1, #5
 8004e18:	6838      	ldr	r0, [r7, #0]
 8004e1a:	4401      	add	r1, r0
 8004e1c:	b2d3      	uxtb	r3, r2
 8004e1e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8004e20:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004e24:	f04f 0200 	mov.w	r2, #0
 8004e28:	f04f 0300 	mov.w	r3, #0
 8004e2c:	0c0a      	lsrs	r2, r1, #16
 8004e2e:	2300      	movs	r3, #0
 8004e30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e32:	3106      	adds	r1, #6
 8004e34:	6838      	ldr	r0, [r7, #0]
 8004e36:	4401      	add	r1, r0
 8004e38:	b2d3      	uxtb	r3, r2
 8004e3a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8004e3c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004e40:	f04f 0200 	mov.w	r2, #0
 8004e44:	f04f 0300 	mov.w	r3, #0
 8004e48:	0e0a      	lsrs	r2, r1, #24
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e4e:	3107      	adds	r1, #7
 8004e50:	6838      	ldr	r0, [r7, #0]
 8004e52:	4401      	add	r1, r0
 8004e54:	b2d3      	uxtb	r3, r2
 8004e56:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8004e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5a:	3308      	adds	r3, #8
 8004e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004e64:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8004e68:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004e6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e6e:	6838      	ldr	r0, [r7, #0]
 8004e70:	4401      	add	r1, r0
 8004e72:	b2d3      	uxtb	r3, r2
 8004e74:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8004e76:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004e7a:	f04f 0200 	mov.w	r2, #0
 8004e7e:	f04f 0300 	mov.w	r3, #0
 8004e82:	0a02      	lsrs	r2, r0, #8
 8004e84:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004e88:	0a0b      	lsrs	r3, r1, #8
 8004e8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e8c:	3101      	adds	r1, #1
 8004e8e:	6838      	ldr	r0, [r7, #0]
 8004e90:	4401      	add	r1, r0
 8004e92:	b2d3      	uxtb	r3, r2
 8004e94:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8004e96:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004e9a:	f04f 0200 	mov.w	r2, #0
 8004e9e:	f04f 0300 	mov.w	r3, #0
 8004ea2:	0c02      	lsrs	r2, r0, #16
 8004ea4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004ea8:	0c0b      	lsrs	r3, r1, #16
 8004eaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004eac:	3102      	adds	r1, #2
 8004eae:	6838      	ldr	r0, [r7, #0]
 8004eb0:	4401      	add	r1, r0
 8004eb2:	b2d3      	uxtb	r3, r2
 8004eb4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8004eb6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004eba:	f04f 0200 	mov.w	r2, #0
 8004ebe:	f04f 0300 	mov.w	r3, #0
 8004ec2:	0e02      	lsrs	r2, r0, #24
 8004ec4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004ec8:	0e0b      	lsrs	r3, r1, #24
 8004eca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ecc:	3103      	adds	r1, #3
 8004ece:	6838      	ldr	r0, [r7, #0]
 8004ed0:	4401      	add	r1, r0
 8004ed2:	b2d3      	uxtb	r3, r2
 8004ed4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8004ed6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004eda:	f04f 0200 	mov.w	r2, #0
 8004ede:	f04f 0300 	mov.w	r3, #0
 8004ee2:	000a      	movs	r2, r1
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ee8:	3104      	adds	r1, #4
 8004eea:	6838      	ldr	r0, [r7, #0]
 8004eec:	4401      	add	r1, r0
 8004eee:	b2d3      	uxtb	r3, r2
 8004ef0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8004ef2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004ef6:	f04f 0200 	mov.w	r2, #0
 8004efa:	f04f 0300 	mov.w	r3, #0
 8004efe:	0a0a      	lsrs	r2, r1, #8
 8004f00:	2300      	movs	r3, #0
 8004f02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f04:	3105      	adds	r1, #5
 8004f06:	6838      	ldr	r0, [r7, #0]
 8004f08:	4401      	add	r1, r0
 8004f0a:	b2d3      	uxtb	r3, r2
 8004f0c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8004f0e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004f12:	f04f 0200 	mov.w	r2, #0
 8004f16:	f04f 0300 	mov.w	r3, #0
 8004f1a:	0c0a      	lsrs	r2, r1, #16
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f20:	3106      	adds	r1, #6
 8004f22:	6838      	ldr	r0, [r7, #0]
 8004f24:	4401      	add	r1, r0
 8004f26:	b2d3      	uxtb	r3, r2
 8004f28:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8004f2a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004f2e:	f04f 0200 	mov.w	r2, #0
 8004f32:	f04f 0300 	mov.w	r3, #0
 8004f36:	0e0a      	lsrs	r2, r1, #24
 8004f38:	2300      	movs	r3, #0
 8004f3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f3c:	3107      	adds	r1, #7
 8004f3e:	6838      	ldr	r0, [r7, #0]
 8004f40:	4401      	add	r1, r0
 8004f42:	b2d3      	uxtb	r3, r2
 8004f44:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8004f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f48:	3308      	adds	r3, #8
 8004f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.real = this->w;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004f52:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_w.base >> (8 * 0)) & 0xFF;
 8004f56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f5c:	6838      	ldr	r0, [r7, #0]
 8004f5e:	4401      	add	r1, r0
 8004f60:	b2d3      	uxtb	r3, r2
 8004f62:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_w.base >> (8 * 1)) & 0xFF;
 8004f64:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f68:	f04f 0200 	mov.w	r2, #0
 8004f6c:	f04f 0300 	mov.w	r3, #0
 8004f70:	0a02      	lsrs	r2, r0, #8
 8004f72:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004f76:	0a0b      	lsrs	r3, r1, #8
 8004f78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f7a:	3101      	adds	r1, #1
 8004f7c:	6838      	ldr	r0, [r7, #0]
 8004f7e:	4401      	add	r1, r0
 8004f80:	b2d3      	uxtb	r3, r2
 8004f82:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_w.base >> (8 * 2)) & 0xFF;
 8004f84:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f88:	f04f 0200 	mov.w	r2, #0
 8004f8c:	f04f 0300 	mov.w	r3, #0
 8004f90:	0c02      	lsrs	r2, r0, #16
 8004f92:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004f96:	0c0b      	lsrs	r3, r1, #16
 8004f98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f9a:	3102      	adds	r1, #2
 8004f9c:	6838      	ldr	r0, [r7, #0]
 8004f9e:	4401      	add	r1, r0
 8004fa0:	b2d3      	uxtb	r3, r2
 8004fa2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_w.base >> (8 * 3)) & 0xFF;
 8004fa4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004fa8:	f04f 0200 	mov.w	r2, #0
 8004fac:	f04f 0300 	mov.w	r3, #0
 8004fb0:	0e02      	lsrs	r2, r0, #24
 8004fb2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004fb6:	0e0b      	lsrs	r3, r1, #24
 8004fb8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fba:	3103      	adds	r1, #3
 8004fbc:	6838      	ldr	r0, [r7, #0]
 8004fbe:	4401      	add	r1, r0
 8004fc0:	b2d3      	uxtb	r3, r2
 8004fc2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_w.base >> (8 * 4)) & 0xFF;
 8004fc4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004fc8:	f04f 0200 	mov.w	r2, #0
 8004fcc:	f04f 0300 	mov.w	r3, #0
 8004fd0:	000a      	movs	r2, r1
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fd6:	3104      	adds	r1, #4
 8004fd8:	6838      	ldr	r0, [r7, #0]
 8004fda:	4401      	add	r1, r0
 8004fdc:	b2d3      	uxtb	r3, r2
 8004fde:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_w.base >> (8 * 5)) & 0xFF;
 8004fe0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004fe4:	f04f 0200 	mov.w	r2, #0
 8004fe8:	f04f 0300 	mov.w	r3, #0
 8004fec:	0a0a      	lsrs	r2, r1, #8
 8004fee:	2300      	movs	r3, #0
 8004ff0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ff2:	3105      	adds	r1, #5
 8004ff4:	6838      	ldr	r0, [r7, #0]
 8004ff6:	4401      	add	r1, r0
 8004ff8:	b2d3      	uxtb	r3, r2
 8004ffa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_w.base >> (8 * 6)) & 0xFF;
 8004ffc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005000:	f04f 0200 	mov.w	r2, #0
 8005004:	f04f 0300 	mov.w	r3, #0
 8005008:	0c0a      	lsrs	r2, r1, #16
 800500a:	2300      	movs	r3, #0
 800500c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800500e:	3106      	adds	r1, #6
 8005010:	6838      	ldr	r0, [r7, #0]
 8005012:	4401      	add	r1, r0
 8005014:	b2d3      	uxtb	r3, r2
 8005016:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_w.base >> (8 * 7)) & 0xFF;
 8005018:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800501c:	f04f 0200 	mov.w	r2, #0
 8005020:	f04f 0300 	mov.w	r3, #0
 8005024:	0e0a      	lsrs	r2, r1, #24
 8005026:	2300      	movs	r3, #0
 8005028:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800502a:	3107      	adds	r1, #7
 800502c:	6838      	ldr	r0, [r7, #0]
 800502e:	4401      	add	r1, r0
 8005030:	b2d3      	uxtb	r3, r2
 8005032:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->w);
 8005034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005036:	3308      	adds	r3, #8
 8005038:	62fb      	str	r3, [r7, #44]	; 0x2c
      return offset;
 800503a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800503c:	4618      	mov	r0, r3
 800503e:	3734      	adds	r7, #52	; 0x34
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8005048:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800504c:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8005050:	af00      	add	r7, sp, #0
 8005052:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
 8005056:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
    {
      int offset = 0;
 800505a:	2300      	movs	r3, #0
 800505c:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8005060:	f04f 0200 	mov.w	r2, #0
 8005064:	f04f 0300 	mov.w	r3, #0
 8005068:	e9c7 238a 	strd	r2, r3, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800506c:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8005070:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8005074:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8005078:	4413      	add	r3, r2
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2200      	movs	r2, #0
 8005080:	461c      	mov	r4, r3
 8005082:	4615      	mov	r5, r2
 8005084:	ea40 0804 	orr.w	r8, r0, r4
 8005088:	ea41 0905 	orr.w	r9, r1, r5
 800508c:	e9c7 898a 	strd	r8, r9, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005090:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8005094:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005098:	1c5a      	adds	r2, r3, #1
 800509a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800509e:	4413      	add	r3, r2
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	2200      	movs	r2, #0
 80050a6:	469a      	mov	sl, r3
 80050a8:	4693      	mov	fp, r2
 80050aa:	f04f 0200 	mov.w	r2, #0
 80050ae:	f04f 0300 	mov.w	r3, #0
 80050b2:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80050b6:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80050ba:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80050be:	ea40 0402 	orr.w	r4, r0, r2
 80050c2:	f8c7 4200 	str.w	r4, [r7, #512]	; 0x200
 80050c6:	430b      	orrs	r3, r1
 80050c8:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 80050cc:	e9d7 3480 	ldrd	r3, r4, [r7, #512]	; 0x200
 80050d0:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80050d4:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 80050d8:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80050dc:	1c9a      	adds	r2, r3, #2
 80050de:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80050e2:	4413      	add	r3, r2
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	2200      	movs	r2, #0
 80050ea:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 80050ee:	f8c7 21fc 	str.w	r2, [r7, #508]	; 0x1fc
 80050f2:	f04f 0200 	mov.w	r2, #0
 80050f6:	f04f 0300 	mov.w	r3, #0
 80050fa:	e9d7 897e 	ldrd	r8, r9, [r7, #504]	; 0x1f8
 80050fe:	464c      	mov	r4, r9
 8005100:	0423      	lsls	r3, r4, #16
 8005102:	4644      	mov	r4, r8
 8005104:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8005108:	4644      	mov	r4, r8
 800510a:	0422      	lsls	r2, r4, #16
 800510c:	ea40 0402 	orr.w	r4, r0, r2
 8005110:	f8c7 41f0 	str.w	r4, [r7, #496]	; 0x1f0
 8005114:	430b      	orrs	r3, r1
 8005116:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 800511a:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 800511e:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005122:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8005126:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800512a:	1cda      	adds	r2, r3, #3
 800512c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8005130:	4413      	add	r3, r2
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2200      	movs	r2, #0
 8005138:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800513c:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
 8005140:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	; 0x1e8
 8005144:	4623      	mov	r3, r4
 8005146:	0a1b      	lsrs	r3, r3, #8
 8005148:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800514c:	4623      	mov	r3, r4
 800514e:	061b      	lsls	r3, r3, #24
 8005150:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005154:	e9d7 4578 	ldrd	r4, r5, [r7, #480]	; 0x1e0
 8005158:	4623      	mov	r3, r4
 800515a:	4303      	orrs	r3, r0
 800515c:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8005160:	462b      	mov	r3, r5
 8005162:	430b      	orrs	r3, r1
 8005164:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8005168:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 800516c:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005170:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8005174:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005178:	1d1a      	adds	r2, r3, #4
 800517a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800517e:	4413      	add	r3, r2
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	b2db      	uxtb	r3, r3
 8005184:	2200      	movs	r2, #0
 8005186:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800518a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
 800518e:	f04f 0200 	mov.w	r2, #0
 8005192:	f04f 0300 	mov.w	r3, #0
 8005196:	f8d7 41d0 	ldr.w	r4, [r7, #464]	; 0x1d0
 800519a:	0023      	movs	r3, r4
 800519c:	2200      	movs	r2, #0
 800519e:	ea40 0402 	orr.w	r4, r0, r2
 80051a2:	f8c7 41c8 	str.w	r4, [r7, #456]	; 0x1c8
 80051a6:	430b      	orrs	r3, r1
 80051a8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 80051ac:	e9d7 3472 	ldrd	r3, r4, [r7, #456]	; 0x1c8
 80051b0:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80051b4:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 80051b8:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80051bc:	1d5a      	adds	r2, r3, #5
 80051be:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80051c2:	4413      	add	r3, r2
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	2200      	movs	r2, #0
 80051ca:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80051ce:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 80051d2:	f04f 0200 	mov.w	r2, #0
 80051d6:	f04f 0300 	mov.w	r3, #0
 80051da:	f8d7 41c0 	ldr.w	r4, [r7, #448]	; 0x1c0
 80051de:	0223      	lsls	r3, r4, #8
 80051e0:	2200      	movs	r2, #0
 80051e2:	ea40 0402 	orr.w	r4, r0, r2
 80051e6:	f8c7 41b8 	str.w	r4, [r7, #440]	; 0x1b8
 80051ea:	430b      	orrs	r3, r1
 80051ec:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80051f0:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	; 0x1b8
 80051f4:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80051f8:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 80051fc:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005200:	1d9a      	adds	r2, r3, #6
 8005202:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8005206:	4413      	add	r3, r2
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2200      	movs	r2, #0
 800520e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8005212:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8005216:	f04f 0200 	mov.w	r2, #0
 800521a:	f04f 0300 	mov.w	r3, #0
 800521e:	f8d7 41b0 	ldr.w	r4, [r7, #432]	; 0x1b0
 8005222:	0423      	lsls	r3, r4, #16
 8005224:	2200      	movs	r2, #0
 8005226:	ea40 0402 	orr.w	r4, r0, r2
 800522a:	f8c7 41a8 	str.w	r4, [r7, #424]	; 0x1a8
 800522e:	430b      	orrs	r3, r1
 8005230:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8005234:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 8005238:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800523c:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8005240:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005244:	1dda      	adds	r2, r3, #7
 8005246:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800524a:	4413      	add	r3, r2
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2200      	movs	r2, #0
 8005252:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005256:	f8c7 21a4 	str.w	r2, [r7, #420]	; 0x1a4
 800525a:	f04f 0200 	mov.w	r2, #0
 800525e:	f04f 0300 	mov.w	r3, #0
 8005262:	f8d7 41a0 	ldr.w	r4, [r7, #416]	; 0x1a0
 8005266:	0623      	lsls	r3, r4, #24
 8005268:	2200      	movs	r2, #0
 800526a:	ea40 0402 	orr.w	r4, r0, r2
 800526e:	f8c7 4198 	str.w	r4, [r7, #408]	; 0x198
 8005272:	430b      	orrs	r3, r1
 8005274:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8005278:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	; 0x198
 800527c:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      this->x = u_x.real;
 8005280:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8005284:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005288:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 800528c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005290:	3308      	adds	r3, #8
 8005292:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8005296:	f04f 0200 	mov.w	r2, #0
 800529a:	f04f 0300 	mov.w	r3, #0
 800529e:	e9c7 2388 	strd	r2, r3, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80052a2:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 80052a6:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 80052aa:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80052ae:	4413      	add	r3, r2
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2200      	movs	r2, #0
 80052b6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 80052ba:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 80052be:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	; 0x190
 80052c2:	4623      	mov	r3, r4
 80052c4:	4303      	orrs	r3, r0
 80052c6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80052ca:	462b      	mov	r3, r5
 80052cc:	430b      	orrs	r3, r1
 80052ce:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80052d2:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 80052d6:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80052da:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 80052de:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80052e2:	1c5a      	adds	r2, r3, #1
 80052e4:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80052e8:	4413      	add	r3, r2
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2200      	movs	r2, #0
 80052f0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80052f4:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 80052f8:	f04f 0200 	mov.w	r2, #0
 80052fc:	f04f 0300 	mov.w	r3, #0
 8005300:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	; 0x180
 8005304:	464c      	mov	r4, r9
 8005306:	0223      	lsls	r3, r4, #8
 8005308:	4644      	mov	r4, r8
 800530a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800530e:	4644      	mov	r4, r8
 8005310:	0222      	lsls	r2, r4, #8
 8005312:	ea40 0402 	orr.w	r4, r0, r2
 8005316:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 800531a:	430b      	orrs	r3, r1
 800531c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8005320:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8005324:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005328:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 800532c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005330:	1c9a      	adds	r2, r3, #2
 8005332:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8005336:	4413      	add	r3, r2
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2200      	movs	r2, #0
 800533e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8005342:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8005346:	f04f 0200 	mov.w	r2, #0
 800534a:	f04f 0300 	mov.w	r3, #0
 800534e:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8005352:	464c      	mov	r4, r9
 8005354:	0423      	lsls	r3, r4, #16
 8005356:	4644      	mov	r4, r8
 8005358:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800535c:	4644      	mov	r4, r8
 800535e:	0422      	lsls	r2, r4, #16
 8005360:	ea40 0402 	orr.w	r4, r0, r2
 8005364:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8005368:	430b      	orrs	r3, r1
 800536a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800536e:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8005372:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005376:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 800537a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800537e:	1cda      	adds	r2, r3, #3
 8005380:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8005384:	4413      	add	r3, r2
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	b2db      	uxtb	r3, r3
 800538a:	2200      	movs	r2, #0
 800538c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8005390:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8005394:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8005398:	4623      	mov	r3, r4
 800539a:	0a1b      	lsrs	r3, r3, #8
 800539c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80053a0:	4623      	mov	r3, r4
 80053a2:	061b      	lsls	r3, r3, #24
 80053a4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80053a8:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 80053ac:	4623      	mov	r3, r4
 80053ae:	4303      	orrs	r3, r0
 80053b0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80053b4:	462b      	mov	r3, r5
 80053b6:	430b      	orrs	r3, r1
 80053b8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80053bc:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 80053c0:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80053c4:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 80053c8:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80053cc:	1d1a      	adds	r2, r3, #4
 80053ce:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80053d2:	4413      	add	r3, r2
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	2200      	movs	r2, #0
 80053da:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80053de:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80053e2:	f04f 0200 	mov.w	r2, #0
 80053e6:	f04f 0300 	mov.w	r3, #0
 80053ea:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 80053ee:	0023      	movs	r3, r4
 80053f0:	2200      	movs	r2, #0
 80053f2:	ea40 0402 	orr.w	r4, r0, r2
 80053f6:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 80053fa:	430b      	orrs	r3, r1
 80053fc:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8005400:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8005404:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005408:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 800540c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005410:	1d5a      	adds	r2, r3, #5
 8005412:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8005416:	4413      	add	r3, r2
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	b2db      	uxtb	r3, r3
 800541c:	2200      	movs	r2, #0
 800541e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8005422:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8005426:	f04f 0200 	mov.w	r2, #0
 800542a:	f04f 0300 	mov.w	r3, #0
 800542e:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8005432:	0223      	lsls	r3, r4, #8
 8005434:	2200      	movs	r2, #0
 8005436:	ea40 0402 	orr.w	r4, r0, r2
 800543a:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800543e:	430b      	orrs	r3, r1
 8005440:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8005444:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8005448:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800544c:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8005450:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005454:	1d9a      	adds	r2, r3, #6
 8005456:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800545a:	4413      	add	r3, r2
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	b2db      	uxtb	r3, r3
 8005460:	2200      	movs	r2, #0
 8005462:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005466:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800546a:	f04f 0200 	mov.w	r2, #0
 800546e:	f04f 0300 	mov.w	r3, #0
 8005472:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8005476:	0423      	lsls	r3, r4, #16
 8005478:	2200      	movs	r2, #0
 800547a:	ea40 0402 	orr.w	r4, r0, r2
 800547e:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8005482:	430b      	orrs	r3, r1
 8005484:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005488:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 800548c:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005490:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8005494:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005498:	1dda      	adds	r2, r3, #7
 800549a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800549e:	4413      	add	r3, r2
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	2200      	movs	r2, #0
 80054a6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80054aa:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80054ae:	f04f 0200 	mov.w	r2, #0
 80054b2:	f04f 0300 	mov.w	r3, #0
 80054b6:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 80054ba:	0623      	lsls	r3, r4, #24
 80054bc:	2200      	movs	r2, #0
 80054be:	ea40 0402 	orr.w	r4, r0, r2
 80054c2:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 80054c6:	430b      	orrs	r3, r1
 80054c8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80054cc:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 80054d0:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      this->y = u_y.real;
 80054d4:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 80054d8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80054dc:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 80054e0:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80054e4:	3308      	adds	r3, #8
 80054e6:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 80054ea:	f04f 0200 	mov.w	r2, #0
 80054ee:	f04f 0300 	mov.w	r3, #0
 80054f2:	e9c7 2386 	strd	r2, r3, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80054f6:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 80054fa:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 80054fe:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8005502:	4413      	add	r3, r2
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	b2db      	uxtb	r3, r3
 8005508:	2200      	movs	r2, #0
 800550a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800550e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8005512:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8005516:	4623      	mov	r3, r4
 8005518:	4303      	orrs	r3, r0
 800551a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800551e:	462b      	mov	r3, r5
 8005520:	430b      	orrs	r3, r1
 8005522:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005526:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800552a:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800552e:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8005532:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005536:	1c5a      	adds	r2, r3, #1
 8005538:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800553c:	4413      	add	r3, r2
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2200      	movs	r2, #0
 8005544:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005548:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800554c:	f04f 0200 	mov.w	r2, #0
 8005550:	f04f 0300 	mov.w	r3, #0
 8005554:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8005558:	464c      	mov	r4, r9
 800555a:	0223      	lsls	r3, r4, #8
 800555c:	4644      	mov	r4, r8
 800555e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005562:	4644      	mov	r4, r8
 8005564:	0222      	lsls	r2, r4, #8
 8005566:	ea40 0402 	orr.w	r4, r0, r2
 800556a:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 800556e:	430b      	orrs	r3, r1
 8005570:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005574:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8005578:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800557c:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8005580:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005584:	1c9a      	adds	r2, r3, #2
 8005586:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800558a:	4413      	add	r3, r2
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2200      	movs	r2, #0
 8005592:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005596:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800559a:	f04f 0200 	mov.w	r2, #0
 800559e:	f04f 0300 	mov.w	r3, #0
 80055a2:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80055a6:	464c      	mov	r4, r9
 80055a8:	0423      	lsls	r3, r4, #16
 80055aa:	4644      	mov	r4, r8
 80055ac:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80055b0:	4644      	mov	r4, r8
 80055b2:	0422      	lsls	r2, r4, #16
 80055b4:	ea40 0402 	orr.w	r4, r0, r2
 80055b8:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 80055bc:	430b      	orrs	r3, r1
 80055be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80055c2:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80055c6:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80055ca:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 80055ce:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80055d2:	1cda      	adds	r2, r3, #3
 80055d4:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80055d8:	4413      	add	r3, r2
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2200      	movs	r2, #0
 80055e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80055e4:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80055e8:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80055ec:	4623      	mov	r3, r4
 80055ee:	0a1b      	lsrs	r3, r3, #8
 80055f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80055f4:	4623      	mov	r3, r4
 80055f6:	061b      	lsls	r3, r3, #24
 80055f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055fc:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8005600:	4623      	mov	r3, r4
 8005602:	4303      	orrs	r3, r0
 8005604:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005608:	462b      	mov	r3, r5
 800560a:	430b      	orrs	r3, r1
 800560c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005610:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8005614:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005618:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 800561c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005620:	1d1a      	adds	r2, r3, #4
 8005622:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8005626:	4413      	add	r3, r2
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2200      	movs	r2, #0
 800562e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005632:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005636:	f04f 0200 	mov.w	r2, #0
 800563a:	f04f 0300 	mov.w	r3, #0
 800563e:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8005642:	0023      	movs	r3, r4
 8005644:	2200      	movs	r2, #0
 8005646:	ea40 0402 	orr.w	r4, r0, r2
 800564a:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800564e:	430b      	orrs	r3, r1
 8005650:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005654:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8005658:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800565c:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8005660:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005664:	1d5a      	adds	r2, r3, #5
 8005666:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800566a:	4413      	add	r3, r2
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	b2db      	uxtb	r3, r3
 8005670:	2200      	movs	r2, #0
 8005672:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005676:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800567a:	f04f 0200 	mov.w	r2, #0
 800567e:	f04f 0300 	mov.w	r3, #0
 8005682:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8005686:	0223      	lsls	r3, r4, #8
 8005688:	2200      	movs	r2, #0
 800568a:	ea40 0402 	orr.w	r4, r0, r2
 800568e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8005692:	430b      	orrs	r3, r1
 8005694:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005698:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800569c:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80056a0:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 80056a4:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80056a8:	1d9a      	adds	r2, r3, #6
 80056aa:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80056ae:	4413      	add	r3, r2
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2200      	movs	r2, #0
 80056b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80056ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80056be:	f04f 0200 	mov.w	r2, #0
 80056c2:	f04f 0300 	mov.w	r3, #0
 80056c6:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80056ca:	0423      	lsls	r3, r4, #16
 80056cc:	2200      	movs	r2, #0
 80056ce:	ea40 0402 	orr.w	r4, r0, r2
 80056d2:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80056d6:	430b      	orrs	r3, r1
 80056d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80056dc:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80056e0:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80056e4:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 80056e8:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80056ec:	1dda      	adds	r2, r3, #7
 80056ee:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80056f2:	4413      	add	r3, r2
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2200      	movs	r2, #0
 80056fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80056fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005702:	f04f 0200 	mov.w	r2, #0
 8005706:	f04f 0300 	mov.w	r3, #0
 800570a:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800570e:	0623      	lsls	r3, r4, #24
 8005710:	2200      	movs	r2, #0
 8005712:	ea40 0402 	orr.w	r4, r0, r2
 8005716:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 800571a:	430b      	orrs	r3, r1
 800571c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005720:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8005724:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      this->z = u_z.real;
 8005728:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 800572c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005730:	e9c3 0106 	strd	r0, r1, [r3, #24]
      offset += sizeof(this->z);
 8005734:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005738:	3308      	adds	r3, #8
 800573a:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.base = 0;
 800573e:	f04f 0200 	mov.w	r2, #0
 8005742:	f04f 0300 	mov.w	r3, #0
 8005746:	e9c7 2384 	strd	r2, r3, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800574a:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 800574e:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8005752:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8005756:	4413      	add	r3, r2
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2200      	movs	r2, #0
 800575e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005762:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005766:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800576a:	4623      	mov	r3, r4
 800576c:	4303      	orrs	r3, r0
 800576e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005770:	462b      	mov	r3, r5
 8005772:	430b      	orrs	r3, r1
 8005774:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005776:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800577a:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800577e:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8005782:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005786:	1c5a      	adds	r2, r3, #1
 8005788:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800578c:	4413      	add	r3, r2
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2200      	movs	r2, #0
 8005794:	673b      	str	r3, [r7, #112]	; 0x70
 8005796:	677a      	str	r2, [r7, #116]	; 0x74
 8005798:	f04f 0200 	mov.w	r2, #0
 800579c:	f04f 0300 	mov.w	r3, #0
 80057a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80057a4:	464c      	mov	r4, r9
 80057a6:	0223      	lsls	r3, r4, #8
 80057a8:	4644      	mov	r4, r8
 80057aa:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80057ae:	4644      	mov	r4, r8
 80057b0:	0222      	lsls	r2, r4, #8
 80057b2:	ea40 0402 	orr.w	r4, r0, r2
 80057b6:	66bc      	str	r4, [r7, #104]	; 0x68
 80057b8:	430b      	orrs	r3, r1
 80057ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057bc:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80057c0:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80057c4:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 80057c8:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80057cc:	1c9a      	adds	r2, r3, #2
 80057ce:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80057d2:	4413      	add	r3, r2
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	2200      	movs	r2, #0
 80057da:	663b      	str	r3, [r7, #96]	; 0x60
 80057dc:	667a      	str	r2, [r7, #100]	; 0x64
 80057de:	f04f 0200 	mov.w	r2, #0
 80057e2:	f04f 0300 	mov.w	r3, #0
 80057e6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80057ea:	464c      	mov	r4, r9
 80057ec:	0423      	lsls	r3, r4, #16
 80057ee:	4644      	mov	r4, r8
 80057f0:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80057f4:	4644      	mov	r4, r8
 80057f6:	0422      	lsls	r2, r4, #16
 80057f8:	ea40 0402 	orr.w	r4, r0, r2
 80057fc:	65bc      	str	r4, [r7, #88]	; 0x58
 80057fe:	430b      	orrs	r3, r1
 8005800:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005802:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8005806:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800580a:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 800580e:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005812:	1cda      	adds	r2, r3, #3
 8005814:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8005818:	4413      	add	r3, r2
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2200      	movs	r2, #0
 8005820:	653b      	str	r3, [r7, #80]	; 0x50
 8005822:	657a      	str	r2, [r7, #84]	; 0x54
 8005824:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8005828:	4623      	mov	r3, r4
 800582a:	0a1b      	lsrs	r3, r3, #8
 800582c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800582e:	4623      	mov	r3, r4
 8005830:	061b      	lsls	r3, r3, #24
 8005832:	64bb      	str	r3, [r7, #72]	; 0x48
 8005834:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8005838:	4623      	mov	r3, r4
 800583a:	4303      	orrs	r3, r0
 800583c:	643b      	str	r3, [r7, #64]	; 0x40
 800583e:	462b      	mov	r3, r5
 8005840:	430b      	orrs	r3, r1
 8005842:	647b      	str	r3, [r7, #68]	; 0x44
 8005844:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8005848:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800584c:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8005850:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005854:	1d1a      	adds	r2, r3, #4
 8005856:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800585a:	4413      	add	r3, r2
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2200      	movs	r2, #0
 8005862:	63bb      	str	r3, [r7, #56]	; 0x38
 8005864:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005866:	f04f 0200 	mov.w	r2, #0
 800586a:	f04f 0300 	mov.w	r3, #0
 800586e:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8005870:	0023      	movs	r3, r4
 8005872:	2200      	movs	r2, #0
 8005874:	ea40 0402 	orr.w	r4, r0, r2
 8005878:	633c      	str	r4, [r7, #48]	; 0x30
 800587a:	430b      	orrs	r3, r1
 800587c:	637b      	str	r3, [r7, #52]	; 0x34
 800587e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8005882:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005886:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 800588a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800588e:	1d5a      	adds	r2, r3, #5
 8005890:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8005894:	4413      	add	r3, r2
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2200      	movs	r2, #0
 800589c:	62bb      	str	r3, [r7, #40]	; 0x28
 800589e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058a0:	f04f 0200 	mov.w	r2, #0
 80058a4:	f04f 0300 	mov.w	r3, #0
 80058a8:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80058aa:	0223      	lsls	r3, r4, #8
 80058ac:	2200      	movs	r2, #0
 80058ae:	ea40 0402 	orr.w	r4, r0, r2
 80058b2:	623c      	str	r4, [r7, #32]
 80058b4:	430b      	orrs	r3, r1
 80058b6:	627b      	str	r3, [r7, #36]	; 0x24
 80058b8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80058bc:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80058c0:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 80058c4:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80058c8:	3306      	adds	r3, #6
 80058ca:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 80058ce:	4413      	add	r3, r2
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	2200      	movs	r2, #0
 80058d6:	61bb      	str	r3, [r7, #24]
 80058d8:	61fa      	str	r2, [r7, #28]
 80058da:	f04f 0200 	mov.w	r2, #0
 80058de:	f04f 0300 	mov.w	r3, #0
 80058e2:	69bc      	ldr	r4, [r7, #24]
 80058e4:	0423      	lsls	r3, r4, #16
 80058e6:	2200      	movs	r2, #0
 80058e8:	ea40 0402 	orr.w	r4, r0, r2
 80058ec:	613c      	str	r4, [r7, #16]
 80058ee:	430b      	orrs	r3, r1
 80058f0:	617b      	str	r3, [r7, #20]
 80058f2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80058f6:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80058fa:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 80058fe:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005902:	3307      	adds	r3, #7
 8005904:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8005908:	4413      	add	r3, r2
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2200      	movs	r2, #0
 8005910:	60bb      	str	r3, [r7, #8]
 8005912:	60fa      	str	r2, [r7, #12]
 8005914:	f04f 0200 	mov.w	r2, #0
 8005918:	f04f 0300 	mov.w	r3, #0
 800591c:	68bc      	ldr	r4, [r7, #8]
 800591e:	0623      	lsls	r3, r4, #24
 8005920:	2200      	movs	r2, #0
 8005922:	ea40 0402 	orr.w	r4, r0, r2
 8005926:	603c      	str	r4, [r7, #0]
 8005928:	430b      	orrs	r3, r1
 800592a:	607b      	str	r3, [r7, #4]
 800592c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005930:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      this->w = u_w.real;
 8005934:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	; 0x210
 8005938:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 800593c:	e9c1 2308 	strd	r2, r3, [r1, #32]
      offset += sizeof(this->w);
 8005940:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005944:	3308      	adds	r3, #8
 8005946:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
     return offset;
 800594a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
    }
 800594e:	4618      	mov	r0, r3
 8005950:	f507 770f 	add.w	r7, r7, #572	; 0x23c
 8005954:	46bd      	mov	sp, r7
 8005956:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800595a:	4770      	bx	lr

0800595c <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Quaternion"; };
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	4b03      	ldr	r3, [pc, #12]	; (8005974 <_ZN13geometry_msgs10Quaternion7getTypeEv+0x18>)
 8005966:	4618      	mov	r0, r3
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	08015418 	.word	0x08015418

08005978 <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    virtual const char * getMD5() override { return "a779879fadf0160734f906b8c19c7004"; };
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	4b03      	ldr	r3, [pc, #12]	; (8005990 <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x18>)
 8005982:	4618      	mov	r0, r3
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	08015434 	.word	0x08015434

08005994 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4618      	mov	r0, r3
 80059a0:	f7fe f99a 	bl	8003cd8 <_ZN3ros3MsgC1Ev>
 80059a4:	4a0e      	ldr	r2, [pc, #56]	; (80059e0 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	601a      	str	r2, [r3, #0]
      x(0),
 80059aa:	6879      	ldr	r1, [r7, #4]
 80059ac:	f04f 0200 	mov.w	r2, #0
 80059b0:	f04f 0300 	mov.w	r3, #0
 80059b4:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 80059b8:	6879      	ldr	r1, [r7, #4]
 80059ba:	f04f 0200 	mov.w	r2, #0
 80059be:	f04f 0300 	mov.w	r3, #0
 80059c2:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0)
 80059c6:	6879      	ldr	r1, [r7, #4]
 80059c8:	f04f 0200 	mov.w	r2, #0
 80059cc:	f04f 0300 	mov.w	r3, #0
 80059d0:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4618      	mov	r0, r3
 80059d8:	3708      	adds	r7, #8
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	080157f8 	.word	0x080157f8

080059e4 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80059e4:	b480      	push	{r7}
 80059e6:	b08b      	sub	sp, #44	; 0x2c
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80059ee:	2300      	movs	r3, #0
 80059f0:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80059f8:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80059fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a02:	6838      	ldr	r0, [r7, #0]
 8005a04:	4401      	add	r1, r0
 8005a06:	b2d3      	uxtb	r3, r2
 8005a08:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8005a0a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005a0e:	f04f 0200 	mov.w	r2, #0
 8005a12:	f04f 0300 	mov.w	r3, #0
 8005a16:	0a02      	lsrs	r2, r0, #8
 8005a18:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005a1c:	0a0b      	lsrs	r3, r1, #8
 8005a1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a20:	3101      	adds	r1, #1
 8005a22:	6838      	ldr	r0, [r7, #0]
 8005a24:	4401      	add	r1, r0
 8005a26:	b2d3      	uxtb	r3, r2
 8005a28:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8005a2a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005a2e:	f04f 0200 	mov.w	r2, #0
 8005a32:	f04f 0300 	mov.w	r3, #0
 8005a36:	0c02      	lsrs	r2, r0, #16
 8005a38:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005a3c:	0c0b      	lsrs	r3, r1, #16
 8005a3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a40:	3102      	adds	r1, #2
 8005a42:	6838      	ldr	r0, [r7, #0]
 8005a44:	4401      	add	r1, r0
 8005a46:	b2d3      	uxtb	r3, r2
 8005a48:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8005a4a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005a4e:	f04f 0200 	mov.w	r2, #0
 8005a52:	f04f 0300 	mov.w	r3, #0
 8005a56:	0e02      	lsrs	r2, r0, #24
 8005a58:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005a5c:	0e0b      	lsrs	r3, r1, #24
 8005a5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a60:	3103      	adds	r1, #3
 8005a62:	6838      	ldr	r0, [r7, #0]
 8005a64:	4401      	add	r1, r0
 8005a66:	b2d3      	uxtb	r3, r2
 8005a68:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8005a6a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005a6e:	f04f 0200 	mov.w	r2, #0
 8005a72:	f04f 0300 	mov.w	r3, #0
 8005a76:	000a      	movs	r2, r1
 8005a78:	2300      	movs	r3, #0
 8005a7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a7c:	3104      	adds	r1, #4
 8005a7e:	6838      	ldr	r0, [r7, #0]
 8005a80:	4401      	add	r1, r0
 8005a82:	b2d3      	uxtb	r3, r2
 8005a84:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8005a86:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005a8a:	f04f 0200 	mov.w	r2, #0
 8005a8e:	f04f 0300 	mov.w	r3, #0
 8005a92:	0a0a      	lsrs	r2, r1, #8
 8005a94:	2300      	movs	r3, #0
 8005a96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a98:	3105      	adds	r1, #5
 8005a9a:	6838      	ldr	r0, [r7, #0]
 8005a9c:	4401      	add	r1, r0
 8005a9e:	b2d3      	uxtb	r3, r2
 8005aa0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8005aa2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005aa6:	f04f 0200 	mov.w	r2, #0
 8005aaa:	f04f 0300 	mov.w	r3, #0
 8005aae:	0c0a      	lsrs	r2, r1, #16
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ab4:	3106      	adds	r1, #6
 8005ab6:	6838      	ldr	r0, [r7, #0]
 8005ab8:	4401      	add	r1, r0
 8005aba:	b2d3      	uxtb	r3, r2
 8005abc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8005abe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005ac2:	f04f 0200 	mov.w	r2, #0
 8005ac6:	f04f 0300 	mov.w	r3, #0
 8005aca:	0e0a      	lsrs	r2, r1, #24
 8005acc:	2300      	movs	r3, #0
 8005ace:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ad0:	3107      	adds	r1, #7
 8005ad2:	6838      	ldr	r0, [r7, #0]
 8005ad4:	4401      	add	r1, r0
 8005ad6:	b2d3      	uxtb	r3, r2
 8005ad8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	3308      	adds	r3, #8
 8005ade:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005ae6:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8005aea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005aee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005af0:	6838      	ldr	r0, [r7, #0]
 8005af2:	4401      	add	r1, r0
 8005af4:	b2d3      	uxtb	r3, r2
 8005af6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8005af8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005afc:	f04f 0200 	mov.w	r2, #0
 8005b00:	f04f 0300 	mov.w	r3, #0
 8005b04:	0a02      	lsrs	r2, r0, #8
 8005b06:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005b0a:	0a0b      	lsrs	r3, r1, #8
 8005b0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b0e:	3101      	adds	r1, #1
 8005b10:	6838      	ldr	r0, [r7, #0]
 8005b12:	4401      	add	r1, r0
 8005b14:	b2d3      	uxtb	r3, r2
 8005b16:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8005b18:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005b1c:	f04f 0200 	mov.w	r2, #0
 8005b20:	f04f 0300 	mov.w	r3, #0
 8005b24:	0c02      	lsrs	r2, r0, #16
 8005b26:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005b2a:	0c0b      	lsrs	r3, r1, #16
 8005b2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b2e:	3102      	adds	r1, #2
 8005b30:	6838      	ldr	r0, [r7, #0]
 8005b32:	4401      	add	r1, r0
 8005b34:	b2d3      	uxtb	r3, r2
 8005b36:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8005b38:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005b3c:	f04f 0200 	mov.w	r2, #0
 8005b40:	f04f 0300 	mov.w	r3, #0
 8005b44:	0e02      	lsrs	r2, r0, #24
 8005b46:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005b4a:	0e0b      	lsrs	r3, r1, #24
 8005b4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b4e:	3103      	adds	r1, #3
 8005b50:	6838      	ldr	r0, [r7, #0]
 8005b52:	4401      	add	r1, r0
 8005b54:	b2d3      	uxtb	r3, r2
 8005b56:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8005b58:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005b5c:	f04f 0200 	mov.w	r2, #0
 8005b60:	f04f 0300 	mov.w	r3, #0
 8005b64:	000a      	movs	r2, r1
 8005b66:	2300      	movs	r3, #0
 8005b68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b6a:	3104      	adds	r1, #4
 8005b6c:	6838      	ldr	r0, [r7, #0]
 8005b6e:	4401      	add	r1, r0
 8005b70:	b2d3      	uxtb	r3, r2
 8005b72:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8005b74:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005b78:	f04f 0200 	mov.w	r2, #0
 8005b7c:	f04f 0300 	mov.w	r3, #0
 8005b80:	0a0a      	lsrs	r2, r1, #8
 8005b82:	2300      	movs	r3, #0
 8005b84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b86:	3105      	adds	r1, #5
 8005b88:	6838      	ldr	r0, [r7, #0]
 8005b8a:	4401      	add	r1, r0
 8005b8c:	b2d3      	uxtb	r3, r2
 8005b8e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8005b90:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005b94:	f04f 0200 	mov.w	r2, #0
 8005b98:	f04f 0300 	mov.w	r3, #0
 8005b9c:	0c0a      	lsrs	r2, r1, #16
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ba2:	3106      	adds	r1, #6
 8005ba4:	6838      	ldr	r0, [r7, #0]
 8005ba6:	4401      	add	r1, r0
 8005ba8:	b2d3      	uxtb	r3, r2
 8005baa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8005bac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005bb0:	f04f 0200 	mov.w	r2, #0
 8005bb4:	f04f 0300 	mov.w	r3, #0
 8005bb8:	0e0a      	lsrs	r2, r1, #24
 8005bba:	2300      	movs	r3, #0
 8005bbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005bbe:	3107      	adds	r1, #7
 8005bc0:	6838      	ldr	r0, [r7, #0]
 8005bc2:	4401      	add	r1, r0
 8005bc4:	b2d3      	uxtb	r3, r2
 8005bc6:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bca:	3308      	adds	r3, #8
 8005bcc:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005bd4:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8005bd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005bde:	6838      	ldr	r0, [r7, #0]
 8005be0:	4401      	add	r1, r0
 8005be2:	b2d3      	uxtb	r3, r2
 8005be4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8005be6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005bea:	f04f 0200 	mov.w	r2, #0
 8005bee:	f04f 0300 	mov.w	r3, #0
 8005bf2:	0a02      	lsrs	r2, r0, #8
 8005bf4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005bf8:	0a0b      	lsrs	r3, r1, #8
 8005bfa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005bfc:	3101      	adds	r1, #1
 8005bfe:	6838      	ldr	r0, [r7, #0]
 8005c00:	4401      	add	r1, r0
 8005c02:	b2d3      	uxtb	r3, r2
 8005c04:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8005c06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c0a:	f04f 0200 	mov.w	r2, #0
 8005c0e:	f04f 0300 	mov.w	r3, #0
 8005c12:	0c02      	lsrs	r2, r0, #16
 8005c14:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005c18:	0c0b      	lsrs	r3, r1, #16
 8005c1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c1c:	3102      	adds	r1, #2
 8005c1e:	6838      	ldr	r0, [r7, #0]
 8005c20:	4401      	add	r1, r0
 8005c22:	b2d3      	uxtb	r3, r2
 8005c24:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8005c26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c2a:	f04f 0200 	mov.w	r2, #0
 8005c2e:	f04f 0300 	mov.w	r3, #0
 8005c32:	0e02      	lsrs	r2, r0, #24
 8005c34:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005c38:	0e0b      	lsrs	r3, r1, #24
 8005c3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c3c:	3103      	adds	r1, #3
 8005c3e:	6838      	ldr	r0, [r7, #0]
 8005c40:	4401      	add	r1, r0
 8005c42:	b2d3      	uxtb	r3, r2
 8005c44:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8005c46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c4a:	f04f 0200 	mov.w	r2, #0
 8005c4e:	f04f 0300 	mov.w	r3, #0
 8005c52:	000a      	movs	r2, r1
 8005c54:	2300      	movs	r3, #0
 8005c56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c58:	3104      	adds	r1, #4
 8005c5a:	6838      	ldr	r0, [r7, #0]
 8005c5c:	4401      	add	r1, r0
 8005c5e:	b2d3      	uxtb	r3, r2
 8005c60:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8005c62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c66:	f04f 0200 	mov.w	r2, #0
 8005c6a:	f04f 0300 	mov.w	r3, #0
 8005c6e:	0a0a      	lsrs	r2, r1, #8
 8005c70:	2300      	movs	r3, #0
 8005c72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c74:	3105      	adds	r1, #5
 8005c76:	6838      	ldr	r0, [r7, #0]
 8005c78:	4401      	add	r1, r0
 8005c7a:	b2d3      	uxtb	r3, r2
 8005c7c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8005c7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c82:	f04f 0200 	mov.w	r2, #0
 8005c86:	f04f 0300 	mov.w	r3, #0
 8005c8a:	0c0a      	lsrs	r2, r1, #16
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c90:	3106      	adds	r1, #6
 8005c92:	6838      	ldr	r0, [r7, #0]
 8005c94:	4401      	add	r1, r0
 8005c96:	b2d3      	uxtb	r3, r2
 8005c98:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8005c9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c9e:	f04f 0200 	mov.w	r2, #0
 8005ca2:	f04f 0300 	mov.w	r3, #0
 8005ca6:	0e0a      	lsrs	r2, r1, #24
 8005ca8:	2300      	movs	r3, #0
 8005caa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005cac:	3107      	adds	r1, #7
 8005cae:	6838      	ldr	r0, [r7, #0]
 8005cb0:	4401      	add	r1, r0
 8005cb2:	b2d3      	uxtb	r3, r2
 8005cb4:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb8:	3308      	adds	r3, #8
 8005cba:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	372c      	adds	r7, #44	; 0x2c
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr

08005cca <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8005cca:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8005cce:	b0eb      	sub	sp, #428	; 0x1ac
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8005cd6:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8005ce0:	f04f 0200 	mov.w	r2, #0
 8005ce4:	f04f 0300 	mov.w	r3, #0
 8005ce8:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005cec:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8005cf0:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8005cf4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005cf8:	4413      	add	r3, r2
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2200      	movs	r2, #0
 8005d00:	461c      	mov	r4, r3
 8005d02:	4615      	mov	r5, r2
 8005d04:	ea40 0804 	orr.w	r8, r0, r4
 8005d08:	ea41 0905 	orr.w	r9, r1, r5
 8005d0c:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005d10:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8005d14:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005d18:	1c5a      	adds	r2, r3, #1
 8005d1a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005d1e:	4413      	add	r3, r2
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2200      	movs	r2, #0
 8005d26:	469a      	mov	sl, r3
 8005d28:	4693      	mov	fp, r2
 8005d2a:	f04f 0200 	mov.w	r2, #0
 8005d2e:	f04f 0300 	mov.w	r3, #0
 8005d32:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8005d36:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8005d3a:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8005d3e:	ea40 0402 	orr.w	r4, r0, r2
 8005d42:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8005d46:	430b      	orrs	r3, r1
 8005d48:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8005d4c:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8005d50:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005d54:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8005d58:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005d5c:	1c9a      	adds	r2, r3, #2
 8005d5e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005d62:	4413      	add	r3, r2
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8005d6e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8005d72:	f04f 0200 	mov.w	r2, #0
 8005d76:	f04f 0300 	mov.w	r3, #0
 8005d7a:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8005d7e:	464c      	mov	r4, r9
 8005d80:	0423      	lsls	r3, r4, #16
 8005d82:	4644      	mov	r4, r8
 8005d84:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8005d88:	4644      	mov	r4, r8
 8005d8a:	0422      	lsls	r2, r4, #16
 8005d8c:	ea40 0402 	orr.w	r4, r0, r2
 8005d90:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8005d94:	430b      	orrs	r3, r1
 8005d96:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005d9a:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8005d9e:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005da2:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8005da6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005daa:	1cda      	adds	r2, r3, #3
 8005dac:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005db0:	4413      	add	r3, r2
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2200      	movs	r2, #0
 8005db8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8005dbc:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8005dc0:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8005dc4:	4623      	mov	r3, r4
 8005dc6:	0a1b      	lsrs	r3, r3, #8
 8005dc8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8005dcc:	4623      	mov	r3, r4
 8005dce:	061b      	lsls	r3, r3, #24
 8005dd0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8005dd4:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8005dd8:	4623      	mov	r3, r4
 8005dda:	4303      	orrs	r3, r0
 8005ddc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005de0:	462b      	mov	r3, r5
 8005de2:	430b      	orrs	r3, r1
 8005de4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005de8:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8005dec:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005df0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8005df4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005df8:	1d1a      	adds	r2, r3, #4
 8005dfa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005dfe:	4413      	add	r3, r2
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2200      	movs	r2, #0
 8005e06:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8005e0a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8005e0e:	f04f 0200 	mov.w	r2, #0
 8005e12:	f04f 0300 	mov.w	r3, #0
 8005e16:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8005e1a:	0023      	movs	r3, r4
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	ea40 0402 	orr.w	r4, r0, r2
 8005e22:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8005e26:	430b      	orrs	r3, r1
 8005e28:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8005e2c:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8005e30:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005e34:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8005e38:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005e3c:	1d5a      	adds	r2, r3, #5
 8005e3e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005e42:	4413      	add	r3, r2
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8005e4e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8005e52:	f04f 0200 	mov.w	r2, #0
 8005e56:	f04f 0300 	mov.w	r3, #0
 8005e5a:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8005e5e:	0223      	lsls	r3, r4, #8
 8005e60:	2200      	movs	r2, #0
 8005e62:	ea40 0402 	orr.w	r4, r0, r2
 8005e66:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8005e6a:	430b      	orrs	r3, r1
 8005e6c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8005e70:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8005e74:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005e78:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8005e7c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005e80:	1d9a      	adds	r2, r3, #6
 8005e82:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005e86:	4413      	add	r3, r2
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005e92:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8005e96:	f04f 0200 	mov.w	r2, #0
 8005e9a:	f04f 0300 	mov.w	r3, #0
 8005e9e:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8005ea2:	0423      	lsls	r3, r4, #16
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	ea40 0402 	orr.w	r4, r0, r2
 8005eaa:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8005eae:	430b      	orrs	r3, r1
 8005eb0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005eb4:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8005eb8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005ebc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8005ec0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005ec4:	1dda      	adds	r2, r3, #7
 8005ec6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005eca:	4413      	add	r3, r2
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005ed6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8005eda:	f04f 0200 	mov.w	r2, #0
 8005ede:	f04f 0300 	mov.w	r3, #0
 8005ee2:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8005ee6:	0623      	lsls	r3, r4, #24
 8005ee8:	2200      	movs	r2, #0
 8005eea:	ea40 0402 	orr.w	r4, r0, r2
 8005eee:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8005ef2:	430b      	orrs	r3, r1
 8005ef4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005ef8:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8005efc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8005f00:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8005f04:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8005f08:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8005f0c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005f10:	3308      	adds	r3, #8
 8005f12:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8005f16:	f04f 0200 	mov.w	r2, #0
 8005f1a:	f04f 0300 	mov.w	r3, #0
 8005f1e:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005f22:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005f26:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8005f2a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005f2e:	4413      	add	r3, r2
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	2200      	movs	r2, #0
 8005f36:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005f3a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8005f3e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8005f42:	4623      	mov	r3, r4
 8005f44:	4303      	orrs	r3, r0
 8005f46:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f4a:	462b      	mov	r3, r5
 8005f4c:	430b      	orrs	r3, r1
 8005f4e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005f52:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8005f56:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005f5a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005f5e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005f62:	1c5a      	adds	r2, r3, #1
 8005f64:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005f68:	4413      	add	r3, r2
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005f74:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8005f78:	f04f 0200 	mov.w	r2, #0
 8005f7c:	f04f 0300 	mov.w	r3, #0
 8005f80:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8005f84:	464c      	mov	r4, r9
 8005f86:	0223      	lsls	r3, r4, #8
 8005f88:	4644      	mov	r4, r8
 8005f8a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005f8e:	4644      	mov	r4, r8
 8005f90:	0222      	lsls	r2, r4, #8
 8005f92:	ea40 0402 	orr.w	r4, r0, r2
 8005f96:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8005f9a:	430b      	orrs	r3, r1
 8005f9c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005fa0:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8005fa4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005fa8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005fac:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005fb0:	1c9a      	adds	r2, r3, #2
 8005fb2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005fb6:	4413      	add	r3, r2
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005fc2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005fc6:	f04f 0200 	mov.w	r2, #0
 8005fca:	f04f 0300 	mov.w	r3, #0
 8005fce:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8005fd2:	464c      	mov	r4, r9
 8005fd4:	0423      	lsls	r3, r4, #16
 8005fd6:	4644      	mov	r4, r8
 8005fd8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8005fdc:	4644      	mov	r4, r8
 8005fde:	0422      	lsls	r2, r4, #16
 8005fe0:	ea40 0402 	orr.w	r4, r0, r2
 8005fe4:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8005fe8:	430b      	orrs	r3, r1
 8005fea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005fee:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8005ff2:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005ff6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005ffa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005ffe:	1cda      	adds	r2, r3, #3
 8006000:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8006004:	4413      	add	r3, r2
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2200      	movs	r2, #0
 800600c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006010:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006014:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8006018:	4623      	mov	r3, r4
 800601a:	0a1b      	lsrs	r3, r3, #8
 800601c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006020:	4623      	mov	r3, r4
 8006022:	061b      	lsls	r3, r3, #24
 8006024:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006028:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800602c:	4623      	mov	r3, r4
 800602e:	4303      	orrs	r3, r0
 8006030:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006034:	462b      	mov	r3, r5
 8006036:	430b      	orrs	r3, r1
 8006038:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800603c:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8006040:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8006044:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8006048:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800604c:	1d1a      	adds	r2, r3, #4
 800604e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8006052:	4413      	add	r3, r2
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	b2db      	uxtb	r3, r3
 8006058:	2200      	movs	r2, #0
 800605a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800605e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006062:	f04f 0200 	mov.w	r2, #0
 8006066:	f04f 0300 	mov.w	r3, #0
 800606a:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 800606e:	0023      	movs	r3, r4
 8006070:	2200      	movs	r2, #0
 8006072:	ea40 0402 	orr.w	r4, r0, r2
 8006076:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800607a:	430b      	orrs	r3, r1
 800607c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006080:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8006084:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8006088:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800608c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8006090:	1d5a      	adds	r2, r3, #5
 8006092:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8006096:	4413      	add	r3, r2
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	b2db      	uxtb	r3, r3
 800609c:	2200      	movs	r2, #0
 800609e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80060a2:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80060a6:	f04f 0200 	mov.w	r2, #0
 80060aa:	f04f 0300 	mov.w	r3, #0
 80060ae:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 80060b2:	0223      	lsls	r3, r4, #8
 80060b4:	2200      	movs	r2, #0
 80060b6:	ea40 0402 	orr.w	r4, r0, r2
 80060ba:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80060be:	430b      	orrs	r3, r1
 80060c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80060c4:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80060c8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80060cc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80060d0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80060d4:	1d9a      	adds	r2, r3, #6
 80060d6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80060da:	4413      	add	r3, r2
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	2200      	movs	r2, #0
 80060e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80060e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80060ea:	f04f 0200 	mov.w	r2, #0
 80060ee:	f04f 0300 	mov.w	r3, #0
 80060f2:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80060f6:	0423      	lsls	r3, r4, #16
 80060f8:	2200      	movs	r2, #0
 80060fa:	ea40 0402 	orr.w	r4, r0, r2
 80060fe:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8006102:	430b      	orrs	r3, r1
 8006104:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006108:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 800610c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8006110:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8006114:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8006118:	1dda      	adds	r2, r3, #7
 800611a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800611e:	4413      	add	r3, r2
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	b2db      	uxtb	r3, r3
 8006124:	2200      	movs	r2, #0
 8006126:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800612a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800612e:	f04f 0200 	mov.w	r2, #0
 8006132:	f04f 0300 	mov.w	r3, #0
 8006136:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800613a:	0623      	lsls	r3, r4, #24
 800613c:	2200      	movs	r2, #0
 800613e:	ea40 0402 	orr.w	r4, r0, r2
 8006142:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8006146:	430b      	orrs	r3, r1
 8006148:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800614c:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8006150:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8006154:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8006158:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800615c:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8006160:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8006164:	3308      	adds	r3, #8
 8006166:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 800616a:	f04f 0200 	mov.w	r2, #0
 800616e:	f04f 0300 	mov.w	r3, #0
 8006172:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006176:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800617a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800617e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8006182:	4413      	add	r3, r2
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	b2db      	uxtb	r3, r3
 8006188:	2200      	movs	r2, #0
 800618a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800618e:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006192:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8006196:	4623      	mov	r3, r4
 8006198:	4303      	orrs	r3, r0
 800619a:	67bb      	str	r3, [r7, #120]	; 0x78
 800619c:	462b      	mov	r3, r5
 800619e:	430b      	orrs	r3, r1
 80061a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80061a2:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80061a6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80061aa:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80061ae:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80061b2:	1c5a      	adds	r2, r3, #1
 80061b4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80061b8:	4413      	add	r3, r2
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2200      	movs	r2, #0
 80061c0:	673b      	str	r3, [r7, #112]	; 0x70
 80061c2:	677a      	str	r2, [r7, #116]	; 0x74
 80061c4:	f04f 0200 	mov.w	r2, #0
 80061c8:	f04f 0300 	mov.w	r3, #0
 80061cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80061d0:	464c      	mov	r4, r9
 80061d2:	0223      	lsls	r3, r4, #8
 80061d4:	4644      	mov	r4, r8
 80061d6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80061da:	4644      	mov	r4, r8
 80061dc:	0222      	lsls	r2, r4, #8
 80061de:	ea40 0402 	orr.w	r4, r0, r2
 80061e2:	66bc      	str	r4, [r7, #104]	; 0x68
 80061e4:	430b      	orrs	r3, r1
 80061e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061e8:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80061ec:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80061f0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80061f4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80061f8:	1c9a      	adds	r2, r3, #2
 80061fa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80061fe:	4413      	add	r3, r2
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	b2db      	uxtb	r3, r3
 8006204:	2200      	movs	r2, #0
 8006206:	663b      	str	r3, [r7, #96]	; 0x60
 8006208:	667a      	str	r2, [r7, #100]	; 0x64
 800620a:	f04f 0200 	mov.w	r2, #0
 800620e:	f04f 0300 	mov.w	r3, #0
 8006212:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006216:	464c      	mov	r4, r9
 8006218:	0423      	lsls	r3, r4, #16
 800621a:	4644      	mov	r4, r8
 800621c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8006220:	4644      	mov	r4, r8
 8006222:	0422      	lsls	r2, r4, #16
 8006224:	ea40 0402 	orr.w	r4, r0, r2
 8006228:	65bc      	str	r4, [r7, #88]	; 0x58
 800622a:	430b      	orrs	r3, r1
 800622c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800622e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8006232:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006236:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800623a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800623e:	1cda      	adds	r2, r3, #3
 8006240:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8006244:	4413      	add	r3, r2
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	b2db      	uxtb	r3, r3
 800624a:	2200      	movs	r2, #0
 800624c:	653b      	str	r3, [r7, #80]	; 0x50
 800624e:	657a      	str	r2, [r7, #84]	; 0x54
 8006250:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8006254:	4623      	mov	r3, r4
 8006256:	0a1b      	lsrs	r3, r3, #8
 8006258:	64fb      	str	r3, [r7, #76]	; 0x4c
 800625a:	4623      	mov	r3, r4
 800625c:	061b      	lsls	r3, r3, #24
 800625e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006260:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8006264:	4623      	mov	r3, r4
 8006266:	4303      	orrs	r3, r0
 8006268:	643b      	str	r3, [r7, #64]	; 0x40
 800626a:	462b      	mov	r3, r5
 800626c:	430b      	orrs	r3, r1
 800626e:	647b      	str	r3, [r7, #68]	; 0x44
 8006270:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8006274:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8006278:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800627c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8006280:	1d1a      	adds	r2, r3, #4
 8006282:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8006286:	4413      	add	r3, r2
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	b2db      	uxtb	r3, r3
 800628c:	2200      	movs	r2, #0
 800628e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006290:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006292:	f04f 0200 	mov.w	r2, #0
 8006296:	f04f 0300 	mov.w	r3, #0
 800629a:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800629c:	0023      	movs	r3, r4
 800629e:	2200      	movs	r2, #0
 80062a0:	ea40 0402 	orr.w	r4, r0, r2
 80062a4:	633c      	str	r4, [r7, #48]	; 0x30
 80062a6:	430b      	orrs	r3, r1
 80062a8:	637b      	str	r3, [r7, #52]	; 0x34
 80062aa:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80062ae:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80062b2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80062b6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80062ba:	1d5a      	adds	r2, r3, #5
 80062bc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80062c0:	4413      	add	r3, r2
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2200      	movs	r2, #0
 80062c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80062ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062cc:	f04f 0200 	mov.w	r2, #0
 80062d0:	f04f 0300 	mov.w	r3, #0
 80062d4:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80062d6:	0223      	lsls	r3, r4, #8
 80062d8:	2200      	movs	r2, #0
 80062da:	ea40 0402 	orr.w	r4, r0, r2
 80062de:	623c      	str	r4, [r7, #32]
 80062e0:	430b      	orrs	r3, r1
 80062e2:	627b      	str	r3, [r7, #36]	; 0x24
 80062e4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80062e8:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80062ec:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80062f0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80062f4:	3306      	adds	r3, #6
 80062f6:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80062fa:	4413      	add	r3, r2
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	2200      	movs	r2, #0
 8006302:	61bb      	str	r3, [r7, #24]
 8006304:	61fa      	str	r2, [r7, #28]
 8006306:	f04f 0200 	mov.w	r2, #0
 800630a:	f04f 0300 	mov.w	r3, #0
 800630e:	69bc      	ldr	r4, [r7, #24]
 8006310:	0423      	lsls	r3, r4, #16
 8006312:	2200      	movs	r2, #0
 8006314:	ea40 0402 	orr.w	r4, r0, r2
 8006318:	613c      	str	r4, [r7, #16]
 800631a:	430b      	orrs	r3, r1
 800631c:	617b      	str	r3, [r7, #20]
 800631e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006322:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8006326:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800632a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800632e:	3307      	adds	r3, #7
 8006330:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8006334:	4413      	add	r3, r2
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2200      	movs	r2, #0
 800633c:	60bb      	str	r3, [r7, #8]
 800633e:	60fa      	str	r2, [r7, #12]
 8006340:	f04f 0200 	mov.w	r2, #0
 8006344:	f04f 0300 	mov.w	r3, #0
 8006348:	68bc      	ldr	r4, [r7, #8]
 800634a:	0623      	lsls	r3, r4, #24
 800634c:	2200      	movs	r2, #0
 800634e:	ea40 0402 	orr.w	r4, r0, r2
 8006352:	603c      	str	r4, [r7, #0]
 8006354:	430b      	orrs	r3, r1
 8006356:	607b      	str	r3, [r7, #4]
 8006358:	e9d7 3400 	ldrd	r3, r4, [r7]
 800635c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8006360:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8006364:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8006368:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 800636c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8006370:	3308      	adds	r3, #8
 8006372:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8006376:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 800637a:	4618      	mov	r0, r3
 800637c:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8006380:	46bd      	mov	sp, r7
 8006382:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8006386:	4770      	bx	lr

08006388 <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	4b03      	ldr	r3, [pc, #12]	; (80063a0 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8006392:	4618      	mov	r0, r3
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	08015458 	.word	0x08015458

080063a4 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	4b03      	ldr	r3, [pc, #12]	; (80063bc <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 80063ae:	4618      	mov	r0, r3
 80063b0:	370c      	adds	r7, #12
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	08015470 	.word	0x08015470

080063c0 <_ZN8std_msgs7Float32C1Ev>:
  {
    public:
      typedef float _data_type;
      _data_type data;

    Float32():
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
      data(0)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7fd fc84 	bl	8003cd8 <_ZN3ros3MsgC1Ev>
 80063d0:	4a05      	ldr	r2, [pc, #20]	; (80063e8 <_ZN8std_msgs7Float32C1Ev+0x28>)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	601a      	str	r2, [r3, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f04f 0200 	mov.w	r2, #0
 80063dc:	605a      	str	r2, [r3, #4]
    {
    }
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4618      	mov	r0, r3
 80063e2:	3708      	adds	r7, #8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	080157e0 	.word	0x080157e0

080063ec <_ZNK8std_msgs7Float329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80063f6:	2300      	movs	r3, #0
 80063f8:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8006400:	68b9      	ldr	r1, [r7, #8]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	683a      	ldr	r2, [r7, #0]
 8006406:	4413      	add	r3, r2
 8006408:	b2ca      	uxtb	r2, r1
 800640a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	0a19      	lsrs	r1, r3, #8
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	3301      	adds	r3, #1
 8006414:	683a      	ldr	r2, [r7, #0]
 8006416:	4413      	add	r3, r2
 8006418:	b2ca      	uxtb	r2, r1
 800641a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	0c19      	lsrs	r1, r3, #16
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	3302      	adds	r3, #2
 8006424:	683a      	ldr	r2, [r7, #0]
 8006426:	4413      	add	r3, r2
 8006428:	b2ca      	uxtb	r2, r1
 800642a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	0e19      	lsrs	r1, r3, #24
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	3303      	adds	r3, #3
 8006434:	683a      	ldr	r2, [r7, #0]
 8006436:	4413      	add	r3, r2
 8006438:	b2ca      	uxtb	r2, r1
 800643a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	3304      	adds	r3, #4
 8006440:	60fb      	str	r3, [r7, #12]
      return offset;
 8006442:	68fb      	ldr	r3, [r7, #12]
    }
 8006444:	4618      	mov	r0, r3
 8006446:	3714      	adds	r7, #20
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <_ZN8std_msgs7Float3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800645a:	2300      	movs	r3, #0
 800645c:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 800645e:	2300      	movs	r3, #0
 8006460:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	6839      	ldr	r1, [r7, #0]
 8006468:	440a      	add	r2, r1
 800646a:	7812      	ldrb	r2, [r2, #0]
 800646c:	4313      	orrs	r3, r2
 800646e:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006470:	68ba      	ldr	r2, [r7, #8]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	3301      	adds	r3, #1
 8006476:	6839      	ldr	r1, [r7, #0]
 8006478:	440b      	add	r3, r1
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	021b      	lsls	r3, r3, #8
 800647e:	4313      	orrs	r3, r2
 8006480:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	3302      	adds	r3, #2
 8006488:	6839      	ldr	r1, [r7, #0]
 800648a:	440b      	add	r3, r1
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	041b      	lsls	r3, r3, #16
 8006490:	4313      	orrs	r3, r2
 8006492:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006494:	68ba      	ldr	r2, [r7, #8]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	3303      	adds	r3, #3
 800649a:	6839      	ldr	r1, [r7, #0]
 800649c:	440b      	add	r3, r1
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	061b      	lsls	r3, r3, #24
 80064a2:	4313      	orrs	r3, r2
 80064a4:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 80064a6:	68ba      	ldr	r2, [r7, #8]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	3304      	adds	r3, #4
 80064b0:	60fb      	str	r3, [r7, #12]
     return offset;
 80064b2:	68fb      	ldr	r3, [r7, #12]
    }
 80064b4:	4618      	mov	r0, r3
 80064b6:	3714      	adds	r7, #20
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <_ZN8std_msgs7Float327getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float32"; };
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	4b03      	ldr	r3, [pc, #12]	; (80064d8 <_ZN8std_msgs7Float327getTypeEv+0x18>)
 80064ca:	4618      	mov	r0, r3
 80064cc:	370c      	adds	r7, #12
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop
 80064d8:	08015494 	.word	0x08015494

080064dc <_ZN8std_msgs7Float326getMD5Ev>:
    virtual const char * getMD5() override { return "73fcbf46b49191e672908e50842a83d4"; };
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	4b03      	ldr	r3, [pc, #12]	; (80064f4 <_ZN8std_msgs7Float326getMD5Ev+0x18>)
 80064e6:	4618      	mov	r0, r3
 80064e8:	370c      	adds	r7, #12
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	080154a8 	.word	0x080154a8

080064f8 <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4618      	mov	r0, r3
 8006504:	f7fd fbe8 	bl	8003cd8 <_ZN3ros3MsgC1Ev>
 8006508:	4a08      	ldr	r2, [pc, #32]	; (800652c <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	601a      	str	r2, [r3, #0]
      label(""),
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a07      	ldr	r2, [pc, #28]	; (8006530 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 8006512:	605a      	str	r2, [r3, #4]
      size(0),
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	609a      	str	r2, [r3, #8]
      stride(0)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	60da      	str	r2, [r3, #12]
    {
    }
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4618      	mov	r0, r3
 8006524:	3708      	adds	r7, #8
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	080157c8 	.word	0x080157c8
 8006530:	08015378 	.word	0x08015378

08006534 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800653e:	2300      	movs	r3, #0
 8006540:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	4618      	mov	r0, r3
 8006548:	f7f9 fea2 	bl	8000290 <strlen>
 800654c:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	683a      	ldr	r2, [r7, #0]
 8006552:	4413      	add	r3, r2
 8006554:	68b9      	ldr	r1, [r7, #8]
 8006556:	4618      	mov	r0, r3
 8006558:	f000 fe34 	bl	80071c4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	3304      	adds	r3, #4
 8006560:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	683a      	ldr	r2, [r7, #0]
 8006566:	18d0      	adds	r0, r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	4619      	mov	r1, r3
 8006570:	f00c fdd5 	bl	801311e <memcpy>
      offset += length_label;
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	4413      	add	r3, r2
 800657a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6899      	ldr	r1, [r3, #8]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	683a      	ldr	r2, [r7, #0]
 8006584:	4413      	add	r3, r2
 8006586:	b2ca      	uxtb	r2, r1
 8006588:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	0a19      	lsrs	r1, r3, #8
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	3301      	adds	r3, #1
 8006594:	683a      	ldr	r2, [r7, #0]
 8006596:	4413      	add	r3, r2
 8006598:	b2ca      	uxtb	r2, r1
 800659a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	0c19      	lsrs	r1, r3, #16
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	3302      	adds	r3, #2
 80065a6:	683a      	ldr	r2, [r7, #0]
 80065a8:	4413      	add	r3, r2
 80065aa:	b2ca      	uxtb	r2, r1
 80065ac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	0e19      	lsrs	r1, r3, #24
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	3303      	adds	r3, #3
 80065b8:	683a      	ldr	r2, [r7, #0]
 80065ba:	4413      	add	r3, r2
 80065bc:	b2ca      	uxtb	r2, r1
 80065be:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	3304      	adds	r3, #4
 80065c4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	68d9      	ldr	r1, [r3, #12]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	683a      	ldr	r2, [r7, #0]
 80065ce:	4413      	add	r3, r2
 80065d0:	b2ca      	uxtb	r2, r1
 80065d2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	0a19      	lsrs	r1, r3, #8
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	3301      	adds	r3, #1
 80065de:	683a      	ldr	r2, [r7, #0]
 80065e0:	4413      	add	r3, r2
 80065e2:	b2ca      	uxtb	r2, r1
 80065e4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	0c19      	lsrs	r1, r3, #16
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	3302      	adds	r3, #2
 80065f0:	683a      	ldr	r2, [r7, #0]
 80065f2:	4413      	add	r3, r2
 80065f4:	b2ca      	uxtb	r2, r1
 80065f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	0e19      	lsrs	r1, r3, #24
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	3303      	adds	r3, #3
 8006602:	683a      	ldr	r2, [r7, #0]
 8006604:	4413      	add	r3, r2
 8006606:	b2ca      	uxtb	r2, r1
 8006608:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	3304      	adds	r3, #4
 800660e:	60fb      	str	r3, [r7, #12]
      return offset;
 8006610:	68fb      	ldr	r3, [r7, #12]
    }
 8006612:	4618      	mov	r0, r3
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800661a:	b580      	push	{r7, lr}
 800661c:	b086      	sub	sp, #24
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
 8006622:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006624:	2300      	movs	r3, #0
 8006626:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	683a      	ldr	r2, [r7, #0]
 800662c:	441a      	add	r2, r3
 800662e:	f107 030c 	add.w	r3, r7, #12
 8006632:	4611      	mov	r1, r2
 8006634:	4618      	mov	r0, r3
 8006636:	f000 fde4 	bl	8007202 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	3304      	adds	r3, #4
 800663e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	617b      	str	r3, [r7, #20]
 8006644:	e00b      	b.n	800665e <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 8006646:	683a      	ldr	r2, [r7, #0]
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	441a      	add	r2, r3
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	3b01      	subs	r3, #1
 8006650:	6839      	ldr	r1, [r7, #0]
 8006652:	440b      	add	r3, r1
 8006654:	7812      	ldrb	r2, [r2, #0]
 8006656:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	3301      	adds	r3, #1
 800665c:	617b      	str	r3, [r7, #20]
 800665e:	693a      	ldr	r2, [r7, #16]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	4413      	add	r3, r2
 8006664:	697a      	ldr	r2, [r7, #20]
 8006666:	429a      	cmp	r2, r3
 8006668:	d3ed      	bcc.n	8006646 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_label-1]=0;
 800666a:	693a      	ldr	r2, [r7, #16]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	4413      	add	r3, r2
 8006670:	3b01      	subs	r3, #1
 8006672:	683a      	ldr	r2, [r7, #0]
 8006674:	4413      	add	r3, r2
 8006676:	2200      	movs	r2, #0
 8006678:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	3b01      	subs	r3, #1
 800667e:	683a      	ldr	r2, [r7, #0]
 8006680:	441a      	add	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	605a      	str	r2, [r3, #4]
      offset += length_label;
 8006686:	693a      	ldr	r2, [r7, #16]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	4413      	add	r3, r2
 800668c:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	683a      	ldr	r2, [r7, #0]
 8006692:	4413      	add	r3, r2
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	461a      	mov	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	689a      	ldr	r2, [r3, #8]
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	3301      	adds	r3, #1
 80066a4:	6839      	ldr	r1, [r7, #0]
 80066a6:	440b      	add	r3, r1
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	021b      	lsls	r3, r3, #8
 80066ac:	431a      	orrs	r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	689a      	ldr	r2, [r3, #8]
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	3302      	adds	r3, #2
 80066ba:	6839      	ldr	r1, [r7, #0]
 80066bc:	440b      	add	r3, r1
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	041b      	lsls	r3, r3, #16
 80066c2:	431a      	orrs	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	689a      	ldr	r2, [r3, #8]
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	3303      	adds	r3, #3
 80066d0:	6839      	ldr	r1, [r7, #0]
 80066d2:	440b      	add	r3, r1
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	061b      	lsls	r3, r3, #24
 80066d8:	431a      	orrs	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	3304      	adds	r3, #4
 80066e2:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	4413      	add	r3, r2
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	461a      	mov	r2, r3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	68da      	ldr	r2, [r3, #12]
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	3301      	adds	r3, #1
 80066fa:	6839      	ldr	r1, [r7, #0]
 80066fc:	440b      	add	r3, r1
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	021b      	lsls	r3, r3, #8
 8006702:	431a      	orrs	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	68da      	ldr	r2, [r3, #12]
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	3302      	adds	r3, #2
 8006710:	6839      	ldr	r1, [r7, #0]
 8006712:	440b      	add	r3, r1
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	041b      	lsls	r3, r3, #16
 8006718:	431a      	orrs	r2, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	68da      	ldr	r2, [r3, #12]
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	3303      	adds	r3, #3
 8006726:	6839      	ldr	r1, [r7, #0]
 8006728:	440b      	add	r3, r1
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	061b      	lsls	r3, r3, #24
 800672e:	431a      	orrs	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	3304      	adds	r3, #4
 8006738:	613b      	str	r3, [r7, #16]
     return offset;
 800673a:	693b      	ldr	r3, [r7, #16]
    }
 800673c:	4618      	mov	r0, r3
 800673e:	3718      	adds	r7, #24
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayDimension"; };
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	4b03      	ldr	r3, [pc, #12]	; (800675c <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 800674e:	4618      	mov	r0, r3
 8006750:	370c      	adds	r7, #12
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	080154cc 	.word	0x080154cc

08006760 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    virtual const char * getMD5() override { return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	4b03      	ldr	r3, [pc, #12]	; (8006778 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 800676a:	4618      	mov	r0, r3
 800676c:	370c      	adds	r7, #12
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
 8006776:	bf00      	nop
 8006778:	080154ec 	.word	0x080154ec

0800677c <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
      dim_length(0), st_dim(), dim(nullptr),
      data_offset(0)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4618      	mov	r0, r3
 8006788:	f7fd faa6 	bl	8003cd8 <_ZN3ros3MsgC1Ev>
 800678c:	4a0a      	ldr	r2, [pc, #40]	; (80067b8 <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	601a      	str	r2, [r3, #0]
      dim_length(0), st_dim(), dim(nullptr),
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	605a      	str	r2, [r3, #4]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	3308      	adds	r3, #8
 800679c:	4618      	mov	r0, r3
 800679e:	f7ff feab 	bl	80064f8 <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	619a      	str	r2, [r3, #24]
      data_offset(0)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	61da      	str	r2, [r3, #28]
    {
    }
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4618      	mov	r0, r3
 80067b2:	3708      	adds	r7, #8
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	080157b0 	.word	0x080157b0

080067bc <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80067c6:	2300      	movs	r3, #0
 80067c8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6859      	ldr	r1, [r3, #4]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	683a      	ldr	r2, [r7, #0]
 80067d2:	4413      	add	r3, r2
 80067d4:	b2ca      	uxtb	r2, r1
 80067d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	0a19      	lsrs	r1, r3, #8
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	3301      	adds	r3, #1
 80067e2:	683a      	ldr	r2, [r7, #0]
 80067e4:	4413      	add	r3, r2
 80067e6:	b2ca      	uxtb	r2, r1
 80067e8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	0c19      	lsrs	r1, r3, #16
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	3302      	adds	r3, #2
 80067f4:	683a      	ldr	r2, [r7, #0]
 80067f6:	4413      	add	r3, r2
 80067f8:	b2ca      	uxtb	r2, r1
 80067fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	0e19      	lsrs	r1, r3, #24
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	3303      	adds	r3, #3
 8006806:	683a      	ldr	r2, [r7, #0]
 8006808:	4413      	add	r3, r2
 800680a:	b2ca      	uxtb	r2, r1
 800680c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	3304      	adds	r3, #4
 8006812:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8006814:	2300      	movs	r3, #0
 8006816:	60bb      	str	r3, [r7, #8]
 8006818:	e017      	b.n	800684a <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x8e>
      offset += this->dim[i].serialize(outbuffer + offset);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	699a      	ldr	r2, [r3, #24]
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	011b      	lsls	r3, r3, #4
 8006822:	18d0      	adds	r0, r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	699a      	ldr	r2, [r3, #24]
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	011b      	lsls	r3, r3, #4
 800682c:	4413      	add	r3, r2
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	6839      	ldr	r1, [r7, #0]
 8006836:	440a      	add	r2, r1
 8006838:	4611      	mov	r1, r2
 800683a:	4798      	blx	r3
 800683c:	4602      	mov	r2, r0
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	4413      	add	r3, r2
 8006842:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	3301      	adds	r3, #1
 8006848:	60bb      	str	r3, [r7, #8]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	68ba      	ldr	r2, [r7, #8]
 8006850:	429a      	cmp	r2, r3
 8006852:	d3e2      	bcc.n	800681a <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	69d9      	ldr	r1, [r3, #28]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	683a      	ldr	r2, [r7, #0]
 800685c:	4413      	add	r3, r2
 800685e:	b2ca      	uxtb	r2, r1
 8006860:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	69db      	ldr	r3, [r3, #28]
 8006866:	0a19      	lsrs	r1, r3, #8
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	3301      	adds	r3, #1
 800686c:	683a      	ldr	r2, [r7, #0]
 800686e:	4413      	add	r3, r2
 8006870:	b2ca      	uxtb	r2, r1
 8006872:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	69db      	ldr	r3, [r3, #28]
 8006878:	0c19      	lsrs	r1, r3, #16
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	3302      	adds	r3, #2
 800687e:	683a      	ldr	r2, [r7, #0]
 8006880:	4413      	add	r3, r2
 8006882:	b2ca      	uxtb	r2, r1
 8006884:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	69db      	ldr	r3, [r3, #28]
 800688a:	0e19      	lsrs	r1, r3, #24
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	3303      	adds	r3, #3
 8006890:	683a      	ldr	r2, [r7, #0]
 8006892:	4413      	add	r3, r2
 8006894:	b2ca      	uxtb	r2, r1
 8006896:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	3304      	adds	r3, #4
 800689c:	60fb      	str	r3, [r7, #12]
      return offset;
 800689e:	68fb      	ldr	r3, [r7, #12]
    }
 80068a0:	4618      	mov	r0, r3
 80068a2:	3710      	adds	r7, #16
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b086      	sub	sp, #24
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80068b2:	2300      	movs	r3, #0
 80068b4:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	683a      	ldr	r2, [r7, #0]
 80068ba:	4413      	add	r3, r2
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	3301      	adds	r3, #1
 80068c4:	683a      	ldr	r2, [r7, #0]
 80068c6:	4413      	add	r3, r2
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	021b      	lsls	r3, r3, #8
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	3302      	adds	r3, #2
 80068d6:	683a      	ldr	r2, [r7, #0]
 80068d8:	4413      	add	r3, r2
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	041b      	lsls	r3, r3, #16
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	3303      	adds	r3, #3
 80068e8:	683a      	ldr	r2, [r7, #0]
 80068ea:	4413      	add	r3, r2
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	061b      	lsls	r3, r3, #24
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	3304      	adds	r3, #4
 80068fa:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	429a      	cmp	r2, r3
 8006904:	d90a      	bls.n	800691c <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	699a      	ldr	r2, [r3, #24]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	011b      	lsls	r3, r3, #4
 800690e:	4619      	mov	r1, r3
 8006910:	4610      	mov	r0, r2
 8006912:	f00b fc69 	bl	80121e8 <realloc>
 8006916:	4602      	mov	r2, r0
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 8006922:	2300      	movs	r3, #0
 8006924:	613b      	str	r3, [r7, #16]
 8006926:	e01a      	b.n	800695e <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xb6>
      offset += this->st_dim.deserialize(inbuffer + offset);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f103 0008 	add.w	r0, r3, #8
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	683a      	ldr	r2, [r7, #0]
 8006932:	4413      	add	r3, r2
 8006934:	4619      	mov	r1, r3
 8006936:	f7ff fe70 	bl	800661a <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 800693a:	4602      	mov	r2, r0
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	4413      	add	r3, r2
 8006940:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	699a      	ldr	r2, [r3, #24]
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	011b      	lsls	r3, r3, #4
 800694a:	18d0      	adds	r0, r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	3308      	adds	r3, #8
 8006950:	2210      	movs	r2, #16
 8006952:	4619      	mov	r1, r3
 8006954:	f00c fbe3 	bl	801311e <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	3301      	adds	r3, #1
 800695c:	613b      	str	r3, [r7, #16]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	693a      	ldr	r2, [r7, #16]
 8006964:	429a      	cmp	r2, r3
 8006966:	d3df      	bcc.n	8006928 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x80>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	683a      	ldr	r2, [r7, #0]
 800696c:	4413      	add	r3, r2
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	461a      	mov	r2, r3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	69da      	ldr	r2, [r3, #28]
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	3301      	adds	r3, #1
 800697e:	6839      	ldr	r1, [r7, #0]
 8006980:	440b      	add	r3, r1
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	021b      	lsls	r3, r3, #8
 8006986:	431a      	orrs	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	69da      	ldr	r2, [r3, #28]
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	3302      	adds	r3, #2
 8006994:	6839      	ldr	r1, [r7, #0]
 8006996:	440b      	add	r3, r1
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	041b      	lsls	r3, r3, #16
 800699c:	431a      	orrs	r2, r3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	69da      	ldr	r2, [r3, #28]
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	3303      	adds	r3, #3
 80069aa:	6839      	ldr	r1, [r7, #0]
 80069ac:	440b      	add	r3, r1
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	061b      	lsls	r3, r3, #24
 80069b2:	431a      	orrs	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	3304      	adds	r3, #4
 80069bc:	617b      	str	r3, [r7, #20]
     return offset;
 80069be:	697b      	ldr	r3, [r7, #20]
    }
 80069c0:	4618      	mov	r0, r3
 80069c2:	3718      	adds	r7, #24
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayLayout"; };
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	4b03      	ldr	r3, [pc, #12]	; (80069e0 <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 80069d2:	4618      	mov	r0, r3
 80069d4:	370c      	adds	r7, #12
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	08015510 	.word	0x08015510

080069e4 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    virtual const char * getMD5() override { return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	4b03      	ldr	r3, [pc, #12]	; (80069fc <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 80069ee:	4618      	mov	r0, r3
 80069f0:	370c      	adds	r7, #12
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	0801552c 	.word	0x0801552c

08006a00 <_ZN8std_msgs17Float32MultiArrayC1Ev>:
      uint32_t data_length;
      typedef float _data_type;
      _data_type st_data;
      _data_type * data;

    Float32MultiArray():
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), st_data(), data(nullptr)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7fd f964 	bl	8003cd8 <_ZN3ros3MsgC1Ev>
 8006a10:	4a0b      	ldr	r2, [pc, #44]	; (8006a40 <_ZN8std_msgs17Float32MultiArrayC1Ev+0x40>)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	601a      	str	r2, [r3, #0]
      layout(),
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	3304      	adds	r3, #4
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7ff feae 	bl	800677c <_ZN8std_msgs16MultiArrayLayoutC1Ev>
      data_length(0), st_data(), data(nullptr)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	625a      	str	r2, [r3, #36]	; 0x24
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f04f 0200 	mov.w	r2, #0
 8006a2c:	629a      	str	r2, [r3, #40]	; 0x28
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	62da      	str	r2, [r3, #44]	; 0x2c
    {
    }
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4618      	mov	r0, r3
 8006a38:	3708      	adds	r7, #8
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	08015798 	.word	0x08015798

08006a44 <_ZNK8std_msgs17Float32MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b086      	sub	sp, #24
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	617b      	str	r3, [r7, #20]
      offset += this->layout.serialize(outbuffer + offset);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	1d18      	adds	r0, r3, #4
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	683a      	ldr	r2, [r7, #0]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	f7ff fead 	bl	80067bc <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 8006a62:	4602      	mov	r2, r0
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	4413      	add	r3, r2
 8006a68:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	683a      	ldr	r2, [r7, #0]
 8006a72:	4413      	add	r3, r2
 8006a74:	b2ca      	uxtb	r2, r1
 8006a76:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7c:	0a19      	lsrs	r1, r3, #8
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	3301      	adds	r3, #1
 8006a82:	683a      	ldr	r2, [r7, #0]
 8006a84:	4413      	add	r3, r2
 8006a86:	b2ca      	uxtb	r2, r1
 8006a88:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8e:	0c19      	lsrs	r1, r3, #16
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	3302      	adds	r3, #2
 8006a94:	683a      	ldr	r2, [r7, #0]
 8006a96:	4413      	add	r3, r2
 8006a98:	b2ca      	uxtb	r2, r1
 8006a9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa0:	0e19      	lsrs	r1, r3, #24
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	3303      	adds	r3, #3
 8006aa6:	683a      	ldr	r2, [r7, #0]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	b2ca      	uxtb	r2, r1
 8006aac:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	3304      	adds	r3, #4
 8006ab2:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	613b      	str	r3, [r7, #16]
 8006ab8:	e02a      	b.n	8006b10 <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0xcc>
      union {
        float real;
        uint32_t base;
      } u_datai;
      u_datai.real = this->data[i];
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	4413      	add	r3, r2
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 8006ac8:	68f9      	ldr	r1, [r7, #12]
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	683a      	ldr	r2, [r7, #0]
 8006ace:	4413      	add	r3, r2
 8006ad0:	b2ca      	uxtb	r2, r1
 8006ad2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	0a19      	lsrs	r1, r3, #8
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	3301      	adds	r3, #1
 8006adc:	683a      	ldr	r2, [r7, #0]
 8006ade:	4413      	add	r3, r2
 8006ae0:	b2ca      	uxtb	r2, r1
 8006ae2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_datai.base >> (8 * 2)) & 0xFF;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	0c19      	lsrs	r1, r3, #16
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	3302      	adds	r3, #2
 8006aec:	683a      	ldr	r2, [r7, #0]
 8006aee:	4413      	add	r3, r2
 8006af0:	b2ca      	uxtb	r2, r1
 8006af2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_datai.base >> (8 * 3)) & 0xFF;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	0e19      	lsrs	r1, r3, #24
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	3303      	adds	r3, #3
 8006afc:	683a      	ldr	r2, [r7, #0]
 8006afe:	4413      	add	r3, r2
 8006b00:	b2ca      	uxtb	r2, r1
 8006b02:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	3304      	adds	r3, #4
 8006b08:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	613b      	str	r3, [r7, #16]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b14:	693a      	ldr	r2, [r7, #16]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d3cf      	bcc.n	8006aba <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0x76>
      }
      return offset;
 8006b1a:	697b      	ldr	r3, [r7, #20]
    }
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3718      	adds	r7, #24
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <_ZN8std_msgs17Float32MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b086      	sub	sp, #24
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	1d18      	adds	r0, r3, #4
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	683a      	ldr	r2, [r7, #0]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	f7ff feb3 	bl	80068a8 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 8006b42:	4602      	mov	r2, r0
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	4413      	add	r3, r2
 8006b48:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	683a      	ldr	r2, [r7, #0]
 8006b4e:	4413      	add	r3, r2
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	3301      	adds	r3, #1
 8006b58:	683a      	ldr	r2, [r7, #0]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	021b      	lsls	r3, r3, #8
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	3302      	adds	r3, #2
 8006b6a:	683a      	ldr	r2, [r7, #0]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	041b      	lsls	r3, r3, #16
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	3303      	adds	r3, #3
 8006b7c:	683a      	ldr	r2, [r7, #0]
 8006b7e:	4413      	add	r3, r2
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	061b      	lsls	r3, r3, #24
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	3304      	adds	r3, #4
 8006b8e:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d90a      	bls.n	8006bb0 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x8c>
        this->data = (float*)realloc(this->data, data_lengthT * sizeof(float));
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	4610      	mov	r0, r2
 8006ba6:	f00b fb1f 	bl	80121e8 <realloc>
 8006baa:	4602      	mov	r2, r0
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	62da      	str	r2, [r3, #44]	; 0x2c
      data_length = data_lengthT;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	625a      	str	r2, [r3, #36]	; 0x24
      for( uint32_t i = 0; i < data_length; i++){
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	613b      	str	r3, [r7, #16]
 8006bba:	e035      	b.n	8006c28 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x104>
      union {
        float real;
        uint32_t base;
      } u_st_data;
      u_st_data.base = 0;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	697a      	ldr	r2, [r7, #20]
 8006bc4:	6839      	ldr	r1, [r7, #0]
 8006bc6:	440a      	add	r2, r1
 8006bc8:	7812      	ldrb	r2, [r2, #0]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006bce:	68ba      	ldr	r2, [r7, #8]
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	6839      	ldr	r1, [r7, #0]
 8006bd6:	440b      	add	r3, r1
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	021b      	lsls	r3, r3, #8
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006be0:	68ba      	ldr	r2, [r7, #8]
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	3302      	adds	r3, #2
 8006be6:	6839      	ldr	r1, [r7, #0]
 8006be8:	440b      	add	r3, r1
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	041b      	lsls	r3, r3, #16
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006bf2:	68ba      	ldr	r2, [r7, #8]
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	3303      	adds	r3, #3
 8006bf8:	6839      	ldr	r1, [r7, #0]
 8006bfa:	440b      	add	r3, r1
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	061b      	lsls	r3, r3, #24
 8006c00:	4313      	orrs	r3, r2
 8006c02:	60bb      	str	r3, [r7, #8]
      this->st_data = u_st_data.real;
 8006c04:	68ba      	ldr	r2, [r7, #8]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	629a      	str	r2, [r3, #40]	; 0x28
      offset += sizeof(this->st_data);
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	3304      	adds	r3, #4
 8006c0e:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(float));
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	4413      	add	r3, r2
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	3228      	adds	r2, #40	; 0x28
 8006c1e:	6812      	ldr	r2, [r2, #0]
 8006c20:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	3301      	adds	r3, #1
 8006c26:	613b      	str	r3, [r7, #16]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2c:	693a      	ldr	r2, [r7, #16]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d3c4      	bcc.n	8006bbc <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x98>
      }
     return offset;
 8006c32:	697b      	ldr	r3, [r7, #20]
    }
 8006c34:	4618      	mov	r0, r3
 8006c36:	3718      	adds	r7, #24
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <_ZN8std_msgs17Float32MultiArray7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float32MultiArray"; };
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	4b03      	ldr	r3, [pc, #12]	; (8006c54 <_ZN8std_msgs17Float32MultiArray7getTypeEv+0x18>)
 8006c46:	4618      	mov	r0, r3
 8006c48:	370c      	adds	r7, #12
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	08015550 	.word	0x08015550

08006c58 <_ZN8std_msgs17Float32MultiArray6getMD5Ev>:
    virtual const char * getMD5() override { return "6a40e0ffa6a17a503ac3f8616991b1f6"; };
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	4b03      	ldr	r3, [pc, #12]	; (8006c70 <_ZN8std_msgs17Float32MultiArray6getMD5Ev+0x18>)
 8006c62:	4618      	mov	r0, r3
 8006c64:	370c      	adds	r7, #12
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	0801556c 	.word	0x0801556c

08006c74 <_ZN8std_msgs4BoolC1Ev>:
  {
    public:
      typedef bool _data_type;
      _data_type data;

    Bool():
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
      data(0)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7fd f82a 	bl	8003cd8 <_ZN3ros3MsgC1Ev>
 8006c84:	4a05      	ldr	r2, [pc, #20]	; (8006c9c <_ZN8std_msgs4BoolC1Ev+0x28>)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	601a      	str	r2, [r3, #0]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	711a      	strb	r2, [r3, #4]
    {
    }
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4618      	mov	r0, r3
 8006c94:	3708      	adds	r7, #8
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	08015780 	.word	0x08015780

08006ca0 <_ZNK8std_msgs4Bool9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006caa:	2300      	movs	r3, #0
 8006cac:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	791b      	ldrb	r3, [r3, #4]
 8006cb2:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	683a      	ldr	r2, [r7, #0]
 8006cb8:	4413      	add	r3, r2
 8006cba:	7a3a      	ldrb	r2, [r7, #8]
 8006cbc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	60fb      	str	r3, [r7, #12]
      return offset;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
    }
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3714      	adds	r7, #20
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr

08006cd2 <_ZN8std_msgs4Bool11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8006cd2:	b480      	push	{r7}
 8006cd4:	b085      	sub	sp, #20
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
 8006cda:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006ce4:	7a3a      	ldrb	r2, [r7, #8]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6839      	ldr	r1, [r7, #0]
 8006cea:	440b      	add	r3, r1
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 8006cf4:	7a3a      	ldrb	r2, [r7, #8]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	60fb      	str	r3, [r7, #12]
     return offset;
 8006d00:	68fb      	ldr	r3, [r7, #12]
    }
 8006d02:	4618      	mov	r0, r3
 8006d04:	3714      	adds	r7, #20
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
	...

08006d10 <_ZN8std_msgs4Bool7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Bool"; };
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	4b03      	ldr	r3, [pc, #12]	; (8006d28 <_ZN8std_msgs4Bool7getTypeEv+0x18>)
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	370c      	adds	r7, #12
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr
 8006d26:	bf00      	nop
 8006d28:	08015590 	.word	0x08015590

08006d2c <_ZN8std_msgs4Bool6getMD5Ev>:
    virtual const char * getMD5() override { return "8b94c1b53db61fb6aed406028ad6332a"; };
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	4b03      	ldr	r3, [pc, #12]	; (8006d44 <_ZN8std_msgs4Bool6getMD5Ev+0x18>)
 8006d36:	4618      	mov	r0, r3
 8006d38:	370c      	adds	r7, #12
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	080155a0 	.word	0x080155a0

08006d48 <_Z11kinCallbackRKN13geometry_msgs7Vector3E>:
float msg_imu[10];
float msg_odom[7];
bool stateInv;
int16_t rawYaw;

void kinCallback(const geometry_msgs::Vector3 &data){
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
	xtarget = data.x;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006d56:	4610      	mov	r0, r2
 8006d58:	4619      	mov	r1, r3
 8006d5a:	f7f9 ff35 	bl	8000bc8 <__aeabi_d2f>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	4a0c      	ldr	r2, [pc, #48]	; (8006d94 <_Z11kinCallbackRKN13geometry_msgs7Vector3E+0x4c>)
 8006d62:	6013      	str	r3, [r2, #0]
	ytarget = data.y;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006d6a:	4610      	mov	r0, r2
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	f7f9 ff2b 	bl	8000bc8 <__aeabi_d2f>
 8006d72:	4603      	mov	r3, r0
 8006d74:	4a08      	ldr	r2, [pc, #32]	; (8006d98 <_Z11kinCallbackRKN13geometry_msgs7Vector3E+0x50>)
 8006d76:	6013      	str	r3, [r2, #0]
	thtarget = data.z;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006d7e:	4610      	mov	r0, r2
 8006d80:	4619      	mov	r1, r3
 8006d82:	f7f9 ff21 	bl	8000bc8 <__aeabi_d2f>
 8006d86:	4603      	mov	r3, r0
 8006d88:	4a04      	ldr	r2, [pc, #16]	; (8006d9c <_Z11kinCallbackRKN13geometry_msgs7Vector3E+0x54>)
 8006d8a:	6013      	str	r3, [r2, #0]
}
 8006d8c:	bf00      	nop
 8006d8e:	3708      	adds	r7, #8
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	20000b0c 	.word	0x20000b0c
 8006d98:	20000b10 	.word	0x20000b10
 8006d9c:	20000b14 	.word	0x20000b14

08006da0 <_Z14invkinCallbackRKN13geometry_msgs7Vector3E>:

void invkinCallback(const geometry_msgs::Vector3 &data){
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
	InvTarget[0] = data.x;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006dae:	4610      	mov	r0, r2
 8006db0:	4619      	mov	r1, r3
 8006db2:	f7f9 ff09 	bl	8000bc8 <__aeabi_d2f>
 8006db6:	4603      	mov	r3, r0
 8006db8:	4a0c      	ldr	r2, [pc, #48]	; (8006dec <_Z14invkinCallbackRKN13geometry_msgs7Vector3E+0x4c>)
 8006dba:	6013      	str	r3, [r2, #0]
	InvTarget[1] = data.y;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006dc2:	4610      	mov	r0, r2
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	f7f9 feff 	bl	8000bc8 <__aeabi_d2f>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	4a07      	ldr	r2, [pc, #28]	; (8006dec <_Z14invkinCallbackRKN13geometry_msgs7Vector3E+0x4c>)
 8006dce:	6053      	str	r3, [r2, #4]
	InvTarget[2] = data.z;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006dd6:	4610      	mov	r0, r2
 8006dd8:	4619      	mov	r1, r3
 8006dda:	f7f9 fef5 	bl	8000bc8 <__aeabi_d2f>
 8006dde:	4603      	mov	r3, r0
 8006de0:	4a02      	ldr	r2, [pc, #8]	; (8006dec <_Z14invkinCallbackRKN13geometry_msgs7Vector3E+0x4c>)
 8006de2:	6093      	str	r3, [r2, #8]
}
 8006de4:	bf00      	nop
 8006de6:	3708      	adds	r7, #8
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	20000b1c 	.word	0x20000b1c

08006df0 <_Z15stateInverseKinRKN8std_msgs4BoolE>:

void stateInverseKin(const std_msgs::Bool &data){
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
	stateInv = data.data;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	791a      	ldrb	r2, [r3, #4]
 8006dfc:	4b03      	ldr	r3, [pc, #12]	; (8006e0c <_Z15stateInverseKinRKN8std_msgs4BoolE+0x1c>)
 8006dfe:	701a      	strb	r2, [r3, #0]
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr
 8006e0c:	20000b6c 	.word	0x20000b6c

08006e10 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	4a04      	ldr	r2, [pc, #16]	; (8006e2c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	601a      	str	r2, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4618      	mov	r0, r3
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr
 8006e2c:	08015840 	.word	0x08015840

08006e30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 4096, //512
         int OUTPUT_SIZE = 4096> //512
class NodeHandle_ : public NodeHandleBase_
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7ff ffe8 	bl	8006e10 <_ZN3ros15NodeHandleBase_C1Ev>
 8006e40:	4a47      	ldr	r2, [pc, #284]	; (8006f60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EEC1Ev+0x130>)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	601a      	str	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	3304      	adds	r3, #4
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7fd fdce 	bl	80049ec <_ZN13STM32HardwareC1Ev>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8006e76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f00c f879 	bl	8012f74 <memset>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e88:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8006e8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006e90:	2100      	movs	r1, #0
 8006e92:	4618      	mov	r0, r3
 8006e94:	f00c f86e 	bl	8012f74 <memset>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006e9e:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8006ea2:	2264      	movs	r2, #100	; 0x64
 8006ea4:	2100      	movs	r1, #0
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f00c f864 	bl	8012f74 <memset>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006eb2:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8006eb6:	2264      	movs	r2, #100	; 0x64
 8006eb8:	2100      	movs	r1, #0
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f00c f85a 	bl	8012f74 <memset>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	2300      	movs	r3, #0
 8006eca:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	f8c2 38f0 	str.w	r3, [r2, #2288]	; 0x8f0
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	f8c2 38f4 	str.w	r3, [r2, #2292]	; 0x8f4
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	f8c2 38f8 	str.w	r3, [r2, #2296]	; 0x8f8
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006efe:	461a      	mov	r2, r3
 8006f00:	2300      	movs	r3, #0
 8006f02:	f8c2 38fc 	str.w	r3, [r2, #2300]	; 0x8fc
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006f18:	461a      	mov	r2, r3
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	f8c2 3904 	str.w	r3, [r2, #2308]	; 0x904
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006f26:	461a      	mov	r2, r3
 8006f28:	2300      	movs	r3, #0
 8006f2a:	f8c2 3908 	str.w	r3, [r2, #2312]	; 0x908
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006f34:	461a      	mov	r2, r3
 8006f36:	2300      	movs	r3, #0
 8006f38:	f8c2 390c 	str.w	r3, [r2, #2316]	; 0x90c
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8006f4e:	3314      	adds	r3, #20
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7fd fa35 	bl	80043c0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3708      	adds	r7, #8
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	0801576c 	.word	0x0801576c

08006f64 <HAL_UART_TxCpltCallback>:
ros::Subscriber<std_msgs::Bool> stateInv_Sub("robot/stateInv", &stateInverseKin);
ros::Publisher errorArr("robot/Error_Aksen", &error_arr_msg);
ros::Publisher imu_pub("robot/imu", &imuData);
ros::Publisher odom_pub("robot/odom", &odomData);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
	nh.getHardware()->flush();
 8006f6c:	4805      	ldr	r0, [pc, #20]	; (8006f84 <HAL_UART_TxCpltCallback+0x20>)
 8006f6e:	f000 f9c7 	bl	8007300 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE11getHardwareEv>
 8006f72:	4603      	mov	r3, r0
 8006f74:	4618      	mov	r0, r3
 8006f76:	f7fd fd9f 	bl	8004ab8 <_ZN13STM32Hardware5flushEv>
}
 8006f7a:	bf00      	nop
 8006f7c:	3708      	adds	r7, #8
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	20000b70 	.word	0x20000b70

08006f88 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
	nh.getHardware()->reset_rbuf();
 8006f90:	4805      	ldr	r0, [pc, #20]	; (8006fa8 <HAL_UART_RxCpltCallback+0x20>)
 8006f92:	f000 f9b5 	bl	8007300 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE11getHardwareEv>
 8006f96:	4603      	mov	r3, r0
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f7fd fd4e 	bl	8004a3a <_ZN13STM32Hardware10reset_rbufEv>
}
 8006f9e:	bf00      	nop
 8006fa0:	3708      	adds	r7, #8
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	20000b70 	.word	0x20000b70

08006fac <setup>:

void errorArrPublish();
void imuPublish();
void odomPublish();

void setup(void) {
 8006fac:	b580      	push	{r7, lr}
 8006fae:	af00      	add	r7, sp, #0
	nh.initNode();
 8006fb0:	480f      	ldr	r0, [pc, #60]	; (8006ff0 <setup+0x44>)
 8006fb2:	f000 f9b1 	bl	8007318 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8initNodeEv>
	nh.advertise(errorArr); // error arrived
 8006fb6:	490f      	ldr	r1, [pc, #60]	; (8006ff4 <setup+0x48>)
 8006fb8:	480d      	ldr	r0, [pc, #52]	; (8006ff0 <setup+0x44>)
 8006fba:	f000 f9d6 	bl	800736a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9advertiseERNS_9PublisherE>
	nh.advertise(imu_pub);
 8006fbe:	490e      	ldr	r1, [pc, #56]	; (8006ff8 <setup+0x4c>)
 8006fc0:	480b      	ldr	r0, [pc, #44]	; (8006ff0 <setup+0x44>)
 8006fc2:	f000 f9d2 	bl	800736a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9advertiseERNS_9PublisherE>
	nh.advertise(odom_pub);
 8006fc6:	490d      	ldr	r1, [pc, #52]	; (8006ffc <setup+0x50>)
 8006fc8:	4809      	ldr	r0, [pc, #36]	; (8006ff0 <setup+0x44>)
 8006fca:	f000 f9ce 	bl	800736a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9advertiseERNS_9PublisherE>
	nh.subscribe(invKinematic); // inverse kinematic
 8006fce:	490c      	ldr	r1, [pc, #48]	; (8007000 <setup+0x54>)
 8006fd0:	4807      	ldr	r0, [pc, #28]	; (8006ff0 <setup+0x44>)
 8006fd2:	f000 f9fa 	bl	80073ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(kinematic); // forward kinematic
 8006fd6:	490b      	ldr	r1, [pc, #44]	; (8007004 <setup+0x58>)
 8006fd8:	4805      	ldr	r0, [pc, #20]	; (8006ff0 <setup+0x44>)
 8006fda:	f000 f9f6 	bl	80073ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(stateInv_Sub); // diaktifkan apabila menggunakan inverse kinematic
 8006fde:	490a      	ldr	r1, [pc, #40]	; (8007008 <setup+0x5c>)
 8006fe0:	4803      	ldr	r0, [pc, #12]	; (8006ff0 <setup+0x44>)
 8006fe2:	f000 f9f2 	bl	80073ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>
//	nh.negotiateTopics();
	HAL_Delay(100);
 8006fe6:	2064      	movs	r0, #100	; 0x64
 8006fe8:	f001 fd5e 	bl	8008aa8 <HAL_Delay>
}
 8006fec:	bf00      	nop
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	20000b70 	.word	0x20000b70
 8006ff4:	20003634 	.word	0x20003634
 8006ff8:	20003648 	.word	0x20003648
 8006ffc:	2000365c 	.word	0x2000365c
 8007000:	200035e0 	.word	0x200035e0
 8007004:	200035a8 	.word	0x200035a8
 8007008:	20003618 	.word	0x20003618

0800700c <loop>:

void loop(){
 800700c:	b580      	push	{r7, lr}
 800700e:	af00      	add	r7, sp, #0
	errorArrPublish();
 8007010:	f000 f80c 	bl	800702c <_Z15errorArrPublishv>
//	imuPublish();
	odomPublish();
 8007014:	f000 f89a 	bl	800714c <_Z11odomPublishv>
	nh.spinOnce();
 8007018:	4803      	ldr	r0, [pc, #12]	; (8007028 <loop+0x1c>)
 800701a:	f000 fa01 	bl	8007420 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv>
	HAL_Delay(10);
 800701e:	200a      	movs	r0, #10
 8007020:	f001 fd42 	bl	8008aa8 <HAL_Delay>
}
 8007024:	bf00      	nop
 8007026:	bd80      	pop	{r7, pc}
 8007028:	20000b70 	.word	0x20000b70

0800702c <_Z15errorArrPublishv>:

void errorArrPublish(){
 800702c:	b580      	push	{r7, lr}
 800702e:	af00      	add	r7, sp, #0
	error_arr_msg.data = errorPub;
 8007030:	4b04      	ldr	r3, [pc, #16]	; (8007044 <_Z15errorArrPublishv+0x18>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a04      	ldr	r2, [pc, #16]	; (8007048 <_Z15errorArrPublishv+0x1c>)
 8007036:	6053      	str	r3, [r2, #4]
	errorArr.publish(&error_arr_msg);
 8007038:	4903      	ldr	r1, [pc, #12]	; (8007048 <_Z15errorArrPublishv+0x1c>)
 800703a:	4804      	ldr	r0, [pc, #16]	; (800704c <_Z15errorArrPublishv+0x20>)
 800703c:	f7fd fca3 	bl	8004986 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8007040:	bf00      	nop
 8007042:	bd80      	pop	{r7, pc}
 8007044:	20000b18 	.word	0x20000b18
 8007048:	20003540 	.word	0x20003540
 800704c:	20003634 	.word	0x20003634

08007050 <imuPublish>:

void imuPublish(bno055_vector_t* quat, bno055_vector_t* line, bno055_vector_t* gyro){
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	607a      	str	r2, [r7, #4]
	msg_imu[0] = quat->w;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007062:	4610      	mov	r0, r2
 8007064:	4619      	mov	r1, r3
 8007066:	f7f9 fdaf 	bl	8000bc8 <__aeabi_d2f>
 800706a:	4603      	mov	r3, r0
 800706c:	4a34      	ldr	r2, [pc, #208]	; (8007140 <imuPublish+0xf0>)
 800706e:	6013      	str	r3, [r2, #0]
	msg_imu[1] = quat->x;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007076:	4610      	mov	r0, r2
 8007078:	4619      	mov	r1, r3
 800707a:	f7f9 fda5 	bl	8000bc8 <__aeabi_d2f>
 800707e:	4603      	mov	r3, r0
 8007080:	4a2f      	ldr	r2, [pc, #188]	; (8007140 <imuPublish+0xf0>)
 8007082:	6053      	str	r3, [r2, #4]
	msg_imu[2] = quat->y;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800708a:	4610      	mov	r0, r2
 800708c:	4619      	mov	r1, r3
 800708e:	f7f9 fd9b 	bl	8000bc8 <__aeabi_d2f>
 8007092:	4603      	mov	r3, r0
 8007094:	4a2a      	ldr	r2, [pc, #168]	; (8007140 <imuPublish+0xf0>)
 8007096:	6093      	str	r3, [r2, #8]
	msg_imu[3] = quat->z;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800709e:	4610      	mov	r0, r2
 80070a0:	4619      	mov	r1, r3
 80070a2:	f7f9 fd91 	bl	8000bc8 <__aeabi_d2f>
 80070a6:	4603      	mov	r3, r0
 80070a8:	4a25      	ldr	r2, [pc, #148]	; (8007140 <imuPublish+0xf0>)
 80070aa:	60d3      	str	r3, [r2, #12]

	msg_imu[4] = line->x;
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80070b2:	4610      	mov	r0, r2
 80070b4:	4619      	mov	r1, r3
 80070b6:	f7f9 fd87 	bl	8000bc8 <__aeabi_d2f>
 80070ba:	4603      	mov	r3, r0
 80070bc:	4a20      	ldr	r2, [pc, #128]	; (8007140 <imuPublish+0xf0>)
 80070be:	6113      	str	r3, [r2, #16]
	msg_imu[5] = line->y;
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80070c6:	4610      	mov	r0, r2
 80070c8:	4619      	mov	r1, r3
 80070ca:	f7f9 fd7d 	bl	8000bc8 <__aeabi_d2f>
 80070ce:	4603      	mov	r3, r0
 80070d0:	4a1b      	ldr	r2, [pc, #108]	; (8007140 <imuPublish+0xf0>)
 80070d2:	6153      	str	r3, [r2, #20]
	msg_imu[6] = line->z;
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80070da:	4610      	mov	r0, r2
 80070dc:	4619      	mov	r1, r3
 80070de:	f7f9 fd73 	bl	8000bc8 <__aeabi_d2f>
 80070e2:	4603      	mov	r3, r0
 80070e4:	4a16      	ldr	r2, [pc, #88]	; (8007140 <imuPublish+0xf0>)
 80070e6:	6193      	str	r3, [r2, #24]

	msg_imu[7] = gyro->x;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80070ee:	4610      	mov	r0, r2
 80070f0:	4619      	mov	r1, r3
 80070f2:	f7f9 fd69 	bl	8000bc8 <__aeabi_d2f>
 80070f6:	4603      	mov	r3, r0
 80070f8:	4a11      	ldr	r2, [pc, #68]	; (8007140 <imuPublish+0xf0>)
 80070fa:	61d3      	str	r3, [r2, #28]
	msg_imu[8] = gyro->y;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007102:	4610      	mov	r0, r2
 8007104:	4619      	mov	r1, r3
 8007106:	f7f9 fd5f 	bl	8000bc8 <__aeabi_d2f>
 800710a:	4603      	mov	r3, r0
 800710c:	4a0c      	ldr	r2, [pc, #48]	; (8007140 <imuPublish+0xf0>)
 800710e:	6213      	str	r3, [r2, #32]
	msg_imu[9] = gyro->z;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007116:	4610      	mov	r0, r2
 8007118:	4619      	mov	r1, r3
 800711a:	f7f9 fd55 	bl	8000bc8 <__aeabi_d2f>
 800711e:	4603      	mov	r3, r0
 8007120:	4a07      	ldr	r2, [pc, #28]	; (8007140 <imuPublish+0xf0>)
 8007122:	6253      	str	r3, [r2, #36]	; 0x24

	imuData.data = msg_imu;
 8007124:	4b07      	ldr	r3, [pc, #28]	; (8007144 <imuPublish+0xf4>)
 8007126:	4a06      	ldr	r2, [pc, #24]	; (8007140 <imuPublish+0xf0>)
 8007128:	62da      	str	r2, [r3, #44]	; 0x2c
	imuData.data_length = 10;
 800712a:	4b06      	ldr	r3, [pc, #24]	; (8007144 <imuPublish+0xf4>)
 800712c:	220a      	movs	r2, #10
 800712e:	625a      	str	r2, [r3, #36]	; 0x24
	imu_pub.publish(&imuData);
 8007130:	4904      	ldr	r1, [pc, #16]	; (8007144 <imuPublish+0xf4>)
 8007132:	4805      	ldr	r0, [pc, #20]	; (8007148 <imuPublish+0xf8>)
 8007134:	f7fd fc27 	bl	8004986 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8007138:	bf00      	nop
 800713a:	3710      	adds	r7, #16
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	20000b28 	.word	0x20000b28
 8007144:	20003548 	.word	0x20003548
 8007148:	20003648 	.word	0x20003648

0800714c <_Z11odomPublishv>:

void odomPublish(){
 800714c:	b580      	push	{r7, lr}
 800714e:	af00      	add	r7, sp, #0
	msg_odom[0] = Aksen[0];
 8007150:	4b16      	ldr	r3, [pc, #88]	; (80071ac <_Z11odomPublishv+0x60>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a16      	ldr	r2, [pc, #88]	; (80071b0 <_Z11odomPublishv+0x64>)
 8007156:	6013      	str	r3, [r2, #0]
	msg_odom[1] = Aksen[1];
 8007158:	4b14      	ldr	r3, [pc, #80]	; (80071ac <_Z11odomPublishv+0x60>)
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	4a14      	ldr	r2, [pc, #80]	; (80071b0 <_Z11odomPublishv+0x64>)
 800715e:	6053      	str	r3, [r2, #4]
	msg_odom[2] = Aksen[2];
 8007160:	4b12      	ldr	r3, [pc, #72]	; (80071ac <_Z11odomPublishv+0x60>)
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	4a12      	ldr	r2, [pc, #72]	; (80071b0 <_Z11odomPublishv+0x64>)
 8007166:	6093      	str	r3, [r2, #8]

	msg_odom[3] = velo[0];
 8007168:	4b12      	ldr	r3, [pc, #72]	; (80071b4 <_Z11odomPublishv+0x68>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a10      	ldr	r2, [pc, #64]	; (80071b0 <_Z11odomPublishv+0x64>)
 800716e:	60d3      	str	r3, [r2, #12]
	msg_odom[4] = velo[1];
 8007170:	4b10      	ldr	r3, [pc, #64]	; (80071b4 <_Z11odomPublishv+0x68>)
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	4a0e      	ldr	r2, [pc, #56]	; (80071b0 <_Z11odomPublishv+0x64>)
 8007176:	6113      	str	r3, [r2, #16]
	msg_odom[5] = velo[2];
 8007178:	4b0e      	ldr	r3, [pc, #56]	; (80071b4 <_Z11odomPublishv+0x68>)
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	4a0c      	ldr	r2, [pc, #48]	; (80071b0 <_Z11odomPublishv+0x64>)
 800717e:	6153      	str	r3, [r2, #20]

	msg_odom[6] = rawYaw;
 8007180:	4b0d      	ldr	r3, [pc, #52]	; (80071b8 <_Z11odomPublishv+0x6c>)
 8007182:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007186:	ee07 3a90 	vmov	s15, r3
 800718a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800718e:	4b08      	ldr	r3, [pc, #32]	; (80071b0 <_Z11odomPublishv+0x64>)
 8007190:	edc3 7a06 	vstr	s15, [r3, #24]

	odomData.data = msg_odom;
 8007194:	4b09      	ldr	r3, [pc, #36]	; (80071bc <_Z11odomPublishv+0x70>)
 8007196:	4a06      	ldr	r2, [pc, #24]	; (80071b0 <_Z11odomPublishv+0x64>)
 8007198:	62da      	str	r2, [r3, #44]	; 0x2c
	odomData.data_length = 7;
 800719a:	4b08      	ldr	r3, [pc, #32]	; (80071bc <_Z11odomPublishv+0x70>)
 800719c:	2207      	movs	r2, #7
 800719e:	625a      	str	r2, [r3, #36]	; 0x24
	odom_pub.publish(&odomData);
 80071a0:	4906      	ldr	r1, [pc, #24]	; (80071bc <_Z11odomPublishv+0x70>)
 80071a2:	4807      	ldr	r0, [pc, #28]	; (80071c0 <_Z11odomPublishv+0x74>)
 80071a4:	f7fd fbef 	bl	8004986 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 80071a8:	bf00      	nop
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	2000022c 	.word	0x2000022c
 80071b0:	20000b50 	.word	0x20000b50
 80071b4:	20000244 	.word	0x20000244
 80071b8:	20000b6e 	.word	0x20000b6e
 80071bc:	20003578 	.word	0x20003578
 80071c0:	2000365c 	.word	0x2000365c

080071c4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80071c4:	b480      	push	{r7}
 80071c6:	b085      	sub	sp, #20
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80071ce:	2300      	movs	r3, #0
 80071d0:	60fb      	str	r3, [r7, #12]
 80071d2:	e00c      	b.n	80071ee <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	00db      	lsls	r3, r3, #3
 80071d8:	683a      	ldr	r2, [r7, #0]
 80071da:	fa22 f103 	lsr.w	r1, r2, r3
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	4413      	add	r3, r2
 80071e4:	b2ca      	uxtb	r2, r1
 80071e6:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	3301      	adds	r3, #1
 80071ec:	60fb      	str	r3, [r7, #12]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2b03      	cmp	r3, #3
 80071f2:	d9ef      	bls.n	80071d4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 80071f4:	bf00      	nop
 80071f6:	bf00      	nop
 80071f8:	3714      	adds	r7, #20
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr

08007202 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8007202:	b480      	push	{r7}
 8007204:	b085      	sub	sp, #20
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
 800720a:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8007212:	2300      	movs	r3, #0
 8007214:	60fb      	str	r3, [r7, #12]
 8007216:	e010      	b.n	800723a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6839      	ldr	r1, [r7, #0]
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	440a      	add	r2, r1
 8007222:	7812      	ldrb	r2, [r2, #0]
 8007224:	4611      	mov	r1, r2
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	00d2      	lsls	r2, r2, #3
 800722a:	fa01 f202 	lsl.w	r2, r1, r2
 800722e:	431a      	orrs	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	3301      	adds	r3, #1
 8007238:	60fb      	str	r3, [r7, #12]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2b03      	cmp	r3, #3
 800723e:	d9eb      	bls.n	8007218 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8007240:	bf00      	nop
 8007242:	bf00      	nop
 8007244:	3714      	adds	r7, #20
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr
	...

08007250 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	4a04      	ldr	r2, [pc, #16]	; (800726c <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	601a      	str	r2, [r3, #0]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	4618      	mov	r0, r3
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr
 800726c:	08015828 	.word	0x08015828

08007270 <_ZN3ros10SubscriberIN13geometry_msgs7Vector3EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	607a      	str	r2, [r7, #4]
 800727c:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	4618      	mov	r0, r3
 8007282:	f7ff ffe5 	bl	8007250 <_ZN3ros11Subscriber_C1Ev>
 8007286:	4a0b      	ldr	r2, [pc, #44]	; (80072b4 <_ZN3ros10SubscriberIN13geometry_msgs7Vector3EvEC1EPKcPFvRKS2_Ei+0x44>)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	601a      	str	r2, [r3, #0]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	3310      	adds	r3, #16
 8007290:	4618      	mov	r0, r3
 8007292:	f7fe fb7f 	bl	8005994 <_ZN13geometry_msgs7Vector3C1Ev>
    cb_(cb),
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	631a      	str	r2, [r3, #48]	; 0x30
    endpoint_(endpoint)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	683a      	ldr	r2, [r7, #0]
 80072a0:	635a      	str	r2, [r3, #52]	; 0x34
  {
    topic_ = topic_name;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	68ba      	ldr	r2, [r7, #8]
 80072a6:	609a      	str	r2, [r3, #8]
  };
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	4618      	mov	r0, r3
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	08015754 	.word	0x08015754

080072b8 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	607a      	str	r2, [r7, #4]
 80072c4:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	4618      	mov	r0, r3
 80072ca:	f7ff ffc1 	bl	8007250 <_ZN3ros11Subscriber_C1Ev>
 80072ce:	4a0b      	ldr	r2, [pc, #44]	; (80072fc <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei+0x44>)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	601a      	str	r2, [r3, #0]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	330c      	adds	r3, #12
 80072d8:	4618      	mov	r0, r3
 80072da:	f7ff fccb 	bl	8006c74 <_ZN8std_msgs4BoolC1Ev>
    cb_(cb),
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	683a      	ldr	r2, [r7, #0]
 80072e8:	619a      	str	r2, [r3, #24]
    topic_ = topic_name;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	68ba      	ldr	r2, [r7, #8]
 80072ee:	609a      	str	r2, [r3, #8]
  };
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	4618      	mov	r0, r3
 80072f4:	3710      	adds	r7, #16
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	0801573c 	.word	0x0801573c

08007300 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	3304      	adds	r3, #4
  }
 800730c:	4618      	mov	r0, r3
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	3304      	adds	r3, #4
 8007324:	4618      	mov	r0, r3
 8007326:	f7fd fb7d 	bl	8004a24 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007330:	461a      	mov	r2, r3
 8007332:	2300      	movs	r3, #0
 8007334:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
    bytes_ = 0;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800733e:	461a      	mov	r2, r3
 8007340:	2300      	movs	r3, #0
 8007342:	f8c2 38f0 	str.w	r3, [r2, #2288]	; 0x8f0
    index_ = 0;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800734c:	461a      	mov	r2, r3
 800734e:	2300      	movs	r3, #0
 8007350:	f8c2 38f8 	str.w	r3, [r2, #2296]	; 0x8f8
    topic_ = 0;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800735a:	461a      	mov	r2, r3
 800735c:	2300      	movs	r3, #0
 800735e:	f8c2 38f4 	str.w	r3, [r2, #2292]	; 0x8f4
  };
 8007362:	bf00      	nop
 8007364:	3708      	adds	r7, #8
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 800736a:	b480      	push	{r7}
 800736c:	b085      	sub	sp, #20
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
 8007372:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8007374:	2300      	movs	r3, #0
 8007376:	60fb      	str	r3, [r7, #12]
 8007378:	e01d      	b.n	80073b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x4c>
    {
      if (publishers[i] == 0) // empty slot
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	4413      	add	r3, r2
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d111      	bne.n	80073b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	4413      	add	r3, r2
 8007398:	683a      	ldr	r2, [r7, #0]
 800739a:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	60da      	str	r2, [r3, #12]
        return true;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e006      	b.n	80073be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	3301      	adds	r3, #1
 80073b4:	60fb      	str	r3, [r7, #12]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2b18      	cmp	r3, #24
 80073ba:	ddde      	ble.n	800737a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 80073bc:	2300      	movs	r3, #0
  }
 80073be:	4618      	mov	r0, r3
 80073c0:	3714      	adds	r7, #20
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr

080073ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 80073ca:	b480      	push	{r7}
 80073cc:	b085      	sub	sp, #20
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
 80073d2:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80073d4:	2300      	movs	r3, #0
 80073d6:	60fb      	str	r3, [r7, #12]
 80073d8:	e018      	b.n	800740c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x42>
    {
      if (subscribers[i] == 0) // empty slot
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	f602 2222 	addw	r2, r2, #2594	; 0xa22
 80073e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d10d      	bne.n	8007406 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x3c>
      {
        subscribers[i] = &s;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	f602 2222 	addw	r2, r2, #2594	; 0xa22
 80073f2:	6839      	ldr	r1, [r7, #0]
 80073f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	605a      	str	r2, [r3, #4]
        return true;
 8007402:	2301      	movs	r3, #1
 8007404:	e006      	b.n	8007414 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	3301      	adds	r3, #1
 800740a:	60fb      	str	r3, [r7, #12]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2b18      	cmp	r3, #24
 8007410:	dde3      	ble.n	80073da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x10>
      }
    }
    return false;
 8007412:	2300      	movs	r3, #0
  }
 8007414:	4618      	mov	r0, r3
 8007416:	3714      	adds	r7, #20
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv>:
  virtual int spinOnce() override
 8007420:	b580      	push	{r7, lr}
 8007422:	b086      	sub	sp, #24
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	3304      	adds	r3, #4
 800742c:	4618      	mov	r0, r3
 800742e:	f7fd fbe7 	bl	8004c00 <_ZN13STM32Hardware4timeEv>
 8007432:	6138      	str	r0, [r7, #16]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800743a:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 800743e:	693a      	ldr	r2, [r7, #16]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8007446:	4293      	cmp	r3, r2
 8007448:	d905      	bls.n	8007456 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x36>
      configured_ = false;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007450:	2200      	movs	r2, #0
 8007452:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800745c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00e      	beq.n	8007482 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800746a:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 800746e:	693a      	ldr	r2, [r7, #16]
 8007470:	429a      	cmp	r2, r3
 8007472:	d906      	bls.n	8007482 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800747a:	461a      	mov	r2, r3
 800747c:	2300      	movs	r3, #0
 800747e:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
    bool tx_stop_requested = false;
 8007482:	2300      	movs	r3, #0
 8007484:	75fb      	strb	r3, [r7, #23]
    bool saw_time_msg = false;
 8007486:	2300      	movs	r3, #0
 8007488:	75bb      	strb	r3, [r7, #22]
      if (spin_timeout_ > 0)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 8007490:	2b00      	cmp	r3, #0
 8007492:	d014      	beq.n	80074be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x9e>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	3304      	adds	r3, #4
 8007498:	4618      	mov	r0, r3
 800749a:	f7fd fbb1 	bl	8004c00 <_ZN13STM32Hardware4timeEv>
 800749e:	4602      	mov	r2, r0
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	1ad2      	subs	r2, r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 80074aa:	429a      	cmp	r2, r3
 80074ac:	bf8c      	ite	hi
 80074ae:	2301      	movhi	r3, #1
 80074b0:	2300      	movls	r3, #0
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d002      	beq.n	80074be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x9e>
          return SPIN_TIMEOUT;
 80074b8:	f06f 0301 	mvn.w	r3, #1
 80074bc:	e232      	b.n	8007924 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x504>
      int data = hardware_.read();
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	3304      	adds	r3, #4
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7fd faca 	bl	8004a5c <_ZN13STM32Hardware4readEv>
 80074c8:	60f8      	str	r0, [r7, #12]
      if (data < 0)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	f2c0 81fe 	blt.w	80078ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x4ae>
      checksum_ += data;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80074d8:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	4413      	add	r3, r2
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80074e6:	f8c2 38fc 	str.w	r3, [r2, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80074f0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80074f4:	2b07      	cmp	r3, #7
 80074f6:	d12b      	bne.n	8007550 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80074fe:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8007502:	1c5a      	adds	r2, r3, #1
 8007504:	6879      	ldr	r1, [r7, #4]
 8007506:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 800750a:	f8c1 28f8 	str.w	r2, [r1, #2296]	; 0x8f8
 800750e:	68fa      	ldr	r2, [r7, #12]
 8007510:	b2d1      	uxtb	r1, r2
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	4413      	add	r3, r2
 8007516:	460a      	mov	r2, r1
 8007518:	f883 2824 	strb.w	r2, [r3, #2084]	; 0x824
        bytes_--;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007522:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8007526:	3b01      	subs	r3, #1
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800752e:	f8c2 38f0 	str.w	r3, [r2, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007538:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1a4      	bne.n	800748a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
          mode_ = MODE_MSG_CHECKSUM;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007546:	461a      	mov	r2, r3
 8007548:	2308      	movs	r3, #8
 800754a:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
 800754e:	e79c      	b.n	800748a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
      else if (mode_ == MODE_FIRST_FF)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007556:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800755a:	2b00      	cmp	r3, #0
 800755c:	d130      	bne.n	80075c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2bff      	cmp	r3, #255	; 0xff
 8007562:	d112      	bne.n	800758a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x16a>
          mode_++;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800756a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800756e:	3301      	adds	r3, #1
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8007576:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	3314      	adds	r3, #20
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8007584:	f8c2 390c 	str.w	r3, [r2, #2316]	; 0x90c
 8007588:	e77f      	b.n	800748a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	3304      	adds	r3, #4
 800758e:	4618      	mov	r0, r3
 8007590:	f7fd fb36 	bl	8004c00 <_ZN13STM32Hardware4timeEv>
 8007594:	4602      	mov	r2, r0
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	f241 3288 	movw	r2, #5000	; 0x1388
 800759e:	4293      	cmp	r3, r2
 80075a0:	bf8c      	ite	hi
 80075a2:	2301      	movhi	r3, #1
 80075a4:	2300      	movls	r3, #0
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f43f af6e 	beq.w	800748a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
          configured_ = false;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80075b4:	2200      	movs	r2, #0
 80075b6:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 80075ba:	f06f 0301 	mvn.w	r3, #1
 80075be:	e1b1      	b.n	8007924 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x504>
      else if (mode_ == MODE_PROTOCOL_VER)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80075c6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d121      	bne.n	8007612 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2bfe      	cmp	r3, #254	; 0xfe
 80075d2:	d10b      	bne.n	80075ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x1cc>
          mode_++;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80075da:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80075de:	3301      	adds	r3, #1
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80075e6:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
 80075ea:	e74e      	b.n	800748a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
          mode_ = MODE_FIRST_FF;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80075f2:	461a      	mov	r2, r3
 80075f4:	2300      	movs	r3, #0
 80075f6:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
          if (configured_ == false)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007600:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8007604:	2b00      	cmp	r3, #0
 8007606:	f47f af40 	bne.w	800748a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 f98e 	bl	800792c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15requestSyncTimeEv>
 8007610:	e73b      	b.n	800748a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007618:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800761c:	2b02      	cmp	r3, #2
 800761e:	d120      	bne.n	8007662 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x242>
        bytes_ = data;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007626:	461a      	mov	r2, r3
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f8c2 38f0 	str.w	r3, [r2, #2288]	; 0x8f0
        index_ = 0;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007634:	461a      	mov	r2, r3
 8007636:	2300      	movs	r3, #0
 8007638:	f8c2 38f8 	str.w	r3, [r2, #2296]	; 0x8f8
        mode_++;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007642:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007646:	3301      	adds	r3, #1
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800764e:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007658:	461a      	mov	r2, r3
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f8c2 38fc 	str.w	r3, [r2, #2300]	; 0x8fc
 8007660:	e713      	b.n	800748a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007668:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800766c:	2b03      	cmp	r3, #3
 800766e:	d118      	bne.n	80076a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007676:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	021b      	lsls	r3, r3, #8
 800767e:	4413      	add	r3, r2
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8007686:	f8c2 38f0 	str.w	r3, [r2, #2288]	; 0x8f0
        mode_++;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007690:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007694:	3301      	adds	r3, #1
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800769c:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
 80076a0:	e6f3      	b.n	800748a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80076a8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80076ac:	2b04      	cmp	r3, #4
 80076ae:	d11f      	bne.n	80076f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80076b6:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80076ba:	425a      	negs	r2, r3
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	b2d2      	uxtb	r2, r2
 80076c0:	bf58      	it	pl
 80076c2:	4253      	negpl	r3, r2
 80076c4:	2bff      	cmp	r3, #255	; 0xff
 80076c6:	d10b      	bne.n	80076e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x2c0>
          mode_++;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80076ce:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80076d2:	3301      	adds	r3, #1
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80076da:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
 80076de:	e6d4      	b.n	800748a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80076e6:	461a      	mov	r2, r3
 80076e8:	2300      	movs	r3, #0
 80076ea:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
 80076ee:	e6cc      	b.n	800748a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80076f6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80076fa:	2b05      	cmp	r3, #5
 80076fc:	d119      	bne.n	8007732 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x312>
        topic_ = data;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007704:	461a      	mov	r2, r3
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f8c2 38f4 	str.w	r3, [r2, #2292]	; 0x8f4
        mode_++;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007712:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007716:	3301      	adds	r3, #1
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800771e:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007728:	461a      	mov	r2, r3
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f8c2 38fc 	str.w	r3, [r2, #2300]	; 0x8fc
 8007730:	e6ab      	b.n	800748a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007738:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800773c:	2b06      	cmp	r3, #6
 800773e:	d123      	bne.n	8007788 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x368>
        topic_ += data << 8;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007746:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	021b      	lsls	r3, r3, #8
 800774e:	4413      	add	r3, r2
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8007756:	f8c2 38f4 	str.w	r3, [r2, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007760:	461a      	mov	r2, r3
 8007762:	2307      	movs	r3, #7
 8007764:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
        if (bytes_ == 0)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800776e:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8007772:	2b00      	cmp	r3, #0
 8007774:	f47f ae89 	bne.w	800748a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
          mode_ = MODE_MSG_CHECKSUM;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800777e:	461a      	mov	r2, r3
 8007780:	2308      	movs	r3, #8
 8007782:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
 8007786:	e680      	b.n	800748a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800778e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007792:	2b08      	cmp	r3, #8
 8007794:	f47f ae79 	bne.w	800748a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
        mode_ = MODE_FIRST_FF;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800779e:	461a      	mov	r2, r3
 80077a0:	2300      	movs	r3, #0
 80077a2:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80077ac:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80077b0:	425a      	negs	r2, r3
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	b2d2      	uxtb	r2, r2
 80077b6:	bf58      	it	pl
 80077b8:	4253      	negpl	r3, r2
 80077ba:	2bff      	cmp	r3, #255	; 0xff
 80077bc:	f47f ae65 	bne.w	800748a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80077c6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d116      	bne.n	80077fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x3dc>
            requestSyncTime();
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 f8ac 	bl	800792c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15requestSyncTimeEv>
            negotiateTopics();
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 f8c7 	bl	8007968 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80077e0:	461a      	mov	r2, r3
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	f8c2 3904 	str.w	r3, [r2, #2308]	; 0x904
            last_sync_receive_time = c_time;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80077ee:	461a      	mov	r2, r3
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	f8c2 3908 	str.w	r3, [r2, #2312]	; 0x908
            return SPIN_ERR;
 80077f6:	f04f 33ff 	mov.w	r3, #4294967295
 80077fa:	e093      	b.n	8007924 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x504>
          else if (topic_ == TopicInfo::ID_TIME)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007802:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8007806:	2b0a      	cmp	r3, #10
 8007808:	d109      	bne.n	800781e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x3fe>
            saw_time_msg = true;
 800780a:	2301      	movs	r3, #1
 800780c:	75bb      	strb	r3, [r7, #22]
            syncTime(message_in);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8007814:	4619      	mov	r1, r3
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 f988 	bl	8007b2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8syncTimeEPh>
 800781c:	e635      	b.n	800748a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007824:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8007828:	2b06      	cmp	r3, #6
 800782a:	d111      	bne.n	8007850 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8007832:	3314      	adds	r3, #20
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	f602 0224 	addw	r2, r2, #2084	; 0x824
 800783a:	4611      	mov	r1, r2
 800783c:	4618      	mov	r0, r3
 800783e:	f7fc fefe 	bl	800463e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007848:	2201      	movs	r2, #1
 800784a:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 800784e:	e61c      	b.n	800748a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007856:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800785a:	2b0b      	cmp	r3, #11
 800785c:	d108      	bne.n	8007870 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x450>
            configured_ = false;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007864:	2200      	movs	r2, #0
 8007866:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
            tx_stop_requested = true;
 800786a:	2301      	movs	r3, #1
 800786c:	75fb      	strb	r3, [r7, #23]
 800786e:	e60c      	b.n	800748a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
            if (subscribers[topic_ - 100])
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007876:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800787a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f602 2222 	addw	r2, r2, #2594	; 0xa22
 8007884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007888:	2b00      	cmp	r3, #0
 800788a:	f43f adfe 	beq.w	800748a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
              subscribers[topic_ - 100]->callback(message_in);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007894:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8007898:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f602 2222 	addw	r2, r2, #2594	; 0xa22
 80078a2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80078ac:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80078b0:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f602 2222 	addw	r2, r2, #2594	; 0xa22
 80078ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	f602 0224 	addw	r2, r2, #2084	; 0x824
 80078c8:	4611      	mov	r1, r2
 80078ca:	4798      	blx	r3
    while (true)
 80078cc:	e5dd      	b.n	800748a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x6a>
        break;
 80078ce:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80078d6:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d014      	beq.n	8007908 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x4e8>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80078e4:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 80078e8:	693a      	ldr	r2, [r7, #16]
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d909      	bls.n	8007908 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x4e8>
      requestSyncTime();
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 f819 	bl	800792c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007900:	461a      	mov	r2, r3
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	f8c2 3904 	str.w	r3, [r2, #2308]	; 0x904
    return saw_time_msg ? SPIN_TIME_RECV : (tx_stop_requested ? SPIN_TX_STOP_REQUESTED : SPIN_OK);
 8007908:	7dbb      	ldrb	r3, [r7, #22]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d002      	beq.n	8007914 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x4f4>
 800790e:	f06f 0303 	mvn.w	r3, #3
 8007912:	e006      	b.n	8007922 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x502>
 8007914:	7dfb      	ldrb	r3, [r7, #23]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d002      	beq.n	8007920 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x500>
 800791a:	f06f 0302 	mvn.w	r3, #2
 800791e:	e000      	b.n	8007922 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x502>
 8007920:	2300      	movs	r3, #0
 8007922:	bf00      	nop
  }
 8007924:	4618      	mov	r0, r3
 8007926:	3718      	adds	r7, #24
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15requestSyncTimeEv>:
  void requestSyncTime()
 800792c:	b580      	push	{r7, lr}
 800792e:	b086      	sub	sp, #24
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8007934:	f107 030c 	add.w	r3, r7, #12
 8007938:	4618      	mov	r0, r3
 800793a:	f7fc f9dd 	bl	8003cf8 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f107 020c 	add.w	r2, r7, #12
 8007948:	210a      	movs	r1, #10
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	4798      	blx	r3
    rt_time = hardware_.time();
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	3304      	adds	r3, #4
 8007952:	4618      	mov	r0, r3
 8007954:	f7fd f954 	bl	8004c00 <_ZN13STM32Hardware4timeEv>
 8007958:	4602      	mov	r2, r0
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  }
 8007960:	bf00      	nop
 8007962:	3718      	adds	r7, #24
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8007968:	b590      	push	{r4, r7, lr}
 800796a:	b08b      	sub	sp, #44	; 0x2c
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8007970:	f107 030c 	add.w	r3, r7, #12
 8007974:	4618      	mov	r0, r3
 8007976:	f7fc faaf 	bl	8003ed8 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800797a:	2300      	movs	r3, #0
 800797c:	627b      	str	r3, [r7, #36]	; 0x24
 800797e:	e062      	b.n	8007a46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007984:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	4413      	add	r3, r2
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d056      	beq.n	8007a40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007996:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	4413      	add	r3, r2
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079aa:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	4413      	add	r3, r2
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079bc:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	4413      	add	r3, r2
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	6859      	ldr	r1, [r3, #4]
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079cc:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	4413      	add	r3, r2
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	3308      	adds	r3, #8
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4608      	mov	r0, r1
 80079e0:	4798      	blx	r3
 80079e2:	4603      	mov	r3, r0
 80079e4:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ea:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4413      	add	r3, r2
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	6859      	ldr	r1, [r3, #4]
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fa:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	4413      	add	r3, r2
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	330c      	adds	r3, #12
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4608      	mov	r0, r1
 8007a0e:	4798      	blx	r3
 8007a10:	4603      	mov	r3, r0
 8007a12:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8007a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a18:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681c      	ldr	r4, [r3, #0]
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a24:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	4413      	add	r3, r2
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7fc ffbd 	bl	80049ae <_ZN3ros9Publisher15getEndpointTypeEv>
 8007a34:	4601      	mov	r1, r0
 8007a36:	f107 030c 	add.w	r3, r7, #12
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8007a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a42:	3301      	adds	r3, #1
 8007a44:	627b      	str	r3, [r7, #36]	; 0x24
 8007a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a48:	2b18      	cmp	r3, #24
 8007a4a:	dd99      	ble.n	8007980 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8007a50:	e05e      	b.n	8007b10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a56:	f602 2222 	addw	r2, r2, #2594	; 0xa22
 8007a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d053      	beq.n	8007b0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a66:	f602 2222 	addw	r2, r2, #2594	; 0xa22
 8007a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a78:	f602 2222 	addw	r2, r2, #2594	; 0xa22
 8007a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a88:	f602 2222 	addw	r2, r2, #2594	; 0xa22
 8007a8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a94:	f602 2222 	addw	r2, r2, #2594	; 0xa22
 8007a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	3308      	adds	r3, #8
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4608      	mov	r0, r1
 8007aa4:	4798      	blx	r3
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aae:	f602 2222 	addw	r2, r2, #2594	; 0xa22
 8007ab2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aba:	f602 2222 	addw	r2, r2, #2594	; 0xa22
 8007abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	330c      	adds	r3, #12
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4608      	mov	r0, r1
 8007aca:	4798      	blx	r3
 8007acc:	4603      	mov	r3, r0
 8007ace:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8007ad0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ad4:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	681c      	ldr	r4, [r3, #0]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ae0:	f602 2222 	addw	r2, r2, #2594	; 0xa22
 8007ae4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aec:	f602 2222 	addw	r2, r2, #2594	; 0xa22
 8007af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	3304      	adds	r3, #4
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4608      	mov	r0, r1
 8007afc:	4798      	blx	r3
 8007afe:	4601      	mov	r1, r0
 8007b00:	f107 030c 	add.w	r3, r7, #12
 8007b04:	461a      	mov	r2, r3
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8007b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8007b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b12:	2b18      	cmp	r3, #24
 8007b14:	dd9d      	ble.n	8007a52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8007b22:	bf00      	nop
 8007b24:	372c      	adds	r7, #44	; 0x2c
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd90      	pop	{r4, r7, pc}
	...

08007b2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b086      	sub	sp, #24
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8007b36:	f107 0308 	add.w	r3, r7, #8
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f7fc f8dc 	bl	8003cf8 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	3304      	adds	r3, #4
 8007b44:	4618      	mov	r0, r3
 8007b46:	f7fd f85b 	bl	8004c00 <_ZN13STM32Hardware4timeEv>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 8007b52:	1ad3      	subs	r3, r2, r3
 8007b54:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8007b56:	f107 0308 	add.w	r3, r7, #8
 8007b5a:	6839      	ldr	r1, [r7, #0]
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f7fc f93b 	bl	8003dd8 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	4916      	ldr	r1, [pc, #88]	; (8007bc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8syncTimeEPh+0x94>)
 8007b68:	fba1 1303 	umull	r1, r3, r1, r3
 8007b6c:	099b      	lsrs	r3, r3, #6
 8007b6e:	4413      	add	r3, r2
 8007b70:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8007b72:	6939      	ldr	r1, [r7, #16]
 8007b74:	697a      	ldr	r2, [r7, #20]
 8007b76:	4b12      	ldr	r3, [pc, #72]	; (8007bc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8syncTimeEPh+0x94>)
 8007b78:	fba3 0302 	umull	r0, r3, r3, r2
 8007b7c:	099b      	lsrs	r3, r3, #6
 8007b7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007b82:	fb00 f303 	mul.w	r3, r0, r3
 8007b86:	1ad3      	subs	r3, r2, r3
 8007b88:	4a0e      	ldr	r2, [pc, #56]	; (8007bc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8syncTimeEPh+0x98>)
 8007b8a:	fb02 f303 	mul.w	r3, r2, r3
 8007b8e:	440b      	add	r3, r1
 8007b90:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8007b92:	f107 0308 	add.w	r3, r7, #8
 8007b96:	3304      	adds	r3, #4
 8007b98:	4619      	mov	r1, r3
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 f8c0 	bl	8007d20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	3304      	adds	r3, #4
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f7fd f82b 	bl	8004c00 <_ZN13STM32Hardware4timeEv>
 8007baa:	4602      	mov	r2, r0
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007bb2:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8007bb6:	bf00      	nop
 8007bb8:	3718      	adds	r7, #24
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	10624dd3 	.word	0x10624dd3
 8007bc4:	000f4240 	.word	0x000f4240

08007bc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b088      	sub	sp, #32
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	2b63      	cmp	r3, #99	; 0x63
 8007bd8:	dd0b      	ble.n	8007bf2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x2a>
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007be0:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8007be4:	f083 0301 	eor.w	r3, r3, #1
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d001      	beq.n	8007bf2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	e090      	b.n	8007d14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007bfe:	3304      	adds	r3, #4
 8007c00:	3307      	adds	r3, #7
 8007c02:	4619      	mov	r1, r3
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	4790      	blx	r2
 8007c08:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c10:	22ff      	movs	r2, #255	; 0xff
 8007c12:	f883 2824 	strb.w	r2, [r3, #2084]	; 0x824
    message_out[1] = PROTOCOL_VER;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c1c:	22fe      	movs	r2, #254	; 0xfe
 8007c1e:	f883 2825 	strb.w	r2, [r3, #2085]	; 0x825
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	b2da      	uxtb	r2, r3
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c2c:	f883 2826 	strb.w	r2, [r3, #2086]	; 0x826
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	0a1b      	lsrs	r3, r3, #8
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	b2da      	uxtb	r2, r3
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c40:	f883 2827 	strb.w	r2, [r3, #2087]	; 0x827
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c4a:	f893 2826 	ldrb.w	r2, [r3, #2086]	; 0x826
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c54:	f893 3827 	ldrb.w	r3, [r3, #2087]	; 0x827
 8007c58:	4413      	add	r3, r2
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	43db      	mvns	r3, r3
 8007c5e:	b2da      	uxtb	r2, r3
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c66:	f883 2828 	strb.w	r2, [r3, #2088]	; 0x828
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	b2da      	uxtb	r2, r3
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c74:	f883 2829 	strb.w	r2, [r3, #2089]	; 0x829
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	b21b      	sxth	r3, r3
 8007c7c:	121b      	asrs	r3, r3, #8
 8007c7e:	b21b      	sxth	r3, r3
 8007c80:	b2da      	uxtb	r2, r3
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c88:	f883 282a 	strb.w	r2, [r3, #2090]	; 0x82a

    /* calculate checksum */
    int chk = 0;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8007c90:	2305      	movs	r3, #5
 8007c92:	61bb      	str	r3, [r7, #24]
 8007c94:	e00d      	b.n	8007cb2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE+0xea>
      chk += message_out[i];
 8007c96:	68fa      	ldr	r2, [r7, #12]
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007ca0:	3304      	adds	r3, #4
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	4413      	add	r3, r2
 8007caa:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8007cac:	69bb      	ldr	r3, [r7, #24]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	61bb      	str	r3, [r7, #24]
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	3306      	adds	r3, #6
 8007cb6:	69ba      	ldr	r2, [r7, #24]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	ddec      	ble.n	8007c96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE+0xce>
    l += 7;
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	3307      	adds	r3, #7
 8007cc0:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	425a      	negs	r2, r3
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	b2d2      	uxtb	r2, r2
 8007cca:	bf58      	it	pl
 8007ccc:	4253      	negpl	r3, r2
 8007cce:	b2da      	uxtb	r2, r3
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	1c59      	adds	r1, r3, #1
 8007cd4:	6179      	str	r1, [r7, #20]
 8007cd6:	43d2      	mvns	r2, r2
 8007cd8:	b2d1      	uxtb	r1, r2
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	4413      	add	r3, r2
 8007cde:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007ce2:	3304      	adds	r3, #4
 8007ce4:	460a      	mov	r2, r1
 8007ce6:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cee:	dc0b      	bgt.n	8007d08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	1d18      	adds	r0, r3, #4
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007cfa:	3304      	adds	r3, #4
 8007cfc:	697a      	ldr	r2, [r7, #20]
 8007cfe:	4619      	mov	r1, r3
 8007d00:	f7fc ff38 	bl	8004b74 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	e005      	b.n	8007d14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8007d08:	4904      	ldr	r1, [pc, #16]	; (8007d1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x154>)
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f000 f848 	bl	8007da0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8logerrorEPKc>
      return -1;
 8007d10:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8007d14:	4618      	mov	r0, r3
 8007d16:	3720      	adds	r7, #32
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	080155c4 	.word	0x080155c4

08007d20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	3304      	adds	r3, #4
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7fc ff66 	bl	8004c00 <_ZN13STM32Hardware4timeEv>
 8007d34:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	4915      	ldr	r1, [pc, #84]	; (8007d94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE6setNowERKNS_4TimeE+0x74>)
 8007d3e:	fba1 1303 	umull	r1, r3, r1, r3
 8007d42:	099b      	lsrs	r3, r3, #6
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	1e5a      	subs	r2, r3, #1
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	6859      	ldr	r1, [r3, #4]
 8007d52:	68fa      	ldr	r2, [r7, #12]
 8007d54:	4b0f      	ldr	r3, [pc, #60]	; (8007d94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE6setNowERKNS_4TimeE+0x74>)
 8007d56:	fba3 0302 	umull	r0, r3, r3, r2
 8007d5a:	099b      	lsrs	r3, r3, #6
 8007d5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007d60:	fb00 f303 	mul.w	r3, r0, r3
 8007d64:	1ad3      	subs	r3, r2, r3
 8007d66:	4a0c      	ldr	r2, [pc, #48]	; (8007d98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE6setNowERKNS_4TimeE+0x78>)
 8007d68:	fb02 f303 	mul.w	r3, r2, r3
 8007d6c:	1aca      	subs	r2, r1, r3
 8007d6e:	4b0b      	ldr	r3, [pc, #44]	; (8007d9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE6setNowERKNS_4TimeE+0x7c>)
 8007d70:	4413      	add	r3, r2
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	f8c2 381c 	str.w	r3, [r2, #2076]	; 0x81c
    normalizeSecNSec(sec_offset, nsec_offset);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f603 0218 	addw	r2, r3, #2072	; 0x818
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8007d84:	4619      	mov	r1, r3
 8007d86:	4610      	mov	r0, r2
 8007d88:	f000 fdf6 	bl	8008978 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8007d8c:	bf00      	nop
 8007d8e:	3710      	adds	r7, #16
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	10624dd3 	.word	0x10624dd3
 8007d98:	000f4240 	.word	0x000f4240
 8007d9c:	3b9aca00 	.word	0x3b9aca00

08007da0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8007daa:	683a      	ldr	r2, [r7, #0]
 8007dac:	2103      	movs	r1, #3
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 f804 	bl	8007dbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE3logEcPKc>
  }
 8007db4:	bf00      	nop
 8007db6:	3708      	adds	r7, #8
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE3logEcPKc>:
  void log(char byte, const char * msg)
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b088      	sub	sp, #32
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	607a      	str	r2, [r7, #4]
 8007dc8:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8007dca:	f107 0314 	add.w	r3, r7, #20
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7fc fa46 	bl	8004260 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8007dd4:	7afb      	ldrb	r3, [r7, #11]
 8007dd6:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f107 0214 	add.w	r2, r7, #20
 8007de6:	2107      	movs	r1, #7
 8007de8:	68f8      	ldr	r0, [r7, #12]
 8007dea:	4798      	blx	r3
  }
 8007dec:	bf00      	nop
 8007dee:	3720      	adds	r7, #32
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <_Z41__static_initialization_and_destruction_0ii>:
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d143      	bne.n	8007e8c <_Z41__static_initialization_and_destruction_0ii+0x98>
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d13e      	bne.n	8007e8c <_Z41__static_initialization_and_destruction_0ii+0x98>
ros::NodeHandle nh;
 8007e0e:	4821      	ldr	r0, [pc, #132]	; (8007e94 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8007e10:	f7ff f80e 	bl	8006e30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EEC1Ev>
geometry_msgs::Vector3 kinMsg;
 8007e14:	4820      	ldr	r0, [pc, #128]	; (8007e98 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8007e16:	f7fd fdbd 	bl	8005994 <_ZN13geometry_msgs7Vector3C1Ev>
geometry_msgs::Vector3 KinTarget_msg;
 8007e1a:	4820      	ldr	r0, [pc, #128]	; (8007e9c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8007e1c:	f7fd fdba 	bl	8005994 <_ZN13geometry_msgs7Vector3C1Ev>
geometry_msgs::Vector3 aksenMsg;
 8007e20:	481f      	ldr	r0, [pc, #124]	; (8007ea0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8007e22:	f7fd fdb7 	bl	8005994 <_ZN13geometry_msgs7Vector3C1Ev>
geometry_msgs::Quaternion sensMsg;
 8007e26:	481f      	ldr	r0, [pc, #124]	; (8007ea4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8007e28:	f7fc fef6 	bl	8004c18 <_ZN13geometry_msgs10QuaternionC1Ev>
std_msgs::Bool stateInv_msg;
 8007e2c:	481e      	ldr	r0, [pc, #120]	; (8007ea8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8007e2e:	f7fe ff21 	bl	8006c74 <_ZN8std_msgs4BoolC1Ev>
std_msgs::Float32 error_arr_msg;
 8007e32:	481e      	ldr	r0, [pc, #120]	; (8007eac <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8007e34:	f7fe fac4 	bl	80063c0 <_ZN8std_msgs7Float32C1Ev>
std_msgs::Float32MultiArray imuData;
 8007e38:	481d      	ldr	r0, [pc, #116]	; (8007eb0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8007e3a:	f7fe fde1 	bl	8006a00 <_ZN8std_msgs17Float32MultiArrayC1Ev>
std_msgs::Float32MultiArray odomData;
 8007e3e:	481d      	ldr	r0, [pc, #116]	; (8007eb4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8007e40:	f7fe fdde 	bl	8006a00 <_ZN8std_msgs17Float32MultiArrayC1Ev>
ros::Subscriber<geometry_msgs::Vector3> kinematic("robot/target_kinematic", &kinCallback);
 8007e44:	2301      	movs	r3, #1
 8007e46:	4a1c      	ldr	r2, [pc, #112]	; (8007eb8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8007e48:	491c      	ldr	r1, [pc, #112]	; (8007ebc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8007e4a:	481d      	ldr	r0, [pc, #116]	; (8007ec0 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8007e4c:	f7ff fa10 	bl	8007270 <_ZN3ros10SubscriberIN13geometry_msgs7Vector3EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<geometry_msgs::Vector3> invKinematic("robot/inv_target_kinematic", &invkinCallback);
 8007e50:	2301      	movs	r3, #1
 8007e52:	4a1c      	ldr	r2, [pc, #112]	; (8007ec4 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8007e54:	491c      	ldr	r1, [pc, #112]	; (8007ec8 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8007e56:	481d      	ldr	r0, [pc, #116]	; (8007ecc <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8007e58:	f7ff fa0a 	bl	8007270 <_ZN3ros10SubscriberIN13geometry_msgs7Vector3EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Bool> stateInv_Sub("robot/stateInv", &stateInverseKin);
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	4a1c      	ldr	r2, [pc, #112]	; (8007ed0 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8007e60:	491c      	ldr	r1, [pc, #112]	; (8007ed4 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8007e62:	481d      	ldr	r0, [pc, #116]	; (8007ed8 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8007e64:	f7ff fa28 	bl	80072b8 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>
ros::Publisher errorArr("robot/Error_Aksen", &error_arr_msg);
 8007e68:	2300      	movs	r3, #0
 8007e6a:	4a10      	ldr	r2, [pc, #64]	; (8007eac <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8007e6c:	491b      	ldr	r1, [pc, #108]	; (8007edc <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8007e6e:	481c      	ldr	r0, [pc, #112]	; (8007ee0 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8007e70:	f7fc fd72 	bl	8004958 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher imu_pub("robot/imu", &imuData);
 8007e74:	2300      	movs	r3, #0
 8007e76:	4a0e      	ldr	r2, [pc, #56]	; (8007eb0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8007e78:	491a      	ldr	r1, [pc, #104]	; (8007ee4 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8007e7a:	481b      	ldr	r0, [pc, #108]	; (8007ee8 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8007e7c:	f7fc fd6c 	bl	8004958 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher odom_pub("robot/odom", &odomData);
 8007e80:	2300      	movs	r3, #0
 8007e82:	4a0c      	ldr	r2, [pc, #48]	; (8007eb4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8007e84:	4919      	ldr	r1, [pc, #100]	; (8007eec <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8007e86:	481a      	ldr	r0, [pc, #104]	; (8007ef0 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8007e88:	f7fc fd66 	bl	8004958 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8007e8c:	bf00      	nop
 8007e8e:	3708      	adds	r7, #8
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	20000b70 	.word	0x20000b70
 8007e98:	200034b0 	.word	0x200034b0
 8007e9c:	200034d0 	.word	0x200034d0
 8007ea0:	200034f0 	.word	0x200034f0
 8007ea4:	20003510 	.word	0x20003510
 8007ea8:	20003538 	.word	0x20003538
 8007eac:	20003540 	.word	0x20003540
 8007eb0:	20003548 	.word	0x20003548
 8007eb4:	20003578 	.word	0x20003578
 8007eb8:	08006d49 	.word	0x08006d49
 8007ebc:	08015600 	.word	0x08015600
 8007ec0:	200035a8 	.word	0x200035a8
 8007ec4:	08006da1 	.word	0x08006da1
 8007ec8:	08015618 	.word	0x08015618
 8007ecc:	200035e0 	.word	0x200035e0
 8007ed0:	08006df1 	.word	0x08006df1
 8007ed4:	08015634 	.word	0x08015634
 8007ed8:	20003618 	.word	0x20003618
 8007edc:	08015644 	.word	0x08015644
 8007ee0:	20003634 	.word	0x20003634
 8007ee4:	08015658 	.word	0x08015658
 8007ee8:	20003648 	.word	0x20003648
 8007eec:	08015664 	.word	0x08015664
 8007ef0:	2000365c 	.word	0x2000365c

08007ef4 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	330c      	adds	r3, #12
 8007f02:	6839      	ldr	r1, [r7, #0]
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7fe fee4 	bl	8006cd2 <_ZN8std_msgs4Bool11deserializeEPh>
    this->cb_(msg);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	695b      	ldr	r3, [r3, #20]
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	320c      	adds	r2, #12
 8007f12:	4610      	mov	r0, r2
 8007f14:	4798      	blx	r3
  }
 8007f16:	bf00      	nop
 8007f18:	3708      	adds	r7, #8
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <_ZN3ros10SubscriberIN8std_msgs4BoolEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8007f1e:	b480      	push	{r7}
 8007f20:	b083      	sub	sp, #12
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	699b      	ldr	r3, [r3, #24]
  }
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	370c      	adds	r7, #12
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr

08007f36 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b082      	sub	sp, #8
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	330c      	adds	r3, #12
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7fe fee4 	bl	8006d10 <_ZN8std_msgs4Bool7getTypeEv>
 8007f48:	4603      	mov	r3, r0
  }
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3708      	adds	r7, #8
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b082      	sub	sp, #8
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	330c      	adds	r3, #12
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7fe fee4 	bl	8006d2c <_ZN8std_msgs4Bool6getMD5Ev>
 8007f64:	4603      	mov	r3, r0
  }
 8007f66:	4618      	mov	r0, r3
 8007f68:	3708      	adds	r7, #8
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <_ZN3ros10SubscriberIN13geometry_msgs7Vector3EvE8callbackEPh>:
  virtual void callback(unsigned char* data) override
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b082      	sub	sp, #8
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
 8007f76:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	3310      	adds	r3, #16
 8007f7c:	6839      	ldr	r1, [r7, #0]
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7fd fea3 	bl	8005cca <_ZN13geometry_msgs7Vector311deserializeEPh>
    this->cb_(msg);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	3210      	adds	r2, #16
 8007f8c:	4610      	mov	r0, r2
 8007f8e:	4798      	blx	r3
  }
 8007f90:	bf00      	nop
 8007f92:	3708      	adds	r7, #8
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <_ZN3ros10SubscriberIN13geometry_msgs7Vector3EvE15getEndpointTypeEv>:
  virtual int getEndpointType() override
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  }
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	370c      	adds	r7, #12
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <_ZN3ros10SubscriberIN13geometry_msgs7Vector3EvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	3310      	adds	r3, #16
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7fe f9e3 	bl	8006388 <_ZN13geometry_msgs7Vector37getTypeEv>
 8007fc2:	4603      	mov	r3, r0
  }
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3708      	adds	r7, #8
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <_ZN3ros10SubscriberIN13geometry_msgs7Vector3EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	3310      	adds	r3, #16
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f7fe f9e3 	bl	80063a4 <_ZN13geometry_msgs7Vector36getMD5Ev>
 8007fde:	4603      	mov	r3, r0
  }
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3708      	adds	r7, #8
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9connectedEv>:
  virtual bool connected() override
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
    return configured_;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007ff6:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	370c      	adds	r7, #12
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr

08008006 <_GLOBAL__sub_I_xtarget>:
 8008006:	b580      	push	{r7, lr}
 8008008:	af00      	add	r7, sp, #0
 800800a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800800e:	2001      	movs	r0, #1
 8008010:	f7ff fef0 	bl	8007df4 <_Z41__static_initialization_and_destruction_0ii>
 8008014:	bd80      	pop	{r7, pc}
	...

08008018 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800801e:	2300      	movs	r3, #0
 8008020:	607b      	str	r3, [r7, #4]
 8008022:	4b12      	ldr	r3, [pc, #72]	; (800806c <HAL_MspInit+0x54>)
 8008024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008026:	4a11      	ldr	r2, [pc, #68]	; (800806c <HAL_MspInit+0x54>)
 8008028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800802c:	6453      	str	r3, [r2, #68]	; 0x44
 800802e:	4b0f      	ldr	r3, [pc, #60]	; (800806c <HAL_MspInit+0x54>)
 8008030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008036:	607b      	str	r3, [r7, #4]
 8008038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800803a:	2300      	movs	r3, #0
 800803c:	603b      	str	r3, [r7, #0]
 800803e:	4b0b      	ldr	r3, [pc, #44]	; (800806c <HAL_MspInit+0x54>)
 8008040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008042:	4a0a      	ldr	r2, [pc, #40]	; (800806c <HAL_MspInit+0x54>)
 8008044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008048:	6413      	str	r3, [r2, #64]	; 0x40
 800804a:	4b08      	ldr	r3, [pc, #32]	; (800806c <HAL_MspInit+0x54>)
 800804c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008052:	603b      	str	r3, [r7, #0]
 8008054:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8008056:	2200      	movs	r2, #0
 8008058:	210f      	movs	r1, #15
 800805a:	f06f 0001 	mvn.w	r0, #1
 800805e:	f000 fdff 	bl	8008c60 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008062:	bf00      	nop
 8008064:	3708      	adds	r7, #8
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	40023800 	.word	0x40023800

08008070 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b08c      	sub	sp, #48	; 0x30
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008078:	f107 031c 	add.w	r3, r7, #28
 800807c:	2200      	movs	r2, #0
 800807e:	601a      	str	r2, [r3, #0]
 8008080:	605a      	str	r2, [r3, #4]
 8008082:	609a      	str	r2, [r3, #8]
 8008084:	60da      	str	r2, [r3, #12]
 8008086:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a71      	ldr	r2, [pc, #452]	; (8008254 <HAL_I2C_MspInit+0x1e4>)
 800808e:	4293      	cmp	r3, r2
 8008090:	f040 808c 	bne.w	80081ac <HAL_I2C_MspInit+0x13c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008094:	2300      	movs	r3, #0
 8008096:	61bb      	str	r3, [r7, #24]
 8008098:	4b6f      	ldr	r3, [pc, #444]	; (8008258 <HAL_I2C_MspInit+0x1e8>)
 800809a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800809c:	4a6e      	ldr	r2, [pc, #440]	; (8008258 <HAL_I2C_MspInit+0x1e8>)
 800809e:	f043 0302 	orr.w	r3, r3, #2
 80080a2:	6313      	str	r3, [r2, #48]	; 0x30
 80080a4:	4b6c      	ldr	r3, [pc, #432]	; (8008258 <HAL_I2C_MspInit+0x1e8>)
 80080a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080a8:	f003 0302 	and.w	r3, r3, #2
 80080ac:	61bb      	str	r3, [r7, #24]
 80080ae:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80080b0:	f44f 7310 	mov.w	r3, #576	; 0x240
 80080b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80080b6:	2312      	movs	r3, #18
 80080b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080ba:	2300      	movs	r3, #0
 80080bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080be:	2303      	movs	r3, #3
 80080c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80080c2:	2304      	movs	r3, #4
 80080c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80080c6:	f107 031c 	add.w	r3, r7, #28
 80080ca:	4619      	mov	r1, r3
 80080cc:	4863      	ldr	r0, [pc, #396]	; (800825c <HAL_I2C_MspInit+0x1ec>)
 80080ce:	f001 f9f3 	bl	80094b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80080d2:	2300      	movs	r3, #0
 80080d4:	617b      	str	r3, [r7, #20]
 80080d6:	4b60      	ldr	r3, [pc, #384]	; (8008258 <HAL_I2C_MspInit+0x1e8>)
 80080d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080da:	4a5f      	ldr	r2, [pc, #380]	; (8008258 <HAL_I2C_MspInit+0x1e8>)
 80080dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80080e0:	6413      	str	r3, [r2, #64]	; 0x40
 80080e2:	4b5d      	ldr	r3, [pc, #372]	; (8008258 <HAL_I2C_MspInit+0x1e8>)
 80080e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080ea:	617b      	str	r3, [r7, #20]
 80080ec:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80080ee:	4b5c      	ldr	r3, [pc, #368]	; (8008260 <HAL_I2C_MspInit+0x1f0>)
 80080f0:	4a5c      	ldr	r2, [pc, #368]	; (8008264 <HAL_I2C_MspInit+0x1f4>)
 80080f2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80080f4:	4b5a      	ldr	r3, [pc, #360]	; (8008260 <HAL_I2C_MspInit+0x1f0>)
 80080f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80080fa:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80080fc:	4b58      	ldr	r3, [pc, #352]	; (8008260 <HAL_I2C_MspInit+0x1f0>)
 80080fe:	2200      	movs	r2, #0
 8008100:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008102:	4b57      	ldr	r3, [pc, #348]	; (8008260 <HAL_I2C_MspInit+0x1f0>)
 8008104:	2200      	movs	r2, #0
 8008106:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008108:	4b55      	ldr	r3, [pc, #340]	; (8008260 <HAL_I2C_MspInit+0x1f0>)
 800810a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800810e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008110:	4b53      	ldr	r3, [pc, #332]	; (8008260 <HAL_I2C_MspInit+0x1f0>)
 8008112:	2200      	movs	r2, #0
 8008114:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008116:	4b52      	ldr	r3, [pc, #328]	; (8008260 <HAL_I2C_MspInit+0x1f0>)
 8008118:	2200      	movs	r2, #0
 800811a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800811c:	4b50      	ldr	r3, [pc, #320]	; (8008260 <HAL_I2C_MspInit+0x1f0>)
 800811e:	2200      	movs	r2, #0
 8008120:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8008122:	4b4f      	ldr	r3, [pc, #316]	; (8008260 <HAL_I2C_MspInit+0x1f0>)
 8008124:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008128:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800812a:	4b4d      	ldr	r3, [pc, #308]	; (8008260 <HAL_I2C_MspInit+0x1f0>)
 800812c:	2200      	movs	r2, #0
 800812e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8008130:	484b      	ldr	r0, [pc, #300]	; (8008260 <HAL_I2C_MspInit+0x1f0>)
 8008132:	f000 fdbf 	bl	8008cb4 <HAL_DMA_Init>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d001      	beq.n	8008140 <HAL_I2C_MspInit+0xd0>
    {
      Error_Handler();
 800813c:	f7fb fdb6 	bl	8003cac <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	4a47      	ldr	r2, [pc, #284]	; (8008260 <HAL_I2C_MspInit+0x1f0>)
 8008144:	639a      	str	r2, [r3, #56]	; 0x38
 8008146:	4a46      	ldr	r2, [pc, #280]	; (8008260 <HAL_I2C_MspInit+0x1f0>)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800814c:	4b46      	ldr	r3, [pc, #280]	; (8008268 <HAL_I2C_MspInit+0x1f8>)
 800814e:	4a47      	ldr	r2, [pc, #284]	; (800826c <HAL_I2C_MspInit+0x1fc>)
 8008150:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8008152:	4b45      	ldr	r3, [pc, #276]	; (8008268 <HAL_I2C_MspInit+0x1f8>)
 8008154:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008158:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800815a:	4b43      	ldr	r3, [pc, #268]	; (8008268 <HAL_I2C_MspInit+0x1f8>)
 800815c:	2240      	movs	r2, #64	; 0x40
 800815e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008160:	4b41      	ldr	r3, [pc, #260]	; (8008268 <HAL_I2C_MspInit+0x1f8>)
 8008162:	2200      	movs	r2, #0
 8008164:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008166:	4b40      	ldr	r3, [pc, #256]	; (8008268 <HAL_I2C_MspInit+0x1f8>)
 8008168:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800816c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800816e:	4b3e      	ldr	r3, [pc, #248]	; (8008268 <HAL_I2C_MspInit+0x1f8>)
 8008170:	2200      	movs	r2, #0
 8008172:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008174:	4b3c      	ldr	r3, [pc, #240]	; (8008268 <HAL_I2C_MspInit+0x1f8>)
 8008176:	2200      	movs	r2, #0
 8008178:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800817a:	4b3b      	ldr	r3, [pc, #236]	; (8008268 <HAL_I2C_MspInit+0x1f8>)
 800817c:	2200      	movs	r2, #0
 800817e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8008180:	4b39      	ldr	r3, [pc, #228]	; (8008268 <HAL_I2C_MspInit+0x1f8>)
 8008182:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008186:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008188:	4b37      	ldr	r3, [pc, #220]	; (8008268 <HAL_I2C_MspInit+0x1f8>)
 800818a:	2200      	movs	r2, #0
 800818c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800818e:	4836      	ldr	r0, [pc, #216]	; (8008268 <HAL_I2C_MspInit+0x1f8>)
 8008190:	f000 fd90 	bl	8008cb4 <HAL_DMA_Init>
 8008194:	4603      	mov	r3, r0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d001      	beq.n	800819e <HAL_I2C_MspInit+0x12e>
    {
      Error_Handler();
 800819a:	f7fb fd87 	bl	8003cac <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4a31      	ldr	r2, [pc, #196]	; (8008268 <HAL_I2C_MspInit+0x1f8>)
 80081a2:	635a      	str	r2, [r3, #52]	; 0x34
 80081a4:	4a30      	ldr	r2, [pc, #192]	; (8008268 <HAL_I2C_MspInit+0x1f8>)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80081aa:	e04f      	b.n	800824c <HAL_I2C_MspInit+0x1dc>
  else if(hi2c->Instance==I2C2)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a2f      	ldr	r2, [pc, #188]	; (8008270 <HAL_I2C_MspInit+0x200>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d14a      	bne.n	800824c <HAL_I2C_MspInit+0x1dc>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80081b6:	2300      	movs	r3, #0
 80081b8:	613b      	str	r3, [r7, #16]
 80081ba:	4b27      	ldr	r3, [pc, #156]	; (8008258 <HAL_I2C_MspInit+0x1e8>)
 80081bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081be:	4a26      	ldr	r2, [pc, #152]	; (8008258 <HAL_I2C_MspInit+0x1e8>)
 80081c0:	f043 0320 	orr.w	r3, r3, #32
 80081c4:	6313      	str	r3, [r2, #48]	; 0x30
 80081c6:	4b24      	ldr	r3, [pc, #144]	; (8008258 <HAL_I2C_MspInit+0x1e8>)
 80081c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ca:	f003 0320 	and.w	r3, r3, #32
 80081ce:	613b      	str	r3, [r7, #16]
 80081d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80081d2:	2300      	movs	r3, #0
 80081d4:	60fb      	str	r3, [r7, #12]
 80081d6:	4b20      	ldr	r3, [pc, #128]	; (8008258 <HAL_I2C_MspInit+0x1e8>)
 80081d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081da:	4a1f      	ldr	r2, [pc, #124]	; (8008258 <HAL_I2C_MspInit+0x1e8>)
 80081dc:	f043 0302 	orr.w	r3, r3, #2
 80081e0:	6313      	str	r3, [r2, #48]	; 0x30
 80081e2:	4b1d      	ldr	r3, [pc, #116]	; (8008258 <HAL_I2C_MspInit+0x1e8>)
 80081e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e6:	f003 0302 	and.w	r3, r3, #2
 80081ea:	60fb      	str	r3, [r7, #12]
 80081ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80081ee:	2301      	movs	r3, #1
 80081f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80081f2:	2312      	movs	r3, #18
 80081f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081f6:	2300      	movs	r3, #0
 80081f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80081fa:	2303      	movs	r3, #3
 80081fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80081fe:	2304      	movs	r3, #4
 8008200:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008202:	f107 031c 	add.w	r3, r7, #28
 8008206:	4619      	mov	r1, r3
 8008208:	481a      	ldr	r0, [pc, #104]	; (8008274 <HAL_I2C_MspInit+0x204>)
 800820a:	f001 f955 	bl	80094b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800820e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008212:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008214:	2312      	movs	r3, #18
 8008216:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008218:	2300      	movs	r3, #0
 800821a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800821c:	2303      	movs	r3, #3
 800821e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8008220:	2304      	movs	r3, #4
 8008222:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008224:	f107 031c 	add.w	r3, r7, #28
 8008228:	4619      	mov	r1, r3
 800822a:	480c      	ldr	r0, [pc, #48]	; (800825c <HAL_I2C_MspInit+0x1ec>)
 800822c:	f001 f944 	bl	80094b8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8008230:	2300      	movs	r3, #0
 8008232:	60bb      	str	r3, [r7, #8]
 8008234:	4b08      	ldr	r3, [pc, #32]	; (8008258 <HAL_I2C_MspInit+0x1e8>)
 8008236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008238:	4a07      	ldr	r2, [pc, #28]	; (8008258 <HAL_I2C_MspInit+0x1e8>)
 800823a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800823e:	6413      	str	r3, [r2, #64]	; 0x40
 8008240:	4b05      	ldr	r3, [pc, #20]	; (8008258 <HAL_I2C_MspInit+0x1e8>)
 8008242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008244:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008248:	60bb      	str	r3, [r7, #8]
 800824a:	68bb      	ldr	r3, [r7, #8]
}
 800824c:	bf00      	nop
 800824e:	3730      	adds	r7, #48	; 0x30
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}
 8008254:	40005400 	.word	0x40005400
 8008258:	40023800 	.word	0x40023800
 800825c:	40020400 	.word	0x40020400
 8008260:	20000304 	.word	0x20000304
 8008264:	40026010 	.word	0x40026010
 8008268:	20000364 	.word	0x20000364
 800826c:	400260a0 	.word	0x400260a0
 8008270:	40005800 	.word	0x40005800
 8008274:	40021400 	.word	0x40021400

08008278 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b086      	sub	sp, #24
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a22      	ldr	r2, [pc, #136]	; (8008310 <HAL_TIM_Base_MspInit+0x98>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d10e      	bne.n	80082a8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800828a:	2300      	movs	r3, #0
 800828c:	617b      	str	r3, [r7, #20]
 800828e:	4b21      	ldr	r3, [pc, #132]	; (8008314 <HAL_TIM_Base_MspInit+0x9c>)
 8008290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008292:	4a20      	ldr	r2, [pc, #128]	; (8008314 <HAL_TIM_Base_MspInit+0x9c>)
 8008294:	f043 0301 	orr.w	r3, r3, #1
 8008298:	6453      	str	r3, [r2, #68]	; 0x44
 800829a:	4b1e      	ldr	r3, [pc, #120]	; (8008314 <HAL_TIM_Base_MspInit+0x9c>)
 800829c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800829e:	f003 0301 	and.w	r3, r3, #1
 80082a2:	617b      	str	r3, [r7, #20]
 80082a4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80082a6:	e02e      	b.n	8008306 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a1a      	ldr	r2, [pc, #104]	; (8008318 <HAL_TIM_Base_MspInit+0xa0>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d10e      	bne.n	80082d0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80082b2:	2300      	movs	r3, #0
 80082b4:	613b      	str	r3, [r7, #16]
 80082b6:	4b17      	ldr	r3, [pc, #92]	; (8008314 <HAL_TIM_Base_MspInit+0x9c>)
 80082b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ba:	4a16      	ldr	r2, [pc, #88]	; (8008314 <HAL_TIM_Base_MspInit+0x9c>)
 80082bc:	f043 0302 	orr.w	r3, r3, #2
 80082c0:	6413      	str	r3, [r2, #64]	; 0x40
 80082c2:	4b14      	ldr	r3, [pc, #80]	; (8008314 <HAL_TIM_Base_MspInit+0x9c>)
 80082c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c6:	f003 0302 	and.w	r3, r3, #2
 80082ca:	613b      	str	r3, [r7, #16]
 80082cc:	693b      	ldr	r3, [r7, #16]
}
 80082ce:	e01a      	b.n	8008306 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM13)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a11      	ldr	r2, [pc, #68]	; (800831c <HAL_TIM_Base_MspInit+0xa4>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d115      	bne.n	8008306 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80082da:	2300      	movs	r3, #0
 80082dc:	60fb      	str	r3, [r7, #12]
 80082de:	4b0d      	ldr	r3, [pc, #52]	; (8008314 <HAL_TIM_Base_MspInit+0x9c>)
 80082e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e2:	4a0c      	ldr	r2, [pc, #48]	; (8008314 <HAL_TIM_Base_MspInit+0x9c>)
 80082e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082e8:	6413      	str	r3, [r2, #64]	; 0x40
 80082ea:	4b0a      	ldr	r3, [pc, #40]	; (8008314 <HAL_TIM_Base_MspInit+0x9c>)
 80082ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082f2:	60fb      	str	r3, [r7, #12]
 80082f4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 80082f6:	2200      	movs	r2, #0
 80082f8:	2105      	movs	r1, #5
 80082fa:	202c      	movs	r0, #44	; 0x2c
 80082fc:	f000 fcb0 	bl	8008c60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8008300:	202c      	movs	r0, #44	; 0x2c
 8008302:	f000 fcc9 	bl	8008c98 <HAL_NVIC_EnableIRQ>
}
 8008306:	bf00      	nop
 8008308:	3718      	adds	r7, #24
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	40010000 	.word	0x40010000
 8008314:	40023800 	.word	0x40023800
 8008318:	40000400 	.word	0x40000400
 800831c:	40001c00 	.word	0x40001c00

08008320 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b08c      	sub	sp, #48	; 0x30
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008328:	f107 031c 	add.w	r3, r7, #28
 800832c:	2200      	movs	r2, #0
 800832e:	601a      	str	r2, [r3, #0]
 8008330:	605a      	str	r2, [r3, #4]
 8008332:	609a      	str	r2, [r3, #8]
 8008334:	60da      	str	r2, [r3, #12]
 8008336:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a43      	ldr	r2, [pc, #268]	; (800844c <HAL_TIM_MspPostInit+0x12c>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d11f      	bne.n	8008382 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008342:	2300      	movs	r3, #0
 8008344:	61bb      	str	r3, [r7, #24]
 8008346:	4b42      	ldr	r3, [pc, #264]	; (8008450 <HAL_TIM_MspPostInit+0x130>)
 8008348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800834a:	4a41      	ldr	r2, [pc, #260]	; (8008450 <HAL_TIM_MspPostInit+0x130>)
 800834c:	f043 0310 	orr.w	r3, r3, #16
 8008350:	6313      	str	r3, [r2, #48]	; 0x30
 8008352:	4b3f      	ldr	r3, [pc, #252]	; (8008450 <HAL_TIM_MspPostInit+0x130>)
 8008354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008356:	f003 0310 	and.w	r3, r3, #16
 800835a:	61bb      	str	r3, [r7, #24]
 800835c:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800835e:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8008362:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008364:	2302      	movs	r3, #2
 8008366:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008368:	2300      	movs	r3, #0
 800836a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800836c:	2300      	movs	r3, #0
 800836e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8008370:	2301      	movs	r3, #1
 8008372:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008374:	f107 031c 	add.w	r3, r7, #28
 8008378:	4619      	mov	r1, r3
 800837a:	4836      	ldr	r0, [pc, #216]	; (8008454 <HAL_TIM_MspPostInit+0x134>)
 800837c:	f001 f89c 	bl	80094b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8008380:	e05f      	b.n	8008442 <HAL_TIM_MspPostInit+0x122>
  else if(htim->Instance==TIM3)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a34      	ldr	r2, [pc, #208]	; (8008458 <HAL_TIM_MspPostInit+0x138>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d15a      	bne.n	8008442 <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800838c:	2300      	movs	r3, #0
 800838e:	617b      	str	r3, [r7, #20]
 8008390:	4b2f      	ldr	r3, [pc, #188]	; (8008450 <HAL_TIM_MspPostInit+0x130>)
 8008392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008394:	4a2e      	ldr	r2, [pc, #184]	; (8008450 <HAL_TIM_MspPostInit+0x130>)
 8008396:	f043 0301 	orr.w	r3, r3, #1
 800839a:	6313      	str	r3, [r2, #48]	; 0x30
 800839c:	4b2c      	ldr	r3, [pc, #176]	; (8008450 <HAL_TIM_MspPostInit+0x130>)
 800839e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083a0:	f003 0301 	and.w	r3, r3, #1
 80083a4:	617b      	str	r3, [r7, #20]
 80083a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80083a8:	2300      	movs	r3, #0
 80083aa:	613b      	str	r3, [r7, #16]
 80083ac:	4b28      	ldr	r3, [pc, #160]	; (8008450 <HAL_TIM_MspPostInit+0x130>)
 80083ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083b0:	4a27      	ldr	r2, [pc, #156]	; (8008450 <HAL_TIM_MspPostInit+0x130>)
 80083b2:	f043 0302 	orr.w	r3, r3, #2
 80083b6:	6313      	str	r3, [r2, #48]	; 0x30
 80083b8:	4b25      	ldr	r3, [pc, #148]	; (8008450 <HAL_TIM_MspPostInit+0x130>)
 80083ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083bc:	f003 0302 	and.w	r3, r3, #2
 80083c0:	613b      	str	r3, [r7, #16]
 80083c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80083c4:	2300      	movs	r3, #0
 80083c6:	60fb      	str	r3, [r7, #12]
 80083c8:	4b21      	ldr	r3, [pc, #132]	; (8008450 <HAL_TIM_MspPostInit+0x130>)
 80083ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083cc:	4a20      	ldr	r2, [pc, #128]	; (8008450 <HAL_TIM_MspPostInit+0x130>)
 80083ce:	f043 0304 	orr.w	r3, r3, #4
 80083d2:	6313      	str	r3, [r2, #48]	; 0x30
 80083d4:	4b1e      	ldr	r3, [pc, #120]	; (8008450 <HAL_TIM_MspPostInit+0x130>)
 80083d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d8:	f003 0304 	and.w	r3, r3, #4
 80083dc:	60fb      	str	r3, [r7, #12]
 80083de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80083e0:	23c0      	movs	r3, #192	; 0xc0
 80083e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083e4:	2302      	movs	r3, #2
 80083e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083e8:	2300      	movs	r3, #0
 80083ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083ec:	2300      	movs	r3, #0
 80083ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80083f0:	2302      	movs	r3, #2
 80083f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083f4:	f107 031c 	add.w	r3, r7, #28
 80083f8:	4619      	mov	r1, r3
 80083fa:	4818      	ldr	r0, [pc, #96]	; (800845c <HAL_TIM_MspPostInit+0x13c>)
 80083fc:	f001 f85c 	bl	80094b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8008400:	2302      	movs	r3, #2
 8008402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008404:	2302      	movs	r3, #2
 8008406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008408:	2300      	movs	r3, #0
 800840a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800840c:	2300      	movs	r3, #0
 800840e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008410:	2302      	movs	r3, #2
 8008412:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008414:	f107 031c 	add.w	r3, r7, #28
 8008418:	4619      	mov	r1, r3
 800841a:	4811      	ldr	r0, [pc, #68]	; (8008460 <HAL_TIM_MspPostInit+0x140>)
 800841c:	f001 f84c 	bl	80094b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8008420:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008426:	2302      	movs	r3, #2
 8008428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800842a:	2300      	movs	r3, #0
 800842c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800842e:	2300      	movs	r3, #0
 8008430:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008432:	2302      	movs	r3, #2
 8008434:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008436:	f107 031c 	add.w	r3, r7, #28
 800843a:	4619      	mov	r1, r3
 800843c:	4809      	ldr	r0, [pc, #36]	; (8008464 <HAL_TIM_MspPostInit+0x144>)
 800843e:	f001 f83b 	bl	80094b8 <HAL_GPIO_Init>
}
 8008442:	bf00      	nop
 8008444:	3730      	adds	r7, #48	; 0x30
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	40010000 	.word	0x40010000
 8008450:	40023800 	.word	0x40023800
 8008454:	40021000 	.word	0x40021000
 8008458:	40000400 	.word	0x40000400
 800845c:	40020000 	.word	0x40020000
 8008460:	40020400 	.word	0x40020400
 8008464:	40020800 	.word	0x40020800

08008468 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b08a      	sub	sp, #40	; 0x28
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008470:	f107 0314 	add.w	r3, r7, #20
 8008474:	2200      	movs	r2, #0
 8008476:	601a      	str	r2, [r3, #0]
 8008478:	605a      	str	r2, [r3, #4]
 800847a:	609a      	str	r2, [r3, #8]
 800847c:	60da      	str	r2, [r3, #12]
 800847e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a4d      	ldr	r2, [pc, #308]	; (80085bc <HAL_UART_MspInit+0x154>)
 8008486:	4293      	cmp	r3, r2
 8008488:	f040 8093 	bne.w	80085b2 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800848c:	2300      	movs	r3, #0
 800848e:	613b      	str	r3, [r7, #16]
 8008490:	4b4b      	ldr	r3, [pc, #300]	; (80085c0 <HAL_UART_MspInit+0x158>)
 8008492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008494:	4a4a      	ldr	r2, [pc, #296]	; (80085c0 <HAL_UART_MspInit+0x158>)
 8008496:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800849a:	6413      	str	r3, [r2, #64]	; 0x40
 800849c:	4b48      	ldr	r3, [pc, #288]	; (80085c0 <HAL_UART_MspInit+0x158>)
 800849e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80084a4:	613b      	str	r3, [r7, #16]
 80084a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80084a8:	2300      	movs	r3, #0
 80084aa:	60fb      	str	r3, [r7, #12]
 80084ac:	4b44      	ldr	r3, [pc, #272]	; (80085c0 <HAL_UART_MspInit+0x158>)
 80084ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b0:	4a43      	ldr	r2, [pc, #268]	; (80085c0 <HAL_UART_MspInit+0x158>)
 80084b2:	f043 0308 	orr.w	r3, r3, #8
 80084b6:	6313      	str	r3, [r2, #48]	; 0x30
 80084b8:	4b41      	ldr	r3, [pc, #260]	; (80085c0 <HAL_UART_MspInit+0x158>)
 80084ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084bc:	f003 0308 	and.w	r3, r3, #8
 80084c0:	60fb      	str	r3, [r7, #12]
 80084c2:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80084c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80084c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084ca:	2302      	movs	r3, #2
 80084cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084ce:	2300      	movs	r3, #0
 80084d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084d2:	2303      	movs	r3, #3
 80084d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80084d6:	2307      	movs	r3, #7
 80084d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80084da:	f107 0314 	add.w	r3, r7, #20
 80084de:	4619      	mov	r1, r3
 80084e0:	4838      	ldr	r0, [pc, #224]	; (80085c4 <HAL_UART_MspInit+0x15c>)
 80084e2:	f000 ffe9 	bl	80094b8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80084e6:	4b38      	ldr	r3, [pc, #224]	; (80085c8 <HAL_UART_MspInit+0x160>)
 80084e8:	4a38      	ldr	r2, [pc, #224]	; (80085cc <HAL_UART_MspInit+0x164>)
 80084ea:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80084ec:	4b36      	ldr	r3, [pc, #216]	; (80085c8 <HAL_UART_MspInit+0x160>)
 80084ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80084f2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80084f4:	4b34      	ldr	r3, [pc, #208]	; (80085c8 <HAL_UART_MspInit+0x160>)
 80084f6:	2200      	movs	r2, #0
 80084f8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80084fa:	4b33      	ldr	r3, [pc, #204]	; (80085c8 <HAL_UART_MspInit+0x160>)
 80084fc:	2200      	movs	r2, #0
 80084fe:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008500:	4b31      	ldr	r3, [pc, #196]	; (80085c8 <HAL_UART_MspInit+0x160>)
 8008502:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008506:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008508:	4b2f      	ldr	r3, [pc, #188]	; (80085c8 <HAL_UART_MspInit+0x160>)
 800850a:	2200      	movs	r2, #0
 800850c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800850e:	4b2e      	ldr	r3, [pc, #184]	; (80085c8 <HAL_UART_MspInit+0x160>)
 8008510:	2200      	movs	r2, #0
 8008512:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8008514:	4b2c      	ldr	r3, [pc, #176]	; (80085c8 <HAL_UART_MspInit+0x160>)
 8008516:	2200      	movs	r2, #0
 8008518:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800851a:	4b2b      	ldr	r3, [pc, #172]	; (80085c8 <HAL_UART_MspInit+0x160>)
 800851c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008520:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008522:	4b29      	ldr	r3, [pc, #164]	; (80085c8 <HAL_UART_MspInit+0x160>)
 8008524:	2200      	movs	r2, #0
 8008526:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8008528:	4827      	ldr	r0, [pc, #156]	; (80085c8 <HAL_UART_MspInit+0x160>)
 800852a:	f000 fbc3 	bl	8008cb4 <HAL_DMA_Init>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	d001      	beq.n	8008538 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8008534:	f7fb fbba 	bl	8003cac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	4a23      	ldr	r2, [pc, #140]	; (80085c8 <HAL_UART_MspInit+0x160>)
 800853c:	63da      	str	r2, [r3, #60]	; 0x3c
 800853e:	4a22      	ldr	r2, [pc, #136]	; (80085c8 <HAL_UART_MspInit+0x160>)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8008544:	4b22      	ldr	r3, [pc, #136]	; (80085d0 <HAL_UART_MspInit+0x168>)
 8008546:	4a23      	ldr	r2, [pc, #140]	; (80085d4 <HAL_UART_MspInit+0x16c>)
 8008548:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800854a:	4b21      	ldr	r3, [pc, #132]	; (80085d0 <HAL_UART_MspInit+0x168>)
 800854c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008550:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008552:	4b1f      	ldr	r3, [pc, #124]	; (80085d0 <HAL_UART_MspInit+0x168>)
 8008554:	2240      	movs	r2, #64	; 0x40
 8008556:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008558:	4b1d      	ldr	r3, [pc, #116]	; (80085d0 <HAL_UART_MspInit+0x168>)
 800855a:	2200      	movs	r2, #0
 800855c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800855e:	4b1c      	ldr	r3, [pc, #112]	; (80085d0 <HAL_UART_MspInit+0x168>)
 8008560:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008564:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008566:	4b1a      	ldr	r3, [pc, #104]	; (80085d0 <HAL_UART_MspInit+0x168>)
 8008568:	2200      	movs	r2, #0
 800856a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800856c:	4b18      	ldr	r3, [pc, #96]	; (80085d0 <HAL_UART_MspInit+0x168>)
 800856e:	2200      	movs	r2, #0
 8008570:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8008572:	4b17      	ldr	r3, [pc, #92]	; (80085d0 <HAL_UART_MspInit+0x168>)
 8008574:	2200      	movs	r2, #0
 8008576:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8008578:	4b15      	ldr	r3, [pc, #84]	; (80085d0 <HAL_UART_MspInit+0x168>)
 800857a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800857e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008580:	4b13      	ldr	r3, [pc, #76]	; (80085d0 <HAL_UART_MspInit+0x168>)
 8008582:	2200      	movs	r2, #0
 8008584:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8008586:	4812      	ldr	r0, [pc, #72]	; (80085d0 <HAL_UART_MspInit+0x168>)
 8008588:	f000 fb94 	bl	8008cb4 <HAL_DMA_Init>
 800858c:	4603      	mov	r3, r0
 800858e:	2b00      	cmp	r3, #0
 8008590:	d001      	beq.n	8008596 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8008592:	f7fb fb8b 	bl	8003cac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	4a0d      	ldr	r2, [pc, #52]	; (80085d0 <HAL_UART_MspInit+0x168>)
 800859a:	639a      	str	r2, [r3, #56]	; 0x38
 800859c:	4a0c      	ldr	r2, [pc, #48]	; (80085d0 <HAL_UART_MspInit+0x168>)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80085a2:	2200      	movs	r2, #0
 80085a4:	2105      	movs	r1, #5
 80085a6:	2027      	movs	r0, #39	; 0x27
 80085a8:	f000 fb5a 	bl	8008c60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80085ac:	2027      	movs	r0, #39	; 0x27
 80085ae:	f000 fb73 	bl	8008c98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80085b2:	bf00      	nop
 80085b4:	3728      	adds	r7, #40	; 0x28
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	40004800 	.word	0x40004800
 80085c0:	40023800 	.word	0x40023800
 80085c4:	40020c00 	.word	0x40020c00
 80085c8:	200004e4 	.word	0x200004e4
 80085cc:	40026028 	.word	0x40026028
 80085d0:	20000544 	.word	0x20000544
 80085d4:	40026058 	.word	0x40026058

080085d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b08e      	sub	sp, #56	; 0x38
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80085e0:	2300      	movs	r3, #0
 80085e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80085e4:	2300      	movs	r3, #0
 80085e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80085e8:	2300      	movs	r3, #0
 80085ea:	60fb      	str	r3, [r7, #12]
 80085ec:	4b33      	ldr	r3, [pc, #204]	; (80086bc <HAL_InitTick+0xe4>)
 80085ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f0:	4a32      	ldr	r2, [pc, #200]	; (80086bc <HAL_InitTick+0xe4>)
 80085f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085f6:	6413      	str	r3, [r2, #64]	; 0x40
 80085f8:	4b30      	ldr	r3, [pc, #192]	; (80086bc <HAL_InitTick+0xe4>)
 80085fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008600:	60fb      	str	r3, [r7, #12]
 8008602:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008604:	f107 0210 	add.w	r2, r7, #16
 8008608:	f107 0314 	add.w	r3, r7, #20
 800860c:	4611      	mov	r1, r2
 800860e:	4618      	mov	r0, r3
 8008610:	f002 fe30 	bl	800b274 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8008614:	6a3b      	ldr	r3, [r7, #32]
 8008616:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8008618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800861a:	2b00      	cmp	r3, #0
 800861c:	d103      	bne.n	8008626 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800861e:	f002 fe01 	bl	800b224 <HAL_RCC_GetPCLK1Freq>
 8008622:	6378      	str	r0, [r7, #52]	; 0x34
 8008624:	e004      	b.n	8008630 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8008626:	f002 fdfd 	bl	800b224 <HAL_RCC_GetPCLK1Freq>
 800862a:	4603      	mov	r3, r0
 800862c:	005b      	lsls	r3, r3, #1
 800862e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008632:	4a23      	ldr	r2, [pc, #140]	; (80086c0 <HAL_InitTick+0xe8>)
 8008634:	fba2 2303 	umull	r2, r3, r2, r3
 8008638:	0c9b      	lsrs	r3, r3, #18
 800863a:	3b01      	subs	r3, #1
 800863c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800863e:	4b21      	ldr	r3, [pc, #132]	; (80086c4 <HAL_InitTick+0xec>)
 8008640:	4a21      	ldr	r2, [pc, #132]	; (80086c8 <HAL_InitTick+0xf0>)
 8008642:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8008644:	4b1f      	ldr	r3, [pc, #124]	; (80086c4 <HAL_InitTick+0xec>)
 8008646:	f240 32e7 	movw	r2, #999	; 0x3e7
 800864a:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 800864c:	4a1d      	ldr	r2, [pc, #116]	; (80086c4 <HAL_InitTick+0xec>)
 800864e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008650:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8008652:	4b1c      	ldr	r3, [pc, #112]	; (80086c4 <HAL_InitTick+0xec>)
 8008654:	2200      	movs	r2, #0
 8008656:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008658:	4b1a      	ldr	r3, [pc, #104]	; (80086c4 <HAL_InitTick+0xec>)
 800865a:	2200      	movs	r2, #0
 800865c:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800865e:	4b19      	ldr	r3, [pc, #100]	; (80086c4 <HAL_InitTick+0xec>)
 8008660:	2200      	movs	r2, #0
 8008662:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8008664:	4817      	ldr	r0, [pc, #92]	; (80086c4 <HAL_InitTick+0xec>)
 8008666:	f002 fe37 	bl	800b2d8 <HAL_TIM_Base_Init>
 800866a:	4603      	mov	r3, r0
 800866c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8008670:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008674:	2b00      	cmp	r3, #0
 8008676:	d11b      	bne.n	80086b0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8008678:	4812      	ldr	r0, [pc, #72]	; (80086c4 <HAL_InitTick+0xec>)
 800867a:	f002 fe7d 	bl	800b378 <HAL_TIM_Base_Start_IT>
 800867e:	4603      	mov	r3, r0
 8008680:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8008684:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008688:	2b00      	cmp	r3, #0
 800868a:	d111      	bne.n	80086b0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800868c:	202d      	movs	r0, #45	; 0x2d
 800868e:	f000 fb03 	bl	8008c98 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2b0f      	cmp	r3, #15
 8008696:	d808      	bhi.n	80086aa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8008698:	2200      	movs	r2, #0
 800869a:	6879      	ldr	r1, [r7, #4]
 800869c:	202d      	movs	r0, #45	; 0x2d
 800869e:	f000 fadf 	bl	8008c60 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80086a2:	4a0a      	ldr	r2, [pc, #40]	; (80086cc <HAL_InitTick+0xf4>)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6013      	str	r3, [r2, #0]
 80086a8:	e002      	b.n	80086b0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80086aa:	2301      	movs	r3, #1
 80086ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80086b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3738      	adds	r7, #56	; 0x38
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	40023800 	.word	0x40023800
 80086c0:	431bde83 	.word	0x431bde83
 80086c4:	20003670 	.word	0x20003670
 80086c8:	40002000 	.word	0x40002000
 80086cc:	20000010 	.word	0x20000010

080086d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80086d0:	b480      	push	{r7}
 80086d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80086d4:	e7fe      	b.n	80086d4 <NMI_Handler+0x4>

080086d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80086d6:	b480      	push	{r7}
 80086d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80086da:	e7fe      	b.n	80086da <HardFault_Handler+0x4>

080086dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80086dc:	b480      	push	{r7}
 80086de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80086e0:	e7fe      	b.n	80086e0 <MemManage_Handler+0x4>

080086e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80086e2:	b480      	push	{r7}
 80086e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80086e6:	e7fe      	b.n	80086e6 <BusFault_Handler+0x4>

080086e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80086e8:	b480      	push	{r7}
 80086ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80086ec:	e7fe      	b.n	80086ec <UsageFault_Handler+0x4>

080086ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80086ee:	b480      	push	{r7}
 80086f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80086f2:	bf00      	nop
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_EXT3_B_Pin);
 8008700:	2008      	movs	r0, #8
 8008702:	f001 f8b7 	bl	8009874 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8008706:	bf00      	nop
 8008708:	bd80      	pop	{r7, pc}
	...

0800870c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8008710:	4802      	ldr	r0, [pc, #8]	; (800871c <DMA1_Stream0_IRQHandler+0x10>)
 8008712:	f000 fc67 	bl	8008fe4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8008716:	bf00      	nop
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop
 800871c:	20000304 	.word	0x20000304

08008720 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8008724:	4802      	ldr	r0, [pc, #8]	; (8008730 <DMA1_Stream1_IRQHandler+0x10>)
 8008726:	f000 fc5d 	bl	8008fe4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800872a:	bf00      	nop
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	200004e4 	.word	0x200004e4

08008734 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8008738:	4802      	ldr	r0, [pc, #8]	; (8008744 <DMA1_Stream3_IRQHandler+0x10>)
 800873a:	f000 fc53 	bl	8008fe4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800873e:	bf00      	nop
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop
 8008744:	20000544 	.word	0x20000544

08008748 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800874c:	4802      	ldr	r0, [pc, #8]	; (8008758 <DMA1_Stream6_IRQHandler+0x10>)
 800874e:	f000 fc49 	bl	8008fe4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8008752:	bf00      	nop
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	20000364 	.word	0x20000364

0800875c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8008760:	4802      	ldr	r0, [pc, #8]	; (800876c <USART3_IRQHandler+0x10>)
 8008762:	f003 ff21 	bl	800c5a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8008766:	bf00      	nop
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	2000049c 	.word	0x2000049c

08008770 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_EXT1_A_Pin);
 8008774:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008778:	f001 f87c 	bl	8009874 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_EXT2_A_Pin);
 800877c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008780:	f001 f878 	bl	8009874 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_EXT3_A_Pin);
 8008784:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8008788:	f001 f874 	bl	8009874 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_EXT1_B_Pin);
 800878c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8008790:	f001 f870 	bl	8009874 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_EXT2_B_Pin);
 8008794:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008798:	f001 f86c 	bl	8009874 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800879c:	bf00      	nop
 800879e:	bd80      	pop	{r7, pc}

080087a0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80087a4:	4802      	ldr	r0, [pc, #8]	; (80087b0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80087a6:	f002 ff79 	bl	800b69c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80087aa:	bf00      	nop
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	20000454 	.word	0x20000454

080087b4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80087b8:	4802      	ldr	r0, [pc, #8]	; (80087c4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80087ba:	f002 ff6f 	bl	800b69c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80087be:	bf00      	nop
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	20003670 	.word	0x20003670

080087c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80087c8:	b480      	push	{r7}
 80087ca:	af00      	add	r7, sp, #0
  return 1;
 80087cc:	2301      	movs	r3, #1
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <_kill>:

int _kill(int pid, int sig)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80087e2:	f00a fc6f 	bl	80130c4 <__errno>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2216      	movs	r2, #22
 80087ea:	601a      	str	r2, [r3, #0]
  return -1;
 80087ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3708      	adds	r7, #8
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <_exit>:

void _exit (int status)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008800:	f04f 31ff 	mov.w	r1, #4294967295
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f7ff ffe7 	bl	80087d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800880a:	e7fe      	b.n	800880a <_exit+0x12>

0800880c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b086      	sub	sp, #24
 8008810:	af00      	add	r7, sp, #0
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008818:	2300      	movs	r3, #0
 800881a:	617b      	str	r3, [r7, #20]
 800881c:	e00a      	b.n	8008834 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800881e:	f3af 8000 	nop.w
 8008822:	4601      	mov	r1, r0
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	1c5a      	adds	r2, r3, #1
 8008828:	60ba      	str	r2, [r7, #8]
 800882a:	b2ca      	uxtb	r2, r1
 800882c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	3301      	adds	r3, #1
 8008832:	617b      	str	r3, [r7, #20]
 8008834:	697a      	ldr	r2, [r7, #20]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	429a      	cmp	r2, r3
 800883a:	dbf0      	blt.n	800881e <_read+0x12>
  }

  return len;
 800883c:	687b      	ldr	r3, [r7, #4]
}
 800883e:	4618      	mov	r0, r3
 8008840:	3718      	adds	r7, #24
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}

08008846 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008846:	b580      	push	{r7, lr}
 8008848:	b086      	sub	sp, #24
 800884a:	af00      	add	r7, sp, #0
 800884c:	60f8      	str	r0, [r7, #12]
 800884e:	60b9      	str	r1, [r7, #8]
 8008850:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008852:	2300      	movs	r3, #0
 8008854:	617b      	str	r3, [r7, #20]
 8008856:	e009      	b.n	800886c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	1c5a      	adds	r2, r3, #1
 800885c:	60ba      	str	r2, [r7, #8]
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	4618      	mov	r0, r3
 8008862:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	3301      	adds	r3, #1
 800886a:	617b      	str	r3, [r7, #20]
 800886c:	697a      	ldr	r2, [r7, #20]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	429a      	cmp	r2, r3
 8008872:	dbf1      	blt.n	8008858 <_write+0x12>
  }
  return len;
 8008874:	687b      	ldr	r3, [r7, #4]
}
 8008876:	4618      	mov	r0, r3
 8008878:	3718      	adds	r7, #24
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <_close>:

int _close(int file)
{
 800887e:	b480      	push	{r7}
 8008880:	b083      	sub	sp, #12
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008886:	f04f 33ff 	mov.w	r3, #4294967295
}
 800888a:	4618      	mov	r0, r3
 800888c:	370c      	adds	r7, #12
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr

08008896 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008896:	b480      	push	{r7}
 8008898:	b083      	sub	sp, #12
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
 800889e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80088a6:	605a      	str	r2, [r3, #4]
  return 0;
 80088a8:	2300      	movs	r3, #0
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	370c      	adds	r7, #12
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr

080088b6 <_isatty>:

int _isatty(int file)
{
 80088b6:	b480      	push	{r7}
 80088b8:	b083      	sub	sp, #12
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80088be:	2301      	movs	r3, #1
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b085      	sub	sp, #20
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	60b9      	str	r1, [r7, #8]
 80088d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3714      	adds	r7, #20
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr
	...

080088e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b086      	sub	sp, #24
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80088f0:	4a14      	ldr	r2, [pc, #80]	; (8008944 <_sbrk+0x5c>)
 80088f2:	4b15      	ldr	r3, [pc, #84]	; (8008948 <_sbrk+0x60>)
 80088f4:	1ad3      	subs	r3, r2, r3
 80088f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80088fc:	4b13      	ldr	r3, [pc, #76]	; (800894c <_sbrk+0x64>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d102      	bne.n	800890a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008904:	4b11      	ldr	r3, [pc, #68]	; (800894c <_sbrk+0x64>)
 8008906:	4a12      	ldr	r2, [pc, #72]	; (8008950 <_sbrk+0x68>)
 8008908:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800890a:	4b10      	ldr	r3, [pc, #64]	; (800894c <_sbrk+0x64>)
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	4413      	add	r3, r2
 8008912:	693a      	ldr	r2, [r7, #16]
 8008914:	429a      	cmp	r2, r3
 8008916:	d207      	bcs.n	8008928 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008918:	f00a fbd4 	bl	80130c4 <__errno>
 800891c:	4603      	mov	r3, r0
 800891e:	220c      	movs	r2, #12
 8008920:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008922:	f04f 33ff 	mov.w	r3, #4294967295
 8008926:	e009      	b.n	800893c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008928:	4b08      	ldr	r3, [pc, #32]	; (800894c <_sbrk+0x64>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800892e:	4b07      	ldr	r3, [pc, #28]	; (800894c <_sbrk+0x64>)
 8008930:	681a      	ldr	r2, [r3, #0]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4413      	add	r3, r2
 8008936:	4a05      	ldr	r2, [pc, #20]	; (800894c <_sbrk+0x64>)
 8008938:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800893a:	68fb      	ldr	r3, [r7, #12]
}
 800893c:	4618      	mov	r0, r3
 800893e:	3718      	adds	r7, #24
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}
 8008944:	20030000 	.word	0x20030000
 8008948:	00000400 	.word	0x00000400
 800894c:	200036b8 	.word	0x200036b8
 8008950:	200081f8 	.word	0x200081f8

08008954 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008954:	b480      	push	{r7}
 8008956:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008958:	4b06      	ldr	r3, [pc, #24]	; (8008974 <SystemInit+0x20>)
 800895a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800895e:	4a05      	ldr	r2, [pc, #20]	; (8008974 <SystemInit+0x20>)
 8008960:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008964:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008968:	bf00      	nop
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr
 8008972:	bf00      	nop
 8008974:	e000ed00 	.word	0xe000ed00

08008978 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	0a5a      	lsrs	r2, r3, #9
 8008988:	490f      	ldr	r1, [pc, #60]	; (80089c8 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800898a:	fba1 1202 	umull	r1, r2, r1, r2
 800898e:	09d2      	lsrs	r2, r2, #7
 8008990:	490e      	ldr	r1, [pc, #56]	; (80089cc <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8008992:	fb01 f202 	mul.w	r2, r1, r2
 8008996:	1a9b      	subs	r3, r3, r2
 8008998:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	0a5b      	lsrs	r3, r3, #9
 80089a0:	4a09      	ldr	r2, [pc, #36]	; (80089c8 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80089a2:	fba2 2303 	umull	r2, r3, r2, r3
 80089a6:	09db      	lsrs	r3, r3, #7
 80089a8:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	441a      	add	r2, r3
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	68fa      	ldr	r2, [r7, #12]
 80089ba:	601a      	str	r2, [r3, #0]
}
 80089bc:	bf00      	nop
 80089be:	3714      	adds	r7, #20
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr
 80089c8:	00044b83 	.word	0x00044b83
 80089cc:	3b9aca00 	.word	0x3b9aca00

080089d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80089d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008a08 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80089d4:	f7ff ffbe 	bl	8008954 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80089d8:	480c      	ldr	r0, [pc, #48]	; (8008a0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80089da:	490d      	ldr	r1, [pc, #52]	; (8008a10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80089dc:	4a0d      	ldr	r2, [pc, #52]	; (8008a14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80089de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80089e0:	e002      	b.n	80089e8 <LoopCopyDataInit>

080089e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80089e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80089e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80089e6:	3304      	adds	r3, #4

080089e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80089e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80089ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80089ec:	d3f9      	bcc.n	80089e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80089ee:	4a0a      	ldr	r2, [pc, #40]	; (8008a18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80089f0:	4c0a      	ldr	r4, [pc, #40]	; (8008a1c <LoopFillZerobss+0x22>)
  movs r3, #0
 80089f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80089f4:	e001      	b.n	80089fa <LoopFillZerobss>

080089f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80089f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80089f8:	3204      	adds	r2, #4

080089fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80089fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80089fc:	d3fb      	bcc.n	80089f6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80089fe:	f00a fb67 	bl	80130d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008a02:	f7f9 ffe3 	bl	80029cc <main>
  bx  lr    
 8008a06:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8008a08:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8008a0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008a10:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8008a14:	08015e78 	.word	0x08015e78
  ldr r2, =_sbss
 8008a18:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8008a1c:	200081f4 	.word	0x200081f4

08008a20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008a20:	e7fe      	b.n	8008a20 <ADC_IRQHandler>
	...

08008a24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008a28:	4b0e      	ldr	r3, [pc, #56]	; (8008a64 <HAL_Init+0x40>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a0d      	ldr	r2, [pc, #52]	; (8008a64 <HAL_Init+0x40>)
 8008a2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008a32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008a34:	4b0b      	ldr	r3, [pc, #44]	; (8008a64 <HAL_Init+0x40>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a0a      	ldr	r2, [pc, #40]	; (8008a64 <HAL_Init+0x40>)
 8008a3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008a3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008a40:	4b08      	ldr	r3, [pc, #32]	; (8008a64 <HAL_Init+0x40>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a07      	ldr	r2, [pc, #28]	; (8008a64 <HAL_Init+0x40>)
 8008a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008a4c:	2003      	movs	r0, #3
 8008a4e:	f000 f8fc 	bl	8008c4a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008a52:	200f      	movs	r0, #15
 8008a54:	f7ff fdc0 	bl	80085d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008a58:	f7ff fade 	bl	8008018 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	40023c00 	.word	0x40023c00

08008a68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008a6c:	4b06      	ldr	r3, [pc, #24]	; (8008a88 <HAL_IncTick+0x20>)
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	461a      	mov	r2, r3
 8008a72:	4b06      	ldr	r3, [pc, #24]	; (8008a8c <HAL_IncTick+0x24>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4413      	add	r3, r2
 8008a78:	4a04      	ldr	r2, [pc, #16]	; (8008a8c <HAL_IncTick+0x24>)
 8008a7a:	6013      	str	r3, [r2, #0]
}
 8008a7c:	bf00      	nop
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr
 8008a86:	bf00      	nop
 8008a88:	20000014 	.word	0x20000014
 8008a8c:	200036bc 	.word	0x200036bc

08008a90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008a90:	b480      	push	{r7}
 8008a92:	af00      	add	r7, sp, #0
  return uwTick;
 8008a94:	4b03      	ldr	r3, [pc, #12]	; (8008aa4 <HAL_GetTick+0x14>)
 8008a96:	681b      	ldr	r3, [r3, #0]
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr
 8008aa2:	bf00      	nop
 8008aa4:	200036bc 	.word	0x200036bc

08008aa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b084      	sub	sp, #16
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008ab0:	f7ff ffee 	bl	8008a90 <HAL_GetTick>
 8008ab4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ac0:	d005      	beq.n	8008ace <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008ac2:	4b0a      	ldr	r3, [pc, #40]	; (8008aec <HAL_Delay+0x44>)
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	4413      	add	r3, r2
 8008acc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008ace:	bf00      	nop
 8008ad0:	f7ff ffde 	bl	8008a90 <HAL_GetTick>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	1ad3      	subs	r3, r2, r3
 8008ada:	68fa      	ldr	r2, [r7, #12]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d8f7      	bhi.n	8008ad0 <HAL_Delay+0x28>
  {
  }
}
 8008ae0:	bf00      	nop
 8008ae2:	bf00      	nop
 8008ae4:	3710      	adds	r7, #16
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop
 8008aec:	20000014 	.word	0x20000014

08008af0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b085      	sub	sp, #20
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f003 0307 	and.w	r3, r3, #7
 8008afe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008b00:	4b0c      	ldr	r3, [pc, #48]	; (8008b34 <__NVIC_SetPriorityGrouping+0x44>)
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008b06:	68ba      	ldr	r2, [r7, #8]
 8008b08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008b0c:	4013      	ands	r3, r2
 8008b0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008b18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008b22:	4a04      	ldr	r2, [pc, #16]	; (8008b34 <__NVIC_SetPriorityGrouping+0x44>)
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	60d3      	str	r3, [r2, #12]
}
 8008b28:	bf00      	nop
 8008b2a:	3714      	adds	r7, #20
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr
 8008b34:	e000ed00 	.word	0xe000ed00

08008b38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008b3c:	4b04      	ldr	r3, [pc, #16]	; (8008b50 <__NVIC_GetPriorityGrouping+0x18>)
 8008b3e:	68db      	ldr	r3, [r3, #12]
 8008b40:	0a1b      	lsrs	r3, r3, #8
 8008b42:	f003 0307 	and.w	r3, r3, #7
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr
 8008b50:	e000ed00 	.word	0xe000ed00

08008b54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	db0b      	blt.n	8008b7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008b66:	79fb      	ldrb	r3, [r7, #7]
 8008b68:	f003 021f 	and.w	r2, r3, #31
 8008b6c:	4907      	ldr	r1, [pc, #28]	; (8008b8c <__NVIC_EnableIRQ+0x38>)
 8008b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b72:	095b      	lsrs	r3, r3, #5
 8008b74:	2001      	movs	r0, #1
 8008b76:	fa00 f202 	lsl.w	r2, r0, r2
 8008b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008b7e:	bf00      	nop
 8008b80:	370c      	adds	r7, #12
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr
 8008b8a:	bf00      	nop
 8008b8c:	e000e100 	.word	0xe000e100

08008b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b083      	sub	sp, #12
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	4603      	mov	r3, r0
 8008b98:	6039      	str	r1, [r7, #0]
 8008b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	db0a      	blt.n	8008bba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	b2da      	uxtb	r2, r3
 8008ba8:	490c      	ldr	r1, [pc, #48]	; (8008bdc <__NVIC_SetPriority+0x4c>)
 8008baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bae:	0112      	lsls	r2, r2, #4
 8008bb0:	b2d2      	uxtb	r2, r2
 8008bb2:	440b      	add	r3, r1
 8008bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008bb8:	e00a      	b.n	8008bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	b2da      	uxtb	r2, r3
 8008bbe:	4908      	ldr	r1, [pc, #32]	; (8008be0 <__NVIC_SetPriority+0x50>)
 8008bc0:	79fb      	ldrb	r3, [r7, #7]
 8008bc2:	f003 030f 	and.w	r3, r3, #15
 8008bc6:	3b04      	subs	r3, #4
 8008bc8:	0112      	lsls	r2, r2, #4
 8008bca:	b2d2      	uxtb	r2, r2
 8008bcc:	440b      	add	r3, r1
 8008bce:	761a      	strb	r2, [r3, #24]
}
 8008bd0:	bf00      	nop
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr
 8008bdc:	e000e100 	.word	0xe000e100
 8008be0:	e000ed00 	.word	0xe000ed00

08008be4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b089      	sub	sp, #36	; 0x24
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f003 0307 	and.w	r3, r3, #7
 8008bf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	f1c3 0307 	rsb	r3, r3, #7
 8008bfe:	2b04      	cmp	r3, #4
 8008c00:	bf28      	it	cs
 8008c02:	2304      	movcs	r3, #4
 8008c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008c06:	69fb      	ldr	r3, [r7, #28]
 8008c08:	3304      	adds	r3, #4
 8008c0a:	2b06      	cmp	r3, #6
 8008c0c:	d902      	bls.n	8008c14 <NVIC_EncodePriority+0x30>
 8008c0e:	69fb      	ldr	r3, [r7, #28]
 8008c10:	3b03      	subs	r3, #3
 8008c12:	e000      	b.n	8008c16 <NVIC_EncodePriority+0x32>
 8008c14:	2300      	movs	r3, #0
 8008c16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c18:	f04f 32ff 	mov.w	r2, #4294967295
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c22:	43da      	mvns	r2, r3
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	401a      	ands	r2, r3
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	fa01 f303 	lsl.w	r3, r1, r3
 8008c36:	43d9      	mvns	r1, r3
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c3c:	4313      	orrs	r3, r2
         );
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3724      	adds	r7, #36	; 0x24
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr

08008c4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008c4a:	b580      	push	{r7, lr}
 8008c4c:	b082      	sub	sp, #8
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f7ff ff4c 	bl	8008af0 <__NVIC_SetPriorityGrouping>
}
 8008c58:	bf00      	nop
 8008c5a:	3708      	adds	r7, #8
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b086      	sub	sp, #24
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	4603      	mov	r3, r0
 8008c68:	60b9      	str	r1, [r7, #8]
 8008c6a:	607a      	str	r2, [r7, #4]
 8008c6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008c72:	f7ff ff61 	bl	8008b38 <__NVIC_GetPriorityGrouping>
 8008c76:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	68b9      	ldr	r1, [r7, #8]
 8008c7c:	6978      	ldr	r0, [r7, #20]
 8008c7e:	f7ff ffb1 	bl	8008be4 <NVIC_EncodePriority>
 8008c82:	4602      	mov	r2, r0
 8008c84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c88:	4611      	mov	r1, r2
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7ff ff80 	bl	8008b90 <__NVIC_SetPriority>
}
 8008c90:	bf00      	nop
 8008c92:	3718      	adds	r7, #24
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f7ff ff54 	bl	8008b54 <__NVIC_EnableIRQ>
}
 8008cac:	bf00      	nop
 8008cae:	3708      	adds	r7, #8
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b086      	sub	sp, #24
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008cc0:	f7ff fee6 	bl	8008a90 <HAL_GetTick>
 8008cc4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d101      	bne.n	8008cd0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	e099      	b.n	8008e04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2202      	movs	r2, #2
 8008cd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f022 0201 	bic.w	r2, r2, #1
 8008cee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008cf0:	e00f      	b.n	8008d12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008cf2:	f7ff fecd 	bl	8008a90 <HAL_GetTick>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	1ad3      	subs	r3, r2, r3
 8008cfc:	2b05      	cmp	r3, #5
 8008cfe:	d908      	bls.n	8008d12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2220      	movs	r2, #32
 8008d04:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2203      	movs	r2, #3
 8008d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008d0e:	2303      	movs	r3, #3
 8008d10:	e078      	b.n	8008e04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f003 0301 	and.w	r3, r3, #1
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d1e8      	bne.n	8008cf2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008d28:	697a      	ldr	r2, [r7, #20]
 8008d2a:	4b38      	ldr	r3, [pc, #224]	; (8008e0c <HAL_DMA_Init+0x158>)
 8008d2c:	4013      	ands	r3, r2
 8008d2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	685a      	ldr	r2, [r3, #4]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008d3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	691b      	ldr	r3, [r3, #16]
 8008d44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008d4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	699b      	ldr	r3, [r3, #24]
 8008d50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008d56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6a1b      	ldr	r3, [r3, #32]
 8008d5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008d5e:	697a      	ldr	r2, [r7, #20]
 8008d60:	4313      	orrs	r3, r2
 8008d62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d68:	2b04      	cmp	r3, #4
 8008d6a:	d107      	bne.n	8008d7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d74:	4313      	orrs	r3, r2
 8008d76:	697a      	ldr	r2, [r7, #20]
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	697a      	ldr	r2, [r7, #20]
 8008d82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	695b      	ldr	r3, [r3, #20]
 8008d8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	f023 0307 	bic.w	r3, r3, #7
 8008d92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d98:	697a      	ldr	r2, [r7, #20]
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da2:	2b04      	cmp	r3, #4
 8008da4:	d117      	bne.n	8008dd6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008daa:	697a      	ldr	r2, [r7, #20]
 8008dac:	4313      	orrs	r3, r2
 8008dae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d00e      	beq.n	8008dd6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 fb01 	bl	80093c0 <DMA_CheckFifoParam>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d008      	beq.n	8008dd6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2240      	movs	r2, #64	; 0x40
 8008dc8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2201      	movs	r2, #1
 8008dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	e016      	b.n	8008e04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	697a      	ldr	r2, [r7, #20]
 8008ddc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 fab8 	bl	8009354 <DMA_CalcBaseAndBitshift>
 8008de4:	4603      	mov	r3, r0
 8008de6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dec:	223f      	movs	r2, #63	; 0x3f
 8008dee:	409a      	lsls	r2, r3
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008e02:	2300      	movs	r3, #0
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3718      	adds	r7, #24
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}
 8008e0c:	f010803f 	.word	0xf010803f

08008e10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b086      	sub	sp, #24
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	60f8      	str	r0, [r7, #12]
 8008e18:	60b9      	str	r1, [r7, #8]
 8008e1a:	607a      	str	r2, [r7, #4]
 8008e1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e26:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d101      	bne.n	8008e36 <HAL_DMA_Start_IT+0x26>
 8008e32:	2302      	movs	r3, #2
 8008e34:	e040      	b.n	8008eb8 <HAL_DMA_Start_IT+0xa8>
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2201      	movs	r2, #1
 8008e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d12f      	bne.n	8008eaa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2202      	movs	r2, #2
 8008e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2200      	movs	r2, #0
 8008e56:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	68b9      	ldr	r1, [r7, #8]
 8008e5e:	68f8      	ldr	r0, [r7, #12]
 8008e60:	f000 fa4a 	bl	80092f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e68:	223f      	movs	r2, #63	; 0x3f
 8008e6a:	409a      	lsls	r2, r3
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f042 0216 	orr.w	r2, r2, #22
 8008e7e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d007      	beq.n	8008e98 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	681a      	ldr	r2, [r3, #0]
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f042 0208 	orr.w	r2, r2, #8
 8008e96:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f042 0201 	orr.w	r2, r2, #1
 8008ea6:	601a      	str	r2, [r3, #0]
 8008ea8:	e005      	b.n	8008eb6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2200      	movs	r2, #0
 8008eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008eb2:	2302      	movs	r3, #2
 8008eb4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3718      	adds	r7, #24
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ecc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008ece:	f7ff fddf 	bl	8008a90 <HAL_GetTick>
 8008ed2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	2b02      	cmp	r3, #2
 8008ede:	d008      	beq.n	8008ef2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2280      	movs	r2, #128	; 0x80
 8008ee4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e052      	b.n	8008f98 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f022 0216 	bic.w	r2, r2, #22
 8008f00:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	695a      	ldr	r2, [r3, #20]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f10:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d103      	bne.n	8008f22 <HAL_DMA_Abort+0x62>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d007      	beq.n	8008f32 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f022 0208 	bic.w	r2, r2, #8
 8008f30:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f022 0201 	bic.w	r2, r2, #1
 8008f40:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008f42:	e013      	b.n	8008f6c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008f44:	f7ff fda4 	bl	8008a90 <HAL_GetTick>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	1ad3      	subs	r3, r2, r3
 8008f4e:	2b05      	cmp	r3, #5
 8008f50:	d90c      	bls.n	8008f6c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2220      	movs	r2, #32
 8008f56:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2203      	movs	r2, #3
 8008f5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2200      	movs	r2, #0
 8008f64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8008f68:	2303      	movs	r3, #3
 8008f6a:	e015      	b.n	8008f98 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f003 0301 	and.w	r3, r3, #1
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d1e4      	bne.n	8008f44 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f7e:	223f      	movs	r2, #63	; 0x3f
 8008f80:	409a      	lsls	r2, r3
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2201      	movs	r2, #1
 8008f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2200      	movs	r2, #0
 8008f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8008f96:	2300      	movs	r3, #0
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3710      	adds	r7, #16
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008fae:	b2db      	uxtb	r3, r3
 8008fb0:	2b02      	cmp	r3, #2
 8008fb2:	d004      	beq.n	8008fbe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2280      	movs	r2, #128	; 0x80
 8008fb8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	e00c      	b.n	8008fd8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2205      	movs	r2, #5
 8008fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f022 0201 	bic.w	r2, r2, #1
 8008fd4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008fd6:	2300      	movs	r3, #0
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	370c      	adds	r7, #12
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b086      	sub	sp, #24
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008fec:	2300      	movs	r3, #0
 8008fee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008ff0:	4b8e      	ldr	r3, [pc, #568]	; (800922c <HAL_DMA_IRQHandler+0x248>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a8e      	ldr	r2, [pc, #568]	; (8009230 <HAL_DMA_IRQHandler+0x24c>)
 8008ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8008ffa:	0a9b      	lsrs	r3, r3, #10
 8008ffc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009002:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800900e:	2208      	movs	r2, #8
 8009010:	409a      	lsls	r2, r3
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	4013      	ands	r3, r2
 8009016:	2b00      	cmp	r3, #0
 8009018:	d01a      	beq.n	8009050 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f003 0304 	and.w	r3, r3, #4
 8009024:	2b00      	cmp	r3, #0
 8009026:	d013      	beq.n	8009050 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f022 0204 	bic.w	r2, r2, #4
 8009036:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800903c:	2208      	movs	r2, #8
 800903e:	409a      	lsls	r2, r3
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009048:	f043 0201 	orr.w	r2, r3, #1
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009054:	2201      	movs	r2, #1
 8009056:	409a      	lsls	r2, r3
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	4013      	ands	r3, r2
 800905c:	2b00      	cmp	r3, #0
 800905e:	d012      	beq.n	8009086 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	695b      	ldr	r3, [r3, #20]
 8009066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800906a:	2b00      	cmp	r3, #0
 800906c:	d00b      	beq.n	8009086 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009072:	2201      	movs	r2, #1
 8009074:	409a      	lsls	r2, r3
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800907e:	f043 0202 	orr.w	r2, r3, #2
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800908a:	2204      	movs	r2, #4
 800908c:	409a      	lsls	r2, r3
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	4013      	ands	r3, r2
 8009092:	2b00      	cmp	r3, #0
 8009094:	d012      	beq.n	80090bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f003 0302 	and.w	r3, r3, #2
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d00b      	beq.n	80090bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090a8:	2204      	movs	r2, #4
 80090aa:	409a      	lsls	r2, r3
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090b4:	f043 0204 	orr.w	r2, r3, #4
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090c0:	2210      	movs	r2, #16
 80090c2:	409a      	lsls	r2, r3
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	4013      	ands	r3, r2
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d043      	beq.n	8009154 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f003 0308 	and.w	r3, r3, #8
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d03c      	beq.n	8009154 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090de:	2210      	movs	r2, #16
 80090e0:	409a      	lsls	r2, r3
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d018      	beq.n	8009126 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d108      	bne.n	8009114 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009106:	2b00      	cmp	r3, #0
 8009108:	d024      	beq.n	8009154 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	4798      	blx	r3
 8009112:	e01f      	b.n	8009154 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009118:	2b00      	cmp	r3, #0
 800911a:	d01b      	beq.n	8009154 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	4798      	blx	r3
 8009124:	e016      	b.n	8009154 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009130:	2b00      	cmp	r3, #0
 8009132:	d107      	bne.n	8009144 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f022 0208 	bic.w	r2, r2, #8
 8009142:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009148:	2b00      	cmp	r3, #0
 800914a:	d003      	beq.n	8009154 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009158:	2220      	movs	r2, #32
 800915a:	409a      	lsls	r2, r3
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	4013      	ands	r3, r2
 8009160:	2b00      	cmp	r3, #0
 8009162:	f000 808f 	beq.w	8009284 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f003 0310 	and.w	r3, r3, #16
 8009170:	2b00      	cmp	r3, #0
 8009172:	f000 8087 	beq.w	8009284 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800917a:	2220      	movs	r2, #32
 800917c:	409a      	lsls	r2, r3
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009188:	b2db      	uxtb	r3, r3
 800918a:	2b05      	cmp	r3, #5
 800918c:	d136      	bne.n	80091fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	681a      	ldr	r2, [r3, #0]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f022 0216 	bic.w	r2, r2, #22
 800919c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	695a      	ldr	r2, [r3, #20]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80091ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d103      	bne.n	80091be <HAL_DMA_IRQHandler+0x1da>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d007      	beq.n	80091ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f022 0208 	bic.w	r2, r2, #8
 80091cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091d2:	223f      	movs	r2, #63	; 0x3f
 80091d4:	409a      	lsls	r2, r3
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2201      	movs	r2, #1
 80091de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2200      	movs	r2, #0
 80091e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d07e      	beq.n	80092f0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	4798      	blx	r3
        }
        return;
 80091fa:	e079      	b.n	80092f0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009206:	2b00      	cmp	r3, #0
 8009208:	d01d      	beq.n	8009246 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009214:	2b00      	cmp	r3, #0
 8009216:	d10d      	bne.n	8009234 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800921c:	2b00      	cmp	r3, #0
 800921e:	d031      	beq.n	8009284 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	4798      	blx	r3
 8009228:	e02c      	b.n	8009284 <HAL_DMA_IRQHandler+0x2a0>
 800922a:	bf00      	nop
 800922c:	2000000c 	.word	0x2000000c
 8009230:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009238:	2b00      	cmp	r3, #0
 800923a:	d023      	beq.n	8009284 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	4798      	blx	r3
 8009244:	e01e      	b.n	8009284 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009250:	2b00      	cmp	r3, #0
 8009252:	d10f      	bne.n	8009274 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f022 0210 	bic.w	r2, r2, #16
 8009262:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2201      	movs	r2, #1
 8009268:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2200      	movs	r2, #0
 8009270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009278:	2b00      	cmp	r3, #0
 800927a:	d003      	beq.n	8009284 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009288:	2b00      	cmp	r3, #0
 800928a:	d032      	beq.n	80092f2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009290:	f003 0301 	and.w	r3, r3, #1
 8009294:	2b00      	cmp	r3, #0
 8009296:	d022      	beq.n	80092de <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2205      	movs	r2, #5
 800929c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f022 0201 	bic.w	r2, r2, #1
 80092ae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	3301      	adds	r3, #1
 80092b4:	60bb      	str	r3, [r7, #8]
 80092b6:	697a      	ldr	r2, [r7, #20]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d307      	bcc.n	80092cc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f003 0301 	and.w	r3, r3, #1
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d1f2      	bne.n	80092b0 <HAL_DMA_IRQHandler+0x2cc>
 80092ca:	e000      	b.n	80092ce <HAL_DMA_IRQHandler+0x2ea>
          break;
 80092cc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2201      	movs	r2, #1
 80092d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d005      	beq.n	80092f2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	4798      	blx	r3
 80092ee:	e000      	b.n	80092f2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80092f0:	bf00      	nop
    }
  }
}
 80092f2:	3718      	adds	r7, #24
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b085      	sub	sp, #20
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	60f8      	str	r0, [r7, #12]
 8009300:	60b9      	str	r1, [r7, #8]
 8009302:	607a      	str	r2, [r7, #4]
 8009304:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	681a      	ldr	r2, [r3, #0]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009314:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	683a      	ldr	r2, [r7, #0]
 800931c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	2b40      	cmp	r3, #64	; 0x40
 8009324:	d108      	bne.n	8009338 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8009336:	e007      	b.n	8009348 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	68ba      	ldr	r2, [r7, #8]
 800933e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	60da      	str	r2, [r3, #12]
}
 8009348:	bf00      	nop
 800934a:	3714      	adds	r7, #20
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr

08009354 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009354:	b480      	push	{r7}
 8009356:	b085      	sub	sp, #20
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	b2db      	uxtb	r3, r3
 8009362:	3b10      	subs	r3, #16
 8009364:	4a14      	ldr	r2, [pc, #80]	; (80093b8 <DMA_CalcBaseAndBitshift+0x64>)
 8009366:	fba2 2303 	umull	r2, r3, r2, r3
 800936a:	091b      	lsrs	r3, r3, #4
 800936c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800936e:	4a13      	ldr	r2, [pc, #76]	; (80093bc <DMA_CalcBaseAndBitshift+0x68>)
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	4413      	add	r3, r2
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	461a      	mov	r2, r3
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2b03      	cmp	r3, #3
 8009380:	d909      	bls.n	8009396 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800938a:	f023 0303 	bic.w	r3, r3, #3
 800938e:	1d1a      	adds	r2, r3, #4
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	659a      	str	r2, [r3, #88]	; 0x58
 8009394:	e007      	b.n	80093a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800939e:	f023 0303 	bic.w	r3, r3, #3
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3714      	adds	r7, #20
 80093ae:	46bd      	mov	sp, r7
 80093b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b4:	4770      	bx	lr
 80093b6:	bf00      	nop
 80093b8:	aaaaaaab 	.word	0xaaaaaaab
 80093bc:	080158dc 	.word	0x080158dc

080093c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b085      	sub	sp, #20
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80093c8:	2300      	movs	r3, #0
 80093ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	699b      	ldr	r3, [r3, #24]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d11f      	bne.n	800941a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	2b03      	cmp	r3, #3
 80093de:	d856      	bhi.n	800948e <DMA_CheckFifoParam+0xce>
 80093e0:	a201      	add	r2, pc, #4	; (adr r2, 80093e8 <DMA_CheckFifoParam+0x28>)
 80093e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093e6:	bf00      	nop
 80093e8:	080093f9 	.word	0x080093f9
 80093ec:	0800940b 	.word	0x0800940b
 80093f0:	080093f9 	.word	0x080093f9
 80093f4:	0800948f 	.word	0x0800948f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009400:	2b00      	cmp	r3, #0
 8009402:	d046      	beq.n	8009492 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8009404:	2301      	movs	r3, #1
 8009406:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009408:	e043      	b.n	8009492 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800940e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009412:	d140      	bne.n	8009496 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8009414:	2301      	movs	r3, #1
 8009416:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009418:	e03d      	b.n	8009496 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	699b      	ldr	r3, [r3, #24]
 800941e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009422:	d121      	bne.n	8009468 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	2b03      	cmp	r3, #3
 8009428:	d837      	bhi.n	800949a <DMA_CheckFifoParam+0xda>
 800942a:	a201      	add	r2, pc, #4	; (adr r2, 8009430 <DMA_CheckFifoParam+0x70>)
 800942c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009430:	08009441 	.word	0x08009441
 8009434:	08009447 	.word	0x08009447
 8009438:	08009441 	.word	0x08009441
 800943c:	08009459 	.word	0x08009459
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8009440:	2301      	movs	r3, #1
 8009442:	73fb      	strb	r3, [r7, #15]
      break;
 8009444:	e030      	b.n	80094a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800944a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800944e:	2b00      	cmp	r3, #0
 8009450:	d025      	beq.n	800949e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8009452:	2301      	movs	r3, #1
 8009454:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009456:	e022      	b.n	800949e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800945c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009460:	d11f      	bne.n	80094a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8009462:	2301      	movs	r3, #1
 8009464:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009466:	e01c      	b.n	80094a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	2b02      	cmp	r3, #2
 800946c:	d903      	bls.n	8009476 <DMA_CheckFifoParam+0xb6>
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	2b03      	cmp	r3, #3
 8009472:	d003      	beq.n	800947c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009474:	e018      	b.n	80094a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8009476:	2301      	movs	r3, #1
 8009478:	73fb      	strb	r3, [r7, #15]
      break;
 800947a:	e015      	b.n	80094a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009480:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00e      	beq.n	80094a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8009488:	2301      	movs	r3, #1
 800948a:	73fb      	strb	r3, [r7, #15]
      break;
 800948c:	e00b      	b.n	80094a6 <DMA_CheckFifoParam+0xe6>
      break;
 800948e:	bf00      	nop
 8009490:	e00a      	b.n	80094a8 <DMA_CheckFifoParam+0xe8>
      break;
 8009492:	bf00      	nop
 8009494:	e008      	b.n	80094a8 <DMA_CheckFifoParam+0xe8>
      break;
 8009496:	bf00      	nop
 8009498:	e006      	b.n	80094a8 <DMA_CheckFifoParam+0xe8>
      break;
 800949a:	bf00      	nop
 800949c:	e004      	b.n	80094a8 <DMA_CheckFifoParam+0xe8>
      break;
 800949e:	bf00      	nop
 80094a0:	e002      	b.n	80094a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80094a2:	bf00      	nop
 80094a4:	e000      	b.n	80094a8 <DMA_CheckFifoParam+0xe8>
      break;
 80094a6:	bf00      	nop
    }
  } 
  
  return status; 
 80094a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3714      	adds	r7, #20
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr
 80094b6:	bf00      	nop

080094b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b089      	sub	sp, #36	; 0x24
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80094c2:	2300      	movs	r3, #0
 80094c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80094c6:	2300      	movs	r3, #0
 80094c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80094ca:	2300      	movs	r3, #0
 80094cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80094ce:	2300      	movs	r3, #0
 80094d0:	61fb      	str	r3, [r7, #28]
 80094d2:	e177      	b.n	80097c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80094d4:	2201      	movs	r2, #1
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	fa02 f303 	lsl.w	r3, r2, r3
 80094dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	697a      	ldr	r2, [r7, #20]
 80094e4:	4013      	ands	r3, r2
 80094e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80094e8:	693a      	ldr	r2, [r7, #16]
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	429a      	cmp	r2, r3
 80094ee:	f040 8166 	bne.w	80097be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	f003 0303 	and.w	r3, r3, #3
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d005      	beq.n	800950a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009506:	2b02      	cmp	r3, #2
 8009508:	d130      	bne.n	800956c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	689b      	ldr	r3, [r3, #8]
 800950e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009510:	69fb      	ldr	r3, [r7, #28]
 8009512:	005b      	lsls	r3, r3, #1
 8009514:	2203      	movs	r2, #3
 8009516:	fa02 f303 	lsl.w	r3, r2, r3
 800951a:	43db      	mvns	r3, r3
 800951c:	69ba      	ldr	r2, [r7, #24]
 800951e:	4013      	ands	r3, r2
 8009520:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	68da      	ldr	r2, [r3, #12]
 8009526:	69fb      	ldr	r3, [r7, #28]
 8009528:	005b      	lsls	r3, r3, #1
 800952a:	fa02 f303 	lsl.w	r3, r2, r3
 800952e:	69ba      	ldr	r2, [r7, #24]
 8009530:	4313      	orrs	r3, r2
 8009532:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	69ba      	ldr	r2, [r7, #24]
 8009538:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009540:	2201      	movs	r2, #1
 8009542:	69fb      	ldr	r3, [r7, #28]
 8009544:	fa02 f303 	lsl.w	r3, r2, r3
 8009548:	43db      	mvns	r3, r3
 800954a:	69ba      	ldr	r2, [r7, #24]
 800954c:	4013      	ands	r3, r2
 800954e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	091b      	lsrs	r3, r3, #4
 8009556:	f003 0201 	and.w	r2, r3, #1
 800955a:	69fb      	ldr	r3, [r7, #28]
 800955c:	fa02 f303 	lsl.w	r3, r2, r3
 8009560:	69ba      	ldr	r2, [r7, #24]
 8009562:	4313      	orrs	r3, r2
 8009564:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	69ba      	ldr	r2, [r7, #24]
 800956a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	f003 0303 	and.w	r3, r3, #3
 8009574:	2b03      	cmp	r3, #3
 8009576:	d017      	beq.n	80095a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	68db      	ldr	r3, [r3, #12]
 800957c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800957e:	69fb      	ldr	r3, [r7, #28]
 8009580:	005b      	lsls	r3, r3, #1
 8009582:	2203      	movs	r2, #3
 8009584:	fa02 f303 	lsl.w	r3, r2, r3
 8009588:	43db      	mvns	r3, r3
 800958a:	69ba      	ldr	r2, [r7, #24]
 800958c:	4013      	ands	r3, r2
 800958e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	689a      	ldr	r2, [r3, #8]
 8009594:	69fb      	ldr	r3, [r7, #28]
 8009596:	005b      	lsls	r3, r3, #1
 8009598:	fa02 f303 	lsl.w	r3, r2, r3
 800959c:	69ba      	ldr	r2, [r7, #24]
 800959e:	4313      	orrs	r3, r2
 80095a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	69ba      	ldr	r2, [r7, #24]
 80095a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	f003 0303 	and.w	r3, r3, #3
 80095b0:	2b02      	cmp	r3, #2
 80095b2:	d123      	bne.n	80095fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80095b4:	69fb      	ldr	r3, [r7, #28]
 80095b6:	08da      	lsrs	r2, r3, #3
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	3208      	adds	r2, #8
 80095bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80095c2:	69fb      	ldr	r3, [r7, #28]
 80095c4:	f003 0307 	and.w	r3, r3, #7
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	220f      	movs	r2, #15
 80095cc:	fa02 f303 	lsl.w	r3, r2, r3
 80095d0:	43db      	mvns	r3, r3
 80095d2:	69ba      	ldr	r2, [r7, #24]
 80095d4:	4013      	ands	r3, r2
 80095d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	691a      	ldr	r2, [r3, #16]
 80095dc:	69fb      	ldr	r3, [r7, #28]
 80095de:	f003 0307 	and.w	r3, r3, #7
 80095e2:	009b      	lsls	r3, r3, #2
 80095e4:	fa02 f303 	lsl.w	r3, r2, r3
 80095e8:	69ba      	ldr	r2, [r7, #24]
 80095ea:	4313      	orrs	r3, r2
 80095ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80095ee:	69fb      	ldr	r3, [r7, #28]
 80095f0:	08da      	lsrs	r2, r3, #3
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	3208      	adds	r2, #8
 80095f6:	69b9      	ldr	r1, [r7, #24]
 80095f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009602:	69fb      	ldr	r3, [r7, #28]
 8009604:	005b      	lsls	r3, r3, #1
 8009606:	2203      	movs	r2, #3
 8009608:	fa02 f303 	lsl.w	r3, r2, r3
 800960c:	43db      	mvns	r3, r3
 800960e:	69ba      	ldr	r2, [r7, #24]
 8009610:	4013      	ands	r3, r2
 8009612:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	f003 0203 	and.w	r2, r3, #3
 800961c:	69fb      	ldr	r3, [r7, #28]
 800961e:	005b      	lsls	r3, r3, #1
 8009620:	fa02 f303 	lsl.w	r3, r2, r3
 8009624:	69ba      	ldr	r2, [r7, #24]
 8009626:	4313      	orrs	r3, r2
 8009628:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	69ba      	ldr	r2, [r7, #24]
 800962e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	685b      	ldr	r3, [r3, #4]
 8009634:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009638:	2b00      	cmp	r3, #0
 800963a:	f000 80c0 	beq.w	80097be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800963e:	2300      	movs	r3, #0
 8009640:	60fb      	str	r3, [r7, #12]
 8009642:	4b66      	ldr	r3, [pc, #408]	; (80097dc <HAL_GPIO_Init+0x324>)
 8009644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009646:	4a65      	ldr	r2, [pc, #404]	; (80097dc <HAL_GPIO_Init+0x324>)
 8009648:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800964c:	6453      	str	r3, [r2, #68]	; 0x44
 800964e:	4b63      	ldr	r3, [pc, #396]	; (80097dc <HAL_GPIO_Init+0x324>)
 8009650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009656:	60fb      	str	r3, [r7, #12]
 8009658:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800965a:	4a61      	ldr	r2, [pc, #388]	; (80097e0 <HAL_GPIO_Init+0x328>)
 800965c:	69fb      	ldr	r3, [r7, #28]
 800965e:	089b      	lsrs	r3, r3, #2
 8009660:	3302      	adds	r3, #2
 8009662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009666:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009668:	69fb      	ldr	r3, [r7, #28]
 800966a:	f003 0303 	and.w	r3, r3, #3
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	220f      	movs	r2, #15
 8009672:	fa02 f303 	lsl.w	r3, r2, r3
 8009676:	43db      	mvns	r3, r3
 8009678:	69ba      	ldr	r2, [r7, #24]
 800967a:	4013      	ands	r3, r2
 800967c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	4a58      	ldr	r2, [pc, #352]	; (80097e4 <HAL_GPIO_Init+0x32c>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d037      	beq.n	80096f6 <HAL_GPIO_Init+0x23e>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	4a57      	ldr	r2, [pc, #348]	; (80097e8 <HAL_GPIO_Init+0x330>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d031      	beq.n	80096f2 <HAL_GPIO_Init+0x23a>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	4a56      	ldr	r2, [pc, #344]	; (80097ec <HAL_GPIO_Init+0x334>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d02b      	beq.n	80096ee <HAL_GPIO_Init+0x236>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	4a55      	ldr	r2, [pc, #340]	; (80097f0 <HAL_GPIO_Init+0x338>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d025      	beq.n	80096ea <HAL_GPIO_Init+0x232>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	4a54      	ldr	r2, [pc, #336]	; (80097f4 <HAL_GPIO_Init+0x33c>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d01f      	beq.n	80096e6 <HAL_GPIO_Init+0x22e>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	4a53      	ldr	r2, [pc, #332]	; (80097f8 <HAL_GPIO_Init+0x340>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d019      	beq.n	80096e2 <HAL_GPIO_Init+0x22a>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	4a52      	ldr	r2, [pc, #328]	; (80097fc <HAL_GPIO_Init+0x344>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d013      	beq.n	80096de <HAL_GPIO_Init+0x226>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	4a51      	ldr	r2, [pc, #324]	; (8009800 <HAL_GPIO_Init+0x348>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d00d      	beq.n	80096da <HAL_GPIO_Init+0x222>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4a50      	ldr	r2, [pc, #320]	; (8009804 <HAL_GPIO_Init+0x34c>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d007      	beq.n	80096d6 <HAL_GPIO_Init+0x21e>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	4a4f      	ldr	r2, [pc, #316]	; (8009808 <HAL_GPIO_Init+0x350>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d101      	bne.n	80096d2 <HAL_GPIO_Init+0x21a>
 80096ce:	2309      	movs	r3, #9
 80096d0:	e012      	b.n	80096f8 <HAL_GPIO_Init+0x240>
 80096d2:	230a      	movs	r3, #10
 80096d4:	e010      	b.n	80096f8 <HAL_GPIO_Init+0x240>
 80096d6:	2308      	movs	r3, #8
 80096d8:	e00e      	b.n	80096f8 <HAL_GPIO_Init+0x240>
 80096da:	2307      	movs	r3, #7
 80096dc:	e00c      	b.n	80096f8 <HAL_GPIO_Init+0x240>
 80096de:	2306      	movs	r3, #6
 80096e0:	e00a      	b.n	80096f8 <HAL_GPIO_Init+0x240>
 80096e2:	2305      	movs	r3, #5
 80096e4:	e008      	b.n	80096f8 <HAL_GPIO_Init+0x240>
 80096e6:	2304      	movs	r3, #4
 80096e8:	e006      	b.n	80096f8 <HAL_GPIO_Init+0x240>
 80096ea:	2303      	movs	r3, #3
 80096ec:	e004      	b.n	80096f8 <HAL_GPIO_Init+0x240>
 80096ee:	2302      	movs	r3, #2
 80096f0:	e002      	b.n	80096f8 <HAL_GPIO_Init+0x240>
 80096f2:	2301      	movs	r3, #1
 80096f4:	e000      	b.n	80096f8 <HAL_GPIO_Init+0x240>
 80096f6:	2300      	movs	r3, #0
 80096f8:	69fa      	ldr	r2, [r7, #28]
 80096fa:	f002 0203 	and.w	r2, r2, #3
 80096fe:	0092      	lsls	r2, r2, #2
 8009700:	4093      	lsls	r3, r2
 8009702:	69ba      	ldr	r2, [r7, #24]
 8009704:	4313      	orrs	r3, r2
 8009706:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009708:	4935      	ldr	r1, [pc, #212]	; (80097e0 <HAL_GPIO_Init+0x328>)
 800970a:	69fb      	ldr	r3, [r7, #28]
 800970c:	089b      	lsrs	r3, r3, #2
 800970e:	3302      	adds	r3, #2
 8009710:	69ba      	ldr	r2, [r7, #24]
 8009712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009716:	4b3d      	ldr	r3, [pc, #244]	; (800980c <HAL_GPIO_Init+0x354>)
 8009718:	689b      	ldr	r3, [r3, #8]
 800971a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	43db      	mvns	r3, r3
 8009720:	69ba      	ldr	r2, [r7, #24]
 8009722:	4013      	ands	r3, r2
 8009724:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800972e:	2b00      	cmp	r3, #0
 8009730:	d003      	beq.n	800973a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8009732:	69ba      	ldr	r2, [r7, #24]
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	4313      	orrs	r3, r2
 8009738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800973a:	4a34      	ldr	r2, [pc, #208]	; (800980c <HAL_GPIO_Init+0x354>)
 800973c:	69bb      	ldr	r3, [r7, #24]
 800973e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009740:	4b32      	ldr	r3, [pc, #200]	; (800980c <HAL_GPIO_Init+0x354>)
 8009742:	68db      	ldr	r3, [r3, #12]
 8009744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	43db      	mvns	r3, r3
 800974a:	69ba      	ldr	r2, [r7, #24]
 800974c:	4013      	ands	r3, r2
 800974e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009758:	2b00      	cmp	r3, #0
 800975a:	d003      	beq.n	8009764 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800975c:	69ba      	ldr	r2, [r7, #24]
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	4313      	orrs	r3, r2
 8009762:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009764:	4a29      	ldr	r2, [pc, #164]	; (800980c <HAL_GPIO_Init+0x354>)
 8009766:	69bb      	ldr	r3, [r7, #24]
 8009768:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800976a:	4b28      	ldr	r3, [pc, #160]	; (800980c <HAL_GPIO_Init+0x354>)
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	43db      	mvns	r3, r3
 8009774:	69ba      	ldr	r2, [r7, #24]
 8009776:	4013      	ands	r3, r2
 8009778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009782:	2b00      	cmp	r3, #0
 8009784:	d003      	beq.n	800978e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8009786:	69ba      	ldr	r2, [r7, #24]
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	4313      	orrs	r3, r2
 800978c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800978e:	4a1f      	ldr	r2, [pc, #124]	; (800980c <HAL_GPIO_Init+0x354>)
 8009790:	69bb      	ldr	r3, [r7, #24]
 8009792:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009794:	4b1d      	ldr	r3, [pc, #116]	; (800980c <HAL_GPIO_Init+0x354>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	43db      	mvns	r3, r3
 800979e:	69ba      	ldr	r2, [r7, #24]
 80097a0:	4013      	ands	r3, r2
 80097a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d003      	beq.n	80097b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80097b0:	69ba      	ldr	r2, [r7, #24]
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	4313      	orrs	r3, r2
 80097b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80097b8:	4a14      	ldr	r2, [pc, #80]	; (800980c <HAL_GPIO_Init+0x354>)
 80097ba:	69bb      	ldr	r3, [r7, #24]
 80097bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	3301      	adds	r3, #1
 80097c2:	61fb      	str	r3, [r7, #28]
 80097c4:	69fb      	ldr	r3, [r7, #28]
 80097c6:	2b0f      	cmp	r3, #15
 80097c8:	f67f ae84 	bls.w	80094d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80097cc:	bf00      	nop
 80097ce:	bf00      	nop
 80097d0:	3724      	adds	r7, #36	; 0x24
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr
 80097da:	bf00      	nop
 80097dc:	40023800 	.word	0x40023800
 80097e0:	40013800 	.word	0x40013800
 80097e4:	40020000 	.word	0x40020000
 80097e8:	40020400 	.word	0x40020400
 80097ec:	40020800 	.word	0x40020800
 80097f0:	40020c00 	.word	0x40020c00
 80097f4:	40021000 	.word	0x40021000
 80097f8:	40021400 	.word	0x40021400
 80097fc:	40021800 	.word	0x40021800
 8009800:	40021c00 	.word	0x40021c00
 8009804:	40022000 	.word	0x40022000
 8009808:	40022400 	.word	0x40022400
 800980c:	40013c00 	.word	0x40013c00

08009810 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009810:	b480      	push	{r7}
 8009812:	b085      	sub	sp, #20
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	460b      	mov	r3, r1
 800981a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	691a      	ldr	r2, [r3, #16]
 8009820:	887b      	ldrh	r3, [r7, #2]
 8009822:	4013      	ands	r3, r2
 8009824:	2b00      	cmp	r3, #0
 8009826:	d002      	beq.n	800982e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009828:	2301      	movs	r3, #1
 800982a:	73fb      	strb	r3, [r7, #15]
 800982c:	e001      	b.n	8009832 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800982e:	2300      	movs	r3, #0
 8009830:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009832:	7bfb      	ldrb	r3, [r7, #15]
}
 8009834:	4618      	mov	r0, r3
 8009836:	3714      	adds	r7, #20
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	460b      	mov	r3, r1
 800984a:	807b      	strh	r3, [r7, #2]
 800984c:	4613      	mov	r3, r2
 800984e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009850:	787b      	ldrb	r3, [r7, #1]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d003      	beq.n	800985e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009856:	887a      	ldrh	r2, [r7, #2]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800985c:	e003      	b.n	8009866 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800985e:	887b      	ldrh	r3, [r7, #2]
 8009860:	041a      	lsls	r2, r3, #16
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	619a      	str	r2, [r3, #24]
}
 8009866:	bf00      	nop
 8009868:	370c      	adds	r7, #12
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr
	...

08009874 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b082      	sub	sp, #8
 8009878:	af00      	add	r7, sp, #0
 800987a:	4603      	mov	r3, r0
 800987c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800987e:	4b08      	ldr	r3, [pc, #32]	; (80098a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009880:	695a      	ldr	r2, [r3, #20]
 8009882:	88fb      	ldrh	r3, [r7, #6]
 8009884:	4013      	ands	r3, r2
 8009886:	2b00      	cmp	r3, #0
 8009888:	d006      	beq.n	8009898 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800988a:	4a05      	ldr	r2, [pc, #20]	; (80098a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800988c:	88fb      	ldrh	r3, [r7, #6]
 800988e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009890:	88fb      	ldrh	r3, [r7, #6]
 8009892:	4618      	mov	r0, r3
 8009894:	f7f9 fde0 	bl	8003458 <HAL_GPIO_EXTI_Callback>
  }
}
 8009898:	bf00      	nop
 800989a:	3708      	adds	r7, #8
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}
 80098a0:	40013c00 	.word	0x40013c00

080098a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b084      	sub	sp, #16
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d101      	bne.n	80098b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80098b2:	2301      	movs	r3, #1
 80098b4:	e12b      	b.n	8009b0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d106      	bne.n	80098d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2200      	movs	r2, #0
 80098c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f7fe fbd0 	bl	8008070 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2224      	movs	r2, #36	; 0x24
 80098d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	681a      	ldr	r2, [r3, #0]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f022 0201 	bic.w	r2, r2, #1
 80098e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80098f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	681a      	ldr	r2, [r3, #0]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009906:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009908:	f001 fc8c 	bl	800b224 <HAL_RCC_GetPCLK1Freq>
 800990c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	4a81      	ldr	r2, [pc, #516]	; (8009b18 <HAL_I2C_Init+0x274>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d807      	bhi.n	8009928 <HAL_I2C_Init+0x84>
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	4a80      	ldr	r2, [pc, #512]	; (8009b1c <HAL_I2C_Init+0x278>)
 800991c:	4293      	cmp	r3, r2
 800991e:	bf94      	ite	ls
 8009920:	2301      	movls	r3, #1
 8009922:	2300      	movhi	r3, #0
 8009924:	b2db      	uxtb	r3, r3
 8009926:	e006      	b.n	8009936 <HAL_I2C_Init+0x92>
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	4a7d      	ldr	r2, [pc, #500]	; (8009b20 <HAL_I2C_Init+0x27c>)
 800992c:	4293      	cmp	r3, r2
 800992e:	bf94      	ite	ls
 8009930:	2301      	movls	r3, #1
 8009932:	2300      	movhi	r3, #0
 8009934:	b2db      	uxtb	r3, r3
 8009936:	2b00      	cmp	r3, #0
 8009938:	d001      	beq.n	800993e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	e0e7      	b.n	8009b0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	4a78      	ldr	r2, [pc, #480]	; (8009b24 <HAL_I2C_Init+0x280>)
 8009942:	fba2 2303 	umull	r2, r3, r2, r3
 8009946:	0c9b      	lsrs	r3, r3, #18
 8009948:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	68ba      	ldr	r2, [r7, #8]
 800995a:	430a      	orrs	r2, r1
 800995c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	6a1b      	ldr	r3, [r3, #32]
 8009964:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	4a6a      	ldr	r2, [pc, #424]	; (8009b18 <HAL_I2C_Init+0x274>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d802      	bhi.n	8009978 <HAL_I2C_Init+0xd4>
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	3301      	adds	r3, #1
 8009976:	e009      	b.n	800998c <HAL_I2C_Init+0xe8>
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800997e:	fb02 f303 	mul.w	r3, r2, r3
 8009982:	4a69      	ldr	r2, [pc, #420]	; (8009b28 <HAL_I2C_Init+0x284>)
 8009984:	fba2 2303 	umull	r2, r3, r2, r3
 8009988:	099b      	lsrs	r3, r3, #6
 800998a:	3301      	adds	r3, #1
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	6812      	ldr	r2, [r2, #0]
 8009990:	430b      	orrs	r3, r1
 8009992:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	69db      	ldr	r3, [r3, #28]
 800999a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800999e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	495c      	ldr	r1, [pc, #368]	; (8009b18 <HAL_I2C_Init+0x274>)
 80099a8:	428b      	cmp	r3, r1
 80099aa:	d819      	bhi.n	80099e0 <HAL_I2C_Init+0x13c>
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	1e59      	subs	r1, r3, #1
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	005b      	lsls	r3, r3, #1
 80099b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80099ba:	1c59      	adds	r1, r3, #1
 80099bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80099c0:	400b      	ands	r3, r1
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d00a      	beq.n	80099dc <HAL_I2C_Init+0x138>
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	1e59      	subs	r1, r3, #1
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	005b      	lsls	r3, r3, #1
 80099d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80099d4:	3301      	adds	r3, #1
 80099d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80099da:	e051      	b.n	8009a80 <HAL_I2C_Init+0x1dc>
 80099dc:	2304      	movs	r3, #4
 80099de:	e04f      	b.n	8009a80 <HAL_I2C_Init+0x1dc>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	689b      	ldr	r3, [r3, #8]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d111      	bne.n	8009a0c <HAL_I2C_Init+0x168>
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	1e58      	subs	r0, r3, #1
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6859      	ldr	r1, [r3, #4]
 80099f0:	460b      	mov	r3, r1
 80099f2:	005b      	lsls	r3, r3, #1
 80099f4:	440b      	add	r3, r1
 80099f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80099fa:	3301      	adds	r3, #1
 80099fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	bf0c      	ite	eq
 8009a04:	2301      	moveq	r3, #1
 8009a06:	2300      	movne	r3, #0
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	e012      	b.n	8009a32 <HAL_I2C_Init+0x18e>
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	1e58      	subs	r0, r3, #1
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6859      	ldr	r1, [r3, #4]
 8009a14:	460b      	mov	r3, r1
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	440b      	add	r3, r1
 8009a1a:	0099      	lsls	r1, r3, #2
 8009a1c:	440b      	add	r3, r1
 8009a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009a22:	3301      	adds	r3, #1
 8009a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	bf0c      	ite	eq
 8009a2c:	2301      	moveq	r3, #1
 8009a2e:	2300      	movne	r3, #0
 8009a30:	b2db      	uxtb	r3, r3
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d001      	beq.n	8009a3a <HAL_I2C_Init+0x196>
 8009a36:	2301      	movs	r3, #1
 8009a38:	e022      	b.n	8009a80 <HAL_I2C_Init+0x1dc>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	689b      	ldr	r3, [r3, #8]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d10e      	bne.n	8009a60 <HAL_I2C_Init+0x1bc>
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	1e58      	subs	r0, r3, #1
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6859      	ldr	r1, [r3, #4]
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	005b      	lsls	r3, r3, #1
 8009a4e:	440b      	add	r3, r1
 8009a50:	fbb0 f3f3 	udiv	r3, r0, r3
 8009a54:	3301      	adds	r3, #1
 8009a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a5e:	e00f      	b.n	8009a80 <HAL_I2C_Init+0x1dc>
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	1e58      	subs	r0, r3, #1
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6859      	ldr	r1, [r3, #4]
 8009a68:	460b      	mov	r3, r1
 8009a6a:	009b      	lsls	r3, r3, #2
 8009a6c:	440b      	add	r3, r1
 8009a6e:	0099      	lsls	r1, r3, #2
 8009a70:	440b      	add	r3, r1
 8009a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8009a76:	3301      	adds	r3, #1
 8009a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009a80:	6879      	ldr	r1, [r7, #4]
 8009a82:	6809      	ldr	r1, [r1, #0]
 8009a84:	4313      	orrs	r3, r2
 8009a86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	69da      	ldr	r2, [r3, #28]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6a1b      	ldr	r3, [r3, #32]
 8009a9a:	431a      	orrs	r2, r3
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	430a      	orrs	r2, r1
 8009aa2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	689b      	ldr	r3, [r3, #8]
 8009aaa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009aae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	6911      	ldr	r1, [r2, #16]
 8009ab6:	687a      	ldr	r2, [r7, #4]
 8009ab8:	68d2      	ldr	r2, [r2, #12]
 8009aba:	4311      	orrs	r1, r2
 8009abc:	687a      	ldr	r2, [r7, #4]
 8009abe:	6812      	ldr	r2, [r2, #0]
 8009ac0:	430b      	orrs	r3, r1
 8009ac2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	68db      	ldr	r3, [r3, #12]
 8009aca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	695a      	ldr	r2, [r3, #20]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	699b      	ldr	r3, [r3, #24]
 8009ad6:	431a      	orrs	r2, r3
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	430a      	orrs	r2, r1
 8009ade:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	681a      	ldr	r2, [r3, #0]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f042 0201 	orr.w	r2, r2, #1
 8009aee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2200      	movs	r2, #0
 8009af4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2220      	movs	r2, #32
 8009afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2200      	movs	r2, #0
 8009b02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009b0c:	2300      	movs	r3, #0
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3710      	adds	r7, #16
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}
 8009b16:	bf00      	nop
 8009b18:	000186a0 	.word	0x000186a0
 8009b1c:	001e847f 	.word	0x001e847f
 8009b20:	003d08ff 	.word	0x003d08ff
 8009b24:	431bde83 	.word	0x431bde83
 8009b28:	10624dd3 	.word	0x10624dd3

08009b2c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b088      	sub	sp, #32
 8009b30:	af02      	add	r7, sp, #8
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	607a      	str	r2, [r7, #4]
 8009b36:	461a      	mov	r2, r3
 8009b38:	460b      	mov	r3, r1
 8009b3a:	817b      	strh	r3, [r7, #10]
 8009b3c:	4613      	mov	r3, r2
 8009b3e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009b40:	f7fe ffa6 	bl	8008a90 <HAL_GetTick>
 8009b44:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b4c:	b2db      	uxtb	r3, r3
 8009b4e:	2b20      	cmp	r3, #32
 8009b50:	f040 80e0 	bne.w	8009d14 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	9300      	str	r3, [sp, #0]
 8009b58:	2319      	movs	r3, #25
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	4970      	ldr	r1, [pc, #448]	; (8009d20 <HAL_I2C_Master_Transmit+0x1f4>)
 8009b5e:	68f8      	ldr	r0, [r7, #12]
 8009b60:	f000 fc7e 	bl	800a460 <I2C_WaitOnFlagUntilTimeout>
 8009b64:	4603      	mov	r3, r0
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d001      	beq.n	8009b6e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009b6a:	2302      	movs	r3, #2
 8009b6c:	e0d3      	b.n	8009d16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d101      	bne.n	8009b7c <HAL_I2C_Master_Transmit+0x50>
 8009b78:	2302      	movs	r3, #2
 8009b7a:	e0cc      	b.n	8009d16 <HAL_I2C_Master_Transmit+0x1ea>
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f003 0301 	and.w	r3, r3, #1
 8009b8e:	2b01      	cmp	r3, #1
 8009b90:	d007      	beq.n	8009ba2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f042 0201 	orr.w	r2, r2, #1
 8009ba0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	681a      	ldr	r2, [r3, #0]
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009bb0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2221      	movs	r2, #33	; 0x21
 8009bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2210      	movs	r2, #16
 8009bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	893a      	ldrh	r2, [r7, #8]
 8009bd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bd8:	b29a      	uxth	r2, r3
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	4a50      	ldr	r2, [pc, #320]	; (8009d24 <HAL_I2C_Master_Transmit+0x1f8>)
 8009be2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009be4:	8979      	ldrh	r1, [r7, #10]
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	6a3a      	ldr	r2, [r7, #32]
 8009bea:	68f8      	ldr	r0, [r7, #12]
 8009bec:	f000 fae8 	bl	800a1c0 <I2C_MasterRequestWrite>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d001      	beq.n	8009bfa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e08d      	b.n	8009d16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	613b      	str	r3, [r7, #16]
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	695b      	ldr	r3, [r3, #20]
 8009c04:	613b      	str	r3, [r7, #16]
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	699b      	ldr	r3, [r3, #24]
 8009c0c:	613b      	str	r3, [r7, #16]
 8009c0e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009c10:	e066      	b.n	8009ce0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c12:	697a      	ldr	r2, [r7, #20]
 8009c14:	6a39      	ldr	r1, [r7, #32]
 8009c16:	68f8      	ldr	r0, [r7, #12]
 8009c18:	f000 fd3c 	bl	800a694 <I2C_WaitOnTXEFlagUntilTimeout>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d00d      	beq.n	8009c3e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c26:	2b04      	cmp	r3, #4
 8009c28:	d107      	bne.n	8009c3a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	681a      	ldr	r2, [r3, #0]
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	e06b      	b.n	8009d16 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c42:	781a      	ldrb	r2, [r3, #0]
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c4e:	1c5a      	adds	r2, r3, #1
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c58:	b29b      	uxth	r3, r3
 8009c5a:	3b01      	subs	r3, #1
 8009c5c:	b29a      	uxth	r2, r3
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c66:	3b01      	subs	r3, #1
 8009c68:	b29a      	uxth	r2, r3
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	695b      	ldr	r3, [r3, #20]
 8009c74:	f003 0304 	and.w	r3, r3, #4
 8009c78:	2b04      	cmp	r3, #4
 8009c7a:	d11b      	bne.n	8009cb4 <HAL_I2C_Master_Transmit+0x188>
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d017      	beq.n	8009cb4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c88:	781a      	ldrb	r2, [r3, #0]
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c94:	1c5a      	adds	r2, r3, #1
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c9e:	b29b      	uxth	r3, r3
 8009ca0:	3b01      	subs	r3, #1
 8009ca2:	b29a      	uxth	r2, r3
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cac:	3b01      	subs	r3, #1
 8009cae:	b29a      	uxth	r2, r3
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009cb4:	697a      	ldr	r2, [r7, #20]
 8009cb6:	6a39      	ldr	r1, [r7, #32]
 8009cb8:	68f8      	ldr	r0, [r7, #12]
 8009cba:	f000 fd33 	bl	800a724 <I2C_WaitOnBTFFlagUntilTimeout>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d00d      	beq.n	8009ce0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cc8:	2b04      	cmp	r3, #4
 8009cca:	d107      	bne.n	8009cdc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	681a      	ldr	r2, [r3, #0]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009cda:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	e01a      	b.n	8009d16 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d194      	bne.n	8009c12 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009cf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2220      	movs	r2, #32
 8009cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2200      	movs	r2, #0
 8009d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009d10:	2300      	movs	r3, #0
 8009d12:	e000      	b.n	8009d16 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009d14:	2302      	movs	r3, #2
  }
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3718      	adds	r7, #24
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	00100002 	.word	0x00100002
 8009d24:	ffff0000 	.word	0xffff0000

08009d28 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b08c      	sub	sp, #48	; 0x30
 8009d2c:	af02      	add	r7, sp, #8
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	607a      	str	r2, [r7, #4]
 8009d32:	461a      	mov	r2, r3
 8009d34:	460b      	mov	r3, r1
 8009d36:	817b      	strh	r3, [r7, #10]
 8009d38:	4613      	mov	r3, r2
 8009d3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009d3c:	f7fe fea8 	bl	8008a90 <HAL_GetTick>
 8009d40:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d48:	b2db      	uxtb	r3, r3
 8009d4a:	2b20      	cmp	r3, #32
 8009d4c:	f040 8217 	bne.w	800a17e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d52:	9300      	str	r3, [sp, #0]
 8009d54:	2319      	movs	r3, #25
 8009d56:	2201      	movs	r2, #1
 8009d58:	497c      	ldr	r1, [pc, #496]	; (8009f4c <HAL_I2C_Master_Receive+0x224>)
 8009d5a:	68f8      	ldr	r0, [r7, #12]
 8009d5c:	f000 fb80 	bl	800a460 <I2C_WaitOnFlagUntilTimeout>
 8009d60:	4603      	mov	r3, r0
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d001      	beq.n	8009d6a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8009d66:	2302      	movs	r3, #2
 8009d68:	e20a      	b.n	800a180 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	d101      	bne.n	8009d78 <HAL_I2C_Master_Receive+0x50>
 8009d74:	2302      	movs	r3, #2
 8009d76:	e203      	b.n	800a180 <HAL_I2C_Master_Receive+0x458>
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f003 0301 	and.w	r3, r3, #1
 8009d8a:	2b01      	cmp	r3, #1
 8009d8c:	d007      	beq.n	8009d9e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	681a      	ldr	r2, [r3, #0]
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f042 0201 	orr.w	r2, r2, #1
 8009d9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009dac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	2222      	movs	r2, #34	; 0x22
 8009db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2210      	movs	r2, #16
 8009dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	893a      	ldrh	r2, [r7, #8]
 8009dce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dd4:	b29a      	uxth	r2, r3
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	4a5c      	ldr	r2, [pc, #368]	; (8009f50 <HAL_I2C_Master_Receive+0x228>)
 8009dde:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009de0:	8979      	ldrh	r1, [r7, #10]
 8009de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009de6:	68f8      	ldr	r0, [r7, #12]
 8009de8:	f000 fa6c 	bl	800a2c4 <I2C_MasterRequestRead>
 8009dec:	4603      	mov	r3, r0
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d001      	beq.n	8009df6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	e1c4      	b.n	800a180 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d113      	bne.n	8009e26 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009dfe:	2300      	movs	r3, #0
 8009e00:	623b      	str	r3, [r7, #32]
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	695b      	ldr	r3, [r3, #20]
 8009e08:	623b      	str	r3, [r7, #32]
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	699b      	ldr	r3, [r3, #24]
 8009e10:	623b      	str	r3, [r7, #32]
 8009e12:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e22:	601a      	str	r2, [r3, #0]
 8009e24:	e198      	b.n	800a158 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e2a:	2b01      	cmp	r3, #1
 8009e2c:	d11b      	bne.n	8009e66 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e3e:	2300      	movs	r3, #0
 8009e40:	61fb      	str	r3, [r7, #28]
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	695b      	ldr	r3, [r3, #20]
 8009e48:	61fb      	str	r3, [r7, #28]
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	699b      	ldr	r3, [r3, #24]
 8009e50:	61fb      	str	r3, [r7, #28]
 8009e52:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e62:	601a      	str	r2, [r3, #0]
 8009e64:	e178      	b.n	800a158 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e6a:	2b02      	cmp	r3, #2
 8009e6c:	d11b      	bne.n	8009ea6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e7c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	681a      	ldr	r2, [r3, #0]
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e8e:	2300      	movs	r3, #0
 8009e90:	61bb      	str	r3, [r7, #24]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	695b      	ldr	r3, [r3, #20]
 8009e98:	61bb      	str	r3, [r7, #24]
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	699b      	ldr	r3, [r3, #24]
 8009ea0:	61bb      	str	r3, [r7, #24]
 8009ea2:	69bb      	ldr	r3, [r7, #24]
 8009ea4:	e158      	b.n	800a158 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009eb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	617b      	str	r3, [r7, #20]
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	695b      	ldr	r3, [r3, #20]
 8009ec0:	617b      	str	r3, [r7, #20]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	699b      	ldr	r3, [r3, #24]
 8009ec8:	617b      	str	r3, [r7, #20]
 8009eca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009ecc:	e144      	b.n	800a158 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ed2:	2b03      	cmp	r3, #3
 8009ed4:	f200 80f1 	bhi.w	800a0ba <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d123      	bne.n	8009f28 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ee2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009ee4:	68f8      	ldr	r0, [r7, #12]
 8009ee6:	f000 fc65 	bl	800a7b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009eea:	4603      	mov	r3, r0
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d001      	beq.n	8009ef4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	e145      	b.n	800a180 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	691a      	ldr	r2, [r3, #16]
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009efe:	b2d2      	uxtb	r2, r2
 8009f00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f06:	1c5a      	adds	r2, r3, #1
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f10:	3b01      	subs	r3, #1
 8009f12:	b29a      	uxth	r2, r3
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f1c:	b29b      	uxth	r3, r3
 8009f1e:	3b01      	subs	r3, #1
 8009f20:	b29a      	uxth	r2, r3
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009f26:	e117      	b.n	800a158 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f2c:	2b02      	cmp	r3, #2
 8009f2e:	d14e      	bne.n	8009fce <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f32:	9300      	str	r3, [sp, #0]
 8009f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f36:	2200      	movs	r2, #0
 8009f38:	4906      	ldr	r1, [pc, #24]	; (8009f54 <HAL_I2C_Master_Receive+0x22c>)
 8009f3a:	68f8      	ldr	r0, [r7, #12]
 8009f3c:	f000 fa90 	bl	800a460 <I2C_WaitOnFlagUntilTimeout>
 8009f40:	4603      	mov	r3, r0
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d008      	beq.n	8009f58 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8009f46:	2301      	movs	r3, #1
 8009f48:	e11a      	b.n	800a180 <HAL_I2C_Master_Receive+0x458>
 8009f4a:	bf00      	nop
 8009f4c:	00100002 	.word	0x00100002
 8009f50:	ffff0000 	.word	0xffff0000
 8009f54:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	681a      	ldr	r2, [r3, #0]
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	691a      	ldr	r2, [r3, #16]
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f72:	b2d2      	uxtb	r2, r2
 8009f74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f7a:	1c5a      	adds	r2, r3, #1
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f84:	3b01      	subs	r3, #1
 8009f86:	b29a      	uxth	r2, r3
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f90:	b29b      	uxth	r3, r3
 8009f92:	3b01      	subs	r3, #1
 8009f94:	b29a      	uxth	r2, r3
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	691a      	ldr	r2, [r3, #16]
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa4:	b2d2      	uxtb	r2, r2
 8009fa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fac:	1c5a      	adds	r2, r3, #1
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fb6:	3b01      	subs	r3, #1
 8009fb8:	b29a      	uxth	r2, r3
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	3b01      	subs	r3, #1
 8009fc6:	b29a      	uxth	r2, r3
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009fcc:	e0c4      	b.n	800a158 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd0:	9300      	str	r3, [sp, #0]
 8009fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	496c      	ldr	r1, [pc, #432]	; (800a188 <HAL_I2C_Master_Receive+0x460>)
 8009fd8:	68f8      	ldr	r0, [r7, #12]
 8009fda:	f000 fa41 	bl	800a460 <I2C_WaitOnFlagUntilTimeout>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d001      	beq.n	8009fe8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	e0cb      	b.n	800a180 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	681a      	ldr	r2, [r3, #0]
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ff6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	691a      	ldr	r2, [r3, #16]
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a002:	b2d2      	uxtb	r2, r2
 800a004:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a00a:	1c5a      	adds	r2, r3, #1
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a014:	3b01      	subs	r3, #1
 800a016:	b29a      	uxth	r2, r3
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a020:	b29b      	uxth	r3, r3
 800a022:	3b01      	subs	r3, #1
 800a024:	b29a      	uxth	r2, r3
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02c:	9300      	str	r3, [sp, #0]
 800a02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a030:	2200      	movs	r2, #0
 800a032:	4955      	ldr	r1, [pc, #340]	; (800a188 <HAL_I2C_Master_Receive+0x460>)
 800a034:	68f8      	ldr	r0, [r7, #12]
 800a036:	f000 fa13 	bl	800a460 <I2C_WaitOnFlagUntilTimeout>
 800a03a:	4603      	mov	r3, r0
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d001      	beq.n	800a044 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800a040:	2301      	movs	r3, #1
 800a042:	e09d      	b.n	800a180 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a052:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	691a      	ldr	r2, [r3, #16]
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a05e:	b2d2      	uxtb	r2, r2
 800a060:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a066:	1c5a      	adds	r2, r3, #1
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a070:	3b01      	subs	r3, #1
 800a072:	b29a      	uxth	r2, r3
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a07c:	b29b      	uxth	r3, r3
 800a07e:	3b01      	subs	r3, #1
 800a080:	b29a      	uxth	r2, r3
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	691a      	ldr	r2, [r3, #16]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a090:	b2d2      	uxtb	r2, r2
 800a092:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a098:	1c5a      	adds	r2, r3, #1
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0a2:	3b01      	subs	r3, #1
 800a0a4:	b29a      	uxth	r2, r3
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0ae:	b29b      	uxth	r3, r3
 800a0b0:	3b01      	subs	r3, #1
 800a0b2:	b29a      	uxth	r2, r3
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a0b8:	e04e      	b.n	800a158 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a0ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a0be:	68f8      	ldr	r0, [r7, #12]
 800a0c0:	f000 fb78 	bl	800a7b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d001      	beq.n	800a0ce <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	e058      	b.n	800a180 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	691a      	ldr	r2, [r3, #16]
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d8:	b2d2      	uxtb	r2, r2
 800a0da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e0:	1c5a      	adds	r2, r3, #1
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0ea:	3b01      	subs	r3, #1
 800a0ec:	b29a      	uxth	r2, r3
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0f6:	b29b      	uxth	r3, r3
 800a0f8:	3b01      	subs	r3, #1
 800a0fa:	b29a      	uxth	r2, r3
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	695b      	ldr	r3, [r3, #20]
 800a106:	f003 0304 	and.w	r3, r3, #4
 800a10a:	2b04      	cmp	r3, #4
 800a10c:	d124      	bne.n	800a158 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a112:	2b03      	cmp	r3, #3
 800a114:	d107      	bne.n	800a126 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	681a      	ldr	r2, [r3, #0]
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a124:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	691a      	ldr	r2, [r3, #16]
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a130:	b2d2      	uxtb	r2, r2
 800a132:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a138:	1c5a      	adds	r2, r3, #1
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a142:	3b01      	subs	r3, #1
 800a144:	b29a      	uxth	r2, r3
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a14e:	b29b      	uxth	r3, r3
 800a150:	3b01      	subs	r3, #1
 800a152:	b29a      	uxth	r2, r3
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	f47f aeb6 	bne.w	8009ece <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2220      	movs	r2, #32
 800a166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2200      	movs	r2, #0
 800a16e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2200      	movs	r2, #0
 800a176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a17a:	2300      	movs	r3, #0
 800a17c:	e000      	b.n	800a180 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800a17e:	2302      	movs	r3, #2
  }
}
 800a180:	4618      	mov	r0, r3
 800a182:	3728      	adds	r7, #40	; 0x28
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}
 800a188:	00010004 	.word	0x00010004

0800a18c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b083      	sub	sp, #12
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a19a:	b2db      	uxtb	r3, r3
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	370c      	adds	r7, #12
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr

0800a1a8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	370c      	adds	r7, #12
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr

0800a1c0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b088      	sub	sp, #32
 800a1c4:	af02      	add	r7, sp, #8
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	607a      	str	r2, [r7, #4]
 800a1ca:	603b      	str	r3, [r7, #0]
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1d4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	2b08      	cmp	r3, #8
 800a1da:	d006      	beq.n	800a1ea <I2C_MasterRequestWrite+0x2a>
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	2b01      	cmp	r3, #1
 800a1e0:	d003      	beq.n	800a1ea <I2C_MasterRequestWrite+0x2a>
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a1e8:	d108      	bne.n	800a1fc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	681a      	ldr	r2, [r3, #0]
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a1f8:	601a      	str	r2, [r3, #0]
 800a1fa:	e00b      	b.n	800a214 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a200:	2b12      	cmp	r3, #18
 800a202:	d107      	bne.n	800a214 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	681a      	ldr	r2, [r3, #0]
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a212:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	9300      	str	r3, [sp, #0]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2200      	movs	r2, #0
 800a21c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a220:	68f8      	ldr	r0, [r7, #12]
 800a222:	f000 f91d 	bl	800a460 <I2C_WaitOnFlagUntilTimeout>
 800a226:	4603      	mov	r3, r0
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d00d      	beq.n	800a248 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a23a:	d103      	bne.n	800a244 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a242:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a244:	2303      	movs	r3, #3
 800a246:	e035      	b.n	800a2b4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	691b      	ldr	r3, [r3, #16]
 800a24c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a250:	d108      	bne.n	800a264 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a252:	897b      	ldrh	r3, [r7, #10]
 800a254:	b2db      	uxtb	r3, r3
 800a256:	461a      	mov	r2, r3
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a260:	611a      	str	r2, [r3, #16]
 800a262:	e01b      	b.n	800a29c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a264:	897b      	ldrh	r3, [r7, #10]
 800a266:	11db      	asrs	r3, r3, #7
 800a268:	b2db      	uxtb	r3, r3
 800a26a:	f003 0306 	and.w	r3, r3, #6
 800a26e:	b2db      	uxtb	r3, r3
 800a270:	f063 030f 	orn	r3, r3, #15
 800a274:	b2da      	uxtb	r2, r3
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	687a      	ldr	r2, [r7, #4]
 800a280:	490e      	ldr	r1, [pc, #56]	; (800a2bc <I2C_MasterRequestWrite+0xfc>)
 800a282:	68f8      	ldr	r0, [r7, #12]
 800a284:	f000 f966 	bl	800a554 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a288:	4603      	mov	r3, r0
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d001      	beq.n	800a292 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a28e:	2301      	movs	r3, #1
 800a290:	e010      	b.n	800a2b4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a292:	897b      	ldrh	r3, [r7, #10]
 800a294:	b2da      	uxtb	r2, r3
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	687a      	ldr	r2, [r7, #4]
 800a2a0:	4907      	ldr	r1, [pc, #28]	; (800a2c0 <I2C_MasterRequestWrite+0x100>)
 800a2a2:	68f8      	ldr	r0, [r7, #12]
 800a2a4:	f000 f956 	bl	800a554 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d001      	beq.n	800a2b2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e000      	b.n	800a2b4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a2b2:	2300      	movs	r3, #0
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3718      	adds	r7, #24
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}
 800a2bc:	00010008 	.word	0x00010008
 800a2c0:	00010002 	.word	0x00010002

0800a2c4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b088      	sub	sp, #32
 800a2c8:	af02      	add	r7, sp, #8
 800a2ca:	60f8      	str	r0, [r7, #12]
 800a2cc:	607a      	str	r2, [r7, #4]
 800a2ce:	603b      	str	r3, [r7, #0]
 800a2d0:	460b      	mov	r3, r1
 800a2d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	681a      	ldr	r2, [r3, #0]
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a2e8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	2b08      	cmp	r3, #8
 800a2ee:	d006      	beq.n	800a2fe <I2C_MasterRequestRead+0x3a>
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	d003      	beq.n	800a2fe <I2C_MasterRequestRead+0x3a>
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a2fc:	d108      	bne.n	800a310 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	681a      	ldr	r2, [r3, #0]
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a30c:	601a      	str	r2, [r3, #0]
 800a30e:	e00b      	b.n	800a328 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a314:	2b11      	cmp	r3, #17
 800a316:	d107      	bne.n	800a328 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	681a      	ldr	r2, [r3, #0]
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a326:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	9300      	str	r3, [sp, #0]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2200      	movs	r2, #0
 800a330:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a334:	68f8      	ldr	r0, [r7, #12]
 800a336:	f000 f893 	bl	800a460 <I2C_WaitOnFlagUntilTimeout>
 800a33a:	4603      	mov	r3, r0
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d00d      	beq.n	800a35c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a34a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a34e:	d103      	bne.n	800a358 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a356:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a358:	2303      	movs	r3, #3
 800a35a:	e079      	b.n	800a450 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	691b      	ldr	r3, [r3, #16]
 800a360:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a364:	d108      	bne.n	800a378 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a366:	897b      	ldrh	r3, [r7, #10]
 800a368:	b2db      	uxtb	r3, r3
 800a36a:	f043 0301 	orr.w	r3, r3, #1
 800a36e:	b2da      	uxtb	r2, r3
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	611a      	str	r2, [r3, #16]
 800a376:	e05f      	b.n	800a438 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a378:	897b      	ldrh	r3, [r7, #10]
 800a37a:	11db      	asrs	r3, r3, #7
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	f003 0306 	and.w	r3, r3, #6
 800a382:	b2db      	uxtb	r3, r3
 800a384:	f063 030f 	orn	r3, r3, #15
 800a388:	b2da      	uxtb	r2, r3
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	687a      	ldr	r2, [r7, #4]
 800a394:	4930      	ldr	r1, [pc, #192]	; (800a458 <I2C_MasterRequestRead+0x194>)
 800a396:	68f8      	ldr	r0, [r7, #12]
 800a398:	f000 f8dc 	bl	800a554 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a39c:	4603      	mov	r3, r0
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d001      	beq.n	800a3a6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	e054      	b.n	800a450 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a3a6:	897b      	ldrh	r3, [r7, #10]
 800a3a8:	b2da      	uxtb	r2, r3
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	687a      	ldr	r2, [r7, #4]
 800a3b4:	4929      	ldr	r1, [pc, #164]	; (800a45c <I2C_MasterRequestRead+0x198>)
 800a3b6:	68f8      	ldr	r0, [r7, #12]
 800a3b8:	f000 f8cc 	bl	800a554 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d001      	beq.n	800a3c6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e044      	b.n	800a450 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	613b      	str	r3, [r7, #16]
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	695b      	ldr	r3, [r3, #20]
 800a3d0:	613b      	str	r3, [r7, #16]
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	699b      	ldr	r3, [r3, #24]
 800a3d8:	613b      	str	r3, [r7, #16]
 800a3da:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	681a      	ldr	r2, [r3, #0]
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a3ea:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	9300      	str	r3, [sp, #0]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a3f8:	68f8      	ldr	r0, [r7, #12]
 800a3fa:	f000 f831 	bl	800a460 <I2C_WaitOnFlagUntilTimeout>
 800a3fe:	4603      	mov	r3, r0
 800a400:	2b00      	cmp	r3, #0
 800a402:	d00d      	beq.n	800a420 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a40e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a412:	d103      	bne.n	800a41c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a41a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800a41c:	2303      	movs	r3, #3
 800a41e:	e017      	b.n	800a450 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800a420:	897b      	ldrh	r3, [r7, #10]
 800a422:	11db      	asrs	r3, r3, #7
 800a424:	b2db      	uxtb	r3, r3
 800a426:	f003 0306 	and.w	r3, r3, #6
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	f063 030e 	orn	r3, r3, #14
 800a430:	b2da      	uxtb	r2, r3
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	687a      	ldr	r2, [r7, #4]
 800a43c:	4907      	ldr	r1, [pc, #28]	; (800a45c <I2C_MasterRequestRead+0x198>)
 800a43e:	68f8      	ldr	r0, [r7, #12]
 800a440:	f000 f888 	bl	800a554 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a444:	4603      	mov	r3, r0
 800a446:	2b00      	cmp	r3, #0
 800a448:	d001      	beq.n	800a44e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800a44a:	2301      	movs	r3, #1
 800a44c:	e000      	b.n	800a450 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800a44e:	2300      	movs	r3, #0
}
 800a450:	4618      	mov	r0, r3
 800a452:	3718      	adds	r7, #24
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}
 800a458:	00010008 	.word	0x00010008
 800a45c:	00010002 	.word	0x00010002

0800a460 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b084      	sub	sp, #16
 800a464:	af00      	add	r7, sp, #0
 800a466:	60f8      	str	r0, [r7, #12]
 800a468:	60b9      	str	r1, [r7, #8]
 800a46a:	603b      	str	r3, [r7, #0]
 800a46c:	4613      	mov	r3, r2
 800a46e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a470:	e048      	b.n	800a504 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a478:	d044      	beq.n	800a504 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a47a:	f7fe fb09 	bl	8008a90 <HAL_GetTick>
 800a47e:	4602      	mov	r2, r0
 800a480:	69bb      	ldr	r3, [r7, #24]
 800a482:	1ad3      	subs	r3, r2, r3
 800a484:	683a      	ldr	r2, [r7, #0]
 800a486:	429a      	cmp	r2, r3
 800a488:	d302      	bcc.n	800a490 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d139      	bne.n	800a504 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	0c1b      	lsrs	r3, r3, #16
 800a494:	b2db      	uxtb	r3, r3
 800a496:	2b01      	cmp	r3, #1
 800a498:	d10d      	bne.n	800a4b6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	695b      	ldr	r3, [r3, #20]
 800a4a0:	43da      	mvns	r2, r3
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	4013      	ands	r3, r2
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	bf0c      	ite	eq
 800a4ac:	2301      	moveq	r3, #1
 800a4ae:	2300      	movne	r3, #0
 800a4b0:	b2db      	uxtb	r3, r3
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	e00c      	b.n	800a4d0 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	699b      	ldr	r3, [r3, #24]
 800a4bc:	43da      	mvns	r2, r3
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	4013      	ands	r3, r2
 800a4c2:	b29b      	uxth	r3, r3
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	bf0c      	ite	eq
 800a4c8:	2301      	moveq	r3, #1
 800a4ca:	2300      	movne	r3, #0
 800a4cc:	b2db      	uxtb	r3, r3
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	79fb      	ldrb	r3, [r7, #7]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d116      	bne.n	800a504 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2220      	movs	r2, #32
 800a4e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4f0:	f043 0220 	orr.w	r2, r3, #32
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a500:	2301      	movs	r3, #1
 800a502:	e023      	b.n	800a54c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	0c1b      	lsrs	r3, r3, #16
 800a508:	b2db      	uxtb	r3, r3
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	d10d      	bne.n	800a52a <I2C_WaitOnFlagUntilTimeout+0xca>
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	695b      	ldr	r3, [r3, #20]
 800a514:	43da      	mvns	r2, r3
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	4013      	ands	r3, r2
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	bf0c      	ite	eq
 800a520:	2301      	moveq	r3, #1
 800a522:	2300      	movne	r3, #0
 800a524:	b2db      	uxtb	r3, r3
 800a526:	461a      	mov	r2, r3
 800a528:	e00c      	b.n	800a544 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	699b      	ldr	r3, [r3, #24]
 800a530:	43da      	mvns	r2, r3
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	4013      	ands	r3, r2
 800a536:	b29b      	uxth	r3, r3
 800a538:	2b00      	cmp	r3, #0
 800a53a:	bf0c      	ite	eq
 800a53c:	2301      	moveq	r3, #1
 800a53e:	2300      	movne	r3, #0
 800a540:	b2db      	uxtb	r3, r3
 800a542:	461a      	mov	r2, r3
 800a544:	79fb      	ldrb	r3, [r7, #7]
 800a546:	429a      	cmp	r2, r3
 800a548:	d093      	beq.n	800a472 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a54a:	2300      	movs	r3, #0
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3710      	adds	r7, #16
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	60f8      	str	r0, [r7, #12]
 800a55c:	60b9      	str	r1, [r7, #8]
 800a55e:	607a      	str	r2, [r7, #4]
 800a560:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a562:	e071      	b.n	800a648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	695b      	ldr	r3, [r3, #20]
 800a56a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a56e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a572:	d123      	bne.n	800a5bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	681a      	ldr	r2, [r3, #0]
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a582:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a58c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2200      	movs	r2, #0
 800a592:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2220      	movs	r2, #32
 800a598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5a8:	f043 0204 	orr.w	r2, r3, #4
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	e067      	b.n	800a68c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5c2:	d041      	beq.n	800a648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5c4:	f7fe fa64 	bl	8008a90 <HAL_GetTick>
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	1ad3      	subs	r3, r2, r3
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d302      	bcc.n	800a5da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d136      	bne.n	800a648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	0c1b      	lsrs	r3, r3, #16
 800a5de:	b2db      	uxtb	r3, r3
 800a5e0:	2b01      	cmp	r3, #1
 800a5e2:	d10c      	bne.n	800a5fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	695b      	ldr	r3, [r3, #20]
 800a5ea:	43da      	mvns	r2, r3
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	4013      	ands	r3, r2
 800a5f0:	b29b      	uxth	r3, r3
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	bf14      	ite	ne
 800a5f6:	2301      	movne	r3, #1
 800a5f8:	2300      	moveq	r3, #0
 800a5fa:	b2db      	uxtb	r3, r3
 800a5fc:	e00b      	b.n	800a616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	699b      	ldr	r3, [r3, #24]
 800a604:	43da      	mvns	r2, r3
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	4013      	ands	r3, r2
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	bf14      	ite	ne
 800a610:	2301      	movne	r3, #1
 800a612:	2300      	moveq	r3, #0
 800a614:	b2db      	uxtb	r3, r3
 800a616:	2b00      	cmp	r3, #0
 800a618:	d016      	beq.n	800a648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2200      	movs	r2, #0
 800a61e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2220      	movs	r2, #32
 800a624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2200      	movs	r2, #0
 800a62c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a634:	f043 0220 	orr.w	r2, r3, #32
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2200      	movs	r2, #0
 800a640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a644:	2301      	movs	r3, #1
 800a646:	e021      	b.n	800a68c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	0c1b      	lsrs	r3, r3, #16
 800a64c:	b2db      	uxtb	r3, r3
 800a64e:	2b01      	cmp	r3, #1
 800a650:	d10c      	bne.n	800a66c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	695b      	ldr	r3, [r3, #20]
 800a658:	43da      	mvns	r2, r3
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	4013      	ands	r3, r2
 800a65e:	b29b      	uxth	r3, r3
 800a660:	2b00      	cmp	r3, #0
 800a662:	bf14      	ite	ne
 800a664:	2301      	movne	r3, #1
 800a666:	2300      	moveq	r3, #0
 800a668:	b2db      	uxtb	r3, r3
 800a66a:	e00b      	b.n	800a684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	699b      	ldr	r3, [r3, #24]
 800a672:	43da      	mvns	r2, r3
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	4013      	ands	r3, r2
 800a678:	b29b      	uxth	r3, r3
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	bf14      	ite	ne
 800a67e:	2301      	movne	r3, #1
 800a680:	2300      	moveq	r3, #0
 800a682:	b2db      	uxtb	r3, r3
 800a684:	2b00      	cmp	r3, #0
 800a686:	f47f af6d 	bne.w	800a564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a68a:	2300      	movs	r3, #0
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3710      	adds	r7, #16
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b084      	sub	sp, #16
 800a698:	af00      	add	r7, sp, #0
 800a69a:	60f8      	str	r0, [r7, #12]
 800a69c:	60b9      	str	r1, [r7, #8]
 800a69e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a6a0:	e034      	b.n	800a70c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a6a2:	68f8      	ldr	r0, [r7, #12]
 800a6a4:	f000 f8e3 	bl	800a86e <I2C_IsAcknowledgeFailed>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d001      	beq.n	800a6b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	e034      	b.n	800a71c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6b8:	d028      	beq.n	800a70c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6ba:	f7fe f9e9 	bl	8008a90 <HAL_GetTick>
 800a6be:	4602      	mov	r2, r0
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	1ad3      	subs	r3, r2, r3
 800a6c4:	68ba      	ldr	r2, [r7, #8]
 800a6c6:	429a      	cmp	r2, r3
 800a6c8:	d302      	bcc.n	800a6d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d11d      	bne.n	800a70c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	695b      	ldr	r3, [r3, #20]
 800a6d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6da:	2b80      	cmp	r3, #128	; 0x80
 800a6dc:	d016      	beq.n	800a70c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2220      	movs	r2, #32
 800a6e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f8:	f043 0220 	orr.w	r2, r3, #32
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2200      	movs	r2, #0
 800a704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a708:	2301      	movs	r3, #1
 800a70a:	e007      	b.n	800a71c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	695b      	ldr	r3, [r3, #20]
 800a712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a716:	2b80      	cmp	r3, #128	; 0x80
 800a718:	d1c3      	bne.n	800a6a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a71a:	2300      	movs	r3, #0
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3710      	adds	r7, #16
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	60f8      	str	r0, [r7, #12]
 800a72c:	60b9      	str	r1, [r7, #8]
 800a72e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a730:	e034      	b.n	800a79c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a732:	68f8      	ldr	r0, [r7, #12]
 800a734:	f000 f89b 	bl	800a86e <I2C_IsAcknowledgeFailed>
 800a738:	4603      	mov	r3, r0
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d001      	beq.n	800a742 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a73e:	2301      	movs	r3, #1
 800a740:	e034      	b.n	800a7ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a748:	d028      	beq.n	800a79c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a74a:	f7fe f9a1 	bl	8008a90 <HAL_GetTick>
 800a74e:	4602      	mov	r2, r0
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	1ad3      	subs	r3, r2, r3
 800a754:	68ba      	ldr	r2, [r7, #8]
 800a756:	429a      	cmp	r2, r3
 800a758:	d302      	bcc.n	800a760 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d11d      	bne.n	800a79c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	695b      	ldr	r3, [r3, #20]
 800a766:	f003 0304 	and.w	r3, r3, #4
 800a76a:	2b04      	cmp	r3, #4
 800a76c:	d016      	beq.n	800a79c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	2200      	movs	r2, #0
 800a772:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2220      	movs	r2, #32
 800a778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	2200      	movs	r2, #0
 800a780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a788:	f043 0220 	orr.w	r2, r3, #32
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2200      	movs	r2, #0
 800a794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a798:	2301      	movs	r3, #1
 800a79a:	e007      	b.n	800a7ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	695b      	ldr	r3, [r3, #20]
 800a7a2:	f003 0304 	and.w	r3, r3, #4
 800a7a6:	2b04      	cmp	r3, #4
 800a7a8:	d1c3      	bne.n	800a732 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a7aa:	2300      	movs	r3, #0
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3710      	adds	r7, #16
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	60b9      	str	r1, [r7, #8]
 800a7be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a7c0:	e049      	b.n	800a856 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	695b      	ldr	r3, [r3, #20]
 800a7c8:	f003 0310 	and.w	r3, r3, #16
 800a7cc:	2b10      	cmp	r3, #16
 800a7ce:	d119      	bne.n	800a804 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f06f 0210 	mvn.w	r2, #16
 800a7d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2220      	movs	r2, #32
 800a7e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a800:	2301      	movs	r3, #1
 800a802:	e030      	b.n	800a866 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a804:	f7fe f944 	bl	8008a90 <HAL_GetTick>
 800a808:	4602      	mov	r2, r0
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	1ad3      	subs	r3, r2, r3
 800a80e:	68ba      	ldr	r2, [r7, #8]
 800a810:	429a      	cmp	r2, r3
 800a812:	d302      	bcc.n	800a81a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d11d      	bne.n	800a856 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	695b      	ldr	r3, [r3, #20]
 800a820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a824:	2b40      	cmp	r3, #64	; 0x40
 800a826:	d016      	beq.n	800a856 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2200      	movs	r2, #0
 800a82c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2220      	movs	r2, #32
 800a832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2200      	movs	r2, #0
 800a83a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a842:	f043 0220 	orr.w	r2, r3, #32
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2200      	movs	r2, #0
 800a84e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a852:	2301      	movs	r3, #1
 800a854:	e007      	b.n	800a866 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	695b      	ldr	r3, [r3, #20]
 800a85c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a860:	2b40      	cmp	r3, #64	; 0x40
 800a862:	d1ae      	bne.n	800a7c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a864:	2300      	movs	r3, #0
}
 800a866:	4618      	mov	r0, r3
 800a868:	3710      	adds	r7, #16
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}

0800a86e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a86e:	b480      	push	{r7}
 800a870:	b083      	sub	sp, #12
 800a872:	af00      	add	r7, sp, #0
 800a874:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	695b      	ldr	r3, [r3, #20]
 800a87c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a880:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a884:	d11b      	bne.n	800a8be <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a88e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2200      	movs	r2, #0
 800a894:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2220      	movs	r2, #32
 800a89a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8aa:	f043 0204 	orr.w	r2, r3, #4
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	e000      	b.n	800a8c0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a8be:	2300      	movs	r3, #0
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	370c      	adds	r7, #12
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr

0800a8cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b083      	sub	sp, #12
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8dc:	b2db      	uxtb	r3, r3
 800a8de:	2b20      	cmp	r3, #32
 800a8e0:	d129      	bne.n	800a936 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2224      	movs	r2, #36	; 0x24
 800a8e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	681a      	ldr	r2, [r3, #0]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f022 0201 	bic.w	r2, r2, #1
 800a8f8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f022 0210 	bic.w	r2, r2, #16
 800a908:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	683a      	ldr	r2, [r7, #0]
 800a916:	430a      	orrs	r2, r1
 800a918:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	681a      	ldr	r2, [r3, #0]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f042 0201 	orr.w	r2, r2, #1
 800a928:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2220      	movs	r2, #32
 800a92e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a932:	2300      	movs	r3, #0
 800a934:	e000      	b.n	800a938 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800a936:	2302      	movs	r3, #2
  }
}
 800a938:	4618      	mov	r0, r3
 800a93a:	370c      	adds	r7, #12
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr

0800a944 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a944:	b480      	push	{r7}
 800a946:	b085      	sub	sp, #20
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800a94e:	2300      	movs	r3, #0
 800a950:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	2b20      	cmp	r3, #32
 800a95c:	d12a      	bne.n	800a9b4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2224      	movs	r2, #36	; 0x24
 800a962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	681a      	ldr	r2, [r3, #0]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f022 0201 	bic.w	r2, r2, #1
 800a974:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a97c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800a97e:	89fb      	ldrh	r3, [r7, #14]
 800a980:	f023 030f 	bic.w	r3, r3, #15
 800a984:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	b29a      	uxth	r2, r3
 800a98a:	89fb      	ldrh	r3, [r7, #14]
 800a98c:	4313      	orrs	r3, r2
 800a98e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	89fa      	ldrh	r2, [r7, #14]
 800a996:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	681a      	ldr	r2, [r3, #0]
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f042 0201 	orr.w	r2, r2, #1
 800a9a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2220      	movs	r2, #32
 800a9ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	e000      	b.n	800a9b6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800a9b4:	2302      	movs	r3, #2
  }
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3714      	adds	r7, #20
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr
	...

0800a9c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b086      	sub	sp, #24
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d101      	bne.n	800a9d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	e267      	b.n	800aea6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f003 0301 	and.w	r3, r3, #1
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d075      	beq.n	800aace <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a9e2:	4b88      	ldr	r3, [pc, #544]	; (800ac04 <HAL_RCC_OscConfig+0x240>)
 800a9e4:	689b      	ldr	r3, [r3, #8]
 800a9e6:	f003 030c 	and.w	r3, r3, #12
 800a9ea:	2b04      	cmp	r3, #4
 800a9ec:	d00c      	beq.n	800aa08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a9ee:	4b85      	ldr	r3, [pc, #532]	; (800ac04 <HAL_RCC_OscConfig+0x240>)
 800a9f0:	689b      	ldr	r3, [r3, #8]
 800a9f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a9f6:	2b08      	cmp	r3, #8
 800a9f8:	d112      	bne.n	800aa20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a9fa:	4b82      	ldr	r3, [pc, #520]	; (800ac04 <HAL_RCC_OscConfig+0x240>)
 800a9fc:	685b      	ldr	r3, [r3, #4]
 800a9fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa06:	d10b      	bne.n	800aa20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aa08:	4b7e      	ldr	r3, [pc, #504]	; (800ac04 <HAL_RCC_OscConfig+0x240>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d05b      	beq.n	800aacc <HAL_RCC_OscConfig+0x108>
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d157      	bne.n	800aacc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	e242      	b.n	800aea6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa28:	d106      	bne.n	800aa38 <HAL_RCC_OscConfig+0x74>
 800aa2a:	4b76      	ldr	r3, [pc, #472]	; (800ac04 <HAL_RCC_OscConfig+0x240>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	4a75      	ldr	r2, [pc, #468]	; (800ac04 <HAL_RCC_OscConfig+0x240>)
 800aa30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa34:	6013      	str	r3, [r2, #0]
 800aa36:	e01d      	b.n	800aa74 <HAL_RCC_OscConfig+0xb0>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	685b      	ldr	r3, [r3, #4]
 800aa3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aa40:	d10c      	bne.n	800aa5c <HAL_RCC_OscConfig+0x98>
 800aa42:	4b70      	ldr	r3, [pc, #448]	; (800ac04 <HAL_RCC_OscConfig+0x240>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4a6f      	ldr	r2, [pc, #444]	; (800ac04 <HAL_RCC_OscConfig+0x240>)
 800aa48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aa4c:	6013      	str	r3, [r2, #0]
 800aa4e:	4b6d      	ldr	r3, [pc, #436]	; (800ac04 <HAL_RCC_OscConfig+0x240>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	4a6c      	ldr	r2, [pc, #432]	; (800ac04 <HAL_RCC_OscConfig+0x240>)
 800aa54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa58:	6013      	str	r3, [r2, #0]
 800aa5a:	e00b      	b.n	800aa74 <HAL_RCC_OscConfig+0xb0>
 800aa5c:	4b69      	ldr	r3, [pc, #420]	; (800ac04 <HAL_RCC_OscConfig+0x240>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4a68      	ldr	r2, [pc, #416]	; (800ac04 <HAL_RCC_OscConfig+0x240>)
 800aa62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa66:	6013      	str	r3, [r2, #0]
 800aa68:	4b66      	ldr	r3, [pc, #408]	; (800ac04 <HAL_RCC_OscConfig+0x240>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4a65      	ldr	r2, [pc, #404]	; (800ac04 <HAL_RCC_OscConfig+0x240>)
 800aa6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aa72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d013      	beq.n	800aaa4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa7c:	f7fe f808 	bl	8008a90 <HAL_GetTick>
 800aa80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aa82:	e008      	b.n	800aa96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800aa84:	f7fe f804 	bl	8008a90 <HAL_GetTick>
 800aa88:	4602      	mov	r2, r0
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	1ad3      	subs	r3, r2, r3
 800aa8e:	2b64      	cmp	r3, #100	; 0x64
 800aa90:	d901      	bls.n	800aa96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800aa92:	2303      	movs	r3, #3
 800aa94:	e207      	b.n	800aea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aa96:	4b5b      	ldr	r3, [pc, #364]	; (800ac04 <HAL_RCC_OscConfig+0x240>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d0f0      	beq.n	800aa84 <HAL_RCC_OscConfig+0xc0>
 800aaa2:	e014      	b.n	800aace <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aaa4:	f7fd fff4 	bl	8008a90 <HAL_GetTick>
 800aaa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800aaaa:	e008      	b.n	800aabe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800aaac:	f7fd fff0 	bl	8008a90 <HAL_GetTick>
 800aab0:	4602      	mov	r2, r0
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	1ad3      	subs	r3, r2, r3
 800aab6:	2b64      	cmp	r3, #100	; 0x64
 800aab8:	d901      	bls.n	800aabe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800aaba:	2303      	movs	r3, #3
 800aabc:	e1f3      	b.n	800aea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800aabe:	4b51      	ldr	r3, [pc, #324]	; (800ac04 <HAL_RCC_OscConfig+0x240>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d1f0      	bne.n	800aaac <HAL_RCC_OscConfig+0xe8>
 800aaca:	e000      	b.n	800aace <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aacc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f003 0302 	and.w	r3, r3, #2
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d063      	beq.n	800aba2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800aada:	4b4a      	ldr	r3, [pc, #296]	; (800ac04 <HAL_RCC_OscConfig+0x240>)
 800aadc:	689b      	ldr	r3, [r3, #8]
 800aade:	f003 030c 	and.w	r3, r3, #12
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d00b      	beq.n	800aafe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800aae6:	4b47      	ldr	r3, [pc, #284]	; (800ac04 <HAL_RCC_OscConfig+0x240>)
 800aae8:	689b      	ldr	r3, [r3, #8]
 800aaea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800aaee:	2b08      	cmp	r3, #8
 800aaf0:	d11c      	bne.n	800ab2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800aaf2:	4b44      	ldr	r3, [pc, #272]	; (800ac04 <HAL_RCC_OscConfig+0x240>)
 800aaf4:	685b      	ldr	r3, [r3, #4]
 800aaf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d116      	bne.n	800ab2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aafe:	4b41      	ldr	r3, [pc, #260]	; (800ac04 <HAL_RCC_OscConfig+0x240>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f003 0302 	and.w	r3, r3, #2
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d005      	beq.n	800ab16 <HAL_RCC_OscConfig+0x152>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	68db      	ldr	r3, [r3, #12]
 800ab0e:	2b01      	cmp	r3, #1
 800ab10:	d001      	beq.n	800ab16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ab12:	2301      	movs	r3, #1
 800ab14:	e1c7      	b.n	800aea6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab16:	4b3b      	ldr	r3, [pc, #236]	; (800ac04 <HAL_RCC_OscConfig+0x240>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	691b      	ldr	r3, [r3, #16]
 800ab22:	00db      	lsls	r3, r3, #3
 800ab24:	4937      	ldr	r1, [pc, #220]	; (800ac04 <HAL_RCC_OscConfig+0x240>)
 800ab26:	4313      	orrs	r3, r2
 800ab28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ab2a:	e03a      	b.n	800aba2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	68db      	ldr	r3, [r3, #12]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d020      	beq.n	800ab76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ab34:	4b34      	ldr	r3, [pc, #208]	; (800ac08 <HAL_RCC_OscConfig+0x244>)
 800ab36:	2201      	movs	r2, #1
 800ab38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab3a:	f7fd ffa9 	bl	8008a90 <HAL_GetTick>
 800ab3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ab40:	e008      	b.n	800ab54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ab42:	f7fd ffa5 	bl	8008a90 <HAL_GetTick>
 800ab46:	4602      	mov	r2, r0
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	1ad3      	subs	r3, r2, r3
 800ab4c:	2b02      	cmp	r3, #2
 800ab4e:	d901      	bls.n	800ab54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800ab50:	2303      	movs	r3, #3
 800ab52:	e1a8      	b.n	800aea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ab54:	4b2b      	ldr	r3, [pc, #172]	; (800ac04 <HAL_RCC_OscConfig+0x240>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f003 0302 	and.w	r3, r3, #2
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d0f0      	beq.n	800ab42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab60:	4b28      	ldr	r3, [pc, #160]	; (800ac04 <HAL_RCC_OscConfig+0x240>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	691b      	ldr	r3, [r3, #16]
 800ab6c:	00db      	lsls	r3, r3, #3
 800ab6e:	4925      	ldr	r1, [pc, #148]	; (800ac04 <HAL_RCC_OscConfig+0x240>)
 800ab70:	4313      	orrs	r3, r2
 800ab72:	600b      	str	r3, [r1, #0]
 800ab74:	e015      	b.n	800aba2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ab76:	4b24      	ldr	r3, [pc, #144]	; (800ac08 <HAL_RCC_OscConfig+0x244>)
 800ab78:	2200      	movs	r2, #0
 800ab7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab7c:	f7fd ff88 	bl	8008a90 <HAL_GetTick>
 800ab80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ab82:	e008      	b.n	800ab96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ab84:	f7fd ff84 	bl	8008a90 <HAL_GetTick>
 800ab88:	4602      	mov	r2, r0
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	1ad3      	subs	r3, r2, r3
 800ab8e:	2b02      	cmp	r3, #2
 800ab90:	d901      	bls.n	800ab96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800ab92:	2303      	movs	r3, #3
 800ab94:	e187      	b.n	800aea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ab96:	4b1b      	ldr	r3, [pc, #108]	; (800ac04 <HAL_RCC_OscConfig+0x240>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f003 0302 	and.w	r3, r3, #2
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d1f0      	bne.n	800ab84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f003 0308 	and.w	r3, r3, #8
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d036      	beq.n	800ac1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	695b      	ldr	r3, [r3, #20]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d016      	beq.n	800abe4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800abb6:	4b15      	ldr	r3, [pc, #84]	; (800ac0c <HAL_RCC_OscConfig+0x248>)
 800abb8:	2201      	movs	r2, #1
 800abba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800abbc:	f7fd ff68 	bl	8008a90 <HAL_GetTick>
 800abc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800abc2:	e008      	b.n	800abd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800abc4:	f7fd ff64 	bl	8008a90 <HAL_GetTick>
 800abc8:	4602      	mov	r2, r0
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	1ad3      	subs	r3, r2, r3
 800abce:	2b02      	cmp	r3, #2
 800abd0:	d901      	bls.n	800abd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800abd2:	2303      	movs	r3, #3
 800abd4:	e167      	b.n	800aea6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800abd6:	4b0b      	ldr	r3, [pc, #44]	; (800ac04 <HAL_RCC_OscConfig+0x240>)
 800abd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abda:	f003 0302 	and.w	r3, r3, #2
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d0f0      	beq.n	800abc4 <HAL_RCC_OscConfig+0x200>
 800abe2:	e01b      	b.n	800ac1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800abe4:	4b09      	ldr	r3, [pc, #36]	; (800ac0c <HAL_RCC_OscConfig+0x248>)
 800abe6:	2200      	movs	r2, #0
 800abe8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800abea:	f7fd ff51 	bl	8008a90 <HAL_GetTick>
 800abee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800abf0:	e00e      	b.n	800ac10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800abf2:	f7fd ff4d 	bl	8008a90 <HAL_GetTick>
 800abf6:	4602      	mov	r2, r0
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	1ad3      	subs	r3, r2, r3
 800abfc:	2b02      	cmp	r3, #2
 800abfe:	d907      	bls.n	800ac10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ac00:	2303      	movs	r3, #3
 800ac02:	e150      	b.n	800aea6 <HAL_RCC_OscConfig+0x4e2>
 800ac04:	40023800 	.word	0x40023800
 800ac08:	42470000 	.word	0x42470000
 800ac0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ac10:	4b88      	ldr	r3, [pc, #544]	; (800ae34 <HAL_RCC_OscConfig+0x470>)
 800ac12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac14:	f003 0302 	and.w	r3, r3, #2
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d1ea      	bne.n	800abf2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f003 0304 	and.w	r3, r3, #4
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	f000 8097 	beq.w	800ad58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ac2e:	4b81      	ldr	r3, [pc, #516]	; (800ae34 <HAL_RCC_OscConfig+0x470>)
 800ac30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d10f      	bne.n	800ac5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	60bb      	str	r3, [r7, #8]
 800ac3e:	4b7d      	ldr	r3, [pc, #500]	; (800ae34 <HAL_RCC_OscConfig+0x470>)
 800ac40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac42:	4a7c      	ldr	r2, [pc, #496]	; (800ae34 <HAL_RCC_OscConfig+0x470>)
 800ac44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac48:	6413      	str	r3, [r2, #64]	; 0x40
 800ac4a:	4b7a      	ldr	r3, [pc, #488]	; (800ae34 <HAL_RCC_OscConfig+0x470>)
 800ac4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac52:	60bb      	str	r3, [r7, #8]
 800ac54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ac56:	2301      	movs	r3, #1
 800ac58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ac5a:	4b77      	ldr	r3, [pc, #476]	; (800ae38 <HAL_RCC_OscConfig+0x474>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d118      	bne.n	800ac98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ac66:	4b74      	ldr	r3, [pc, #464]	; (800ae38 <HAL_RCC_OscConfig+0x474>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4a73      	ldr	r2, [pc, #460]	; (800ae38 <HAL_RCC_OscConfig+0x474>)
 800ac6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ac72:	f7fd ff0d 	bl	8008a90 <HAL_GetTick>
 800ac76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ac78:	e008      	b.n	800ac8c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ac7a:	f7fd ff09 	bl	8008a90 <HAL_GetTick>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	1ad3      	subs	r3, r2, r3
 800ac84:	2b02      	cmp	r3, #2
 800ac86:	d901      	bls.n	800ac8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800ac88:	2303      	movs	r3, #3
 800ac8a:	e10c      	b.n	800aea6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ac8c:	4b6a      	ldr	r3, [pc, #424]	; (800ae38 <HAL_RCC_OscConfig+0x474>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d0f0      	beq.n	800ac7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	689b      	ldr	r3, [r3, #8]
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	d106      	bne.n	800acae <HAL_RCC_OscConfig+0x2ea>
 800aca0:	4b64      	ldr	r3, [pc, #400]	; (800ae34 <HAL_RCC_OscConfig+0x470>)
 800aca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aca4:	4a63      	ldr	r2, [pc, #396]	; (800ae34 <HAL_RCC_OscConfig+0x470>)
 800aca6:	f043 0301 	orr.w	r3, r3, #1
 800acaa:	6713      	str	r3, [r2, #112]	; 0x70
 800acac:	e01c      	b.n	800ace8 <HAL_RCC_OscConfig+0x324>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	689b      	ldr	r3, [r3, #8]
 800acb2:	2b05      	cmp	r3, #5
 800acb4:	d10c      	bne.n	800acd0 <HAL_RCC_OscConfig+0x30c>
 800acb6:	4b5f      	ldr	r3, [pc, #380]	; (800ae34 <HAL_RCC_OscConfig+0x470>)
 800acb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acba:	4a5e      	ldr	r2, [pc, #376]	; (800ae34 <HAL_RCC_OscConfig+0x470>)
 800acbc:	f043 0304 	orr.w	r3, r3, #4
 800acc0:	6713      	str	r3, [r2, #112]	; 0x70
 800acc2:	4b5c      	ldr	r3, [pc, #368]	; (800ae34 <HAL_RCC_OscConfig+0x470>)
 800acc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acc6:	4a5b      	ldr	r2, [pc, #364]	; (800ae34 <HAL_RCC_OscConfig+0x470>)
 800acc8:	f043 0301 	orr.w	r3, r3, #1
 800accc:	6713      	str	r3, [r2, #112]	; 0x70
 800acce:	e00b      	b.n	800ace8 <HAL_RCC_OscConfig+0x324>
 800acd0:	4b58      	ldr	r3, [pc, #352]	; (800ae34 <HAL_RCC_OscConfig+0x470>)
 800acd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acd4:	4a57      	ldr	r2, [pc, #348]	; (800ae34 <HAL_RCC_OscConfig+0x470>)
 800acd6:	f023 0301 	bic.w	r3, r3, #1
 800acda:	6713      	str	r3, [r2, #112]	; 0x70
 800acdc:	4b55      	ldr	r3, [pc, #340]	; (800ae34 <HAL_RCC_OscConfig+0x470>)
 800acde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ace0:	4a54      	ldr	r2, [pc, #336]	; (800ae34 <HAL_RCC_OscConfig+0x470>)
 800ace2:	f023 0304 	bic.w	r3, r3, #4
 800ace6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	689b      	ldr	r3, [r3, #8]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d015      	beq.n	800ad1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800acf0:	f7fd fece 	bl	8008a90 <HAL_GetTick>
 800acf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800acf6:	e00a      	b.n	800ad0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800acf8:	f7fd feca 	bl	8008a90 <HAL_GetTick>
 800acfc:	4602      	mov	r2, r0
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	1ad3      	subs	r3, r2, r3
 800ad02:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d901      	bls.n	800ad0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800ad0a:	2303      	movs	r3, #3
 800ad0c:	e0cb      	b.n	800aea6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ad0e:	4b49      	ldr	r3, [pc, #292]	; (800ae34 <HAL_RCC_OscConfig+0x470>)
 800ad10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad12:	f003 0302 	and.w	r3, r3, #2
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d0ee      	beq.n	800acf8 <HAL_RCC_OscConfig+0x334>
 800ad1a:	e014      	b.n	800ad46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ad1c:	f7fd feb8 	bl	8008a90 <HAL_GetTick>
 800ad20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ad22:	e00a      	b.n	800ad3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ad24:	f7fd feb4 	bl	8008a90 <HAL_GetTick>
 800ad28:	4602      	mov	r2, r0
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	1ad3      	subs	r3, r2, r3
 800ad2e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d901      	bls.n	800ad3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800ad36:	2303      	movs	r3, #3
 800ad38:	e0b5      	b.n	800aea6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ad3a:	4b3e      	ldr	r3, [pc, #248]	; (800ae34 <HAL_RCC_OscConfig+0x470>)
 800ad3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad3e:	f003 0302 	and.w	r3, r3, #2
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d1ee      	bne.n	800ad24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ad46:	7dfb      	ldrb	r3, [r7, #23]
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	d105      	bne.n	800ad58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ad4c:	4b39      	ldr	r3, [pc, #228]	; (800ae34 <HAL_RCC_OscConfig+0x470>)
 800ad4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad50:	4a38      	ldr	r2, [pc, #224]	; (800ae34 <HAL_RCC_OscConfig+0x470>)
 800ad52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ad56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	699b      	ldr	r3, [r3, #24]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	f000 80a1 	beq.w	800aea4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ad62:	4b34      	ldr	r3, [pc, #208]	; (800ae34 <HAL_RCC_OscConfig+0x470>)
 800ad64:	689b      	ldr	r3, [r3, #8]
 800ad66:	f003 030c 	and.w	r3, r3, #12
 800ad6a:	2b08      	cmp	r3, #8
 800ad6c:	d05c      	beq.n	800ae28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	699b      	ldr	r3, [r3, #24]
 800ad72:	2b02      	cmp	r3, #2
 800ad74:	d141      	bne.n	800adfa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ad76:	4b31      	ldr	r3, [pc, #196]	; (800ae3c <HAL_RCC_OscConfig+0x478>)
 800ad78:	2200      	movs	r2, #0
 800ad7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad7c:	f7fd fe88 	bl	8008a90 <HAL_GetTick>
 800ad80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ad82:	e008      	b.n	800ad96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ad84:	f7fd fe84 	bl	8008a90 <HAL_GetTick>
 800ad88:	4602      	mov	r2, r0
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	1ad3      	subs	r3, r2, r3
 800ad8e:	2b02      	cmp	r3, #2
 800ad90:	d901      	bls.n	800ad96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800ad92:	2303      	movs	r3, #3
 800ad94:	e087      	b.n	800aea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ad96:	4b27      	ldr	r3, [pc, #156]	; (800ae34 <HAL_RCC_OscConfig+0x470>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d1f0      	bne.n	800ad84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	69da      	ldr	r2, [r3, #28]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6a1b      	ldr	r3, [r3, #32]
 800adaa:	431a      	orrs	r2, r3
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb0:	019b      	lsls	r3, r3, #6
 800adb2:	431a      	orrs	r2, r3
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adb8:	085b      	lsrs	r3, r3, #1
 800adba:	3b01      	subs	r3, #1
 800adbc:	041b      	lsls	r3, r3, #16
 800adbe:	431a      	orrs	r2, r3
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc4:	061b      	lsls	r3, r3, #24
 800adc6:	491b      	ldr	r1, [pc, #108]	; (800ae34 <HAL_RCC_OscConfig+0x470>)
 800adc8:	4313      	orrs	r3, r2
 800adca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800adcc:	4b1b      	ldr	r3, [pc, #108]	; (800ae3c <HAL_RCC_OscConfig+0x478>)
 800adce:	2201      	movs	r2, #1
 800add0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800add2:	f7fd fe5d 	bl	8008a90 <HAL_GetTick>
 800add6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800add8:	e008      	b.n	800adec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800adda:	f7fd fe59 	bl	8008a90 <HAL_GetTick>
 800adde:	4602      	mov	r2, r0
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	1ad3      	subs	r3, r2, r3
 800ade4:	2b02      	cmp	r3, #2
 800ade6:	d901      	bls.n	800adec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ade8:	2303      	movs	r3, #3
 800adea:	e05c      	b.n	800aea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800adec:	4b11      	ldr	r3, [pc, #68]	; (800ae34 <HAL_RCC_OscConfig+0x470>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d0f0      	beq.n	800adda <HAL_RCC_OscConfig+0x416>
 800adf8:	e054      	b.n	800aea4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800adfa:	4b10      	ldr	r3, [pc, #64]	; (800ae3c <HAL_RCC_OscConfig+0x478>)
 800adfc:	2200      	movs	r2, #0
 800adfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae00:	f7fd fe46 	bl	8008a90 <HAL_GetTick>
 800ae04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ae06:	e008      	b.n	800ae1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ae08:	f7fd fe42 	bl	8008a90 <HAL_GetTick>
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	1ad3      	subs	r3, r2, r3
 800ae12:	2b02      	cmp	r3, #2
 800ae14:	d901      	bls.n	800ae1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800ae16:	2303      	movs	r3, #3
 800ae18:	e045      	b.n	800aea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ae1a:	4b06      	ldr	r3, [pc, #24]	; (800ae34 <HAL_RCC_OscConfig+0x470>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d1f0      	bne.n	800ae08 <HAL_RCC_OscConfig+0x444>
 800ae26:	e03d      	b.n	800aea4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	699b      	ldr	r3, [r3, #24]
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	d107      	bne.n	800ae40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800ae30:	2301      	movs	r3, #1
 800ae32:	e038      	b.n	800aea6 <HAL_RCC_OscConfig+0x4e2>
 800ae34:	40023800 	.word	0x40023800
 800ae38:	40007000 	.word	0x40007000
 800ae3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ae40:	4b1b      	ldr	r3, [pc, #108]	; (800aeb0 <HAL_RCC_OscConfig+0x4ec>)
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	699b      	ldr	r3, [r3, #24]
 800ae4a:	2b01      	cmp	r3, #1
 800ae4c:	d028      	beq.n	800aea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d121      	bne.n	800aea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae66:	429a      	cmp	r2, r3
 800ae68:	d11a      	bne.n	800aea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ae6a:	68fa      	ldr	r2, [r7, #12]
 800ae6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ae70:	4013      	ands	r3, r2
 800ae72:	687a      	ldr	r2, [r7, #4]
 800ae74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ae76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d111      	bne.n	800aea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae86:	085b      	lsrs	r3, r3, #1
 800ae88:	3b01      	subs	r3, #1
 800ae8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d107      	bne.n	800aea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	d001      	beq.n	800aea4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800aea0:	2301      	movs	r3, #1
 800aea2:	e000      	b.n	800aea6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800aea4:	2300      	movs	r3, #0
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3718      	adds	r7, #24
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}
 800aeae:	bf00      	nop
 800aeb0:	40023800 	.word	0x40023800

0800aeb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b084      	sub	sp, #16
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d101      	bne.n	800aec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aec4:	2301      	movs	r3, #1
 800aec6:	e0cc      	b.n	800b062 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800aec8:	4b68      	ldr	r3, [pc, #416]	; (800b06c <HAL_RCC_ClockConfig+0x1b8>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f003 030f 	and.w	r3, r3, #15
 800aed0:	683a      	ldr	r2, [r7, #0]
 800aed2:	429a      	cmp	r2, r3
 800aed4:	d90c      	bls.n	800aef0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aed6:	4b65      	ldr	r3, [pc, #404]	; (800b06c <HAL_RCC_ClockConfig+0x1b8>)
 800aed8:	683a      	ldr	r2, [r7, #0]
 800aeda:	b2d2      	uxtb	r2, r2
 800aedc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aede:	4b63      	ldr	r3, [pc, #396]	; (800b06c <HAL_RCC_ClockConfig+0x1b8>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f003 030f 	and.w	r3, r3, #15
 800aee6:	683a      	ldr	r2, [r7, #0]
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d001      	beq.n	800aef0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800aeec:	2301      	movs	r3, #1
 800aeee:	e0b8      	b.n	800b062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f003 0302 	and.w	r3, r3, #2
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d020      	beq.n	800af3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f003 0304 	and.w	r3, r3, #4
 800af04:	2b00      	cmp	r3, #0
 800af06:	d005      	beq.n	800af14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800af08:	4b59      	ldr	r3, [pc, #356]	; (800b070 <HAL_RCC_ClockConfig+0x1bc>)
 800af0a:	689b      	ldr	r3, [r3, #8]
 800af0c:	4a58      	ldr	r2, [pc, #352]	; (800b070 <HAL_RCC_ClockConfig+0x1bc>)
 800af0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800af12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f003 0308 	and.w	r3, r3, #8
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d005      	beq.n	800af2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800af20:	4b53      	ldr	r3, [pc, #332]	; (800b070 <HAL_RCC_ClockConfig+0x1bc>)
 800af22:	689b      	ldr	r3, [r3, #8]
 800af24:	4a52      	ldr	r2, [pc, #328]	; (800b070 <HAL_RCC_ClockConfig+0x1bc>)
 800af26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800af2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800af2c:	4b50      	ldr	r3, [pc, #320]	; (800b070 <HAL_RCC_ClockConfig+0x1bc>)
 800af2e:	689b      	ldr	r3, [r3, #8]
 800af30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	689b      	ldr	r3, [r3, #8]
 800af38:	494d      	ldr	r1, [pc, #308]	; (800b070 <HAL_RCC_ClockConfig+0x1bc>)
 800af3a:	4313      	orrs	r3, r2
 800af3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f003 0301 	and.w	r3, r3, #1
 800af46:	2b00      	cmp	r3, #0
 800af48:	d044      	beq.n	800afd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	2b01      	cmp	r3, #1
 800af50:	d107      	bne.n	800af62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800af52:	4b47      	ldr	r3, [pc, #284]	; (800b070 <HAL_RCC_ClockConfig+0x1bc>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d119      	bne.n	800af92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800af5e:	2301      	movs	r3, #1
 800af60:	e07f      	b.n	800b062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	685b      	ldr	r3, [r3, #4]
 800af66:	2b02      	cmp	r3, #2
 800af68:	d003      	beq.n	800af72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800af6e:	2b03      	cmp	r3, #3
 800af70:	d107      	bne.n	800af82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800af72:	4b3f      	ldr	r3, [pc, #252]	; (800b070 <HAL_RCC_ClockConfig+0x1bc>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d109      	bne.n	800af92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800af7e:	2301      	movs	r3, #1
 800af80:	e06f      	b.n	800b062 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800af82:	4b3b      	ldr	r3, [pc, #236]	; (800b070 <HAL_RCC_ClockConfig+0x1bc>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f003 0302 	and.w	r3, r3, #2
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d101      	bne.n	800af92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800af8e:	2301      	movs	r3, #1
 800af90:	e067      	b.n	800b062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800af92:	4b37      	ldr	r3, [pc, #220]	; (800b070 <HAL_RCC_ClockConfig+0x1bc>)
 800af94:	689b      	ldr	r3, [r3, #8]
 800af96:	f023 0203 	bic.w	r2, r3, #3
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	685b      	ldr	r3, [r3, #4]
 800af9e:	4934      	ldr	r1, [pc, #208]	; (800b070 <HAL_RCC_ClockConfig+0x1bc>)
 800afa0:	4313      	orrs	r3, r2
 800afa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800afa4:	f7fd fd74 	bl	8008a90 <HAL_GetTick>
 800afa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800afaa:	e00a      	b.n	800afc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800afac:	f7fd fd70 	bl	8008a90 <HAL_GetTick>
 800afb0:	4602      	mov	r2, r0
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	1ad3      	subs	r3, r2, r3
 800afb6:	f241 3288 	movw	r2, #5000	; 0x1388
 800afba:	4293      	cmp	r3, r2
 800afbc:	d901      	bls.n	800afc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800afbe:	2303      	movs	r3, #3
 800afc0:	e04f      	b.n	800b062 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800afc2:	4b2b      	ldr	r3, [pc, #172]	; (800b070 <HAL_RCC_ClockConfig+0x1bc>)
 800afc4:	689b      	ldr	r3, [r3, #8]
 800afc6:	f003 020c 	and.w	r2, r3, #12
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	685b      	ldr	r3, [r3, #4]
 800afce:	009b      	lsls	r3, r3, #2
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d1eb      	bne.n	800afac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800afd4:	4b25      	ldr	r3, [pc, #148]	; (800b06c <HAL_RCC_ClockConfig+0x1b8>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f003 030f 	and.w	r3, r3, #15
 800afdc:	683a      	ldr	r2, [r7, #0]
 800afde:	429a      	cmp	r2, r3
 800afe0:	d20c      	bcs.n	800affc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800afe2:	4b22      	ldr	r3, [pc, #136]	; (800b06c <HAL_RCC_ClockConfig+0x1b8>)
 800afe4:	683a      	ldr	r2, [r7, #0]
 800afe6:	b2d2      	uxtb	r2, r2
 800afe8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800afea:	4b20      	ldr	r3, [pc, #128]	; (800b06c <HAL_RCC_ClockConfig+0x1b8>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f003 030f 	and.w	r3, r3, #15
 800aff2:	683a      	ldr	r2, [r7, #0]
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d001      	beq.n	800affc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800aff8:	2301      	movs	r3, #1
 800affa:	e032      	b.n	800b062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f003 0304 	and.w	r3, r3, #4
 800b004:	2b00      	cmp	r3, #0
 800b006:	d008      	beq.n	800b01a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b008:	4b19      	ldr	r3, [pc, #100]	; (800b070 <HAL_RCC_ClockConfig+0x1bc>)
 800b00a:	689b      	ldr	r3, [r3, #8]
 800b00c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	68db      	ldr	r3, [r3, #12]
 800b014:	4916      	ldr	r1, [pc, #88]	; (800b070 <HAL_RCC_ClockConfig+0x1bc>)
 800b016:	4313      	orrs	r3, r2
 800b018:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f003 0308 	and.w	r3, r3, #8
 800b022:	2b00      	cmp	r3, #0
 800b024:	d009      	beq.n	800b03a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b026:	4b12      	ldr	r3, [pc, #72]	; (800b070 <HAL_RCC_ClockConfig+0x1bc>)
 800b028:	689b      	ldr	r3, [r3, #8]
 800b02a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	691b      	ldr	r3, [r3, #16]
 800b032:	00db      	lsls	r3, r3, #3
 800b034:	490e      	ldr	r1, [pc, #56]	; (800b070 <HAL_RCC_ClockConfig+0x1bc>)
 800b036:	4313      	orrs	r3, r2
 800b038:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b03a:	f000 f821 	bl	800b080 <HAL_RCC_GetSysClockFreq>
 800b03e:	4602      	mov	r2, r0
 800b040:	4b0b      	ldr	r3, [pc, #44]	; (800b070 <HAL_RCC_ClockConfig+0x1bc>)
 800b042:	689b      	ldr	r3, [r3, #8]
 800b044:	091b      	lsrs	r3, r3, #4
 800b046:	f003 030f 	and.w	r3, r3, #15
 800b04a:	490a      	ldr	r1, [pc, #40]	; (800b074 <HAL_RCC_ClockConfig+0x1c0>)
 800b04c:	5ccb      	ldrb	r3, [r1, r3]
 800b04e:	fa22 f303 	lsr.w	r3, r2, r3
 800b052:	4a09      	ldr	r2, [pc, #36]	; (800b078 <HAL_RCC_ClockConfig+0x1c4>)
 800b054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b056:	4b09      	ldr	r3, [pc, #36]	; (800b07c <HAL_RCC_ClockConfig+0x1c8>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	4618      	mov	r0, r3
 800b05c:	f7fd fabc 	bl	80085d8 <HAL_InitTick>

  return HAL_OK;
 800b060:	2300      	movs	r3, #0
}
 800b062:	4618      	mov	r0, r3
 800b064:	3710      	adds	r7, #16
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop
 800b06c:	40023c00 	.word	0x40023c00
 800b070:	40023800 	.word	0x40023800
 800b074:	080158c4 	.word	0x080158c4
 800b078:	2000000c 	.word	0x2000000c
 800b07c:	20000010 	.word	0x20000010

0800b080 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b080:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b084:	b090      	sub	sp, #64	; 0x40
 800b086:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b088:	2300      	movs	r3, #0
 800b08a:	637b      	str	r3, [r7, #52]	; 0x34
 800b08c:	2300      	movs	r3, #0
 800b08e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b090:	2300      	movs	r3, #0
 800b092:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800b094:	2300      	movs	r3, #0
 800b096:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b098:	4b59      	ldr	r3, [pc, #356]	; (800b200 <HAL_RCC_GetSysClockFreq+0x180>)
 800b09a:	689b      	ldr	r3, [r3, #8]
 800b09c:	f003 030c 	and.w	r3, r3, #12
 800b0a0:	2b08      	cmp	r3, #8
 800b0a2:	d00d      	beq.n	800b0c0 <HAL_RCC_GetSysClockFreq+0x40>
 800b0a4:	2b08      	cmp	r3, #8
 800b0a6:	f200 80a1 	bhi.w	800b1ec <HAL_RCC_GetSysClockFreq+0x16c>
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d002      	beq.n	800b0b4 <HAL_RCC_GetSysClockFreq+0x34>
 800b0ae:	2b04      	cmp	r3, #4
 800b0b0:	d003      	beq.n	800b0ba <HAL_RCC_GetSysClockFreq+0x3a>
 800b0b2:	e09b      	b.n	800b1ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b0b4:	4b53      	ldr	r3, [pc, #332]	; (800b204 <HAL_RCC_GetSysClockFreq+0x184>)
 800b0b6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800b0b8:	e09b      	b.n	800b1f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b0ba:	4b53      	ldr	r3, [pc, #332]	; (800b208 <HAL_RCC_GetSysClockFreq+0x188>)
 800b0bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800b0be:	e098      	b.n	800b1f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b0c0:	4b4f      	ldr	r3, [pc, #316]	; (800b200 <HAL_RCC_GetSysClockFreq+0x180>)
 800b0c2:	685b      	ldr	r3, [r3, #4]
 800b0c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b0c8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b0ca:	4b4d      	ldr	r3, [pc, #308]	; (800b200 <HAL_RCC_GetSysClockFreq+0x180>)
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d028      	beq.n	800b128 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b0d6:	4b4a      	ldr	r3, [pc, #296]	; (800b200 <HAL_RCC_GetSysClockFreq+0x180>)
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	099b      	lsrs	r3, r3, #6
 800b0dc:	2200      	movs	r2, #0
 800b0de:	623b      	str	r3, [r7, #32]
 800b0e0:	627a      	str	r2, [r7, #36]	; 0x24
 800b0e2:	6a3b      	ldr	r3, [r7, #32]
 800b0e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800b0e8:	2100      	movs	r1, #0
 800b0ea:	4b47      	ldr	r3, [pc, #284]	; (800b208 <HAL_RCC_GetSysClockFreq+0x188>)
 800b0ec:	fb03 f201 	mul.w	r2, r3, r1
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	fb00 f303 	mul.w	r3, r0, r3
 800b0f6:	4413      	add	r3, r2
 800b0f8:	4a43      	ldr	r2, [pc, #268]	; (800b208 <HAL_RCC_GetSysClockFreq+0x188>)
 800b0fa:	fba0 1202 	umull	r1, r2, r0, r2
 800b0fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b100:	460a      	mov	r2, r1
 800b102:	62ba      	str	r2, [r7, #40]	; 0x28
 800b104:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b106:	4413      	add	r3, r2
 800b108:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b10a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b10c:	2200      	movs	r2, #0
 800b10e:	61bb      	str	r3, [r7, #24]
 800b110:	61fa      	str	r2, [r7, #28]
 800b112:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b116:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800b11a:	f7f5 fda5 	bl	8000c68 <__aeabi_uldivmod>
 800b11e:	4602      	mov	r2, r0
 800b120:	460b      	mov	r3, r1
 800b122:	4613      	mov	r3, r2
 800b124:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b126:	e053      	b.n	800b1d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b128:	4b35      	ldr	r3, [pc, #212]	; (800b200 <HAL_RCC_GetSysClockFreq+0x180>)
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	099b      	lsrs	r3, r3, #6
 800b12e:	2200      	movs	r2, #0
 800b130:	613b      	str	r3, [r7, #16]
 800b132:	617a      	str	r2, [r7, #20]
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800b13a:	f04f 0b00 	mov.w	fp, #0
 800b13e:	4652      	mov	r2, sl
 800b140:	465b      	mov	r3, fp
 800b142:	f04f 0000 	mov.w	r0, #0
 800b146:	f04f 0100 	mov.w	r1, #0
 800b14a:	0159      	lsls	r1, r3, #5
 800b14c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b150:	0150      	lsls	r0, r2, #5
 800b152:	4602      	mov	r2, r0
 800b154:	460b      	mov	r3, r1
 800b156:	ebb2 080a 	subs.w	r8, r2, sl
 800b15a:	eb63 090b 	sbc.w	r9, r3, fp
 800b15e:	f04f 0200 	mov.w	r2, #0
 800b162:	f04f 0300 	mov.w	r3, #0
 800b166:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800b16a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800b16e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800b172:	ebb2 0408 	subs.w	r4, r2, r8
 800b176:	eb63 0509 	sbc.w	r5, r3, r9
 800b17a:	f04f 0200 	mov.w	r2, #0
 800b17e:	f04f 0300 	mov.w	r3, #0
 800b182:	00eb      	lsls	r3, r5, #3
 800b184:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b188:	00e2      	lsls	r2, r4, #3
 800b18a:	4614      	mov	r4, r2
 800b18c:	461d      	mov	r5, r3
 800b18e:	eb14 030a 	adds.w	r3, r4, sl
 800b192:	603b      	str	r3, [r7, #0]
 800b194:	eb45 030b 	adc.w	r3, r5, fp
 800b198:	607b      	str	r3, [r7, #4]
 800b19a:	f04f 0200 	mov.w	r2, #0
 800b19e:	f04f 0300 	mov.w	r3, #0
 800b1a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b1a6:	4629      	mov	r1, r5
 800b1a8:	028b      	lsls	r3, r1, #10
 800b1aa:	4621      	mov	r1, r4
 800b1ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b1b0:	4621      	mov	r1, r4
 800b1b2:	028a      	lsls	r2, r1, #10
 800b1b4:	4610      	mov	r0, r2
 800b1b6:	4619      	mov	r1, r3
 800b1b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	60bb      	str	r3, [r7, #8]
 800b1be:	60fa      	str	r2, [r7, #12]
 800b1c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b1c4:	f7f5 fd50 	bl	8000c68 <__aeabi_uldivmod>
 800b1c8:	4602      	mov	r2, r0
 800b1ca:	460b      	mov	r3, r1
 800b1cc:	4613      	mov	r3, r2
 800b1ce:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b1d0:	4b0b      	ldr	r3, [pc, #44]	; (800b200 <HAL_RCC_GetSysClockFreq+0x180>)
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	0c1b      	lsrs	r3, r3, #16
 800b1d6:	f003 0303 	and.w	r3, r3, #3
 800b1da:	3301      	adds	r3, #1
 800b1dc:	005b      	lsls	r3, r3, #1
 800b1de:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800b1e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800b1ea:	e002      	b.n	800b1f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b1ec:	4b05      	ldr	r3, [pc, #20]	; (800b204 <HAL_RCC_GetSysClockFreq+0x184>)
 800b1ee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800b1f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3740      	adds	r7, #64	; 0x40
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b1fe:	bf00      	nop
 800b200:	40023800 	.word	0x40023800
 800b204:	00f42400 	.word	0x00f42400
 800b208:	017d7840 	.word	0x017d7840

0800b20c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b20c:	b480      	push	{r7}
 800b20e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b210:	4b03      	ldr	r3, [pc, #12]	; (800b220 <HAL_RCC_GetHCLKFreq+0x14>)
 800b212:	681b      	ldr	r3, [r3, #0]
}
 800b214:	4618      	mov	r0, r3
 800b216:	46bd      	mov	sp, r7
 800b218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21c:	4770      	bx	lr
 800b21e:	bf00      	nop
 800b220:	2000000c 	.word	0x2000000c

0800b224 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b228:	f7ff fff0 	bl	800b20c <HAL_RCC_GetHCLKFreq>
 800b22c:	4602      	mov	r2, r0
 800b22e:	4b05      	ldr	r3, [pc, #20]	; (800b244 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b230:	689b      	ldr	r3, [r3, #8]
 800b232:	0a9b      	lsrs	r3, r3, #10
 800b234:	f003 0307 	and.w	r3, r3, #7
 800b238:	4903      	ldr	r1, [pc, #12]	; (800b248 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b23a:	5ccb      	ldrb	r3, [r1, r3]
 800b23c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b240:	4618      	mov	r0, r3
 800b242:	bd80      	pop	{r7, pc}
 800b244:	40023800 	.word	0x40023800
 800b248:	080158d4 	.word	0x080158d4

0800b24c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b250:	f7ff ffdc 	bl	800b20c <HAL_RCC_GetHCLKFreq>
 800b254:	4602      	mov	r2, r0
 800b256:	4b05      	ldr	r3, [pc, #20]	; (800b26c <HAL_RCC_GetPCLK2Freq+0x20>)
 800b258:	689b      	ldr	r3, [r3, #8]
 800b25a:	0b5b      	lsrs	r3, r3, #13
 800b25c:	f003 0307 	and.w	r3, r3, #7
 800b260:	4903      	ldr	r1, [pc, #12]	; (800b270 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b262:	5ccb      	ldrb	r3, [r1, r3]
 800b264:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b268:	4618      	mov	r0, r3
 800b26a:	bd80      	pop	{r7, pc}
 800b26c:	40023800 	.word	0x40023800
 800b270:	080158d4 	.word	0x080158d4

0800b274 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b274:	b480      	push	{r7}
 800b276:	b083      	sub	sp, #12
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
 800b27c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	220f      	movs	r2, #15
 800b282:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b284:	4b12      	ldr	r3, [pc, #72]	; (800b2d0 <HAL_RCC_GetClockConfig+0x5c>)
 800b286:	689b      	ldr	r3, [r3, #8]
 800b288:	f003 0203 	and.w	r2, r3, #3
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b290:	4b0f      	ldr	r3, [pc, #60]	; (800b2d0 <HAL_RCC_GetClockConfig+0x5c>)
 800b292:	689b      	ldr	r3, [r3, #8]
 800b294:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b29c:	4b0c      	ldr	r3, [pc, #48]	; (800b2d0 <HAL_RCC_GetClockConfig+0x5c>)
 800b29e:	689b      	ldr	r3, [r3, #8]
 800b2a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800b2a8:	4b09      	ldr	r3, [pc, #36]	; (800b2d0 <HAL_RCC_GetClockConfig+0x5c>)
 800b2aa:	689b      	ldr	r3, [r3, #8]
 800b2ac:	08db      	lsrs	r3, r3, #3
 800b2ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b2b6:	4b07      	ldr	r3, [pc, #28]	; (800b2d4 <HAL_RCC_GetClockConfig+0x60>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f003 020f 	and.w	r2, r3, #15
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	601a      	str	r2, [r3, #0]
}
 800b2c2:	bf00      	nop
 800b2c4:	370c      	adds	r7, #12
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2cc:	4770      	bx	lr
 800b2ce:	bf00      	nop
 800b2d0:	40023800 	.word	0x40023800
 800b2d4:	40023c00 	.word	0x40023c00

0800b2d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b082      	sub	sp, #8
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d101      	bne.n	800b2ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	e041      	b.n	800b36e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2f0:	b2db      	uxtb	r3, r3
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d106      	bne.n	800b304 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f7fc ffba 	bl	8008278 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2202      	movs	r2, #2
 800b308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681a      	ldr	r2, [r3, #0]
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	3304      	adds	r3, #4
 800b314:	4619      	mov	r1, r3
 800b316:	4610      	mov	r0, r2
 800b318:	f000 fc62 	bl	800bbe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2201      	movs	r2, #1
 800b320:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2201      	movs	r2, #1
 800b328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2201      	movs	r2, #1
 800b330:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2201      	movs	r2, #1
 800b338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2201      	movs	r2, #1
 800b340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2201      	movs	r2, #1
 800b348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2201      	movs	r2, #1
 800b350:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2201      	movs	r2, #1
 800b358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2201      	movs	r2, #1
 800b360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2201      	movs	r2, #1
 800b368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b36c:	2300      	movs	r3, #0
}
 800b36e:	4618      	mov	r0, r3
 800b370:	3708      	adds	r7, #8
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
	...

0800b378 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b378:	b480      	push	{r7}
 800b37a:	b085      	sub	sp, #20
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b386:	b2db      	uxtb	r3, r3
 800b388:	2b01      	cmp	r3, #1
 800b38a:	d001      	beq.n	800b390 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b38c:	2301      	movs	r3, #1
 800b38e:	e04e      	b.n	800b42e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2202      	movs	r2, #2
 800b394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	68da      	ldr	r2, [r3, #12]
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f042 0201 	orr.w	r2, r2, #1
 800b3a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4a23      	ldr	r2, [pc, #140]	; (800b43c <HAL_TIM_Base_Start_IT+0xc4>)
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	d022      	beq.n	800b3f8 <HAL_TIM_Base_Start_IT+0x80>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3ba:	d01d      	beq.n	800b3f8 <HAL_TIM_Base_Start_IT+0x80>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	4a1f      	ldr	r2, [pc, #124]	; (800b440 <HAL_TIM_Base_Start_IT+0xc8>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d018      	beq.n	800b3f8 <HAL_TIM_Base_Start_IT+0x80>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	4a1e      	ldr	r2, [pc, #120]	; (800b444 <HAL_TIM_Base_Start_IT+0xcc>)
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d013      	beq.n	800b3f8 <HAL_TIM_Base_Start_IT+0x80>
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	4a1c      	ldr	r2, [pc, #112]	; (800b448 <HAL_TIM_Base_Start_IT+0xd0>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d00e      	beq.n	800b3f8 <HAL_TIM_Base_Start_IT+0x80>
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	4a1b      	ldr	r2, [pc, #108]	; (800b44c <HAL_TIM_Base_Start_IT+0xd4>)
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	d009      	beq.n	800b3f8 <HAL_TIM_Base_Start_IT+0x80>
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	4a19      	ldr	r2, [pc, #100]	; (800b450 <HAL_TIM_Base_Start_IT+0xd8>)
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	d004      	beq.n	800b3f8 <HAL_TIM_Base_Start_IT+0x80>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	4a18      	ldr	r2, [pc, #96]	; (800b454 <HAL_TIM_Base_Start_IT+0xdc>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d111      	bne.n	800b41c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	689b      	ldr	r3, [r3, #8]
 800b3fe:	f003 0307 	and.w	r3, r3, #7
 800b402:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	2b06      	cmp	r3, #6
 800b408:	d010      	beq.n	800b42c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	681a      	ldr	r2, [r3, #0]
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f042 0201 	orr.w	r2, r2, #1
 800b418:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b41a:	e007      	b.n	800b42c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	681a      	ldr	r2, [r3, #0]
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f042 0201 	orr.w	r2, r2, #1
 800b42a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b42c:	2300      	movs	r3, #0
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3714      	adds	r7, #20
 800b432:	46bd      	mov	sp, r7
 800b434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b438:	4770      	bx	lr
 800b43a:	bf00      	nop
 800b43c:	40010000 	.word	0x40010000
 800b440:	40000400 	.word	0x40000400
 800b444:	40000800 	.word	0x40000800
 800b448:	40000c00 	.word	0x40000c00
 800b44c:	40010400 	.word	0x40010400
 800b450:	40014000 	.word	0x40014000
 800b454:	40001800 	.word	0x40001800

0800b458 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b082      	sub	sp, #8
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d101      	bne.n	800b46a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b466:	2301      	movs	r3, #1
 800b468:	e041      	b.n	800b4ee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b470:	b2db      	uxtb	r3, r3
 800b472:	2b00      	cmp	r3, #0
 800b474:	d106      	bne.n	800b484 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2200      	movs	r2, #0
 800b47a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f000 f839 	bl	800b4f6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2202      	movs	r2, #2
 800b488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681a      	ldr	r2, [r3, #0]
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	3304      	adds	r3, #4
 800b494:	4619      	mov	r1, r3
 800b496:	4610      	mov	r0, r2
 800b498:	f000 fba2 	bl	800bbe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2201      	movs	r2, #1
 800b4a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2201      	movs	r2, #1
 800b4b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2201      	movs	r2, #1
 800b4c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2201      	movs	r2, #1
 800b4e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b4ec:	2300      	movs	r3, #0
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3708      	adds	r7, #8
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}

0800b4f6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b4f6:	b480      	push	{r7}
 800b4f8:	b083      	sub	sp, #12
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b4fe:	bf00      	nop
 800b500:	370c      	adds	r7, #12
 800b502:	46bd      	mov	sp, r7
 800b504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b508:	4770      	bx	lr
	...

0800b50c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b084      	sub	sp, #16
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d109      	bne.n	800b530 <HAL_TIM_PWM_Start+0x24>
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b522:	b2db      	uxtb	r3, r3
 800b524:	2b01      	cmp	r3, #1
 800b526:	bf14      	ite	ne
 800b528:	2301      	movne	r3, #1
 800b52a:	2300      	moveq	r3, #0
 800b52c:	b2db      	uxtb	r3, r3
 800b52e:	e022      	b.n	800b576 <HAL_TIM_PWM_Start+0x6a>
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	2b04      	cmp	r3, #4
 800b534:	d109      	bne.n	800b54a <HAL_TIM_PWM_Start+0x3e>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b53c:	b2db      	uxtb	r3, r3
 800b53e:	2b01      	cmp	r3, #1
 800b540:	bf14      	ite	ne
 800b542:	2301      	movne	r3, #1
 800b544:	2300      	moveq	r3, #0
 800b546:	b2db      	uxtb	r3, r3
 800b548:	e015      	b.n	800b576 <HAL_TIM_PWM_Start+0x6a>
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	2b08      	cmp	r3, #8
 800b54e:	d109      	bne.n	800b564 <HAL_TIM_PWM_Start+0x58>
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b556:	b2db      	uxtb	r3, r3
 800b558:	2b01      	cmp	r3, #1
 800b55a:	bf14      	ite	ne
 800b55c:	2301      	movne	r3, #1
 800b55e:	2300      	moveq	r3, #0
 800b560:	b2db      	uxtb	r3, r3
 800b562:	e008      	b.n	800b576 <HAL_TIM_PWM_Start+0x6a>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b56a:	b2db      	uxtb	r3, r3
 800b56c:	2b01      	cmp	r3, #1
 800b56e:	bf14      	ite	ne
 800b570:	2301      	movne	r3, #1
 800b572:	2300      	moveq	r3, #0
 800b574:	b2db      	uxtb	r3, r3
 800b576:	2b00      	cmp	r3, #0
 800b578:	d001      	beq.n	800b57e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b57a:	2301      	movs	r3, #1
 800b57c:	e07c      	b.n	800b678 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d104      	bne.n	800b58e <HAL_TIM_PWM_Start+0x82>
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2202      	movs	r2, #2
 800b588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b58c:	e013      	b.n	800b5b6 <HAL_TIM_PWM_Start+0xaa>
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	2b04      	cmp	r3, #4
 800b592:	d104      	bne.n	800b59e <HAL_TIM_PWM_Start+0x92>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2202      	movs	r2, #2
 800b598:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b59c:	e00b      	b.n	800b5b6 <HAL_TIM_PWM_Start+0xaa>
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	2b08      	cmp	r3, #8
 800b5a2:	d104      	bne.n	800b5ae <HAL_TIM_PWM_Start+0xa2>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2202      	movs	r2, #2
 800b5a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b5ac:	e003      	b.n	800b5b6 <HAL_TIM_PWM_Start+0xaa>
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2202      	movs	r2, #2
 800b5b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	6839      	ldr	r1, [r7, #0]
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f000 fe04 	bl	800c1cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	4a2d      	ldr	r2, [pc, #180]	; (800b680 <HAL_TIM_PWM_Start+0x174>)
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d004      	beq.n	800b5d8 <HAL_TIM_PWM_Start+0xcc>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	4a2c      	ldr	r2, [pc, #176]	; (800b684 <HAL_TIM_PWM_Start+0x178>)
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d101      	bne.n	800b5dc <HAL_TIM_PWM_Start+0xd0>
 800b5d8:	2301      	movs	r3, #1
 800b5da:	e000      	b.n	800b5de <HAL_TIM_PWM_Start+0xd2>
 800b5dc:	2300      	movs	r3, #0
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d007      	beq.n	800b5f2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b5f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	4a22      	ldr	r2, [pc, #136]	; (800b680 <HAL_TIM_PWM_Start+0x174>)
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d022      	beq.n	800b642 <HAL_TIM_PWM_Start+0x136>
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b604:	d01d      	beq.n	800b642 <HAL_TIM_PWM_Start+0x136>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	4a1f      	ldr	r2, [pc, #124]	; (800b688 <HAL_TIM_PWM_Start+0x17c>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d018      	beq.n	800b642 <HAL_TIM_PWM_Start+0x136>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	4a1d      	ldr	r2, [pc, #116]	; (800b68c <HAL_TIM_PWM_Start+0x180>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d013      	beq.n	800b642 <HAL_TIM_PWM_Start+0x136>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	4a1c      	ldr	r2, [pc, #112]	; (800b690 <HAL_TIM_PWM_Start+0x184>)
 800b620:	4293      	cmp	r3, r2
 800b622:	d00e      	beq.n	800b642 <HAL_TIM_PWM_Start+0x136>
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	4a16      	ldr	r2, [pc, #88]	; (800b684 <HAL_TIM_PWM_Start+0x178>)
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d009      	beq.n	800b642 <HAL_TIM_PWM_Start+0x136>
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	4a18      	ldr	r2, [pc, #96]	; (800b694 <HAL_TIM_PWM_Start+0x188>)
 800b634:	4293      	cmp	r3, r2
 800b636:	d004      	beq.n	800b642 <HAL_TIM_PWM_Start+0x136>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	4a16      	ldr	r2, [pc, #88]	; (800b698 <HAL_TIM_PWM_Start+0x18c>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d111      	bne.n	800b666 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	689b      	ldr	r3, [r3, #8]
 800b648:	f003 0307 	and.w	r3, r3, #7
 800b64c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2b06      	cmp	r3, #6
 800b652:	d010      	beq.n	800b676 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	681a      	ldr	r2, [r3, #0]
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f042 0201 	orr.w	r2, r2, #1
 800b662:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b664:	e007      	b.n	800b676 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	681a      	ldr	r2, [r3, #0]
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	f042 0201 	orr.w	r2, r2, #1
 800b674:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b676:	2300      	movs	r3, #0
}
 800b678:	4618      	mov	r0, r3
 800b67a:	3710      	adds	r7, #16
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}
 800b680:	40010000 	.word	0x40010000
 800b684:	40010400 	.word	0x40010400
 800b688:	40000400 	.word	0x40000400
 800b68c:	40000800 	.word	0x40000800
 800b690:	40000c00 	.word	0x40000c00
 800b694:	40014000 	.word	0x40014000
 800b698:	40001800 	.word	0x40001800

0800b69c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b084      	sub	sp, #16
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	68db      	ldr	r3, [r3, #12]
 800b6aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	691b      	ldr	r3, [r3, #16]
 800b6b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	f003 0302 	and.w	r3, r3, #2
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d020      	beq.n	800b700 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	f003 0302 	and.w	r3, r3, #2
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d01b      	beq.n	800b700 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f06f 0202 	mvn.w	r2, #2
 800b6d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2201      	movs	r2, #1
 800b6d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	699b      	ldr	r3, [r3, #24]
 800b6de:	f003 0303 	and.w	r3, r3, #3
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d003      	beq.n	800b6ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 fa5b 	bl	800bba2 <HAL_TIM_IC_CaptureCallback>
 800b6ec:	e005      	b.n	800b6fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f000 fa4d 	bl	800bb8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f000 fa5e 	bl	800bbb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	f003 0304 	and.w	r3, r3, #4
 800b706:	2b00      	cmp	r3, #0
 800b708:	d020      	beq.n	800b74c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	f003 0304 	and.w	r3, r3, #4
 800b710:	2b00      	cmp	r3, #0
 800b712:	d01b      	beq.n	800b74c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f06f 0204 	mvn.w	r2, #4
 800b71c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2202      	movs	r2, #2
 800b722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	699b      	ldr	r3, [r3, #24]
 800b72a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d003      	beq.n	800b73a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 fa35 	bl	800bba2 <HAL_TIM_IC_CaptureCallback>
 800b738:	e005      	b.n	800b746 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f000 fa27 	bl	800bb8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f000 fa38 	bl	800bbb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2200      	movs	r2, #0
 800b74a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	f003 0308 	and.w	r3, r3, #8
 800b752:	2b00      	cmp	r3, #0
 800b754:	d020      	beq.n	800b798 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	f003 0308 	and.w	r3, r3, #8
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d01b      	beq.n	800b798 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f06f 0208 	mvn.w	r2, #8
 800b768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2204      	movs	r2, #4
 800b76e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	69db      	ldr	r3, [r3, #28]
 800b776:	f003 0303 	and.w	r3, r3, #3
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d003      	beq.n	800b786 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f000 fa0f 	bl	800bba2 <HAL_TIM_IC_CaptureCallback>
 800b784:	e005      	b.n	800b792 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f000 fa01 	bl	800bb8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f000 fa12 	bl	800bbb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2200      	movs	r2, #0
 800b796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	f003 0310 	and.w	r3, r3, #16
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d020      	beq.n	800b7e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	f003 0310 	and.w	r3, r3, #16
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d01b      	beq.n	800b7e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	f06f 0210 	mvn.w	r2, #16
 800b7b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2208      	movs	r2, #8
 800b7ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	69db      	ldr	r3, [r3, #28]
 800b7c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d003      	beq.n	800b7d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f000 f9e9 	bl	800bba2 <HAL_TIM_IC_CaptureCallback>
 800b7d0:	e005      	b.n	800b7de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f000 f9db 	bl	800bb8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f000 f9ec 	bl	800bbb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	f003 0301 	and.w	r3, r3, #1
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d00c      	beq.n	800b808 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	f003 0301 	and.w	r3, r3, #1
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d007      	beq.n	800b808 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f06f 0201 	mvn.w	r2, #1
 800b800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	f7f8 fa12 	bl	8003c2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d00c      	beq.n	800b82c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d007      	beq.n	800b82c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f000 fdce 	bl	800c3c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b832:	2b00      	cmp	r3, #0
 800b834:	d00c      	beq.n	800b850 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d007      	beq.n	800b850 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f000 f9bd 	bl	800bbca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	f003 0320 	and.w	r3, r3, #32
 800b856:	2b00      	cmp	r3, #0
 800b858:	d00c      	beq.n	800b874 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	f003 0320 	and.w	r3, r3, #32
 800b860:	2b00      	cmp	r3, #0
 800b862:	d007      	beq.n	800b874 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f06f 0220 	mvn.w	r2, #32
 800b86c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f000 fda0 	bl	800c3b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b874:	bf00      	nop
 800b876:	3710      	adds	r7, #16
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}

0800b87c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b086      	sub	sp, #24
 800b880:	af00      	add	r7, sp, #0
 800b882:	60f8      	str	r0, [r7, #12]
 800b884:	60b9      	str	r1, [r7, #8]
 800b886:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b888:	2300      	movs	r3, #0
 800b88a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b892:	2b01      	cmp	r3, #1
 800b894:	d101      	bne.n	800b89a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b896:	2302      	movs	r3, #2
 800b898:	e0ae      	b.n	800b9f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2201      	movs	r2, #1
 800b89e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2b0c      	cmp	r3, #12
 800b8a6:	f200 809f 	bhi.w	800b9e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b8aa:	a201      	add	r2, pc, #4	; (adr r2, 800b8b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b8ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8b0:	0800b8e5 	.word	0x0800b8e5
 800b8b4:	0800b9e9 	.word	0x0800b9e9
 800b8b8:	0800b9e9 	.word	0x0800b9e9
 800b8bc:	0800b9e9 	.word	0x0800b9e9
 800b8c0:	0800b925 	.word	0x0800b925
 800b8c4:	0800b9e9 	.word	0x0800b9e9
 800b8c8:	0800b9e9 	.word	0x0800b9e9
 800b8cc:	0800b9e9 	.word	0x0800b9e9
 800b8d0:	0800b967 	.word	0x0800b967
 800b8d4:	0800b9e9 	.word	0x0800b9e9
 800b8d8:	0800b9e9 	.word	0x0800b9e9
 800b8dc:	0800b9e9 	.word	0x0800b9e9
 800b8e0:	0800b9a7 	.word	0x0800b9a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	68b9      	ldr	r1, [r7, #8]
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f000 fa24 	bl	800bd38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	699a      	ldr	r2, [r3, #24]
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f042 0208 	orr.w	r2, r2, #8
 800b8fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	699a      	ldr	r2, [r3, #24]
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f022 0204 	bic.w	r2, r2, #4
 800b90e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	6999      	ldr	r1, [r3, #24]
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	691a      	ldr	r2, [r3, #16]
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	430a      	orrs	r2, r1
 800b920:	619a      	str	r2, [r3, #24]
      break;
 800b922:	e064      	b.n	800b9ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	68b9      	ldr	r1, [r7, #8]
 800b92a:	4618      	mov	r0, r3
 800b92c:	f000 fa74 	bl	800be18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	699a      	ldr	r2, [r3, #24]
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b93e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	699a      	ldr	r2, [r3, #24]
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b94e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	6999      	ldr	r1, [r3, #24]
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	691b      	ldr	r3, [r3, #16]
 800b95a:	021a      	lsls	r2, r3, #8
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	430a      	orrs	r2, r1
 800b962:	619a      	str	r2, [r3, #24]
      break;
 800b964:	e043      	b.n	800b9ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	68b9      	ldr	r1, [r7, #8]
 800b96c:	4618      	mov	r0, r3
 800b96e:	f000 fac9 	bl	800bf04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	69da      	ldr	r2, [r3, #28]
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f042 0208 	orr.w	r2, r2, #8
 800b980:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	69da      	ldr	r2, [r3, #28]
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f022 0204 	bic.w	r2, r2, #4
 800b990:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	69d9      	ldr	r1, [r3, #28]
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	691a      	ldr	r2, [r3, #16]
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	430a      	orrs	r2, r1
 800b9a2:	61da      	str	r2, [r3, #28]
      break;
 800b9a4:	e023      	b.n	800b9ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	68b9      	ldr	r1, [r7, #8]
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f000 fb1d 	bl	800bfec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	69da      	ldr	r2, [r3, #28]
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b9c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	69da      	ldr	r2, [r3, #28]
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b9d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	69d9      	ldr	r1, [r3, #28]
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	691b      	ldr	r3, [r3, #16]
 800b9dc:	021a      	lsls	r2, r3, #8
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	430a      	orrs	r2, r1
 800b9e4:	61da      	str	r2, [r3, #28]
      break;
 800b9e6:	e002      	b.n	800b9ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	75fb      	strb	r3, [r7, #23]
      break;
 800b9ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b9f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3718      	adds	r7, #24
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}

0800ba00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b084      	sub	sp, #16
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
 800ba08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba14:	2b01      	cmp	r3, #1
 800ba16:	d101      	bne.n	800ba1c <HAL_TIM_ConfigClockSource+0x1c>
 800ba18:	2302      	movs	r3, #2
 800ba1a:	e0b4      	b.n	800bb86 <HAL_TIM_ConfigClockSource+0x186>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2201      	movs	r2, #1
 800ba20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2202      	movs	r2, #2
 800ba28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	689b      	ldr	r3, [r3, #8]
 800ba32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ba3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ba42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	68ba      	ldr	r2, [r7, #8]
 800ba4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba54:	d03e      	beq.n	800bad4 <HAL_TIM_ConfigClockSource+0xd4>
 800ba56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba5a:	f200 8087 	bhi.w	800bb6c <HAL_TIM_ConfigClockSource+0x16c>
 800ba5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba62:	f000 8086 	beq.w	800bb72 <HAL_TIM_ConfigClockSource+0x172>
 800ba66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba6a:	d87f      	bhi.n	800bb6c <HAL_TIM_ConfigClockSource+0x16c>
 800ba6c:	2b70      	cmp	r3, #112	; 0x70
 800ba6e:	d01a      	beq.n	800baa6 <HAL_TIM_ConfigClockSource+0xa6>
 800ba70:	2b70      	cmp	r3, #112	; 0x70
 800ba72:	d87b      	bhi.n	800bb6c <HAL_TIM_ConfigClockSource+0x16c>
 800ba74:	2b60      	cmp	r3, #96	; 0x60
 800ba76:	d050      	beq.n	800bb1a <HAL_TIM_ConfigClockSource+0x11a>
 800ba78:	2b60      	cmp	r3, #96	; 0x60
 800ba7a:	d877      	bhi.n	800bb6c <HAL_TIM_ConfigClockSource+0x16c>
 800ba7c:	2b50      	cmp	r3, #80	; 0x50
 800ba7e:	d03c      	beq.n	800bafa <HAL_TIM_ConfigClockSource+0xfa>
 800ba80:	2b50      	cmp	r3, #80	; 0x50
 800ba82:	d873      	bhi.n	800bb6c <HAL_TIM_ConfigClockSource+0x16c>
 800ba84:	2b40      	cmp	r3, #64	; 0x40
 800ba86:	d058      	beq.n	800bb3a <HAL_TIM_ConfigClockSource+0x13a>
 800ba88:	2b40      	cmp	r3, #64	; 0x40
 800ba8a:	d86f      	bhi.n	800bb6c <HAL_TIM_ConfigClockSource+0x16c>
 800ba8c:	2b30      	cmp	r3, #48	; 0x30
 800ba8e:	d064      	beq.n	800bb5a <HAL_TIM_ConfigClockSource+0x15a>
 800ba90:	2b30      	cmp	r3, #48	; 0x30
 800ba92:	d86b      	bhi.n	800bb6c <HAL_TIM_ConfigClockSource+0x16c>
 800ba94:	2b20      	cmp	r3, #32
 800ba96:	d060      	beq.n	800bb5a <HAL_TIM_ConfigClockSource+0x15a>
 800ba98:	2b20      	cmp	r3, #32
 800ba9a:	d867      	bhi.n	800bb6c <HAL_TIM_ConfigClockSource+0x16c>
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d05c      	beq.n	800bb5a <HAL_TIM_ConfigClockSource+0x15a>
 800baa0:	2b10      	cmp	r3, #16
 800baa2:	d05a      	beq.n	800bb5a <HAL_TIM_ConfigClockSource+0x15a>
 800baa4:	e062      	b.n	800bb6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bab6:	f000 fb69 	bl	800c18c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	689b      	ldr	r3, [r3, #8]
 800bac0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bac8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	68ba      	ldr	r2, [r7, #8]
 800bad0:	609a      	str	r2, [r3, #8]
      break;
 800bad2:	e04f      	b.n	800bb74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bae4:	f000 fb52 	bl	800c18c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	689a      	ldr	r2, [r3, #8]
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800baf6:	609a      	str	r2, [r3, #8]
      break;
 800baf8:	e03c      	b.n	800bb74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb06:	461a      	mov	r2, r3
 800bb08:	f000 fac6 	bl	800c098 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	2150      	movs	r1, #80	; 0x50
 800bb12:	4618      	mov	r0, r3
 800bb14:	f000 fb1f 	bl	800c156 <TIM_ITRx_SetConfig>
      break;
 800bb18:	e02c      	b.n	800bb74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bb26:	461a      	mov	r2, r3
 800bb28:	f000 fae5 	bl	800c0f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	2160      	movs	r1, #96	; 0x60
 800bb32:	4618      	mov	r0, r3
 800bb34:	f000 fb0f 	bl	800c156 <TIM_ITRx_SetConfig>
      break;
 800bb38:	e01c      	b.n	800bb74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb46:	461a      	mov	r2, r3
 800bb48:	f000 faa6 	bl	800c098 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	2140      	movs	r1, #64	; 0x40
 800bb52:	4618      	mov	r0, r3
 800bb54:	f000 faff 	bl	800c156 <TIM_ITRx_SetConfig>
      break;
 800bb58:	e00c      	b.n	800bb74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681a      	ldr	r2, [r3, #0]
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	4619      	mov	r1, r3
 800bb64:	4610      	mov	r0, r2
 800bb66:	f000 faf6 	bl	800c156 <TIM_ITRx_SetConfig>
      break;
 800bb6a:	e003      	b.n	800bb74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	73fb      	strb	r3, [r7, #15]
      break;
 800bb70:	e000      	b.n	800bb74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bb72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2201      	movs	r2, #1
 800bb78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bb84:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3710      	adds	r7, #16
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}

0800bb8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bb8e:	b480      	push	{r7}
 800bb90:	b083      	sub	sp, #12
 800bb92:	af00      	add	r7, sp, #0
 800bb94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bb96:	bf00      	nop
 800bb98:	370c      	adds	r7, #12
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba0:	4770      	bx	lr

0800bba2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bba2:	b480      	push	{r7}
 800bba4:	b083      	sub	sp, #12
 800bba6:	af00      	add	r7, sp, #0
 800bba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bbaa:	bf00      	nop
 800bbac:	370c      	adds	r7, #12
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb4:	4770      	bx	lr

0800bbb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bbb6:	b480      	push	{r7}
 800bbb8:	b083      	sub	sp, #12
 800bbba:	af00      	add	r7, sp, #0
 800bbbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bbbe:	bf00      	nop
 800bbc0:	370c      	adds	r7, #12
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc8:	4770      	bx	lr

0800bbca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bbca:	b480      	push	{r7}
 800bbcc:	b083      	sub	sp, #12
 800bbce:	af00      	add	r7, sp, #0
 800bbd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bbd2:	bf00      	nop
 800bbd4:	370c      	adds	r7, #12
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbdc:	4770      	bx	lr
	...

0800bbe0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b085      	sub	sp, #20
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
 800bbe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	4a46      	ldr	r2, [pc, #280]	; (800bd0c <TIM_Base_SetConfig+0x12c>)
 800bbf4:	4293      	cmp	r3, r2
 800bbf6:	d013      	beq.n	800bc20 <TIM_Base_SetConfig+0x40>
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbfe:	d00f      	beq.n	800bc20 <TIM_Base_SetConfig+0x40>
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	4a43      	ldr	r2, [pc, #268]	; (800bd10 <TIM_Base_SetConfig+0x130>)
 800bc04:	4293      	cmp	r3, r2
 800bc06:	d00b      	beq.n	800bc20 <TIM_Base_SetConfig+0x40>
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	4a42      	ldr	r2, [pc, #264]	; (800bd14 <TIM_Base_SetConfig+0x134>)
 800bc0c:	4293      	cmp	r3, r2
 800bc0e:	d007      	beq.n	800bc20 <TIM_Base_SetConfig+0x40>
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	4a41      	ldr	r2, [pc, #260]	; (800bd18 <TIM_Base_SetConfig+0x138>)
 800bc14:	4293      	cmp	r3, r2
 800bc16:	d003      	beq.n	800bc20 <TIM_Base_SetConfig+0x40>
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	4a40      	ldr	r2, [pc, #256]	; (800bd1c <TIM_Base_SetConfig+0x13c>)
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	d108      	bne.n	800bc32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	685b      	ldr	r3, [r3, #4]
 800bc2c:	68fa      	ldr	r2, [r7, #12]
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	4a35      	ldr	r2, [pc, #212]	; (800bd0c <TIM_Base_SetConfig+0x12c>)
 800bc36:	4293      	cmp	r3, r2
 800bc38:	d02b      	beq.n	800bc92 <TIM_Base_SetConfig+0xb2>
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc40:	d027      	beq.n	800bc92 <TIM_Base_SetConfig+0xb2>
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	4a32      	ldr	r2, [pc, #200]	; (800bd10 <TIM_Base_SetConfig+0x130>)
 800bc46:	4293      	cmp	r3, r2
 800bc48:	d023      	beq.n	800bc92 <TIM_Base_SetConfig+0xb2>
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	4a31      	ldr	r2, [pc, #196]	; (800bd14 <TIM_Base_SetConfig+0x134>)
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	d01f      	beq.n	800bc92 <TIM_Base_SetConfig+0xb2>
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	4a30      	ldr	r2, [pc, #192]	; (800bd18 <TIM_Base_SetConfig+0x138>)
 800bc56:	4293      	cmp	r3, r2
 800bc58:	d01b      	beq.n	800bc92 <TIM_Base_SetConfig+0xb2>
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	4a2f      	ldr	r2, [pc, #188]	; (800bd1c <TIM_Base_SetConfig+0x13c>)
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d017      	beq.n	800bc92 <TIM_Base_SetConfig+0xb2>
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	4a2e      	ldr	r2, [pc, #184]	; (800bd20 <TIM_Base_SetConfig+0x140>)
 800bc66:	4293      	cmp	r3, r2
 800bc68:	d013      	beq.n	800bc92 <TIM_Base_SetConfig+0xb2>
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	4a2d      	ldr	r2, [pc, #180]	; (800bd24 <TIM_Base_SetConfig+0x144>)
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d00f      	beq.n	800bc92 <TIM_Base_SetConfig+0xb2>
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	4a2c      	ldr	r2, [pc, #176]	; (800bd28 <TIM_Base_SetConfig+0x148>)
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d00b      	beq.n	800bc92 <TIM_Base_SetConfig+0xb2>
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	4a2b      	ldr	r2, [pc, #172]	; (800bd2c <TIM_Base_SetConfig+0x14c>)
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	d007      	beq.n	800bc92 <TIM_Base_SetConfig+0xb2>
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	4a2a      	ldr	r2, [pc, #168]	; (800bd30 <TIM_Base_SetConfig+0x150>)
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d003      	beq.n	800bc92 <TIM_Base_SetConfig+0xb2>
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	4a29      	ldr	r2, [pc, #164]	; (800bd34 <TIM_Base_SetConfig+0x154>)
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d108      	bne.n	800bca4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	68db      	ldr	r3, [r3, #12]
 800bc9e:	68fa      	ldr	r2, [r7, #12]
 800bca0:	4313      	orrs	r3, r2
 800bca2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	695b      	ldr	r3, [r3, #20]
 800bcae:	4313      	orrs	r3, r2
 800bcb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	68fa      	ldr	r2, [r7, #12]
 800bcb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	689a      	ldr	r2, [r3, #8]
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	681a      	ldr	r2, [r3, #0]
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	4a10      	ldr	r2, [pc, #64]	; (800bd0c <TIM_Base_SetConfig+0x12c>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d003      	beq.n	800bcd8 <TIM_Base_SetConfig+0xf8>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	4a12      	ldr	r2, [pc, #72]	; (800bd1c <TIM_Base_SetConfig+0x13c>)
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d103      	bne.n	800bce0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	691a      	ldr	r2, [r3, #16]
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2201      	movs	r2, #1
 800bce4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	691b      	ldr	r3, [r3, #16]
 800bcea:	f003 0301 	and.w	r3, r3, #1
 800bcee:	2b01      	cmp	r3, #1
 800bcf0:	d105      	bne.n	800bcfe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	691b      	ldr	r3, [r3, #16]
 800bcf6:	f023 0201 	bic.w	r2, r3, #1
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	611a      	str	r2, [r3, #16]
  }
}
 800bcfe:	bf00      	nop
 800bd00:	3714      	adds	r7, #20
 800bd02:	46bd      	mov	sp, r7
 800bd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd08:	4770      	bx	lr
 800bd0a:	bf00      	nop
 800bd0c:	40010000 	.word	0x40010000
 800bd10:	40000400 	.word	0x40000400
 800bd14:	40000800 	.word	0x40000800
 800bd18:	40000c00 	.word	0x40000c00
 800bd1c:	40010400 	.word	0x40010400
 800bd20:	40014000 	.word	0x40014000
 800bd24:	40014400 	.word	0x40014400
 800bd28:	40014800 	.word	0x40014800
 800bd2c:	40001800 	.word	0x40001800
 800bd30:	40001c00 	.word	0x40001c00
 800bd34:	40002000 	.word	0x40002000

0800bd38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b087      	sub	sp, #28
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
 800bd40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6a1b      	ldr	r3, [r3, #32]
 800bd46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6a1b      	ldr	r3, [r3, #32]
 800bd4c:	f023 0201 	bic.w	r2, r3, #1
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	685b      	ldr	r3, [r3, #4]
 800bd58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	699b      	ldr	r3, [r3, #24]
 800bd5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	f023 0303 	bic.w	r3, r3, #3
 800bd6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	68fa      	ldr	r2, [r7, #12]
 800bd76:	4313      	orrs	r3, r2
 800bd78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	f023 0302 	bic.w	r3, r3, #2
 800bd80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	689b      	ldr	r3, [r3, #8]
 800bd86:	697a      	ldr	r2, [r7, #20]
 800bd88:	4313      	orrs	r3, r2
 800bd8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	4a20      	ldr	r2, [pc, #128]	; (800be10 <TIM_OC1_SetConfig+0xd8>)
 800bd90:	4293      	cmp	r3, r2
 800bd92:	d003      	beq.n	800bd9c <TIM_OC1_SetConfig+0x64>
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	4a1f      	ldr	r2, [pc, #124]	; (800be14 <TIM_OC1_SetConfig+0xdc>)
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	d10c      	bne.n	800bdb6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	f023 0308 	bic.w	r3, r3, #8
 800bda2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	68db      	ldr	r3, [r3, #12]
 800bda8:	697a      	ldr	r2, [r7, #20]
 800bdaa:	4313      	orrs	r3, r2
 800bdac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	f023 0304 	bic.w	r3, r3, #4
 800bdb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	4a15      	ldr	r2, [pc, #84]	; (800be10 <TIM_OC1_SetConfig+0xd8>)
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d003      	beq.n	800bdc6 <TIM_OC1_SetConfig+0x8e>
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	4a14      	ldr	r2, [pc, #80]	; (800be14 <TIM_OC1_SetConfig+0xdc>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d111      	bne.n	800bdea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bdc6:	693b      	ldr	r3, [r7, #16]
 800bdc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bdcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bdd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	695b      	ldr	r3, [r3, #20]
 800bdda:	693a      	ldr	r2, [r7, #16]
 800bddc:	4313      	orrs	r3, r2
 800bdde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	699b      	ldr	r3, [r3, #24]
 800bde4:	693a      	ldr	r2, [r7, #16]
 800bde6:	4313      	orrs	r3, r2
 800bde8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	693a      	ldr	r2, [r7, #16]
 800bdee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	68fa      	ldr	r2, [r7, #12]
 800bdf4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	685a      	ldr	r2, [r3, #4]
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	697a      	ldr	r2, [r7, #20]
 800be02:	621a      	str	r2, [r3, #32]
}
 800be04:	bf00      	nop
 800be06:	371c      	adds	r7, #28
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr
 800be10:	40010000 	.word	0x40010000
 800be14:	40010400 	.word	0x40010400

0800be18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800be18:	b480      	push	{r7}
 800be1a:	b087      	sub	sp, #28
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
 800be20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6a1b      	ldr	r3, [r3, #32]
 800be26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6a1b      	ldr	r3, [r3, #32]
 800be2c:	f023 0210 	bic.w	r2, r3, #16
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	685b      	ldr	r3, [r3, #4]
 800be38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	699b      	ldr	r3, [r3, #24]
 800be3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800be46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	021b      	lsls	r3, r3, #8
 800be56:	68fa      	ldr	r2, [r7, #12]
 800be58:	4313      	orrs	r3, r2
 800be5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800be5c:	697b      	ldr	r3, [r7, #20]
 800be5e:	f023 0320 	bic.w	r3, r3, #32
 800be62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	689b      	ldr	r3, [r3, #8]
 800be68:	011b      	lsls	r3, r3, #4
 800be6a:	697a      	ldr	r2, [r7, #20]
 800be6c:	4313      	orrs	r3, r2
 800be6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	4a22      	ldr	r2, [pc, #136]	; (800befc <TIM_OC2_SetConfig+0xe4>)
 800be74:	4293      	cmp	r3, r2
 800be76:	d003      	beq.n	800be80 <TIM_OC2_SetConfig+0x68>
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	4a21      	ldr	r2, [pc, #132]	; (800bf00 <TIM_OC2_SetConfig+0xe8>)
 800be7c:	4293      	cmp	r3, r2
 800be7e:	d10d      	bne.n	800be9c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800be80:	697b      	ldr	r3, [r7, #20]
 800be82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	68db      	ldr	r3, [r3, #12]
 800be8c:	011b      	lsls	r3, r3, #4
 800be8e:	697a      	ldr	r2, [r7, #20]
 800be90:	4313      	orrs	r3, r2
 800be92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be9a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	4a17      	ldr	r2, [pc, #92]	; (800befc <TIM_OC2_SetConfig+0xe4>)
 800bea0:	4293      	cmp	r3, r2
 800bea2:	d003      	beq.n	800beac <TIM_OC2_SetConfig+0x94>
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	4a16      	ldr	r2, [pc, #88]	; (800bf00 <TIM_OC2_SetConfig+0xe8>)
 800bea8:	4293      	cmp	r3, r2
 800beaa:	d113      	bne.n	800bed4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800beb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800beba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	695b      	ldr	r3, [r3, #20]
 800bec0:	009b      	lsls	r3, r3, #2
 800bec2:	693a      	ldr	r2, [r7, #16]
 800bec4:	4313      	orrs	r3, r2
 800bec6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	699b      	ldr	r3, [r3, #24]
 800becc:	009b      	lsls	r3, r3, #2
 800bece:	693a      	ldr	r2, [r7, #16]
 800bed0:	4313      	orrs	r3, r2
 800bed2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	693a      	ldr	r2, [r7, #16]
 800bed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	68fa      	ldr	r2, [r7, #12]
 800bede:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	685a      	ldr	r2, [r3, #4]
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	697a      	ldr	r2, [r7, #20]
 800beec:	621a      	str	r2, [r3, #32]
}
 800beee:	bf00      	nop
 800bef0:	371c      	adds	r7, #28
 800bef2:	46bd      	mov	sp, r7
 800bef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef8:	4770      	bx	lr
 800befa:	bf00      	nop
 800befc:	40010000 	.word	0x40010000
 800bf00:	40010400 	.word	0x40010400

0800bf04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b087      	sub	sp, #28
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6a1b      	ldr	r3, [r3, #32]
 800bf12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6a1b      	ldr	r3, [r3, #32]
 800bf18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	685b      	ldr	r3, [r3, #4]
 800bf24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	69db      	ldr	r3, [r3, #28]
 800bf2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	f023 0303 	bic.w	r3, r3, #3
 800bf3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	68fa      	ldr	r2, [r7, #12]
 800bf42:	4313      	orrs	r3, r2
 800bf44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bf46:	697b      	ldr	r3, [r7, #20]
 800bf48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bf4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	689b      	ldr	r3, [r3, #8]
 800bf52:	021b      	lsls	r3, r3, #8
 800bf54:	697a      	ldr	r2, [r7, #20]
 800bf56:	4313      	orrs	r3, r2
 800bf58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	4a21      	ldr	r2, [pc, #132]	; (800bfe4 <TIM_OC3_SetConfig+0xe0>)
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	d003      	beq.n	800bf6a <TIM_OC3_SetConfig+0x66>
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	4a20      	ldr	r2, [pc, #128]	; (800bfe8 <TIM_OC3_SetConfig+0xe4>)
 800bf66:	4293      	cmp	r3, r2
 800bf68:	d10d      	bne.n	800bf86 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bf6a:	697b      	ldr	r3, [r7, #20]
 800bf6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bf70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	68db      	ldr	r3, [r3, #12]
 800bf76:	021b      	lsls	r3, r3, #8
 800bf78:	697a      	ldr	r2, [r7, #20]
 800bf7a:	4313      	orrs	r3, r2
 800bf7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bf84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	4a16      	ldr	r2, [pc, #88]	; (800bfe4 <TIM_OC3_SetConfig+0xe0>)
 800bf8a:	4293      	cmp	r3, r2
 800bf8c:	d003      	beq.n	800bf96 <TIM_OC3_SetConfig+0x92>
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	4a15      	ldr	r2, [pc, #84]	; (800bfe8 <TIM_OC3_SetConfig+0xe4>)
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d113      	bne.n	800bfbe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bf9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bfa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	695b      	ldr	r3, [r3, #20]
 800bfaa:	011b      	lsls	r3, r3, #4
 800bfac:	693a      	ldr	r2, [r7, #16]
 800bfae:	4313      	orrs	r3, r2
 800bfb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	699b      	ldr	r3, [r3, #24]
 800bfb6:	011b      	lsls	r3, r3, #4
 800bfb8:	693a      	ldr	r2, [r7, #16]
 800bfba:	4313      	orrs	r3, r2
 800bfbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	693a      	ldr	r2, [r7, #16]
 800bfc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	68fa      	ldr	r2, [r7, #12]
 800bfc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	685a      	ldr	r2, [r3, #4]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	697a      	ldr	r2, [r7, #20]
 800bfd6:	621a      	str	r2, [r3, #32]
}
 800bfd8:	bf00      	nop
 800bfda:	371c      	adds	r7, #28
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe2:	4770      	bx	lr
 800bfe4:	40010000 	.word	0x40010000
 800bfe8:	40010400 	.word	0x40010400

0800bfec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b087      	sub	sp, #28
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
 800bff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6a1b      	ldr	r3, [r3, #32]
 800bffa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6a1b      	ldr	r3, [r3, #32]
 800c000:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	685b      	ldr	r3, [r3, #4]
 800c00c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	69db      	ldr	r3, [r3, #28]
 800c012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c01a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c022:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	021b      	lsls	r3, r3, #8
 800c02a:	68fa      	ldr	r2, [r7, #12]
 800c02c:	4313      	orrs	r3, r2
 800c02e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c030:	693b      	ldr	r3, [r7, #16]
 800c032:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c036:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	689b      	ldr	r3, [r3, #8]
 800c03c:	031b      	lsls	r3, r3, #12
 800c03e:	693a      	ldr	r2, [r7, #16]
 800c040:	4313      	orrs	r3, r2
 800c042:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	4a12      	ldr	r2, [pc, #72]	; (800c090 <TIM_OC4_SetConfig+0xa4>)
 800c048:	4293      	cmp	r3, r2
 800c04a:	d003      	beq.n	800c054 <TIM_OC4_SetConfig+0x68>
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	4a11      	ldr	r2, [pc, #68]	; (800c094 <TIM_OC4_SetConfig+0xa8>)
 800c050:	4293      	cmp	r3, r2
 800c052:	d109      	bne.n	800c068 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c054:	697b      	ldr	r3, [r7, #20]
 800c056:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c05a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	695b      	ldr	r3, [r3, #20]
 800c060:	019b      	lsls	r3, r3, #6
 800c062:	697a      	ldr	r2, [r7, #20]
 800c064:	4313      	orrs	r3, r2
 800c066:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	697a      	ldr	r2, [r7, #20]
 800c06c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	68fa      	ldr	r2, [r7, #12]
 800c072:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	685a      	ldr	r2, [r3, #4]
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	693a      	ldr	r2, [r7, #16]
 800c080:	621a      	str	r2, [r3, #32]
}
 800c082:	bf00      	nop
 800c084:	371c      	adds	r7, #28
 800c086:	46bd      	mov	sp, r7
 800c088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08c:	4770      	bx	lr
 800c08e:	bf00      	nop
 800c090:	40010000 	.word	0x40010000
 800c094:	40010400 	.word	0x40010400

0800c098 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c098:	b480      	push	{r7}
 800c09a:	b087      	sub	sp, #28
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	60f8      	str	r0, [r7, #12]
 800c0a0:	60b9      	str	r1, [r7, #8]
 800c0a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	6a1b      	ldr	r3, [r3, #32]
 800c0a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	6a1b      	ldr	r3, [r3, #32]
 800c0ae:	f023 0201 	bic.w	r2, r3, #1
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	699b      	ldr	r3, [r3, #24]
 800c0ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c0bc:	693b      	ldr	r3, [r7, #16]
 800c0be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c0c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	011b      	lsls	r3, r3, #4
 800c0c8:	693a      	ldr	r2, [r7, #16]
 800c0ca:	4313      	orrs	r3, r2
 800c0cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c0ce:	697b      	ldr	r3, [r7, #20]
 800c0d0:	f023 030a 	bic.w	r3, r3, #10
 800c0d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c0d6:	697a      	ldr	r2, [r7, #20]
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	4313      	orrs	r3, r2
 800c0dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	693a      	ldr	r2, [r7, #16]
 800c0e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	697a      	ldr	r2, [r7, #20]
 800c0e8:	621a      	str	r2, [r3, #32]
}
 800c0ea:	bf00      	nop
 800c0ec:	371c      	adds	r7, #28
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f4:	4770      	bx	lr

0800c0f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c0f6:	b480      	push	{r7}
 800c0f8:	b087      	sub	sp, #28
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	60f8      	str	r0, [r7, #12]
 800c0fe:	60b9      	str	r1, [r7, #8]
 800c100:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	6a1b      	ldr	r3, [r3, #32]
 800c106:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	6a1b      	ldr	r3, [r3, #32]
 800c10c:	f023 0210 	bic.w	r2, r3, #16
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	699b      	ldr	r3, [r3, #24]
 800c118:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c120:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	031b      	lsls	r3, r3, #12
 800c126:	693a      	ldr	r2, [r7, #16]
 800c128:	4313      	orrs	r3, r2
 800c12a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c12c:	697b      	ldr	r3, [r7, #20]
 800c12e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c132:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	011b      	lsls	r3, r3, #4
 800c138:	697a      	ldr	r2, [r7, #20]
 800c13a:	4313      	orrs	r3, r2
 800c13c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	693a      	ldr	r2, [r7, #16]
 800c142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	697a      	ldr	r2, [r7, #20]
 800c148:	621a      	str	r2, [r3, #32]
}
 800c14a:	bf00      	nop
 800c14c:	371c      	adds	r7, #28
 800c14e:	46bd      	mov	sp, r7
 800c150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c154:	4770      	bx	lr

0800c156 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c156:	b480      	push	{r7}
 800c158:	b085      	sub	sp, #20
 800c15a:	af00      	add	r7, sp, #0
 800c15c:	6078      	str	r0, [r7, #4]
 800c15e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	689b      	ldr	r3, [r3, #8]
 800c164:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c16c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c16e:	683a      	ldr	r2, [r7, #0]
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	4313      	orrs	r3, r2
 800c174:	f043 0307 	orr.w	r3, r3, #7
 800c178:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	68fa      	ldr	r2, [r7, #12]
 800c17e:	609a      	str	r2, [r3, #8]
}
 800c180:	bf00      	nop
 800c182:	3714      	adds	r7, #20
 800c184:	46bd      	mov	sp, r7
 800c186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18a:	4770      	bx	lr

0800c18c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c18c:	b480      	push	{r7}
 800c18e:	b087      	sub	sp, #28
 800c190:	af00      	add	r7, sp, #0
 800c192:	60f8      	str	r0, [r7, #12]
 800c194:	60b9      	str	r1, [r7, #8]
 800c196:	607a      	str	r2, [r7, #4]
 800c198:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	689b      	ldr	r3, [r3, #8]
 800c19e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c1a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	021a      	lsls	r2, r3, #8
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	431a      	orrs	r2, r3
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	4313      	orrs	r3, r2
 800c1b4:	697a      	ldr	r2, [r7, #20]
 800c1b6:	4313      	orrs	r3, r2
 800c1b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	697a      	ldr	r2, [r7, #20]
 800c1be:	609a      	str	r2, [r3, #8]
}
 800c1c0:	bf00      	nop
 800c1c2:	371c      	adds	r7, #28
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ca:	4770      	bx	lr

0800c1cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b087      	sub	sp, #28
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	60f8      	str	r0, [r7, #12]
 800c1d4:	60b9      	str	r1, [r7, #8]
 800c1d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	f003 031f 	and.w	r3, r3, #31
 800c1de:	2201      	movs	r2, #1
 800c1e0:	fa02 f303 	lsl.w	r3, r2, r3
 800c1e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	6a1a      	ldr	r2, [r3, #32]
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	43db      	mvns	r3, r3
 800c1ee:	401a      	ands	r2, r3
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	6a1a      	ldr	r2, [r3, #32]
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	f003 031f 	and.w	r3, r3, #31
 800c1fe:	6879      	ldr	r1, [r7, #4]
 800c200:	fa01 f303 	lsl.w	r3, r1, r3
 800c204:	431a      	orrs	r2, r3
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	621a      	str	r2, [r3, #32]
}
 800c20a:	bf00      	nop
 800c20c:	371c      	adds	r7, #28
 800c20e:	46bd      	mov	sp, r7
 800c210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c214:	4770      	bx	lr
	...

0800c218 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c218:	b480      	push	{r7}
 800c21a:	b085      	sub	sp, #20
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
 800c220:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c228:	2b01      	cmp	r3, #1
 800c22a:	d101      	bne.n	800c230 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c22c:	2302      	movs	r3, #2
 800c22e:	e05a      	b.n	800c2e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2201      	movs	r2, #1
 800c234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2202      	movs	r2, #2
 800c23c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	685b      	ldr	r3, [r3, #4]
 800c246:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	689b      	ldr	r3, [r3, #8]
 800c24e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c256:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	68fa      	ldr	r2, [r7, #12]
 800c25e:	4313      	orrs	r3, r2
 800c260:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	68fa      	ldr	r2, [r7, #12]
 800c268:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	4a21      	ldr	r2, [pc, #132]	; (800c2f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c270:	4293      	cmp	r3, r2
 800c272:	d022      	beq.n	800c2ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c27c:	d01d      	beq.n	800c2ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	4a1d      	ldr	r2, [pc, #116]	; (800c2f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c284:	4293      	cmp	r3, r2
 800c286:	d018      	beq.n	800c2ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	4a1b      	ldr	r2, [pc, #108]	; (800c2fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d013      	beq.n	800c2ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	4a1a      	ldr	r2, [pc, #104]	; (800c300 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c298:	4293      	cmp	r3, r2
 800c29a:	d00e      	beq.n	800c2ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4a18      	ldr	r2, [pc, #96]	; (800c304 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d009      	beq.n	800c2ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	4a17      	ldr	r2, [pc, #92]	; (800c308 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d004      	beq.n	800c2ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	4a15      	ldr	r2, [pc, #84]	; (800c30c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	d10c      	bne.n	800c2d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c2c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	685b      	ldr	r3, [r3, #4]
 800c2c6:	68ba      	ldr	r2, [r7, #8]
 800c2c8:	4313      	orrs	r3, r2
 800c2ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	68ba      	ldr	r2, [r7, #8]
 800c2d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2201      	movs	r2, #1
 800c2d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c2e4:	2300      	movs	r3, #0
}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	3714      	adds	r7, #20
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f0:	4770      	bx	lr
 800c2f2:	bf00      	nop
 800c2f4:	40010000 	.word	0x40010000
 800c2f8:	40000400 	.word	0x40000400
 800c2fc:	40000800 	.word	0x40000800
 800c300:	40000c00 	.word	0x40000c00
 800c304:	40010400 	.word	0x40010400
 800c308:	40014000 	.word	0x40014000
 800c30c:	40001800 	.word	0x40001800

0800c310 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c310:	b480      	push	{r7}
 800c312:	b085      	sub	sp, #20
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c31a:	2300      	movs	r3, #0
 800c31c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c324:	2b01      	cmp	r3, #1
 800c326:	d101      	bne.n	800c32c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c328:	2302      	movs	r3, #2
 800c32a:	e03d      	b.n	800c3a8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2201      	movs	r2, #1
 800c330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	68db      	ldr	r3, [r3, #12]
 800c33e:	4313      	orrs	r3, r2
 800c340:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	689b      	ldr	r3, [r3, #8]
 800c34c:	4313      	orrs	r3, r2
 800c34e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	685b      	ldr	r3, [r3, #4]
 800c35a:	4313      	orrs	r3, r2
 800c35c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	4313      	orrs	r3, r2
 800c36a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	691b      	ldr	r3, [r3, #16]
 800c376:	4313      	orrs	r3, r2
 800c378:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	695b      	ldr	r3, [r3, #20]
 800c384:	4313      	orrs	r3, r2
 800c386:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	69db      	ldr	r3, [r3, #28]
 800c392:	4313      	orrs	r3, r2
 800c394:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	68fa      	ldr	r2, [r7, #12]
 800c39c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c3a6:	2300      	movs	r3, #0
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3714      	adds	r7, #20
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b2:	4770      	bx	lr

0800c3b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b083      	sub	sp, #12
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c3bc:	bf00      	nop
 800c3be:	370c      	adds	r7, #12
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c6:	4770      	bx	lr

0800c3c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c3c8:	b480      	push	{r7}
 800c3ca:	b083      	sub	sp, #12
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c3d0:	bf00      	nop
 800c3d2:	370c      	adds	r7, #12
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3da:	4770      	bx	lr

0800c3dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b082      	sub	sp, #8
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d101      	bne.n	800c3ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	e042      	b.n	800c474 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c3f4:	b2db      	uxtb	r3, r3
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d106      	bne.n	800c408 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f7fc f830 	bl	8008468 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2224      	movs	r2, #36	; 0x24
 800c40c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	68da      	ldr	r2, [r3, #12]
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c41e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c420:	6878      	ldr	r0, [r7, #4]
 800c422:	f000 ff37 	bl	800d294 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	691a      	ldr	r2, [r3, #16]
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c434:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	695a      	ldr	r2, [r3, #20]
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c444:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	68da      	ldr	r2, [r3, #12]
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c454:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2200      	movs	r2, #0
 800c45a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2220      	movs	r2, #32
 800c460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2220      	movs	r2, #32
 800c468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2200      	movs	r2, #0
 800c470:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c472:	2300      	movs	r3, #0
}
 800c474:	4618      	mov	r0, r3
 800c476:	3708      	adds	r7, #8
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}

0800c47c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b08c      	sub	sp, #48	; 0x30
 800c480:	af00      	add	r7, sp, #0
 800c482:	60f8      	str	r0, [r7, #12]
 800c484:	60b9      	str	r1, [r7, #8]
 800c486:	4613      	mov	r3, r2
 800c488:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c490:	b2db      	uxtb	r3, r3
 800c492:	2b20      	cmp	r3, #32
 800c494:	d156      	bne.n	800c544 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d002      	beq.n	800c4a2 <HAL_UART_Transmit_DMA+0x26>
 800c49c:	88fb      	ldrh	r3, [r7, #6]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d101      	bne.n	800c4a6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	e04f      	b.n	800c546 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800c4a6:	68ba      	ldr	r2, [r7, #8]
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	88fa      	ldrh	r2, [r7, #6]
 800c4b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	88fa      	ldrh	r2, [r7, #6]
 800c4b6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	2221      	movs	r2, #33	; 0x21
 800c4c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4ca:	4a21      	ldr	r2, [pc, #132]	; (800c550 <HAL_UART_Transmit_DMA+0xd4>)
 800c4cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4d2:	4a20      	ldr	r2, [pc, #128]	; (800c554 <HAL_UART_Transmit_DMA+0xd8>)
 800c4d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4da:	4a1f      	ldr	r2, [pc, #124]	; (800c558 <HAL_UART_Transmit_DMA+0xdc>)
 800c4dc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800c4e6:	f107 0308 	add.w	r3, r7, #8
 800c4ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800c4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4f2:	6819      	ldr	r1, [r3, #0]
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	3304      	adds	r3, #4
 800c4fa:	461a      	mov	r2, r3
 800c4fc:	88fb      	ldrh	r3, [r7, #6]
 800c4fe:	f7fc fc87 	bl	8008e10 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c50a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	3314      	adds	r3, #20
 800c512:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c514:	69bb      	ldr	r3, [r7, #24]
 800c516:	e853 3f00 	ldrex	r3, [r3]
 800c51a:	617b      	str	r3, [r7, #20]
   return(result);
 800c51c:	697b      	ldr	r3, [r7, #20]
 800c51e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c522:	62bb      	str	r3, [r7, #40]	; 0x28
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	3314      	adds	r3, #20
 800c52a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c52c:	627a      	str	r2, [r7, #36]	; 0x24
 800c52e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c530:	6a39      	ldr	r1, [r7, #32]
 800c532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c534:	e841 2300 	strex	r3, r2, [r1]
 800c538:	61fb      	str	r3, [r7, #28]
   return(result);
 800c53a:	69fb      	ldr	r3, [r7, #28]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d1e5      	bne.n	800c50c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800c540:	2300      	movs	r3, #0
 800c542:	e000      	b.n	800c546 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800c544:	2302      	movs	r3, #2
  }
}
 800c546:	4618      	mov	r0, r3
 800c548:	3730      	adds	r7, #48	; 0x30
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}
 800c54e:	bf00      	nop
 800c550:	0800cb21 	.word	0x0800cb21
 800c554:	0800cbbb 	.word	0x0800cbbb
 800c558:	0800cd3f 	.word	0x0800cd3f

0800c55c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b084      	sub	sp, #16
 800c560:	af00      	add	r7, sp, #0
 800c562:	60f8      	str	r0, [r7, #12]
 800c564:	60b9      	str	r1, [r7, #8]
 800c566:	4613      	mov	r3, r2
 800c568:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c570:	b2db      	uxtb	r3, r3
 800c572:	2b20      	cmp	r3, #32
 800c574:	d112      	bne.n	800c59c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d002      	beq.n	800c582 <HAL_UART_Receive_DMA+0x26>
 800c57c:	88fb      	ldrh	r3, [r7, #6]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d101      	bne.n	800c586 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800c582:	2301      	movs	r3, #1
 800c584:	e00b      	b.n	800c59e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	2200      	movs	r2, #0
 800c58a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c58c:	88fb      	ldrh	r3, [r7, #6]
 800c58e:	461a      	mov	r2, r3
 800c590:	68b9      	ldr	r1, [r7, #8]
 800c592:	68f8      	ldr	r0, [r7, #12]
 800c594:	f000 fc1e 	bl	800cdd4 <UART_Start_Receive_DMA>
 800c598:	4603      	mov	r3, r0
 800c59a:	e000      	b.n	800c59e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800c59c:	2302      	movs	r3, #2
  }
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3710      	adds	r7, #16
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}
	...

0800c5a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b0ba      	sub	sp, #232	; 0xe8
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	68db      	ldr	r3, [r3, #12]
 800c5c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	695b      	ldr	r3, [r3, #20]
 800c5ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c5da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5de:	f003 030f 	and.w	r3, r3, #15
 800c5e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c5e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d10f      	bne.n	800c60e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c5ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5f2:	f003 0320 	and.w	r3, r3, #32
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d009      	beq.n	800c60e <HAL_UART_IRQHandler+0x66>
 800c5fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5fe:	f003 0320 	and.w	r3, r3, #32
 800c602:	2b00      	cmp	r3, #0
 800c604:	d003      	beq.n	800c60e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f000 fd85 	bl	800d116 <UART_Receive_IT>
      return;
 800c60c:	e25b      	b.n	800cac6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c60e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c612:	2b00      	cmp	r3, #0
 800c614:	f000 80de 	beq.w	800c7d4 <HAL_UART_IRQHandler+0x22c>
 800c618:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c61c:	f003 0301 	and.w	r3, r3, #1
 800c620:	2b00      	cmp	r3, #0
 800c622:	d106      	bne.n	800c632 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c628:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	f000 80d1 	beq.w	800c7d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c636:	f003 0301 	and.w	r3, r3, #1
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d00b      	beq.n	800c656 <HAL_UART_IRQHandler+0xae>
 800c63e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c646:	2b00      	cmp	r3, #0
 800c648:	d005      	beq.n	800c656 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c64e:	f043 0201 	orr.w	r2, r3, #1
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c65a:	f003 0304 	and.w	r3, r3, #4
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d00b      	beq.n	800c67a <HAL_UART_IRQHandler+0xd2>
 800c662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c666:	f003 0301 	and.w	r3, r3, #1
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d005      	beq.n	800c67a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c672:	f043 0202 	orr.w	r2, r3, #2
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c67a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c67e:	f003 0302 	and.w	r3, r3, #2
 800c682:	2b00      	cmp	r3, #0
 800c684:	d00b      	beq.n	800c69e <HAL_UART_IRQHandler+0xf6>
 800c686:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c68a:	f003 0301 	and.w	r3, r3, #1
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d005      	beq.n	800c69e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c696:	f043 0204 	orr.w	r2, r3, #4
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c69e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6a2:	f003 0308 	and.w	r3, r3, #8
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d011      	beq.n	800c6ce <HAL_UART_IRQHandler+0x126>
 800c6aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6ae:	f003 0320 	and.w	r3, r3, #32
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d105      	bne.n	800c6c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c6b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c6ba:	f003 0301 	and.w	r3, r3, #1
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d005      	beq.n	800c6ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6c6:	f043 0208 	orr.w	r2, r3, #8
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	f000 81f2 	beq.w	800cabc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c6d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6dc:	f003 0320 	and.w	r3, r3, #32
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d008      	beq.n	800c6f6 <HAL_UART_IRQHandler+0x14e>
 800c6e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6e8:	f003 0320 	and.w	r3, r3, #32
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d002      	beq.n	800c6f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f000 fd10 	bl	800d116 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	695b      	ldr	r3, [r3, #20]
 800c6fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c700:	2b40      	cmp	r3, #64	; 0x40
 800c702:	bf0c      	ite	eq
 800c704:	2301      	moveq	r3, #1
 800c706:	2300      	movne	r3, #0
 800c708:	b2db      	uxtb	r3, r3
 800c70a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c712:	f003 0308 	and.w	r3, r3, #8
 800c716:	2b00      	cmp	r3, #0
 800c718:	d103      	bne.n	800c722 <HAL_UART_IRQHandler+0x17a>
 800c71a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d04f      	beq.n	800c7c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f000 fc18 	bl	800cf58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	695b      	ldr	r3, [r3, #20]
 800c72e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c732:	2b40      	cmp	r3, #64	; 0x40
 800c734:	d141      	bne.n	800c7ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	3314      	adds	r3, #20
 800c73c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c740:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c744:	e853 3f00 	ldrex	r3, [r3]
 800c748:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c74c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c750:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c754:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	3314      	adds	r3, #20
 800c75e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c762:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c766:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c76a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c76e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c772:	e841 2300 	strex	r3, r2, [r1]
 800c776:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c77a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d1d9      	bne.n	800c736 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c786:	2b00      	cmp	r3, #0
 800c788:	d013      	beq.n	800c7b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c78e:	4a7e      	ldr	r2, [pc, #504]	; (800c988 <HAL_UART_IRQHandler+0x3e0>)
 800c790:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c796:	4618      	mov	r0, r3
 800c798:	f7fc fc02 	bl	8008fa0 <HAL_DMA_Abort_IT>
 800c79c:	4603      	mov	r3, r0
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d016      	beq.n	800c7d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7a8:	687a      	ldr	r2, [r7, #4]
 800c7aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c7ac:	4610      	mov	r0, r2
 800c7ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7b0:	e00e      	b.n	800c7d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f000 f99e 	bl	800caf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7b8:	e00a      	b.n	800c7d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c7ba:	6878      	ldr	r0, [r7, #4]
 800c7bc:	f000 f99a 	bl	800caf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7c0:	e006      	b.n	800c7d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f000 f996 	bl	800caf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800c7ce:	e175      	b.n	800cabc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7d0:	bf00      	nop
    return;
 800c7d2:	e173      	b.n	800cabc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7d8:	2b01      	cmp	r3, #1
 800c7da:	f040 814f 	bne.w	800ca7c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c7de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7e2:	f003 0310 	and.w	r3, r3, #16
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	f000 8148 	beq.w	800ca7c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c7ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7f0:	f003 0310 	and.w	r3, r3, #16
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	f000 8141 	beq.w	800ca7c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	60bb      	str	r3, [r7, #8]
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	60bb      	str	r3, [r7, #8]
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	685b      	ldr	r3, [r3, #4]
 800c80c:	60bb      	str	r3, [r7, #8]
 800c80e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	695b      	ldr	r3, [r3, #20]
 800c816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c81a:	2b40      	cmp	r3, #64	; 0x40
 800c81c:	f040 80b6 	bne.w	800c98c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	685b      	ldr	r3, [r3, #4]
 800c828:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c82c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c830:	2b00      	cmp	r3, #0
 800c832:	f000 8145 	beq.w	800cac0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c83a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c83e:	429a      	cmp	r2, r3
 800c840:	f080 813e 	bcs.w	800cac0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c84a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c850:	69db      	ldr	r3, [r3, #28]
 800c852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c856:	f000 8088 	beq.w	800c96a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	330c      	adds	r3, #12
 800c860:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c864:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c868:	e853 3f00 	ldrex	r3, [r3]
 800c86c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c870:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c874:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c878:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	330c      	adds	r3, #12
 800c882:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c886:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c88a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c88e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c892:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c896:	e841 2300 	strex	r3, r2, [r1]
 800c89a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c89e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d1d9      	bne.n	800c85a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	3314      	adds	r3, #20
 800c8ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c8b0:	e853 3f00 	ldrex	r3, [r3]
 800c8b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c8b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c8b8:	f023 0301 	bic.w	r3, r3, #1
 800c8bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	3314      	adds	r3, #20
 800c8c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c8ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c8ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c8d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c8d6:	e841 2300 	strex	r3, r2, [r1]
 800c8da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c8dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d1e1      	bne.n	800c8a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	3314      	adds	r3, #20
 800c8e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c8ec:	e853 3f00 	ldrex	r3, [r3]
 800c8f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c8f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c8f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c8f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	3314      	adds	r3, #20
 800c902:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c906:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c908:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c90a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c90c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c90e:	e841 2300 	strex	r3, r2, [r1]
 800c912:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c914:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c916:	2b00      	cmp	r3, #0
 800c918:	d1e3      	bne.n	800c8e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2220      	movs	r2, #32
 800c91e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2200      	movs	r2, #0
 800c926:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	330c      	adds	r3, #12
 800c92e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c932:	e853 3f00 	ldrex	r3, [r3]
 800c936:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c93a:	f023 0310 	bic.w	r3, r3, #16
 800c93e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	330c      	adds	r3, #12
 800c948:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c94c:	65ba      	str	r2, [r7, #88]	; 0x58
 800c94e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c950:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c952:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c954:	e841 2300 	strex	r3, r2, [r1]
 800c958:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c95a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d1e3      	bne.n	800c928 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c964:	4618      	mov	r0, r3
 800c966:	f7fc faab 	bl	8008ec0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2202      	movs	r2, #2
 800c96e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c978:	b29b      	uxth	r3, r3
 800c97a:	1ad3      	subs	r3, r2, r3
 800c97c:	b29b      	uxth	r3, r3
 800c97e:	4619      	mov	r1, r3
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f000 f8c1 	bl	800cb08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c986:	e09b      	b.n	800cac0 <HAL_UART_IRQHandler+0x518>
 800c988:	0800d01f 	.word	0x0800d01f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c994:	b29b      	uxth	r3, r3
 800c996:	1ad3      	subs	r3, r2, r3
 800c998:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c9a0:	b29b      	uxth	r3, r3
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	f000 808e 	beq.w	800cac4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c9a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	f000 8089 	beq.w	800cac4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	330c      	adds	r3, #12
 800c9b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9bc:	e853 3f00 	ldrex	r3, [r3]
 800c9c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c9c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c9c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	330c      	adds	r3, #12
 800c9d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c9d6:	647a      	str	r2, [r7, #68]	; 0x44
 800c9d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c9dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c9de:	e841 2300 	strex	r3, r2, [r1]
 800c9e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c9e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d1e3      	bne.n	800c9b2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	3314      	adds	r3, #20
 800c9f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f4:	e853 3f00 	ldrex	r3, [r3]
 800c9f8:	623b      	str	r3, [r7, #32]
   return(result);
 800c9fa:	6a3b      	ldr	r3, [r7, #32]
 800c9fc:	f023 0301 	bic.w	r3, r3, #1
 800ca00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	3314      	adds	r3, #20
 800ca0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ca0e:	633a      	str	r2, [r7, #48]	; 0x30
 800ca10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ca14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca16:	e841 2300 	strex	r3, r2, [r1]
 800ca1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ca1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d1e3      	bne.n	800c9ea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2220      	movs	r2, #32
 800ca26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	330c      	adds	r3, #12
 800ca36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca38:	693b      	ldr	r3, [r7, #16]
 800ca3a:	e853 3f00 	ldrex	r3, [r3]
 800ca3e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	f023 0310 	bic.w	r3, r3, #16
 800ca46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	330c      	adds	r3, #12
 800ca50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ca54:	61fa      	str	r2, [r7, #28]
 800ca56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca58:	69b9      	ldr	r1, [r7, #24]
 800ca5a:	69fa      	ldr	r2, [r7, #28]
 800ca5c:	e841 2300 	strex	r3, r2, [r1]
 800ca60:	617b      	str	r3, [r7, #20]
   return(result);
 800ca62:	697b      	ldr	r3, [r7, #20]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d1e3      	bne.n	800ca30 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2202      	movs	r2, #2
 800ca6c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ca6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ca72:	4619      	mov	r1, r3
 800ca74:	6878      	ldr	r0, [r7, #4]
 800ca76:	f000 f847 	bl	800cb08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ca7a:	e023      	b.n	800cac4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ca7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d009      	beq.n	800ca9c <HAL_UART_IRQHandler+0x4f4>
 800ca88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d003      	beq.n	800ca9c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f000 fad6 	bl	800d046 <UART_Transmit_IT>
    return;
 800ca9a:	e014      	b.n	800cac6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ca9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800caa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d00e      	beq.n	800cac6 <HAL_UART_IRQHandler+0x51e>
 800caa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800caac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d008      	beq.n	800cac6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f000 fb16 	bl	800d0e6 <UART_EndTransmit_IT>
    return;
 800caba:	e004      	b.n	800cac6 <HAL_UART_IRQHandler+0x51e>
    return;
 800cabc:	bf00      	nop
 800cabe:	e002      	b.n	800cac6 <HAL_UART_IRQHandler+0x51e>
      return;
 800cac0:	bf00      	nop
 800cac2:	e000      	b.n	800cac6 <HAL_UART_IRQHandler+0x51e>
      return;
 800cac4:	bf00      	nop
  }
}
 800cac6:	37e8      	adds	r7, #232	; 0xe8
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}

0800cacc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cacc:	b480      	push	{r7}
 800cace:	b083      	sub	sp, #12
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800cad4:	bf00      	nop
 800cad6:	370c      	adds	r7, #12
 800cad8:	46bd      	mov	sp, r7
 800cada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cade:	4770      	bx	lr

0800cae0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cae0:	b480      	push	{r7}
 800cae2:	b083      	sub	sp, #12
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800cae8:	bf00      	nop
 800caea:	370c      	adds	r7, #12
 800caec:	46bd      	mov	sp, r7
 800caee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf2:	4770      	bx	lr

0800caf4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800caf4:	b480      	push	{r7}
 800caf6:	b083      	sub	sp, #12
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800cafc:	bf00      	nop
 800cafe:	370c      	adds	r7, #12
 800cb00:	46bd      	mov	sp, r7
 800cb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb06:	4770      	bx	lr

0800cb08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b083      	sub	sp, #12
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
 800cb10:	460b      	mov	r3, r1
 800cb12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cb14:	bf00      	nop
 800cb16:	370c      	adds	r7, #12
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1e:	4770      	bx	lr

0800cb20 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b090      	sub	sp, #64	; 0x40
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d137      	bne.n	800cbac <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800cb3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb3e:	2200      	movs	r2, #0
 800cb40:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cb42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	3314      	adds	r3, #20
 800cb48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb4c:	e853 3f00 	ldrex	r3, [r3]
 800cb50:	623b      	str	r3, [r7, #32]
   return(result);
 800cb52:	6a3b      	ldr	r3, [r7, #32]
 800cb54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cb58:	63bb      	str	r3, [r7, #56]	; 0x38
 800cb5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	3314      	adds	r3, #20
 800cb60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb62:	633a      	str	r2, [r7, #48]	; 0x30
 800cb64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cb68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb6a:	e841 2300 	strex	r3, r2, [r1]
 800cb6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cb70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d1e5      	bne.n	800cb42 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cb76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	330c      	adds	r3, #12
 800cb7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb7e:	693b      	ldr	r3, [r7, #16]
 800cb80:	e853 3f00 	ldrex	r3, [r3]
 800cb84:	60fb      	str	r3, [r7, #12]
   return(result);
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb8c:	637b      	str	r3, [r7, #52]	; 0x34
 800cb8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	330c      	adds	r3, #12
 800cb94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb96:	61fa      	str	r2, [r7, #28]
 800cb98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb9a:	69b9      	ldr	r1, [r7, #24]
 800cb9c:	69fa      	ldr	r2, [r7, #28]
 800cb9e:	e841 2300 	strex	r3, r2, [r1]
 800cba2:	617b      	str	r3, [r7, #20]
   return(result);
 800cba4:	697b      	ldr	r3, [r7, #20]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d1e5      	bne.n	800cb76 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cbaa:	e002      	b.n	800cbb2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800cbac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800cbae:	f7fa f9d9 	bl	8006f64 <HAL_UART_TxCpltCallback>
}
 800cbb2:	bf00      	nop
 800cbb4:	3740      	adds	r7, #64	; 0x40
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}

0800cbba <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cbba:	b580      	push	{r7, lr}
 800cbbc:	b084      	sub	sp, #16
 800cbbe:	af00      	add	r7, sp, #0
 800cbc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbc6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800cbc8:	68f8      	ldr	r0, [r7, #12]
 800cbca:	f7ff ff7f 	bl	800cacc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cbce:	bf00      	nop
 800cbd0:	3710      	adds	r7, #16
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bd80      	pop	{r7, pc}

0800cbd6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cbd6:	b580      	push	{r7, lr}
 800cbd8:	b09c      	sub	sp, #112	; 0x70
 800cbda:	af00      	add	r7, sp, #0
 800cbdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbe2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d172      	bne.n	800ccd8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800cbf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cbf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	330c      	adds	r3, #12
 800cbfe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc02:	e853 3f00 	ldrex	r3, [r3]
 800cc06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cc08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cc0e:	66bb      	str	r3, [r7, #104]	; 0x68
 800cc10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	330c      	adds	r3, #12
 800cc16:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cc18:	65ba      	str	r2, [r7, #88]	; 0x58
 800cc1a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cc1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cc20:	e841 2300 	strex	r3, r2, [r1]
 800cc24:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cc26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d1e5      	bne.n	800cbf8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	3314      	adds	r3, #20
 800cc32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc36:	e853 3f00 	ldrex	r3, [r3]
 800cc3a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cc3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc3e:	f023 0301 	bic.w	r3, r3, #1
 800cc42:	667b      	str	r3, [r7, #100]	; 0x64
 800cc44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	3314      	adds	r3, #20
 800cc4a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cc4c:	647a      	str	r2, [r7, #68]	; 0x44
 800cc4e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cc52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cc54:	e841 2300 	strex	r3, r2, [r1]
 800cc58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cc5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d1e5      	bne.n	800cc2c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cc60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	3314      	adds	r3, #20
 800cc66:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc6a:	e853 3f00 	ldrex	r3, [r3]
 800cc6e:	623b      	str	r3, [r7, #32]
   return(result);
 800cc70:	6a3b      	ldr	r3, [r7, #32]
 800cc72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc76:	663b      	str	r3, [r7, #96]	; 0x60
 800cc78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	3314      	adds	r3, #20
 800cc7e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cc80:	633a      	str	r2, [r7, #48]	; 0x30
 800cc82:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cc86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc88:	e841 2300 	strex	r3, r2, [r1]
 800cc8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cc8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d1e5      	bne.n	800cc60 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cc94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc96:	2220      	movs	r2, #32
 800cc98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cca0:	2b01      	cmp	r3, #1
 800cca2:	d119      	bne.n	800ccd8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	330c      	adds	r3, #12
 800ccaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccac:	693b      	ldr	r3, [r7, #16]
 800ccae:	e853 3f00 	ldrex	r3, [r3]
 800ccb2:	60fb      	str	r3, [r7, #12]
   return(result);
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	f023 0310 	bic.w	r3, r3, #16
 800ccba:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ccbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	330c      	adds	r3, #12
 800ccc2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ccc4:	61fa      	str	r2, [r7, #28]
 800ccc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccc8:	69b9      	ldr	r1, [r7, #24]
 800ccca:	69fa      	ldr	r2, [r7, #28]
 800cccc:	e841 2300 	strex	r3, r2, [r1]
 800ccd0:	617b      	str	r3, [r7, #20]
   return(result);
 800ccd2:	697b      	ldr	r3, [r7, #20]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d1e5      	bne.n	800cca4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ccd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccda:	2200      	movs	r2, #0
 800ccdc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ccde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cce2:	2b01      	cmp	r3, #1
 800cce4:	d106      	bne.n	800ccf4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cce8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ccea:	4619      	mov	r1, r3
 800ccec:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ccee:	f7ff ff0b 	bl	800cb08 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ccf2:	e002      	b.n	800ccfa <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800ccf4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ccf6:	f7fa f947 	bl	8006f88 <HAL_UART_RxCpltCallback>
}
 800ccfa:	bf00      	nop
 800ccfc:	3770      	adds	r7, #112	; 0x70
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}

0800cd02 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cd02:	b580      	push	{r7, lr}
 800cd04:	b084      	sub	sp, #16
 800cd06:	af00      	add	r7, sp, #0
 800cd08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd0e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	2201      	movs	r2, #1
 800cd14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd1a:	2b01      	cmp	r3, #1
 800cd1c:	d108      	bne.n	800cd30 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cd22:	085b      	lsrs	r3, r3, #1
 800cd24:	b29b      	uxth	r3, r3
 800cd26:	4619      	mov	r1, r3
 800cd28:	68f8      	ldr	r0, [r7, #12]
 800cd2a:	f7ff feed 	bl	800cb08 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cd2e:	e002      	b.n	800cd36 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800cd30:	68f8      	ldr	r0, [r7, #12]
 800cd32:	f7ff fed5 	bl	800cae0 <HAL_UART_RxHalfCpltCallback>
}
 800cd36:	bf00      	nop
 800cd38:	3710      	adds	r7, #16
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}

0800cd3e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cd3e:	b580      	push	{r7, lr}
 800cd40:	b084      	sub	sp, #16
 800cd42:	af00      	add	r7, sp, #0
 800cd44:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800cd46:	2300      	movs	r3, #0
 800cd48:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd4e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	695b      	ldr	r3, [r3, #20]
 800cd56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd5a:	2b80      	cmp	r3, #128	; 0x80
 800cd5c:	bf0c      	ite	eq
 800cd5e:	2301      	moveq	r3, #1
 800cd60:	2300      	movne	r3, #0
 800cd62:	b2db      	uxtb	r3, r3
 800cd64:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800cd66:	68bb      	ldr	r3, [r7, #8]
 800cd68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd6c:	b2db      	uxtb	r3, r3
 800cd6e:	2b21      	cmp	r3, #33	; 0x21
 800cd70:	d108      	bne.n	800cd84 <UART_DMAError+0x46>
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d005      	beq.n	800cd84 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800cd7e:	68b8      	ldr	r0, [r7, #8]
 800cd80:	f000 f8c2 	bl	800cf08 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800cd84:	68bb      	ldr	r3, [r7, #8]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	695b      	ldr	r3, [r3, #20]
 800cd8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd8e:	2b40      	cmp	r3, #64	; 0x40
 800cd90:	bf0c      	ite	eq
 800cd92:	2301      	moveq	r3, #1
 800cd94:	2300      	movne	r3, #0
 800cd96:	b2db      	uxtb	r3, r3
 800cd98:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cda0:	b2db      	uxtb	r3, r3
 800cda2:	2b22      	cmp	r3, #34	; 0x22
 800cda4:	d108      	bne.n	800cdb8 <UART_DMAError+0x7a>
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d005      	beq.n	800cdb8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800cdac:	68bb      	ldr	r3, [r7, #8]
 800cdae:	2200      	movs	r2, #0
 800cdb0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800cdb2:	68b8      	ldr	r0, [r7, #8]
 800cdb4:	f000 f8d0 	bl	800cf58 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdbc:	f043 0210 	orr.w	r2, r3, #16
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cdc4:	68b8      	ldr	r0, [r7, #8]
 800cdc6:	f7ff fe95 	bl	800caf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cdca:	bf00      	nop
 800cdcc:	3710      	adds	r7, #16
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}
	...

0800cdd4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b098      	sub	sp, #96	; 0x60
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	60f8      	str	r0, [r7, #12]
 800cddc:	60b9      	str	r1, [r7, #8]
 800cdde:	4613      	mov	r3, r2
 800cde0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800cde2:	68ba      	ldr	r2, [r7, #8]
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	88fa      	ldrh	r2, [r7, #6]
 800cdec:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	2222      	movs	r2, #34	; 0x22
 800cdf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce00:	4a3e      	ldr	r2, [pc, #248]	; (800cefc <UART_Start_Receive_DMA+0x128>)
 800ce02:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce08:	4a3d      	ldr	r2, [pc, #244]	; (800cf00 <UART_Start_Receive_DMA+0x12c>)
 800ce0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce10:	4a3c      	ldr	r2, [pc, #240]	; (800cf04 <UART_Start_Receive_DMA+0x130>)
 800ce12:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce18:	2200      	movs	r2, #0
 800ce1a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800ce1c:	f107 0308 	add.w	r3, r7, #8
 800ce20:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	3304      	adds	r3, #4
 800ce2c:	4619      	mov	r1, r3
 800ce2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce30:	681a      	ldr	r2, [r3, #0]
 800ce32:	88fb      	ldrh	r3, [r7, #6]
 800ce34:	f7fb ffec 	bl	8008e10 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800ce38:	2300      	movs	r3, #0
 800ce3a:	613b      	str	r3, [r7, #16]
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	613b      	str	r3, [r7, #16]
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	685b      	ldr	r3, [r3, #4]
 800ce4a:	613b      	str	r3, [r7, #16]
 800ce4c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	691b      	ldr	r3, [r3, #16]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d019      	beq.n	800ce8a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	330c      	adds	r3, #12
 800ce5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce60:	e853 3f00 	ldrex	r3, [r3]
 800ce64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ce66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce6c:	65bb      	str	r3, [r7, #88]	; 0x58
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	330c      	adds	r3, #12
 800ce74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ce76:	64fa      	str	r2, [r7, #76]	; 0x4c
 800ce78:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce7a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ce7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ce7e:	e841 2300 	strex	r3, r2, [r1]
 800ce82:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ce84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d1e5      	bne.n	800ce56 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	3314      	adds	r3, #20
 800ce90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce94:	e853 3f00 	ldrex	r3, [r3]
 800ce98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ce9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce9c:	f043 0301 	orr.w	r3, r3, #1
 800cea0:	657b      	str	r3, [r7, #84]	; 0x54
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	3314      	adds	r3, #20
 800cea8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ceaa:	63ba      	str	r2, [r7, #56]	; 0x38
 800ceac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ceb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ceb2:	e841 2300 	strex	r3, r2, [r1]
 800ceb6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ceb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d1e5      	bne.n	800ce8a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	3314      	adds	r3, #20
 800cec4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cec6:	69bb      	ldr	r3, [r7, #24]
 800cec8:	e853 3f00 	ldrex	r3, [r3]
 800cecc:	617b      	str	r3, [r7, #20]
   return(result);
 800cece:	697b      	ldr	r3, [r7, #20]
 800ced0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ced4:	653b      	str	r3, [r7, #80]	; 0x50
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	3314      	adds	r3, #20
 800cedc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cede:	627a      	str	r2, [r7, #36]	; 0x24
 800cee0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cee2:	6a39      	ldr	r1, [r7, #32]
 800cee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cee6:	e841 2300 	strex	r3, r2, [r1]
 800ceea:	61fb      	str	r3, [r7, #28]
   return(result);
 800ceec:	69fb      	ldr	r3, [r7, #28]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d1e5      	bne.n	800cebe <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800cef2:	2300      	movs	r3, #0
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	3760      	adds	r7, #96	; 0x60
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}
 800cefc:	0800cbd7 	.word	0x0800cbd7
 800cf00:	0800cd03 	.word	0x0800cd03
 800cf04:	0800cd3f 	.word	0x0800cd3f

0800cf08 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b089      	sub	sp, #36	; 0x24
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	330c      	adds	r3, #12
 800cf16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	e853 3f00 	ldrex	r3, [r3]
 800cf1e:	60bb      	str	r3, [r7, #8]
   return(result);
 800cf20:	68bb      	ldr	r3, [r7, #8]
 800cf22:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cf26:	61fb      	str	r3, [r7, #28]
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	330c      	adds	r3, #12
 800cf2e:	69fa      	ldr	r2, [r7, #28]
 800cf30:	61ba      	str	r2, [r7, #24]
 800cf32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf34:	6979      	ldr	r1, [r7, #20]
 800cf36:	69ba      	ldr	r2, [r7, #24]
 800cf38:	e841 2300 	strex	r3, r2, [r1]
 800cf3c:	613b      	str	r3, [r7, #16]
   return(result);
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d1e5      	bne.n	800cf10 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2220      	movs	r2, #32
 800cf48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800cf4c:	bf00      	nop
 800cf4e:	3724      	adds	r7, #36	; 0x24
 800cf50:	46bd      	mov	sp, r7
 800cf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf56:	4770      	bx	lr

0800cf58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cf58:	b480      	push	{r7}
 800cf5a:	b095      	sub	sp, #84	; 0x54
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	330c      	adds	r3, #12
 800cf66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf6a:	e853 3f00 	ldrex	r3, [r3]
 800cf6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cf70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cf76:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	330c      	adds	r3, #12
 800cf7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cf80:	643a      	str	r2, [r7, #64]	; 0x40
 800cf82:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cf86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cf88:	e841 2300 	strex	r3, r2, [r1]
 800cf8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cf8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d1e5      	bne.n	800cf60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	3314      	adds	r3, #20
 800cf9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf9c:	6a3b      	ldr	r3, [r7, #32]
 800cf9e:	e853 3f00 	ldrex	r3, [r3]
 800cfa2:	61fb      	str	r3, [r7, #28]
   return(result);
 800cfa4:	69fb      	ldr	r3, [r7, #28]
 800cfa6:	f023 0301 	bic.w	r3, r3, #1
 800cfaa:	64bb      	str	r3, [r7, #72]	; 0x48
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	3314      	adds	r3, #20
 800cfb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cfb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cfb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cfba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cfbc:	e841 2300 	strex	r3, r2, [r1]
 800cfc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cfc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d1e5      	bne.n	800cf94 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfcc:	2b01      	cmp	r3, #1
 800cfce:	d119      	bne.n	800d004 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	330c      	adds	r3, #12
 800cfd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	e853 3f00 	ldrex	r3, [r3]
 800cfde:	60bb      	str	r3, [r7, #8]
   return(result);
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	f023 0310 	bic.w	r3, r3, #16
 800cfe6:	647b      	str	r3, [r7, #68]	; 0x44
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	330c      	adds	r3, #12
 800cfee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cff0:	61ba      	str	r2, [r7, #24]
 800cff2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cff4:	6979      	ldr	r1, [r7, #20]
 800cff6:	69ba      	ldr	r2, [r7, #24]
 800cff8:	e841 2300 	strex	r3, r2, [r1]
 800cffc:	613b      	str	r3, [r7, #16]
   return(result);
 800cffe:	693b      	ldr	r3, [r7, #16]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d1e5      	bne.n	800cfd0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2220      	movs	r2, #32
 800d008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2200      	movs	r2, #0
 800d010:	631a      	str	r2, [r3, #48]	; 0x30
}
 800d012:	bf00      	nop
 800d014:	3754      	adds	r7, #84	; 0x54
 800d016:	46bd      	mov	sp, r7
 800d018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01c:	4770      	bx	lr

0800d01e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d01e:	b580      	push	{r7, lr}
 800d020:	b084      	sub	sp, #16
 800d022:	af00      	add	r7, sp, #0
 800d024:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d02a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	2200      	movs	r2, #0
 800d030:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	2200      	movs	r2, #0
 800d036:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d038:	68f8      	ldr	r0, [r7, #12]
 800d03a:	f7ff fd5b 	bl	800caf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d03e:	bf00      	nop
 800d040:	3710      	adds	r7, #16
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}

0800d046 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d046:	b480      	push	{r7}
 800d048:	b085      	sub	sp, #20
 800d04a:	af00      	add	r7, sp, #0
 800d04c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d054:	b2db      	uxtb	r3, r3
 800d056:	2b21      	cmp	r3, #33	; 0x21
 800d058:	d13e      	bne.n	800d0d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	689b      	ldr	r3, [r3, #8]
 800d05e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d062:	d114      	bne.n	800d08e <UART_Transmit_IT+0x48>
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	691b      	ldr	r3, [r3, #16]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d110      	bne.n	800d08e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	6a1b      	ldr	r3, [r3, #32]
 800d070:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	881b      	ldrh	r3, [r3, #0]
 800d076:	461a      	mov	r2, r3
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d080:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6a1b      	ldr	r3, [r3, #32]
 800d086:	1c9a      	adds	r2, r3, #2
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	621a      	str	r2, [r3, #32]
 800d08c:	e008      	b.n	800d0a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6a1b      	ldr	r3, [r3, #32]
 800d092:	1c59      	adds	r1, r3, #1
 800d094:	687a      	ldr	r2, [r7, #4]
 800d096:	6211      	str	r1, [r2, #32]
 800d098:	781a      	ldrb	r2, [r3, #0]
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d0a4:	b29b      	uxth	r3, r3
 800d0a6:	3b01      	subs	r3, #1
 800d0a8:	b29b      	uxth	r3, r3
 800d0aa:	687a      	ldr	r2, [r7, #4]
 800d0ac:	4619      	mov	r1, r3
 800d0ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d10f      	bne.n	800d0d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	68da      	ldr	r2, [r3, #12]
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d0c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	68da      	ldr	r2, [r3, #12]
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d0d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	e000      	b.n	800d0da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d0d8:	2302      	movs	r3, #2
  }
}
 800d0da:	4618      	mov	r0, r3
 800d0dc:	3714      	adds	r7, #20
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e4:	4770      	bx	lr

0800d0e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d0e6:	b580      	push	{r7, lr}
 800d0e8:	b082      	sub	sp, #8
 800d0ea:	af00      	add	r7, sp, #0
 800d0ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	68da      	ldr	r2, [r3, #12]
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d0fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	2220      	movs	r2, #32
 800d102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	f7f9 ff2c 	bl	8006f64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d10c:	2300      	movs	r3, #0
}
 800d10e:	4618      	mov	r0, r3
 800d110:	3708      	adds	r7, #8
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}

0800d116 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d116:	b580      	push	{r7, lr}
 800d118:	b08c      	sub	sp, #48	; 0x30
 800d11a:	af00      	add	r7, sp, #0
 800d11c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d124:	b2db      	uxtb	r3, r3
 800d126:	2b22      	cmp	r3, #34	; 0x22
 800d128:	f040 80ae 	bne.w	800d288 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	689b      	ldr	r3, [r3, #8]
 800d130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d134:	d117      	bne.n	800d166 <UART_Receive_IT+0x50>
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	691b      	ldr	r3, [r3, #16]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d113      	bne.n	800d166 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800d13e:	2300      	movs	r3, #0
 800d140:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d146:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	685b      	ldr	r3, [r3, #4]
 800d14e:	b29b      	uxth	r3, r3
 800d150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d154:	b29a      	uxth	r2, r3
 800d156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d158:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d15e:	1c9a      	adds	r2, r3, #2
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	629a      	str	r2, [r3, #40]	; 0x28
 800d164:	e026      	b.n	800d1b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d16a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800d16c:	2300      	movs	r3, #0
 800d16e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	689b      	ldr	r3, [r3, #8]
 800d174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d178:	d007      	beq.n	800d18a <UART_Receive_IT+0x74>
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	689b      	ldr	r3, [r3, #8]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d10a      	bne.n	800d198 <UART_Receive_IT+0x82>
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	691b      	ldr	r3, [r3, #16]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d106      	bne.n	800d198 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	685b      	ldr	r3, [r3, #4]
 800d190:	b2da      	uxtb	r2, r3
 800d192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d194:	701a      	strb	r2, [r3, #0]
 800d196:	e008      	b.n	800d1aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	685b      	ldr	r3, [r3, #4]
 800d19e:	b2db      	uxtb	r3, r3
 800d1a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1a4:	b2da      	uxtb	r2, r3
 800d1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1ae:	1c5a      	adds	r2, r3, #1
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d1b8:	b29b      	uxth	r3, r3
 800d1ba:	3b01      	subs	r3, #1
 800d1bc:	b29b      	uxth	r3, r3
 800d1be:	687a      	ldr	r2, [r7, #4]
 800d1c0:	4619      	mov	r1, r3
 800d1c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d15d      	bne.n	800d284 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	68da      	ldr	r2, [r3, #12]
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	f022 0220 	bic.w	r2, r2, #32
 800d1d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	68da      	ldr	r2, [r3, #12]
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d1e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	695a      	ldr	r2, [r3, #20]
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	f022 0201 	bic.w	r2, r2, #1
 800d1f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2220      	movs	r2, #32
 800d1fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2200      	movs	r2, #0
 800d204:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d20a:	2b01      	cmp	r3, #1
 800d20c:	d135      	bne.n	800d27a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2200      	movs	r2, #0
 800d212:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	330c      	adds	r3, #12
 800d21a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	e853 3f00 	ldrex	r3, [r3]
 800d222:	613b      	str	r3, [r7, #16]
   return(result);
 800d224:	693b      	ldr	r3, [r7, #16]
 800d226:	f023 0310 	bic.w	r3, r3, #16
 800d22a:	627b      	str	r3, [r7, #36]	; 0x24
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	330c      	adds	r3, #12
 800d232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d234:	623a      	str	r2, [r7, #32]
 800d236:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d238:	69f9      	ldr	r1, [r7, #28]
 800d23a:	6a3a      	ldr	r2, [r7, #32]
 800d23c:	e841 2300 	strex	r3, r2, [r1]
 800d240:	61bb      	str	r3, [r7, #24]
   return(result);
 800d242:	69bb      	ldr	r3, [r7, #24]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d1e5      	bne.n	800d214 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	f003 0310 	and.w	r3, r3, #16
 800d252:	2b10      	cmp	r3, #16
 800d254:	d10a      	bne.n	800d26c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d256:	2300      	movs	r3, #0
 800d258:	60fb      	str	r3, [r7, #12]
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	60fb      	str	r3, [r7, #12]
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	685b      	ldr	r3, [r3, #4]
 800d268:	60fb      	str	r3, [r7, #12]
 800d26a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d270:	4619      	mov	r1, r3
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f7ff fc48 	bl	800cb08 <HAL_UARTEx_RxEventCallback>
 800d278:	e002      	b.n	800d280 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f7f9 fe84 	bl	8006f88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d280:	2300      	movs	r3, #0
 800d282:	e002      	b.n	800d28a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800d284:	2300      	movs	r3, #0
 800d286:	e000      	b.n	800d28a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800d288:	2302      	movs	r3, #2
  }
}
 800d28a:	4618      	mov	r0, r3
 800d28c:	3730      	adds	r7, #48	; 0x30
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}
	...

0800d294 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d294:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d298:	b0c0      	sub	sp, #256	; 0x100
 800d29a:	af00      	add	r7, sp, #0
 800d29c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d2a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	691b      	ldr	r3, [r3, #16]
 800d2a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800d2ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d2b0:	68d9      	ldr	r1, [r3, #12]
 800d2b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d2b6:	681a      	ldr	r2, [r3, #0]
 800d2b8:	ea40 0301 	orr.w	r3, r0, r1
 800d2bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d2be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d2c2:	689a      	ldr	r2, [r3, #8]
 800d2c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d2c8:	691b      	ldr	r3, [r3, #16]
 800d2ca:	431a      	orrs	r2, r3
 800d2cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d2d0:	695b      	ldr	r3, [r3, #20]
 800d2d2:	431a      	orrs	r2, r3
 800d2d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d2d8:	69db      	ldr	r3, [r3, #28]
 800d2da:	4313      	orrs	r3, r2
 800d2dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800d2e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	68db      	ldr	r3, [r3, #12]
 800d2e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800d2ec:	f021 010c 	bic.w	r1, r1, #12
 800d2f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d2f4:	681a      	ldr	r2, [r3, #0]
 800d2f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d2fa:	430b      	orrs	r3, r1
 800d2fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d2fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	695b      	ldr	r3, [r3, #20]
 800d306:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800d30a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d30e:	6999      	ldr	r1, [r3, #24]
 800d310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d314:	681a      	ldr	r2, [r3, #0]
 800d316:	ea40 0301 	orr.w	r3, r0, r1
 800d31a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d31c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d320:	681a      	ldr	r2, [r3, #0]
 800d322:	4b8f      	ldr	r3, [pc, #572]	; (800d560 <UART_SetConfig+0x2cc>)
 800d324:	429a      	cmp	r2, r3
 800d326:	d005      	beq.n	800d334 <UART_SetConfig+0xa0>
 800d328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d32c:	681a      	ldr	r2, [r3, #0]
 800d32e:	4b8d      	ldr	r3, [pc, #564]	; (800d564 <UART_SetConfig+0x2d0>)
 800d330:	429a      	cmp	r2, r3
 800d332:	d104      	bne.n	800d33e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d334:	f7fd ff8a 	bl	800b24c <HAL_RCC_GetPCLK2Freq>
 800d338:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800d33c:	e003      	b.n	800d346 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d33e:	f7fd ff71 	bl	800b224 <HAL_RCC_GetPCLK1Freq>
 800d342:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d34a:	69db      	ldr	r3, [r3, #28]
 800d34c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d350:	f040 810c 	bne.w	800d56c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d354:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d358:	2200      	movs	r2, #0
 800d35a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d35e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800d362:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800d366:	4622      	mov	r2, r4
 800d368:	462b      	mov	r3, r5
 800d36a:	1891      	adds	r1, r2, r2
 800d36c:	65b9      	str	r1, [r7, #88]	; 0x58
 800d36e:	415b      	adcs	r3, r3
 800d370:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d372:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800d376:	4621      	mov	r1, r4
 800d378:	eb12 0801 	adds.w	r8, r2, r1
 800d37c:	4629      	mov	r1, r5
 800d37e:	eb43 0901 	adc.w	r9, r3, r1
 800d382:	f04f 0200 	mov.w	r2, #0
 800d386:	f04f 0300 	mov.w	r3, #0
 800d38a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d38e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d392:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d396:	4690      	mov	r8, r2
 800d398:	4699      	mov	r9, r3
 800d39a:	4623      	mov	r3, r4
 800d39c:	eb18 0303 	adds.w	r3, r8, r3
 800d3a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d3a4:	462b      	mov	r3, r5
 800d3a6:	eb49 0303 	adc.w	r3, r9, r3
 800d3aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d3ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d3b2:	685b      	ldr	r3, [r3, #4]
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d3ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800d3be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800d3c2:	460b      	mov	r3, r1
 800d3c4:	18db      	adds	r3, r3, r3
 800d3c6:	653b      	str	r3, [r7, #80]	; 0x50
 800d3c8:	4613      	mov	r3, r2
 800d3ca:	eb42 0303 	adc.w	r3, r2, r3
 800d3ce:	657b      	str	r3, [r7, #84]	; 0x54
 800d3d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d3d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800d3d8:	f7f3 fc46 	bl	8000c68 <__aeabi_uldivmod>
 800d3dc:	4602      	mov	r2, r0
 800d3de:	460b      	mov	r3, r1
 800d3e0:	4b61      	ldr	r3, [pc, #388]	; (800d568 <UART_SetConfig+0x2d4>)
 800d3e2:	fba3 2302 	umull	r2, r3, r3, r2
 800d3e6:	095b      	lsrs	r3, r3, #5
 800d3e8:	011c      	lsls	r4, r3, #4
 800d3ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d3f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800d3f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800d3fc:	4642      	mov	r2, r8
 800d3fe:	464b      	mov	r3, r9
 800d400:	1891      	adds	r1, r2, r2
 800d402:	64b9      	str	r1, [r7, #72]	; 0x48
 800d404:	415b      	adcs	r3, r3
 800d406:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d408:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d40c:	4641      	mov	r1, r8
 800d40e:	eb12 0a01 	adds.w	sl, r2, r1
 800d412:	4649      	mov	r1, r9
 800d414:	eb43 0b01 	adc.w	fp, r3, r1
 800d418:	f04f 0200 	mov.w	r2, #0
 800d41c:	f04f 0300 	mov.w	r3, #0
 800d420:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d424:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d428:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d42c:	4692      	mov	sl, r2
 800d42e:	469b      	mov	fp, r3
 800d430:	4643      	mov	r3, r8
 800d432:	eb1a 0303 	adds.w	r3, sl, r3
 800d436:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d43a:	464b      	mov	r3, r9
 800d43c:	eb4b 0303 	adc.w	r3, fp, r3
 800d440:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d448:	685b      	ldr	r3, [r3, #4]
 800d44a:	2200      	movs	r2, #0
 800d44c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d450:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800d454:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d458:	460b      	mov	r3, r1
 800d45a:	18db      	adds	r3, r3, r3
 800d45c:	643b      	str	r3, [r7, #64]	; 0x40
 800d45e:	4613      	mov	r3, r2
 800d460:	eb42 0303 	adc.w	r3, r2, r3
 800d464:	647b      	str	r3, [r7, #68]	; 0x44
 800d466:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d46a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d46e:	f7f3 fbfb 	bl	8000c68 <__aeabi_uldivmod>
 800d472:	4602      	mov	r2, r0
 800d474:	460b      	mov	r3, r1
 800d476:	4611      	mov	r1, r2
 800d478:	4b3b      	ldr	r3, [pc, #236]	; (800d568 <UART_SetConfig+0x2d4>)
 800d47a:	fba3 2301 	umull	r2, r3, r3, r1
 800d47e:	095b      	lsrs	r3, r3, #5
 800d480:	2264      	movs	r2, #100	; 0x64
 800d482:	fb02 f303 	mul.w	r3, r2, r3
 800d486:	1acb      	subs	r3, r1, r3
 800d488:	00db      	lsls	r3, r3, #3
 800d48a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800d48e:	4b36      	ldr	r3, [pc, #216]	; (800d568 <UART_SetConfig+0x2d4>)
 800d490:	fba3 2302 	umull	r2, r3, r3, r2
 800d494:	095b      	lsrs	r3, r3, #5
 800d496:	005b      	lsls	r3, r3, #1
 800d498:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d49c:	441c      	add	r4, r3
 800d49e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d4a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800d4ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800d4b0:	4642      	mov	r2, r8
 800d4b2:	464b      	mov	r3, r9
 800d4b4:	1891      	adds	r1, r2, r2
 800d4b6:	63b9      	str	r1, [r7, #56]	; 0x38
 800d4b8:	415b      	adcs	r3, r3
 800d4ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d4bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d4c0:	4641      	mov	r1, r8
 800d4c2:	1851      	adds	r1, r2, r1
 800d4c4:	6339      	str	r1, [r7, #48]	; 0x30
 800d4c6:	4649      	mov	r1, r9
 800d4c8:	414b      	adcs	r3, r1
 800d4ca:	637b      	str	r3, [r7, #52]	; 0x34
 800d4cc:	f04f 0200 	mov.w	r2, #0
 800d4d0:	f04f 0300 	mov.w	r3, #0
 800d4d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800d4d8:	4659      	mov	r1, fp
 800d4da:	00cb      	lsls	r3, r1, #3
 800d4dc:	4651      	mov	r1, sl
 800d4de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d4e2:	4651      	mov	r1, sl
 800d4e4:	00ca      	lsls	r2, r1, #3
 800d4e6:	4610      	mov	r0, r2
 800d4e8:	4619      	mov	r1, r3
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	4642      	mov	r2, r8
 800d4ee:	189b      	adds	r3, r3, r2
 800d4f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d4f4:	464b      	mov	r3, r9
 800d4f6:	460a      	mov	r2, r1
 800d4f8:	eb42 0303 	adc.w	r3, r2, r3
 800d4fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d504:	685b      	ldr	r3, [r3, #4]
 800d506:	2200      	movs	r2, #0
 800d508:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d50c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800d510:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d514:	460b      	mov	r3, r1
 800d516:	18db      	adds	r3, r3, r3
 800d518:	62bb      	str	r3, [r7, #40]	; 0x28
 800d51a:	4613      	mov	r3, r2
 800d51c:	eb42 0303 	adc.w	r3, r2, r3
 800d520:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d522:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d526:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800d52a:	f7f3 fb9d 	bl	8000c68 <__aeabi_uldivmod>
 800d52e:	4602      	mov	r2, r0
 800d530:	460b      	mov	r3, r1
 800d532:	4b0d      	ldr	r3, [pc, #52]	; (800d568 <UART_SetConfig+0x2d4>)
 800d534:	fba3 1302 	umull	r1, r3, r3, r2
 800d538:	095b      	lsrs	r3, r3, #5
 800d53a:	2164      	movs	r1, #100	; 0x64
 800d53c:	fb01 f303 	mul.w	r3, r1, r3
 800d540:	1ad3      	subs	r3, r2, r3
 800d542:	00db      	lsls	r3, r3, #3
 800d544:	3332      	adds	r3, #50	; 0x32
 800d546:	4a08      	ldr	r2, [pc, #32]	; (800d568 <UART_SetConfig+0x2d4>)
 800d548:	fba2 2303 	umull	r2, r3, r2, r3
 800d54c:	095b      	lsrs	r3, r3, #5
 800d54e:	f003 0207 	and.w	r2, r3, #7
 800d552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	4422      	add	r2, r4
 800d55a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d55c:	e106      	b.n	800d76c <UART_SetConfig+0x4d8>
 800d55e:	bf00      	nop
 800d560:	40011000 	.word	0x40011000
 800d564:	40011400 	.word	0x40011400
 800d568:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d56c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d570:	2200      	movs	r2, #0
 800d572:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d576:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d57a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800d57e:	4642      	mov	r2, r8
 800d580:	464b      	mov	r3, r9
 800d582:	1891      	adds	r1, r2, r2
 800d584:	6239      	str	r1, [r7, #32]
 800d586:	415b      	adcs	r3, r3
 800d588:	627b      	str	r3, [r7, #36]	; 0x24
 800d58a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d58e:	4641      	mov	r1, r8
 800d590:	1854      	adds	r4, r2, r1
 800d592:	4649      	mov	r1, r9
 800d594:	eb43 0501 	adc.w	r5, r3, r1
 800d598:	f04f 0200 	mov.w	r2, #0
 800d59c:	f04f 0300 	mov.w	r3, #0
 800d5a0:	00eb      	lsls	r3, r5, #3
 800d5a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d5a6:	00e2      	lsls	r2, r4, #3
 800d5a8:	4614      	mov	r4, r2
 800d5aa:	461d      	mov	r5, r3
 800d5ac:	4643      	mov	r3, r8
 800d5ae:	18e3      	adds	r3, r4, r3
 800d5b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d5b4:	464b      	mov	r3, r9
 800d5b6:	eb45 0303 	adc.w	r3, r5, r3
 800d5ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d5be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d5c2:	685b      	ldr	r3, [r3, #4]
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d5ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d5ce:	f04f 0200 	mov.w	r2, #0
 800d5d2:	f04f 0300 	mov.w	r3, #0
 800d5d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800d5da:	4629      	mov	r1, r5
 800d5dc:	008b      	lsls	r3, r1, #2
 800d5de:	4621      	mov	r1, r4
 800d5e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d5e4:	4621      	mov	r1, r4
 800d5e6:	008a      	lsls	r2, r1, #2
 800d5e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800d5ec:	f7f3 fb3c 	bl	8000c68 <__aeabi_uldivmod>
 800d5f0:	4602      	mov	r2, r0
 800d5f2:	460b      	mov	r3, r1
 800d5f4:	4b60      	ldr	r3, [pc, #384]	; (800d778 <UART_SetConfig+0x4e4>)
 800d5f6:	fba3 2302 	umull	r2, r3, r3, r2
 800d5fa:	095b      	lsrs	r3, r3, #5
 800d5fc:	011c      	lsls	r4, r3, #4
 800d5fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d602:	2200      	movs	r2, #0
 800d604:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d608:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d60c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800d610:	4642      	mov	r2, r8
 800d612:	464b      	mov	r3, r9
 800d614:	1891      	adds	r1, r2, r2
 800d616:	61b9      	str	r1, [r7, #24]
 800d618:	415b      	adcs	r3, r3
 800d61a:	61fb      	str	r3, [r7, #28]
 800d61c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d620:	4641      	mov	r1, r8
 800d622:	1851      	adds	r1, r2, r1
 800d624:	6139      	str	r1, [r7, #16]
 800d626:	4649      	mov	r1, r9
 800d628:	414b      	adcs	r3, r1
 800d62a:	617b      	str	r3, [r7, #20]
 800d62c:	f04f 0200 	mov.w	r2, #0
 800d630:	f04f 0300 	mov.w	r3, #0
 800d634:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d638:	4659      	mov	r1, fp
 800d63a:	00cb      	lsls	r3, r1, #3
 800d63c:	4651      	mov	r1, sl
 800d63e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d642:	4651      	mov	r1, sl
 800d644:	00ca      	lsls	r2, r1, #3
 800d646:	4610      	mov	r0, r2
 800d648:	4619      	mov	r1, r3
 800d64a:	4603      	mov	r3, r0
 800d64c:	4642      	mov	r2, r8
 800d64e:	189b      	adds	r3, r3, r2
 800d650:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d654:	464b      	mov	r3, r9
 800d656:	460a      	mov	r2, r1
 800d658:	eb42 0303 	adc.w	r3, r2, r3
 800d65c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d664:	685b      	ldr	r3, [r3, #4]
 800d666:	2200      	movs	r2, #0
 800d668:	67bb      	str	r3, [r7, #120]	; 0x78
 800d66a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d66c:	f04f 0200 	mov.w	r2, #0
 800d670:	f04f 0300 	mov.w	r3, #0
 800d674:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800d678:	4649      	mov	r1, r9
 800d67a:	008b      	lsls	r3, r1, #2
 800d67c:	4641      	mov	r1, r8
 800d67e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d682:	4641      	mov	r1, r8
 800d684:	008a      	lsls	r2, r1, #2
 800d686:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800d68a:	f7f3 faed 	bl	8000c68 <__aeabi_uldivmod>
 800d68e:	4602      	mov	r2, r0
 800d690:	460b      	mov	r3, r1
 800d692:	4611      	mov	r1, r2
 800d694:	4b38      	ldr	r3, [pc, #224]	; (800d778 <UART_SetConfig+0x4e4>)
 800d696:	fba3 2301 	umull	r2, r3, r3, r1
 800d69a:	095b      	lsrs	r3, r3, #5
 800d69c:	2264      	movs	r2, #100	; 0x64
 800d69e:	fb02 f303 	mul.w	r3, r2, r3
 800d6a2:	1acb      	subs	r3, r1, r3
 800d6a4:	011b      	lsls	r3, r3, #4
 800d6a6:	3332      	adds	r3, #50	; 0x32
 800d6a8:	4a33      	ldr	r2, [pc, #204]	; (800d778 <UART_SetConfig+0x4e4>)
 800d6aa:	fba2 2303 	umull	r2, r3, r2, r3
 800d6ae:	095b      	lsrs	r3, r3, #5
 800d6b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d6b4:	441c      	add	r4, r3
 800d6b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	673b      	str	r3, [r7, #112]	; 0x70
 800d6be:	677a      	str	r2, [r7, #116]	; 0x74
 800d6c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800d6c4:	4642      	mov	r2, r8
 800d6c6:	464b      	mov	r3, r9
 800d6c8:	1891      	adds	r1, r2, r2
 800d6ca:	60b9      	str	r1, [r7, #8]
 800d6cc:	415b      	adcs	r3, r3
 800d6ce:	60fb      	str	r3, [r7, #12]
 800d6d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d6d4:	4641      	mov	r1, r8
 800d6d6:	1851      	adds	r1, r2, r1
 800d6d8:	6039      	str	r1, [r7, #0]
 800d6da:	4649      	mov	r1, r9
 800d6dc:	414b      	adcs	r3, r1
 800d6de:	607b      	str	r3, [r7, #4]
 800d6e0:	f04f 0200 	mov.w	r2, #0
 800d6e4:	f04f 0300 	mov.w	r3, #0
 800d6e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d6ec:	4659      	mov	r1, fp
 800d6ee:	00cb      	lsls	r3, r1, #3
 800d6f0:	4651      	mov	r1, sl
 800d6f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d6f6:	4651      	mov	r1, sl
 800d6f8:	00ca      	lsls	r2, r1, #3
 800d6fa:	4610      	mov	r0, r2
 800d6fc:	4619      	mov	r1, r3
 800d6fe:	4603      	mov	r3, r0
 800d700:	4642      	mov	r2, r8
 800d702:	189b      	adds	r3, r3, r2
 800d704:	66bb      	str	r3, [r7, #104]	; 0x68
 800d706:	464b      	mov	r3, r9
 800d708:	460a      	mov	r2, r1
 800d70a:	eb42 0303 	adc.w	r3, r2, r3
 800d70e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d714:	685b      	ldr	r3, [r3, #4]
 800d716:	2200      	movs	r2, #0
 800d718:	663b      	str	r3, [r7, #96]	; 0x60
 800d71a:	667a      	str	r2, [r7, #100]	; 0x64
 800d71c:	f04f 0200 	mov.w	r2, #0
 800d720:	f04f 0300 	mov.w	r3, #0
 800d724:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800d728:	4649      	mov	r1, r9
 800d72a:	008b      	lsls	r3, r1, #2
 800d72c:	4641      	mov	r1, r8
 800d72e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d732:	4641      	mov	r1, r8
 800d734:	008a      	lsls	r2, r1, #2
 800d736:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d73a:	f7f3 fa95 	bl	8000c68 <__aeabi_uldivmod>
 800d73e:	4602      	mov	r2, r0
 800d740:	460b      	mov	r3, r1
 800d742:	4b0d      	ldr	r3, [pc, #52]	; (800d778 <UART_SetConfig+0x4e4>)
 800d744:	fba3 1302 	umull	r1, r3, r3, r2
 800d748:	095b      	lsrs	r3, r3, #5
 800d74a:	2164      	movs	r1, #100	; 0x64
 800d74c:	fb01 f303 	mul.w	r3, r1, r3
 800d750:	1ad3      	subs	r3, r2, r3
 800d752:	011b      	lsls	r3, r3, #4
 800d754:	3332      	adds	r3, #50	; 0x32
 800d756:	4a08      	ldr	r2, [pc, #32]	; (800d778 <UART_SetConfig+0x4e4>)
 800d758:	fba2 2303 	umull	r2, r3, r2, r3
 800d75c:	095b      	lsrs	r3, r3, #5
 800d75e:	f003 020f 	and.w	r2, r3, #15
 800d762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	4422      	add	r2, r4
 800d76a:	609a      	str	r2, [r3, #8]
}
 800d76c:	bf00      	nop
 800d76e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800d772:	46bd      	mov	sp, r7
 800d774:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d778:	51eb851f 	.word	0x51eb851f

0800d77c <__NVIC_SetPriority>:
{
 800d77c:	b480      	push	{r7}
 800d77e:	b083      	sub	sp, #12
 800d780:	af00      	add	r7, sp, #0
 800d782:	4603      	mov	r3, r0
 800d784:	6039      	str	r1, [r7, #0]
 800d786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	db0a      	blt.n	800d7a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	b2da      	uxtb	r2, r3
 800d794:	490c      	ldr	r1, [pc, #48]	; (800d7c8 <__NVIC_SetPriority+0x4c>)
 800d796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d79a:	0112      	lsls	r2, r2, #4
 800d79c:	b2d2      	uxtb	r2, r2
 800d79e:	440b      	add	r3, r1
 800d7a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d7a4:	e00a      	b.n	800d7bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d7a6:	683b      	ldr	r3, [r7, #0]
 800d7a8:	b2da      	uxtb	r2, r3
 800d7aa:	4908      	ldr	r1, [pc, #32]	; (800d7cc <__NVIC_SetPriority+0x50>)
 800d7ac:	79fb      	ldrb	r3, [r7, #7]
 800d7ae:	f003 030f 	and.w	r3, r3, #15
 800d7b2:	3b04      	subs	r3, #4
 800d7b4:	0112      	lsls	r2, r2, #4
 800d7b6:	b2d2      	uxtb	r2, r2
 800d7b8:	440b      	add	r3, r1
 800d7ba:	761a      	strb	r2, [r3, #24]
}
 800d7bc:	bf00      	nop
 800d7be:	370c      	adds	r7, #12
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c6:	4770      	bx	lr
 800d7c8:	e000e100 	.word	0xe000e100
 800d7cc:	e000ed00 	.word	0xe000ed00

0800d7d0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d7d4:	4b05      	ldr	r3, [pc, #20]	; (800d7ec <SysTick_Handler+0x1c>)
 800d7d6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d7d8:	f001 fd28 	bl	800f22c <xTaskGetSchedulerState>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	2b01      	cmp	r3, #1
 800d7e0:	d001      	beq.n	800d7e6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d7e2:	f002 fb11 	bl	800fe08 <xPortSysTickHandler>
  }
}
 800d7e6:	bf00      	nop
 800d7e8:	bd80      	pop	{r7, pc}
 800d7ea:	bf00      	nop
 800d7ec:	e000e010 	.word	0xe000e010

0800d7f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d7f4:	2100      	movs	r1, #0
 800d7f6:	f06f 0004 	mvn.w	r0, #4
 800d7fa:	f7ff ffbf 	bl	800d77c <__NVIC_SetPriority>
#endif
}
 800d7fe:	bf00      	nop
 800d800:	bd80      	pop	{r7, pc}
	...

0800d804 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d804:	b480      	push	{r7}
 800d806:	b083      	sub	sp, #12
 800d808:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d80a:	f3ef 8305 	mrs	r3, IPSR
 800d80e:	603b      	str	r3, [r7, #0]
  return(result);
 800d810:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d812:	2b00      	cmp	r3, #0
 800d814:	d003      	beq.n	800d81e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d816:	f06f 0305 	mvn.w	r3, #5
 800d81a:	607b      	str	r3, [r7, #4]
 800d81c:	e00c      	b.n	800d838 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d81e:	4b0a      	ldr	r3, [pc, #40]	; (800d848 <osKernelInitialize+0x44>)
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d105      	bne.n	800d832 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d826:	4b08      	ldr	r3, [pc, #32]	; (800d848 <osKernelInitialize+0x44>)
 800d828:	2201      	movs	r2, #1
 800d82a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d82c:	2300      	movs	r3, #0
 800d82e:	607b      	str	r3, [r7, #4]
 800d830:	e002      	b.n	800d838 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d832:	f04f 33ff 	mov.w	r3, #4294967295
 800d836:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d838:	687b      	ldr	r3, [r7, #4]
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	370c      	adds	r7, #12
 800d83e:	46bd      	mov	sp, r7
 800d840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d844:	4770      	bx	lr
 800d846:	bf00      	nop
 800d848:	200036c0 	.word	0x200036c0

0800d84c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b082      	sub	sp, #8
 800d850:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d852:	f3ef 8305 	mrs	r3, IPSR
 800d856:	603b      	str	r3, [r7, #0]
  return(result);
 800d858:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d003      	beq.n	800d866 <osKernelStart+0x1a>
    stat = osErrorISR;
 800d85e:	f06f 0305 	mvn.w	r3, #5
 800d862:	607b      	str	r3, [r7, #4]
 800d864:	e010      	b.n	800d888 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d866:	4b0b      	ldr	r3, [pc, #44]	; (800d894 <osKernelStart+0x48>)
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	2b01      	cmp	r3, #1
 800d86c:	d109      	bne.n	800d882 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d86e:	f7ff ffbf 	bl	800d7f0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d872:	4b08      	ldr	r3, [pc, #32]	; (800d894 <osKernelStart+0x48>)
 800d874:	2202      	movs	r2, #2
 800d876:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d878:	f001 f87c 	bl	800e974 <vTaskStartScheduler>
      stat = osOK;
 800d87c:	2300      	movs	r3, #0
 800d87e:	607b      	str	r3, [r7, #4]
 800d880:	e002      	b.n	800d888 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d882:	f04f 33ff 	mov.w	r3, #4294967295
 800d886:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d888:	687b      	ldr	r3, [r7, #4]
}
 800d88a:	4618      	mov	r0, r3
 800d88c:	3708      	adds	r7, #8
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}
 800d892:	bf00      	nop
 800d894:	200036c0 	.word	0x200036c0

0800d898 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d898:	b580      	push	{r7, lr}
 800d89a:	b08e      	sub	sp, #56	; 0x38
 800d89c:	af04      	add	r7, sp, #16
 800d89e:	60f8      	str	r0, [r7, #12]
 800d8a0:	60b9      	str	r1, [r7, #8]
 800d8a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d8a8:	f3ef 8305 	mrs	r3, IPSR
 800d8ac:	617b      	str	r3, [r7, #20]
  return(result);
 800d8ae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d17e      	bne.n	800d9b2 <osThreadNew+0x11a>
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d07b      	beq.n	800d9b2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d8ba:	2380      	movs	r3, #128	; 0x80
 800d8bc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d8be:	2318      	movs	r3, #24
 800d8c0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800d8c6:	f04f 33ff 	mov.w	r3, #4294967295
 800d8ca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d045      	beq.n	800d95e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d002      	beq.n	800d8e0 <osThreadNew+0x48>
        name = attr->name;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	699b      	ldr	r3, [r3, #24]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d002      	beq.n	800d8ee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	699b      	ldr	r3, [r3, #24]
 800d8ec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d8ee:	69fb      	ldr	r3, [r7, #28]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d008      	beq.n	800d906 <osThreadNew+0x6e>
 800d8f4:	69fb      	ldr	r3, [r7, #28]
 800d8f6:	2b38      	cmp	r3, #56	; 0x38
 800d8f8:	d805      	bhi.n	800d906 <osThreadNew+0x6e>
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	685b      	ldr	r3, [r3, #4]
 800d8fe:	f003 0301 	and.w	r3, r3, #1
 800d902:	2b00      	cmp	r3, #0
 800d904:	d001      	beq.n	800d90a <osThreadNew+0x72>
        return (NULL);
 800d906:	2300      	movs	r3, #0
 800d908:	e054      	b.n	800d9b4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	695b      	ldr	r3, [r3, #20]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d003      	beq.n	800d91a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	695b      	ldr	r3, [r3, #20]
 800d916:	089b      	lsrs	r3, r3, #2
 800d918:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	689b      	ldr	r3, [r3, #8]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d00e      	beq.n	800d940 <osThreadNew+0xa8>
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	68db      	ldr	r3, [r3, #12]
 800d926:	2ba7      	cmp	r3, #167	; 0xa7
 800d928:	d90a      	bls.n	800d940 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d006      	beq.n	800d940 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	695b      	ldr	r3, [r3, #20]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d002      	beq.n	800d940 <osThreadNew+0xa8>
        mem = 1;
 800d93a:	2301      	movs	r3, #1
 800d93c:	61bb      	str	r3, [r7, #24]
 800d93e:	e010      	b.n	800d962 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	689b      	ldr	r3, [r3, #8]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d10c      	bne.n	800d962 <osThreadNew+0xca>
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	68db      	ldr	r3, [r3, #12]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d108      	bne.n	800d962 <osThreadNew+0xca>
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	691b      	ldr	r3, [r3, #16]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d104      	bne.n	800d962 <osThreadNew+0xca>
          mem = 0;
 800d958:	2300      	movs	r3, #0
 800d95a:	61bb      	str	r3, [r7, #24]
 800d95c:	e001      	b.n	800d962 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d95e:	2300      	movs	r3, #0
 800d960:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d962:	69bb      	ldr	r3, [r7, #24]
 800d964:	2b01      	cmp	r3, #1
 800d966:	d110      	bne.n	800d98a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d96c:	687a      	ldr	r2, [r7, #4]
 800d96e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d970:	9202      	str	r2, [sp, #8]
 800d972:	9301      	str	r3, [sp, #4]
 800d974:	69fb      	ldr	r3, [r7, #28]
 800d976:	9300      	str	r3, [sp, #0]
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	6a3a      	ldr	r2, [r7, #32]
 800d97c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d97e:	68f8      	ldr	r0, [r7, #12]
 800d980:	f000 fe0c 	bl	800e59c <xTaskCreateStatic>
 800d984:	4603      	mov	r3, r0
 800d986:	613b      	str	r3, [r7, #16]
 800d988:	e013      	b.n	800d9b2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d98a:	69bb      	ldr	r3, [r7, #24]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d110      	bne.n	800d9b2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d990:	6a3b      	ldr	r3, [r7, #32]
 800d992:	b29a      	uxth	r2, r3
 800d994:	f107 0310 	add.w	r3, r7, #16
 800d998:	9301      	str	r3, [sp, #4]
 800d99a:	69fb      	ldr	r3, [r7, #28]
 800d99c:	9300      	str	r3, [sp, #0]
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d9a2:	68f8      	ldr	r0, [r7, #12]
 800d9a4:	f000 fe57 	bl	800e656 <xTaskCreate>
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	2b01      	cmp	r3, #1
 800d9ac:	d001      	beq.n	800d9b2 <osThreadNew+0x11a>
            hTask = NULL;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d9b2:	693b      	ldr	r3, [r7, #16]
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	3728      	adds	r7, #40	; 0x28
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}

0800d9bc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b084      	sub	sp, #16
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d9c4:	f3ef 8305 	mrs	r3, IPSR
 800d9c8:	60bb      	str	r3, [r7, #8]
  return(result);
 800d9ca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d003      	beq.n	800d9d8 <osDelay+0x1c>
    stat = osErrorISR;
 800d9d0:	f06f 0305 	mvn.w	r3, #5
 800d9d4:	60fb      	str	r3, [r7, #12]
 800d9d6:	e007      	b.n	800d9e8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d9d8:	2300      	movs	r3, #0
 800d9da:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d002      	beq.n	800d9e8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800d9e2:	6878      	ldr	r0, [r7, #4]
 800d9e4:	f000 ff92 	bl	800e90c <vTaskDelay>
    }
  }

  return (stat);
 800d9e8:	68fb      	ldr	r3, [r7, #12]
}
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	3710      	adds	r7, #16
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	bd80      	pop	{r7, pc}
	...

0800d9f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d9f4:	b480      	push	{r7}
 800d9f6:	b085      	sub	sp, #20
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	60f8      	str	r0, [r7, #12]
 800d9fc:	60b9      	str	r1, [r7, #8]
 800d9fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	4a07      	ldr	r2, [pc, #28]	; (800da20 <vApplicationGetIdleTaskMemory+0x2c>)
 800da04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800da06:	68bb      	ldr	r3, [r7, #8]
 800da08:	4a06      	ldr	r2, [pc, #24]	; (800da24 <vApplicationGetIdleTaskMemory+0x30>)
 800da0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2280      	movs	r2, #128	; 0x80
 800da10:	601a      	str	r2, [r3, #0]
}
 800da12:	bf00      	nop
 800da14:	3714      	adds	r7, #20
 800da16:	46bd      	mov	sp, r7
 800da18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1c:	4770      	bx	lr
 800da1e:	bf00      	nop
 800da20:	200036c4 	.word	0x200036c4
 800da24:	2000376c 	.word	0x2000376c

0800da28 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800da28:	b480      	push	{r7}
 800da2a:	b085      	sub	sp, #20
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	60f8      	str	r0, [r7, #12]
 800da30:	60b9      	str	r1, [r7, #8]
 800da32:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	4a07      	ldr	r2, [pc, #28]	; (800da54 <vApplicationGetTimerTaskMemory+0x2c>)
 800da38:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800da3a:	68bb      	ldr	r3, [r7, #8]
 800da3c:	4a06      	ldr	r2, [pc, #24]	; (800da58 <vApplicationGetTimerTaskMemory+0x30>)
 800da3e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	f44f 7280 	mov.w	r2, #256	; 0x100
 800da46:	601a      	str	r2, [r3, #0]
}
 800da48:	bf00      	nop
 800da4a:	3714      	adds	r7, #20
 800da4c:	46bd      	mov	sp, r7
 800da4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da52:	4770      	bx	lr
 800da54:	2000396c 	.word	0x2000396c
 800da58:	20003a14 	.word	0x20003a14

0800da5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800da5c:	b480      	push	{r7}
 800da5e:	b083      	sub	sp, #12
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f103 0208 	add.w	r2, r3, #8
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	f04f 32ff 	mov.w	r2, #4294967295
 800da74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	f103 0208 	add.w	r2, r3, #8
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	f103 0208 	add.w	r2, r3, #8
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2200      	movs	r2, #0
 800da8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800da90:	bf00      	nop
 800da92:	370c      	adds	r7, #12
 800da94:	46bd      	mov	sp, r7
 800da96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9a:	4770      	bx	lr

0800da9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800da9c:	b480      	push	{r7}
 800da9e:	b083      	sub	sp, #12
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2200      	movs	r2, #0
 800daa8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800daaa:	bf00      	nop
 800daac:	370c      	adds	r7, #12
 800daae:	46bd      	mov	sp, r7
 800dab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab4:	4770      	bx	lr

0800dab6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dab6:	b480      	push	{r7}
 800dab8:	b085      	sub	sp, #20
 800daba:	af00      	add	r7, sp, #0
 800dabc:	6078      	str	r0, [r7, #4]
 800dabe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	685b      	ldr	r3, [r3, #4]
 800dac4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	68fa      	ldr	r2, [r7, #12]
 800daca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	689a      	ldr	r2, [r3, #8]
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	689b      	ldr	r3, [r3, #8]
 800dad8:	683a      	ldr	r2, [r7, #0]
 800dada:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	683a      	ldr	r2, [r7, #0]
 800dae0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	687a      	ldr	r2, [r7, #4]
 800dae6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	1c5a      	adds	r2, r3, #1
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	601a      	str	r2, [r3, #0]
}
 800daf2:	bf00      	nop
 800daf4:	3714      	adds	r7, #20
 800daf6:	46bd      	mov	sp, r7
 800daf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafc:	4770      	bx	lr

0800dafe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dafe:	b480      	push	{r7}
 800db00:	b085      	sub	sp, #20
 800db02:	af00      	add	r7, sp, #0
 800db04:	6078      	str	r0, [r7, #4]
 800db06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800db0e:	68bb      	ldr	r3, [r7, #8]
 800db10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db14:	d103      	bne.n	800db1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	691b      	ldr	r3, [r3, #16]
 800db1a:	60fb      	str	r3, [r7, #12]
 800db1c:	e00c      	b.n	800db38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	3308      	adds	r3, #8
 800db22:	60fb      	str	r3, [r7, #12]
 800db24:	e002      	b.n	800db2c <vListInsert+0x2e>
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	685b      	ldr	r3, [r3, #4]
 800db2a:	60fb      	str	r3, [r7, #12]
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	685b      	ldr	r3, [r3, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	68ba      	ldr	r2, [r7, #8]
 800db34:	429a      	cmp	r2, r3
 800db36:	d2f6      	bcs.n	800db26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	685a      	ldr	r2, [r3, #4]
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	685b      	ldr	r3, [r3, #4]
 800db44:	683a      	ldr	r2, [r7, #0]
 800db46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	68fa      	ldr	r2, [r7, #12]
 800db4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	683a      	ldr	r2, [r7, #0]
 800db52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	687a      	ldr	r2, [r7, #4]
 800db58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	1c5a      	adds	r2, r3, #1
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	601a      	str	r2, [r3, #0]
}
 800db64:	bf00      	nop
 800db66:	3714      	adds	r7, #20
 800db68:	46bd      	mov	sp, r7
 800db6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6e:	4770      	bx	lr

0800db70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800db70:	b480      	push	{r7}
 800db72:	b085      	sub	sp, #20
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	691b      	ldr	r3, [r3, #16]
 800db7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	685b      	ldr	r3, [r3, #4]
 800db82:	687a      	ldr	r2, [r7, #4]
 800db84:	6892      	ldr	r2, [r2, #8]
 800db86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	689b      	ldr	r3, [r3, #8]
 800db8c:	687a      	ldr	r2, [r7, #4]
 800db8e:	6852      	ldr	r2, [r2, #4]
 800db90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	685b      	ldr	r3, [r3, #4]
 800db96:	687a      	ldr	r2, [r7, #4]
 800db98:	429a      	cmp	r2, r3
 800db9a:	d103      	bne.n	800dba4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	689a      	ldr	r2, [r3, #8]
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2200      	movs	r2, #0
 800dba8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	1e5a      	subs	r2, r3, #1
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	681b      	ldr	r3, [r3, #0]
}
 800dbb8:	4618      	mov	r0, r3
 800dbba:	3714      	adds	r7, #20
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc2:	4770      	bx	lr

0800dbc4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b084      	sub	sp, #16
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
 800dbcc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d10a      	bne.n	800dbee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800dbd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbdc:	f383 8811 	msr	BASEPRI, r3
 800dbe0:	f3bf 8f6f 	isb	sy
 800dbe4:	f3bf 8f4f 	dsb	sy
 800dbe8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800dbea:	bf00      	nop
 800dbec:	e7fe      	b.n	800dbec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800dbee:	f002 f879 	bl	800fce4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	681a      	ldr	r2, [r3, #0]
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbfa:	68f9      	ldr	r1, [r7, #12]
 800dbfc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800dbfe:	fb01 f303 	mul.w	r3, r1, r3
 800dc02:	441a      	add	r2, r3
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	681a      	ldr	r2, [r3, #0]
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	681a      	ldr	r2, [r3, #0]
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc1e:	3b01      	subs	r3, #1
 800dc20:	68f9      	ldr	r1, [r7, #12]
 800dc22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800dc24:	fb01 f303 	mul.w	r3, r1, r3
 800dc28:	441a      	add	r2, r3
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	22ff      	movs	r2, #255	; 0xff
 800dc32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	22ff      	movs	r2, #255	; 0xff
 800dc3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d114      	bne.n	800dc6e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	691b      	ldr	r3, [r3, #16]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d01a      	beq.n	800dc82 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	3310      	adds	r3, #16
 800dc50:	4618      	mov	r0, r3
 800dc52:	f001 f929 	bl	800eea8 <xTaskRemoveFromEventList>
 800dc56:	4603      	mov	r3, r0
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d012      	beq.n	800dc82 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800dc5c:	4b0c      	ldr	r3, [pc, #48]	; (800dc90 <xQueueGenericReset+0xcc>)
 800dc5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc62:	601a      	str	r2, [r3, #0]
 800dc64:	f3bf 8f4f 	dsb	sy
 800dc68:	f3bf 8f6f 	isb	sy
 800dc6c:	e009      	b.n	800dc82 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	3310      	adds	r3, #16
 800dc72:	4618      	mov	r0, r3
 800dc74:	f7ff fef2 	bl	800da5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	3324      	adds	r3, #36	; 0x24
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f7ff feed 	bl	800da5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800dc82:	f002 f85f 	bl	800fd44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800dc86:	2301      	movs	r3, #1
}
 800dc88:	4618      	mov	r0, r3
 800dc8a:	3710      	adds	r7, #16
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bd80      	pop	{r7, pc}
 800dc90:	e000ed04 	.word	0xe000ed04

0800dc94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b08e      	sub	sp, #56	; 0x38
 800dc98:	af02      	add	r7, sp, #8
 800dc9a:	60f8      	str	r0, [r7, #12]
 800dc9c:	60b9      	str	r1, [r7, #8]
 800dc9e:	607a      	str	r2, [r7, #4]
 800dca0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d10a      	bne.n	800dcbe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800dca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcac:	f383 8811 	msr	BASEPRI, r3
 800dcb0:	f3bf 8f6f 	isb	sy
 800dcb4:	f3bf 8f4f 	dsb	sy
 800dcb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800dcba:	bf00      	nop
 800dcbc:	e7fe      	b.n	800dcbc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d10a      	bne.n	800dcda <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800dcc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcc8:	f383 8811 	msr	BASEPRI, r3
 800dccc:	f3bf 8f6f 	isb	sy
 800dcd0:	f3bf 8f4f 	dsb	sy
 800dcd4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800dcd6:	bf00      	nop
 800dcd8:	e7fe      	b.n	800dcd8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d002      	beq.n	800dce6 <xQueueGenericCreateStatic+0x52>
 800dce0:	68bb      	ldr	r3, [r7, #8]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d001      	beq.n	800dcea <xQueueGenericCreateStatic+0x56>
 800dce6:	2301      	movs	r3, #1
 800dce8:	e000      	b.n	800dcec <xQueueGenericCreateStatic+0x58>
 800dcea:	2300      	movs	r3, #0
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d10a      	bne.n	800dd06 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800dcf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcf4:	f383 8811 	msr	BASEPRI, r3
 800dcf8:	f3bf 8f6f 	isb	sy
 800dcfc:	f3bf 8f4f 	dsb	sy
 800dd00:	623b      	str	r3, [r7, #32]
}
 800dd02:	bf00      	nop
 800dd04:	e7fe      	b.n	800dd04 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d102      	bne.n	800dd12 <xQueueGenericCreateStatic+0x7e>
 800dd0c:	68bb      	ldr	r3, [r7, #8]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d101      	bne.n	800dd16 <xQueueGenericCreateStatic+0x82>
 800dd12:	2301      	movs	r3, #1
 800dd14:	e000      	b.n	800dd18 <xQueueGenericCreateStatic+0x84>
 800dd16:	2300      	movs	r3, #0
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d10a      	bne.n	800dd32 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800dd1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd20:	f383 8811 	msr	BASEPRI, r3
 800dd24:	f3bf 8f6f 	isb	sy
 800dd28:	f3bf 8f4f 	dsb	sy
 800dd2c:	61fb      	str	r3, [r7, #28]
}
 800dd2e:	bf00      	nop
 800dd30:	e7fe      	b.n	800dd30 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800dd32:	2350      	movs	r3, #80	; 0x50
 800dd34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800dd36:	697b      	ldr	r3, [r7, #20]
 800dd38:	2b50      	cmp	r3, #80	; 0x50
 800dd3a:	d00a      	beq.n	800dd52 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800dd3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd40:	f383 8811 	msr	BASEPRI, r3
 800dd44:	f3bf 8f6f 	isb	sy
 800dd48:	f3bf 8f4f 	dsb	sy
 800dd4c:	61bb      	str	r3, [r7, #24]
}
 800dd4e:	bf00      	nop
 800dd50:	e7fe      	b.n	800dd50 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800dd52:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800dd58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d00d      	beq.n	800dd7a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800dd5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd60:	2201      	movs	r2, #1
 800dd62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dd66:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800dd6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd6c:	9300      	str	r3, [sp, #0]
 800dd6e:	4613      	mov	r3, r2
 800dd70:	687a      	ldr	r2, [r7, #4]
 800dd72:	68b9      	ldr	r1, [r7, #8]
 800dd74:	68f8      	ldr	r0, [r7, #12]
 800dd76:	f000 f805 	bl	800dd84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dd7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	3730      	adds	r7, #48	; 0x30
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}

0800dd84 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b084      	sub	sp, #16
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	60f8      	str	r0, [r7, #12]
 800dd8c:	60b9      	str	r1, [r7, #8]
 800dd8e:	607a      	str	r2, [r7, #4]
 800dd90:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800dd92:	68bb      	ldr	r3, [r7, #8]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d103      	bne.n	800dda0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dd98:	69bb      	ldr	r3, [r7, #24]
 800dd9a:	69ba      	ldr	r2, [r7, #24]
 800dd9c:	601a      	str	r2, [r3, #0]
 800dd9e:	e002      	b.n	800dda6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800dda0:	69bb      	ldr	r3, [r7, #24]
 800dda2:	687a      	ldr	r2, [r7, #4]
 800dda4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800dda6:	69bb      	ldr	r3, [r7, #24]
 800dda8:	68fa      	ldr	r2, [r7, #12]
 800ddaa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ddac:	69bb      	ldr	r3, [r7, #24]
 800ddae:	68ba      	ldr	r2, [r7, #8]
 800ddb0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ddb2:	2101      	movs	r1, #1
 800ddb4:	69b8      	ldr	r0, [r7, #24]
 800ddb6:	f7ff ff05 	bl	800dbc4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ddba:	69bb      	ldr	r3, [r7, #24]
 800ddbc:	78fa      	ldrb	r2, [r7, #3]
 800ddbe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ddc2:	bf00      	nop
 800ddc4:	3710      	adds	r7, #16
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}
	...

0800ddcc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b08e      	sub	sp, #56	; 0x38
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	60f8      	str	r0, [r7, #12]
 800ddd4:	60b9      	str	r1, [r7, #8]
 800ddd6:	607a      	str	r2, [r7, #4]
 800ddd8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ddda:	2300      	movs	r3, #0
 800dddc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800dde2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d10a      	bne.n	800ddfe <xQueueGenericSend+0x32>
	__asm volatile
 800dde8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddec:	f383 8811 	msr	BASEPRI, r3
 800ddf0:	f3bf 8f6f 	isb	sy
 800ddf4:	f3bf 8f4f 	dsb	sy
 800ddf8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ddfa:	bf00      	nop
 800ddfc:	e7fe      	b.n	800ddfc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d103      	bne.n	800de0c <xQueueGenericSend+0x40>
 800de04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d101      	bne.n	800de10 <xQueueGenericSend+0x44>
 800de0c:	2301      	movs	r3, #1
 800de0e:	e000      	b.n	800de12 <xQueueGenericSend+0x46>
 800de10:	2300      	movs	r3, #0
 800de12:	2b00      	cmp	r3, #0
 800de14:	d10a      	bne.n	800de2c <xQueueGenericSend+0x60>
	__asm volatile
 800de16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de1a:	f383 8811 	msr	BASEPRI, r3
 800de1e:	f3bf 8f6f 	isb	sy
 800de22:	f3bf 8f4f 	dsb	sy
 800de26:	627b      	str	r3, [r7, #36]	; 0x24
}
 800de28:	bf00      	nop
 800de2a:	e7fe      	b.n	800de2a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	2b02      	cmp	r3, #2
 800de30:	d103      	bne.n	800de3a <xQueueGenericSend+0x6e>
 800de32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de36:	2b01      	cmp	r3, #1
 800de38:	d101      	bne.n	800de3e <xQueueGenericSend+0x72>
 800de3a:	2301      	movs	r3, #1
 800de3c:	e000      	b.n	800de40 <xQueueGenericSend+0x74>
 800de3e:	2300      	movs	r3, #0
 800de40:	2b00      	cmp	r3, #0
 800de42:	d10a      	bne.n	800de5a <xQueueGenericSend+0x8e>
	__asm volatile
 800de44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de48:	f383 8811 	msr	BASEPRI, r3
 800de4c:	f3bf 8f6f 	isb	sy
 800de50:	f3bf 8f4f 	dsb	sy
 800de54:	623b      	str	r3, [r7, #32]
}
 800de56:	bf00      	nop
 800de58:	e7fe      	b.n	800de58 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800de5a:	f001 f9e7 	bl	800f22c <xTaskGetSchedulerState>
 800de5e:	4603      	mov	r3, r0
 800de60:	2b00      	cmp	r3, #0
 800de62:	d102      	bne.n	800de6a <xQueueGenericSend+0x9e>
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d101      	bne.n	800de6e <xQueueGenericSend+0xa2>
 800de6a:	2301      	movs	r3, #1
 800de6c:	e000      	b.n	800de70 <xQueueGenericSend+0xa4>
 800de6e:	2300      	movs	r3, #0
 800de70:	2b00      	cmp	r3, #0
 800de72:	d10a      	bne.n	800de8a <xQueueGenericSend+0xbe>
	__asm volatile
 800de74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de78:	f383 8811 	msr	BASEPRI, r3
 800de7c:	f3bf 8f6f 	isb	sy
 800de80:	f3bf 8f4f 	dsb	sy
 800de84:	61fb      	str	r3, [r7, #28]
}
 800de86:	bf00      	nop
 800de88:	e7fe      	b.n	800de88 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800de8a:	f001 ff2b 	bl	800fce4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800de8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de96:	429a      	cmp	r2, r3
 800de98:	d302      	bcc.n	800dea0 <xQueueGenericSend+0xd4>
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	2b02      	cmp	r3, #2
 800de9e:	d129      	bne.n	800def4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dea0:	683a      	ldr	r2, [r7, #0]
 800dea2:	68b9      	ldr	r1, [r7, #8]
 800dea4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dea6:	f000 fa0b 	bl	800e2c0 <prvCopyDataToQueue>
 800deaa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800deac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d010      	beq.n	800ded6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800deb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deb6:	3324      	adds	r3, #36	; 0x24
 800deb8:	4618      	mov	r0, r3
 800deba:	f000 fff5 	bl	800eea8 <xTaskRemoveFromEventList>
 800debe:	4603      	mov	r3, r0
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d013      	beq.n	800deec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800dec4:	4b3f      	ldr	r3, [pc, #252]	; (800dfc4 <xQueueGenericSend+0x1f8>)
 800dec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800deca:	601a      	str	r2, [r3, #0]
 800decc:	f3bf 8f4f 	dsb	sy
 800ded0:	f3bf 8f6f 	isb	sy
 800ded4:	e00a      	b.n	800deec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ded6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d007      	beq.n	800deec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800dedc:	4b39      	ldr	r3, [pc, #228]	; (800dfc4 <xQueueGenericSend+0x1f8>)
 800dede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dee2:	601a      	str	r2, [r3, #0]
 800dee4:	f3bf 8f4f 	dsb	sy
 800dee8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800deec:	f001 ff2a 	bl	800fd44 <vPortExitCritical>
				return pdPASS;
 800def0:	2301      	movs	r3, #1
 800def2:	e063      	b.n	800dfbc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d103      	bne.n	800df02 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800defa:	f001 ff23 	bl	800fd44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800defe:	2300      	movs	r3, #0
 800df00:	e05c      	b.n	800dfbc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800df02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df04:	2b00      	cmp	r3, #0
 800df06:	d106      	bne.n	800df16 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800df08:	f107 0314 	add.w	r3, r7, #20
 800df0c:	4618      	mov	r0, r3
 800df0e:	f001 f82f 	bl	800ef70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800df12:	2301      	movs	r3, #1
 800df14:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800df16:	f001 ff15 	bl	800fd44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800df1a:	f000 fd9b 	bl	800ea54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800df1e:	f001 fee1 	bl	800fce4 <vPortEnterCritical>
 800df22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800df28:	b25b      	sxtb	r3, r3
 800df2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df2e:	d103      	bne.n	800df38 <xQueueGenericSend+0x16c>
 800df30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df32:	2200      	movs	r2, #0
 800df34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800df38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800df3e:	b25b      	sxtb	r3, r3
 800df40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df44:	d103      	bne.n	800df4e <xQueueGenericSend+0x182>
 800df46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df48:	2200      	movs	r2, #0
 800df4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800df4e:	f001 fef9 	bl	800fd44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800df52:	1d3a      	adds	r2, r7, #4
 800df54:	f107 0314 	add.w	r3, r7, #20
 800df58:	4611      	mov	r1, r2
 800df5a:	4618      	mov	r0, r3
 800df5c:	f001 f81e 	bl	800ef9c <xTaskCheckForTimeOut>
 800df60:	4603      	mov	r3, r0
 800df62:	2b00      	cmp	r3, #0
 800df64:	d124      	bne.n	800dfb0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800df66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800df68:	f000 faa2 	bl	800e4b0 <prvIsQueueFull>
 800df6c:	4603      	mov	r3, r0
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d018      	beq.n	800dfa4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800df72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df74:	3310      	adds	r3, #16
 800df76:	687a      	ldr	r2, [r7, #4]
 800df78:	4611      	mov	r1, r2
 800df7a:	4618      	mov	r0, r3
 800df7c:	f000 ff44 	bl	800ee08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800df80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800df82:	f000 fa2d 	bl	800e3e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800df86:	f000 fd73 	bl	800ea70 <xTaskResumeAll>
 800df8a:	4603      	mov	r3, r0
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	f47f af7c 	bne.w	800de8a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800df92:	4b0c      	ldr	r3, [pc, #48]	; (800dfc4 <xQueueGenericSend+0x1f8>)
 800df94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df98:	601a      	str	r2, [r3, #0]
 800df9a:	f3bf 8f4f 	dsb	sy
 800df9e:	f3bf 8f6f 	isb	sy
 800dfa2:	e772      	b.n	800de8a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800dfa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dfa6:	f000 fa1b 	bl	800e3e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dfaa:	f000 fd61 	bl	800ea70 <xTaskResumeAll>
 800dfae:	e76c      	b.n	800de8a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800dfb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dfb2:	f000 fa15 	bl	800e3e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dfb6:	f000 fd5b 	bl	800ea70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800dfba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	3738      	adds	r7, #56	; 0x38
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bd80      	pop	{r7, pc}
 800dfc4:	e000ed04 	.word	0xe000ed04

0800dfc8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b090      	sub	sp, #64	; 0x40
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	60f8      	str	r0, [r7, #12]
 800dfd0:	60b9      	str	r1, [r7, #8]
 800dfd2:	607a      	str	r2, [r7, #4]
 800dfd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800dfda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d10a      	bne.n	800dff6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800dfe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfe4:	f383 8811 	msr	BASEPRI, r3
 800dfe8:	f3bf 8f6f 	isb	sy
 800dfec:	f3bf 8f4f 	dsb	sy
 800dff0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800dff2:	bf00      	nop
 800dff4:	e7fe      	b.n	800dff4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dff6:	68bb      	ldr	r3, [r7, #8]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d103      	bne.n	800e004 <xQueueGenericSendFromISR+0x3c>
 800dffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e000:	2b00      	cmp	r3, #0
 800e002:	d101      	bne.n	800e008 <xQueueGenericSendFromISR+0x40>
 800e004:	2301      	movs	r3, #1
 800e006:	e000      	b.n	800e00a <xQueueGenericSendFromISR+0x42>
 800e008:	2300      	movs	r3, #0
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d10a      	bne.n	800e024 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e012:	f383 8811 	msr	BASEPRI, r3
 800e016:	f3bf 8f6f 	isb	sy
 800e01a:	f3bf 8f4f 	dsb	sy
 800e01e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e020:	bf00      	nop
 800e022:	e7fe      	b.n	800e022 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	2b02      	cmp	r3, #2
 800e028:	d103      	bne.n	800e032 <xQueueGenericSendFromISR+0x6a>
 800e02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e02c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e02e:	2b01      	cmp	r3, #1
 800e030:	d101      	bne.n	800e036 <xQueueGenericSendFromISR+0x6e>
 800e032:	2301      	movs	r3, #1
 800e034:	e000      	b.n	800e038 <xQueueGenericSendFromISR+0x70>
 800e036:	2300      	movs	r3, #0
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d10a      	bne.n	800e052 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e040:	f383 8811 	msr	BASEPRI, r3
 800e044:	f3bf 8f6f 	isb	sy
 800e048:	f3bf 8f4f 	dsb	sy
 800e04c:	623b      	str	r3, [r7, #32]
}
 800e04e:	bf00      	nop
 800e050:	e7fe      	b.n	800e050 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e052:	f001 ff29 	bl	800fea8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e056:	f3ef 8211 	mrs	r2, BASEPRI
 800e05a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e05e:	f383 8811 	msr	BASEPRI, r3
 800e062:	f3bf 8f6f 	isb	sy
 800e066:	f3bf 8f4f 	dsb	sy
 800e06a:	61fa      	str	r2, [r7, #28]
 800e06c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e06e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e070:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e074:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e07a:	429a      	cmp	r2, r3
 800e07c:	d302      	bcc.n	800e084 <xQueueGenericSendFromISR+0xbc>
 800e07e:	683b      	ldr	r3, [r7, #0]
 800e080:	2b02      	cmp	r3, #2
 800e082:	d12f      	bne.n	800e0e4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e086:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e08a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e092:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e094:	683a      	ldr	r2, [r7, #0]
 800e096:	68b9      	ldr	r1, [r7, #8]
 800e098:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e09a:	f000 f911 	bl	800e2c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e09e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e0a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0a6:	d112      	bne.n	800e0ce <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d016      	beq.n	800e0de <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0b2:	3324      	adds	r3, #36	; 0x24
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	f000 fef7 	bl	800eea8 <xTaskRemoveFromEventList>
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d00e      	beq.n	800e0de <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d00b      	beq.n	800e0de <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	2201      	movs	r2, #1
 800e0ca:	601a      	str	r2, [r3, #0]
 800e0cc:	e007      	b.n	800e0de <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e0ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e0d2:	3301      	adds	r3, #1
 800e0d4:	b2db      	uxtb	r3, r3
 800e0d6:	b25a      	sxtb	r2, r3
 800e0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e0de:	2301      	movs	r3, #1
 800e0e0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e0e2:	e001      	b.n	800e0e8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e0e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0ea:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e0ec:	697b      	ldr	r3, [r7, #20]
 800e0ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e0f2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e0f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	3740      	adds	r7, #64	; 0x40
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	bd80      	pop	{r7, pc}
	...

0800e100 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b08c      	sub	sp, #48	; 0x30
 800e104:	af00      	add	r7, sp, #0
 800e106:	60f8      	str	r0, [r7, #12]
 800e108:	60b9      	str	r1, [r7, #8]
 800e10a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e10c:	2300      	movs	r3, #0
 800e10e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e116:	2b00      	cmp	r3, #0
 800e118:	d10a      	bne.n	800e130 <xQueueReceive+0x30>
	__asm volatile
 800e11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e11e:	f383 8811 	msr	BASEPRI, r3
 800e122:	f3bf 8f6f 	isb	sy
 800e126:	f3bf 8f4f 	dsb	sy
 800e12a:	623b      	str	r3, [r7, #32]
}
 800e12c:	bf00      	nop
 800e12e:	e7fe      	b.n	800e12e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e130:	68bb      	ldr	r3, [r7, #8]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d103      	bne.n	800e13e <xQueueReceive+0x3e>
 800e136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d101      	bne.n	800e142 <xQueueReceive+0x42>
 800e13e:	2301      	movs	r3, #1
 800e140:	e000      	b.n	800e144 <xQueueReceive+0x44>
 800e142:	2300      	movs	r3, #0
 800e144:	2b00      	cmp	r3, #0
 800e146:	d10a      	bne.n	800e15e <xQueueReceive+0x5e>
	__asm volatile
 800e148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e14c:	f383 8811 	msr	BASEPRI, r3
 800e150:	f3bf 8f6f 	isb	sy
 800e154:	f3bf 8f4f 	dsb	sy
 800e158:	61fb      	str	r3, [r7, #28]
}
 800e15a:	bf00      	nop
 800e15c:	e7fe      	b.n	800e15c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e15e:	f001 f865 	bl	800f22c <xTaskGetSchedulerState>
 800e162:	4603      	mov	r3, r0
 800e164:	2b00      	cmp	r3, #0
 800e166:	d102      	bne.n	800e16e <xQueueReceive+0x6e>
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d101      	bne.n	800e172 <xQueueReceive+0x72>
 800e16e:	2301      	movs	r3, #1
 800e170:	e000      	b.n	800e174 <xQueueReceive+0x74>
 800e172:	2300      	movs	r3, #0
 800e174:	2b00      	cmp	r3, #0
 800e176:	d10a      	bne.n	800e18e <xQueueReceive+0x8e>
	__asm volatile
 800e178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e17c:	f383 8811 	msr	BASEPRI, r3
 800e180:	f3bf 8f6f 	isb	sy
 800e184:	f3bf 8f4f 	dsb	sy
 800e188:	61bb      	str	r3, [r7, #24]
}
 800e18a:	bf00      	nop
 800e18c:	e7fe      	b.n	800e18c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e18e:	f001 fda9 	bl	800fce4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e196:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d01f      	beq.n	800e1de <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e19e:	68b9      	ldr	r1, [r7, #8]
 800e1a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e1a2:	f000 f8f7 	bl	800e394 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a8:	1e5a      	subs	r2, r3, #1
 800e1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1b0:	691b      	ldr	r3, [r3, #16]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d00f      	beq.n	800e1d6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1b8:	3310      	adds	r3, #16
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f000 fe74 	bl	800eea8 <xTaskRemoveFromEventList>
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d007      	beq.n	800e1d6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e1c6:	4b3d      	ldr	r3, [pc, #244]	; (800e2bc <xQueueReceive+0x1bc>)
 800e1c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1cc:	601a      	str	r2, [r3, #0]
 800e1ce:	f3bf 8f4f 	dsb	sy
 800e1d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e1d6:	f001 fdb5 	bl	800fd44 <vPortExitCritical>
				return pdPASS;
 800e1da:	2301      	movs	r3, #1
 800e1dc:	e069      	b.n	800e2b2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d103      	bne.n	800e1ec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e1e4:	f001 fdae 	bl	800fd44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	e062      	b.n	800e2b2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d106      	bne.n	800e200 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e1f2:	f107 0310 	add.w	r3, r7, #16
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	f000 feba 	bl	800ef70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e1fc:	2301      	movs	r3, #1
 800e1fe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e200:	f001 fda0 	bl	800fd44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e204:	f000 fc26 	bl	800ea54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e208:	f001 fd6c 	bl	800fce4 <vPortEnterCritical>
 800e20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e20e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e212:	b25b      	sxtb	r3, r3
 800e214:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e218:	d103      	bne.n	800e222 <xQueueReceive+0x122>
 800e21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e21c:	2200      	movs	r2, #0
 800e21e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e224:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e228:	b25b      	sxtb	r3, r3
 800e22a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e22e:	d103      	bne.n	800e238 <xQueueReceive+0x138>
 800e230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e232:	2200      	movs	r2, #0
 800e234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e238:	f001 fd84 	bl	800fd44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e23c:	1d3a      	adds	r2, r7, #4
 800e23e:	f107 0310 	add.w	r3, r7, #16
 800e242:	4611      	mov	r1, r2
 800e244:	4618      	mov	r0, r3
 800e246:	f000 fea9 	bl	800ef9c <xTaskCheckForTimeOut>
 800e24a:	4603      	mov	r3, r0
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d123      	bne.n	800e298 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e250:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e252:	f000 f917 	bl	800e484 <prvIsQueueEmpty>
 800e256:	4603      	mov	r3, r0
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d017      	beq.n	800e28c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e25e:	3324      	adds	r3, #36	; 0x24
 800e260:	687a      	ldr	r2, [r7, #4]
 800e262:	4611      	mov	r1, r2
 800e264:	4618      	mov	r0, r3
 800e266:	f000 fdcf 	bl	800ee08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e26a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e26c:	f000 f8b8 	bl	800e3e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e270:	f000 fbfe 	bl	800ea70 <xTaskResumeAll>
 800e274:	4603      	mov	r3, r0
 800e276:	2b00      	cmp	r3, #0
 800e278:	d189      	bne.n	800e18e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e27a:	4b10      	ldr	r3, [pc, #64]	; (800e2bc <xQueueReceive+0x1bc>)
 800e27c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e280:	601a      	str	r2, [r3, #0]
 800e282:	f3bf 8f4f 	dsb	sy
 800e286:	f3bf 8f6f 	isb	sy
 800e28a:	e780      	b.n	800e18e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e28c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e28e:	f000 f8a7 	bl	800e3e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e292:	f000 fbed 	bl	800ea70 <xTaskResumeAll>
 800e296:	e77a      	b.n	800e18e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e298:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e29a:	f000 f8a1 	bl	800e3e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e29e:	f000 fbe7 	bl	800ea70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e2a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e2a4:	f000 f8ee 	bl	800e484 <prvIsQueueEmpty>
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	f43f af6f 	beq.w	800e18e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e2b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	3730      	adds	r7, #48	; 0x30
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}
 800e2ba:	bf00      	nop
 800e2bc:	e000ed04 	.word	0xe000ed04

0800e2c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b086      	sub	sp, #24
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	60f8      	str	r0, [r7, #12]
 800e2c8:	60b9      	str	r1, [r7, #8]
 800e2ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d10d      	bne.n	800e2fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d14d      	bne.n	800e382 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	689b      	ldr	r3, [r3, #8]
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	f000 ffbc 	bl	800f268 <xTaskPriorityDisinherit>
 800e2f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	609a      	str	r2, [r3, #8]
 800e2f8:	e043      	b.n	800e382 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d119      	bne.n	800e334 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	6858      	ldr	r0, [r3, #4]
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e308:	461a      	mov	r2, r3
 800e30a:	68b9      	ldr	r1, [r7, #8]
 800e30c:	f004 ff07 	bl	801311e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	685a      	ldr	r2, [r3, #4]
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e318:	441a      	add	r2, r3
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	685a      	ldr	r2, [r3, #4]
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	689b      	ldr	r3, [r3, #8]
 800e326:	429a      	cmp	r2, r3
 800e328:	d32b      	bcc.n	800e382 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	681a      	ldr	r2, [r3, #0]
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	605a      	str	r2, [r3, #4]
 800e332:	e026      	b.n	800e382 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	68d8      	ldr	r0, [r3, #12]
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e33c:	461a      	mov	r2, r3
 800e33e:	68b9      	ldr	r1, [r7, #8]
 800e340:	f004 feed 	bl	801311e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	68da      	ldr	r2, [r3, #12]
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e34c:	425b      	negs	r3, r3
 800e34e:	441a      	add	r2, r3
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	68da      	ldr	r2, [r3, #12]
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	429a      	cmp	r2, r3
 800e35e:	d207      	bcs.n	800e370 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	689a      	ldr	r2, [r3, #8]
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e368:	425b      	negs	r3, r3
 800e36a:	441a      	add	r2, r3
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	2b02      	cmp	r3, #2
 800e374:	d105      	bne.n	800e382 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e376:	693b      	ldr	r3, [r7, #16]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d002      	beq.n	800e382 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e37c:	693b      	ldr	r3, [r7, #16]
 800e37e:	3b01      	subs	r3, #1
 800e380:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e382:	693b      	ldr	r3, [r7, #16]
 800e384:	1c5a      	adds	r2, r3, #1
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e38a:	697b      	ldr	r3, [r7, #20]
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	3718      	adds	r7, #24
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}

0800e394 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b082      	sub	sp, #8
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
 800e39c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d018      	beq.n	800e3d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	68da      	ldr	r2, [r3, #12]
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3ae:	441a      	add	r2, r3
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	68da      	ldr	r2, [r3, #12]
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	689b      	ldr	r3, [r3, #8]
 800e3bc:	429a      	cmp	r2, r3
 800e3be:	d303      	bcc.n	800e3c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681a      	ldr	r2, [r3, #0]
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	68d9      	ldr	r1, [r3, #12]
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3d0:	461a      	mov	r2, r3
 800e3d2:	6838      	ldr	r0, [r7, #0]
 800e3d4:	f004 fea3 	bl	801311e <memcpy>
	}
}
 800e3d8:	bf00      	nop
 800e3da:	3708      	adds	r7, #8
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bd80      	pop	{r7, pc}

0800e3e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b084      	sub	sp, #16
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e3e8:	f001 fc7c 	bl	800fce4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e3f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e3f4:	e011      	b.n	800e41a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d012      	beq.n	800e424 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	3324      	adds	r3, #36	; 0x24
 800e402:	4618      	mov	r0, r3
 800e404:	f000 fd50 	bl	800eea8 <xTaskRemoveFromEventList>
 800e408:	4603      	mov	r3, r0
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d001      	beq.n	800e412 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e40e:	f000 fe27 	bl	800f060 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e412:	7bfb      	ldrb	r3, [r7, #15]
 800e414:	3b01      	subs	r3, #1
 800e416:	b2db      	uxtb	r3, r3
 800e418:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e41a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	dce9      	bgt.n	800e3f6 <prvUnlockQueue+0x16>
 800e422:	e000      	b.n	800e426 <prvUnlockQueue+0x46>
					break;
 800e424:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	22ff      	movs	r2, #255	; 0xff
 800e42a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e42e:	f001 fc89 	bl	800fd44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e432:	f001 fc57 	bl	800fce4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e43c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e43e:	e011      	b.n	800e464 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	691b      	ldr	r3, [r3, #16]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d012      	beq.n	800e46e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	3310      	adds	r3, #16
 800e44c:	4618      	mov	r0, r3
 800e44e:	f000 fd2b 	bl	800eea8 <xTaskRemoveFromEventList>
 800e452:	4603      	mov	r3, r0
 800e454:	2b00      	cmp	r3, #0
 800e456:	d001      	beq.n	800e45c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e458:	f000 fe02 	bl	800f060 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e45c:	7bbb      	ldrb	r3, [r7, #14]
 800e45e:	3b01      	subs	r3, #1
 800e460:	b2db      	uxtb	r3, r3
 800e462:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e464:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	dce9      	bgt.n	800e440 <prvUnlockQueue+0x60>
 800e46c:	e000      	b.n	800e470 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e46e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	22ff      	movs	r2, #255	; 0xff
 800e474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e478:	f001 fc64 	bl	800fd44 <vPortExitCritical>
}
 800e47c:	bf00      	nop
 800e47e:	3710      	adds	r7, #16
 800e480:	46bd      	mov	sp, r7
 800e482:	bd80      	pop	{r7, pc}

0800e484 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b084      	sub	sp, #16
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e48c:	f001 fc2a 	bl	800fce4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e494:	2b00      	cmp	r3, #0
 800e496:	d102      	bne.n	800e49e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e498:	2301      	movs	r3, #1
 800e49a:	60fb      	str	r3, [r7, #12]
 800e49c:	e001      	b.n	800e4a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e4a2:	f001 fc4f 	bl	800fd44 <vPortExitCritical>

	return xReturn;
 800e4a6:	68fb      	ldr	r3, [r7, #12]
}
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	3710      	adds	r7, #16
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd80      	pop	{r7, pc}

0800e4b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b084      	sub	sp, #16
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e4b8:	f001 fc14 	bl	800fce4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4c4:	429a      	cmp	r2, r3
 800e4c6:	d102      	bne.n	800e4ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	60fb      	str	r3, [r7, #12]
 800e4cc:	e001      	b.n	800e4d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e4d2:	f001 fc37 	bl	800fd44 <vPortExitCritical>

	return xReturn;
 800e4d6:	68fb      	ldr	r3, [r7, #12]
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	3710      	adds	r7, #16
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd80      	pop	{r7, pc}

0800e4e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e4e0:	b480      	push	{r7}
 800e4e2:	b085      	sub	sp, #20
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
 800e4e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	60fb      	str	r3, [r7, #12]
 800e4ee:	e014      	b.n	800e51a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e4f0:	4a0f      	ldr	r2, [pc, #60]	; (800e530 <vQueueAddToRegistry+0x50>)
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d10b      	bne.n	800e514 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e4fc:	490c      	ldr	r1, [pc, #48]	; (800e530 <vQueueAddToRegistry+0x50>)
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	683a      	ldr	r2, [r7, #0]
 800e502:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e506:	4a0a      	ldr	r2, [pc, #40]	; (800e530 <vQueueAddToRegistry+0x50>)
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	00db      	lsls	r3, r3, #3
 800e50c:	4413      	add	r3, r2
 800e50e:	687a      	ldr	r2, [r7, #4]
 800e510:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e512:	e006      	b.n	800e522 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	3301      	adds	r3, #1
 800e518:	60fb      	str	r3, [r7, #12]
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	2b07      	cmp	r3, #7
 800e51e:	d9e7      	bls.n	800e4f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e520:	bf00      	nop
 800e522:	bf00      	nop
 800e524:	3714      	adds	r7, #20
 800e526:	46bd      	mov	sp, r7
 800e528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52c:	4770      	bx	lr
 800e52e:	bf00      	nop
 800e530:	20003e14 	.word	0x20003e14

0800e534 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e534:	b580      	push	{r7, lr}
 800e536:	b086      	sub	sp, #24
 800e538:	af00      	add	r7, sp, #0
 800e53a:	60f8      	str	r0, [r7, #12]
 800e53c:	60b9      	str	r1, [r7, #8]
 800e53e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e544:	f001 fbce 	bl	800fce4 <vPortEnterCritical>
 800e548:	697b      	ldr	r3, [r7, #20]
 800e54a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e54e:	b25b      	sxtb	r3, r3
 800e550:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e554:	d103      	bne.n	800e55e <vQueueWaitForMessageRestricted+0x2a>
 800e556:	697b      	ldr	r3, [r7, #20]
 800e558:	2200      	movs	r2, #0
 800e55a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e55e:	697b      	ldr	r3, [r7, #20]
 800e560:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e564:	b25b      	sxtb	r3, r3
 800e566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e56a:	d103      	bne.n	800e574 <vQueueWaitForMessageRestricted+0x40>
 800e56c:	697b      	ldr	r3, [r7, #20]
 800e56e:	2200      	movs	r2, #0
 800e570:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e574:	f001 fbe6 	bl	800fd44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e578:	697b      	ldr	r3, [r7, #20]
 800e57a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d106      	bne.n	800e58e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e580:	697b      	ldr	r3, [r7, #20]
 800e582:	3324      	adds	r3, #36	; 0x24
 800e584:	687a      	ldr	r2, [r7, #4]
 800e586:	68b9      	ldr	r1, [r7, #8]
 800e588:	4618      	mov	r0, r3
 800e58a:	f000 fc61 	bl	800ee50 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e58e:	6978      	ldr	r0, [r7, #20]
 800e590:	f7ff ff26 	bl	800e3e0 <prvUnlockQueue>
	}
 800e594:	bf00      	nop
 800e596:	3718      	adds	r7, #24
 800e598:	46bd      	mov	sp, r7
 800e59a:	bd80      	pop	{r7, pc}

0800e59c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b08e      	sub	sp, #56	; 0x38
 800e5a0:	af04      	add	r7, sp, #16
 800e5a2:	60f8      	str	r0, [r7, #12]
 800e5a4:	60b9      	str	r1, [r7, #8]
 800e5a6:	607a      	str	r2, [r7, #4]
 800e5a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e5aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d10a      	bne.n	800e5c6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800e5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5b4:	f383 8811 	msr	BASEPRI, r3
 800e5b8:	f3bf 8f6f 	isb	sy
 800e5bc:	f3bf 8f4f 	dsb	sy
 800e5c0:	623b      	str	r3, [r7, #32]
}
 800e5c2:	bf00      	nop
 800e5c4:	e7fe      	b.n	800e5c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d10a      	bne.n	800e5e2 <xTaskCreateStatic+0x46>
	__asm volatile
 800e5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5d0:	f383 8811 	msr	BASEPRI, r3
 800e5d4:	f3bf 8f6f 	isb	sy
 800e5d8:	f3bf 8f4f 	dsb	sy
 800e5dc:	61fb      	str	r3, [r7, #28]
}
 800e5de:	bf00      	nop
 800e5e0:	e7fe      	b.n	800e5e0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e5e2:	23a8      	movs	r3, #168	; 0xa8
 800e5e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e5e6:	693b      	ldr	r3, [r7, #16]
 800e5e8:	2ba8      	cmp	r3, #168	; 0xa8
 800e5ea:	d00a      	beq.n	800e602 <xTaskCreateStatic+0x66>
	__asm volatile
 800e5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5f0:	f383 8811 	msr	BASEPRI, r3
 800e5f4:	f3bf 8f6f 	isb	sy
 800e5f8:	f3bf 8f4f 	dsb	sy
 800e5fc:	61bb      	str	r3, [r7, #24]
}
 800e5fe:	bf00      	nop
 800e600:	e7fe      	b.n	800e600 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e602:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e606:	2b00      	cmp	r3, #0
 800e608:	d01e      	beq.n	800e648 <xTaskCreateStatic+0xac>
 800e60a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d01b      	beq.n	800e648 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e612:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e616:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e618:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e61c:	2202      	movs	r2, #2
 800e61e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e622:	2300      	movs	r3, #0
 800e624:	9303      	str	r3, [sp, #12]
 800e626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e628:	9302      	str	r3, [sp, #8]
 800e62a:	f107 0314 	add.w	r3, r7, #20
 800e62e:	9301      	str	r3, [sp, #4]
 800e630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e632:	9300      	str	r3, [sp, #0]
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	687a      	ldr	r2, [r7, #4]
 800e638:	68b9      	ldr	r1, [r7, #8]
 800e63a:	68f8      	ldr	r0, [r7, #12]
 800e63c:	f000 f850 	bl	800e6e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e640:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e642:	f000 f8f3 	bl	800e82c <prvAddNewTaskToReadyList>
 800e646:	e001      	b.n	800e64c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e648:	2300      	movs	r3, #0
 800e64a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e64c:	697b      	ldr	r3, [r7, #20]
	}
 800e64e:	4618      	mov	r0, r3
 800e650:	3728      	adds	r7, #40	; 0x28
 800e652:	46bd      	mov	sp, r7
 800e654:	bd80      	pop	{r7, pc}

0800e656 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e656:	b580      	push	{r7, lr}
 800e658:	b08c      	sub	sp, #48	; 0x30
 800e65a:	af04      	add	r7, sp, #16
 800e65c:	60f8      	str	r0, [r7, #12]
 800e65e:	60b9      	str	r1, [r7, #8]
 800e660:	603b      	str	r3, [r7, #0]
 800e662:	4613      	mov	r3, r2
 800e664:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e666:	88fb      	ldrh	r3, [r7, #6]
 800e668:	009b      	lsls	r3, r3, #2
 800e66a:	4618      	mov	r0, r3
 800e66c:	f001 fc5c 	bl	800ff28 <pvPortMalloc>
 800e670:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e672:	697b      	ldr	r3, [r7, #20]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d00e      	beq.n	800e696 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e678:	20a8      	movs	r0, #168	; 0xa8
 800e67a:	f001 fc55 	bl	800ff28 <pvPortMalloc>
 800e67e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e680:	69fb      	ldr	r3, [r7, #28]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d003      	beq.n	800e68e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e686:	69fb      	ldr	r3, [r7, #28]
 800e688:	697a      	ldr	r2, [r7, #20]
 800e68a:	631a      	str	r2, [r3, #48]	; 0x30
 800e68c:	e005      	b.n	800e69a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e68e:	6978      	ldr	r0, [r7, #20]
 800e690:	f001 fd16 	bl	80100c0 <vPortFree>
 800e694:	e001      	b.n	800e69a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e696:	2300      	movs	r3, #0
 800e698:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e69a:	69fb      	ldr	r3, [r7, #28]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d017      	beq.n	800e6d0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e6a0:	69fb      	ldr	r3, [r7, #28]
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e6a8:	88fa      	ldrh	r2, [r7, #6]
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	9303      	str	r3, [sp, #12]
 800e6ae:	69fb      	ldr	r3, [r7, #28]
 800e6b0:	9302      	str	r3, [sp, #8]
 800e6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b4:	9301      	str	r3, [sp, #4]
 800e6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6b8:	9300      	str	r3, [sp, #0]
 800e6ba:	683b      	ldr	r3, [r7, #0]
 800e6bc:	68b9      	ldr	r1, [r7, #8]
 800e6be:	68f8      	ldr	r0, [r7, #12]
 800e6c0:	f000 f80e 	bl	800e6e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e6c4:	69f8      	ldr	r0, [r7, #28]
 800e6c6:	f000 f8b1 	bl	800e82c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e6ca:	2301      	movs	r3, #1
 800e6cc:	61bb      	str	r3, [r7, #24]
 800e6ce:	e002      	b.n	800e6d6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e6d0:	f04f 33ff 	mov.w	r3, #4294967295
 800e6d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e6d6:	69bb      	ldr	r3, [r7, #24]
	}
 800e6d8:	4618      	mov	r0, r3
 800e6da:	3720      	adds	r7, #32
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd80      	pop	{r7, pc}

0800e6e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b088      	sub	sp, #32
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	60f8      	str	r0, [r7, #12]
 800e6e8:	60b9      	str	r1, [r7, #8]
 800e6ea:	607a      	str	r2, [r7, #4]
 800e6ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	009b      	lsls	r3, r3, #2
 800e6f6:	461a      	mov	r2, r3
 800e6f8:	21a5      	movs	r1, #165	; 0xa5
 800e6fa:	f004 fc3b 	bl	8012f74 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e708:	3b01      	subs	r3, #1
 800e70a:	009b      	lsls	r3, r3, #2
 800e70c:	4413      	add	r3, r2
 800e70e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e710:	69bb      	ldr	r3, [r7, #24]
 800e712:	f023 0307 	bic.w	r3, r3, #7
 800e716:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e718:	69bb      	ldr	r3, [r7, #24]
 800e71a:	f003 0307 	and.w	r3, r3, #7
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d00a      	beq.n	800e738 <prvInitialiseNewTask+0x58>
	__asm volatile
 800e722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e726:	f383 8811 	msr	BASEPRI, r3
 800e72a:	f3bf 8f6f 	isb	sy
 800e72e:	f3bf 8f4f 	dsb	sy
 800e732:	617b      	str	r3, [r7, #20]
}
 800e734:	bf00      	nop
 800e736:	e7fe      	b.n	800e736 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e738:	68bb      	ldr	r3, [r7, #8]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d01f      	beq.n	800e77e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e73e:	2300      	movs	r3, #0
 800e740:	61fb      	str	r3, [r7, #28]
 800e742:	e012      	b.n	800e76a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e744:	68ba      	ldr	r2, [r7, #8]
 800e746:	69fb      	ldr	r3, [r7, #28]
 800e748:	4413      	add	r3, r2
 800e74a:	7819      	ldrb	r1, [r3, #0]
 800e74c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e74e:	69fb      	ldr	r3, [r7, #28]
 800e750:	4413      	add	r3, r2
 800e752:	3334      	adds	r3, #52	; 0x34
 800e754:	460a      	mov	r2, r1
 800e756:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e758:	68ba      	ldr	r2, [r7, #8]
 800e75a:	69fb      	ldr	r3, [r7, #28]
 800e75c:	4413      	add	r3, r2
 800e75e:	781b      	ldrb	r3, [r3, #0]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d006      	beq.n	800e772 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e764:	69fb      	ldr	r3, [r7, #28]
 800e766:	3301      	adds	r3, #1
 800e768:	61fb      	str	r3, [r7, #28]
 800e76a:	69fb      	ldr	r3, [r7, #28]
 800e76c:	2b0f      	cmp	r3, #15
 800e76e:	d9e9      	bls.n	800e744 <prvInitialiseNewTask+0x64>
 800e770:	e000      	b.n	800e774 <prvInitialiseNewTask+0x94>
			{
				break;
 800e772:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e776:	2200      	movs	r2, #0
 800e778:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e77c:	e003      	b.n	800e786 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e780:	2200      	movs	r2, #0
 800e782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e788:	2b37      	cmp	r3, #55	; 0x37
 800e78a:	d901      	bls.n	800e790 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e78c:	2337      	movs	r3, #55	; 0x37
 800e78e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e794:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e798:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e79a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e79e:	2200      	movs	r2, #0
 800e7a0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7a4:	3304      	adds	r3, #4
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	f7ff f978 	bl	800da9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ae:	3318      	adds	r3, #24
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f7ff f973 	bl	800da9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7de:	3354      	adds	r3, #84	; 0x54
 800e7e0:	224c      	movs	r2, #76	; 0x4c
 800e7e2:	2100      	movs	r1, #0
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f004 fbc5 	bl	8012f74 <memset>
 800e7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ec:	4a0c      	ldr	r2, [pc, #48]	; (800e820 <prvInitialiseNewTask+0x140>)
 800e7ee:	659a      	str	r2, [r3, #88]	; 0x58
 800e7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7f2:	4a0c      	ldr	r2, [pc, #48]	; (800e824 <prvInitialiseNewTask+0x144>)
 800e7f4:	65da      	str	r2, [r3, #92]	; 0x5c
 800e7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7f8:	4a0b      	ldr	r2, [pc, #44]	; (800e828 <prvInitialiseNewTask+0x148>)
 800e7fa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e7fc:	683a      	ldr	r2, [r7, #0]
 800e7fe:	68f9      	ldr	r1, [r7, #12]
 800e800:	69b8      	ldr	r0, [r7, #24]
 800e802:	f001 f941 	bl	800fa88 <pxPortInitialiseStack>
 800e806:	4602      	mov	r2, r0
 800e808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e80a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d002      	beq.n	800e818 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e816:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e818:	bf00      	nop
 800e81a:	3720      	adds	r7, #32
 800e81c:	46bd      	mov	sp, r7
 800e81e:	bd80      	pop	{r7, pc}
 800e820:	200080a8 	.word	0x200080a8
 800e824:	20008110 	.word	0x20008110
 800e828:	20008178 	.word	0x20008178

0800e82c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b082      	sub	sp, #8
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e834:	f001 fa56 	bl	800fce4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e838:	4b2d      	ldr	r3, [pc, #180]	; (800e8f0 <prvAddNewTaskToReadyList+0xc4>)
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	3301      	adds	r3, #1
 800e83e:	4a2c      	ldr	r2, [pc, #176]	; (800e8f0 <prvAddNewTaskToReadyList+0xc4>)
 800e840:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e842:	4b2c      	ldr	r3, [pc, #176]	; (800e8f4 <prvAddNewTaskToReadyList+0xc8>)
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d109      	bne.n	800e85e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e84a:	4a2a      	ldr	r2, [pc, #168]	; (800e8f4 <prvAddNewTaskToReadyList+0xc8>)
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e850:	4b27      	ldr	r3, [pc, #156]	; (800e8f0 <prvAddNewTaskToReadyList+0xc4>)
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	2b01      	cmp	r3, #1
 800e856:	d110      	bne.n	800e87a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e858:	f000 fc26 	bl	800f0a8 <prvInitialiseTaskLists>
 800e85c:	e00d      	b.n	800e87a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e85e:	4b26      	ldr	r3, [pc, #152]	; (800e8f8 <prvAddNewTaskToReadyList+0xcc>)
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d109      	bne.n	800e87a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e866:	4b23      	ldr	r3, [pc, #140]	; (800e8f4 <prvAddNewTaskToReadyList+0xc8>)
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e870:	429a      	cmp	r2, r3
 800e872:	d802      	bhi.n	800e87a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e874:	4a1f      	ldr	r2, [pc, #124]	; (800e8f4 <prvAddNewTaskToReadyList+0xc8>)
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e87a:	4b20      	ldr	r3, [pc, #128]	; (800e8fc <prvAddNewTaskToReadyList+0xd0>)
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	3301      	adds	r3, #1
 800e880:	4a1e      	ldr	r2, [pc, #120]	; (800e8fc <prvAddNewTaskToReadyList+0xd0>)
 800e882:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e884:	4b1d      	ldr	r3, [pc, #116]	; (800e8fc <prvAddNewTaskToReadyList+0xd0>)
 800e886:	681a      	ldr	r2, [r3, #0]
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e890:	4b1b      	ldr	r3, [pc, #108]	; (800e900 <prvAddNewTaskToReadyList+0xd4>)
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	429a      	cmp	r2, r3
 800e896:	d903      	bls.n	800e8a0 <prvAddNewTaskToReadyList+0x74>
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e89c:	4a18      	ldr	r2, [pc, #96]	; (800e900 <prvAddNewTaskToReadyList+0xd4>)
 800e89e:	6013      	str	r3, [r2, #0]
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8a4:	4613      	mov	r3, r2
 800e8a6:	009b      	lsls	r3, r3, #2
 800e8a8:	4413      	add	r3, r2
 800e8aa:	009b      	lsls	r3, r3, #2
 800e8ac:	4a15      	ldr	r2, [pc, #84]	; (800e904 <prvAddNewTaskToReadyList+0xd8>)
 800e8ae:	441a      	add	r2, r3
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	3304      	adds	r3, #4
 800e8b4:	4619      	mov	r1, r3
 800e8b6:	4610      	mov	r0, r2
 800e8b8:	f7ff f8fd 	bl	800dab6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e8bc:	f001 fa42 	bl	800fd44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e8c0:	4b0d      	ldr	r3, [pc, #52]	; (800e8f8 <prvAddNewTaskToReadyList+0xcc>)
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d00e      	beq.n	800e8e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e8c8:	4b0a      	ldr	r3, [pc, #40]	; (800e8f4 <prvAddNewTaskToReadyList+0xc8>)
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8d2:	429a      	cmp	r2, r3
 800e8d4:	d207      	bcs.n	800e8e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e8d6:	4b0c      	ldr	r3, [pc, #48]	; (800e908 <prvAddNewTaskToReadyList+0xdc>)
 800e8d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8dc:	601a      	str	r2, [r3, #0]
 800e8de:	f3bf 8f4f 	dsb	sy
 800e8e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e8e6:	bf00      	nop
 800e8e8:	3708      	adds	r7, #8
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	bd80      	pop	{r7, pc}
 800e8ee:	bf00      	nop
 800e8f0:	20004328 	.word	0x20004328
 800e8f4:	20003e54 	.word	0x20003e54
 800e8f8:	20004334 	.word	0x20004334
 800e8fc:	20004344 	.word	0x20004344
 800e900:	20004330 	.word	0x20004330
 800e904:	20003e58 	.word	0x20003e58
 800e908:	e000ed04 	.word	0xe000ed04

0800e90c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b084      	sub	sp, #16
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e914:	2300      	movs	r3, #0
 800e916:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d017      	beq.n	800e94e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e91e:	4b13      	ldr	r3, [pc, #76]	; (800e96c <vTaskDelay+0x60>)
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d00a      	beq.n	800e93c <vTaskDelay+0x30>
	__asm volatile
 800e926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e92a:	f383 8811 	msr	BASEPRI, r3
 800e92e:	f3bf 8f6f 	isb	sy
 800e932:	f3bf 8f4f 	dsb	sy
 800e936:	60bb      	str	r3, [r7, #8]
}
 800e938:	bf00      	nop
 800e93a:	e7fe      	b.n	800e93a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e93c:	f000 f88a 	bl	800ea54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e940:	2100      	movs	r1, #0
 800e942:	6878      	ldr	r0, [r7, #4]
 800e944:	f000 fcfe 	bl	800f344 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e948:	f000 f892 	bl	800ea70 <xTaskResumeAll>
 800e94c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d107      	bne.n	800e964 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e954:	4b06      	ldr	r3, [pc, #24]	; (800e970 <vTaskDelay+0x64>)
 800e956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e95a:	601a      	str	r2, [r3, #0]
 800e95c:	f3bf 8f4f 	dsb	sy
 800e960:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e964:	bf00      	nop
 800e966:	3710      	adds	r7, #16
 800e968:	46bd      	mov	sp, r7
 800e96a:	bd80      	pop	{r7, pc}
 800e96c:	20004350 	.word	0x20004350
 800e970:	e000ed04 	.word	0xe000ed04

0800e974 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b08a      	sub	sp, #40	; 0x28
 800e978:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e97a:	2300      	movs	r3, #0
 800e97c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e97e:	2300      	movs	r3, #0
 800e980:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e982:	463a      	mov	r2, r7
 800e984:	1d39      	adds	r1, r7, #4
 800e986:	f107 0308 	add.w	r3, r7, #8
 800e98a:	4618      	mov	r0, r3
 800e98c:	f7ff f832 	bl	800d9f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e990:	6839      	ldr	r1, [r7, #0]
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	68ba      	ldr	r2, [r7, #8]
 800e996:	9202      	str	r2, [sp, #8]
 800e998:	9301      	str	r3, [sp, #4]
 800e99a:	2300      	movs	r3, #0
 800e99c:	9300      	str	r3, [sp, #0]
 800e99e:	2300      	movs	r3, #0
 800e9a0:	460a      	mov	r2, r1
 800e9a2:	4924      	ldr	r1, [pc, #144]	; (800ea34 <vTaskStartScheduler+0xc0>)
 800e9a4:	4824      	ldr	r0, [pc, #144]	; (800ea38 <vTaskStartScheduler+0xc4>)
 800e9a6:	f7ff fdf9 	bl	800e59c <xTaskCreateStatic>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	4a23      	ldr	r2, [pc, #140]	; (800ea3c <vTaskStartScheduler+0xc8>)
 800e9ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e9b0:	4b22      	ldr	r3, [pc, #136]	; (800ea3c <vTaskStartScheduler+0xc8>)
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d002      	beq.n	800e9be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e9b8:	2301      	movs	r3, #1
 800e9ba:	617b      	str	r3, [r7, #20]
 800e9bc:	e001      	b.n	800e9c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e9be:	2300      	movs	r3, #0
 800e9c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e9c2:	697b      	ldr	r3, [r7, #20]
 800e9c4:	2b01      	cmp	r3, #1
 800e9c6:	d102      	bne.n	800e9ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e9c8:	f000 fd10 	bl	800f3ec <xTimerCreateTimerTask>
 800e9cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e9ce:	697b      	ldr	r3, [r7, #20]
 800e9d0:	2b01      	cmp	r3, #1
 800e9d2:	d11b      	bne.n	800ea0c <vTaskStartScheduler+0x98>
	__asm volatile
 800e9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9d8:	f383 8811 	msr	BASEPRI, r3
 800e9dc:	f3bf 8f6f 	isb	sy
 800e9e0:	f3bf 8f4f 	dsb	sy
 800e9e4:	613b      	str	r3, [r7, #16]
}
 800e9e6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e9e8:	4b15      	ldr	r3, [pc, #84]	; (800ea40 <vTaskStartScheduler+0xcc>)
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	3354      	adds	r3, #84	; 0x54
 800e9ee:	4a15      	ldr	r2, [pc, #84]	; (800ea44 <vTaskStartScheduler+0xd0>)
 800e9f0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e9f2:	4b15      	ldr	r3, [pc, #84]	; (800ea48 <vTaskStartScheduler+0xd4>)
 800e9f4:	f04f 32ff 	mov.w	r2, #4294967295
 800e9f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e9fa:	4b14      	ldr	r3, [pc, #80]	; (800ea4c <vTaskStartScheduler+0xd8>)
 800e9fc:	2201      	movs	r2, #1
 800e9fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ea00:	4b13      	ldr	r3, [pc, #76]	; (800ea50 <vTaskStartScheduler+0xdc>)
 800ea02:	2200      	movs	r2, #0
 800ea04:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ea06:	f001 f8cb 	bl	800fba0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ea0a:	e00e      	b.n	800ea2a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ea0c:	697b      	ldr	r3, [r7, #20]
 800ea0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea12:	d10a      	bne.n	800ea2a <vTaskStartScheduler+0xb6>
	__asm volatile
 800ea14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea18:	f383 8811 	msr	BASEPRI, r3
 800ea1c:	f3bf 8f6f 	isb	sy
 800ea20:	f3bf 8f4f 	dsb	sy
 800ea24:	60fb      	str	r3, [r7, #12]
}
 800ea26:	bf00      	nop
 800ea28:	e7fe      	b.n	800ea28 <vTaskStartScheduler+0xb4>
}
 800ea2a:	bf00      	nop
 800ea2c:	3718      	adds	r7, #24
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bd80      	pop	{r7, pc}
 800ea32:	bf00      	nop
 800ea34:	08015670 	.word	0x08015670
 800ea38:	0800f079 	.word	0x0800f079
 800ea3c:	2000434c 	.word	0x2000434c
 800ea40:	20003e54 	.word	0x20003e54
 800ea44:	20000088 	.word	0x20000088
 800ea48:	20004348 	.word	0x20004348
 800ea4c:	20004334 	.word	0x20004334
 800ea50:	2000432c 	.word	0x2000432c

0800ea54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ea54:	b480      	push	{r7}
 800ea56:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ea58:	4b04      	ldr	r3, [pc, #16]	; (800ea6c <vTaskSuspendAll+0x18>)
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	3301      	adds	r3, #1
 800ea5e:	4a03      	ldr	r2, [pc, #12]	; (800ea6c <vTaskSuspendAll+0x18>)
 800ea60:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ea62:	bf00      	nop
 800ea64:	46bd      	mov	sp, r7
 800ea66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6a:	4770      	bx	lr
 800ea6c:	20004350 	.word	0x20004350

0800ea70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b084      	sub	sp, #16
 800ea74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ea76:	2300      	movs	r3, #0
 800ea78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ea7e:	4b42      	ldr	r3, [pc, #264]	; (800eb88 <xTaskResumeAll+0x118>)
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d10a      	bne.n	800ea9c <xTaskResumeAll+0x2c>
	__asm volatile
 800ea86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea8a:	f383 8811 	msr	BASEPRI, r3
 800ea8e:	f3bf 8f6f 	isb	sy
 800ea92:	f3bf 8f4f 	dsb	sy
 800ea96:	603b      	str	r3, [r7, #0]
}
 800ea98:	bf00      	nop
 800ea9a:	e7fe      	b.n	800ea9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ea9c:	f001 f922 	bl	800fce4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800eaa0:	4b39      	ldr	r3, [pc, #228]	; (800eb88 <xTaskResumeAll+0x118>)
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	3b01      	subs	r3, #1
 800eaa6:	4a38      	ldr	r2, [pc, #224]	; (800eb88 <xTaskResumeAll+0x118>)
 800eaa8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eaaa:	4b37      	ldr	r3, [pc, #220]	; (800eb88 <xTaskResumeAll+0x118>)
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d162      	bne.n	800eb78 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800eab2:	4b36      	ldr	r3, [pc, #216]	; (800eb8c <xTaskResumeAll+0x11c>)
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d05e      	beq.n	800eb78 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800eaba:	e02f      	b.n	800eb1c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eabc:	4b34      	ldr	r3, [pc, #208]	; (800eb90 <xTaskResumeAll+0x120>)
 800eabe:	68db      	ldr	r3, [r3, #12]
 800eac0:	68db      	ldr	r3, [r3, #12]
 800eac2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	3318      	adds	r3, #24
 800eac8:	4618      	mov	r0, r3
 800eaca:	f7ff f851 	bl	800db70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	3304      	adds	r3, #4
 800ead2:	4618      	mov	r0, r3
 800ead4:	f7ff f84c 	bl	800db70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eadc:	4b2d      	ldr	r3, [pc, #180]	; (800eb94 <xTaskResumeAll+0x124>)
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	429a      	cmp	r2, r3
 800eae2:	d903      	bls.n	800eaec <xTaskResumeAll+0x7c>
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eae8:	4a2a      	ldr	r2, [pc, #168]	; (800eb94 <xTaskResumeAll+0x124>)
 800eaea:	6013      	str	r3, [r2, #0]
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaf0:	4613      	mov	r3, r2
 800eaf2:	009b      	lsls	r3, r3, #2
 800eaf4:	4413      	add	r3, r2
 800eaf6:	009b      	lsls	r3, r3, #2
 800eaf8:	4a27      	ldr	r2, [pc, #156]	; (800eb98 <xTaskResumeAll+0x128>)
 800eafa:	441a      	add	r2, r3
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	3304      	adds	r3, #4
 800eb00:	4619      	mov	r1, r3
 800eb02:	4610      	mov	r0, r2
 800eb04:	f7fe ffd7 	bl	800dab6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb0c:	4b23      	ldr	r3, [pc, #140]	; (800eb9c <xTaskResumeAll+0x12c>)
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb12:	429a      	cmp	r2, r3
 800eb14:	d302      	bcc.n	800eb1c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800eb16:	4b22      	ldr	r3, [pc, #136]	; (800eba0 <xTaskResumeAll+0x130>)
 800eb18:	2201      	movs	r2, #1
 800eb1a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800eb1c:	4b1c      	ldr	r3, [pc, #112]	; (800eb90 <xTaskResumeAll+0x120>)
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d1cb      	bne.n	800eabc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d001      	beq.n	800eb2e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800eb2a:	f000 fb5f 	bl	800f1ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800eb2e:	4b1d      	ldr	r3, [pc, #116]	; (800eba4 <xTaskResumeAll+0x134>)
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d010      	beq.n	800eb5c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800eb3a:	f000 f847 	bl	800ebcc <xTaskIncrementTick>
 800eb3e:	4603      	mov	r3, r0
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d002      	beq.n	800eb4a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800eb44:	4b16      	ldr	r3, [pc, #88]	; (800eba0 <xTaskResumeAll+0x130>)
 800eb46:	2201      	movs	r2, #1
 800eb48:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	3b01      	subs	r3, #1
 800eb4e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d1f1      	bne.n	800eb3a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800eb56:	4b13      	ldr	r3, [pc, #76]	; (800eba4 <xTaskResumeAll+0x134>)
 800eb58:	2200      	movs	r2, #0
 800eb5a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800eb5c:	4b10      	ldr	r3, [pc, #64]	; (800eba0 <xTaskResumeAll+0x130>)
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d009      	beq.n	800eb78 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800eb64:	2301      	movs	r3, #1
 800eb66:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800eb68:	4b0f      	ldr	r3, [pc, #60]	; (800eba8 <xTaskResumeAll+0x138>)
 800eb6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb6e:	601a      	str	r2, [r3, #0]
 800eb70:	f3bf 8f4f 	dsb	sy
 800eb74:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800eb78:	f001 f8e4 	bl	800fd44 <vPortExitCritical>

	return xAlreadyYielded;
 800eb7c:	68bb      	ldr	r3, [r7, #8]
}
 800eb7e:	4618      	mov	r0, r3
 800eb80:	3710      	adds	r7, #16
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}
 800eb86:	bf00      	nop
 800eb88:	20004350 	.word	0x20004350
 800eb8c:	20004328 	.word	0x20004328
 800eb90:	200042e8 	.word	0x200042e8
 800eb94:	20004330 	.word	0x20004330
 800eb98:	20003e58 	.word	0x20003e58
 800eb9c:	20003e54 	.word	0x20003e54
 800eba0:	2000433c 	.word	0x2000433c
 800eba4:	20004338 	.word	0x20004338
 800eba8:	e000ed04 	.word	0xe000ed04

0800ebac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ebac:	b480      	push	{r7}
 800ebae:	b083      	sub	sp, #12
 800ebb0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ebb2:	4b05      	ldr	r3, [pc, #20]	; (800ebc8 <xTaskGetTickCount+0x1c>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ebb8:	687b      	ldr	r3, [r7, #4]
}
 800ebba:	4618      	mov	r0, r3
 800ebbc:	370c      	adds	r7, #12
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc4:	4770      	bx	lr
 800ebc6:	bf00      	nop
 800ebc8:	2000432c 	.word	0x2000432c

0800ebcc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b086      	sub	sp, #24
 800ebd0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ebd6:	4b4f      	ldr	r3, [pc, #316]	; (800ed14 <xTaskIncrementTick+0x148>)
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	f040 808f 	bne.w	800ecfe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ebe0:	4b4d      	ldr	r3, [pc, #308]	; (800ed18 <xTaskIncrementTick+0x14c>)
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	3301      	adds	r3, #1
 800ebe6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ebe8:	4a4b      	ldr	r2, [pc, #300]	; (800ed18 <xTaskIncrementTick+0x14c>)
 800ebea:	693b      	ldr	r3, [r7, #16]
 800ebec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ebee:	693b      	ldr	r3, [r7, #16]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d120      	bne.n	800ec36 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ebf4:	4b49      	ldr	r3, [pc, #292]	; (800ed1c <xTaskIncrementTick+0x150>)
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d00a      	beq.n	800ec14 <xTaskIncrementTick+0x48>
	__asm volatile
 800ebfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec02:	f383 8811 	msr	BASEPRI, r3
 800ec06:	f3bf 8f6f 	isb	sy
 800ec0a:	f3bf 8f4f 	dsb	sy
 800ec0e:	603b      	str	r3, [r7, #0]
}
 800ec10:	bf00      	nop
 800ec12:	e7fe      	b.n	800ec12 <xTaskIncrementTick+0x46>
 800ec14:	4b41      	ldr	r3, [pc, #260]	; (800ed1c <xTaskIncrementTick+0x150>)
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	60fb      	str	r3, [r7, #12]
 800ec1a:	4b41      	ldr	r3, [pc, #260]	; (800ed20 <xTaskIncrementTick+0x154>)
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	4a3f      	ldr	r2, [pc, #252]	; (800ed1c <xTaskIncrementTick+0x150>)
 800ec20:	6013      	str	r3, [r2, #0]
 800ec22:	4a3f      	ldr	r2, [pc, #252]	; (800ed20 <xTaskIncrementTick+0x154>)
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	6013      	str	r3, [r2, #0]
 800ec28:	4b3e      	ldr	r3, [pc, #248]	; (800ed24 <xTaskIncrementTick+0x158>)
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	3301      	adds	r3, #1
 800ec2e:	4a3d      	ldr	r2, [pc, #244]	; (800ed24 <xTaskIncrementTick+0x158>)
 800ec30:	6013      	str	r3, [r2, #0]
 800ec32:	f000 fadb 	bl	800f1ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ec36:	4b3c      	ldr	r3, [pc, #240]	; (800ed28 <xTaskIncrementTick+0x15c>)
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	693a      	ldr	r2, [r7, #16]
 800ec3c:	429a      	cmp	r2, r3
 800ec3e:	d349      	bcc.n	800ecd4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ec40:	4b36      	ldr	r3, [pc, #216]	; (800ed1c <xTaskIncrementTick+0x150>)
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d104      	bne.n	800ec54 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec4a:	4b37      	ldr	r3, [pc, #220]	; (800ed28 <xTaskIncrementTick+0x15c>)
 800ec4c:	f04f 32ff 	mov.w	r2, #4294967295
 800ec50:	601a      	str	r2, [r3, #0]
					break;
 800ec52:	e03f      	b.n	800ecd4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec54:	4b31      	ldr	r3, [pc, #196]	; (800ed1c <xTaskIncrementTick+0x150>)
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	68db      	ldr	r3, [r3, #12]
 800ec5a:	68db      	ldr	r3, [r3, #12]
 800ec5c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ec5e:	68bb      	ldr	r3, [r7, #8]
 800ec60:	685b      	ldr	r3, [r3, #4]
 800ec62:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ec64:	693a      	ldr	r2, [r7, #16]
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	429a      	cmp	r2, r3
 800ec6a:	d203      	bcs.n	800ec74 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ec6c:	4a2e      	ldr	r2, [pc, #184]	; (800ed28 <xTaskIncrementTick+0x15c>)
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ec72:	e02f      	b.n	800ecd4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ec74:	68bb      	ldr	r3, [r7, #8]
 800ec76:	3304      	adds	r3, #4
 800ec78:	4618      	mov	r0, r3
 800ec7a:	f7fe ff79 	bl	800db70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ec7e:	68bb      	ldr	r3, [r7, #8]
 800ec80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d004      	beq.n	800ec90 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ec86:	68bb      	ldr	r3, [r7, #8]
 800ec88:	3318      	adds	r3, #24
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f7fe ff70 	bl	800db70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ec90:	68bb      	ldr	r3, [r7, #8]
 800ec92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec94:	4b25      	ldr	r3, [pc, #148]	; (800ed2c <xTaskIncrementTick+0x160>)
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	429a      	cmp	r2, r3
 800ec9a:	d903      	bls.n	800eca4 <xTaskIncrementTick+0xd8>
 800ec9c:	68bb      	ldr	r3, [r7, #8]
 800ec9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eca0:	4a22      	ldr	r2, [pc, #136]	; (800ed2c <xTaskIncrementTick+0x160>)
 800eca2:	6013      	str	r3, [r2, #0]
 800eca4:	68bb      	ldr	r3, [r7, #8]
 800eca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eca8:	4613      	mov	r3, r2
 800ecaa:	009b      	lsls	r3, r3, #2
 800ecac:	4413      	add	r3, r2
 800ecae:	009b      	lsls	r3, r3, #2
 800ecb0:	4a1f      	ldr	r2, [pc, #124]	; (800ed30 <xTaskIncrementTick+0x164>)
 800ecb2:	441a      	add	r2, r3
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	3304      	adds	r3, #4
 800ecb8:	4619      	mov	r1, r3
 800ecba:	4610      	mov	r0, r2
 800ecbc:	f7fe fefb 	bl	800dab6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ecc0:	68bb      	ldr	r3, [r7, #8]
 800ecc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecc4:	4b1b      	ldr	r3, [pc, #108]	; (800ed34 <xTaskIncrementTick+0x168>)
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecca:	429a      	cmp	r2, r3
 800eccc:	d3b8      	bcc.n	800ec40 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ecce:	2301      	movs	r3, #1
 800ecd0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ecd2:	e7b5      	b.n	800ec40 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ecd4:	4b17      	ldr	r3, [pc, #92]	; (800ed34 <xTaskIncrementTick+0x168>)
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecda:	4915      	ldr	r1, [pc, #84]	; (800ed30 <xTaskIncrementTick+0x164>)
 800ecdc:	4613      	mov	r3, r2
 800ecde:	009b      	lsls	r3, r3, #2
 800ece0:	4413      	add	r3, r2
 800ece2:	009b      	lsls	r3, r3, #2
 800ece4:	440b      	add	r3, r1
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	2b01      	cmp	r3, #1
 800ecea:	d901      	bls.n	800ecf0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ecec:	2301      	movs	r3, #1
 800ecee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ecf0:	4b11      	ldr	r3, [pc, #68]	; (800ed38 <xTaskIncrementTick+0x16c>)
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d007      	beq.n	800ed08 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ecf8:	2301      	movs	r3, #1
 800ecfa:	617b      	str	r3, [r7, #20]
 800ecfc:	e004      	b.n	800ed08 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ecfe:	4b0f      	ldr	r3, [pc, #60]	; (800ed3c <xTaskIncrementTick+0x170>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	3301      	adds	r3, #1
 800ed04:	4a0d      	ldr	r2, [pc, #52]	; (800ed3c <xTaskIncrementTick+0x170>)
 800ed06:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ed08:	697b      	ldr	r3, [r7, #20]
}
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	3718      	adds	r7, #24
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}
 800ed12:	bf00      	nop
 800ed14:	20004350 	.word	0x20004350
 800ed18:	2000432c 	.word	0x2000432c
 800ed1c:	200042e0 	.word	0x200042e0
 800ed20:	200042e4 	.word	0x200042e4
 800ed24:	20004340 	.word	0x20004340
 800ed28:	20004348 	.word	0x20004348
 800ed2c:	20004330 	.word	0x20004330
 800ed30:	20003e58 	.word	0x20003e58
 800ed34:	20003e54 	.word	0x20003e54
 800ed38:	2000433c 	.word	0x2000433c
 800ed3c:	20004338 	.word	0x20004338

0800ed40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ed40:	b480      	push	{r7}
 800ed42:	b085      	sub	sp, #20
 800ed44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ed46:	4b2a      	ldr	r3, [pc, #168]	; (800edf0 <vTaskSwitchContext+0xb0>)
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d003      	beq.n	800ed56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ed4e:	4b29      	ldr	r3, [pc, #164]	; (800edf4 <vTaskSwitchContext+0xb4>)
 800ed50:	2201      	movs	r2, #1
 800ed52:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ed54:	e046      	b.n	800ede4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800ed56:	4b27      	ldr	r3, [pc, #156]	; (800edf4 <vTaskSwitchContext+0xb4>)
 800ed58:	2200      	movs	r2, #0
 800ed5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed5c:	4b26      	ldr	r3, [pc, #152]	; (800edf8 <vTaskSwitchContext+0xb8>)
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	60fb      	str	r3, [r7, #12]
 800ed62:	e010      	b.n	800ed86 <vTaskSwitchContext+0x46>
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d10a      	bne.n	800ed80 <vTaskSwitchContext+0x40>
	__asm volatile
 800ed6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed6e:	f383 8811 	msr	BASEPRI, r3
 800ed72:	f3bf 8f6f 	isb	sy
 800ed76:	f3bf 8f4f 	dsb	sy
 800ed7a:	607b      	str	r3, [r7, #4]
}
 800ed7c:	bf00      	nop
 800ed7e:	e7fe      	b.n	800ed7e <vTaskSwitchContext+0x3e>
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	3b01      	subs	r3, #1
 800ed84:	60fb      	str	r3, [r7, #12]
 800ed86:	491d      	ldr	r1, [pc, #116]	; (800edfc <vTaskSwitchContext+0xbc>)
 800ed88:	68fa      	ldr	r2, [r7, #12]
 800ed8a:	4613      	mov	r3, r2
 800ed8c:	009b      	lsls	r3, r3, #2
 800ed8e:	4413      	add	r3, r2
 800ed90:	009b      	lsls	r3, r3, #2
 800ed92:	440b      	add	r3, r1
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d0e4      	beq.n	800ed64 <vTaskSwitchContext+0x24>
 800ed9a:	68fa      	ldr	r2, [r7, #12]
 800ed9c:	4613      	mov	r3, r2
 800ed9e:	009b      	lsls	r3, r3, #2
 800eda0:	4413      	add	r3, r2
 800eda2:	009b      	lsls	r3, r3, #2
 800eda4:	4a15      	ldr	r2, [pc, #84]	; (800edfc <vTaskSwitchContext+0xbc>)
 800eda6:	4413      	add	r3, r2
 800eda8:	60bb      	str	r3, [r7, #8]
 800edaa:	68bb      	ldr	r3, [r7, #8]
 800edac:	685b      	ldr	r3, [r3, #4]
 800edae:	685a      	ldr	r2, [r3, #4]
 800edb0:	68bb      	ldr	r3, [r7, #8]
 800edb2:	605a      	str	r2, [r3, #4]
 800edb4:	68bb      	ldr	r3, [r7, #8]
 800edb6:	685a      	ldr	r2, [r3, #4]
 800edb8:	68bb      	ldr	r3, [r7, #8]
 800edba:	3308      	adds	r3, #8
 800edbc:	429a      	cmp	r2, r3
 800edbe:	d104      	bne.n	800edca <vTaskSwitchContext+0x8a>
 800edc0:	68bb      	ldr	r3, [r7, #8]
 800edc2:	685b      	ldr	r3, [r3, #4]
 800edc4:	685a      	ldr	r2, [r3, #4]
 800edc6:	68bb      	ldr	r3, [r7, #8]
 800edc8:	605a      	str	r2, [r3, #4]
 800edca:	68bb      	ldr	r3, [r7, #8]
 800edcc:	685b      	ldr	r3, [r3, #4]
 800edce:	68db      	ldr	r3, [r3, #12]
 800edd0:	4a0b      	ldr	r2, [pc, #44]	; (800ee00 <vTaskSwitchContext+0xc0>)
 800edd2:	6013      	str	r3, [r2, #0]
 800edd4:	4a08      	ldr	r2, [pc, #32]	; (800edf8 <vTaskSwitchContext+0xb8>)
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800edda:	4b09      	ldr	r3, [pc, #36]	; (800ee00 <vTaskSwitchContext+0xc0>)
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	3354      	adds	r3, #84	; 0x54
 800ede0:	4a08      	ldr	r2, [pc, #32]	; (800ee04 <vTaskSwitchContext+0xc4>)
 800ede2:	6013      	str	r3, [r2, #0]
}
 800ede4:	bf00      	nop
 800ede6:	3714      	adds	r7, #20
 800ede8:	46bd      	mov	sp, r7
 800edea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edee:	4770      	bx	lr
 800edf0:	20004350 	.word	0x20004350
 800edf4:	2000433c 	.word	0x2000433c
 800edf8:	20004330 	.word	0x20004330
 800edfc:	20003e58 	.word	0x20003e58
 800ee00:	20003e54 	.word	0x20003e54
 800ee04:	20000088 	.word	0x20000088

0800ee08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b084      	sub	sp, #16
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
 800ee10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d10a      	bne.n	800ee2e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ee18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee1c:	f383 8811 	msr	BASEPRI, r3
 800ee20:	f3bf 8f6f 	isb	sy
 800ee24:	f3bf 8f4f 	dsb	sy
 800ee28:	60fb      	str	r3, [r7, #12]
}
 800ee2a:	bf00      	nop
 800ee2c:	e7fe      	b.n	800ee2c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ee2e:	4b07      	ldr	r3, [pc, #28]	; (800ee4c <vTaskPlaceOnEventList+0x44>)
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	3318      	adds	r3, #24
 800ee34:	4619      	mov	r1, r3
 800ee36:	6878      	ldr	r0, [r7, #4]
 800ee38:	f7fe fe61 	bl	800dafe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ee3c:	2101      	movs	r1, #1
 800ee3e:	6838      	ldr	r0, [r7, #0]
 800ee40:	f000 fa80 	bl	800f344 <prvAddCurrentTaskToDelayedList>
}
 800ee44:	bf00      	nop
 800ee46:	3710      	adds	r7, #16
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	bd80      	pop	{r7, pc}
 800ee4c:	20003e54 	.word	0x20003e54

0800ee50 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b086      	sub	sp, #24
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	60f8      	str	r0, [r7, #12]
 800ee58:	60b9      	str	r1, [r7, #8]
 800ee5a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d10a      	bne.n	800ee78 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ee62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee66:	f383 8811 	msr	BASEPRI, r3
 800ee6a:	f3bf 8f6f 	isb	sy
 800ee6e:	f3bf 8f4f 	dsb	sy
 800ee72:	617b      	str	r3, [r7, #20]
}
 800ee74:	bf00      	nop
 800ee76:	e7fe      	b.n	800ee76 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ee78:	4b0a      	ldr	r3, [pc, #40]	; (800eea4 <vTaskPlaceOnEventListRestricted+0x54>)
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	3318      	adds	r3, #24
 800ee7e:	4619      	mov	r1, r3
 800ee80:	68f8      	ldr	r0, [r7, #12]
 800ee82:	f7fe fe18 	bl	800dab6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d002      	beq.n	800ee92 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ee8c:	f04f 33ff 	mov.w	r3, #4294967295
 800ee90:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ee92:	6879      	ldr	r1, [r7, #4]
 800ee94:	68b8      	ldr	r0, [r7, #8]
 800ee96:	f000 fa55 	bl	800f344 <prvAddCurrentTaskToDelayedList>
	}
 800ee9a:	bf00      	nop
 800ee9c:	3718      	adds	r7, #24
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	bd80      	pop	{r7, pc}
 800eea2:	bf00      	nop
 800eea4:	20003e54 	.word	0x20003e54

0800eea8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b086      	sub	sp, #24
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	68db      	ldr	r3, [r3, #12]
 800eeb4:	68db      	ldr	r3, [r3, #12]
 800eeb6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800eeb8:	693b      	ldr	r3, [r7, #16]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d10a      	bne.n	800eed4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800eebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eec2:	f383 8811 	msr	BASEPRI, r3
 800eec6:	f3bf 8f6f 	isb	sy
 800eeca:	f3bf 8f4f 	dsb	sy
 800eece:	60fb      	str	r3, [r7, #12]
}
 800eed0:	bf00      	nop
 800eed2:	e7fe      	b.n	800eed2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800eed4:	693b      	ldr	r3, [r7, #16]
 800eed6:	3318      	adds	r3, #24
 800eed8:	4618      	mov	r0, r3
 800eeda:	f7fe fe49 	bl	800db70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eede:	4b1e      	ldr	r3, [pc, #120]	; (800ef58 <xTaskRemoveFromEventList+0xb0>)
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d11d      	bne.n	800ef22 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800eee6:	693b      	ldr	r3, [r7, #16]
 800eee8:	3304      	adds	r3, #4
 800eeea:	4618      	mov	r0, r3
 800eeec:	f7fe fe40 	bl	800db70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800eef0:	693b      	ldr	r3, [r7, #16]
 800eef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eef4:	4b19      	ldr	r3, [pc, #100]	; (800ef5c <xTaskRemoveFromEventList+0xb4>)
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	429a      	cmp	r2, r3
 800eefa:	d903      	bls.n	800ef04 <xTaskRemoveFromEventList+0x5c>
 800eefc:	693b      	ldr	r3, [r7, #16]
 800eefe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef00:	4a16      	ldr	r2, [pc, #88]	; (800ef5c <xTaskRemoveFromEventList+0xb4>)
 800ef02:	6013      	str	r3, [r2, #0]
 800ef04:	693b      	ldr	r3, [r7, #16]
 800ef06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef08:	4613      	mov	r3, r2
 800ef0a:	009b      	lsls	r3, r3, #2
 800ef0c:	4413      	add	r3, r2
 800ef0e:	009b      	lsls	r3, r3, #2
 800ef10:	4a13      	ldr	r2, [pc, #76]	; (800ef60 <xTaskRemoveFromEventList+0xb8>)
 800ef12:	441a      	add	r2, r3
 800ef14:	693b      	ldr	r3, [r7, #16]
 800ef16:	3304      	adds	r3, #4
 800ef18:	4619      	mov	r1, r3
 800ef1a:	4610      	mov	r0, r2
 800ef1c:	f7fe fdcb 	bl	800dab6 <vListInsertEnd>
 800ef20:	e005      	b.n	800ef2e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ef22:	693b      	ldr	r3, [r7, #16]
 800ef24:	3318      	adds	r3, #24
 800ef26:	4619      	mov	r1, r3
 800ef28:	480e      	ldr	r0, [pc, #56]	; (800ef64 <xTaskRemoveFromEventList+0xbc>)
 800ef2a:	f7fe fdc4 	bl	800dab6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ef2e:	693b      	ldr	r3, [r7, #16]
 800ef30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef32:	4b0d      	ldr	r3, [pc, #52]	; (800ef68 <xTaskRemoveFromEventList+0xc0>)
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef38:	429a      	cmp	r2, r3
 800ef3a:	d905      	bls.n	800ef48 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ef3c:	2301      	movs	r3, #1
 800ef3e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ef40:	4b0a      	ldr	r3, [pc, #40]	; (800ef6c <xTaskRemoveFromEventList+0xc4>)
 800ef42:	2201      	movs	r2, #1
 800ef44:	601a      	str	r2, [r3, #0]
 800ef46:	e001      	b.n	800ef4c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ef48:	2300      	movs	r3, #0
 800ef4a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ef4c:	697b      	ldr	r3, [r7, #20]
}
 800ef4e:	4618      	mov	r0, r3
 800ef50:	3718      	adds	r7, #24
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd80      	pop	{r7, pc}
 800ef56:	bf00      	nop
 800ef58:	20004350 	.word	0x20004350
 800ef5c:	20004330 	.word	0x20004330
 800ef60:	20003e58 	.word	0x20003e58
 800ef64:	200042e8 	.word	0x200042e8
 800ef68:	20003e54 	.word	0x20003e54
 800ef6c:	2000433c 	.word	0x2000433c

0800ef70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ef70:	b480      	push	{r7}
 800ef72:	b083      	sub	sp, #12
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ef78:	4b06      	ldr	r3, [pc, #24]	; (800ef94 <vTaskInternalSetTimeOutState+0x24>)
 800ef7a:	681a      	ldr	r2, [r3, #0]
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ef80:	4b05      	ldr	r3, [pc, #20]	; (800ef98 <vTaskInternalSetTimeOutState+0x28>)
 800ef82:	681a      	ldr	r2, [r3, #0]
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	605a      	str	r2, [r3, #4]
}
 800ef88:	bf00      	nop
 800ef8a:	370c      	adds	r7, #12
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef92:	4770      	bx	lr
 800ef94:	20004340 	.word	0x20004340
 800ef98:	2000432c 	.word	0x2000432c

0800ef9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b088      	sub	sp, #32
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
 800efa4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d10a      	bne.n	800efc2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800efac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efb0:	f383 8811 	msr	BASEPRI, r3
 800efb4:	f3bf 8f6f 	isb	sy
 800efb8:	f3bf 8f4f 	dsb	sy
 800efbc:	613b      	str	r3, [r7, #16]
}
 800efbe:	bf00      	nop
 800efc0:	e7fe      	b.n	800efc0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800efc2:	683b      	ldr	r3, [r7, #0]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d10a      	bne.n	800efde <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800efc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efcc:	f383 8811 	msr	BASEPRI, r3
 800efd0:	f3bf 8f6f 	isb	sy
 800efd4:	f3bf 8f4f 	dsb	sy
 800efd8:	60fb      	str	r3, [r7, #12]
}
 800efda:	bf00      	nop
 800efdc:	e7fe      	b.n	800efdc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800efde:	f000 fe81 	bl	800fce4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800efe2:	4b1d      	ldr	r3, [pc, #116]	; (800f058 <xTaskCheckForTimeOut+0xbc>)
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	685b      	ldr	r3, [r3, #4]
 800efec:	69ba      	ldr	r2, [r7, #24]
 800efee:	1ad3      	subs	r3, r2, r3
 800eff0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800eff2:	683b      	ldr	r3, [r7, #0]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800effa:	d102      	bne.n	800f002 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800effc:	2300      	movs	r3, #0
 800effe:	61fb      	str	r3, [r7, #28]
 800f000:	e023      	b.n	800f04a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681a      	ldr	r2, [r3, #0]
 800f006:	4b15      	ldr	r3, [pc, #84]	; (800f05c <xTaskCheckForTimeOut+0xc0>)
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	429a      	cmp	r2, r3
 800f00c:	d007      	beq.n	800f01e <xTaskCheckForTimeOut+0x82>
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	685b      	ldr	r3, [r3, #4]
 800f012:	69ba      	ldr	r2, [r7, #24]
 800f014:	429a      	cmp	r2, r3
 800f016:	d302      	bcc.n	800f01e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f018:	2301      	movs	r3, #1
 800f01a:	61fb      	str	r3, [r7, #28]
 800f01c:	e015      	b.n	800f04a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f01e:	683b      	ldr	r3, [r7, #0]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	697a      	ldr	r2, [r7, #20]
 800f024:	429a      	cmp	r2, r3
 800f026:	d20b      	bcs.n	800f040 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	681a      	ldr	r2, [r3, #0]
 800f02c:	697b      	ldr	r3, [r7, #20]
 800f02e:	1ad2      	subs	r2, r2, r3
 800f030:	683b      	ldr	r3, [r7, #0]
 800f032:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f034:	6878      	ldr	r0, [r7, #4]
 800f036:	f7ff ff9b 	bl	800ef70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f03a:	2300      	movs	r3, #0
 800f03c:	61fb      	str	r3, [r7, #28]
 800f03e:	e004      	b.n	800f04a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f040:	683b      	ldr	r3, [r7, #0]
 800f042:	2200      	movs	r2, #0
 800f044:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f046:	2301      	movs	r3, #1
 800f048:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f04a:	f000 fe7b 	bl	800fd44 <vPortExitCritical>

	return xReturn;
 800f04e:	69fb      	ldr	r3, [r7, #28]
}
 800f050:	4618      	mov	r0, r3
 800f052:	3720      	adds	r7, #32
 800f054:	46bd      	mov	sp, r7
 800f056:	bd80      	pop	{r7, pc}
 800f058:	2000432c 	.word	0x2000432c
 800f05c:	20004340 	.word	0x20004340

0800f060 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f060:	b480      	push	{r7}
 800f062:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f064:	4b03      	ldr	r3, [pc, #12]	; (800f074 <vTaskMissedYield+0x14>)
 800f066:	2201      	movs	r2, #1
 800f068:	601a      	str	r2, [r3, #0]
}
 800f06a:	bf00      	nop
 800f06c:	46bd      	mov	sp, r7
 800f06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f072:	4770      	bx	lr
 800f074:	2000433c 	.word	0x2000433c

0800f078 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f078:	b580      	push	{r7, lr}
 800f07a:	b082      	sub	sp, #8
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f080:	f000 f852 	bl	800f128 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f084:	4b06      	ldr	r3, [pc, #24]	; (800f0a0 <prvIdleTask+0x28>)
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	2b01      	cmp	r3, #1
 800f08a:	d9f9      	bls.n	800f080 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f08c:	4b05      	ldr	r3, [pc, #20]	; (800f0a4 <prvIdleTask+0x2c>)
 800f08e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f092:	601a      	str	r2, [r3, #0]
 800f094:	f3bf 8f4f 	dsb	sy
 800f098:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f09c:	e7f0      	b.n	800f080 <prvIdleTask+0x8>
 800f09e:	bf00      	nop
 800f0a0:	20003e58 	.word	0x20003e58
 800f0a4:	e000ed04 	.word	0xe000ed04

0800f0a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b082      	sub	sp, #8
 800f0ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	607b      	str	r3, [r7, #4]
 800f0b2:	e00c      	b.n	800f0ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f0b4:	687a      	ldr	r2, [r7, #4]
 800f0b6:	4613      	mov	r3, r2
 800f0b8:	009b      	lsls	r3, r3, #2
 800f0ba:	4413      	add	r3, r2
 800f0bc:	009b      	lsls	r3, r3, #2
 800f0be:	4a12      	ldr	r2, [pc, #72]	; (800f108 <prvInitialiseTaskLists+0x60>)
 800f0c0:	4413      	add	r3, r2
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f7fe fcca 	bl	800da5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	3301      	adds	r3, #1
 800f0cc:	607b      	str	r3, [r7, #4]
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	2b37      	cmp	r3, #55	; 0x37
 800f0d2:	d9ef      	bls.n	800f0b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f0d4:	480d      	ldr	r0, [pc, #52]	; (800f10c <prvInitialiseTaskLists+0x64>)
 800f0d6:	f7fe fcc1 	bl	800da5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f0da:	480d      	ldr	r0, [pc, #52]	; (800f110 <prvInitialiseTaskLists+0x68>)
 800f0dc:	f7fe fcbe 	bl	800da5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f0e0:	480c      	ldr	r0, [pc, #48]	; (800f114 <prvInitialiseTaskLists+0x6c>)
 800f0e2:	f7fe fcbb 	bl	800da5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f0e6:	480c      	ldr	r0, [pc, #48]	; (800f118 <prvInitialiseTaskLists+0x70>)
 800f0e8:	f7fe fcb8 	bl	800da5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f0ec:	480b      	ldr	r0, [pc, #44]	; (800f11c <prvInitialiseTaskLists+0x74>)
 800f0ee:	f7fe fcb5 	bl	800da5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f0f2:	4b0b      	ldr	r3, [pc, #44]	; (800f120 <prvInitialiseTaskLists+0x78>)
 800f0f4:	4a05      	ldr	r2, [pc, #20]	; (800f10c <prvInitialiseTaskLists+0x64>)
 800f0f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f0f8:	4b0a      	ldr	r3, [pc, #40]	; (800f124 <prvInitialiseTaskLists+0x7c>)
 800f0fa:	4a05      	ldr	r2, [pc, #20]	; (800f110 <prvInitialiseTaskLists+0x68>)
 800f0fc:	601a      	str	r2, [r3, #0]
}
 800f0fe:	bf00      	nop
 800f100:	3708      	adds	r7, #8
 800f102:	46bd      	mov	sp, r7
 800f104:	bd80      	pop	{r7, pc}
 800f106:	bf00      	nop
 800f108:	20003e58 	.word	0x20003e58
 800f10c:	200042b8 	.word	0x200042b8
 800f110:	200042cc 	.word	0x200042cc
 800f114:	200042e8 	.word	0x200042e8
 800f118:	200042fc 	.word	0x200042fc
 800f11c:	20004314 	.word	0x20004314
 800f120:	200042e0 	.word	0x200042e0
 800f124:	200042e4 	.word	0x200042e4

0800f128 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b082      	sub	sp, #8
 800f12c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f12e:	e019      	b.n	800f164 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f130:	f000 fdd8 	bl	800fce4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f134:	4b10      	ldr	r3, [pc, #64]	; (800f178 <prvCheckTasksWaitingTermination+0x50>)
 800f136:	68db      	ldr	r3, [r3, #12]
 800f138:	68db      	ldr	r3, [r3, #12]
 800f13a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	3304      	adds	r3, #4
 800f140:	4618      	mov	r0, r3
 800f142:	f7fe fd15 	bl	800db70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f146:	4b0d      	ldr	r3, [pc, #52]	; (800f17c <prvCheckTasksWaitingTermination+0x54>)
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	3b01      	subs	r3, #1
 800f14c:	4a0b      	ldr	r2, [pc, #44]	; (800f17c <prvCheckTasksWaitingTermination+0x54>)
 800f14e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f150:	4b0b      	ldr	r3, [pc, #44]	; (800f180 <prvCheckTasksWaitingTermination+0x58>)
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	3b01      	subs	r3, #1
 800f156:	4a0a      	ldr	r2, [pc, #40]	; (800f180 <prvCheckTasksWaitingTermination+0x58>)
 800f158:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f15a:	f000 fdf3 	bl	800fd44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f15e:	6878      	ldr	r0, [r7, #4]
 800f160:	f000 f810 	bl	800f184 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f164:	4b06      	ldr	r3, [pc, #24]	; (800f180 <prvCheckTasksWaitingTermination+0x58>)
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d1e1      	bne.n	800f130 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f16c:	bf00      	nop
 800f16e:	bf00      	nop
 800f170:	3708      	adds	r7, #8
 800f172:	46bd      	mov	sp, r7
 800f174:	bd80      	pop	{r7, pc}
 800f176:	bf00      	nop
 800f178:	200042fc 	.word	0x200042fc
 800f17c:	20004328 	.word	0x20004328
 800f180:	20004310 	.word	0x20004310

0800f184 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f184:	b580      	push	{r7, lr}
 800f186:	b084      	sub	sp, #16
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	3354      	adds	r3, #84	; 0x54
 800f190:	4618      	mov	r0, r3
 800f192:	f003 ff0b 	bl	8012fac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d108      	bne.n	800f1b2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	f000 ff8b 	bl	80100c0 <vPortFree>
				vPortFree( pxTCB );
 800f1aa:	6878      	ldr	r0, [r7, #4]
 800f1ac:	f000 ff88 	bl	80100c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f1b0:	e018      	b.n	800f1e4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800f1b8:	2b01      	cmp	r3, #1
 800f1ba:	d103      	bne.n	800f1c4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f1bc:	6878      	ldr	r0, [r7, #4]
 800f1be:	f000 ff7f 	bl	80100c0 <vPortFree>
	}
 800f1c2:	e00f      	b.n	800f1e4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800f1ca:	2b02      	cmp	r3, #2
 800f1cc:	d00a      	beq.n	800f1e4 <prvDeleteTCB+0x60>
	__asm volatile
 800f1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1d2:	f383 8811 	msr	BASEPRI, r3
 800f1d6:	f3bf 8f6f 	isb	sy
 800f1da:	f3bf 8f4f 	dsb	sy
 800f1de:	60fb      	str	r3, [r7, #12]
}
 800f1e0:	bf00      	nop
 800f1e2:	e7fe      	b.n	800f1e2 <prvDeleteTCB+0x5e>
	}
 800f1e4:	bf00      	nop
 800f1e6:	3710      	adds	r7, #16
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	bd80      	pop	{r7, pc}

0800f1ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f1ec:	b480      	push	{r7}
 800f1ee:	b083      	sub	sp, #12
 800f1f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f1f2:	4b0c      	ldr	r3, [pc, #48]	; (800f224 <prvResetNextTaskUnblockTime+0x38>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d104      	bne.n	800f206 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f1fc:	4b0a      	ldr	r3, [pc, #40]	; (800f228 <prvResetNextTaskUnblockTime+0x3c>)
 800f1fe:	f04f 32ff 	mov.w	r2, #4294967295
 800f202:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f204:	e008      	b.n	800f218 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f206:	4b07      	ldr	r3, [pc, #28]	; (800f224 <prvResetNextTaskUnblockTime+0x38>)
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	68db      	ldr	r3, [r3, #12]
 800f20c:	68db      	ldr	r3, [r3, #12]
 800f20e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	685b      	ldr	r3, [r3, #4]
 800f214:	4a04      	ldr	r2, [pc, #16]	; (800f228 <prvResetNextTaskUnblockTime+0x3c>)
 800f216:	6013      	str	r3, [r2, #0]
}
 800f218:	bf00      	nop
 800f21a:	370c      	adds	r7, #12
 800f21c:	46bd      	mov	sp, r7
 800f21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f222:	4770      	bx	lr
 800f224:	200042e0 	.word	0x200042e0
 800f228:	20004348 	.word	0x20004348

0800f22c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f22c:	b480      	push	{r7}
 800f22e:	b083      	sub	sp, #12
 800f230:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f232:	4b0b      	ldr	r3, [pc, #44]	; (800f260 <xTaskGetSchedulerState+0x34>)
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d102      	bne.n	800f240 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f23a:	2301      	movs	r3, #1
 800f23c:	607b      	str	r3, [r7, #4]
 800f23e:	e008      	b.n	800f252 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f240:	4b08      	ldr	r3, [pc, #32]	; (800f264 <xTaskGetSchedulerState+0x38>)
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d102      	bne.n	800f24e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f248:	2302      	movs	r3, #2
 800f24a:	607b      	str	r3, [r7, #4]
 800f24c:	e001      	b.n	800f252 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f24e:	2300      	movs	r3, #0
 800f250:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f252:	687b      	ldr	r3, [r7, #4]
	}
 800f254:	4618      	mov	r0, r3
 800f256:	370c      	adds	r7, #12
 800f258:	46bd      	mov	sp, r7
 800f25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f25e:	4770      	bx	lr
 800f260:	20004334 	.word	0x20004334
 800f264:	20004350 	.word	0x20004350

0800f268 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b086      	sub	sp, #24
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f274:	2300      	movs	r3, #0
 800f276:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d056      	beq.n	800f32c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f27e:	4b2e      	ldr	r3, [pc, #184]	; (800f338 <xTaskPriorityDisinherit+0xd0>)
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	693a      	ldr	r2, [r7, #16]
 800f284:	429a      	cmp	r2, r3
 800f286:	d00a      	beq.n	800f29e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f28c:	f383 8811 	msr	BASEPRI, r3
 800f290:	f3bf 8f6f 	isb	sy
 800f294:	f3bf 8f4f 	dsb	sy
 800f298:	60fb      	str	r3, [r7, #12]
}
 800f29a:	bf00      	nop
 800f29c:	e7fe      	b.n	800f29c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f29e:	693b      	ldr	r3, [r7, #16]
 800f2a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d10a      	bne.n	800f2bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f2a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2aa:	f383 8811 	msr	BASEPRI, r3
 800f2ae:	f3bf 8f6f 	isb	sy
 800f2b2:	f3bf 8f4f 	dsb	sy
 800f2b6:	60bb      	str	r3, [r7, #8]
}
 800f2b8:	bf00      	nop
 800f2ba:	e7fe      	b.n	800f2ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f2bc:	693b      	ldr	r3, [r7, #16]
 800f2be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f2c0:	1e5a      	subs	r2, r3, #1
 800f2c2:	693b      	ldr	r3, [r7, #16]
 800f2c4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f2c6:	693b      	ldr	r3, [r7, #16]
 800f2c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2ca:	693b      	ldr	r3, [r7, #16]
 800f2cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f2ce:	429a      	cmp	r2, r3
 800f2d0:	d02c      	beq.n	800f32c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f2d2:	693b      	ldr	r3, [r7, #16]
 800f2d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d128      	bne.n	800f32c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f2da:	693b      	ldr	r3, [r7, #16]
 800f2dc:	3304      	adds	r3, #4
 800f2de:	4618      	mov	r0, r3
 800f2e0:	f7fe fc46 	bl	800db70 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f2e4:	693b      	ldr	r3, [r7, #16]
 800f2e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f2e8:	693b      	ldr	r3, [r7, #16]
 800f2ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f2ec:	693b      	ldr	r3, [r7, #16]
 800f2ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f2f4:	693b      	ldr	r3, [r7, #16]
 800f2f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f2f8:	693b      	ldr	r3, [r7, #16]
 800f2fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2fc:	4b0f      	ldr	r3, [pc, #60]	; (800f33c <xTaskPriorityDisinherit+0xd4>)
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	429a      	cmp	r2, r3
 800f302:	d903      	bls.n	800f30c <xTaskPriorityDisinherit+0xa4>
 800f304:	693b      	ldr	r3, [r7, #16]
 800f306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f308:	4a0c      	ldr	r2, [pc, #48]	; (800f33c <xTaskPriorityDisinherit+0xd4>)
 800f30a:	6013      	str	r3, [r2, #0]
 800f30c:	693b      	ldr	r3, [r7, #16]
 800f30e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f310:	4613      	mov	r3, r2
 800f312:	009b      	lsls	r3, r3, #2
 800f314:	4413      	add	r3, r2
 800f316:	009b      	lsls	r3, r3, #2
 800f318:	4a09      	ldr	r2, [pc, #36]	; (800f340 <xTaskPriorityDisinherit+0xd8>)
 800f31a:	441a      	add	r2, r3
 800f31c:	693b      	ldr	r3, [r7, #16]
 800f31e:	3304      	adds	r3, #4
 800f320:	4619      	mov	r1, r3
 800f322:	4610      	mov	r0, r2
 800f324:	f7fe fbc7 	bl	800dab6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f328:	2301      	movs	r3, #1
 800f32a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f32c:	697b      	ldr	r3, [r7, #20]
	}
 800f32e:	4618      	mov	r0, r3
 800f330:	3718      	adds	r7, #24
 800f332:	46bd      	mov	sp, r7
 800f334:	bd80      	pop	{r7, pc}
 800f336:	bf00      	nop
 800f338:	20003e54 	.word	0x20003e54
 800f33c:	20004330 	.word	0x20004330
 800f340:	20003e58 	.word	0x20003e58

0800f344 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b084      	sub	sp, #16
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
 800f34c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f34e:	4b21      	ldr	r3, [pc, #132]	; (800f3d4 <prvAddCurrentTaskToDelayedList+0x90>)
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f354:	4b20      	ldr	r3, [pc, #128]	; (800f3d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	3304      	adds	r3, #4
 800f35a:	4618      	mov	r0, r3
 800f35c:	f7fe fc08 	bl	800db70 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f366:	d10a      	bne.n	800f37e <prvAddCurrentTaskToDelayedList+0x3a>
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d007      	beq.n	800f37e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f36e:	4b1a      	ldr	r3, [pc, #104]	; (800f3d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	3304      	adds	r3, #4
 800f374:	4619      	mov	r1, r3
 800f376:	4819      	ldr	r0, [pc, #100]	; (800f3dc <prvAddCurrentTaskToDelayedList+0x98>)
 800f378:	f7fe fb9d 	bl	800dab6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f37c:	e026      	b.n	800f3cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f37e:	68fa      	ldr	r2, [r7, #12]
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	4413      	add	r3, r2
 800f384:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f386:	4b14      	ldr	r3, [pc, #80]	; (800f3d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	68ba      	ldr	r2, [r7, #8]
 800f38c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f38e:	68ba      	ldr	r2, [r7, #8]
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	429a      	cmp	r2, r3
 800f394:	d209      	bcs.n	800f3aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f396:	4b12      	ldr	r3, [pc, #72]	; (800f3e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f398:	681a      	ldr	r2, [r3, #0]
 800f39a:	4b0f      	ldr	r3, [pc, #60]	; (800f3d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	3304      	adds	r3, #4
 800f3a0:	4619      	mov	r1, r3
 800f3a2:	4610      	mov	r0, r2
 800f3a4:	f7fe fbab 	bl	800dafe <vListInsert>
}
 800f3a8:	e010      	b.n	800f3cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f3aa:	4b0e      	ldr	r3, [pc, #56]	; (800f3e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f3ac:	681a      	ldr	r2, [r3, #0]
 800f3ae:	4b0a      	ldr	r3, [pc, #40]	; (800f3d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	3304      	adds	r3, #4
 800f3b4:	4619      	mov	r1, r3
 800f3b6:	4610      	mov	r0, r2
 800f3b8:	f7fe fba1 	bl	800dafe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f3bc:	4b0a      	ldr	r3, [pc, #40]	; (800f3e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	68ba      	ldr	r2, [r7, #8]
 800f3c2:	429a      	cmp	r2, r3
 800f3c4:	d202      	bcs.n	800f3cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f3c6:	4a08      	ldr	r2, [pc, #32]	; (800f3e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f3c8:	68bb      	ldr	r3, [r7, #8]
 800f3ca:	6013      	str	r3, [r2, #0]
}
 800f3cc:	bf00      	nop
 800f3ce:	3710      	adds	r7, #16
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	bd80      	pop	{r7, pc}
 800f3d4:	2000432c 	.word	0x2000432c
 800f3d8:	20003e54 	.word	0x20003e54
 800f3dc:	20004314 	.word	0x20004314
 800f3e0:	200042e4 	.word	0x200042e4
 800f3e4:	200042e0 	.word	0x200042e0
 800f3e8:	20004348 	.word	0x20004348

0800f3ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b08a      	sub	sp, #40	; 0x28
 800f3f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f3f6:	f000 fb07 	bl	800fa08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f3fa:	4b1c      	ldr	r3, [pc, #112]	; (800f46c <xTimerCreateTimerTask+0x80>)
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d021      	beq.n	800f446 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f402:	2300      	movs	r3, #0
 800f404:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f406:	2300      	movs	r3, #0
 800f408:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f40a:	1d3a      	adds	r2, r7, #4
 800f40c:	f107 0108 	add.w	r1, r7, #8
 800f410:	f107 030c 	add.w	r3, r7, #12
 800f414:	4618      	mov	r0, r3
 800f416:	f7fe fb07 	bl	800da28 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f41a:	6879      	ldr	r1, [r7, #4]
 800f41c:	68bb      	ldr	r3, [r7, #8]
 800f41e:	68fa      	ldr	r2, [r7, #12]
 800f420:	9202      	str	r2, [sp, #8]
 800f422:	9301      	str	r3, [sp, #4]
 800f424:	2302      	movs	r3, #2
 800f426:	9300      	str	r3, [sp, #0]
 800f428:	2300      	movs	r3, #0
 800f42a:	460a      	mov	r2, r1
 800f42c:	4910      	ldr	r1, [pc, #64]	; (800f470 <xTimerCreateTimerTask+0x84>)
 800f42e:	4811      	ldr	r0, [pc, #68]	; (800f474 <xTimerCreateTimerTask+0x88>)
 800f430:	f7ff f8b4 	bl	800e59c <xTaskCreateStatic>
 800f434:	4603      	mov	r3, r0
 800f436:	4a10      	ldr	r2, [pc, #64]	; (800f478 <xTimerCreateTimerTask+0x8c>)
 800f438:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f43a:	4b0f      	ldr	r3, [pc, #60]	; (800f478 <xTimerCreateTimerTask+0x8c>)
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d001      	beq.n	800f446 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f442:	2301      	movs	r3, #1
 800f444:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f446:	697b      	ldr	r3, [r7, #20]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d10a      	bne.n	800f462 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f450:	f383 8811 	msr	BASEPRI, r3
 800f454:	f3bf 8f6f 	isb	sy
 800f458:	f3bf 8f4f 	dsb	sy
 800f45c:	613b      	str	r3, [r7, #16]
}
 800f45e:	bf00      	nop
 800f460:	e7fe      	b.n	800f460 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f462:	697b      	ldr	r3, [r7, #20]
}
 800f464:	4618      	mov	r0, r3
 800f466:	3718      	adds	r7, #24
 800f468:	46bd      	mov	sp, r7
 800f46a:	bd80      	pop	{r7, pc}
 800f46c:	20004384 	.word	0x20004384
 800f470:	08015678 	.word	0x08015678
 800f474:	0800f5b1 	.word	0x0800f5b1
 800f478:	20004388 	.word	0x20004388

0800f47c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b08a      	sub	sp, #40	; 0x28
 800f480:	af00      	add	r7, sp, #0
 800f482:	60f8      	str	r0, [r7, #12]
 800f484:	60b9      	str	r1, [r7, #8]
 800f486:	607a      	str	r2, [r7, #4]
 800f488:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f48a:	2300      	movs	r3, #0
 800f48c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d10a      	bne.n	800f4aa <xTimerGenericCommand+0x2e>
	__asm volatile
 800f494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f498:	f383 8811 	msr	BASEPRI, r3
 800f49c:	f3bf 8f6f 	isb	sy
 800f4a0:	f3bf 8f4f 	dsb	sy
 800f4a4:	623b      	str	r3, [r7, #32]
}
 800f4a6:	bf00      	nop
 800f4a8:	e7fe      	b.n	800f4a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f4aa:	4b1a      	ldr	r3, [pc, #104]	; (800f514 <xTimerGenericCommand+0x98>)
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d02a      	beq.n	800f508 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f4b2:	68bb      	ldr	r3, [r7, #8]
 800f4b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f4be:	68bb      	ldr	r3, [r7, #8]
 800f4c0:	2b05      	cmp	r3, #5
 800f4c2:	dc18      	bgt.n	800f4f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f4c4:	f7ff feb2 	bl	800f22c <xTaskGetSchedulerState>
 800f4c8:	4603      	mov	r3, r0
 800f4ca:	2b02      	cmp	r3, #2
 800f4cc:	d109      	bne.n	800f4e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f4ce:	4b11      	ldr	r3, [pc, #68]	; (800f514 <xTimerGenericCommand+0x98>)
 800f4d0:	6818      	ldr	r0, [r3, #0]
 800f4d2:	f107 0110 	add.w	r1, r7, #16
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4da:	f7fe fc77 	bl	800ddcc <xQueueGenericSend>
 800f4de:	6278      	str	r0, [r7, #36]	; 0x24
 800f4e0:	e012      	b.n	800f508 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f4e2:	4b0c      	ldr	r3, [pc, #48]	; (800f514 <xTimerGenericCommand+0x98>)
 800f4e4:	6818      	ldr	r0, [r3, #0]
 800f4e6:	f107 0110 	add.w	r1, r7, #16
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	f7fe fc6d 	bl	800ddcc <xQueueGenericSend>
 800f4f2:	6278      	str	r0, [r7, #36]	; 0x24
 800f4f4:	e008      	b.n	800f508 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f4f6:	4b07      	ldr	r3, [pc, #28]	; (800f514 <xTimerGenericCommand+0x98>)
 800f4f8:	6818      	ldr	r0, [r3, #0]
 800f4fa:	f107 0110 	add.w	r1, r7, #16
 800f4fe:	2300      	movs	r3, #0
 800f500:	683a      	ldr	r2, [r7, #0]
 800f502:	f7fe fd61 	bl	800dfc8 <xQueueGenericSendFromISR>
 800f506:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f50a:	4618      	mov	r0, r3
 800f50c:	3728      	adds	r7, #40	; 0x28
 800f50e:	46bd      	mov	sp, r7
 800f510:	bd80      	pop	{r7, pc}
 800f512:	bf00      	nop
 800f514:	20004384 	.word	0x20004384

0800f518 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b088      	sub	sp, #32
 800f51c:	af02      	add	r7, sp, #8
 800f51e:	6078      	str	r0, [r7, #4]
 800f520:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f522:	4b22      	ldr	r3, [pc, #136]	; (800f5ac <prvProcessExpiredTimer+0x94>)
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	68db      	ldr	r3, [r3, #12]
 800f528:	68db      	ldr	r3, [r3, #12]
 800f52a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f52c:	697b      	ldr	r3, [r7, #20]
 800f52e:	3304      	adds	r3, #4
 800f530:	4618      	mov	r0, r3
 800f532:	f7fe fb1d 	bl	800db70 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f536:	697b      	ldr	r3, [r7, #20]
 800f538:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f53c:	f003 0304 	and.w	r3, r3, #4
 800f540:	2b00      	cmp	r3, #0
 800f542:	d022      	beq.n	800f58a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f544:	697b      	ldr	r3, [r7, #20]
 800f546:	699a      	ldr	r2, [r3, #24]
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	18d1      	adds	r1, r2, r3
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	683a      	ldr	r2, [r7, #0]
 800f550:	6978      	ldr	r0, [r7, #20]
 800f552:	f000 f8d1 	bl	800f6f8 <prvInsertTimerInActiveList>
 800f556:	4603      	mov	r3, r0
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d01f      	beq.n	800f59c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f55c:	2300      	movs	r3, #0
 800f55e:	9300      	str	r3, [sp, #0]
 800f560:	2300      	movs	r3, #0
 800f562:	687a      	ldr	r2, [r7, #4]
 800f564:	2100      	movs	r1, #0
 800f566:	6978      	ldr	r0, [r7, #20]
 800f568:	f7ff ff88 	bl	800f47c <xTimerGenericCommand>
 800f56c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f56e:	693b      	ldr	r3, [r7, #16]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d113      	bne.n	800f59c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f578:	f383 8811 	msr	BASEPRI, r3
 800f57c:	f3bf 8f6f 	isb	sy
 800f580:	f3bf 8f4f 	dsb	sy
 800f584:	60fb      	str	r3, [r7, #12]
}
 800f586:	bf00      	nop
 800f588:	e7fe      	b.n	800f588 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f58a:	697b      	ldr	r3, [r7, #20]
 800f58c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f590:	f023 0301 	bic.w	r3, r3, #1
 800f594:	b2da      	uxtb	r2, r3
 800f596:	697b      	ldr	r3, [r7, #20]
 800f598:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f59c:	697b      	ldr	r3, [r7, #20]
 800f59e:	6a1b      	ldr	r3, [r3, #32]
 800f5a0:	6978      	ldr	r0, [r7, #20]
 800f5a2:	4798      	blx	r3
}
 800f5a4:	bf00      	nop
 800f5a6:	3718      	adds	r7, #24
 800f5a8:	46bd      	mov	sp, r7
 800f5aa:	bd80      	pop	{r7, pc}
 800f5ac:	2000437c 	.word	0x2000437c

0800f5b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b084      	sub	sp, #16
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f5b8:	f107 0308 	add.w	r3, r7, #8
 800f5bc:	4618      	mov	r0, r3
 800f5be:	f000 f857 	bl	800f670 <prvGetNextExpireTime>
 800f5c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f5c4:	68bb      	ldr	r3, [r7, #8]
 800f5c6:	4619      	mov	r1, r3
 800f5c8:	68f8      	ldr	r0, [r7, #12]
 800f5ca:	f000 f803 	bl	800f5d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f5ce:	f000 f8d5 	bl	800f77c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f5d2:	e7f1      	b.n	800f5b8 <prvTimerTask+0x8>

0800f5d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b084      	sub	sp, #16
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
 800f5dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f5de:	f7ff fa39 	bl	800ea54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f5e2:	f107 0308 	add.w	r3, r7, #8
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	f000 f866 	bl	800f6b8 <prvSampleTimeNow>
 800f5ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f5ee:	68bb      	ldr	r3, [r7, #8]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d130      	bne.n	800f656 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f5f4:	683b      	ldr	r3, [r7, #0]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d10a      	bne.n	800f610 <prvProcessTimerOrBlockTask+0x3c>
 800f5fa:	687a      	ldr	r2, [r7, #4]
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	429a      	cmp	r2, r3
 800f600:	d806      	bhi.n	800f610 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f602:	f7ff fa35 	bl	800ea70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f606:	68f9      	ldr	r1, [r7, #12]
 800f608:	6878      	ldr	r0, [r7, #4]
 800f60a:	f7ff ff85 	bl	800f518 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f60e:	e024      	b.n	800f65a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f610:	683b      	ldr	r3, [r7, #0]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d008      	beq.n	800f628 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f616:	4b13      	ldr	r3, [pc, #76]	; (800f664 <prvProcessTimerOrBlockTask+0x90>)
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d101      	bne.n	800f624 <prvProcessTimerOrBlockTask+0x50>
 800f620:	2301      	movs	r3, #1
 800f622:	e000      	b.n	800f626 <prvProcessTimerOrBlockTask+0x52>
 800f624:	2300      	movs	r3, #0
 800f626:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f628:	4b0f      	ldr	r3, [pc, #60]	; (800f668 <prvProcessTimerOrBlockTask+0x94>)
 800f62a:	6818      	ldr	r0, [r3, #0]
 800f62c:	687a      	ldr	r2, [r7, #4]
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	1ad3      	subs	r3, r2, r3
 800f632:	683a      	ldr	r2, [r7, #0]
 800f634:	4619      	mov	r1, r3
 800f636:	f7fe ff7d 	bl	800e534 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f63a:	f7ff fa19 	bl	800ea70 <xTaskResumeAll>
 800f63e:	4603      	mov	r3, r0
 800f640:	2b00      	cmp	r3, #0
 800f642:	d10a      	bne.n	800f65a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f644:	4b09      	ldr	r3, [pc, #36]	; (800f66c <prvProcessTimerOrBlockTask+0x98>)
 800f646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f64a:	601a      	str	r2, [r3, #0]
 800f64c:	f3bf 8f4f 	dsb	sy
 800f650:	f3bf 8f6f 	isb	sy
}
 800f654:	e001      	b.n	800f65a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f656:	f7ff fa0b 	bl	800ea70 <xTaskResumeAll>
}
 800f65a:	bf00      	nop
 800f65c:	3710      	adds	r7, #16
 800f65e:	46bd      	mov	sp, r7
 800f660:	bd80      	pop	{r7, pc}
 800f662:	bf00      	nop
 800f664:	20004380 	.word	0x20004380
 800f668:	20004384 	.word	0x20004384
 800f66c:	e000ed04 	.word	0xe000ed04

0800f670 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f670:	b480      	push	{r7}
 800f672:	b085      	sub	sp, #20
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f678:	4b0e      	ldr	r3, [pc, #56]	; (800f6b4 <prvGetNextExpireTime+0x44>)
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d101      	bne.n	800f686 <prvGetNextExpireTime+0x16>
 800f682:	2201      	movs	r2, #1
 800f684:	e000      	b.n	800f688 <prvGetNextExpireTime+0x18>
 800f686:	2200      	movs	r2, #0
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d105      	bne.n	800f6a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f694:	4b07      	ldr	r3, [pc, #28]	; (800f6b4 <prvGetNextExpireTime+0x44>)
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	68db      	ldr	r3, [r3, #12]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	60fb      	str	r3, [r7, #12]
 800f69e:	e001      	b.n	800f6a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f6a4:	68fb      	ldr	r3, [r7, #12]
}
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	3714      	adds	r7, #20
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b0:	4770      	bx	lr
 800f6b2:	bf00      	nop
 800f6b4:	2000437c 	.word	0x2000437c

0800f6b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b084      	sub	sp, #16
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f6c0:	f7ff fa74 	bl	800ebac <xTaskGetTickCount>
 800f6c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f6c6:	4b0b      	ldr	r3, [pc, #44]	; (800f6f4 <prvSampleTimeNow+0x3c>)
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	68fa      	ldr	r2, [r7, #12]
 800f6cc:	429a      	cmp	r2, r3
 800f6ce:	d205      	bcs.n	800f6dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f6d0:	f000 f936 	bl	800f940 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	2201      	movs	r2, #1
 800f6d8:	601a      	str	r2, [r3, #0]
 800f6da:	e002      	b.n	800f6e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	2200      	movs	r2, #0
 800f6e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f6e2:	4a04      	ldr	r2, [pc, #16]	; (800f6f4 <prvSampleTimeNow+0x3c>)
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f6e8:	68fb      	ldr	r3, [r7, #12]
}
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	3710      	adds	r7, #16
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	bd80      	pop	{r7, pc}
 800f6f2:	bf00      	nop
 800f6f4:	2000438c 	.word	0x2000438c

0800f6f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b086      	sub	sp, #24
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	60f8      	str	r0, [r7, #12]
 800f700:	60b9      	str	r1, [r7, #8]
 800f702:	607a      	str	r2, [r7, #4]
 800f704:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f706:	2300      	movs	r3, #0
 800f708:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	68ba      	ldr	r2, [r7, #8]
 800f70e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	68fa      	ldr	r2, [r7, #12]
 800f714:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f716:	68ba      	ldr	r2, [r7, #8]
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	429a      	cmp	r2, r3
 800f71c:	d812      	bhi.n	800f744 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f71e:	687a      	ldr	r2, [r7, #4]
 800f720:	683b      	ldr	r3, [r7, #0]
 800f722:	1ad2      	subs	r2, r2, r3
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	699b      	ldr	r3, [r3, #24]
 800f728:	429a      	cmp	r2, r3
 800f72a:	d302      	bcc.n	800f732 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f72c:	2301      	movs	r3, #1
 800f72e:	617b      	str	r3, [r7, #20]
 800f730:	e01b      	b.n	800f76a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f732:	4b10      	ldr	r3, [pc, #64]	; (800f774 <prvInsertTimerInActiveList+0x7c>)
 800f734:	681a      	ldr	r2, [r3, #0]
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	3304      	adds	r3, #4
 800f73a:	4619      	mov	r1, r3
 800f73c:	4610      	mov	r0, r2
 800f73e:	f7fe f9de 	bl	800dafe <vListInsert>
 800f742:	e012      	b.n	800f76a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f744:	687a      	ldr	r2, [r7, #4]
 800f746:	683b      	ldr	r3, [r7, #0]
 800f748:	429a      	cmp	r2, r3
 800f74a:	d206      	bcs.n	800f75a <prvInsertTimerInActiveList+0x62>
 800f74c:	68ba      	ldr	r2, [r7, #8]
 800f74e:	683b      	ldr	r3, [r7, #0]
 800f750:	429a      	cmp	r2, r3
 800f752:	d302      	bcc.n	800f75a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f754:	2301      	movs	r3, #1
 800f756:	617b      	str	r3, [r7, #20]
 800f758:	e007      	b.n	800f76a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f75a:	4b07      	ldr	r3, [pc, #28]	; (800f778 <prvInsertTimerInActiveList+0x80>)
 800f75c:	681a      	ldr	r2, [r3, #0]
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	3304      	adds	r3, #4
 800f762:	4619      	mov	r1, r3
 800f764:	4610      	mov	r0, r2
 800f766:	f7fe f9ca 	bl	800dafe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f76a:	697b      	ldr	r3, [r7, #20]
}
 800f76c:	4618      	mov	r0, r3
 800f76e:	3718      	adds	r7, #24
 800f770:	46bd      	mov	sp, r7
 800f772:	bd80      	pop	{r7, pc}
 800f774:	20004380 	.word	0x20004380
 800f778:	2000437c 	.word	0x2000437c

0800f77c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b08e      	sub	sp, #56	; 0x38
 800f780:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f782:	e0ca      	b.n	800f91a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	2b00      	cmp	r3, #0
 800f788:	da18      	bge.n	800f7bc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f78a:	1d3b      	adds	r3, r7, #4
 800f78c:	3304      	adds	r3, #4
 800f78e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f792:	2b00      	cmp	r3, #0
 800f794:	d10a      	bne.n	800f7ac <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f79a:	f383 8811 	msr	BASEPRI, r3
 800f79e:	f3bf 8f6f 	isb	sy
 800f7a2:	f3bf 8f4f 	dsb	sy
 800f7a6:	61fb      	str	r3, [r7, #28]
}
 800f7a8:	bf00      	nop
 800f7aa:	e7fe      	b.n	800f7aa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7b2:	6850      	ldr	r0, [r2, #4]
 800f7b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7b6:	6892      	ldr	r2, [r2, #8]
 800f7b8:	4611      	mov	r1, r2
 800f7ba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	f2c0 80ab 	blt.w	800f91a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ca:	695b      	ldr	r3, [r3, #20]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d004      	beq.n	800f7da <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7d2:	3304      	adds	r3, #4
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	f7fe f9cb 	bl	800db70 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f7da:	463b      	mov	r3, r7
 800f7dc:	4618      	mov	r0, r3
 800f7de:	f7ff ff6b 	bl	800f6b8 <prvSampleTimeNow>
 800f7e2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	2b09      	cmp	r3, #9
 800f7e8:	f200 8096 	bhi.w	800f918 <prvProcessReceivedCommands+0x19c>
 800f7ec:	a201      	add	r2, pc, #4	; (adr r2, 800f7f4 <prvProcessReceivedCommands+0x78>)
 800f7ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7f2:	bf00      	nop
 800f7f4:	0800f81d 	.word	0x0800f81d
 800f7f8:	0800f81d 	.word	0x0800f81d
 800f7fc:	0800f81d 	.word	0x0800f81d
 800f800:	0800f891 	.word	0x0800f891
 800f804:	0800f8a5 	.word	0x0800f8a5
 800f808:	0800f8ef 	.word	0x0800f8ef
 800f80c:	0800f81d 	.word	0x0800f81d
 800f810:	0800f81d 	.word	0x0800f81d
 800f814:	0800f891 	.word	0x0800f891
 800f818:	0800f8a5 	.word	0x0800f8a5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f81e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f822:	f043 0301 	orr.w	r3, r3, #1
 800f826:	b2da      	uxtb	r2, r3
 800f828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f82a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f82e:	68ba      	ldr	r2, [r7, #8]
 800f830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f832:	699b      	ldr	r3, [r3, #24]
 800f834:	18d1      	adds	r1, r2, r3
 800f836:	68bb      	ldr	r3, [r7, #8]
 800f838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f83a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f83c:	f7ff ff5c 	bl	800f6f8 <prvInsertTimerInActiveList>
 800f840:	4603      	mov	r3, r0
 800f842:	2b00      	cmp	r3, #0
 800f844:	d069      	beq.n	800f91a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f848:	6a1b      	ldr	r3, [r3, #32]
 800f84a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f84c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f850:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f854:	f003 0304 	and.w	r3, r3, #4
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d05e      	beq.n	800f91a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f85c:	68ba      	ldr	r2, [r7, #8]
 800f85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f860:	699b      	ldr	r3, [r3, #24]
 800f862:	441a      	add	r2, r3
 800f864:	2300      	movs	r3, #0
 800f866:	9300      	str	r3, [sp, #0]
 800f868:	2300      	movs	r3, #0
 800f86a:	2100      	movs	r1, #0
 800f86c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f86e:	f7ff fe05 	bl	800f47c <xTimerGenericCommand>
 800f872:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f874:	6a3b      	ldr	r3, [r7, #32]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d14f      	bne.n	800f91a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f87e:	f383 8811 	msr	BASEPRI, r3
 800f882:	f3bf 8f6f 	isb	sy
 800f886:	f3bf 8f4f 	dsb	sy
 800f88a:	61bb      	str	r3, [r7, #24]
}
 800f88c:	bf00      	nop
 800f88e:	e7fe      	b.n	800f88e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f892:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f896:	f023 0301 	bic.w	r3, r3, #1
 800f89a:	b2da      	uxtb	r2, r3
 800f89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f89e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f8a2:	e03a      	b.n	800f91a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f8aa:	f043 0301 	orr.w	r3, r3, #1
 800f8ae:	b2da      	uxtb	r2, r3
 800f8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f8b6:	68ba      	ldr	r2, [r7, #8]
 800f8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8ba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8be:	699b      	ldr	r3, [r3, #24]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d10a      	bne.n	800f8da <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8c8:	f383 8811 	msr	BASEPRI, r3
 800f8cc:	f3bf 8f6f 	isb	sy
 800f8d0:	f3bf 8f4f 	dsb	sy
 800f8d4:	617b      	str	r3, [r7, #20]
}
 800f8d6:	bf00      	nop
 800f8d8:	e7fe      	b.n	800f8d8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8dc:	699a      	ldr	r2, [r3, #24]
 800f8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8e0:	18d1      	adds	r1, r2, r3
 800f8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f8e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f8e8:	f7ff ff06 	bl	800f6f8 <prvInsertTimerInActiveList>
					break;
 800f8ec:	e015      	b.n	800f91a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f8f4:	f003 0302 	and.w	r3, r3, #2
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d103      	bne.n	800f904 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f8fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f8fe:	f000 fbdf 	bl	80100c0 <vPortFree>
 800f902:	e00a      	b.n	800f91a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f906:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f90a:	f023 0301 	bic.w	r3, r3, #1
 800f90e:	b2da      	uxtb	r2, r3
 800f910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f912:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f916:	e000      	b.n	800f91a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800f918:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f91a:	4b08      	ldr	r3, [pc, #32]	; (800f93c <prvProcessReceivedCommands+0x1c0>)
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	1d39      	adds	r1, r7, #4
 800f920:	2200      	movs	r2, #0
 800f922:	4618      	mov	r0, r3
 800f924:	f7fe fbec 	bl	800e100 <xQueueReceive>
 800f928:	4603      	mov	r3, r0
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	f47f af2a 	bne.w	800f784 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f930:	bf00      	nop
 800f932:	bf00      	nop
 800f934:	3730      	adds	r7, #48	; 0x30
 800f936:	46bd      	mov	sp, r7
 800f938:	bd80      	pop	{r7, pc}
 800f93a:	bf00      	nop
 800f93c:	20004384 	.word	0x20004384

0800f940 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f940:	b580      	push	{r7, lr}
 800f942:	b088      	sub	sp, #32
 800f944:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f946:	e048      	b.n	800f9da <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f948:	4b2d      	ldr	r3, [pc, #180]	; (800fa00 <prvSwitchTimerLists+0xc0>)
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	68db      	ldr	r3, [r3, #12]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f952:	4b2b      	ldr	r3, [pc, #172]	; (800fa00 <prvSwitchTimerLists+0xc0>)
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	68db      	ldr	r3, [r3, #12]
 800f958:	68db      	ldr	r3, [r3, #12]
 800f95a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	3304      	adds	r3, #4
 800f960:	4618      	mov	r0, r3
 800f962:	f7fe f905 	bl	800db70 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	6a1b      	ldr	r3, [r3, #32]
 800f96a:	68f8      	ldr	r0, [r7, #12]
 800f96c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f974:	f003 0304 	and.w	r3, r3, #4
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d02e      	beq.n	800f9da <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	699b      	ldr	r3, [r3, #24]
 800f980:	693a      	ldr	r2, [r7, #16]
 800f982:	4413      	add	r3, r2
 800f984:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f986:	68ba      	ldr	r2, [r7, #8]
 800f988:	693b      	ldr	r3, [r7, #16]
 800f98a:	429a      	cmp	r2, r3
 800f98c:	d90e      	bls.n	800f9ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	68ba      	ldr	r2, [r7, #8]
 800f992:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	68fa      	ldr	r2, [r7, #12]
 800f998:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f99a:	4b19      	ldr	r3, [pc, #100]	; (800fa00 <prvSwitchTimerLists+0xc0>)
 800f99c:	681a      	ldr	r2, [r3, #0]
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	3304      	adds	r3, #4
 800f9a2:	4619      	mov	r1, r3
 800f9a4:	4610      	mov	r0, r2
 800f9a6:	f7fe f8aa 	bl	800dafe <vListInsert>
 800f9aa:	e016      	b.n	800f9da <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	9300      	str	r3, [sp, #0]
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	693a      	ldr	r2, [r7, #16]
 800f9b4:	2100      	movs	r1, #0
 800f9b6:	68f8      	ldr	r0, [r7, #12]
 800f9b8:	f7ff fd60 	bl	800f47c <xTimerGenericCommand>
 800f9bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d10a      	bne.n	800f9da <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9c8:	f383 8811 	msr	BASEPRI, r3
 800f9cc:	f3bf 8f6f 	isb	sy
 800f9d0:	f3bf 8f4f 	dsb	sy
 800f9d4:	603b      	str	r3, [r7, #0]
}
 800f9d6:	bf00      	nop
 800f9d8:	e7fe      	b.n	800f9d8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f9da:	4b09      	ldr	r3, [pc, #36]	; (800fa00 <prvSwitchTimerLists+0xc0>)
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d1b1      	bne.n	800f948 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f9e4:	4b06      	ldr	r3, [pc, #24]	; (800fa00 <prvSwitchTimerLists+0xc0>)
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f9ea:	4b06      	ldr	r3, [pc, #24]	; (800fa04 <prvSwitchTimerLists+0xc4>)
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	4a04      	ldr	r2, [pc, #16]	; (800fa00 <prvSwitchTimerLists+0xc0>)
 800f9f0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f9f2:	4a04      	ldr	r2, [pc, #16]	; (800fa04 <prvSwitchTimerLists+0xc4>)
 800f9f4:	697b      	ldr	r3, [r7, #20]
 800f9f6:	6013      	str	r3, [r2, #0]
}
 800f9f8:	bf00      	nop
 800f9fa:	3718      	adds	r7, #24
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	bd80      	pop	{r7, pc}
 800fa00:	2000437c 	.word	0x2000437c
 800fa04:	20004380 	.word	0x20004380

0800fa08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b082      	sub	sp, #8
 800fa0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fa0e:	f000 f969 	bl	800fce4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fa12:	4b15      	ldr	r3, [pc, #84]	; (800fa68 <prvCheckForValidListAndQueue+0x60>)
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d120      	bne.n	800fa5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fa1a:	4814      	ldr	r0, [pc, #80]	; (800fa6c <prvCheckForValidListAndQueue+0x64>)
 800fa1c:	f7fe f81e 	bl	800da5c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fa20:	4813      	ldr	r0, [pc, #76]	; (800fa70 <prvCheckForValidListAndQueue+0x68>)
 800fa22:	f7fe f81b 	bl	800da5c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fa26:	4b13      	ldr	r3, [pc, #76]	; (800fa74 <prvCheckForValidListAndQueue+0x6c>)
 800fa28:	4a10      	ldr	r2, [pc, #64]	; (800fa6c <prvCheckForValidListAndQueue+0x64>)
 800fa2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fa2c:	4b12      	ldr	r3, [pc, #72]	; (800fa78 <prvCheckForValidListAndQueue+0x70>)
 800fa2e:	4a10      	ldr	r2, [pc, #64]	; (800fa70 <prvCheckForValidListAndQueue+0x68>)
 800fa30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fa32:	2300      	movs	r3, #0
 800fa34:	9300      	str	r3, [sp, #0]
 800fa36:	4b11      	ldr	r3, [pc, #68]	; (800fa7c <prvCheckForValidListAndQueue+0x74>)
 800fa38:	4a11      	ldr	r2, [pc, #68]	; (800fa80 <prvCheckForValidListAndQueue+0x78>)
 800fa3a:	2110      	movs	r1, #16
 800fa3c:	200a      	movs	r0, #10
 800fa3e:	f7fe f929 	bl	800dc94 <xQueueGenericCreateStatic>
 800fa42:	4603      	mov	r3, r0
 800fa44:	4a08      	ldr	r2, [pc, #32]	; (800fa68 <prvCheckForValidListAndQueue+0x60>)
 800fa46:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fa48:	4b07      	ldr	r3, [pc, #28]	; (800fa68 <prvCheckForValidListAndQueue+0x60>)
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d005      	beq.n	800fa5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fa50:	4b05      	ldr	r3, [pc, #20]	; (800fa68 <prvCheckForValidListAndQueue+0x60>)
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	490b      	ldr	r1, [pc, #44]	; (800fa84 <prvCheckForValidListAndQueue+0x7c>)
 800fa56:	4618      	mov	r0, r3
 800fa58:	f7fe fd42 	bl	800e4e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fa5c:	f000 f972 	bl	800fd44 <vPortExitCritical>
}
 800fa60:	bf00      	nop
 800fa62:	46bd      	mov	sp, r7
 800fa64:	bd80      	pop	{r7, pc}
 800fa66:	bf00      	nop
 800fa68:	20004384 	.word	0x20004384
 800fa6c:	20004354 	.word	0x20004354
 800fa70:	20004368 	.word	0x20004368
 800fa74:	2000437c 	.word	0x2000437c
 800fa78:	20004380 	.word	0x20004380
 800fa7c:	20004430 	.word	0x20004430
 800fa80:	20004390 	.word	0x20004390
 800fa84:	08015680 	.word	0x08015680

0800fa88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fa88:	b480      	push	{r7}
 800fa8a:	b085      	sub	sp, #20
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	60f8      	str	r0, [r7, #12]
 800fa90:	60b9      	str	r1, [r7, #8]
 800fa92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	3b04      	subs	r3, #4
 800fa98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800faa0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	3b04      	subs	r3, #4
 800faa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800faa8:	68bb      	ldr	r3, [r7, #8]
 800faaa:	f023 0201 	bic.w	r2, r3, #1
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	3b04      	subs	r3, #4
 800fab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fab8:	4a0c      	ldr	r2, [pc, #48]	; (800faec <pxPortInitialiseStack+0x64>)
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	3b14      	subs	r3, #20
 800fac2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fac4:	687a      	ldr	r2, [r7, #4]
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	3b04      	subs	r3, #4
 800face:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	f06f 0202 	mvn.w	r2, #2
 800fad6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	3b20      	subs	r3, #32
 800fadc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fade:	68fb      	ldr	r3, [r7, #12]
}
 800fae0:	4618      	mov	r0, r3
 800fae2:	3714      	adds	r7, #20
 800fae4:	46bd      	mov	sp, r7
 800fae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faea:	4770      	bx	lr
 800faec:	0800faf1 	.word	0x0800faf1

0800faf0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800faf0:	b480      	push	{r7}
 800faf2:	b085      	sub	sp, #20
 800faf4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800faf6:	2300      	movs	r3, #0
 800faf8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fafa:	4b12      	ldr	r3, [pc, #72]	; (800fb44 <prvTaskExitError+0x54>)
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb02:	d00a      	beq.n	800fb1a <prvTaskExitError+0x2a>
	__asm volatile
 800fb04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb08:	f383 8811 	msr	BASEPRI, r3
 800fb0c:	f3bf 8f6f 	isb	sy
 800fb10:	f3bf 8f4f 	dsb	sy
 800fb14:	60fb      	str	r3, [r7, #12]
}
 800fb16:	bf00      	nop
 800fb18:	e7fe      	b.n	800fb18 <prvTaskExitError+0x28>
	__asm volatile
 800fb1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb1e:	f383 8811 	msr	BASEPRI, r3
 800fb22:	f3bf 8f6f 	isb	sy
 800fb26:	f3bf 8f4f 	dsb	sy
 800fb2a:	60bb      	str	r3, [r7, #8]
}
 800fb2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fb2e:	bf00      	nop
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d0fc      	beq.n	800fb30 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fb36:	bf00      	nop
 800fb38:	bf00      	nop
 800fb3a:	3714      	adds	r7, #20
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb42:	4770      	bx	lr
 800fb44:	20000018 	.word	0x20000018
	...

0800fb50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fb50:	4b07      	ldr	r3, [pc, #28]	; (800fb70 <pxCurrentTCBConst2>)
 800fb52:	6819      	ldr	r1, [r3, #0]
 800fb54:	6808      	ldr	r0, [r1, #0]
 800fb56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb5a:	f380 8809 	msr	PSP, r0
 800fb5e:	f3bf 8f6f 	isb	sy
 800fb62:	f04f 0000 	mov.w	r0, #0
 800fb66:	f380 8811 	msr	BASEPRI, r0
 800fb6a:	4770      	bx	lr
 800fb6c:	f3af 8000 	nop.w

0800fb70 <pxCurrentTCBConst2>:
 800fb70:	20003e54 	.word	0x20003e54
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fb74:	bf00      	nop
 800fb76:	bf00      	nop

0800fb78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fb78:	4808      	ldr	r0, [pc, #32]	; (800fb9c <prvPortStartFirstTask+0x24>)
 800fb7a:	6800      	ldr	r0, [r0, #0]
 800fb7c:	6800      	ldr	r0, [r0, #0]
 800fb7e:	f380 8808 	msr	MSP, r0
 800fb82:	f04f 0000 	mov.w	r0, #0
 800fb86:	f380 8814 	msr	CONTROL, r0
 800fb8a:	b662      	cpsie	i
 800fb8c:	b661      	cpsie	f
 800fb8e:	f3bf 8f4f 	dsb	sy
 800fb92:	f3bf 8f6f 	isb	sy
 800fb96:	df00      	svc	0
 800fb98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fb9a:	bf00      	nop
 800fb9c:	e000ed08 	.word	0xe000ed08

0800fba0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b086      	sub	sp, #24
 800fba4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fba6:	4b46      	ldr	r3, [pc, #280]	; (800fcc0 <xPortStartScheduler+0x120>)
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	4a46      	ldr	r2, [pc, #280]	; (800fcc4 <xPortStartScheduler+0x124>)
 800fbac:	4293      	cmp	r3, r2
 800fbae:	d10a      	bne.n	800fbc6 <xPortStartScheduler+0x26>
	__asm volatile
 800fbb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbb4:	f383 8811 	msr	BASEPRI, r3
 800fbb8:	f3bf 8f6f 	isb	sy
 800fbbc:	f3bf 8f4f 	dsb	sy
 800fbc0:	613b      	str	r3, [r7, #16]
}
 800fbc2:	bf00      	nop
 800fbc4:	e7fe      	b.n	800fbc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fbc6:	4b3e      	ldr	r3, [pc, #248]	; (800fcc0 <xPortStartScheduler+0x120>)
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	4a3f      	ldr	r2, [pc, #252]	; (800fcc8 <xPortStartScheduler+0x128>)
 800fbcc:	4293      	cmp	r3, r2
 800fbce:	d10a      	bne.n	800fbe6 <xPortStartScheduler+0x46>
	__asm volatile
 800fbd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbd4:	f383 8811 	msr	BASEPRI, r3
 800fbd8:	f3bf 8f6f 	isb	sy
 800fbdc:	f3bf 8f4f 	dsb	sy
 800fbe0:	60fb      	str	r3, [r7, #12]
}
 800fbe2:	bf00      	nop
 800fbe4:	e7fe      	b.n	800fbe4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fbe6:	4b39      	ldr	r3, [pc, #228]	; (800fccc <xPortStartScheduler+0x12c>)
 800fbe8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fbea:	697b      	ldr	r3, [r7, #20]
 800fbec:	781b      	ldrb	r3, [r3, #0]
 800fbee:	b2db      	uxtb	r3, r3
 800fbf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fbf2:	697b      	ldr	r3, [r7, #20]
 800fbf4:	22ff      	movs	r2, #255	; 0xff
 800fbf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fbf8:	697b      	ldr	r3, [r7, #20]
 800fbfa:	781b      	ldrb	r3, [r3, #0]
 800fbfc:	b2db      	uxtb	r3, r3
 800fbfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fc00:	78fb      	ldrb	r3, [r7, #3]
 800fc02:	b2db      	uxtb	r3, r3
 800fc04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fc08:	b2da      	uxtb	r2, r3
 800fc0a:	4b31      	ldr	r3, [pc, #196]	; (800fcd0 <xPortStartScheduler+0x130>)
 800fc0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fc0e:	4b31      	ldr	r3, [pc, #196]	; (800fcd4 <xPortStartScheduler+0x134>)
 800fc10:	2207      	movs	r2, #7
 800fc12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fc14:	e009      	b.n	800fc2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800fc16:	4b2f      	ldr	r3, [pc, #188]	; (800fcd4 <xPortStartScheduler+0x134>)
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	3b01      	subs	r3, #1
 800fc1c:	4a2d      	ldr	r2, [pc, #180]	; (800fcd4 <xPortStartScheduler+0x134>)
 800fc1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fc20:	78fb      	ldrb	r3, [r7, #3]
 800fc22:	b2db      	uxtb	r3, r3
 800fc24:	005b      	lsls	r3, r3, #1
 800fc26:	b2db      	uxtb	r3, r3
 800fc28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fc2a:	78fb      	ldrb	r3, [r7, #3]
 800fc2c:	b2db      	uxtb	r3, r3
 800fc2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc32:	2b80      	cmp	r3, #128	; 0x80
 800fc34:	d0ef      	beq.n	800fc16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fc36:	4b27      	ldr	r3, [pc, #156]	; (800fcd4 <xPortStartScheduler+0x134>)
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	f1c3 0307 	rsb	r3, r3, #7
 800fc3e:	2b04      	cmp	r3, #4
 800fc40:	d00a      	beq.n	800fc58 <xPortStartScheduler+0xb8>
	__asm volatile
 800fc42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc46:	f383 8811 	msr	BASEPRI, r3
 800fc4a:	f3bf 8f6f 	isb	sy
 800fc4e:	f3bf 8f4f 	dsb	sy
 800fc52:	60bb      	str	r3, [r7, #8]
}
 800fc54:	bf00      	nop
 800fc56:	e7fe      	b.n	800fc56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fc58:	4b1e      	ldr	r3, [pc, #120]	; (800fcd4 <xPortStartScheduler+0x134>)
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	021b      	lsls	r3, r3, #8
 800fc5e:	4a1d      	ldr	r2, [pc, #116]	; (800fcd4 <xPortStartScheduler+0x134>)
 800fc60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fc62:	4b1c      	ldr	r3, [pc, #112]	; (800fcd4 <xPortStartScheduler+0x134>)
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fc6a:	4a1a      	ldr	r2, [pc, #104]	; (800fcd4 <xPortStartScheduler+0x134>)
 800fc6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	b2da      	uxtb	r2, r3
 800fc72:	697b      	ldr	r3, [r7, #20]
 800fc74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fc76:	4b18      	ldr	r3, [pc, #96]	; (800fcd8 <xPortStartScheduler+0x138>)
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	4a17      	ldr	r2, [pc, #92]	; (800fcd8 <xPortStartScheduler+0x138>)
 800fc7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fc80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fc82:	4b15      	ldr	r3, [pc, #84]	; (800fcd8 <xPortStartScheduler+0x138>)
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	4a14      	ldr	r2, [pc, #80]	; (800fcd8 <xPortStartScheduler+0x138>)
 800fc88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fc8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fc8e:	f000 f8dd 	bl	800fe4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fc92:	4b12      	ldr	r3, [pc, #72]	; (800fcdc <xPortStartScheduler+0x13c>)
 800fc94:	2200      	movs	r2, #0
 800fc96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fc98:	f000 f8fc 	bl	800fe94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fc9c:	4b10      	ldr	r3, [pc, #64]	; (800fce0 <xPortStartScheduler+0x140>)
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	4a0f      	ldr	r2, [pc, #60]	; (800fce0 <xPortStartScheduler+0x140>)
 800fca2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fca6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fca8:	f7ff ff66 	bl	800fb78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fcac:	f7ff f848 	bl	800ed40 <vTaskSwitchContext>
	prvTaskExitError();
 800fcb0:	f7ff ff1e 	bl	800faf0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fcb4:	2300      	movs	r3, #0
}
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	3718      	adds	r7, #24
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	bd80      	pop	{r7, pc}
 800fcbe:	bf00      	nop
 800fcc0:	e000ed00 	.word	0xe000ed00
 800fcc4:	410fc271 	.word	0x410fc271
 800fcc8:	410fc270 	.word	0x410fc270
 800fccc:	e000e400 	.word	0xe000e400
 800fcd0:	20004480 	.word	0x20004480
 800fcd4:	20004484 	.word	0x20004484
 800fcd8:	e000ed20 	.word	0xe000ed20
 800fcdc:	20000018 	.word	0x20000018
 800fce0:	e000ef34 	.word	0xe000ef34

0800fce4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fce4:	b480      	push	{r7}
 800fce6:	b083      	sub	sp, #12
 800fce8:	af00      	add	r7, sp, #0
	__asm volatile
 800fcea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcee:	f383 8811 	msr	BASEPRI, r3
 800fcf2:	f3bf 8f6f 	isb	sy
 800fcf6:	f3bf 8f4f 	dsb	sy
 800fcfa:	607b      	str	r3, [r7, #4]
}
 800fcfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fcfe:	4b0f      	ldr	r3, [pc, #60]	; (800fd3c <vPortEnterCritical+0x58>)
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	3301      	adds	r3, #1
 800fd04:	4a0d      	ldr	r2, [pc, #52]	; (800fd3c <vPortEnterCritical+0x58>)
 800fd06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fd08:	4b0c      	ldr	r3, [pc, #48]	; (800fd3c <vPortEnterCritical+0x58>)
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	2b01      	cmp	r3, #1
 800fd0e:	d10f      	bne.n	800fd30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fd10:	4b0b      	ldr	r3, [pc, #44]	; (800fd40 <vPortEnterCritical+0x5c>)
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	b2db      	uxtb	r3, r3
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d00a      	beq.n	800fd30 <vPortEnterCritical+0x4c>
	__asm volatile
 800fd1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd1e:	f383 8811 	msr	BASEPRI, r3
 800fd22:	f3bf 8f6f 	isb	sy
 800fd26:	f3bf 8f4f 	dsb	sy
 800fd2a:	603b      	str	r3, [r7, #0]
}
 800fd2c:	bf00      	nop
 800fd2e:	e7fe      	b.n	800fd2e <vPortEnterCritical+0x4a>
	}
}
 800fd30:	bf00      	nop
 800fd32:	370c      	adds	r7, #12
 800fd34:	46bd      	mov	sp, r7
 800fd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3a:	4770      	bx	lr
 800fd3c:	20000018 	.word	0x20000018
 800fd40:	e000ed04 	.word	0xe000ed04

0800fd44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fd44:	b480      	push	{r7}
 800fd46:	b083      	sub	sp, #12
 800fd48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fd4a:	4b12      	ldr	r3, [pc, #72]	; (800fd94 <vPortExitCritical+0x50>)
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d10a      	bne.n	800fd68 <vPortExitCritical+0x24>
	__asm volatile
 800fd52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd56:	f383 8811 	msr	BASEPRI, r3
 800fd5a:	f3bf 8f6f 	isb	sy
 800fd5e:	f3bf 8f4f 	dsb	sy
 800fd62:	607b      	str	r3, [r7, #4]
}
 800fd64:	bf00      	nop
 800fd66:	e7fe      	b.n	800fd66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fd68:	4b0a      	ldr	r3, [pc, #40]	; (800fd94 <vPortExitCritical+0x50>)
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	3b01      	subs	r3, #1
 800fd6e:	4a09      	ldr	r2, [pc, #36]	; (800fd94 <vPortExitCritical+0x50>)
 800fd70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fd72:	4b08      	ldr	r3, [pc, #32]	; (800fd94 <vPortExitCritical+0x50>)
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d105      	bne.n	800fd86 <vPortExitCritical+0x42>
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fd7e:	683b      	ldr	r3, [r7, #0]
 800fd80:	f383 8811 	msr	BASEPRI, r3
}
 800fd84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fd86:	bf00      	nop
 800fd88:	370c      	adds	r7, #12
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd90:	4770      	bx	lr
 800fd92:	bf00      	nop
 800fd94:	20000018 	.word	0x20000018
	...

0800fda0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fda0:	f3ef 8009 	mrs	r0, PSP
 800fda4:	f3bf 8f6f 	isb	sy
 800fda8:	4b15      	ldr	r3, [pc, #84]	; (800fe00 <pxCurrentTCBConst>)
 800fdaa:	681a      	ldr	r2, [r3, #0]
 800fdac:	f01e 0f10 	tst.w	lr, #16
 800fdb0:	bf08      	it	eq
 800fdb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fdb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdba:	6010      	str	r0, [r2, #0]
 800fdbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fdc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fdc4:	f380 8811 	msr	BASEPRI, r0
 800fdc8:	f3bf 8f4f 	dsb	sy
 800fdcc:	f3bf 8f6f 	isb	sy
 800fdd0:	f7fe ffb6 	bl	800ed40 <vTaskSwitchContext>
 800fdd4:	f04f 0000 	mov.w	r0, #0
 800fdd8:	f380 8811 	msr	BASEPRI, r0
 800fddc:	bc09      	pop	{r0, r3}
 800fdde:	6819      	ldr	r1, [r3, #0]
 800fde0:	6808      	ldr	r0, [r1, #0]
 800fde2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fde6:	f01e 0f10 	tst.w	lr, #16
 800fdea:	bf08      	it	eq
 800fdec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fdf0:	f380 8809 	msr	PSP, r0
 800fdf4:	f3bf 8f6f 	isb	sy
 800fdf8:	4770      	bx	lr
 800fdfa:	bf00      	nop
 800fdfc:	f3af 8000 	nop.w

0800fe00 <pxCurrentTCBConst>:
 800fe00:	20003e54 	.word	0x20003e54
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fe04:	bf00      	nop
 800fe06:	bf00      	nop

0800fe08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b082      	sub	sp, #8
 800fe0c:	af00      	add	r7, sp, #0
	__asm volatile
 800fe0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe12:	f383 8811 	msr	BASEPRI, r3
 800fe16:	f3bf 8f6f 	isb	sy
 800fe1a:	f3bf 8f4f 	dsb	sy
 800fe1e:	607b      	str	r3, [r7, #4]
}
 800fe20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fe22:	f7fe fed3 	bl	800ebcc <xTaskIncrementTick>
 800fe26:	4603      	mov	r3, r0
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d003      	beq.n	800fe34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fe2c:	4b06      	ldr	r3, [pc, #24]	; (800fe48 <xPortSysTickHandler+0x40>)
 800fe2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe32:	601a      	str	r2, [r3, #0]
 800fe34:	2300      	movs	r3, #0
 800fe36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fe38:	683b      	ldr	r3, [r7, #0]
 800fe3a:	f383 8811 	msr	BASEPRI, r3
}
 800fe3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fe40:	bf00      	nop
 800fe42:	3708      	adds	r7, #8
 800fe44:	46bd      	mov	sp, r7
 800fe46:	bd80      	pop	{r7, pc}
 800fe48:	e000ed04 	.word	0xe000ed04

0800fe4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fe4c:	b480      	push	{r7}
 800fe4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fe50:	4b0b      	ldr	r3, [pc, #44]	; (800fe80 <vPortSetupTimerInterrupt+0x34>)
 800fe52:	2200      	movs	r2, #0
 800fe54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fe56:	4b0b      	ldr	r3, [pc, #44]	; (800fe84 <vPortSetupTimerInterrupt+0x38>)
 800fe58:	2200      	movs	r2, #0
 800fe5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fe5c:	4b0a      	ldr	r3, [pc, #40]	; (800fe88 <vPortSetupTimerInterrupt+0x3c>)
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	4a0a      	ldr	r2, [pc, #40]	; (800fe8c <vPortSetupTimerInterrupt+0x40>)
 800fe62:	fba2 2303 	umull	r2, r3, r2, r3
 800fe66:	099b      	lsrs	r3, r3, #6
 800fe68:	4a09      	ldr	r2, [pc, #36]	; (800fe90 <vPortSetupTimerInterrupt+0x44>)
 800fe6a:	3b01      	subs	r3, #1
 800fe6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fe6e:	4b04      	ldr	r3, [pc, #16]	; (800fe80 <vPortSetupTimerInterrupt+0x34>)
 800fe70:	2207      	movs	r2, #7
 800fe72:	601a      	str	r2, [r3, #0]
}
 800fe74:	bf00      	nop
 800fe76:	46bd      	mov	sp, r7
 800fe78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7c:	4770      	bx	lr
 800fe7e:	bf00      	nop
 800fe80:	e000e010 	.word	0xe000e010
 800fe84:	e000e018 	.word	0xe000e018
 800fe88:	2000000c 	.word	0x2000000c
 800fe8c:	10624dd3 	.word	0x10624dd3
 800fe90:	e000e014 	.word	0xe000e014

0800fe94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fe94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fea4 <vPortEnableVFP+0x10>
 800fe98:	6801      	ldr	r1, [r0, #0]
 800fe9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fe9e:	6001      	str	r1, [r0, #0]
 800fea0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fea2:	bf00      	nop
 800fea4:	e000ed88 	.word	0xe000ed88

0800fea8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fea8:	b480      	push	{r7}
 800feaa:	b085      	sub	sp, #20
 800feac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800feae:	f3ef 8305 	mrs	r3, IPSR
 800feb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	2b0f      	cmp	r3, #15
 800feb8:	d914      	bls.n	800fee4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800feba:	4a17      	ldr	r2, [pc, #92]	; (800ff18 <vPortValidateInterruptPriority+0x70>)
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	4413      	add	r3, r2
 800fec0:	781b      	ldrb	r3, [r3, #0]
 800fec2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fec4:	4b15      	ldr	r3, [pc, #84]	; (800ff1c <vPortValidateInterruptPriority+0x74>)
 800fec6:	781b      	ldrb	r3, [r3, #0]
 800fec8:	7afa      	ldrb	r2, [r7, #11]
 800feca:	429a      	cmp	r2, r3
 800fecc:	d20a      	bcs.n	800fee4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800fece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fed2:	f383 8811 	msr	BASEPRI, r3
 800fed6:	f3bf 8f6f 	isb	sy
 800feda:	f3bf 8f4f 	dsb	sy
 800fede:	607b      	str	r3, [r7, #4]
}
 800fee0:	bf00      	nop
 800fee2:	e7fe      	b.n	800fee2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fee4:	4b0e      	ldr	r3, [pc, #56]	; (800ff20 <vPortValidateInterruptPriority+0x78>)
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800feec:	4b0d      	ldr	r3, [pc, #52]	; (800ff24 <vPortValidateInterruptPriority+0x7c>)
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	429a      	cmp	r2, r3
 800fef2:	d90a      	bls.n	800ff0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800fef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fef8:	f383 8811 	msr	BASEPRI, r3
 800fefc:	f3bf 8f6f 	isb	sy
 800ff00:	f3bf 8f4f 	dsb	sy
 800ff04:	603b      	str	r3, [r7, #0]
}
 800ff06:	bf00      	nop
 800ff08:	e7fe      	b.n	800ff08 <vPortValidateInterruptPriority+0x60>
	}
 800ff0a:	bf00      	nop
 800ff0c:	3714      	adds	r7, #20
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff14:	4770      	bx	lr
 800ff16:	bf00      	nop
 800ff18:	e000e3f0 	.word	0xe000e3f0
 800ff1c:	20004480 	.word	0x20004480
 800ff20:	e000ed0c 	.word	0xe000ed0c
 800ff24:	20004484 	.word	0x20004484

0800ff28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b08a      	sub	sp, #40	; 0x28
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ff30:	2300      	movs	r3, #0
 800ff32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ff34:	f7fe fd8e 	bl	800ea54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ff38:	4b5b      	ldr	r3, [pc, #364]	; (80100a8 <pvPortMalloc+0x180>)
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d101      	bne.n	800ff44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ff40:	f000 f920 	bl	8010184 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ff44:	4b59      	ldr	r3, [pc, #356]	; (80100ac <pvPortMalloc+0x184>)
 800ff46:	681a      	ldr	r2, [r3, #0]
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	4013      	ands	r3, r2
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	f040 8093 	bne.w	8010078 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d01d      	beq.n	800ff94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ff58:	2208      	movs	r2, #8
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	4413      	add	r3, r2
 800ff5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	f003 0307 	and.w	r3, r3, #7
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d014      	beq.n	800ff94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	f023 0307 	bic.w	r3, r3, #7
 800ff70:	3308      	adds	r3, #8
 800ff72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	f003 0307 	and.w	r3, r3, #7
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d00a      	beq.n	800ff94 <pvPortMalloc+0x6c>
	__asm volatile
 800ff7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff82:	f383 8811 	msr	BASEPRI, r3
 800ff86:	f3bf 8f6f 	isb	sy
 800ff8a:	f3bf 8f4f 	dsb	sy
 800ff8e:	617b      	str	r3, [r7, #20]
}
 800ff90:	bf00      	nop
 800ff92:	e7fe      	b.n	800ff92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d06e      	beq.n	8010078 <pvPortMalloc+0x150>
 800ff9a:	4b45      	ldr	r3, [pc, #276]	; (80100b0 <pvPortMalloc+0x188>)
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	687a      	ldr	r2, [r7, #4]
 800ffa0:	429a      	cmp	r2, r3
 800ffa2:	d869      	bhi.n	8010078 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ffa4:	4b43      	ldr	r3, [pc, #268]	; (80100b4 <pvPortMalloc+0x18c>)
 800ffa6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ffa8:	4b42      	ldr	r3, [pc, #264]	; (80100b4 <pvPortMalloc+0x18c>)
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ffae:	e004      	b.n	800ffba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ffb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ffb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ffba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffbc:	685b      	ldr	r3, [r3, #4]
 800ffbe:	687a      	ldr	r2, [r7, #4]
 800ffc0:	429a      	cmp	r2, r3
 800ffc2:	d903      	bls.n	800ffcc <pvPortMalloc+0xa4>
 800ffc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d1f1      	bne.n	800ffb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ffcc:	4b36      	ldr	r3, [pc, #216]	; (80100a8 <pvPortMalloc+0x180>)
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ffd2:	429a      	cmp	r2, r3
 800ffd4:	d050      	beq.n	8010078 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ffd6:	6a3b      	ldr	r3, [r7, #32]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	2208      	movs	r2, #8
 800ffdc:	4413      	add	r3, r2
 800ffde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ffe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffe2:	681a      	ldr	r2, [r3, #0]
 800ffe4:	6a3b      	ldr	r3, [r7, #32]
 800ffe6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ffe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffea:	685a      	ldr	r2, [r3, #4]
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	1ad2      	subs	r2, r2, r3
 800fff0:	2308      	movs	r3, #8
 800fff2:	005b      	lsls	r3, r3, #1
 800fff4:	429a      	cmp	r2, r3
 800fff6:	d91f      	bls.n	8010038 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	4413      	add	r3, r2
 800fffe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010000:	69bb      	ldr	r3, [r7, #24]
 8010002:	f003 0307 	and.w	r3, r3, #7
 8010006:	2b00      	cmp	r3, #0
 8010008:	d00a      	beq.n	8010020 <pvPortMalloc+0xf8>
	__asm volatile
 801000a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801000e:	f383 8811 	msr	BASEPRI, r3
 8010012:	f3bf 8f6f 	isb	sy
 8010016:	f3bf 8f4f 	dsb	sy
 801001a:	613b      	str	r3, [r7, #16]
}
 801001c:	bf00      	nop
 801001e:	e7fe      	b.n	801001e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010022:	685a      	ldr	r2, [r3, #4]
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	1ad2      	subs	r2, r2, r3
 8010028:	69bb      	ldr	r3, [r7, #24]
 801002a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801002c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801002e:	687a      	ldr	r2, [r7, #4]
 8010030:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010032:	69b8      	ldr	r0, [r7, #24]
 8010034:	f000 f908 	bl	8010248 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010038:	4b1d      	ldr	r3, [pc, #116]	; (80100b0 <pvPortMalloc+0x188>)
 801003a:	681a      	ldr	r2, [r3, #0]
 801003c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801003e:	685b      	ldr	r3, [r3, #4]
 8010040:	1ad3      	subs	r3, r2, r3
 8010042:	4a1b      	ldr	r2, [pc, #108]	; (80100b0 <pvPortMalloc+0x188>)
 8010044:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010046:	4b1a      	ldr	r3, [pc, #104]	; (80100b0 <pvPortMalloc+0x188>)
 8010048:	681a      	ldr	r2, [r3, #0]
 801004a:	4b1b      	ldr	r3, [pc, #108]	; (80100b8 <pvPortMalloc+0x190>)
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	429a      	cmp	r2, r3
 8010050:	d203      	bcs.n	801005a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010052:	4b17      	ldr	r3, [pc, #92]	; (80100b0 <pvPortMalloc+0x188>)
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	4a18      	ldr	r2, [pc, #96]	; (80100b8 <pvPortMalloc+0x190>)
 8010058:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801005a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801005c:	685a      	ldr	r2, [r3, #4]
 801005e:	4b13      	ldr	r3, [pc, #76]	; (80100ac <pvPortMalloc+0x184>)
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	431a      	orrs	r2, r3
 8010064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010066:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801006a:	2200      	movs	r2, #0
 801006c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801006e:	4b13      	ldr	r3, [pc, #76]	; (80100bc <pvPortMalloc+0x194>)
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	3301      	adds	r3, #1
 8010074:	4a11      	ldr	r2, [pc, #68]	; (80100bc <pvPortMalloc+0x194>)
 8010076:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010078:	f7fe fcfa 	bl	800ea70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801007c:	69fb      	ldr	r3, [r7, #28]
 801007e:	f003 0307 	and.w	r3, r3, #7
 8010082:	2b00      	cmp	r3, #0
 8010084:	d00a      	beq.n	801009c <pvPortMalloc+0x174>
	__asm volatile
 8010086:	f04f 0350 	mov.w	r3, #80	; 0x50
 801008a:	f383 8811 	msr	BASEPRI, r3
 801008e:	f3bf 8f6f 	isb	sy
 8010092:	f3bf 8f4f 	dsb	sy
 8010096:	60fb      	str	r3, [r7, #12]
}
 8010098:	bf00      	nop
 801009a:	e7fe      	b.n	801009a <pvPortMalloc+0x172>
	return pvReturn;
 801009c:	69fb      	ldr	r3, [r7, #28]
}
 801009e:	4618      	mov	r0, r3
 80100a0:	3728      	adds	r7, #40	; 0x28
 80100a2:	46bd      	mov	sp, r7
 80100a4:	bd80      	pop	{r7, pc}
 80100a6:	bf00      	nop
 80100a8:	20008090 	.word	0x20008090
 80100ac:	200080a4 	.word	0x200080a4
 80100b0:	20008094 	.word	0x20008094
 80100b4:	20008088 	.word	0x20008088
 80100b8:	20008098 	.word	0x20008098
 80100bc:	2000809c 	.word	0x2000809c

080100c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	b086      	sub	sp, #24
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d04d      	beq.n	801016e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80100d2:	2308      	movs	r3, #8
 80100d4:	425b      	negs	r3, r3
 80100d6:	697a      	ldr	r2, [r7, #20]
 80100d8:	4413      	add	r3, r2
 80100da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80100dc:	697b      	ldr	r3, [r7, #20]
 80100de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80100e0:	693b      	ldr	r3, [r7, #16]
 80100e2:	685a      	ldr	r2, [r3, #4]
 80100e4:	4b24      	ldr	r3, [pc, #144]	; (8010178 <vPortFree+0xb8>)
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	4013      	ands	r3, r2
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d10a      	bne.n	8010104 <vPortFree+0x44>
	__asm volatile
 80100ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100f2:	f383 8811 	msr	BASEPRI, r3
 80100f6:	f3bf 8f6f 	isb	sy
 80100fa:	f3bf 8f4f 	dsb	sy
 80100fe:	60fb      	str	r3, [r7, #12]
}
 8010100:	bf00      	nop
 8010102:	e7fe      	b.n	8010102 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010104:	693b      	ldr	r3, [r7, #16]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d00a      	beq.n	8010122 <vPortFree+0x62>
	__asm volatile
 801010c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010110:	f383 8811 	msr	BASEPRI, r3
 8010114:	f3bf 8f6f 	isb	sy
 8010118:	f3bf 8f4f 	dsb	sy
 801011c:	60bb      	str	r3, [r7, #8]
}
 801011e:	bf00      	nop
 8010120:	e7fe      	b.n	8010120 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010122:	693b      	ldr	r3, [r7, #16]
 8010124:	685a      	ldr	r2, [r3, #4]
 8010126:	4b14      	ldr	r3, [pc, #80]	; (8010178 <vPortFree+0xb8>)
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	4013      	ands	r3, r2
 801012c:	2b00      	cmp	r3, #0
 801012e:	d01e      	beq.n	801016e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010130:	693b      	ldr	r3, [r7, #16]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d11a      	bne.n	801016e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010138:	693b      	ldr	r3, [r7, #16]
 801013a:	685a      	ldr	r2, [r3, #4]
 801013c:	4b0e      	ldr	r3, [pc, #56]	; (8010178 <vPortFree+0xb8>)
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	43db      	mvns	r3, r3
 8010142:	401a      	ands	r2, r3
 8010144:	693b      	ldr	r3, [r7, #16]
 8010146:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010148:	f7fe fc84 	bl	800ea54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801014c:	693b      	ldr	r3, [r7, #16]
 801014e:	685a      	ldr	r2, [r3, #4]
 8010150:	4b0a      	ldr	r3, [pc, #40]	; (801017c <vPortFree+0xbc>)
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	4413      	add	r3, r2
 8010156:	4a09      	ldr	r2, [pc, #36]	; (801017c <vPortFree+0xbc>)
 8010158:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801015a:	6938      	ldr	r0, [r7, #16]
 801015c:	f000 f874 	bl	8010248 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010160:	4b07      	ldr	r3, [pc, #28]	; (8010180 <vPortFree+0xc0>)
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	3301      	adds	r3, #1
 8010166:	4a06      	ldr	r2, [pc, #24]	; (8010180 <vPortFree+0xc0>)
 8010168:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801016a:	f7fe fc81 	bl	800ea70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801016e:	bf00      	nop
 8010170:	3718      	adds	r7, #24
 8010172:	46bd      	mov	sp, r7
 8010174:	bd80      	pop	{r7, pc}
 8010176:	bf00      	nop
 8010178:	200080a4 	.word	0x200080a4
 801017c:	20008094 	.word	0x20008094
 8010180:	200080a0 	.word	0x200080a0

08010184 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010184:	b480      	push	{r7}
 8010186:	b085      	sub	sp, #20
 8010188:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801018a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801018e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010190:	4b27      	ldr	r3, [pc, #156]	; (8010230 <prvHeapInit+0xac>)
 8010192:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	f003 0307 	and.w	r3, r3, #7
 801019a:	2b00      	cmp	r3, #0
 801019c:	d00c      	beq.n	80101b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	3307      	adds	r3, #7
 80101a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	f023 0307 	bic.w	r3, r3, #7
 80101aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80101ac:	68ba      	ldr	r2, [r7, #8]
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	1ad3      	subs	r3, r2, r3
 80101b2:	4a1f      	ldr	r2, [pc, #124]	; (8010230 <prvHeapInit+0xac>)
 80101b4:	4413      	add	r3, r2
 80101b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80101bc:	4a1d      	ldr	r2, [pc, #116]	; (8010234 <prvHeapInit+0xb0>)
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80101c2:	4b1c      	ldr	r3, [pc, #112]	; (8010234 <prvHeapInit+0xb0>)
 80101c4:	2200      	movs	r2, #0
 80101c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	68ba      	ldr	r2, [r7, #8]
 80101cc:	4413      	add	r3, r2
 80101ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80101d0:	2208      	movs	r2, #8
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	1a9b      	subs	r3, r3, r2
 80101d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	f023 0307 	bic.w	r3, r3, #7
 80101de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	4a15      	ldr	r2, [pc, #84]	; (8010238 <prvHeapInit+0xb4>)
 80101e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80101e6:	4b14      	ldr	r3, [pc, #80]	; (8010238 <prvHeapInit+0xb4>)
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	2200      	movs	r2, #0
 80101ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80101ee:	4b12      	ldr	r3, [pc, #72]	; (8010238 <prvHeapInit+0xb4>)
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	2200      	movs	r2, #0
 80101f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80101fa:	683b      	ldr	r3, [r7, #0]
 80101fc:	68fa      	ldr	r2, [r7, #12]
 80101fe:	1ad2      	subs	r2, r2, r3
 8010200:	683b      	ldr	r3, [r7, #0]
 8010202:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010204:	4b0c      	ldr	r3, [pc, #48]	; (8010238 <prvHeapInit+0xb4>)
 8010206:	681a      	ldr	r2, [r3, #0]
 8010208:	683b      	ldr	r3, [r7, #0]
 801020a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801020c:	683b      	ldr	r3, [r7, #0]
 801020e:	685b      	ldr	r3, [r3, #4]
 8010210:	4a0a      	ldr	r2, [pc, #40]	; (801023c <prvHeapInit+0xb8>)
 8010212:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010214:	683b      	ldr	r3, [r7, #0]
 8010216:	685b      	ldr	r3, [r3, #4]
 8010218:	4a09      	ldr	r2, [pc, #36]	; (8010240 <prvHeapInit+0xbc>)
 801021a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801021c:	4b09      	ldr	r3, [pc, #36]	; (8010244 <prvHeapInit+0xc0>)
 801021e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010222:	601a      	str	r2, [r3, #0]
}
 8010224:	bf00      	nop
 8010226:	3714      	adds	r7, #20
 8010228:	46bd      	mov	sp, r7
 801022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022e:	4770      	bx	lr
 8010230:	20004488 	.word	0x20004488
 8010234:	20008088 	.word	0x20008088
 8010238:	20008090 	.word	0x20008090
 801023c:	20008098 	.word	0x20008098
 8010240:	20008094 	.word	0x20008094
 8010244:	200080a4 	.word	0x200080a4

08010248 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010248:	b480      	push	{r7}
 801024a:	b085      	sub	sp, #20
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010250:	4b28      	ldr	r3, [pc, #160]	; (80102f4 <prvInsertBlockIntoFreeList+0xac>)
 8010252:	60fb      	str	r3, [r7, #12]
 8010254:	e002      	b.n	801025c <prvInsertBlockIntoFreeList+0x14>
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	60fb      	str	r3, [r7, #12]
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	687a      	ldr	r2, [r7, #4]
 8010262:	429a      	cmp	r2, r3
 8010264:	d8f7      	bhi.n	8010256 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	685b      	ldr	r3, [r3, #4]
 801026e:	68ba      	ldr	r2, [r7, #8]
 8010270:	4413      	add	r3, r2
 8010272:	687a      	ldr	r2, [r7, #4]
 8010274:	429a      	cmp	r2, r3
 8010276:	d108      	bne.n	801028a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	685a      	ldr	r2, [r3, #4]
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	685b      	ldr	r3, [r3, #4]
 8010280:	441a      	add	r2, r3
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	685b      	ldr	r3, [r3, #4]
 8010292:	68ba      	ldr	r2, [r7, #8]
 8010294:	441a      	add	r2, r3
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	429a      	cmp	r2, r3
 801029c:	d118      	bne.n	80102d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	681a      	ldr	r2, [r3, #0]
 80102a2:	4b15      	ldr	r3, [pc, #84]	; (80102f8 <prvInsertBlockIntoFreeList+0xb0>)
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	429a      	cmp	r2, r3
 80102a8:	d00d      	beq.n	80102c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	685a      	ldr	r2, [r3, #4]
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	685b      	ldr	r3, [r3, #4]
 80102b4:	441a      	add	r2, r3
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	681a      	ldr	r2, [r3, #0]
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	601a      	str	r2, [r3, #0]
 80102c4:	e008      	b.n	80102d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80102c6:	4b0c      	ldr	r3, [pc, #48]	; (80102f8 <prvInsertBlockIntoFreeList+0xb0>)
 80102c8:	681a      	ldr	r2, [r3, #0]
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	601a      	str	r2, [r3, #0]
 80102ce:	e003      	b.n	80102d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	681a      	ldr	r2, [r3, #0]
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80102d8:	68fa      	ldr	r2, [r7, #12]
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	429a      	cmp	r2, r3
 80102de:	d002      	beq.n	80102e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	687a      	ldr	r2, [r7, #4]
 80102e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80102e6:	bf00      	nop
 80102e8:	3714      	adds	r7, #20
 80102ea:	46bd      	mov	sp, r7
 80102ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f0:	4770      	bx	lr
 80102f2:	bf00      	nop
 80102f4:	20008088 	.word	0x20008088
 80102f8:	20008090 	.word	0x20008090

080102fc <pow>:
 80102fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102fe:	ed2d 8b02 	vpush	{d8}
 8010302:	eeb0 8a40 	vmov.f32	s16, s0
 8010306:	eef0 8a60 	vmov.f32	s17, s1
 801030a:	ec55 4b11 	vmov	r4, r5, d1
 801030e:	f000 fbaf 	bl	8010a70 <__ieee754_pow>
 8010312:	4622      	mov	r2, r4
 8010314:	462b      	mov	r3, r5
 8010316:	4620      	mov	r0, r4
 8010318:	4629      	mov	r1, r5
 801031a:	ec57 6b10 	vmov	r6, r7, d0
 801031e:	f7f0 fc15 	bl	8000b4c <__aeabi_dcmpun>
 8010322:	2800      	cmp	r0, #0
 8010324:	d13b      	bne.n	801039e <pow+0xa2>
 8010326:	ec51 0b18 	vmov	r0, r1, d8
 801032a:	2200      	movs	r2, #0
 801032c:	2300      	movs	r3, #0
 801032e:	f7f0 fbdb 	bl	8000ae8 <__aeabi_dcmpeq>
 8010332:	b1b8      	cbz	r0, 8010364 <pow+0x68>
 8010334:	2200      	movs	r2, #0
 8010336:	2300      	movs	r3, #0
 8010338:	4620      	mov	r0, r4
 801033a:	4629      	mov	r1, r5
 801033c:	f7f0 fbd4 	bl	8000ae8 <__aeabi_dcmpeq>
 8010340:	2800      	cmp	r0, #0
 8010342:	d146      	bne.n	80103d2 <pow+0xd6>
 8010344:	ec45 4b10 	vmov	d0, r4, r5
 8010348:	f000 f922 	bl	8010590 <finite>
 801034c:	b338      	cbz	r0, 801039e <pow+0xa2>
 801034e:	2200      	movs	r2, #0
 8010350:	2300      	movs	r3, #0
 8010352:	4620      	mov	r0, r4
 8010354:	4629      	mov	r1, r5
 8010356:	f7f0 fbd1 	bl	8000afc <__aeabi_dcmplt>
 801035a:	b300      	cbz	r0, 801039e <pow+0xa2>
 801035c:	f002 feb2 	bl	80130c4 <__errno>
 8010360:	2322      	movs	r3, #34	; 0x22
 8010362:	e01b      	b.n	801039c <pow+0xa0>
 8010364:	ec47 6b10 	vmov	d0, r6, r7
 8010368:	f000 f912 	bl	8010590 <finite>
 801036c:	b9e0      	cbnz	r0, 80103a8 <pow+0xac>
 801036e:	eeb0 0a48 	vmov.f32	s0, s16
 8010372:	eef0 0a68 	vmov.f32	s1, s17
 8010376:	f000 f90b 	bl	8010590 <finite>
 801037a:	b1a8      	cbz	r0, 80103a8 <pow+0xac>
 801037c:	ec45 4b10 	vmov	d0, r4, r5
 8010380:	f000 f906 	bl	8010590 <finite>
 8010384:	b180      	cbz	r0, 80103a8 <pow+0xac>
 8010386:	4632      	mov	r2, r6
 8010388:	463b      	mov	r3, r7
 801038a:	4630      	mov	r0, r6
 801038c:	4639      	mov	r1, r7
 801038e:	f7f0 fbdd 	bl	8000b4c <__aeabi_dcmpun>
 8010392:	2800      	cmp	r0, #0
 8010394:	d0e2      	beq.n	801035c <pow+0x60>
 8010396:	f002 fe95 	bl	80130c4 <__errno>
 801039a:	2321      	movs	r3, #33	; 0x21
 801039c:	6003      	str	r3, [r0, #0]
 801039e:	ecbd 8b02 	vpop	{d8}
 80103a2:	ec47 6b10 	vmov	d0, r6, r7
 80103a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103a8:	2200      	movs	r2, #0
 80103aa:	2300      	movs	r3, #0
 80103ac:	4630      	mov	r0, r6
 80103ae:	4639      	mov	r1, r7
 80103b0:	f7f0 fb9a 	bl	8000ae8 <__aeabi_dcmpeq>
 80103b4:	2800      	cmp	r0, #0
 80103b6:	d0f2      	beq.n	801039e <pow+0xa2>
 80103b8:	eeb0 0a48 	vmov.f32	s0, s16
 80103bc:	eef0 0a68 	vmov.f32	s1, s17
 80103c0:	f000 f8e6 	bl	8010590 <finite>
 80103c4:	2800      	cmp	r0, #0
 80103c6:	d0ea      	beq.n	801039e <pow+0xa2>
 80103c8:	ec45 4b10 	vmov	d0, r4, r5
 80103cc:	f000 f8e0 	bl	8010590 <finite>
 80103d0:	e7c3      	b.n	801035a <pow+0x5e>
 80103d2:	4f01      	ldr	r7, [pc, #4]	; (80103d8 <pow+0xdc>)
 80103d4:	2600      	movs	r6, #0
 80103d6:	e7e2      	b.n	801039e <pow+0xa2>
 80103d8:	3ff00000 	.word	0x3ff00000

080103dc <sqrt>:
 80103dc:	b538      	push	{r3, r4, r5, lr}
 80103de:	ed2d 8b02 	vpush	{d8}
 80103e2:	ec55 4b10 	vmov	r4, r5, d0
 80103e6:	f000 f8df 	bl	80105a8 <__ieee754_sqrt>
 80103ea:	4622      	mov	r2, r4
 80103ec:	462b      	mov	r3, r5
 80103ee:	4620      	mov	r0, r4
 80103f0:	4629      	mov	r1, r5
 80103f2:	eeb0 8a40 	vmov.f32	s16, s0
 80103f6:	eef0 8a60 	vmov.f32	s17, s1
 80103fa:	f7f0 fba7 	bl	8000b4c <__aeabi_dcmpun>
 80103fe:	b990      	cbnz	r0, 8010426 <sqrt+0x4a>
 8010400:	2200      	movs	r2, #0
 8010402:	2300      	movs	r3, #0
 8010404:	4620      	mov	r0, r4
 8010406:	4629      	mov	r1, r5
 8010408:	f7f0 fb78 	bl	8000afc <__aeabi_dcmplt>
 801040c:	b158      	cbz	r0, 8010426 <sqrt+0x4a>
 801040e:	f002 fe59 	bl	80130c4 <__errno>
 8010412:	2321      	movs	r3, #33	; 0x21
 8010414:	6003      	str	r3, [r0, #0]
 8010416:	2200      	movs	r2, #0
 8010418:	2300      	movs	r3, #0
 801041a:	4610      	mov	r0, r2
 801041c:	4619      	mov	r1, r3
 801041e:	f7f0 fa25 	bl	800086c <__aeabi_ddiv>
 8010422:	ec41 0b18 	vmov	d8, r0, r1
 8010426:	eeb0 0a48 	vmov.f32	s0, s16
 801042a:	eef0 0a68 	vmov.f32	s1, s17
 801042e:	ecbd 8b02 	vpop	{d8}
 8010432:	bd38      	pop	{r3, r4, r5, pc}
 8010434:	0000      	movs	r0, r0
	...

08010438 <cos>:
 8010438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801043a:	ec53 2b10 	vmov	r2, r3, d0
 801043e:	4826      	ldr	r0, [pc, #152]	; (80104d8 <cos+0xa0>)
 8010440:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010444:	4281      	cmp	r1, r0
 8010446:	dc06      	bgt.n	8010456 <cos+0x1e>
 8010448:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80104d0 <cos+0x98>
 801044c:	b005      	add	sp, #20
 801044e:	f85d eb04 	ldr.w	lr, [sp], #4
 8010452:	f000 b985 	b.w	8010760 <__kernel_cos>
 8010456:	4821      	ldr	r0, [pc, #132]	; (80104dc <cos+0xa4>)
 8010458:	4281      	cmp	r1, r0
 801045a:	dd09      	ble.n	8010470 <cos+0x38>
 801045c:	ee10 0a10 	vmov	r0, s0
 8010460:	4619      	mov	r1, r3
 8010462:	f7ef ff21 	bl	80002a8 <__aeabi_dsub>
 8010466:	ec41 0b10 	vmov	d0, r0, r1
 801046a:	b005      	add	sp, #20
 801046c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010470:	4668      	mov	r0, sp
 8010472:	f001 f829 	bl	80114c8 <__ieee754_rem_pio2>
 8010476:	f000 0003 	and.w	r0, r0, #3
 801047a:	2801      	cmp	r0, #1
 801047c:	d00b      	beq.n	8010496 <cos+0x5e>
 801047e:	2802      	cmp	r0, #2
 8010480:	d016      	beq.n	80104b0 <cos+0x78>
 8010482:	b9e0      	cbnz	r0, 80104be <cos+0x86>
 8010484:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010488:	ed9d 0b00 	vldr	d0, [sp]
 801048c:	f000 f968 	bl	8010760 <__kernel_cos>
 8010490:	ec51 0b10 	vmov	r0, r1, d0
 8010494:	e7e7      	b.n	8010466 <cos+0x2e>
 8010496:	ed9d 1b02 	vldr	d1, [sp, #8]
 801049a:	ed9d 0b00 	vldr	d0, [sp]
 801049e:	f000 fa27 	bl	80108f0 <__kernel_sin>
 80104a2:	ec53 2b10 	vmov	r2, r3, d0
 80104a6:	ee10 0a10 	vmov	r0, s0
 80104aa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80104ae:	e7da      	b.n	8010466 <cos+0x2e>
 80104b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80104b4:	ed9d 0b00 	vldr	d0, [sp]
 80104b8:	f000 f952 	bl	8010760 <__kernel_cos>
 80104bc:	e7f1      	b.n	80104a2 <cos+0x6a>
 80104be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80104c2:	ed9d 0b00 	vldr	d0, [sp]
 80104c6:	2001      	movs	r0, #1
 80104c8:	f000 fa12 	bl	80108f0 <__kernel_sin>
 80104cc:	e7e0      	b.n	8010490 <cos+0x58>
 80104ce:	bf00      	nop
	...
 80104d8:	3fe921fb 	.word	0x3fe921fb
 80104dc:	7fefffff 	.word	0x7fefffff

080104e0 <sin>:
 80104e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80104e2:	ec53 2b10 	vmov	r2, r3, d0
 80104e6:	4828      	ldr	r0, [pc, #160]	; (8010588 <sin+0xa8>)
 80104e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80104ec:	4281      	cmp	r1, r0
 80104ee:	dc07      	bgt.n	8010500 <sin+0x20>
 80104f0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8010580 <sin+0xa0>
 80104f4:	2000      	movs	r0, #0
 80104f6:	b005      	add	sp, #20
 80104f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80104fc:	f000 b9f8 	b.w	80108f0 <__kernel_sin>
 8010500:	4822      	ldr	r0, [pc, #136]	; (801058c <sin+0xac>)
 8010502:	4281      	cmp	r1, r0
 8010504:	dd09      	ble.n	801051a <sin+0x3a>
 8010506:	ee10 0a10 	vmov	r0, s0
 801050a:	4619      	mov	r1, r3
 801050c:	f7ef fecc 	bl	80002a8 <__aeabi_dsub>
 8010510:	ec41 0b10 	vmov	d0, r0, r1
 8010514:	b005      	add	sp, #20
 8010516:	f85d fb04 	ldr.w	pc, [sp], #4
 801051a:	4668      	mov	r0, sp
 801051c:	f000 ffd4 	bl	80114c8 <__ieee754_rem_pio2>
 8010520:	f000 0003 	and.w	r0, r0, #3
 8010524:	2801      	cmp	r0, #1
 8010526:	d00c      	beq.n	8010542 <sin+0x62>
 8010528:	2802      	cmp	r0, #2
 801052a:	d011      	beq.n	8010550 <sin+0x70>
 801052c:	b9f0      	cbnz	r0, 801056c <sin+0x8c>
 801052e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010532:	ed9d 0b00 	vldr	d0, [sp]
 8010536:	2001      	movs	r0, #1
 8010538:	f000 f9da 	bl	80108f0 <__kernel_sin>
 801053c:	ec51 0b10 	vmov	r0, r1, d0
 8010540:	e7e6      	b.n	8010510 <sin+0x30>
 8010542:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010546:	ed9d 0b00 	vldr	d0, [sp]
 801054a:	f000 f909 	bl	8010760 <__kernel_cos>
 801054e:	e7f5      	b.n	801053c <sin+0x5c>
 8010550:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010554:	ed9d 0b00 	vldr	d0, [sp]
 8010558:	2001      	movs	r0, #1
 801055a:	f000 f9c9 	bl	80108f0 <__kernel_sin>
 801055e:	ec53 2b10 	vmov	r2, r3, d0
 8010562:	ee10 0a10 	vmov	r0, s0
 8010566:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801056a:	e7d1      	b.n	8010510 <sin+0x30>
 801056c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010570:	ed9d 0b00 	vldr	d0, [sp]
 8010574:	f000 f8f4 	bl	8010760 <__kernel_cos>
 8010578:	e7f1      	b.n	801055e <sin+0x7e>
 801057a:	bf00      	nop
 801057c:	f3af 8000 	nop.w
	...
 8010588:	3fe921fb 	.word	0x3fe921fb
 801058c:	7fefffff 	.word	0x7fefffff

08010590 <finite>:
 8010590:	b082      	sub	sp, #8
 8010592:	ed8d 0b00 	vstr	d0, [sp]
 8010596:	9801      	ldr	r0, [sp, #4]
 8010598:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801059c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80105a0:	0fc0      	lsrs	r0, r0, #31
 80105a2:	b002      	add	sp, #8
 80105a4:	4770      	bx	lr
	...

080105a8 <__ieee754_sqrt>:
 80105a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105ac:	ec55 4b10 	vmov	r4, r5, d0
 80105b0:	4e67      	ldr	r6, [pc, #412]	; (8010750 <__ieee754_sqrt+0x1a8>)
 80105b2:	43ae      	bics	r6, r5
 80105b4:	ee10 0a10 	vmov	r0, s0
 80105b8:	ee10 2a10 	vmov	r2, s0
 80105bc:	4629      	mov	r1, r5
 80105be:	462b      	mov	r3, r5
 80105c0:	d10d      	bne.n	80105de <__ieee754_sqrt+0x36>
 80105c2:	f7f0 f829 	bl	8000618 <__aeabi_dmul>
 80105c6:	4602      	mov	r2, r0
 80105c8:	460b      	mov	r3, r1
 80105ca:	4620      	mov	r0, r4
 80105cc:	4629      	mov	r1, r5
 80105ce:	f7ef fe6d 	bl	80002ac <__adddf3>
 80105d2:	4604      	mov	r4, r0
 80105d4:	460d      	mov	r5, r1
 80105d6:	ec45 4b10 	vmov	d0, r4, r5
 80105da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105de:	2d00      	cmp	r5, #0
 80105e0:	dc0b      	bgt.n	80105fa <__ieee754_sqrt+0x52>
 80105e2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80105e6:	4326      	orrs	r6, r4
 80105e8:	d0f5      	beq.n	80105d6 <__ieee754_sqrt+0x2e>
 80105ea:	b135      	cbz	r5, 80105fa <__ieee754_sqrt+0x52>
 80105ec:	f7ef fe5c 	bl	80002a8 <__aeabi_dsub>
 80105f0:	4602      	mov	r2, r0
 80105f2:	460b      	mov	r3, r1
 80105f4:	f7f0 f93a 	bl	800086c <__aeabi_ddiv>
 80105f8:	e7eb      	b.n	80105d2 <__ieee754_sqrt+0x2a>
 80105fa:	1509      	asrs	r1, r1, #20
 80105fc:	f000 808d 	beq.w	801071a <__ieee754_sqrt+0x172>
 8010600:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010604:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8010608:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801060c:	07c9      	lsls	r1, r1, #31
 801060e:	bf5c      	itt	pl
 8010610:	005b      	lslpl	r3, r3, #1
 8010612:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8010616:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801061a:	bf58      	it	pl
 801061c:	0052      	lslpl	r2, r2, #1
 801061e:	2500      	movs	r5, #0
 8010620:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8010624:	1076      	asrs	r6, r6, #1
 8010626:	0052      	lsls	r2, r2, #1
 8010628:	f04f 0e16 	mov.w	lr, #22
 801062c:	46ac      	mov	ip, r5
 801062e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010632:	eb0c 0001 	add.w	r0, ip, r1
 8010636:	4298      	cmp	r0, r3
 8010638:	bfde      	ittt	le
 801063a:	1a1b      	suble	r3, r3, r0
 801063c:	eb00 0c01 	addle.w	ip, r0, r1
 8010640:	186d      	addle	r5, r5, r1
 8010642:	005b      	lsls	r3, r3, #1
 8010644:	f1be 0e01 	subs.w	lr, lr, #1
 8010648:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801064c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8010650:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8010654:	d1ed      	bne.n	8010632 <__ieee754_sqrt+0x8a>
 8010656:	4674      	mov	r4, lr
 8010658:	2720      	movs	r7, #32
 801065a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801065e:	4563      	cmp	r3, ip
 8010660:	eb01 000e 	add.w	r0, r1, lr
 8010664:	dc02      	bgt.n	801066c <__ieee754_sqrt+0xc4>
 8010666:	d113      	bne.n	8010690 <__ieee754_sqrt+0xe8>
 8010668:	4290      	cmp	r0, r2
 801066a:	d811      	bhi.n	8010690 <__ieee754_sqrt+0xe8>
 801066c:	2800      	cmp	r0, #0
 801066e:	eb00 0e01 	add.w	lr, r0, r1
 8010672:	da57      	bge.n	8010724 <__ieee754_sqrt+0x17c>
 8010674:	f1be 0f00 	cmp.w	lr, #0
 8010678:	db54      	blt.n	8010724 <__ieee754_sqrt+0x17c>
 801067a:	f10c 0801 	add.w	r8, ip, #1
 801067e:	eba3 030c 	sub.w	r3, r3, ip
 8010682:	4290      	cmp	r0, r2
 8010684:	bf88      	it	hi
 8010686:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801068a:	1a12      	subs	r2, r2, r0
 801068c:	440c      	add	r4, r1
 801068e:	46c4      	mov	ip, r8
 8010690:	005b      	lsls	r3, r3, #1
 8010692:	3f01      	subs	r7, #1
 8010694:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8010698:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801069c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80106a0:	d1dd      	bne.n	801065e <__ieee754_sqrt+0xb6>
 80106a2:	4313      	orrs	r3, r2
 80106a4:	d01b      	beq.n	80106de <__ieee754_sqrt+0x136>
 80106a6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8010754 <__ieee754_sqrt+0x1ac>
 80106aa:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8010758 <__ieee754_sqrt+0x1b0>
 80106ae:	e9da 0100 	ldrd	r0, r1, [sl]
 80106b2:	e9db 2300 	ldrd	r2, r3, [fp]
 80106b6:	f7ef fdf7 	bl	80002a8 <__aeabi_dsub>
 80106ba:	e9da 8900 	ldrd	r8, r9, [sl]
 80106be:	4602      	mov	r2, r0
 80106c0:	460b      	mov	r3, r1
 80106c2:	4640      	mov	r0, r8
 80106c4:	4649      	mov	r1, r9
 80106c6:	f7f0 fa23 	bl	8000b10 <__aeabi_dcmple>
 80106ca:	b140      	cbz	r0, 80106de <__ieee754_sqrt+0x136>
 80106cc:	f1b4 3fff 	cmp.w	r4, #4294967295
 80106d0:	e9da 0100 	ldrd	r0, r1, [sl]
 80106d4:	e9db 2300 	ldrd	r2, r3, [fp]
 80106d8:	d126      	bne.n	8010728 <__ieee754_sqrt+0x180>
 80106da:	3501      	adds	r5, #1
 80106dc:	463c      	mov	r4, r7
 80106de:	106a      	asrs	r2, r5, #1
 80106e0:	0863      	lsrs	r3, r4, #1
 80106e2:	07e9      	lsls	r1, r5, #31
 80106e4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80106e8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80106ec:	bf48      	it	mi
 80106ee:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80106f2:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80106f6:	461c      	mov	r4, r3
 80106f8:	e76d      	b.n	80105d6 <__ieee754_sqrt+0x2e>
 80106fa:	0ad3      	lsrs	r3, r2, #11
 80106fc:	3815      	subs	r0, #21
 80106fe:	0552      	lsls	r2, r2, #21
 8010700:	2b00      	cmp	r3, #0
 8010702:	d0fa      	beq.n	80106fa <__ieee754_sqrt+0x152>
 8010704:	02dc      	lsls	r4, r3, #11
 8010706:	d50a      	bpl.n	801071e <__ieee754_sqrt+0x176>
 8010708:	f1c1 0420 	rsb	r4, r1, #32
 801070c:	fa22 f404 	lsr.w	r4, r2, r4
 8010710:	1e4d      	subs	r5, r1, #1
 8010712:	408a      	lsls	r2, r1
 8010714:	4323      	orrs	r3, r4
 8010716:	1b41      	subs	r1, r0, r5
 8010718:	e772      	b.n	8010600 <__ieee754_sqrt+0x58>
 801071a:	4608      	mov	r0, r1
 801071c:	e7f0      	b.n	8010700 <__ieee754_sqrt+0x158>
 801071e:	005b      	lsls	r3, r3, #1
 8010720:	3101      	adds	r1, #1
 8010722:	e7ef      	b.n	8010704 <__ieee754_sqrt+0x15c>
 8010724:	46e0      	mov	r8, ip
 8010726:	e7aa      	b.n	801067e <__ieee754_sqrt+0xd6>
 8010728:	f7ef fdc0 	bl	80002ac <__adddf3>
 801072c:	e9da 8900 	ldrd	r8, r9, [sl]
 8010730:	4602      	mov	r2, r0
 8010732:	460b      	mov	r3, r1
 8010734:	4640      	mov	r0, r8
 8010736:	4649      	mov	r1, r9
 8010738:	f7f0 f9e0 	bl	8000afc <__aeabi_dcmplt>
 801073c:	b120      	cbz	r0, 8010748 <__ieee754_sqrt+0x1a0>
 801073e:	1ca0      	adds	r0, r4, #2
 8010740:	bf08      	it	eq
 8010742:	3501      	addeq	r5, #1
 8010744:	3402      	adds	r4, #2
 8010746:	e7ca      	b.n	80106de <__ieee754_sqrt+0x136>
 8010748:	3401      	adds	r4, #1
 801074a:	f024 0401 	bic.w	r4, r4, #1
 801074e:	e7c6      	b.n	80106de <__ieee754_sqrt+0x136>
 8010750:	7ff00000 	.word	0x7ff00000
 8010754:	20000020 	.word	0x20000020
 8010758:	20000028 	.word	0x20000028
 801075c:	00000000 	.word	0x00000000

08010760 <__kernel_cos>:
 8010760:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010764:	ec57 6b10 	vmov	r6, r7, d0
 8010768:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801076c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8010770:	ed8d 1b00 	vstr	d1, [sp]
 8010774:	da07      	bge.n	8010786 <__kernel_cos+0x26>
 8010776:	ee10 0a10 	vmov	r0, s0
 801077a:	4639      	mov	r1, r7
 801077c:	f7f0 f9fc 	bl	8000b78 <__aeabi_d2iz>
 8010780:	2800      	cmp	r0, #0
 8010782:	f000 8088 	beq.w	8010896 <__kernel_cos+0x136>
 8010786:	4632      	mov	r2, r6
 8010788:	463b      	mov	r3, r7
 801078a:	4630      	mov	r0, r6
 801078c:	4639      	mov	r1, r7
 801078e:	f7ef ff43 	bl	8000618 <__aeabi_dmul>
 8010792:	4b51      	ldr	r3, [pc, #324]	; (80108d8 <__kernel_cos+0x178>)
 8010794:	2200      	movs	r2, #0
 8010796:	4604      	mov	r4, r0
 8010798:	460d      	mov	r5, r1
 801079a:	f7ef ff3d 	bl	8000618 <__aeabi_dmul>
 801079e:	a340      	add	r3, pc, #256	; (adr r3, 80108a0 <__kernel_cos+0x140>)
 80107a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107a4:	4682      	mov	sl, r0
 80107a6:	468b      	mov	fp, r1
 80107a8:	4620      	mov	r0, r4
 80107aa:	4629      	mov	r1, r5
 80107ac:	f7ef ff34 	bl	8000618 <__aeabi_dmul>
 80107b0:	a33d      	add	r3, pc, #244	; (adr r3, 80108a8 <__kernel_cos+0x148>)
 80107b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107b6:	f7ef fd79 	bl	80002ac <__adddf3>
 80107ba:	4622      	mov	r2, r4
 80107bc:	462b      	mov	r3, r5
 80107be:	f7ef ff2b 	bl	8000618 <__aeabi_dmul>
 80107c2:	a33b      	add	r3, pc, #236	; (adr r3, 80108b0 <__kernel_cos+0x150>)
 80107c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107c8:	f7ef fd6e 	bl	80002a8 <__aeabi_dsub>
 80107cc:	4622      	mov	r2, r4
 80107ce:	462b      	mov	r3, r5
 80107d0:	f7ef ff22 	bl	8000618 <__aeabi_dmul>
 80107d4:	a338      	add	r3, pc, #224	; (adr r3, 80108b8 <__kernel_cos+0x158>)
 80107d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107da:	f7ef fd67 	bl	80002ac <__adddf3>
 80107de:	4622      	mov	r2, r4
 80107e0:	462b      	mov	r3, r5
 80107e2:	f7ef ff19 	bl	8000618 <__aeabi_dmul>
 80107e6:	a336      	add	r3, pc, #216	; (adr r3, 80108c0 <__kernel_cos+0x160>)
 80107e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107ec:	f7ef fd5c 	bl	80002a8 <__aeabi_dsub>
 80107f0:	4622      	mov	r2, r4
 80107f2:	462b      	mov	r3, r5
 80107f4:	f7ef ff10 	bl	8000618 <__aeabi_dmul>
 80107f8:	a333      	add	r3, pc, #204	; (adr r3, 80108c8 <__kernel_cos+0x168>)
 80107fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107fe:	f7ef fd55 	bl	80002ac <__adddf3>
 8010802:	4622      	mov	r2, r4
 8010804:	462b      	mov	r3, r5
 8010806:	f7ef ff07 	bl	8000618 <__aeabi_dmul>
 801080a:	4622      	mov	r2, r4
 801080c:	462b      	mov	r3, r5
 801080e:	f7ef ff03 	bl	8000618 <__aeabi_dmul>
 8010812:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010816:	4604      	mov	r4, r0
 8010818:	460d      	mov	r5, r1
 801081a:	4630      	mov	r0, r6
 801081c:	4639      	mov	r1, r7
 801081e:	f7ef fefb 	bl	8000618 <__aeabi_dmul>
 8010822:	460b      	mov	r3, r1
 8010824:	4602      	mov	r2, r0
 8010826:	4629      	mov	r1, r5
 8010828:	4620      	mov	r0, r4
 801082a:	f7ef fd3d 	bl	80002a8 <__aeabi_dsub>
 801082e:	4b2b      	ldr	r3, [pc, #172]	; (80108dc <__kernel_cos+0x17c>)
 8010830:	4598      	cmp	r8, r3
 8010832:	4606      	mov	r6, r0
 8010834:	460f      	mov	r7, r1
 8010836:	dc10      	bgt.n	801085a <__kernel_cos+0xfa>
 8010838:	4602      	mov	r2, r0
 801083a:	460b      	mov	r3, r1
 801083c:	4650      	mov	r0, sl
 801083e:	4659      	mov	r1, fp
 8010840:	f7ef fd32 	bl	80002a8 <__aeabi_dsub>
 8010844:	460b      	mov	r3, r1
 8010846:	4926      	ldr	r1, [pc, #152]	; (80108e0 <__kernel_cos+0x180>)
 8010848:	4602      	mov	r2, r0
 801084a:	2000      	movs	r0, #0
 801084c:	f7ef fd2c 	bl	80002a8 <__aeabi_dsub>
 8010850:	ec41 0b10 	vmov	d0, r0, r1
 8010854:	b003      	add	sp, #12
 8010856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801085a:	4b22      	ldr	r3, [pc, #136]	; (80108e4 <__kernel_cos+0x184>)
 801085c:	4920      	ldr	r1, [pc, #128]	; (80108e0 <__kernel_cos+0x180>)
 801085e:	4598      	cmp	r8, r3
 8010860:	bfcc      	ite	gt
 8010862:	4d21      	ldrgt	r5, [pc, #132]	; (80108e8 <__kernel_cos+0x188>)
 8010864:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8010868:	2400      	movs	r4, #0
 801086a:	4622      	mov	r2, r4
 801086c:	462b      	mov	r3, r5
 801086e:	2000      	movs	r0, #0
 8010870:	f7ef fd1a 	bl	80002a8 <__aeabi_dsub>
 8010874:	4622      	mov	r2, r4
 8010876:	4680      	mov	r8, r0
 8010878:	4689      	mov	r9, r1
 801087a:	462b      	mov	r3, r5
 801087c:	4650      	mov	r0, sl
 801087e:	4659      	mov	r1, fp
 8010880:	f7ef fd12 	bl	80002a8 <__aeabi_dsub>
 8010884:	4632      	mov	r2, r6
 8010886:	463b      	mov	r3, r7
 8010888:	f7ef fd0e 	bl	80002a8 <__aeabi_dsub>
 801088c:	4602      	mov	r2, r0
 801088e:	460b      	mov	r3, r1
 8010890:	4640      	mov	r0, r8
 8010892:	4649      	mov	r1, r9
 8010894:	e7da      	b.n	801084c <__kernel_cos+0xec>
 8010896:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80108d0 <__kernel_cos+0x170>
 801089a:	e7db      	b.n	8010854 <__kernel_cos+0xf4>
 801089c:	f3af 8000 	nop.w
 80108a0:	be8838d4 	.word	0xbe8838d4
 80108a4:	bda8fae9 	.word	0xbda8fae9
 80108a8:	bdb4b1c4 	.word	0xbdb4b1c4
 80108ac:	3e21ee9e 	.word	0x3e21ee9e
 80108b0:	809c52ad 	.word	0x809c52ad
 80108b4:	3e927e4f 	.word	0x3e927e4f
 80108b8:	19cb1590 	.word	0x19cb1590
 80108bc:	3efa01a0 	.word	0x3efa01a0
 80108c0:	16c15177 	.word	0x16c15177
 80108c4:	3f56c16c 	.word	0x3f56c16c
 80108c8:	5555554c 	.word	0x5555554c
 80108cc:	3fa55555 	.word	0x3fa55555
 80108d0:	00000000 	.word	0x00000000
 80108d4:	3ff00000 	.word	0x3ff00000
 80108d8:	3fe00000 	.word	0x3fe00000
 80108dc:	3fd33332 	.word	0x3fd33332
 80108e0:	3ff00000 	.word	0x3ff00000
 80108e4:	3fe90000 	.word	0x3fe90000
 80108e8:	3fd20000 	.word	0x3fd20000
 80108ec:	00000000 	.word	0x00000000

080108f0 <__kernel_sin>:
 80108f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108f4:	ed2d 8b04 	vpush	{d8-d9}
 80108f8:	eeb0 8a41 	vmov.f32	s16, s2
 80108fc:	eef0 8a61 	vmov.f32	s17, s3
 8010900:	ec55 4b10 	vmov	r4, r5, d0
 8010904:	b083      	sub	sp, #12
 8010906:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801090a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801090e:	9001      	str	r0, [sp, #4]
 8010910:	da06      	bge.n	8010920 <__kernel_sin+0x30>
 8010912:	ee10 0a10 	vmov	r0, s0
 8010916:	4629      	mov	r1, r5
 8010918:	f7f0 f92e 	bl	8000b78 <__aeabi_d2iz>
 801091c:	2800      	cmp	r0, #0
 801091e:	d051      	beq.n	80109c4 <__kernel_sin+0xd4>
 8010920:	4622      	mov	r2, r4
 8010922:	462b      	mov	r3, r5
 8010924:	4620      	mov	r0, r4
 8010926:	4629      	mov	r1, r5
 8010928:	f7ef fe76 	bl	8000618 <__aeabi_dmul>
 801092c:	4682      	mov	sl, r0
 801092e:	468b      	mov	fp, r1
 8010930:	4602      	mov	r2, r0
 8010932:	460b      	mov	r3, r1
 8010934:	4620      	mov	r0, r4
 8010936:	4629      	mov	r1, r5
 8010938:	f7ef fe6e 	bl	8000618 <__aeabi_dmul>
 801093c:	a341      	add	r3, pc, #260	; (adr r3, 8010a44 <__kernel_sin+0x154>)
 801093e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010942:	4680      	mov	r8, r0
 8010944:	4689      	mov	r9, r1
 8010946:	4650      	mov	r0, sl
 8010948:	4659      	mov	r1, fp
 801094a:	f7ef fe65 	bl	8000618 <__aeabi_dmul>
 801094e:	a33f      	add	r3, pc, #252	; (adr r3, 8010a4c <__kernel_sin+0x15c>)
 8010950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010954:	f7ef fca8 	bl	80002a8 <__aeabi_dsub>
 8010958:	4652      	mov	r2, sl
 801095a:	465b      	mov	r3, fp
 801095c:	f7ef fe5c 	bl	8000618 <__aeabi_dmul>
 8010960:	a33c      	add	r3, pc, #240	; (adr r3, 8010a54 <__kernel_sin+0x164>)
 8010962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010966:	f7ef fca1 	bl	80002ac <__adddf3>
 801096a:	4652      	mov	r2, sl
 801096c:	465b      	mov	r3, fp
 801096e:	f7ef fe53 	bl	8000618 <__aeabi_dmul>
 8010972:	a33a      	add	r3, pc, #232	; (adr r3, 8010a5c <__kernel_sin+0x16c>)
 8010974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010978:	f7ef fc96 	bl	80002a8 <__aeabi_dsub>
 801097c:	4652      	mov	r2, sl
 801097e:	465b      	mov	r3, fp
 8010980:	f7ef fe4a 	bl	8000618 <__aeabi_dmul>
 8010984:	a337      	add	r3, pc, #220	; (adr r3, 8010a64 <__kernel_sin+0x174>)
 8010986:	e9d3 2300 	ldrd	r2, r3, [r3]
 801098a:	f7ef fc8f 	bl	80002ac <__adddf3>
 801098e:	9b01      	ldr	r3, [sp, #4]
 8010990:	4606      	mov	r6, r0
 8010992:	460f      	mov	r7, r1
 8010994:	b9eb      	cbnz	r3, 80109d2 <__kernel_sin+0xe2>
 8010996:	4602      	mov	r2, r0
 8010998:	460b      	mov	r3, r1
 801099a:	4650      	mov	r0, sl
 801099c:	4659      	mov	r1, fp
 801099e:	f7ef fe3b 	bl	8000618 <__aeabi_dmul>
 80109a2:	a325      	add	r3, pc, #148	; (adr r3, 8010a38 <__kernel_sin+0x148>)
 80109a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109a8:	f7ef fc7e 	bl	80002a8 <__aeabi_dsub>
 80109ac:	4642      	mov	r2, r8
 80109ae:	464b      	mov	r3, r9
 80109b0:	f7ef fe32 	bl	8000618 <__aeabi_dmul>
 80109b4:	4602      	mov	r2, r0
 80109b6:	460b      	mov	r3, r1
 80109b8:	4620      	mov	r0, r4
 80109ba:	4629      	mov	r1, r5
 80109bc:	f7ef fc76 	bl	80002ac <__adddf3>
 80109c0:	4604      	mov	r4, r0
 80109c2:	460d      	mov	r5, r1
 80109c4:	ec45 4b10 	vmov	d0, r4, r5
 80109c8:	b003      	add	sp, #12
 80109ca:	ecbd 8b04 	vpop	{d8-d9}
 80109ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109d2:	4b1b      	ldr	r3, [pc, #108]	; (8010a40 <__kernel_sin+0x150>)
 80109d4:	ec51 0b18 	vmov	r0, r1, d8
 80109d8:	2200      	movs	r2, #0
 80109da:	f7ef fe1d 	bl	8000618 <__aeabi_dmul>
 80109de:	4632      	mov	r2, r6
 80109e0:	ec41 0b19 	vmov	d9, r0, r1
 80109e4:	463b      	mov	r3, r7
 80109e6:	4640      	mov	r0, r8
 80109e8:	4649      	mov	r1, r9
 80109ea:	f7ef fe15 	bl	8000618 <__aeabi_dmul>
 80109ee:	4602      	mov	r2, r0
 80109f0:	460b      	mov	r3, r1
 80109f2:	ec51 0b19 	vmov	r0, r1, d9
 80109f6:	f7ef fc57 	bl	80002a8 <__aeabi_dsub>
 80109fa:	4652      	mov	r2, sl
 80109fc:	465b      	mov	r3, fp
 80109fe:	f7ef fe0b 	bl	8000618 <__aeabi_dmul>
 8010a02:	ec53 2b18 	vmov	r2, r3, d8
 8010a06:	f7ef fc4f 	bl	80002a8 <__aeabi_dsub>
 8010a0a:	a30b      	add	r3, pc, #44	; (adr r3, 8010a38 <__kernel_sin+0x148>)
 8010a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a10:	4606      	mov	r6, r0
 8010a12:	460f      	mov	r7, r1
 8010a14:	4640      	mov	r0, r8
 8010a16:	4649      	mov	r1, r9
 8010a18:	f7ef fdfe 	bl	8000618 <__aeabi_dmul>
 8010a1c:	4602      	mov	r2, r0
 8010a1e:	460b      	mov	r3, r1
 8010a20:	4630      	mov	r0, r6
 8010a22:	4639      	mov	r1, r7
 8010a24:	f7ef fc42 	bl	80002ac <__adddf3>
 8010a28:	4602      	mov	r2, r0
 8010a2a:	460b      	mov	r3, r1
 8010a2c:	4620      	mov	r0, r4
 8010a2e:	4629      	mov	r1, r5
 8010a30:	f7ef fc3a 	bl	80002a8 <__aeabi_dsub>
 8010a34:	e7c4      	b.n	80109c0 <__kernel_sin+0xd0>
 8010a36:	bf00      	nop
 8010a38:	55555549 	.word	0x55555549
 8010a3c:	3fc55555 	.word	0x3fc55555
 8010a40:	3fe00000 	.word	0x3fe00000
 8010a44:	5acfd57c 	.word	0x5acfd57c
 8010a48:	3de5d93a 	.word	0x3de5d93a
 8010a4c:	8a2b9ceb 	.word	0x8a2b9ceb
 8010a50:	3e5ae5e6 	.word	0x3e5ae5e6
 8010a54:	57b1fe7d 	.word	0x57b1fe7d
 8010a58:	3ec71de3 	.word	0x3ec71de3
 8010a5c:	19c161d5 	.word	0x19c161d5
 8010a60:	3f2a01a0 	.word	0x3f2a01a0
 8010a64:	1110f8a6 	.word	0x1110f8a6
 8010a68:	3f811111 	.word	0x3f811111
 8010a6c:	00000000 	.word	0x00000000

08010a70 <__ieee754_pow>:
 8010a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a74:	ed2d 8b06 	vpush	{d8-d10}
 8010a78:	b089      	sub	sp, #36	; 0x24
 8010a7a:	ed8d 1b00 	vstr	d1, [sp]
 8010a7e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8010a82:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8010a86:	ea58 0102 	orrs.w	r1, r8, r2
 8010a8a:	ec57 6b10 	vmov	r6, r7, d0
 8010a8e:	d115      	bne.n	8010abc <__ieee754_pow+0x4c>
 8010a90:	19b3      	adds	r3, r6, r6
 8010a92:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8010a96:	4152      	adcs	r2, r2
 8010a98:	4299      	cmp	r1, r3
 8010a9a:	4b89      	ldr	r3, [pc, #548]	; (8010cc0 <__ieee754_pow+0x250>)
 8010a9c:	4193      	sbcs	r3, r2
 8010a9e:	f080 84d1 	bcs.w	8011444 <__ieee754_pow+0x9d4>
 8010aa2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010aa6:	4630      	mov	r0, r6
 8010aa8:	4639      	mov	r1, r7
 8010aaa:	f7ef fbff 	bl	80002ac <__adddf3>
 8010aae:	ec41 0b10 	vmov	d0, r0, r1
 8010ab2:	b009      	add	sp, #36	; 0x24
 8010ab4:	ecbd 8b06 	vpop	{d8-d10}
 8010ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010abc:	4b81      	ldr	r3, [pc, #516]	; (8010cc4 <__ieee754_pow+0x254>)
 8010abe:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8010ac2:	429c      	cmp	r4, r3
 8010ac4:	ee10 aa10 	vmov	sl, s0
 8010ac8:	463d      	mov	r5, r7
 8010aca:	dc06      	bgt.n	8010ada <__ieee754_pow+0x6a>
 8010acc:	d101      	bne.n	8010ad2 <__ieee754_pow+0x62>
 8010ace:	2e00      	cmp	r6, #0
 8010ad0:	d1e7      	bne.n	8010aa2 <__ieee754_pow+0x32>
 8010ad2:	4598      	cmp	r8, r3
 8010ad4:	dc01      	bgt.n	8010ada <__ieee754_pow+0x6a>
 8010ad6:	d10f      	bne.n	8010af8 <__ieee754_pow+0x88>
 8010ad8:	b172      	cbz	r2, 8010af8 <__ieee754_pow+0x88>
 8010ada:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8010ade:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8010ae2:	ea55 050a 	orrs.w	r5, r5, sl
 8010ae6:	d1dc      	bne.n	8010aa2 <__ieee754_pow+0x32>
 8010ae8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010aec:	18db      	adds	r3, r3, r3
 8010aee:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8010af2:	4152      	adcs	r2, r2
 8010af4:	429d      	cmp	r5, r3
 8010af6:	e7d0      	b.n	8010a9a <__ieee754_pow+0x2a>
 8010af8:	2d00      	cmp	r5, #0
 8010afa:	da3b      	bge.n	8010b74 <__ieee754_pow+0x104>
 8010afc:	4b72      	ldr	r3, [pc, #456]	; (8010cc8 <__ieee754_pow+0x258>)
 8010afe:	4598      	cmp	r8, r3
 8010b00:	dc51      	bgt.n	8010ba6 <__ieee754_pow+0x136>
 8010b02:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8010b06:	4598      	cmp	r8, r3
 8010b08:	f340 84ab 	ble.w	8011462 <__ieee754_pow+0x9f2>
 8010b0c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010b10:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010b14:	2b14      	cmp	r3, #20
 8010b16:	dd0f      	ble.n	8010b38 <__ieee754_pow+0xc8>
 8010b18:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8010b1c:	fa22 f103 	lsr.w	r1, r2, r3
 8010b20:	fa01 f303 	lsl.w	r3, r1, r3
 8010b24:	4293      	cmp	r3, r2
 8010b26:	f040 849c 	bne.w	8011462 <__ieee754_pow+0x9f2>
 8010b2a:	f001 0101 	and.w	r1, r1, #1
 8010b2e:	f1c1 0302 	rsb	r3, r1, #2
 8010b32:	9304      	str	r3, [sp, #16]
 8010b34:	b182      	cbz	r2, 8010b58 <__ieee754_pow+0xe8>
 8010b36:	e05f      	b.n	8010bf8 <__ieee754_pow+0x188>
 8010b38:	2a00      	cmp	r2, #0
 8010b3a:	d15b      	bne.n	8010bf4 <__ieee754_pow+0x184>
 8010b3c:	f1c3 0314 	rsb	r3, r3, #20
 8010b40:	fa48 f103 	asr.w	r1, r8, r3
 8010b44:	fa01 f303 	lsl.w	r3, r1, r3
 8010b48:	4543      	cmp	r3, r8
 8010b4a:	f040 8487 	bne.w	801145c <__ieee754_pow+0x9ec>
 8010b4e:	f001 0101 	and.w	r1, r1, #1
 8010b52:	f1c1 0302 	rsb	r3, r1, #2
 8010b56:	9304      	str	r3, [sp, #16]
 8010b58:	4b5c      	ldr	r3, [pc, #368]	; (8010ccc <__ieee754_pow+0x25c>)
 8010b5a:	4598      	cmp	r8, r3
 8010b5c:	d132      	bne.n	8010bc4 <__ieee754_pow+0x154>
 8010b5e:	f1b9 0f00 	cmp.w	r9, #0
 8010b62:	f280 8477 	bge.w	8011454 <__ieee754_pow+0x9e4>
 8010b66:	4959      	ldr	r1, [pc, #356]	; (8010ccc <__ieee754_pow+0x25c>)
 8010b68:	4632      	mov	r2, r6
 8010b6a:	463b      	mov	r3, r7
 8010b6c:	2000      	movs	r0, #0
 8010b6e:	f7ef fe7d 	bl	800086c <__aeabi_ddiv>
 8010b72:	e79c      	b.n	8010aae <__ieee754_pow+0x3e>
 8010b74:	2300      	movs	r3, #0
 8010b76:	9304      	str	r3, [sp, #16]
 8010b78:	2a00      	cmp	r2, #0
 8010b7a:	d13d      	bne.n	8010bf8 <__ieee754_pow+0x188>
 8010b7c:	4b51      	ldr	r3, [pc, #324]	; (8010cc4 <__ieee754_pow+0x254>)
 8010b7e:	4598      	cmp	r8, r3
 8010b80:	d1ea      	bne.n	8010b58 <__ieee754_pow+0xe8>
 8010b82:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010b86:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010b8a:	ea53 030a 	orrs.w	r3, r3, sl
 8010b8e:	f000 8459 	beq.w	8011444 <__ieee754_pow+0x9d4>
 8010b92:	4b4f      	ldr	r3, [pc, #316]	; (8010cd0 <__ieee754_pow+0x260>)
 8010b94:	429c      	cmp	r4, r3
 8010b96:	dd08      	ble.n	8010baa <__ieee754_pow+0x13a>
 8010b98:	f1b9 0f00 	cmp.w	r9, #0
 8010b9c:	f2c0 8456 	blt.w	801144c <__ieee754_pow+0x9dc>
 8010ba0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010ba4:	e783      	b.n	8010aae <__ieee754_pow+0x3e>
 8010ba6:	2302      	movs	r3, #2
 8010ba8:	e7e5      	b.n	8010b76 <__ieee754_pow+0x106>
 8010baa:	f1b9 0f00 	cmp.w	r9, #0
 8010bae:	f04f 0000 	mov.w	r0, #0
 8010bb2:	f04f 0100 	mov.w	r1, #0
 8010bb6:	f6bf af7a 	bge.w	8010aae <__ieee754_pow+0x3e>
 8010bba:	e9dd 0300 	ldrd	r0, r3, [sp]
 8010bbe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010bc2:	e774      	b.n	8010aae <__ieee754_pow+0x3e>
 8010bc4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8010bc8:	d106      	bne.n	8010bd8 <__ieee754_pow+0x168>
 8010bca:	4632      	mov	r2, r6
 8010bcc:	463b      	mov	r3, r7
 8010bce:	4630      	mov	r0, r6
 8010bd0:	4639      	mov	r1, r7
 8010bd2:	f7ef fd21 	bl	8000618 <__aeabi_dmul>
 8010bd6:	e76a      	b.n	8010aae <__ieee754_pow+0x3e>
 8010bd8:	4b3e      	ldr	r3, [pc, #248]	; (8010cd4 <__ieee754_pow+0x264>)
 8010bda:	4599      	cmp	r9, r3
 8010bdc:	d10c      	bne.n	8010bf8 <__ieee754_pow+0x188>
 8010bde:	2d00      	cmp	r5, #0
 8010be0:	db0a      	blt.n	8010bf8 <__ieee754_pow+0x188>
 8010be2:	ec47 6b10 	vmov	d0, r6, r7
 8010be6:	b009      	add	sp, #36	; 0x24
 8010be8:	ecbd 8b06 	vpop	{d8-d10}
 8010bec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bf0:	f7ff bcda 	b.w	80105a8 <__ieee754_sqrt>
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	9304      	str	r3, [sp, #16]
 8010bf8:	ec47 6b10 	vmov	d0, r6, r7
 8010bfc:	f000 fe6a 	bl	80118d4 <fabs>
 8010c00:	ec51 0b10 	vmov	r0, r1, d0
 8010c04:	f1ba 0f00 	cmp.w	sl, #0
 8010c08:	d129      	bne.n	8010c5e <__ieee754_pow+0x1ee>
 8010c0a:	b124      	cbz	r4, 8010c16 <__ieee754_pow+0x1a6>
 8010c0c:	4b2f      	ldr	r3, [pc, #188]	; (8010ccc <__ieee754_pow+0x25c>)
 8010c0e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8010c12:	429a      	cmp	r2, r3
 8010c14:	d123      	bne.n	8010c5e <__ieee754_pow+0x1ee>
 8010c16:	f1b9 0f00 	cmp.w	r9, #0
 8010c1a:	da05      	bge.n	8010c28 <__ieee754_pow+0x1b8>
 8010c1c:	4602      	mov	r2, r0
 8010c1e:	460b      	mov	r3, r1
 8010c20:	2000      	movs	r0, #0
 8010c22:	492a      	ldr	r1, [pc, #168]	; (8010ccc <__ieee754_pow+0x25c>)
 8010c24:	f7ef fe22 	bl	800086c <__aeabi_ddiv>
 8010c28:	2d00      	cmp	r5, #0
 8010c2a:	f6bf af40 	bge.w	8010aae <__ieee754_pow+0x3e>
 8010c2e:	9b04      	ldr	r3, [sp, #16]
 8010c30:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010c34:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010c38:	431c      	orrs	r4, r3
 8010c3a:	d108      	bne.n	8010c4e <__ieee754_pow+0x1de>
 8010c3c:	4602      	mov	r2, r0
 8010c3e:	460b      	mov	r3, r1
 8010c40:	4610      	mov	r0, r2
 8010c42:	4619      	mov	r1, r3
 8010c44:	f7ef fb30 	bl	80002a8 <__aeabi_dsub>
 8010c48:	4602      	mov	r2, r0
 8010c4a:	460b      	mov	r3, r1
 8010c4c:	e78f      	b.n	8010b6e <__ieee754_pow+0xfe>
 8010c4e:	9b04      	ldr	r3, [sp, #16]
 8010c50:	2b01      	cmp	r3, #1
 8010c52:	f47f af2c 	bne.w	8010aae <__ieee754_pow+0x3e>
 8010c56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010c5a:	4619      	mov	r1, r3
 8010c5c:	e727      	b.n	8010aae <__ieee754_pow+0x3e>
 8010c5e:	0feb      	lsrs	r3, r5, #31
 8010c60:	3b01      	subs	r3, #1
 8010c62:	9306      	str	r3, [sp, #24]
 8010c64:	9a06      	ldr	r2, [sp, #24]
 8010c66:	9b04      	ldr	r3, [sp, #16]
 8010c68:	4313      	orrs	r3, r2
 8010c6a:	d102      	bne.n	8010c72 <__ieee754_pow+0x202>
 8010c6c:	4632      	mov	r2, r6
 8010c6e:	463b      	mov	r3, r7
 8010c70:	e7e6      	b.n	8010c40 <__ieee754_pow+0x1d0>
 8010c72:	4b19      	ldr	r3, [pc, #100]	; (8010cd8 <__ieee754_pow+0x268>)
 8010c74:	4598      	cmp	r8, r3
 8010c76:	f340 80fb 	ble.w	8010e70 <__ieee754_pow+0x400>
 8010c7a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8010c7e:	4598      	cmp	r8, r3
 8010c80:	4b13      	ldr	r3, [pc, #76]	; (8010cd0 <__ieee754_pow+0x260>)
 8010c82:	dd0c      	ble.n	8010c9e <__ieee754_pow+0x22e>
 8010c84:	429c      	cmp	r4, r3
 8010c86:	dc0f      	bgt.n	8010ca8 <__ieee754_pow+0x238>
 8010c88:	f1b9 0f00 	cmp.w	r9, #0
 8010c8c:	da0f      	bge.n	8010cae <__ieee754_pow+0x23e>
 8010c8e:	2000      	movs	r0, #0
 8010c90:	b009      	add	sp, #36	; 0x24
 8010c92:	ecbd 8b06 	vpop	{d8-d10}
 8010c96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c9a:	f000 beca 	b.w	8011a32 <__math_oflow>
 8010c9e:	429c      	cmp	r4, r3
 8010ca0:	dbf2      	blt.n	8010c88 <__ieee754_pow+0x218>
 8010ca2:	4b0a      	ldr	r3, [pc, #40]	; (8010ccc <__ieee754_pow+0x25c>)
 8010ca4:	429c      	cmp	r4, r3
 8010ca6:	dd19      	ble.n	8010cdc <__ieee754_pow+0x26c>
 8010ca8:	f1b9 0f00 	cmp.w	r9, #0
 8010cac:	dcef      	bgt.n	8010c8e <__ieee754_pow+0x21e>
 8010cae:	2000      	movs	r0, #0
 8010cb0:	b009      	add	sp, #36	; 0x24
 8010cb2:	ecbd 8b06 	vpop	{d8-d10}
 8010cb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cba:	f000 beb1 	b.w	8011a20 <__math_uflow>
 8010cbe:	bf00      	nop
 8010cc0:	fff00000 	.word	0xfff00000
 8010cc4:	7ff00000 	.word	0x7ff00000
 8010cc8:	433fffff 	.word	0x433fffff
 8010ccc:	3ff00000 	.word	0x3ff00000
 8010cd0:	3fefffff 	.word	0x3fefffff
 8010cd4:	3fe00000 	.word	0x3fe00000
 8010cd8:	41e00000 	.word	0x41e00000
 8010cdc:	4b60      	ldr	r3, [pc, #384]	; (8010e60 <__ieee754_pow+0x3f0>)
 8010cde:	2200      	movs	r2, #0
 8010ce0:	f7ef fae2 	bl	80002a8 <__aeabi_dsub>
 8010ce4:	a354      	add	r3, pc, #336	; (adr r3, 8010e38 <__ieee754_pow+0x3c8>)
 8010ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cea:	4604      	mov	r4, r0
 8010cec:	460d      	mov	r5, r1
 8010cee:	f7ef fc93 	bl	8000618 <__aeabi_dmul>
 8010cf2:	a353      	add	r3, pc, #332	; (adr r3, 8010e40 <__ieee754_pow+0x3d0>)
 8010cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cf8:	4606      	mov	r6, r0
 8010cfa:	460f      	mov	r7, r1
 8010cfc:	4620      	mov	r0, r4
 8010cfe:	4629      	mov	r1, r5
 8010d00:	f7ef fc8a 	bl	8000618 <__aeabi_dmul>
 8010d04:	4b57      	ldr	r3, [pc, #348]	; (8010e64 <__ieee754_pow+0x3f4>)
 8010d06:	4682      	mov	sl, r0
 8010d08:	468b      	mov	fp, r1
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	4620      	mov	r0, r4
 8010d0e:	4629      	mov	r1, r5
 8010d10:	f7ef fc82 	bl	8000618 <__aeabi_dmul>
 8010d14:	4602      	mov	r2, r0
 8010d16:	460b      	mov	r3, r1
 8010d18:	a14b      	add	r1, pc, #300	; (adr r1, 8010e48 <__ieee754_pow+0x3d8>)
 8010d1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010d1e:	f7ef fac3 	bl	80002a8 <__aeabi_dsub>
 8010d22:	4622      	mov	r2, r4
 8010d24:	462b      	mov	r3, r5
 8010d26:	f7ef fc77 	bl	8000618 <__aeabi_dmul>
 8010d2a:	4602      	mov	r2, r0
 8010d2c:	460b      	mov	r3, r1
 8010d2e:	2000      	movs	r0, #0
 8010d30:	494d      	ldr	r1, [pc, #308]	; (8010e68 <__ieee754_pow+0x3f8>)
 8010d32:	f7ef fab9 	bl	80002a8 <__aeabi_dsub>
 8010d36:	4622      	mov	r2, r4
 8010d38:	4680      	mov	r8, r0
 8010d3a:	4689      	mov	r9, r1
 8010d3c:	462b      	mov	r3, r5
 8010d3e:	4620      	mov	r0, r4
 8010d40:	4629      	mov	r1, r5
 8010d42:	f7ef fc69 	bl	8000618 <__aeabi_dmul>
 8010d46:	4602      	mov	r2, r0
 8010d48:	460b      	mov	r3, r1
 8010d4a:	4640      	mov	r0, r8
 8010d4c:	4649      	mov	r1, r9
 8010d4e:	f7ef fc63 	bl	8000618 <__aeabi_dmul>
 8010d52:	a33f      	add	r3, pc, #252	; (adr r3, 8010e50 <__ieee754_pow+0x3e0>)
 8010d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d58:	f7ef fc5e 	bl	8000618 <__aeabi_dmul>
 8010d5c:	4602      	mov	r2, r0
 8010d5e:	460b      	mov	r3, r1
 8010d60:	4650      	mov	r0, sl
 8010d62:	4659      	mov	r1, fp
 8010d64:	f7ef faa0 	bl	80002a8 <__aeabi_dsub>
 8010d68:	4602      	mov	r2, r0
 8010d6a:	460b      	mov	r3, r1
 8010d6c:	4680      	mov	r8, r0
 8010d6e:	4689      	mov	r9, r1
 8010d70:	4630      	mov	r0, r6
 8010d72:	4639      	mov	r1, r7
 8010d74:	f7ef fa9a 	bl	80002ac <__adddf3>
 8010d78:	2000      	movs	r0, #0
 8010d7a:	4632      	mov	r2, r6
 8010d7c:	463b      	mov	r3, r7
 8010d7e:	4604      	mov	r4, r0
 8010d80:	460d      	mov	r5, r1
 8010d82:	f7ef fa91 	bl	80002a8 <__aeabi_dsub>
 8010d86:	4602      	mov	r2, r0
 8010d88:	460b      	mov	r3, r1
 8010d8a:	4640      	mov	r0, r8
 8010d8c:	4649      	mov	r1, r9
 8010d8e:	f7ef fa8b 	bl	80002a8 <__aeabi_dsub>
 8010d92:	9b04      	ldr	r3, [sp, #16]
 8010d94:	9a06      	ldr	r2, [sp, #24]
 8010d96:	3b01      	subs	r3, #1
 8010d98:	4313      	orrs	r3, r2
 8010d9a:	4682      	mov	sl, r0
 8010d9c:	468b      	mov	fp, r1
 8010d9e:	f040 81e7 	bne.w	8011170 <__ieee754_pow+0x700>
 8010da2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8010e58 <__ieee754_pow+0x3e8>
 8010da6:	eeb0 8a47 	vmov.f32	s16, s14
 8010daa:	eef0 8a67 	vmov.f32	s17, s15
 8010dae:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010db2:	2600      	movs	r6, #0
 8010db4:	4632      	mov	r2, r6
 8010db6:	463b      	mov	r3, r7
 8010db8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010dbc:	f7ef fa74 	bl	80002a8 <__aeabi_dsub>
 8010dc0:	4622      	mov	r2, r4
 8010dc2:	462b      	mov	r3, r5
 8010dc4:	f7ef fc28 	bl	8000618 <__aeabi_dmul>
 8010dc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010dcc:	4680      	mov	r8, r0
 8010dce:	4689      	mov	r9, r1
 8010dd0:	4650      	mov	r0, sl
 8010dd2:	4659      	mov	r1, fp
 8010dd4:	f7ef fc20 	bl	8000618 <__aeabi_dmul>
 8010dd8:	4602      	mov	r2, r0
 8010dda:	460b      	mov	r3, r1
 8010ddc:	4640      	mov	r0, r8
 8010dde:	4649      	mov	r1, r9
 8010de0:	f7ef fa64 	bl	80002ac <__adddf3>
 8010de4:	4632      	mov	r2, r6
 8010de6:	463b      	mov	r3, r7
 8010de8:	4680      	mov	r8, r0
 8010dea:	4689      	mov	r9, r1
 8010dec:	4620      	mov	r0, r4
 8010dee:	4629      	mov	r1, r5
 8010df0:	f7ef fc12 	bl	8000618 <__aeabi_dmul>
 8010df4:	460b      	mov	r3, r1
 8010df6:	4604      	mov	r4, r0
 8010df8:	460d      	mov	r5, r1
 8010dfa:	4602      	mov	r2, r0
 8010dfc:	4649      	mov	r1, r9
 8010dfe:	4640      	mov	r0, r8
 8010e00:	f7ef fa54 	bl	80002ac <__adddf3>
 8010e04:	4b19      	ldr	r3, [pc, #100]	; (8010e6c <__ieee754_pow+0x3fc>)
 8010e06:	4299      	cmp	r1, r3
 8010e08:	ec45 4b19 	vmov	d9, r4, r5
 8010e0c:	4606      	mov	r6, r0
 8010e0e:	460f      	mov	r7, r1
 8010e10:	468b      	mov	fp, r1
 8010e12:	f340 82f0 	ble.w	80113f6 <__ieee754_pow+0x986>
 8010e16:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8010e1a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8010e1e:	4303      	orrs	r3, r0
 8010e20:	f000 81e4 	beq.w	80111ec <__ieee754_pow+0x77c>
 8010e24:	ec51 0b18 	vmov	r0, r1, d8
 8010e28:	2200      	movs	r2, #0
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	f7ef fe66 	bl	8000afc <__aeabi_dcmplt>
 8010e30:	3800      	subs	r0, #0
 8010e32:	bf18      	it	ne
 8010e34:	2001      	movne	r0, #1
 8010e36:	e72b      	b.n	8010c90 <__ieee754_pow+0x220>
 8010e38:	60000000 	.word	0x60000000
 8010e3c:	3ff71547 	.word	0x3ff71547
 8010e40:	f85ddf44 	.word	0xf85ddf44
 8010e44:	3e54ae0b 	.word	0x3e54ae0b
 8010e48:	55555555 	.word	0x55555555
 8010e4c:	3fd55555 	.word	0x3fd55555
 8010e50:	652b82fe 	.word	0x652b82fe
 8010e54:	3ff71547 	.word	0x3ff71547
 8010e58:	00000000 	.word	0x00000000
 8010e5c:	bff00000 	.word	0xbff00000
 8010e60:	3ff00000 	.word	0x3ff00000
 8010e64:	3fd00000 	.word	0x3fd00000
 8010e68:	3fe00000 	.word	0x3fe00000
 8010e6c:	408fffff 	.word	0x408fffff
 8010e70:	4bd5      	ldr	r3, [pc, #852]	; (80111c8 <__ieee754_pow+0x758>)
 8010e72:	402b      	ands	r3, r5
 8010e74:	2200      	movs	r2, #0
 8010e76:	b92b      	cbnz	r3, 8010e84 <__ieee754_pow+0x414>
 8010e78:	4bd4      	ldr	r3, [pc, #848]	; (80111cc <__ieee754_pow+0x75c>)
 8010e7a:	f7ef fbcd 	bl	8000618 <__aeabi_dmul>
 8010e7e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8010e82:	460c      	mov	r4, r1
 8010e84:	1523      	asrs	r3, r4, #20
 8010e86:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010e8a:	4413      	add	r3, r2
 8010e8c:	9305      	str	r3, [sp, #20]
 8010e8e:	4bd0      	ldr	r3, [pc, #832]	; (80111d0 <__ieee754_pow+0x760>)
 8010e90:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010e94:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8010e98:	429c      	cmp	r4, r3
 8010e9a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010e9e:	dd08      	ble.n	8010eb2 <__ieee754_pow+0x442>
 8010ea0:	4bcc      	ldr	r3, [pc, #816]	; (80111d4 <__ieee754_pow+0x764>)
 8010ea2:	429c      	cmp	r4, r3
 8010ea4:	f340 8162 	ble.w	801116c <__ieee754_pow+0x6fc>
 8010ea8:	9b05      	ldr	r3, [sp, #20]
 8010eaa:	3301      	adds	r3, #1
 8010eac:	9305      	str	r3, [sp, #20]
 8010eae:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8010eb2:	2400      	movs	r4, #0
 8010eb4:	00e3      	lsls	r3, r4, #3
 8010eb6:	9307      	str	r3, [sp, #28]
 8010eb8:	4bc7      	ldr	r3, [pc, #796]	; (80111d8 <__ieee754_pow+0x768>)
 8010eba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010ebe:	ed93 7b00 	vldr	d7, [r3]
 8010ec2:	4629      	mov	r1, r5
 8010ec4:	ec53 2b17 	vmov	r2, r3, d7
 8010ec8:	eeb0 9a47 	vmov.f32	s18, s14
 8010ecc:	eef0 9a67 	vmov.f32	s19, s15
 8010ed0:	4682      	mov	sl, r0
 8010ed2:	f7ef f9e9 	bl	80002a8 <__aeabi_dsub>
 8010ed6:	4652      	mov	r2, sl
 8010ed8:	4606      	mov	r6, r0
 8010eda:	460f      	mov	r7, r1
 8010edc:	462b      	mov	r3, r5
 8010ede:	ec51 0b19 	vmov	r0, r1, d9
 8010ee2:	f7ef f9e3 	bl	80002ac <__adddf3>
 8010ee6:	4602      	mov	r2, r0
 8010ee8:	460b      	mov	r3, r1
 8010eea:	2000      	movs	r0, #0
 8010eec:	49bb      	ldr	r1, [pc, #748]	; (80111dc <__ieee754_pow+0x76c>)
 8010eee:	f7ef fcbd 	bl	800086c <__aeabi_ddiv>
 8010ef2:	ec41 0b1a 	vmov	d10, r0, r1
 8010ef6:	4602      	mov	r2, r0
 8010ef8:	460b      	mov	r3, r1
 8010efa:	4630      	mov	r0, r6
 8010efc:	4639      	mov	r1, r7
 8010efe:	f7ef fb8b 	bl	8000618 <__aeabi_dmul>
 8010f02:	2300      	movs	r3, #0
 8010f04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010f08:	9302      	str	r3, [sp, #8]
 8010f0a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010f0e:	46ab      	mov	fp, r5
 8010f10:	106d      	asrs	r5, r5, #1
 8010f12:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8010f16:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8010f1a:	ec41 0b18 	vmov	d8, r0, r1
 8010f1e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8010f22:	2200      	movs	r2, #0
 8010f24:	4640      	mov	r0, r8
 8010f26:	4649      	mov	r1, r9
 8010f28:	4614      	mov	r4, r2
 8010f2a:	461d      	mov	r5, r3
 8010f2c:	f7ef fb74 	bl	8000618 <__aeabi_dmul>
 8010f30:	4602      	mov	r2, r0
 8010f32:	460b      	mov	r3, r1
 8010f34:	4630      	mov	r0, r6
 8010f36:	4639      	mov	r1, r7
 8010f38:	f7ef f9b6 	bl	80002a8 <__aeabi_dsub>
 8010f3c:	ec53 2b19 	vmov	r2, r3, d9
 8010f40:	4606      	mov	r6, r0
 8010f42:	460f      	mov	r7, r1
 8010f44:	4620      	mov	r0, r4
 8010f46:	4629      	mov	r1, r5
 8010f48:	f7ef f9ae 	bl	80002a8 <__aeabi_dsub>
 8010f4c:	4602      	mov	r2, r0
 8010f4e:	460b      	mov	r3, r1
 8010f50:	4650      	mov	r0, sl
 8010f52:	4659      	mov	r1, fp
 8010f54:	f7ef f9a8 	bl	80002a8 <__aeabi_dsub>
 8010f58:	4642      	mov	r2, r8
 8010f5a:	464b      	mov	r3, r9
 8010f5c:	f7ef fb5c 	bl	8000618 <__aeabi_dmul>
 8010f60:	4602      	mov	r2, r0
 8010f62:	460b      	mov	r3, r1
 8010f64:	4630      	mov	r0, r6
 8010f66:	4639      	mov	r1, r7
 8010f68:	f7ef f99e 	bl	80002a8 <__aeabi_dsub>
 8010f6c:	ec53 2b1a 	vmov	r2, r3, d10
 8010f70:	f7ef fb52 	bl	8000618 <__aeabi_dmul>
 8010f74:	ec53 2b18 	vmov	r2, r3, d8
 8010f78:	ec41 0b19 	vmov	d9, r0, r1
 8010f7c:	ec51 0b18 	vmov	r0, r1, d8
 8010f80:	f7ef fb4a 	bl	8000618 <__aeabi_dmul>
 8010f84:	a37c      	add	r3, pc, #496	; (adr r3, 8011178 <__ieee754_pow+0x708>)
 8010f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f8a:	4604      	mov	r4, r0
 8010f8c:	460d      	mov	r5, r1
 8010f8e:	f7ef fb43 	bl	8000618 <__aeabi_dmul>
 8010f92:	a37b      	add	r3, pc, #492	; (adr r3, 8011180 <__ieee754_pow+0x710>)
 8010f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f98:	f7ef f988 	bl	80002ac <__adddf3>
 8010f9c:	4622      	mov	r2, r4
 8010f9e:	462b      	mov	r3, r5
 8010fa0:	f7ef fb3a 	bl	8000618 <__aeabi_dmul>
 8010fa4:	a378      	add	r3, pc, #480	; (adr r3, 8011188 <__ieee754_pow+0x718>)
 8010fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010faa:	f7ef f97f 	bl	80002ac <__adddf3>
 8010fae:	4622      	mov	r2, r4
 8010fb0:	462b      	mov	r3, r5
 8010fb2:	f7ef fb31 	bl	8000618 <__aeabi_dmul>
 8010fb6:	a376      	add	r3, pc, #472	; (adr r3, 8011190 <__ieee754_pow+0x720>)
 8010fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fbc:	f7ef f976 	bl	80002ac <__adddf3>
 8010fc0:	4622      	mov	r2, r4
 8010fc2:	462b      	mov	r3, r5
 8010fc4:	f7ef fb28 	bl	8000618 <__aeabi_dmul>
 8010fc8:	a373      	add	r3, pc, #460	; (adr r3, 8011198 <__ieee754_pow+0x728>)
 8010fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fce:	f7ef f96d 	bl	80002ac <__adddf3>
 8010fd2:	4622      	mov	r2, r4
 8010fd4:	462b      	mov	r3, r5
 8010fd6:	f7ef fb1f 	bl	8000618 <__aeabi_dmul>
 8010fda:	a371      	add	r3, pc, #452	; (adr r3, 80111a0 <__ieee754_pow+0x730>)
 8010fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fe0:	f7ef f964 	bl	80002ac <__adddf3>
 8010fe4:	4622      	mov	r2, r4
 8010fe6:	4606      	mov	r6, r0
 8010fe8:	460f      	mov	r7, r1
 8010fea:	462b      	mov	r3, r5
 8010fec:	4620      	mov	r0, r4
 8010fee:	4629      	mov	r1, r5
 8010ff0:	f7ef fb12 	bl	8000618 <__aeabi_dmul>
 8010ff4:	4602      	mov	r2, r0
 8010ff6:	460b      	mov	r3, r1
 8010ff8:	4630      	mov	r0, r6
 8010ffa:	4639      	mov	r1, r7
 8010ffc:	f7ef fb0c 	bl	8000618 <__aeabi_dmul>
 8011000:	4642      	mov	r2, r8
 8011002:	4604      	mov	r4, r0
 8011004:	460d      	mov	r5, r1
 8011006:	464b      	mov	r3, r9
 8011008:	ec51 0b18 	vmov	r0, r1, d8
 801100c:	f7ef f94e 	bl	80002ac <__adddf3>
 8011010:	ec53 2b19 	vmov	r2, r3, d9
 8011014:	f7ef fb00 	bl	8000618 <__aeabi_dmul>
 8011018:	4622      	mov	r2, r4
 801101a:	462b      	mov	r3, r5
 801101c:	f7ef f946 	bl	80002ac <__adddf3>
 8011020:	4642      	mov	r2, r8
 8011022:	4682      	mov	sl, r0
 8011024:	468b      	mov	fp, r1
 8011026:	464b      	mov	r3, r9
 8011028:	4640      	mov	r0, r8
 801102a:	4649      	mov	r1, r9
 801102c:	f7ef faf4 	bl	8000618 <__aeabi_dmul>
 8011030:	4b6b      	ldr	r3, [pc, #428]	; (80111e0 <__ieee754_pow+0x770>)
 8011032:	2200      	movs	r2, #0
 8011034:	4606      	mov	r6, r0
 8011036:	460f      	mov	r7, r1
 8011038:	f7ef f938 	bl	80002ac <__adddf3>
 801103c:	4652      	mov	r2, sl
 801103e:	465b      	mov	r3, fp
 8011040:	f7ef f934 	bl	80002ac <__adddf3>
 8011044:	2000      	movs	r0, #0
 8011046:	4604      	mov	r4, r0
 8011048:	460d      	mov	r5, r1
 801104a:	4602      	mov	r2, r0
 801104c:	460b      	mov	r3, r1
 801104e:	4640      	mov	r0, r8
 8011050:	4649      	mov	r1, r9
 8011052:	f7ef fae1 	bl	8000618 <__aeabi_dmul>
 8011056:	4b62      	ldr	r3, [pc, #392]	; (80111e0 <__ieee754_pow+0x770>)
 8011058:	4680      	mov	r8, r0
 801105a:	4689      	mov	r9, r1
 801105c:	2200      	movs	r2, #0
 801105e:	4620      	mov	r0, r4
 8011060:	4629      	mov	r1, r5
 8011062:	f7ef f921 	bl	80002a8 <__aeabi_dsub>
 8011066:	4632      	mov	r2, r6
 8011068:	463b      	mov	r3, r7
 801106a:	f7ef f91d 	bl	80002a8 <__aeabi_dsub>
 801106e:	4602      	mov	r2, r0
 8011070:	460b      	mov	r3, r1
 8011072:	4650      	mov	r0, sl
 8011074:	4659      	mov	r1, fp
 8011076:	f7ef f917 	bl	80002a8 <__aeabi_dsub>
 801107a:	ec53 2b18 	vmov	r2, r3, d8
 801107e:	f7ef facb 	bl	8000618 <__aeabi_dmul>
 8011082:	4622      	mov	r2, r4
 8011084:	4606      	mov	r6, r0
 8011086:	460f      	mov	r7, r1
 8011088:	462b      	mov	r3, r5
 801108a:	ec51 0b19 	vmov	r0, r1, d9
 801108e:	f7ef fac3 	bl	8000618 <__aeabi_dmul>
 8011092:	4602      	mov	r2, r0
 8011094:	460b      	mov	r3, r1
 8011096:	4630      	mov	r0, r6
 8011098:	4639      	mov	r1, r7
 801109a:	f7ef f907 	bl	80002ac <__adddf3>
 801109e:	4606      	mov	r6, r0
 80110a0:	460f      	mov	r7, r1
 80110a2:	4602      	mov	r2, r0
 80110a4:	460b      	mov	r3, r1
 80110a6:	4640      	mov	r0, r8
 80110a8:	4649      	mov	r1, r9
 80110aa:	f7ef f8ff 	bl	80002ac <__adddf3>
 80110ae:	a33e      	add	r3, pc, #248	; (adr r3, 80111a8 <__ieee754_pow+0x738>)
 80110b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110b4:	2000      	movs	r0, #0
 80110b6:	4604      	mov	r4, r0
 80110b8:	460d      	mov	r5, r1
 80110ba:	f7ef faad 	bl	8000618 <__aeabi_dmul>
 80110be:	4642      	mov	r2, r8
 80110c0:	ec41 0b18 	vmov	d8, r0, r1
 80110c4:	464b      	mov	r3, r9
 80110c6:	4620      	mov	r0, r4
 80110c8:	4629      	mov	r1, r5
 80110ca:	f7ef f8ed 	bl	80002a8 <__aeabi_dsub>
 80110ce:	4602      	mov	r2, r0
 80110d0:	460b      	mov	r3, r1
 80110d2:	4630      	mov	r0, r6
 80110d4:	4639      	mov	r1, r7
 80110d6:	f7ef f8e7 	bl	80002a8 <__aeabi_dsub>
 80110da:	a335      	add	r3, pc, #212	; (adr r3, 80111b0 <__ieee754_pow+0x740>)
 80110dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110e0:	f7ef fa9a 	bl	8000618 <__aeabi_dmul>
 80110e4:	a334      	add	r3, pc, #208	; (adr r3, 80111b8 <__ieee754_pow+0x748>)
 80110e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ea:	4606      	mov	r6, r0
 80110ec:	460f      	mov	r7, r1
 80110ee:	4620      	mov	r0, r4
 80110f0:	4629      	mov	r1, r5
 80110f2:	f7ef fa91 	bl	8000618 <__aeabi_dmul>
 80110f6:	4602      	mov	r2, r0
 80110f8:	460b      	mov	r3, r1
 80110fa:	4630      	mov	r0, r6
 80110fc:	4639      	mov	r1, r7
 80110fe:	f7ef f8d5 	bl	80002ac <__adddf3>
 8011102:	9a07      	ldr	r2, [sp, #28]
 8011104:	4b37      	ldr	r3, [pc, #220]	; (80111e4 <__ieee754_pow+0x774>)
 8011106:	4413      	add	r3, r2
 8011108:	e9d3 2300 	ldrd	r2, r3, [r3]
 801110c:	f7ef f8ce 	bl	80002ac <__adddf3>
 8011110:	4682      	mov	sl, r0
 8011112:	9805      	ldr	r0, [sp, #20]
 8011114:	468b      	mov	fp, r1
 8011116:	f7ef fa15 	bl	8000544 <__aeabi_i2d>
 801111a:	9a07      	ldr	r2, [sp, #28]
 801111c:	4b32      	ldr	r3, [pc, #200]	; (80111e8 <__ieee754_pow+0x778>)
 801111e:	4413      	add	r3, r2
 8011120:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011124:	4606      	mov	r6, r0
 8011126:	460f      	mov	r7, r1
 8011128:	4652      	mov	r2, sl
 801112a:	465b      	mov	r3, fp
 801112c:	ec51 0b18 	vmov	r0, r1, d8
 8011130:	f7ef f8bc 	bl	80002ac <__adddf3>
 8011134:	4642      	mov	r2, r8
 8011136:	464b      	mov	r3, r9
 8011138:	f7ef f8b8 	bl	80002ac <__adddf3>
 801113c:	4632      	mov	r2, r6
 801113e:	463b      	mov	r3, r7
 8011140:	f7ef f8b4 	bl	80002ac <__adddf3>
 8011144:	2000      	movs	r0, #0
 8011146:	4632      	mov	r2, r6
 8011148:	463b      	mov	r3, r7
 801114a:	4604      	mov	r4, r0
 801114c:	460d      	mov	r5, r1
 801114e:	f7ef f8ab 	bl	80002a8 <__aeabi_dsub>
 8011152:	4642      	mov	r2, r8
 8011154:	464b      	mov	r3, r9
 8011156:	f7ef f8a7 	bl	80002a8 <__aeabi_dsub>
 801115a:	ec53 2b18 	vmov	r2, r3, d8
 801115e:	f7ef f8a3 	bl	80002a8 <__aeabi_dsub>
 8011162:	4602      	mov	r2, r0
 8011164:	460b      	mov	r3, r1
 8011166:	4650      	mov	r0, sl
 8011168:	4659      	mov	r1, fp
 801116a:	e610      	b.n	8010d8e <__ieee754_pow+0x31e>
 801116c:	2401      	movs	r4, #1
 801116e:	e6a1      	b.n	8010eb4 <__ieee754_pow+0x444>
 8011170:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80111c0 <__ieee754_pow+0x750>
 8011174:	e617      	b.n	8010da6 <__ieee754_pow+0x336>
 8011176:	bf00      	nop
 8011178:	4a454eef 	.word	0x4a454eef
 801117c:	3fca7e28 	.word	0x3fca7e28
 8011180:	93c9db65 	.word	0x93c9db65
 8011184:	3fcd864a 	.word	0x3fcd864a
 8011188:	a91d4101 	.word	0xa91d4101
 801118c:	3fd17460 	.word	0x3fd17460
 8011190:	518f264d 	.word	0x518f264d
 8011194:	3fd55555 	.word	0x3fd55555
 8011198:	db6fabff 	.word	0xdb6fabff
 801119c:	3fdb6db6 	.word	0x3fdb6db6
 80111a0:	33333303 	.word	0x33333303
 80111a4:	3fe33333 	.word	0x3fe33333
 80111a8:	e0000000 	.word	0xe0000000
 80111ac:	3feec709 	.word	0x3feec709
 80111b0:	dc3a03fd 	.word	0xdc3a03fd
 80111b4:	3feec709 	.word	0x3feec709
 80111b8:	145b01f5 	.word	0x145b01f5
 80111bc:	be3e2fe0 	.word	0xbe3e2fe0
 80111c0:	00000000 	.word	0x00000000
 80111c4:	3ff00000 	.word	0x3ff00000
 80111c8:	7ff00000 	.word	0x7ff00000
 80111cc:	43400000 	.word	0x43400000
 80111d0:	0003988e 	.word	0x0003988e
 80111d4:	000bb679 	.word	0x000bb679
 80111d8:	080158e8 	.word	0x080158e8
 80111dc:	3ff00000 	.word	0x3ff00000
 80111e0:	40080000 	.word	0x40080000
 80111e4:	08015908 	.word	0x08015908
 80111e8:	080158f8 	.word	0x080158f8
 80111ec:	a3b3      	add	r3, pc, #716	; (adr r3, 80114bc <__ieee754_pow+0xa4c>)
 80111ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111f2:	4640      	mov	r0, r8
 80111f4:	4649      	mov	r1, r9
 80111f6:	f7ef f859 	bl	80002ac <__adddf3>
 80111fa:	4622      	mov	r2, r4
 80111fc:	ec41 0b1a 	vmov	d10, r0, r1
 8011200:	462b      	mov	r3, r5
 8011202:	4630      	mov	r0, r6
 8011204:	4639      	mov	r1, r7
 8011206:	f7ef f84f 	bl	80002a8 <__aeabi_dsub>
 801120a:	4602      	mov	r2, r0
 801120c:	460b      	mov	r3, r1
 801120e:	ec51 0b1a 	vmov	r0, r1, d10
 8011212:	f7ef fc91 	bl	8000b38 <__aeabi_dcmpgt>
 8011216:	2800      	cmp	r0, #0
 8011218:	f47f ae04 	bne.w	8010e24 <__ieee754_pow+0x3b4>
 801121c:	4aa2      	ldr	r2, [pc, #648]	; (80114a8 <__ieee754_pow+0xa38>)
 801121e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011222:	4293      	cmp	r3, r2
 8011224:	f340 8107 	ble.w	8011436 <__ieee754_pow+0x9c6>
 8011228:	151b      	asrs	r3, r3, #20
 801122a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801122e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011232:	fa4a fa03 	asr.w	sl, sl, r3
 8011236:	44da      	add	sl, fp
 8011238:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801123c:	489b      	ldr	r0, [pc, #620]	; (80114ac <__ieee754_pow+0xa3c>)
 801123e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011242:	4108      	asrs	r0, r1
 8011244:	ea00 030a 	and.w	r3, r0, sl
 8011248:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801124c:	f1c1 0114 	rsb	r1, r1, #20
 8011250:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011254:	fa4a fa01 	asr.w	sl, sl, r1
 8011258:	f1bb 0f00 	cmp.w	fp, #0
 801125c:	f04f 0200 	mov.w	r2, #0
 8011260:	4620      	mov	r0, r4
 8011262:	4629      	mov	r1, r5
 8011264:	bfb8      	it	lt
 8011266:	f1ca 0a00 	rsblt	sl, sl, #0
 801126a:	f7ef f81d 	bl	80002a8 <__aeabi_dsub>
 801126e:	ec41 0b19 	vmov	d9, r0, r1
 8011272:	4642      	mov	r2, r8
 8011274:	464b      	mov	r3, r9
 8011276:	ec51 0b19 	vmov	r0, r1, d9
 801127a:	f7ef f817 	bl	80002ac <__adddf3>
 801127e:	a37a      	add	r3, pc, #488	; (adr r3, 8011468 <__ieee754_pow+0x9f8>)
 8011280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011284:	2000      	movs	r0, #0
 8011286:	4604      	mov	r4, r0
 8011288:	460d      	mov	r5, r1
 801128a:	f7ef f9c5 	bl	8000618 <__aeabi_dmul>
 801128e:	ec53 2b19 	vmov	r2, r3, d9
 8011292:	4606      	mov	r6, r0
 8011294:	460f      	mov	r7, r1
 8011296:	4620      	mov	r0, r4
 8011298:	4629      	mov	r1, r5
 801129a:	f7ef f805 	bl	80002a8 <__aeabi_dsub>
 801129e:	4602      	mov	r2, r0
 80112a0:	460b      	mov	r3, r1
 80112a2:	4640      	mov	r0, r8
 80112a4:	4649      	mov	r1, r9
 80112a6:	f7ee ffff 	bl	80002a8 <__aeabi_dsub>
 80112aa:	a371      	add	r3, pc, #452	; (adr r3, 8011470 <__ieee754_pow+0xa00>)
 80112ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112b0:	f7ef f9b2 	bl	8000618 <__aeabi_dmul>
 80112b4:	a370      	add	r3, pc, #448	; (adr r3, 8011478 <__ieee754_pow+0xa08>)
 80112b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ba:	4680      	mov	r8, r0
 80112bc:	4689      	mov	r9, r1
 80112be:	4620      	mov	r0, r4
 80112c0:	4629      	mov	r1, r5
 80112c2:	f7ef f9a9 	bl	8000618 <__aeabi_dmul>
 80112c6:	4602      	mov	r2, r0
 80112c8:	460b      	mov	r3, r1
 80112ca:	4640      	mov	r0, r8
 80112cc:	4649      	mov	r1, r9
 80112ce:	f7ee ffed 	bl	80002ac <__adddf3>
 80112d2:	4604      	mov	r4, r0
 80112d4:	460d      	mov	r5, r1
 80112d6:	4602      	mov	r2, r0
 80112d8:	460b      	mov	r3, r1
 80112da:	4630      	mov	r0, r6
 80112dc:	4639      	mov	r1, r7
 80112de:	f7ee ffe5 	bl	80002ac <__adddf3>
 80112e2:	4632      	mov	r2, r6
 80112e4:	463b      	mov	r3, r7
 80112e6:	4680      	mov	r8, r0
 80112e8:	4689      	mov	r9, r1
 80112ea:	f7ee ffdd 	bl	80002a8 <__aeabi_dsub>
 80112ee:	4602      	mov	r2, r0
 80112f0:	460b      	mov	r3, r1
 80112f2:	4620      	mov	r0, r4
 80112f4:	4629      	mov	r1, r5
 80112f6:	f7ee ffd7 	bl	80002a8 <__aeabi_dsub>
 80112fa:	4642      	mov	r2, r8
 80112fc:	4606      	mov	r6, r0
 80112fe:	460f      	mov	r7, r1
 8011300:	464b      	mov	r3, r9
 8011302:	4640      	mov	r0, r8
 8011304:	4649      	mov	r1, r9
 8011306:	f7ef f987 	bl	8000618 <__aeabi_dmul>
 801130a:	a35d      	add	r3, pc, #372	; (adr r3, 8011480 <__ieee754_pow+0xa10>)
 801130c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011310:	4604      	mov	r4, r0
 8011312:	460d      	mov	r5, r1
 8011314:	f7ef f980 	bl	8000618 <__aeabi_dmul>
 8011318:	a35b      	add	r3, pc, #364	; (adr r3, 8011488 <__ieee754_pow+0xa18>)
 801131a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801131e:	f7ee ffc3 	bl	80002a8 <__aeabi_dsub>
 8011322:	4622      	mov	r2, r4
 8011324:	462b      	mov	r3, r5
 8011326:	f7ef f977 	bl	8000618 <__aeabi_dmul>
 801132a:	a359      	add	r3, pc, #356	; (adr r3, 8011490 <__ieee754_pow+0xa20>)
 801132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011330:	f7ee ffbc 	bl	80002ac <__adddf3>
 8011334:	4622      	mov	r2, r4
 8011336:	462b      	mov	r3, r5
 8011338:	f7ef f96e 	bl	8000618 <__aeabi_dmul>
 801133c:	a356      	add	r3, pc, #344	; (adr r3, 8011498 <__ieee754_pow+0xa28>)
 801133e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011342:	f7ee ffb1 	bl	80002a8 <__aeabi_dsub>
 8011346:	4622      	mov	r2, r4
 8011348:	462b      	mov	r3, r5
 801134a:	f7ef f965 	bl	8000618 <__aeabi_dmul>
 801134e:	a354      	add	r3, pc, #336	; (adr r3, 80114a0 <__ieee754_pow+0xa30>)
 8011350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011354:	f7ee ffaa 	bl	80002ac <__adddf3>
 8011358:	4622      	mov	r2, r4
 801135a:	462b      	mov	r3, r5
 801135c:	f7ef f95c 	bl	8000618 <__aeabi_dmul>
 8011360:	4602      	mov	r2, r0
 8011362:	460b      	mov	r3, r1
 8011364:	4640      	mov	r0, r8
 8011366:	4649      	mov	r1, r9
 8011368:	f7ee ff9e 	bl	80002a8 <__aeabi_dsub>
 801136c:	4604      	mov	r4, r0
 801136e:	460d      	mov	r5, r1
 8011370:	4602      	mov	r2, r0
 8011372:	460b      	mov	r3, r1
 8011374:	4640      	mov	r0, r8
 8011376:	4649      	mov	r1, r9
 8011378:	f7ef f94e 	bl	8000618 <__aeabi_dmul>
 801137c:	2200      	movs	r2, #0
 801137e:	ec41 0b19 	vmov	d9, r0, r1
 8011382:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011386:	4620      	mov	r0, r4
 8011388:	4629      	mov	r1, r5
 801138a:	f7ee ff8d 	bl	80002a8 <__aeabi_dsub>
 801138e:	4602      	mov	r2, r0
 8011390:	460b      	mov	r3, r1
 8011392:	ec51 0b19 	vmov	r0, r1, d9
 8011396:	f7ef fa69 	bl	800086c <__aeabi_ddiv>
 801139a:	4632      	mov	r2, r6
 801139c:	4604      	mov	r4, r0
 801139e:	460d      	mov	r5, r1
 80113a0:	463b      	mov	r3, r7
 80113a2:	4640      	mov	r0, r8
 80113a4:	4649      	mov	r1, r9
 80113a6:	f7ef f937 	bl	8000618 <__aeabi_dmul>
 80113aa:	4632      	mov	r2, r6
 80113ac:	463b      	mov	r3, r7
 80113ae:	f7ee ff7d 	bl	80002ac <__adddf3>
 80113b2:	4602      	mov	r2, r0
 80113b4:	460b      	mov	r3, r1
 80113b6:	4620      	mov	r0, r4
 80113b8:	4629      	mov	r1, r5
 80113ba:	f7ee ff75 	bl	80002a8 <__aeabi_dsub>
 80113be:	4642      	mov	r2, r8
 80113c0:	464b      	mov	r3, r9
 80113c2:	f7ee ff71 	bl	80002a8 <__aeabi_dsub>
 80113c6:	460b      	mov	r3, r1
 80113c8:	4602      	mov	r2, r0
 80113ca:	4939      	ldr	r1, [pc, #228]	; (80114b0 <__ieee754_pow+0xa40>)
 80113cc:	2000      	movs	r0, #0
 80113ce:	f7ee ff6b 	bl	80002a8 <__aeabi_dsub>
 80113d2:	ec41 0b10 	vmov	d0, r0, r1
 80113d6:	ee10 3a90 	vmov	r3, s1
 80113da:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80113de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80113e2:	da2b      	bge.n	801143c <__ieee754_pow+0x9cc>
 80113e4:	4650      	mov	r0, sl
 80113e6:	f000 fa7f 	bl	80118e8 <scalbn>
 80113ea:	ec51 0b10 	vmov	r0, r1, d0
 80113ee:	ec53 2b18 	vmov	r2, r3, d8
 80113f2:	f7ff bbee 	b.w	8010bd2 <__ieee754_pow+0x162>
 80113f6:	4b2f      	ldr	r3, [pc, #188]	; (80114b4 <__ieee754_pow+0xa44>)
 80113f8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80113fc:	429e      	cmp	r6, r3
 80113fe:	f77f af0d 	ble.w	801121c <__ieee754_pow+0x7ac>
 8011402:	4b2d      	ldr	r3, [pc, #180]	; (80114b8 <__ieee754_pow+0xa48>)
 8011404:	440b      	add	r3, r1
 8011406:	4303      	orrs	r3, r0
 8011408:	d009      	beq.n	801141e <__ieee754_pow+0x9ae>
 801140a:	ec51 0b18 	vmov	r0, r1, d8
 801140e:	2200      	movs	r2, #0
 8011410:	2300      	movs	r3, #0
 8011412:	f7ef fb73 	bl	8000afc <__aeabi_dcmplt>
 8011416:	3800      	subs	r0, #0
 8011418:	bf18      	it	ne
 801141a:	2001      	movne	r0, #1
 801141c:	e448      	b.n	8010cb0 <__ieee754_pow+0x240>
 801141e:	4622      	mov	r2, r4
 8011420:	462b      	mov	r3, r5
 8011422:	f7ee ff41 	bl	80002a8 <__aeabi_dsub>
 8011426:	4642      	mov	r2, r8
 8011428:	464b      	mov	r3, r9
 801142a:	f7ef fb7b 	bl	8000b24 <__aeabi_dcmpge>
 801142e:	2800      	cmp	r0, #0
 8011430:	f43f aef4 	beq.w	801121c <__ieee754_pow+0x7ac>
 8011434:	e7e9      	b.n	801140a <__ieee754_pow+0x99a>
 8011436:	f04f 0a00 	mov.w	sl, #0
 801143a:	e71a      	b.n	8011272 <__ieee754_pow+0x802>
 801143c:	ec51 0b10 	vmov	r0, r1, d0
 8011440:	4619      	mov	r1, r3
 8011442:	e7d4      	b.n	80113ee <__ieee754_pow+0x97e>
 8011444:	491a      	ldr	r1, [pc, #104]	; (80114b0 <__ieee754_pow+0xa40>)
 8011446:	2000      	movs	r0, #0
 8011448:	f7ff bb31 	b.w	8010aae <__ieee754_pow+0x3e>
 801144c:	2000      	movs	r0, #0
 801144e:	2100      	movs	r1, #0
 8011450:	f7ff bb2d 	b.w	8010aae <__ieee754_pow+0x3e>
 8011454:	4630      	mov	r0, r6
 8011456:	4639      	mov	r1, r7
 8011458:	f7ff bb29 	b.w	8010aae <__ieee754_pow+0x3e>
 801145c:	9204      	str	r2, [sp, #16]
 801145e:	f7ff bb7b 	b.w	8010b58 <__ieee754_pow+0xe8>
 8011462:	2300      	movs	r3, #0
 8011464:	f7ff bb65 	b.w	8010b32 <__ieee754_pow+0xc2>
 8011468:	00000000 	.word	0x00000000
 801146c:	3fe62e43 	.word	0x3fe62e43
 8011470:	fefa39ef 	.word	0xfefa39ef
 8011474:	3fe62e42 	.word	0x3fe62e42
 8011478:	0ca86c39 	.word	0x0ca86c39
 801147c:	be205c61 	.word	0xbe205c61
 8011480:	72bea4d0 	.word	0x72bea4d0
 8011484:	3e663769 	.word	0x3e663769
 8011488:	c5d26bf1 	.word	0xc5d26bf1
 801148c:	3ebbbd41 	.word	0x3ebbbd41
 8011490:	af25de2c 	.word	0xaf25de2c
 8011494:	3f11566a 	.word	0x3f11566a
 8011498:	16bebd93 	.word	0x16bebd93
 801149c:	3f66c16c 	.word	0x3f66c16c
 80114a0:	5555553e 	.word	0x5555553e
 80114a4:	3fc55555 	.word	0x3fc55555
 80114a8:	3fe00000 	.word	0x3fe00000
 80114ac:	fff00000 	.word	0xfff00000
 80114b0:	3ff00000 	.word	0x3ff00000
 80114b4:	4090cbff 	.word	0x4090cbff
 80114b8:	3f6f3400 	.word	0x3f6f3400
 80114bc:	652b82fe 	.word	0x652b82fe
 80114c0:	3c971547 	.word	0x3c971547
 80114c4:	00000000 	.word	0x00000000

080114c8 <__ieee754_rem_pio2>:
 80114c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114cc:	ed2d 8b02 	vpush	{d8}
 80114d0:	ec55 4b10 	vmov	r4, r5, d0
 80114d4:	4bca      	ldr	r3, [pc, #808]	; (8011800 <__ieee754_rem_pio2+0x338>)
 80114d6:	b08b      	sub	sp, #44	; 0x2c
 80114d8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80114dc:	4598      	cmp	r8, r3
 80114de:	4682      	mov	sl, r0
 80114e0:	9502      	str	r5, [sp, #8]
 80114e2:	dc08      	bgt.n	80114f6 <__ieee754_rem_pio2+0x2e>
 80114e4:	2200      	movs	r2, #0
 80114e6:	2300      	movs	r3, #0
 80114e8:	ed80 0b00 	vstr	d0, [r0]
 80114ec:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80114f0:	f04f 0b00 	mov.w	fp, #0
 80114f4:	e028      	b.n	8011548 <__ieee754_rem_pio2+0x80>
 80114f6:	4bc3      	ldr	r3, [pc, #780]	; (8011804 <__ieee754_rem_pio2+0x33c>)
 80114f8:	4598      	cmp	r8, r3
 80114fa:	dc78      	bgt.n	80115ee <__ieee754_rem_pio2+0x126>
 80114fc:	9b02      	ldr	r3, [sp, #8]
 80114fe:	4ec2      	ldr	r6, [pc, #776]	; (8011808 <__ieee754_rem_pio2+0x340>)
 8011500:	2b00      	cmp	r3, #0
 8011502:	ee10 0a10 	vmov	r0, s0
 8011506:	a3b0      	add	r3, pc, #704	; (adr r3, 80117c8 <__ieee754_rem_pio2+0x300>)
 8011508:	e9d3 2300 	ldrd	r2, r3, [r3]
 801150c:	4629      	mov	r1, r5
 801150e:	dd39      	ble.n	8011584 <__ieee754_rem_pio2+0xbc>
 8011510:	f7ee feca 	bl	80002a8 <__aeabi_dsub>
 8011514:	45b0      	cmp	r8, r6
 8011516:	4604      	mov	r4, r0
 8011518:	460d      	mov	r5, r1
 801151a:	d01b      	beq.n	8011554 <__ieee754_rem_pio2+0x8c>
 801151c:	a3ac      	add	r3, pc, #688	; (adr r3, 80117d0 <__ieee754_rem_pio2+0x308>)
 801151e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011522:	f7ee fec1 	bl	80002a8 <__aeabi_dsub>
 8011526:	4602      	mov	r2, r0
 8011528:	460b      	mov	r3, r1
 801152a:	e9ca 2300 	strd	r2, r3, [sl]
 801152e:	4620      	mov	r0, r4
 8011530:	4629      	mov	r1, r5
 8011532:	f7ee feb9 	bl	80002a8 <__aeabi_dsub>
 8011536:	a3a6      	add	r3, pc, #664	; (adr r3, 80117d0 <__ieee754_rem_pio2+0x308>)
 8011538:	e9d3 2300 	ldrd	r2, r3, [r3]
 801153c:	f7ee feb4 	bl	80002a8 <__aeabi_dsub>
 8011540:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011544:	f04f 0b01 	mov.w	fp, #1
 8011548:	4658      	mov	r0, fp
 801154a:	b00b      	add	sp, #44	; 0x2c
 801154c:	ecbd 8b02 	vpop	{d8}
 8011550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011554:	a3a0      	add	r3, pc, #640	; (adr r3, 80117d8 <__ieee754_rem_pio2+0x310>)
 8011556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801155a:	f7ee fea5 	bl	80002a8 <__aeabi_dsub>
 801155e:	a3a0      	add	r3, pc, #640	; (adr r3, 80117e0 <__ieee754_rem_pio2+0x318>)
 8011560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011564:	4604      	mov	r4, r0
 8011566:	460d      	mov	r5, r1
 8011568:	f7ee fe9e 	bl	80002a8 <__aeabi_dsub>
 801156c:	4602      	mov	r2, r0
 801156e:	460b      	mov	r3, r1
 8011570:	e9ca 2300 	strd	r2, r3, [sl]
 8011574:	4620      	mov	r0, r4
 8011576:	4629      	mov	r1, r5
 8011578:	f7ee fe96 	bl	80002a8 <__aeabi_dsub>
 801157c:	a398      	add	r3, pc, #608	; (adr r3, 80117e0 <__ieee754_rem_pio2+0x318>)
 801157e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011582:	e7db      	b.n	801153c <__ieee754_rem_pio2+0x74>
 8011584:	f7ee fe92 	bl	80002ac <__adddf3>
 8011588:	45b0      	cmp	r8, r6
 801158a:	4604      	mov	r4, r0
 801158c:	460d      	mov	r5, r1
 801158e:	d016      	beq.n	80115be <__ieee754_rem_pio2+0xf6>
 8011590:	a38f      	add	r3, pc, #572	; (adr r3, 80117d0 <__ieee754_rem_pio2+0x308>)
 8011592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011596:	f7ee fe89 	bl	80002ac <__adddf3>
 801159a:	4602      	mov	r2, r0
 801159c:	460b      	mov	r3, r1
 801159e:	e9ca 2300 	strd	r2, r3, [sl]
 80115a2:	4620      	mov	r0, r4
 80115a4:	4629      	mov	r1, r5
 80115a6:	f7ee fe7f 	bl	80002a8 <__aeabi_dsub>
 80115aa:	a389      	add	r3, pc, #548	; (adr r3, 80117d0 <__ieee754_rem_pio2+0x308>)
 80115ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115b0:	f7ee fe7c 	bl	80002ac <__adddf3>
 80115b4:	f04f 3bff 	mov.w	fp, #4294967295
 80115b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80115bc:	e7c4      	b.n	8011548 <__ieee754_rem_pio2+0x80>
 80115be:	a386      	add	r3, pc, #536	; (adr r3, 80117d8 <__ieee754_rem_pio2+0x310>)
 80115c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115c4:	f7ee fe72 	bl	80002ac <__adddf3>
 80115c8:	a385      	add	r3, pc, #532	; (adr r3, 80117e0 <__ieee754_rem_pio2+0x318>)
 80115ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115ce:	4604      	mov	r4, r0
 80115d0:	460d      	mov	r5, r1
 80115d2:	f7ee fe6b 	bl	80002ac <__adddf3>
 80115d6:	4602      	mov	r2, r0
 80115d8:	460b      	mov	r3, r1
 80115da:	e9ca 2300 	strd	r2, r3, [sl]
 80115de:	4620      	mov	r0, r4
 80115e0:	4629      	mov	r1, r5
 80115e2:	f7ee fe61 	bl	80002a8 <__aeabi_dsub>
 80115e6:	a37e      	add	r3, pc, #504	; (adr r3, 80117e0 <__ieee754_rem_pio2+0x318>)
 80115e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115ec:	e7e0      	b.n	80115b0 <__ieee754_rem_pio2+0xe8>
 80115ee:	4b87      	ldr	r3, [pc, #540]	; (801180c <__ieee754_rem_pio2+0x344>)
 80115f0:	4598      	cmp	r8, r3
 80115f2:	f300 80d8 	bgt.w	80117a6 <__ieee754_rem_pio2+0x2de>
 80115f6:	f000 f96d 	bl	80118d4 <fabs>
 80115fa:	ec55 4b10 	vmov	r4, r5, d0
 80115fe:	ee10 0a10 	vmov	r0, s0
 8011602:	a379      	add	r3, pc, #484	; (adr r3, 80117e8 <__ieee754_rem_pio2+0x320>)
 8011604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011608:	4629      	mov	r1, r5
 801160a:	f7ef f805 	bl	8000618 <__aeabi_dmul>
 801160e:	4b80      	ldr	r3, [pc, #512]	; (8011810 <__ieee754_rem_pio2+0x348>)
 8011610:	2200      	movs	r2, #0
 8011612:	f7ee fe4b 	bl	80002ac <__adddf3>
 8011616:	f7ef faaf 	bl	8000b78 <__aeabi_d2iz>
 801161a:	4683      	mov	fp, r0
 801161c:	f7ee ff92 	bl	8000544 <__aeabi_i2d>
 8011620:	4602      	mov	r2, r0
 8011622:	460b      	mov	r3, r1
 8011624:	ec43 2b18 	vmov	d8, r2, r3
 8011628:	a367      	add	r3, pc, #412	; (adr r3, 80117c8 <__ieee754_rem_pio2+0x300>)
 801162a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801162e:	f7ee fff3 	bl	8000618 <__aeabi_dmul>
 8011632:	4602      	mov	r2, r0
 8011634:	460b      	mov	r3, r1
 8011636:	4620      	mov	r0, r4
 8011638:	4629      	mov	r1, r5
 801163a:	f7ee fe35 	bl	80002a8 <__aeabi_dsub>
 801163e:	a364      	add	r3, pc, #400	; (adr r3, 80117d0 <__ieee754_rem_pio2+0x308>)
 8011640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011644:	4606      	mov	r6, r0
 8011646:	460f      	mov	r7, r1
 8011648:	ec51 0b18 	vmov	r0, r1, d8
 801164c:	f7ee ffe4 	bl	8000618 <__aeabi_dmul>
 8011650:	f1bb 0f1f 	cmp.w	fp, #31
 8011654:	4604      	mov	r4, r0
 8011656:	460d      	mov	r5, r1
 8011658:	dc0d      	bgt.n	8011676 <__ieee754_rem_pio2+0x1ae>
 801165a:	4b6e      	ldr	r3, [pc, #440]	; (8011814 <__ieee754_rem_pio2+0x34c>)
 801165c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8011660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011664:	4543      	cmp	r3, r8
 8011666:	d006      	beq.n	8011676 <__ieee754_rem_pio2+0x1ae>
 8011668:	4622      	mov	r2, r4
 801166a:	462b      	mov	r3, r5
 801166c:	4630      	mov	r0, r6
 801166e:	4639      	mov	r1, r7
 8011670:	f7ee fe1a 	bl	80002a8 <__aeabi_dsub>
 8011674:	e00e      	b.n	8011694 <__ieee754_rem_pio2+0x1cc>
 8011676:	462b      	mov	r3, r5
 8011678:	4622      	mov	r2, r4
 801167a:	4630      	mov	r0, r6
 801167c:	4639      	mov	r1, r7
 801167e:	f7ee fe13 	bl	80002a8 <__aeabi_dsub>
 8011682:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011686:	9303      	str	r3, [sp, #12]
 8011688:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801168c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8011690:	2b10      	cmp	r3, #16
 8011692:	dc02      	bgt.n	801169a <__ieee754_rem_pio2+0x1d2>
 8011694:	e9ca 0100 	strd	r0, r1, [sl]
 8011698:	e039      	b.n	801170e <__ieee754_rem_pio2+0x246>
 801169a:	a34f      	add	r3, pc, #316	; (adr r3, 80117d8 <__ieee754_rem_pio2+0x310>)
 801169c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116a0:	ec51 0b18 	vmov	r0, r1, d8
 80116a4:	f7ee ffb8 	bl	8000618 <__aeabi_dmul>
 80116a8:	4604      	mov	r4, r0
 80116aa:	460d      	mov	r5, r1
 80116ac:	4602      	mov	r2, r0
 80116ae:	460b      	mov	r3, r1
 80116b0:	4630      	mov	r0, r6
 80116b2:	4639      	mov	r1, r7
 80116b4:	f7ee fdf8 	bl	80002a8 <__aeabi_dsub>
 80116b8:	4602      	mov	r2, r0
 80116ba:	460b      	mov	r3, r1
 80116bc:	4680      	mov	r8, r0
 80116be:	4689      	mov	r9, r1
 80116c0:	4630      	mov	r0, r6
 80116c2:	4639      	mov	r1, r7
 80116c4:	f7ee fdf0 	bl	80002a8 <__aeabi_dsub>
 80116c8:	4622      	mov	r2, r4
 80116ca:	462b      	mov	r3, r5
 80116cc:	f7ee fdec 	bl	80002a8 <__aeabi_dsub>
 80116d0:	a343      	add	r3, pc, #268	; (adr r3, 80117e0 <__ieee754_rem_pio2+0x318>)
 80116d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116d6:	4604      	mov	r4, r0
 80116d8:	460d      	mov	r5, r1
 80116da:	ec51 0b18 	vmov	r0, r1, d8
 80116de:	f7ee ff9b 	bl	8000618 <__aeabi_dmul>
 80116e2:	4622      	mov	r2, r4
 80116e4:	462b      	mov	r3, r5
 80116e6:	f7ee fddf 	bl	80002a8 <__aeabi_dsub>
 80116ea:	4602      	mov	r2, r0
 80116ec:	460b      	mov	r3, r1
 80116ee:	4604      	mov	r4, r0
 80116f0:	460d      	mov	r5, r1
 80116f2:	4640      	mov	r0, r8
 80116f4:	4649      	mov	r1, r9
 80116f6:	f7ee fdd7 	bl	80002a8 <__aeabi_dsub>
 80116fa:	9a03      	ldr	r2, [sp, #12]
 80116fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011700:	1ad3      	subs	r3, r2, r3
 8011702:	2b31      	cmp	r3, #49	; 0x31
 8011704:	dc24      	bgt.n	8011750 <__ieee754_rem_pio2+0x288>
 8011706:	e9ca 0100 	strd	r0, r1, [sl]
 801170a:	4646      	mov	r6, r8
 801170c:	464f      	mov	r7, r9
 801170e:	e9da 8900 	ldrd	r8, r9, [sl]
 8011712:	4630      	mov	r0, r6
 8011714:	4642      	mov	r2, r8
 8011716:	464b      	mov	r3, r9
 8011718:	4639      	mov	r1, r7
 801171a:	f7ee fdc5 	bl	80002a8 <__aeabi_dsub>
 801171e:	462b      	mov	r3, r5
 8011720:	4622      	mov	r2, r4
 8011722:	f7ee fdc1 	bl	80002a8 <__aeabi_dsub>
 8011726:	9b02      	ldr	r3, [sp, #8]
 8011728:	2b00      	cmp	r3, #0
 801172a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801172e:	f6bf af0b 	bge.w	8011548 <__ieee754_rem_pio2+0x80>
 8011732:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011736:	f8ca 3004 	str.w	r3, [sl, #4]
 801173a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801173e:	f8ca 8000 	str.w	r8, [sl]
 8011742:	f8ca 0008 	str.w	r0, [sl, #8]
 8011746:	f8ca 300c 	str.w	r3, [sl, #12]
 801174a:	f1cb 0b00 	rsb	fp, fp, #0
 801174e:	e6fb      	b.n	8011548 <__ieee754_rem_pio2+0x80>
 8011750:	a327      	add	r3, pc, #156	; (adr r3, 80117f0 <__ieee754_rem_pio2+0x328>)
 8011752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011756:	ec51 0b18 	vmov	r0, r1, d8
 801175a:	f7ee ff5d 	bl	8000618 <__aeabi_dmul>
 801175e:	4604      	mov	r4, r0
 8011760:	460d      	mov	r5, r1
 8011762:	4602      	mov	r2, r0
 8011764:	460b      	mov	r3, r1
 8011766:	4640      	mov	r0, r8
 8011768:	4649      	mov	r1, r9
 801176a:	f7ee fd9d 	bl	80002a8 <__aeabi_dsub>
 801176e:	4602      	mov	r2, r0
 8011770:	460b      	mov	r3, r1
 8011772:	4606      	mov	r6, r0
 8011774:	460f      	mov	r7, r1
 8011776:	4640      	mov	r0, r8
 8011778:	4649      	mov	r1, r9
 801177a:	f7ee fd95 	bl	80002a8 <__aeabi_dsub>
 801177e:	4622      	mov	r2, r4
 8011780:	462b      	mov	r3, r5
 8011782:	f7ee fd91 	bl	80002a8 <__aeabi_dsub>
 8011786:	a31c      	add	r3, pc, #112	; (adr r3, 80117f8 <__ieee754_rem_pio2+0x330>)
 8011788:	e9d3 2300 	ldrd	r2, r3, [r3]
 801178c:	4604      	mov	r4, r0
 801178e:	460d      	mov	r5, r1
 8011790:	ec51 0b18 	vmov	r0, r1, d8
 8011794:	f7ee ff40 	bl	8000618 <__aeabi_dmul>
 8011798:	4622      	mov	r2, r4
 801179a:	462b      	mov	r3, r5
 801179c:	f7ee fd84 	bl	80002a8 <__aeabi_dsub>
 80117a0:	4604      	mov	r4, r0
 80117a2:	460d      	mov	r5, r1
 80117a4:	e760      	b.n	8011668 <__ieee754_rem_pio2+0x1a0>
 80117a6:	4b1c      	ldr	r3, [pc, #112]	; (8011818 <__ieee754_rem_pio2+0x350>)
 80117a8:	4598      	cmp	r8, r3
 80117aa:	dd37      	ble.n	801181c <__ieee754_rem_pio2+0x354>
 80117ac:	ee10 2a10 	vmov	r2, s0
 80117b0:	462b      	mov	r3, r5
 80117b2:	4620      	mov	r0, r4
 80117b4:	4629      	mov	r1, r5
 80117b6:	f7ee fd77 	bl	80002a8 <__aeabi_dsub>
 80117ba:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80117be:	e9ca 0100 	strd	r0, r1, [sl]
 80117c2:	e695      	b.n	80114f0 <__ieee754_rem_pio2+0x28>
 80117c4:	f3af 8000 	nop.w
 80117c8:	54400000 	.word	0x54400000
 80117cc:	3ff921fb 	.word	0x3ff921fb
 80117d0:	1a626331 	.word	0x1a626331
 80117d4:	3dd0b461 	.word	0x3dd0b461
 80117d8:	1a600000 	.word	0x1a600000
 80117dc:	3dd0b461 	.word	0x3dd0b461
 80117e0:	2e037073 	.word	0x2e037073
 80117e4:	3ba3198a 	.word	0x3ba3198a
 80117e8:	6dc9c883 	.word	0x6dc9c883
 80117ec:	3fe45f30 	.word	0x3fe45f30
 80117f0:	2e000000 	.word	0x2e000000
 80117f4:	3ba3198a 	.word	0x3ba3198a
 80117f8:	252049c1 	.word	0x252049c1
 80117fc:	397b839a 	.word	0x397b839a
 8011800:	3fe921fb 	.word	0x3fe921fb
 8011804:	4002d97b 	.word	0x4002d97b
 8011808:	3ff921fb 	.word	0x3ff921fb
 801180c:	413921fb 	.word	0x413921fb
 8011810:	3fe00000 	.word	0x3fe00000
 8011814:	08015918 	.word	0x08015918
 8011818:	7fefffff 	.word	0x7fefffff
 801181c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8011820:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8011824:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8011828:	4620      	mov	r0, r4
 801182a:	460d      	mov	r5, r1
 801182c:	f7ef f9a4 	bl	8000b78 <__aeabi_d2iz>
 8011830:	f7ee fe88 	bl	8000544 <__aeabi_i2d>
 8011834:	4602      	mov	r2, r0
 8011836:	460b      	mov	r3, r1
 8011838:	4620      	mov	r0, r4
 801183a:	4629      	mov	r1, r5
 801183c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011840:	f7ee fd32 	bl	80002a8 <__aeabi_dsub>
 8011844:	4b21      	ldr	r3, [pc, #132]	; (80118cc <__ieee754_rem_pio2+0x404>)
 8011846:	2200      	movs	r2, #0
 8011848:	f7ee fee6 	bl	8000618 <__aeabi_dmul>
 801184c:	460d      	mov	r5, r1
 801184e:	4604      	mov	r4, r0
 8011850:	f7ef f992 	bl	8000b78 <__aeabi_d2iz>
 8011854:	f7ee fe76 	bl	8000544 <__aeabi_i2d>
 8011858:	4602      	mov	r2, r0
 801185a:	460b      	mov	r3, r1
 801185c:	4620      	mov	r0, r4
 801185e:	4629      	mov	r1, r5
 8011860:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011864:	f7ee fd20 	bl	80002a8 <__aeabi_dsub>
 8011868:	4b18      	ldr	r3, [pc, #96]	; (80118cc <__ieee754_rem_pio2+0x404>)
 801186a:	2200      	movs	r2, #0
 801186c:	f7ee fed4 	bl	8000618 <__aeabi_dmul>
 8011870:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011874:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8011878:	2703      	movs	r7, #3
 801187a:	2400      	movs	r4, #0
 801187c:	2500      	movs	r5, #0
 801187e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8011882:	4622      	mov	r2, r4
 8011884:	462b      	mov	r3, r5
 8011886:	46b9      	mov	r9, r7
 8011888:	3f01      	subs	r7, #1
 801188a:	f7ef f92d 	bl	8000ae8 <__aeabi_dcmpeq>
 801188e:	2800      	cmp	r0, #0
 8011890:	d1f5      	bne.n	801187e <__ieee754_rem_pio2+0x3b6>
 8011892:	4b0f      	ldr	r3, [pc, #60]	; (80118d0 <__ieee754_rem_pio2+0x408>)
 8011894:	9301      	str	r3, [sp, #4]
 8011896:	2302      	movs	r3, #2
 8011898:	9300      	str	r3, [sp, #0]
 801189a:	4632      	mov	r2, r6
 801189c:	464b      	mov	r3, r9
 801189e:	4651      	mov	r1, sl
 80118a0:	a804      	add	r0, sp, #16
 80118a2:	f000 f8d1 	bl	8011a48 <__kernel_rem_pio2>
 80118a6:	9b02      	ldr	r3, [sp, #8]
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	4683      	mov	fp, r0
 80118ac:	f6bf ae4c 	bge.w	8011548 <__ieee754_rem_pio2+0x80>
 80118b0:	e9da 2100 	ldrd	r2, r1, [sl]
 80118b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80118b8:	e9ca 2300 	strd	r2, r3, [sl]
 80118bc:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80118c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80118c4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80118c8:	e73f      	b.n	801174a <__ieee754_rem_pio2+0x282>
 80118ca:	bf00      	nop
 80118cc:	41700000 	.word	0x41700000
 80118d0:	08015998 	.word	0x08015998

080118d4 <fabs>:
 80118d4:	ec51 0b10 	vmov	r0, r1, d0
 80118d8:	ee10 2a10 	vmov	r2, s0
 80118dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80118e0:	ec43 2b10 	vmov	d0, r2, r3
 80118e4:	4770      	bx	lr
	...

080118e8 <scalbn>:
 80118e8:	b570      	push	{r4, r5, r6, lr}
 80118ea:	ec55 4b10 	vmov	r4, r5, d0
 80118ee:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80118f2:	4606      	mov	r6, r0
 80118f4:	462b      	mov	r3, r5
 80118f6:	b999      	cbnz	r1, 8011920 <scalbn+0x38>
 80118f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80118fc:	4323      	orrs	r3, r4
 80118fe:	d03f      	beq.n	8011980 <scalbn+0x98>
 8011900:	4b35      	ldr	r3, [pc, #212]	; (80119d8 <scalbn+0xf0>)
 8011902:	4629      	mov	r1, r5
 8011904:	ee10 0a10 	vmov	r0, s0
 8011908:	2200      	movs	r2, #0
 801190a:	f7ee fe85 	bl	8000618 <__aeabi_dmul>
 801190e:	4b33      	ldr	r3, [pc, #204]	; (80119dc <scalbn+0xf4>)
 8011910:	429e      	cmp	r6, r3
 8011912:	4604      	mov	r4, r0
 8011914:	460d      	mov	r5, r1
 8011916:	da10      	bge.n	801193a <scalbn+0x52>
 8011918:	a327      	add	r3, pc, #156	; (adr r3, 80119b8 <scalbn+0xd0>)
 801191a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801191e:	e01f      	b.n	8011960 <scalbn+0x78>
 8011920:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8011924:	4291      	cmp	r1, r2
 8011926:	d10c      	bne.n	8011942 <scalbn+0x5a>
 8011928:	ee10 2a10 	vmov	r2, s0
 801192c:	4620      	mov	r0, r4
 801192e:	4629      	mov	r1, r5
 8011930:	f7ee fcbc 	bl	80002ac <__adddf3>
 8011934:	4604      	mov	r4, r0
 8011936:	460d      	mov	r5, r1
 8011938:	e022      	b.n	8011980 <scalbn+0x98>
 801193a:	460b      	mov	r3, r1
 801193c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011940:	3936      	subs	r1, #54	; 0x36
 8011942:	f24c 3250 	movw	r2, #50000	; 0xc350
 8011946:	4296      	cmp	r6, r2
 8011948:	dd0d      	ble.n	8011966 <scalbn+0x7e>
 801194a:	2d00      	cmp	r5, #0
 801194c:	a11c      	add	r1, pc, #112	; (adr r1, 80119c0 <scalbn+0xd8>)
 801194e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011952:	da02      	bge.n	801195a <scalbn+0x72>
 8011954:	a11c      	add	r1, pc, #112	; (adr r1, 80119c8 <scalbn+0xe0>)
 8011956:	e9d1 0100 	ldrd	r0, r1, [r1]
 801195a:	a319      	add	r3, pc, #100	; (adr r3, 80119c0 <scalbn+0xd8>)
 801195c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011960:	f7ee fe5a 	bl	8000618 <__aeabi_dmul>
 8011964:	e7e6      	b.n	8011934 <scalbn+0x4c>
 8011966:	1872      	adds	r2, r6, r1
 8011968:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801196c:	428a      	cmp	r2, r1
 801196e:	dcec      	bgt.n	801194a <scalbn+0x62>
 8011970:	2a00      	cmp	r2, #0
 8011972:	dd08      	ble.n	8011986 <scalbn+0x9e>
 8011974:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011978:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801197c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011980:	ec45 4b10 	vmov	d0, r4, r5
 8011984:	bd70      	pop	{r4, r5, r6, pc}
 8011986:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801198a:	da08      	bge.n	801199e <scalbn+0xb6>
 801198c:	2d00      	cmp	r5, #0
 801198e:	a10a      	add	r1, pc, #40	; (adr r1, 80119b8 <scalbn+0xd0>)
 8011990:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011994:	dac0      	bge.n	8011918 <scalbn+0x30>
 8011996:	a10e      	add	r1, pc, #56	; (adr r1, 80119d0 <scalbn+0xe8>)
 8011998:	e9d1 0100 	ldrd	r0, r1, [r1]
 801199c:	e7bc      	b.n	8011918 <scalbn+0x30>
 801199e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80119a2:	3236      	adds	r2, #54	; 0x36
 80119a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80119a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80119ac:	4620      	mov	r0, r4
 80119ae:	4b0c      	ldr	r3, [pc, #48]	; (80119e0 <scalbn+0xf8>)
 80119b0:	2200      	movs	r2, #0
 80119b2:	e7d5      	b.n	8011960 <scalbn+0x78>
 80119b4:	f3af 8000 	nop.w
 80119b8:	c2f8f359 	.word	0xc2f8f359
 80119bc:	01a56e1f 	.word	0x01a56e1f
 80119c0:	8800759c 	.word	0x8800759c
 80119c4:	7e37e43c 	.word	0x7e37e43c
 80119c8:	8800759c 	.word	0x8800759c
 80119cc:	fe37e43c 	.word	0xfe37e43c
 80119d0:	c2f8f359 	.word	0xc2f8f359
 80119d4:	81a56e1f 	.word	0x81a56e1f
 80119d8:	43500000 	.word	0x43500000
 80119dc:	ffff3cb0 	.word	0xffff3cb0
 80119e0:	3c900000 	.word	0x3c900000

080119e4 <with_errno>:
 80119e4:	b570      	push	{r4, r5, r6, lr}
 80119e6:	4604      	mov	r4, r0
 80119e8:	460d      	mov	r5, r1
 80119ea:	4616      	mov	r6, r2
 80119ec:	f001 fb6a 	bl	80130c4 <__errno>
 80119f0:	4629      	mov	r1, r5
 80119f2:	6006      	str	r6, [r0, #0]
 80119f4:	4620      	mov	r0, r4
 80119f6:	bd70      	pop	{r4, r5, r6, pc}

080119f8 <xflow>:
 80119f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80119fa:	4614      	mov	r4, r2
 80119fc:	461d      	mov	r5, r3
 80119fe:	b108      	cbz	r0, 8011a04 <xflow+0xc>
 8011a00:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011a04:	e9cd 2300 	strd	r2, r3, [sp]
 8011a08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011a0c:	4620      	mov	r0, r4
 8011a0e:	4629      	mov	r1, r5
 8011a10:	f7ee fe02 	bl	8000618 <__aeabi_dmul>
 8011a14:	2222      	movs	r2, #34	; 0x22
 8011a16:	b003      	add	sp, #12
 8011a18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011a1c:	f7ff bfe2 	b.w	80119e4 <with_errno>

08011a20 <__math_uflow>:
 8011a20:	b508      	push	{r3, lr}
 8011a22:	2200      	movs	r2, #0
 8011a24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011a28:	f7ff ffe6 	bl	80119f8 <xflow>
 8011a2c:	ec41 0b10 	vmov	d0, r0, r1
 8011a30:	bd08      	pop	{r3, pc}

08011a32 <__math_oflow>:
 8011a32:	b508      	push	{r3, lr}
 8011a34:	2200      	movs	r2, #0
 8011a36:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8011a3a:	f7ff ffdd 	bl	80119f8 <xflow>
 8011a3e:	ec41 0b10 	vmov	d0, r0, r1
 8011a42:	bd08      	pop	{r3, pc}
 8011a44:	0000      	movs	r0, r0
	...

08011a48 <__kernel_rem_pio2>:
 8011a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a4c:	ed2d 8b02 	vpush	{d8}
 8011a50:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8011a54:	f112 0f14 	cmn.w	r2, #20
 8011a58:	9306      	str	r3, [sp, #24]
 8011a5a:	9104      	str	r1, [sp, #16]
 8011a5c:	4bc2      	ldr	r3, [pc, #776]	; (8011d68 <__kernel_rem_pio2+0x320>)
 8011a5e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8011a60:	9009      	str	r0, [sp, #36]	; 0x24
 8011a62:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011a66:	9300      	str	r3, [sp, #0]
 8011a68:	9b06      	ldr	r3, [sp, #24]
 8011a6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8011a6e:	bfa8      	it	ge
 8011a70:	1ed4      	subge	r4, r2, #3
 8011a72:	9305      	str	r3, [sp, #20]
 8011a74:	bfb2      	itee	lt
 8011a76:	2400      	movlt	r4, #0
 8011a78:	2318      	movge	r3, #24
 8011a7a:	fb94 f4f3 	sdivge	r4, r4, r3
 8011a7e:	f06f 0317 	mvn.w	r3, #23
 8011a82:	fb04 3303 	mla	r3, r4, r3, r3
 8011a86:	eb03 0a02 	add.w	sl, r3, r2
 8011a8a:	9b00      	ldr	r3, [sp, #0]
 8011a8c:	9a05      	ldr	r2, [sp, #20]
 8011a8e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8011d58 <__kernel_rem_pio2+0x310>
 8011a92:	eb03 0802 	add.w	r8, r3, r2
 8011a96:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8011a98:	1aa7      	subs	r7, r4, r2
 8011a9a:	ae20      	add	r6, sp, #128	; 0x80
 8011a9c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011aa0:	2500      	movs	r5, #0
 8011aa2:	4545      	cmp	r5, r8
 8011aa4:	dd13      	ble.n	8011ace <__kernel_rem_pio2+0x86>
 8011aa6:	9b06      	ldr	r3, [sp, #24]
 8011aa8:	aa20      	add	r2, sp, #128	; 0x80
 8011aaa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8011aae:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8011ab2:	f04f 0800 	mov.w	r8, #0
 8011ab6:	9b00      	ldr	r3, [sp, #0]
 8011ab8:	4598      	cmp	r8, r3
 8011aba:	dc31      	bgt.n	8011b20 <__kernel_rem_pio2+0xd8>
 8011abc:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8011d58 <__kernel_rem_pio2+0x310>
 8011ac0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8011ac4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011ac8:	462f      	mov	r7, r5
 8011aca:	2600      	movs	r6, #0
 8011acc:	e01b      	b.n	8011b06 <__kernel_rem_pio2+0xbe>
 8011ace:	42ef      	cmn	r7, r5
 8011ad0:	d407      	bmi.n	8011ae2 <__kernel_rem_pio2+0x9a>
 8011ad2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011ad6:	f7ee fd35 	bl	8000544 <__aeabi_i2d>
 8011ada:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011ade:	3501      	adds	r5, #1
 8011ae0:	e7df      	b.n	8011aa2 <__kernel_rem_pio2+0x5a>
 8011ae2:	ec51 0b18 	vmov	r0, r1, d8
 8011ae6:	e7f8      	b.n	8011ada <__kernel_rem_pio2+0x92>
 8011ae8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011aec:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011af0:	f7ee fd92 	bl	8000618 <__aeabi_dmul>
 8011af4:	4602      	mov	r2, r0
 8011af6:	460b      	mov	r3, r1
 8011af8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011afc:	f7ee fbd6 	bl	80002ac <__adddf3>
 8011b00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011b04:	3601      	adds	r6, #1
 8011b06:	9b05      	ldr	r3, [sp, #20]
 8011b08:	429e      	cmp	r6, r3
 8011b0a:	f1a7 0708 	sub.w	r7, r7, #8
 8011b0e:	ddeb      	ble.n	8011ae8 <__kernel_rem_pio2+0xa0>
 8011b10:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011b14:	f108 0801 	add.w	r8, r8, #1
 8011b18:	ecab 7b02 	vstmia	fp!, {d7}
 8011b1c:	3508      	adds	r5, #8
 8011b1e:	e7ca      	b.n	8011ab6 <__kernel_rem_pio2+0x6e>
 8011b20:	9b00      	ldr	r3, [sp, #0]
 8011b22:	aa0c      	add	r2, sp, #48	; 0x30
 8011b24:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011b28:	930b      	str	r3, [sp, #44]	; 0x2c
 8011b2a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8011b2c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011b30:	9c00      	ldr	r4, [sp, #0]
 8011b32:	930a      	str	r3, [sp, #40]	; 0x28
 8011b34:	00e3      	lsls	r3, r4, #3
 8011b36:	9308      	str	r3, [sp, #32]
 8011b38:	ab98      	add	r3, sp, #608	; 0x260
 8011b3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011b3e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8011b42:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8011b46:	ab70      	add	r3, sp, #448	; 0x1c0
 8011b48:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8011b4c:	46c3      	mov	fp, r8
 8011b4e:	46a1      	mov	r9, r4
 8011b50:	f1b9 0f00 	cmp.w	r9, #0
 8011b54:	f1a5 0508 	sub.w	r5, r5, #8
 8011b58:	dc77      	bgt.n	8011c4a <__kernel_rem_pio2+0x202>
 8011b5a:	ec47 6b10 	vmov	d0, r6, r7
 8011b5e:	4650      	mov	r0, sl
 8011b60:	f7ff fec2 	bl	80118e8 <scalbn>
 8011b64:	ec57 6b10 	vmov	r6, r7, d0
 8011b68:	2200      	movs	r2, #0
 8011b6a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8011b6e:	ee10 0a10 	vmov	r0, s0
 8011b72:	4639      	mov	r1, r7
 8011b74:	f7ee fd50 	bl	8000618 <__aeabi_dmul>
 8011b78:	ec41 0b10 	vmov	d0, r0, r1
 8011b7c:	f000 fab4 	bl	80120e8 <floor>
 8011b80:	4b7a      	ldr	r3, [pc, #488]	; (8011d6c <__kernel_rem_pio2+0x324>)
 8011b82:	ec51 0b10 	vmov	r0, r1, d0
 8011b86:	2200      	movs	r2, #0
 8011b88:	f7ee fd46 	bl	8000618 <__aeabi_dmul>
 8011b8c:	4602      	mov	r2, r0
 8011b8e:	460b      	mov	r3, r1
 8011b90:	4630      	mov	r0, r6
 8011b92:	4639      	mov	r1, r7
 8011b94:	f7ee fb88 	bl	80002a8 <__aeabi_dsub>
 8011b98:	460f      	mov	r7, r1
 8011b9a:	4606      	mov	r6, r0
 8011b9c:	f7ee ffec 	bl	8000b78 <__aeabi_d2iz>
 8011ba0:	9002      	str	r0, [sp, #8]
 8011ba2:	f7ee fccf 	bl	8000544 <__aeabi_i2d>
 8011ba6:	4602      	mov	r2, r0
 8011ba8:	460b      	mov	r3, r1
 8011baa:	4630      	mov	r0, r6
 8011bac:	4639      	mov	r1, r7
 8011bae:	f7ee fb7b 	bl	80002a8 <__aeabi_dsub>
 8011bb2:	f1ba 0f00 	cmp.w	sl, #0
 8011bb6:	4606      	mov	r6, r0
 8011bb8:	460f      	mov	r7, r1
 8011bba:	dd6d      	ble.n	8011c98 <__kernel_rem_pio2+0x250>
 8011bbc:	1e61      	subs	r1, r4, #1
 8011bbe:	ab0c      	add	r3, sp, #48	; 0x30
 8011bc0:	9d02      	ldr	r5, [sp, #8]
 8011bc2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011bc6:	f1ca 0018 	rsb	r0, sl, #24
 8011bca:	fa43 f200 	asr.w	r2, r3, r0
 8011bce:	4415      	add	r5, r2
 8011bd0:	4082      	lsls	r2, r0
 8011bd2:	1a9b      	subs	r3, r3, r2
 8011bd4:	aa0c      	add	r2, sp, #48	; 0x30
 8011bd6:	9502      	str	r5, [sp, #8]
 8011bd8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8011bdc:	f1ca 0217 	rsb	r2, sl, #23
 8011be0:	fa43 fb02 	asr.w	fp, r3, r2
 8011be4:	f1bb 0f00 	cmp.w	fp, #0
 8011be8:	dd65      	ble.n	8011cb6 <__kernel_rem_pio2+0x26e>
 8011bea:	9b02      	ldr	r3, [sp, #8]
 8011bec:	2200      	movs	r2, #0
 8011bee:	3301      	adds	r3, #1
 8011bf0:	9302      	str	r3, [sp, #8]
 8011bf2:	4615      	mov	r5, r2
 8011bf4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8011bf8:	4294      	cmp	r4, r2
 8011bfa:	f300 809f 	bgt.w	8011d3c <__kernel_rem_pio2+0x2f4>
 8011bfe:	f1ba 0f00 	cmp.w	sl, #0
 8011c02:	dd07      	ble.n	8011c14 <__kernel_rem_pio2+0x1cc>
 8011c04:	f1ba 0f01 	cmp.w	sl, #1
 8011c08:	f000 80c1 	beq.w	8011d8e <__kernel_rem_pio2+0x346>
 8011c0c:	f1ba 0f02 	cmp.w	sl, #2
 8011c10:	f000 80c7 	beq.w	8011da2 <__kernel_rem_pio2+0x35a>
 8011c14:	f1bb 0f02 	cmp.w	fp, #2
 8011c18:	d14d      	bne.n	8011cb6 <__kernel_rem_pio2+0x26e>
 8011c1a:	4632      	mov	r2, r6
 8011c1c:	463b      	mov	r3, r7
 8011c1e:	4954      	ldr	r1, [pc, #336]	; (8011d70 <__kernel_rem_pio2+0x328>)
 8011c20:	2000      	movs	r0, #0
 8011c22:	f7ee fb41 	bl	80002a8 <__aeabi_dsub>
 8011c26:	4606      	mov	r6, r0
 8011c28:	460f      	mov	r7, r1
 8011c2a:	2d00      	cmp	r5, #0
 8011c2c:	d043      	beq.n	8011cb6 <__kernel_rem_pio2+0x26e>
 8011c2e:	4650      	mov	r0, sl
 8011c30:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8011d60 <__kernel_rem_pio2+0x318>
 8011c34:	f7ff fe58 	bl	80118e8 <scalbn>
 8011c38:	4630      	mov	r0, r6
 8011c3a:	4639      	mov	r1, r7
 8011c3c:	ec53 2b10 	vmov	r2, r3, d0
 8011c40:	f7ee fb32 	bl	80002a8 <__aeabi_dsub>
 8011c44:	4606      	mov	r6, r0
 8011c46:	460f      	mov	r7, r1
 8011c48:	e035      	b.n	8011cb6 <__kernel_rem_pio2+0x26e>
 8011c4a:	4b4a      	ldr	r3, [pc, #296]	; (8011d74 <__kernel_rem_pio2+0x32c>)
 8011c4c:	2200      	movs	r2, #0
 8011c4e:	4630      	mov	r0, r6
 8011c50:	4639      	mov	r1, r7
 8011c52:	f7ee fce1 	bl	8000618 <__aeabi_dmul>
 8011c56:	f7ee ff8f 	bl	8000b78 <__aeabi_d2iz>
 8011c5a:	f7ee fc73 	bl	8000544 <__aeabi_i2d>
 8011c5e:	4602      	mov	r2, r0
 8011c60:	460b      	mov	r3, r1
 8011c62:	ec43 2b18 	vmov	d8, r2, r3
 8011c66:	4b44      	ldr	r3, [pc, #272]	; (8011d78 <__kernel_rem_pio2+0x330>)
 8011c68:	2200      	movs	r2, #0
 8011c6a:	f7ee fcd5 	bl	8000618 <__aeabi_dmul>
 8011c6e:	4602      	mov	r2, r0
 8011c70:	460b      	mov	r3, r1
 8011c72:	4630      	mov	r0, r6
 8011c74:	4639      	mov	r1, r7
 8011c76:	f7ee fb17 	bl	80002a8 <__aeabi_dsub>
 8011c7a:	f7ee ff7d 	bl	8000b78 <__aeabi_d2iz>
 8011c7e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011c82:	f84b 0b04 	str.w	r0, [fp], #4
 8011c86:	ec51 0b18 	vmov	r0, r1, d8
 8011c8a:	f7ee fb0f 	bl	80002ac <__adddf3>
 8011c8e:	f109 39ff 	add.w	r9, r9, #4294967295
 8011c92:	4606      	mov	r6, r0
 8011c94:	460f      	mov	r7, r1
 8011c96:	e75b      	b.n	8011b50 <__kernel_rem_pio2+0x108>
 8011c98:	d106      	bne.n	8011ca8 <__kernel_rem_pio2+0x260>
 8011c9a:	1e63      	subs	r3, r4, #1
 8011c9c:	aa0c      	add	r2, sp, #48	; 0x30
 8011c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011ca2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8011ca6:	e79d      	b.n	8011be4 <__kernel_rem_pio2+0x19c>
 8011ca8:	4b34      	ldr	r3, [pc, #208]	; (8011d7c <__kernel_rem_pio2+0x334>)
 8011caa:	2200      	movs	r2, #0
 8011cac:	f7ee ff3a 	bl	8000b24 <__aeabi_dcmpge>
 8011cb0:	2800      	cmp	r0, #0
 8011cb2:	d140      	bne.n	8011d36 <__kernel_rem_pio2+0x2ee>
 8011cb4:	4683      	mov	fp, r0
 8011cb6:	2200      	movs	r2, #0
 8011cb8:	2300      	movs	r3, #0
 8011cba:	4630      	mov	r0, r6
 8011cbc:	4639      	mov	r1, r7
 8011cbe:	f7ee ff13 	bl	8000ae8 <__aeabi_dcmpeq>
 8011cc2:	2800      	cmp	r0, #0
 8011cc4:	f000 80c1 	beq.w	8011e4a <__kernel_rem_pio2+0x402>
 8011cc8:	1e65      	subs	r5, r4, #1
 8011cca:	462b      	mov	r3, r5
 8011ccc:	2200      	movs	r2, #0
 8011cce:	9900      	ldr	r1, [sp, #0]
 8011cd0:	428b      	cmp	r3, r1
 8011cd2:	da6d      	bge.n	8011db0 <__kernel_rem_pio2+0x368>
 8011cd4:	2a00      	cmp	r2, #0
 8011cd6:	f000 808a 	beq.w	8011dee <__kernel_rem_pio2+0x3a6>
 8011cda:	ab0c      	add	r3, sp, #48	; 0x30
 8011cdc:	f1aa 0a18 	sub.w	sl, sl, #24
 8011ce0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	f000 80ae 	beq.w	8011e46 <__kernel_rem_pio2+0x3fe>
 8011cea:	4650      	mov	r0, sl
 8011cec:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8011d60 <__kernel_rem_pio2+0x318>
 8011cf0:	f7ff fdfa 	bl	80118e8 <scalbn>
 8011cf4:	1c6b      	adds	r3, r5, #1
 8011cf6:	00da      	lsls	r2, r3, #3
 8011cf8:	9205      	str	r2, [sp, #20]
 8011cfa:	ec57 6b10 	vmov	r6, r7, d0
 8011cfe:	aa70      	add	r2, sp, #448	; 0x1c0
 8011d00:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8011d74 <__kernel_rem_pio2+0x32c>
 8011d04:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8011d08:	462c      	mov	r4, r5
 8011d0a:	f04f 0800 	mov.w	r8, #0
 8011d0e:	2c00      	cmp	r4, #0
 8011d10:	f280 80d4 	bge.w	8011ebc <__kernel_rem_pio2+0x474>
 8011d14:	462c      	mov	r4, r5
 8011d16:	2c00      	cmp	r4, #0
 8011d18:	f2c0 8102 	blt.w	8011f20 <__kernel_rem_pio2+0x4d8>
 8011d1c:	4b18      	ldr	r3, [pc, #96]	; (8011d80 <__kernel_rem_pio2+0x338>)
 8011d1e:	461e      	mov	r6, r3
 8011d20:	ab70      	add	r3, sp, #448	; 0x1c0
 8011d22:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8011d26:	1b2b      	subs	r3, r5, r4
 8011d28:	f04f 0900 	mov.w	r9, #0
 8011d2c:	f04f 0a00 	mov.w	sl, #0
 8011d30:	2700      	movs	r7, #0
 8011d32:	9306      	str	r3, [sp, #24]
 8011d34:	e0e6      	b.n	8011f04 <__kernel_rem_pio2+0x4bc>
 8011d36:	f04f 0b02 	mov.w	fp, #2
 8011d3a:	e756      	b.n	8011bea <__kernel_rem_pio2+0x1a2>
 8011d3c:	f8d8 3000 	ldr.w	r3, [r8]
 8011d40:	bb05      	cbnz	r5, 8011d84 <__kernel_rem_pio2+0x33c>
 8011d42:	b123      	cbz	r3, 8011d4e <__kernel_rem_pio2+0x306>
 8011d44:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8011d48:	f8c8 3000 	str.w	r3, [r8]
 8011d4c:	2301      	movs	r3, #1
 8011d4e:	3201      	adds	r2, #1
 8011d50:	f108 0804 	add.w	r8, r8, #4
 8011d54:	461d      	mov	r5, r3
 8011d56:	e74f      	b.n	8011bf8 <__kernel_rem_pio2+0x1b0>
	...
 8011d64:	3ff00000 	.word	0x3ff00000
 8011d68:	08015ae0 	.word	0x08015ae0
 8011d6c:	40200000 	.word	0x40200000
 8011d70:	3ff00000 	.word	0x3ff00000
 8011d74:	3e700000 	.word	0x3e700000
 8011d78:	41700000 	.word	0x41700000
 8011d7c:	3fe00000 	.word	0x3fe00000
 8011d80:	08015aa0 	.word	0x08015aa0
 8011d84:	1acb      	subs	r3, r1, r3
 8011d86:	f8c8 3000 	str.w	r3, [r8]
 8011d8a:	462b      	mov	r3, r5
 8011d8c:	e7df      	b.n	8011d4e <__kernel_rem_pio2+0x306>
 8011d8e:	1e62      	subs	r2, r4, #1
 8011d90:	ab0c      	add	r3, sp, #48	; 0x30
 8011d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d96:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011d9a:	a90c      	add	r1, sp, #48	; 0x30
 8011d9c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011da0:	e738      	b.n	8011c14 <__kernel_rem_pio2+0x1cc>
 8011da2:	1e62      	subs	r2, r4, #1
 8011da4:	ab0c      	add	r3, sp, #48	; 0x30
 8011da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011daa:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011dae:	e7f4      	b.n	8011d9a <__kernel_rem_pio2+0x352>
 8011db0:	a90c      	add	r1, sp, #48	; 0x30
 8011db2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011db6:	3b01      	subs	r3, #1
 8011db8:	430a      	orrs	r2, r1
 8011dba:	e788      	b.n	8011cce <__kernel_rem_pio2+0x286>
 8011dbc:	3301      	adds	r3, #1
 8011dbe:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8011dc2:	2900      	cmp	r1, #0
 8011dc4:	d0fa      	beq.n	8011dbc <__kernel_rem_pio2+0x374>
 8011dc6:	9a08      	ldr	r2, [sp, #32]
 8011dc8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8011dcc:	446a      	add	r2, sp
 8011dce:	3a98      	subs	r2, #152	; 0x98
 8011dd0:	9208      	str	r2, [sp, #32]
 8011dd2:	9a06      	ldr	r2, [sp, #24]
 8011dd4:	a920      	add	r1, sp, #128	; 0x80
 8011dd6:	18a2      	adds	r2, r4, r2
 8011dd8:	18e3      	adds	r3, r4, r3
 8011dda:	f104 0801 	add.w	r8, r4, #1
 8011dde:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8011de2:	9302      	str	r3, [sp, #8]
 8011de4:	9b02      	ldr	r3, [sp, #8]
 8011de6:	4543      	cmp	r3, r8
 8011de8:	da04      	bge.n	8011df4 <__kernel_rem_pio2+0x3ac>
 8011dea:	461c      	mov	r4, r3
 8011dec:	e6a2      	b.n	8011b34 <__kernel_rem_pio2+0xec>
 8011dee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011df0:	2301      	movs	r3, #1
 8011df2:	e7e4      	b.n	8011dbe <__kernel_rem_pio2+0x376>
 8011df4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011df6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8011dfa:	f7ee fba3 	bl	8000544 <__aeabi_i2d>
 8011dfe:	e8e5 0102 	strd	r0, r1, [r5], #8
 8011e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e04:	46ab      	mov	fp, r5
 8011e06:	461c      	mov	r4, r3
 8011e08:	f04f 0900 	mov.w	r9, #0
 8011e0c:	2600      	movs	r6, #0
 8011e0e:	2700      	movs	r7, #0
 8011e10:	9b05      	ldr	r3, [sp, #20]
 8011e12:	4599      	cmp	r9, r3
 8011e14:	dd06      	ble.n	8011e24 <__kernel_rem_pio2+0x3dc>
 8011e16:	9b08      	ldr	r3, [sp, #32]
 8011e18:	e8e3 6702 	strd	r6, r7, [r3], #8
 8011e1c:	f108 0801 	add.w	r8, r8, #1
 8011e20:	9308      	str	r3, [sp, #32]
 8011e22:	e7df      	b.n	8011de4 <__kernel_rem_pio2+0x39c>
 8011e24:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8011e28:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8011e2c:	f7ee fbf4 	bl	8000618 <__aeabi_dmul>
 8011e30:	4602      	mov	r2, r0
 8011e32:	460b      	mov	r3, r1
 8011e34:	4630      	mov	r0, r6
 8011e36:	4639      	mov	r1, r7
 8011e38:	f7ee fa38 	bl	80002ac <__adddf3>
 8011e3c:	f109 0901 	add.w	r9, r9, #1
 8011e40:	4606      	mov	r6, r0
 8011e42:	460f      	mov	r7, r1
 8011e44:	e7e4      	b.n	8011e10 <__kernel_rem_pio2+0x3c8>
 8011e46:	3d01      	subs	r5, #1
 8011e48:	e747      	b.n	8011cda <__kernel_rem_pio2+0x292>
 8011e4a:	ec47 6b10 	vmov	d0, r6, r7
 8011e4e:	f1ca 0000 	rsb	r0, sl, #0
 8011e52:	f7ff fd49 	bl	80118e8 <scalbn>
 8011e56:	ec57 6b10 	vmov	r6, r7, d0
 8011e5a:	4ba0      	ldr	r3, [pc, #640]	; (80120dc <__kernel_rem_pio2+0x694>)
 8011e5c:	ee10 0a10 	vmov	r0, s0
 8011e60:	2200      	movs	r2, #0
 8011e62:	4639      	mov	r1, r7
 8011e64:	f7ee fe5e 	bl	8000b24 <__aeabi_dcmpge>
 8011e68:	b1f8      	cbz	r0, 8011eaa <__kernel_rem_pio2+0x462>
 8011e6a:	4b9d      	ldr	r3, [pc, #628]	; (80120e0 <__kernel_rem_pio2+0x698>)
 8011e6c:	2200      	movs	r2, #0
 8011e6e:	4630      	mov	r0, r6
 8011e70:	4639      	mov	r1, r7
 8011e72:	f7ee fbd1 	bl	8000618 <__aeabi_dmul>
 8011e76:	f7ee fe7f 	bl	8000b78 <__aeabi_d2iz>
 8011e7a:	4680      	mov	r8, r0
 8011e7c:	f7ee fb62 	bl	8000544 <__aeabi_i2d>
 8011e80:	4b96      	ldr	r3, [pc, #600]	; (80120dc <__kernel_rem_pio2+0x694>)
 8011e82:	2200      	movs	r2, #0
 8011e84:	f7ee fbc8 	bl	8000618 <__aeabi_dmul>
 8011e88:	460b      	mov	r3, r1
 8011e8a:	4602      	mov	r2, r0
 8011e8c:	4639      	mov	r1, r7
 8011e8e:	4630      	mov	r0, r6
 8011e90:	f7ee fa0a 	bl	80002a8 <__aeabi_dsub>
 8011e94:	f7ee fe70 	bl	8000b78 <__aeabi_d2iz>
 8011e98:	1c65      	adds	r5, r4, #1
 8011e9a:	ab0c      	add	r3, sp, #48	; 0x30
 8011e9c:	f10a 0a18 	add.w	sl, sl, #24
 8011ea0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011ea4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8011ea8:	e71f      	b.n	8011cea <__kernel_rem_pio2+0x2a2>
 8011eaa:	4630      	mov	r0, r6
 8011eac:	4639      	mov	r1, r7
 8011eae:	f7ee fe63 	bl	8000b78 <__aeabi_d2iz>
 8011eb2:	ab0c      	add	r3, sp, #48	; 0x30
 8011eb4:	4625      	mov	r5, r4
 8011eb6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011eba:	e716      	b.n	8011cea <__kernel_rem_pio2+0x2a2>
 8011ebc:	ab0c      	add	r3, sp, #48	; 0x30
 8011ebe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011ec2:	f7ee fb3f 	bl	8000544 <__aeabi_i2d>
 8011ec6:	4632      	mov	r2, r6
 8011ec8:	463b      	mov	r3, r7
 8011eca:	f7ee fba5 	bl	8000618 <__aeabi_dmul>
 8011ece:	4642      	mov	r2, r8
 8011ed0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8011ed4:	464b      	mov	r3, r9
 8011ed6:	4630      	mov	r0, r6
 8011ed8:	4639      	mov	r1, r7
 8011eda:	f7ee fb9d 	bl	8000618 <__aeabi_dmul>
 8011ede:	3c01      	subs	r4, #1
 8011ee0:	4606      	mov	r6, r0
 8011ee2:	460f      	mov	r7, r1
 8011ee4:	e713      	b.n	8011d0e <__kernel_rem_pio2+0x2c6>
 8011ee6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8011eea:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8011eee:	f7ee fb93 	bl	8000618 <__aeabi_dmul>
 8011ef2:	4602      	mov	r2, r0
 8011ef4:	460b      	mov	r3, r1
 8011ef6:	4648      	mov	r0, r9
 8011ef8:	4651      	mov	r1, sl
 8011efa:	f7ee f9d7 	bl	80002ac <__adddf3>
 8011efe:	3701      	adds	r7, #1
 8011f00:	4681      	mov	r9, r0
 8011f02:	468a      	mov	sl, r1
 8011f04:	9b00      	ldr	r3, [sp, #0]
 8011f06:	429f      	cmp	r7, r3
 8011f08:	dc02      	bgt.n	8011f10 <__kernel_rem_pio2+0x4c8>
 8011f0a:	9b06      	ldr	r3, [sp, #24]
 8011f0c:	429f      	cmp	r7, r3
 8011f0e:	ddea      	ble.n	8011ee6 <__kernel_rem_pio2+0x49e>
 8011f10:	9a06      	ldr	r2, [sp, #24]
 8011f12:	ab48      	add	r3, sp, #288	; 0x120
 8011f14:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8011f18:	e9c6 9a00 	strd	r9, sl, [r6]
 8011f1c:	3c01      	subs	r4, #1
 8011f1e:	e6fa      	b.n	8011d16 <__kernel_rem_pio2+0x2ce>
 8011f20:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8011f22:	2b02      	cmp	r3, #2
 8011f24:	dc0b      	bgt.n	8011f3e <__kernel_rem_pio2+0x4f6>
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	dc39      	bgt.n	8011f9e <__kernel_rem_pio2+0x556>
 8011f2a:	d05d      	beq.n	8011fe8 <__kernel_rem_pio2+0x5a0>
 8011f2c:	9b02      	ldr	r3, [sp, #8]
 8011f2e:	f003 0007 	and.w	r0, r3, #7
 8011f32:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8011f36:	ecbd 8b02 	vpop	{d8}
 8011f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f3e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8011f40:	2b03      	cmp	r3, #3
 8011f42:	d1f3      	bne.n	8011f2c <__kernel_rem_pio2+0x4e4>
 8011f44:	9b05      	ldr	r3, [sp, #20]
 8011f46:	9500      	str	r5, [sp, #0]
 8011f48:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8011f4c:	eb0d 0403 	add.w	r4, sp, r3
 8011f50:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8011f54:	46a2      	mov	sl, r4
 8011f56:	9b00      	ldr	r3, [sp, #0]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	f1aa 0a08 	sub.w	sl, sl, #8
 8011f5e:	dc69      	bgt.n	8012034 <__kernel_rem_pio2+0x5ec>
 8011f60:	46aa      	mov	sl, r5
 8011f62:	f1ba 0f01 	cmp.w	sl, #1
 8011f66:	f1a4 0408 	sub.w	r4, r4, #8
 8011f6a:	f300 8083 	bgt.w	8012074 <__kernel_rem_pio2+0x62c>
 8011f6e:	9c05      	ldr	r4, [sp, #20]
 8011f70:	ab48      	add	r3, sp, #288	; 0x120
 8011f72:	441c      	add	r4, r3
 8011f74:	2000      	movs	r0, #0
 8011f76:	2100      	movs	r1, #0
 8011f78:	2d01      	cmp	r5, #1
 8011f7a:	f300 809a 	bgt.w	80120b2 <__kernel_rem_pio2+0x66a>
 8011f7e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8011f82:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8011f86:	f1bb 0f00 	cmp.w	fp, #0
 8011f8a:	f040 8098 	bne.w	80120be <__kernel_rem_pio2+0x676>
 8011f8e:	9b04      	ldr	r3, [sp, #16]
 8011f90:	e9c3 7800 	strd	r7, r8, [r3]
 8011f94:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8011f98:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8011f9c:	e7c6      	b.n	8011f2c <__kernel_rem_pio2+0x4e4>
 8011f9e:	9e05      	ldr	r6, [sp, #20]
 8011fa0:	ab48      	add	r3, sp, #288	; 0x120
 8011fa2:	441e      	add	r6, r3
 8011fa4:	462c      	mov	r4, r5
 8011fa6:	2000      	movs	r0, #0
 8011fa8:	2100      	movs	r1, #0
 8011faa:	2c00      	cmp	r4, #0
 8011fac:	da33      	bge.n	8012016 <__kernel_rem_pio2+0x5ce>
 8011fae:	f1bb 0f00 	cmp.w	fp, #0
 8011fb2:	d036      	beq.n	8012022 <__kernel_rem_pio2+0x5da>
 8011fb4:	4602      	mov	r2, r0
 8011fb6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011fba:	9c04      	ldr	r4, [sp, #16]
 8011fbc:	e9c4 2300 	strd	r2, r3, [r4]
 8011fc0:	4602      	mov	r2, r0
 8011fc2:	460b      	mov	r3, r1
 8011fc4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8011fc8:	f7ee f96e 	bl	80002a8 <__aeabi_dsub>
 8011fcc:	ae4a      	add	r6, sp, #296	; 0x128
 8011fce:	2401      	movs	r4, #1
 8011fd0:	42a5      	cmp	r5, r4
 8011fd2:	da29      	bge.n	8012028 <__kernel_rem_pio2+0x5e0>
 8011fd4:	f1bb 0f00 	cmp.w	fp, #0
 8011fd8:	d002      	beq.n	8011fe0 <__kernel_rem_pio2+0x598>
 8011fda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011fde:	4619      	mov	r1, r3
 8011fe0:	9b04      	ldr	r3, [sp, #16]
 8011fe2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011fe6:	e7a1      	b.n	8011f2c <__kernel_rem_pio2+0x4e4>
 8011fe8:	9c05      	ldr	r4, [sp, #20]
 8011fea:	ab48      	add	r3, sp, #288	; 0x120
 8011fec:	441c      	add	r4, r3
 8011fee:	2000      	movs	r0, #0
 8011ff0:	2100      	movs	r1, #0
 8011ff2:	2d00      	cmp	r5, #0
 8011ff4:	da09      	bge.n	801200a <__kernel_rem_pio2+0x5c2>
 8011ff6:	f1bb 0f00 	cmp.w	fp, #0
 8011ffa:	d002      	beq.n	8012002 <__kernel_rem_pio2+0x5ba>
 8011ffc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012000:	4619      	mov	r1, r3
 8012002:	9b04      	ldr	r3, [sp, #16]
 8012004:	e9c3 0100 	strd	r0, r1, [r3]
 8012008:	e790      	b.n	8011f2c <__kernel_rem_pio2+0x4e4>
 801200a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801200e:	f7ee f94d 	bl	80002ac <__adddf3>
 8012012:	3d01      	subs	r5, #1
 8012014:	e7ed      	b.n	8011ff2 <__kernel_rem_pio2+0x5aa>
 8012016:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801201a:	f7ee f947 	bl	80002ac <__adddf3>
 801201e:	3c01      	subs	r4, #1
 8012020:	e7c3      	b.n	8011faa <__kernel_rem_pio2+0x562>
 8012022:	4602      	mov	r2, r0
 8012024:	460b      	mov	r3, r1
 8012026:	e7c8      	b.n	8011fba <__kernel_rem_pio2+0x572>
 8012028:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801202c:	f7ee f93e 	bl	80002ac <__adddf3>
 8012030:	3401      	adds	r4, #1
 8012032:	e7cd      	b.n	8011fd0 <__kernel_rem_pio2+0x588>
 8012034:	e9da 8900 	ldrd	r8, r9, [sl]
 8012038:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801203c:	9b00      	ldr	r3, [sp, #0]
 801203e:	3b01      	subs	r3, #1
 8012040:	9300      	str	r3, [sp, #0]
 8012042:	4632      	mov	r2, r6
 8012044:	463b      	mov	r3, r7
 8012046:	4640      	mov	r0, r8
 8012048:	4649      	mov	r1, r9
 801204a:	f7ee f92f 	bl	80002ac <__adddf3>
 801204e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012052:	4602      	mov	r2, r0
 8012054:	460b      	mov	r3, r1
 8012056:	4640      	mov	r0, r8
 8012058:	4649      	mov	r1, r9
 801205a:	f7ee f925 	bl	80002a8 <__aeabi_dsub>
 801205e:	4632      	mov	r2, r6
 8012060:	463b      	mov	r3, r7
 8012062:	f7ee f923 	bl	80002ac <__adddf3>
 8012066:	ed9d 7b06 	vldr	d7, [sp, #24]
 801206a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801206e:	ed8a 7b00 	vstr	d7, [sl]
 8012072:	e770      	b.n	8011f56 <__kernel_rem_pio2+0x50e>
 8012074:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012078:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801207c:	4640      	mov	r0, r8
 801207e:	4632      	mov	r2, r6
 8012080:	463b      	mov	r3, r7
 8012082:	4649      	mov	r1, r9
 8012084:	f7ee f912 	bl	80002ac <__adddf3>
 8012088:	e9cd 0100 	strd	r0, r1, [sp]
 801208c:	4602      	mov	r2, r0
 801208e:	460b      	mov	r3, r1
 8012090:	4640      	mov	r0, r8
 8012092:	4649      	mov	r1, r9
 8012094:	f7ee f908 	bl	80002a8 <__aeabi_dsub>
 8012098:	4632      	mov	r2, r6
 801209a:	463b      	mov	r3, r7
 801209c:	f7ee f906 	bl	80002ac <__adddf3>
 80120a0:	ed9d 7b00 	vldr	d7, [sp]
 80120a4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80120a8:	ed84 7b00 	vstr	d7, [r4]
 80120ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 80120b0:	e757      	b.n	8011f62 <__kernel_rem_pio2+0x51a>
 80120b2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80120b6:	f7ee f8f9 	bl	80002ac <__adddf3>
 80120ba:	3d01      	subs	r5, #1
 80120bc:	e75c      	b.n	8011f78 <__kernel_rem_pio2+0x530>
 80120be:	9b04      	ldr	r3, [sp, #16]
 80120c0:	9a04      	ldr	r2, [sp, #16]
 80120c2:	601f      	str	r7, [r3, #0]
 80120c4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80120c8:	605c      	str	r4, [r3, #4]
 80120ca:	609d      	str	r5, [r3, #8]
 80120cc:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80120d0:	60d3      	str	r3, [r2, #12]
 80120d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80120d6:	6110      	str	r0, [r2, #16]
 80120d8:	6153      	str	r3, [r2, #20]
 80120da:	e727      	b.n	8011f2c <__kernel_rem_pio2+0x4e4>
 80120dc:	41700000 	.word	0x41700000
 80120e0:	3e700000 	.word	0x3e700000
 80120e4:	00000000 	.word	0x00000000

080120e8 <floor>:
 80120e8:	ec51 0b10 	vmov	r0, r1, d0
 80120ec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80120f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120f4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 80120f8:	2e13      	cmp	r6, #19
 80120fa:	ee10 5a10 	vmov	r5, s0
 80120fe:	ee10 8a10 	vmov	r8, s0
 8012102:	460c      	mov	r4, r1
 8012104:	dc31      	bgt.n	801216a <floor+0x82>
 8012106:	2e00      	cmp	r6, #0
 8012108:	da14      	bge.n	8012134 <floor+0x4c>
 801210a:	a333      	add	r3, pc, #204	; (adr r3, 80121d8 <floor+0xf0>)
 801210c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012110:	f7ee f8cc 	bl	80002ac <__adddf3>
 8012114:	2200      	movs	r2, #0
 8012116:	2300      	movs	r3, #0
 8012118:	f7ee fd0e 	bl	8000b38 <__aeabi_dcmpgt>
 801211c:	b138      	cbz	r0, 801212e <floor+0x46>
 801211e:	2c00      	cmp	r4, #0
 8012120:	da53      	bge.n	80121ca <floor+0xe2>
 8012122:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8012126:	4325      	orrs	r5, r4
 8012128:	d052      	beq.n	80121d0 <floor+0xe8>
 801212a:	4c2d      	ldr	r4, [pc, #180]	; (80121e0 <floor+0xf8>)
 801212c:	2500      	movs	r5, #0
 801212e:	4621      	mov	r1, r4
 8012130:	4628      	mov	r0, r5
 8012132:	e024      	b.n	801217e <floor+0x96>
 8012134:	4f2b      	ldr	r7, [pc, #172]	; (80121e4 <floor+0xfc>)
 8012136:	4137      	asrs	r7, r6
 8012138:	ea01 0307 	and.w	r3, r1, r7
 801213c:	4303      	orrs	r3, r0
 801213e:	d01e      	beq.n	801217e <floor+0x96>
 8012140:	a325      	add	r3, pc, #148	; (adr r3, 80121d8 <floor+0xf0>)
 8012142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012146:	f7ee f8b1 	bl	80002ac <__adddf3>
 801214a:	2200      	movs	r2, #0
 801214c:	2300      	movs	r3, #0
 801214e:	f7ee fcf3 	bl	8000b38 <__aeabi_dcmpgt>
 8012152:	2800      	cmp	r0, #0
 8012154:	d0eb      	beq.n	801212e <floor+0x46>
 8012156:	2c00      	cmp	r4, #0
 8012158:	bfbe      	ittt	lt
 801215a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801215e:	4133      	asrlt	r3, r6
 8012160:	18e4      	addlt	r4, r4, r3
 8012162:	ea24 0407 	bic.w	r4, r4, r7
 8012166:	2500      	movs	r5, #0
 8012168:	e7e1      	b.n	801212e <floor+0x46>
 801216a:	2e33      	cmp	r6, #51	; 0x33
 801216c:	dd0b      	ble.n	8012186 <floor+0x9e>
 801216e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012172:	d104      	bne.n	801217e <floor+0x96>
 8012174:	ee10 2a10 	vmov	r2, s0
 8012178:	460b      	mov	r3, r1
 801217a:	f7ee f897 	bl	80002ac <__adddf3>
 801217e:	ec41 0b10 	vmov	d0, r0, r1
 8012182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012186:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 801218a:	f04f 37ff 	mov.w	r7, #4294967295
 801218e:	40df      	lsrs	r7, r3
 8012190:	4238      	tst	r0, r7
 8012192:	d0f4      	beq.n	801217e <floor+0x96>
 8012194:	a310      	add	r3, pc, #64	; (adr r3, 80121d8 <floor+0xf0>)
 8012196:	e9d3 2300 	ldrd	r2, r3, [r3]
 801219a:	f7ee f887 	bl	80002ac <__adddf3>
 801219e:	2200      	movs	r2, #0
 80121a0:	2300      	movs	r3, #0
 80121a2:	f7ee fcc9 	bl	8000b38 <__aeabi_dcmpgt>
 80121a6:	2800      	cmp	r0, #0
 80121a8:	d0c1      	beq.n	801212e <floor+0x46>
 80121aa:	2c00      	cmp	r4, #0
 80121ac:	da0a      	bge.n	80121c4 <floor+0xdc>
 80121ae:	2e14      	cmp	r6, #20
 80121b0:	d101      	bne.n	80121b6 <floor+0xce>
 80121b2:	3401      	adds	r4, #1
 80121b4:	e006      	b.n	80121c4 <floor+0xdc>
 80121b6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80121ba:	2301      	movs	r3, #1
 80121bc:	40b3      	lsls	r3, r6
 80121be:	441d      	add	r5, r3
 80121c0:	45a8      	cmp	r8, r5
 80121c2:	d8f6      	bhi.n	80121b2 <floor+0xca>
 80121c4:	ea25 0507 	bic.w	r5, r5, r7
 80121c8:	e7b1      	b.n	801212e <floor+0x46>
 80121ca:	2500      	movs	r5, #0
 80121cc:	462c      	mov	r4, r5
 80121ce:	e7ae      	b.n	801212e <floor+0x46>
 80121d0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80121d4:	e7ab      	b.n	801212e <floor+0x46>
 80121d6:	bf00      	nop
 80121d8:	8800759c 	.word	0x8800759c
 80121dc:	7e37e43c 	.word	0x7e37e43c
 80121e0:	bff00000 	.word	0xbff00000
 80121e4:	000fffff 	.word	0x000fffff

080121e8 <realloc>:
 80121e8:	4b02      	ldr	r3, [pc, #8]	; (80121f4 <realloc+0xc>)
 80121ea:	460a      	mov	r2, r1
 80121ec:	4601      	mov	r1, r0
 80121ee:	6818      	ldr	r0, [r3, #0]
 80121f0:	f000 b802 	b.w	80121f8 <_realloc_r>
 80121f4:	20000088 	.word	0x20000088

080121f8 <_realloc_r>:
 80121f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121fc:	4680      	mov	r8, r0
 80121fe:	4614      	mov	r4, r2
 8012200:	460e      	mov	r6, r1
 8012202:	b921      	cbnz	r1, 801220e <_realloc_r+0x16>
 8012204:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012208:	4611      	mov	r1, r2
 801220a:	f001 be87 	b.w	8013f1c <_malloc_r>
 801220e:	b92a      	cbnz	r2, 801221c <_realloc_r+0x24>
 8012210:	f001 fe10 	bl	8013e34 <_free_r>
 8012214:	4625      	mov	r5, r4
 8012216:	4628      	mov	r0, r5
 8012218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801221c:	f002 fa86 	bl	801472c <_malloc_usable_size_r>
 8012220:	4284      	cmp	r4, r0
 8012222:	4607      	mov	r7, r0
 8012224:	d802      	bhi.n	801222c <_realloc_r+0x34>
 8012226:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801222a:	d812      	bhi.n	8012252 <_realloc_r+0x5a>
 801222c:	4621      	mov	r1, r4
 801222e:	4640      	mov	r0, r8
 8012230:	f001 fe74 	bl	8013f1c <_malloc_r>
 8012234:	4605      	mov	r5, r0
 8012236:	2800      	cmp	r0, #0
 8012238:	d0ed      	beq.n	8012216 <_realloc_r+0x1e>
 801223a:	42bc      	cmp	r4, r7
 801223c:	4622      	mov	r2, r4
 801223e:	4631      	mov	r1, r6
 8012240:	bf28      	it	cs
 8012242:	463a      	movcs	r2, r7
 8012244:	f000 ff6b 	bl	801311e <memcpy>
 8012248:	4631      	mov	r1, r6
 801224a:	4640      	mov	r0, r8
 801224c:	f001 fdf2 	bl	8013e34 <_free_r>
 8012250:	e7e1      	b.n	8012216 <_realloc_r+0x1e>
 8012252:	4635      	mov	r5, r6
 8012254:	e7df      	b.n	8012216 <_realloc_r+0x1e>

08012256 <__cvt>:
 8012256:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801225a:	ec55 4b10 	vmov	r4, r5, d0
 801225e:	2d00      	cmp	r5, #0
 8012260:	460e      	mov	r6, r1
 8012262:	4619      	mov	r1, r3
 8012264:	462b      	mov	r3, r5
 8012266:	bfbb      	ittet	lt
 8012268:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801226c:	461d      	movlt	r5, r3
 801226e:	2300      	movge	r3, #0
 8012270:	232d      	movlt	r3, #45	; 0x2d
 8012272:	700b      	strb	r3, [r1, #0]
 8012274:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012276:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801227a:	4691      	mov	r9, r2
 801227c:	f023 0820 	bic.w	r8, r3, #32
 8012280:	bfbc      	itt	lt
 8012282:	4622      	movlt	r2, r4
 8012284:	4614      	movlt	r4, r2
 8012286:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801228a:	d005      	beq.n	8012298 <__cvt+0x42>
 801228c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8012290:	d100      	bne.n	8012294 <__cvt+0x3e>
 8012292:	3601      	adds	r6, #1
 8012294:	2102      	movs	r1, #2
 8012296:	e000      	b.n	801229a <__cvt+0x44>
 8012298:	2103      	movs	r1, #3
 801229a:	ab03      	add	r3, sp, #12
 801229c:	9301      	str	r3, [sp, #4]
 801229e:	ab02      	add	r3, sp, #8
 80122a0:	9300      	str	r3, [sp, #0]
 80122a2:	ec45 4b10 	vmov	d0, r4, r5
 80122a6:	4653      	mov	r3, sl
 80122a8:	4632      	mov	r2, r6
 80122aa:	f000 ffd1 	bl	8013250 <_dtoa_r>
 80122ae:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80122b2:	4607      	mov	r7, r0
 80122b4:	d102      	bne.n	80122bc <__cvt+0x66>
 80122b6:	f019 0f01 	tst.w	r9, #1
 80122ba:	d022      	beq.n	8012302 <__cvt+0xac>
 80122bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80122c0:	eb07 0906 	add.w	r9, r7, r6
 80122c4:	d110      	bne.n	80122e8 <__cvt+0x92>
 80122c6:	783b      	ldrb	r3, [r7, #0]
 80122c8:	2b30      	cmp	r3, #48	; 0x30
 80122ca:	d10a      	bne.n	80122e2 <__cvt+0x8c>
 80122cc:	2200      	movs	r2, #0
 80122ce:	2300      	movs	r3, #0
 80122d0:	4620      	mov	r0, r4
 80122d2:	4629      	mov	r1, r5
 80122d4:	f7ee fc08 	bl	8000ae8 <__aeabi_dcmpeq>
 80122d8:	b918      	cbnz	r0, 80122e2 <__cvt+0x8c>
 80122da:	f1c6 0601 	rsb	r6, r6, #1
 80122de:	f8ca 6000 	str.w	r6, [sl]
 80122e2:	f8da 3000 	ldr.w	r3, [sl]
 80122e6:	4499      	add	r9, r3
 80122e8:	2200      	movs	r2, #0
 80122ea:	2300      	movs	r3, #0
 80122ec:	4620      	mov	r0, r4
 80122ee:	4629      	mov	r1, r5
 80122f0:	f7ee fbfa 	bl	8000ae8 <__aeabi_dcmpeq>
 80122f4:	b108      	cbz	r0, 80122fa <__cvt+0xa4>
 80122f6:	f8cd 900c 	str.w	r9, [sp, #12]
 80122fa:	2230      	movs	r2, #48	; 0x30
 80122fc:	9b03      	ldr	r3, [sp, #12]
 80122fe:	454b      	cmp	r3, r9
 8012300:	d307      	bcc.n	8012312 <__cvt+0xbc>
 8012302:	9b03      	ldr	r3, [sp, #12]
 8012304:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012306:	1bdb      	subs	r3, r3, r7
 8012308:	4638      	mov	r0, r7
 801230a:	6013      	str	r3, [r2, #0]
 801230c:	b004      	add	sp, #16
 801230e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012312:	1c59      	adds	r1, r3, #1
 8012314:	9103      	str	r1, [sp, #12]
 8012316:	701a      	strb	r2, [r3, #0]
 8012318:	e7f0      	b.n	80122fc <__cvt+0xa6>

0801231a <__exponent>:
 801231a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801231c:	4603      	mov	r3, r0
 801231e:	2900      	cmp	r1, #0
 8012320:	bfb8      	it	lt
 8012322:	4249      	neglt	r1, r1
 8012324:	f803 2b02 	strb.w	r2, [r3], #2
 8012328:	bfb4      	ite	lt
 801232a:	222d      	movlt	r2, #45	; 0x2d
 801232c:	222b      	movge	r2, #43	; 0x2b
 801232e:	2909      	cmp	r1, #9
 8012330:	7042      	strb	r2, [r0, #1]
 8012332:	dd2a      	ble.n	801238a <__exponent+0x70>
 8012334:	f10d 0207 	add.w	r2, sp, #7
 8012338:	4617      	mov	r7, r2
 801233a:	260a      	movs	r6, #10
 801233c:	4694      	mov	ip, r2
 801233e:	fb91 f5f6 	sdiv	r5, r1, r6
 8012342:	fb06 1415 	mls	r4, r6, r5, r1
 8012346:	3430      	adds	r4, #48	; 0x30
 8012348:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801234c:	460c      	mov	r4, r1
 801234e:	2c63      	cmp	r4, #99	; 0x63
 8012350:	f102 32ff 	add.w	r2, r2, #4294967295
 8012354:	4629      	mov	r1, r5
 8012356:	dcf1      	bgt.n	801233c <__exponent+0x22>
 8012358:	3130      	adds	r1, #48	; 0x30
 801235a:	f1ac 0402 	sub.w	r4, ip, #2
 801235e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012362:	1c41      	adds	r1, r0, #1
 8012364:	4622      	mov	r2, r4
 8012366:	42ba      	cmp	r2, r7
 8012368:	d30a      	bcc.n	8012380 <__exponent+0x66>
 801236a:	f10d 0209 	add.w	r2, sp, #9
 801236e:	eba2 020c 	sub.w	r2, r2, ip
 8012372:	42bc      	cmp	r4, r7
 8012374:	bf88      	it	hi
 8012376:	2200      	movhi	r2, #0
 8012378:	4413      	add	r3, r2
 801237a:	1a18      	subs	r0, r3, r0
 801237c:	b003      	add	sp, #12
 801237e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012380:	f812 5b01 	ldrb.w	r5, [r2], #1
 8012384:	f801 5f01 	strb.w	r5, [r1, #1]!
 8012388:	e7ed      	b.n	8012366 <__exponent+0x4c>
 801238a:	2330      	movs	r3, #48	; 0x30
 801238c:	3130      	adds	r1, #48	; 0x30
 801238e:	7083      	strb	r3, [r0, #2]
 8012390:	70c1      	strb	r1, [r0, #3]
 8012392:	1d03      	adds	r3, r0, #4
 8012394:	e7f1      	b.n	801237a <__exponent+0x60>
	...

08012398 <_printf_float>:
 8012398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801239c:	ed2d 8b02 	vpush	{d8}
 80123a0:	b08d      	sub	sp, #52	; 0x34
 80123a2:	460c      	mov	r4, r1
 80123a4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80123a8:	4616      	mov	r6, r2
 80123aa:	461f      	mov	r7, r3
 80123ac:	4605      	mov	r5, r0
 80123ae:	f000 fde9 	bl	8012f84 <_localeconv_r>
 80123b2:	f8d0 a000 	ldr.w	sl, [r0]
 80123b6:	4650      	mov	r0, sl
 80123b8:	f7ed ff6a 	bl	8000290 <strlen>
 80123bc:	2300      	movs	r3, #0
 80123be:	930a      	str	r3, [sp, #40]	; 0x28
 80123c0:	6823      	ldr	r3, [r4, #0]
 80123c2:	9305      	str	r3, [sp, #20]
 80123c4:	f8d8 3000 	ldr.w	r3, [r8]
 80123c8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80123cc:	3307      	adds	r3, #7
 80123ce:	f023 0307 	bic.w	r3, r3, #7
 80123d2:	f103 0208 	add.w	r2, r3, #8
 80123d6:	f8c8 2000 	str.w	r2, [r8]
 80123da:	e9d3 8900 	ldrd	r8, r9, [r3]
 80123de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80123e2:	9307      	str	r3, [sp, #28]
 80123e4:	f8cd 8018 	str.w	r8, [sp, #24]
 80123e8:	ee08 0a10 	vmov	s16, r0
 80123ec:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80123f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80123f4:	4b9e      	ldr	r3, [pc, #632]	; (8012670 <_printf_float+0x2d8>)
 80123f6:	f04f 32ff 	mov.w	r2, #4294967295
 80123fa:	f7ee fba7 	bl	8000b4c <__aeabi_dcmpun>
 80123fe:	bb88      	cbnz	r0, 8012464 <_printf_float+0xcc>
 8012400:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012404:	4b9a      	ldr	r3, [pc, #616]	; (8012670 <_printf_float+0x2d8>)
 8012406:	f04f 32ff 	mov.w	r2, #4294967295
 801240a:	f7ee fb81 	bl	8000b10 <__aeabi_dcmple>
 801240e:	bb48      	cbnz	r0, 8012464 <_printf_float+0xcc>
 8012410:	2200      	movs	r2, #0
 8012412:	2300      	movs	r3, #0
 8012414:	4640      	mov	r0, r8
 8012416:	4649      	mov	r1, r9
 8012418:	f7ee fb70 	bl	8000afc <__aeabi_dcmplt>
 801241c:	b110      	cbz	r0, 8012424 <_printf_float+0x8c>
 801241e:	232d      	movs	r3, #45	; 0x2d
 8012420:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012424:	4a93      	ldr	r2, [pc, #588]	; (8012674 <_printf_float+0x2dc>)
 8012426:	4b94      	ldr	r3, [pc, #592]	; (8012678 <_printf_float+0x2e0>)
 8012428:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801242c:	bf94      	ite	ls
 801242e:	4690      	movls	r8, r2
 8012430:	4698      	movhi	r8, r3
 8012432:	2303      	movs	r3, #3
 8012434:	6123      	str	r3, [r4, #16]
 8012436:	9b05      	ldr	r3, [sp, #20]
 8012438:	f023 0304 	bic.w	r3, r3, #4
 801243c:	6023      	str	r3, [r4, #0]
 801243e:	f04f 0900 	mov.w	r9, #0
 8012442:	9700      	str	r7, [sp, #0]
 8012444:	4633      	mov	r3, r6
 8012446:	aa0b      	add	r2, sp, #44	; 0x2c
 8012448:	4621      	mov	r1, r4
 801244a:	4628      	mov	r0, r5
 801244c:	f000 f9da 	bl	8012804 <_printf_common>
 8012450:	3001      	adds	r0, #1
 8012452:	f040 8090 	bne.w	8012576 <_printf_float+0x1de>
 8012456:	f04f 30ff 	mov.w	r0, #4294967295
 801245a:	b00d      	add	sp, #52	; 0x34
 801245c:	ecbd 8b02 	vpop	{d8}
 8012460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012464:	4642      	mov	r2, r8
 8012466:	464b      	mov	r3, r9
 8012468:	4640      	mov	r0, r8
 801246a:	4649      	mov	r1, r9
 801246c:	f7ee fb6e 	bl	8000b4c <__aeabi_dcmpun>
 8012470:	b140      	cbz	r0, 8012484 <_printf_float+0xec>
 8012472:	464b      	mov	r3, r9
 8012474:	2b00      	cmp	r3, #0
 8012476:	bfbc      	itt	lt
 8012478:	232d      	movlt	r3, #45	; 0x2d
 801247a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801247e:	4a7f      	ldr	r2, [pc, #508]	; (801267c <_printf_float+0x2e4>)
 8012480:	4b7f      	ldr	r3, [pc, #508]	; (8012680 <_printf_float+0x2e8>)
 8012482:	e7d1      	b.n	8012428 <_printf_float+0x90>
 8012484:	6863      	ldr	r3, [r4, #4]
 8012486:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801248a:	9206      	str	r2, [sp, #24]
 801248c:	1c5a      	adds	r2, r3, #1
 801248e:	d13f      	bne.n	8012510 <_printf_float+0x178>
 8012490:	2306      	movs	r3, #6
 8012492:	6063      	str	r3, [r4, #4]
 8012494:	9b05      	ldr	r3, [sp, #20]
 8012496:	6861      	ldr	r1, [r4, #4]
 8012498:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801249c:	2300      	movs	r3, #0
 801249e:	9303      	str	r3, [sp, #12]
 80124a0:	ab0a      	add	r3, sp, #40	; 0x28
 80124a2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80124a6:	ab09      	add	r3, sp, #36	; 0x24
 80124a8:	ec49 8b10 	vmov	d0, r8, r9
 80124ac:	9300      	str	r3, [sp, #0]
 80124ae:	6022      	str	r2, [r4, #0]
 80124b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80124b4:	4628      	mov	r0, r5
 80124b6:	f7ff fece 	bl	8012256 <__cvt>
 80124ba:	9b06      	ldr	r3, [sp, #24]
 80124bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80124be:	2b47      	cmp	r3, #71	; 0x47
 80124c0:	4680      	mov	r8, r0
 80124c2:	d108      	bne.n	80124d6 <_printf_float+0x13e>
 80124c4:	1cc8      	adds	r0, r1, #3
 80124c6:	db02      	blt.n	80124ce <_printf_float+0x136>
 80124c8:	6863      	ldr	r3, [r4, #4]
 80124ca:	4299      	cmp	r1, r3
 80124cc:	dd41      	ble.n	8012552 <_printf_float+0x1ba>
 80124ce:	f1ab 0302 	sub.w	r3, fp, #2
 80124d2:	fa5f fb83 	uxtb.w	fp, r3
 80124d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80124da:	d820      	bhi.n	801251e <_printf_float+0x186>
 80124dc:	3901      	subs	r1, #1
 80124de:	465a      	mov	r2, fp
 80124e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80124e4:	9109      	str	r1, [sp, #36]	; 0x24
 80124e6:	f7ff ff18 	bl	801231a <__exponent>
 80124ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80124ec:	1813      	adds	r3, r2, r0
 80124ee:	2a01      	cmp	r2, #1
 80124f0:	4681      	mov	r9, r0
 80124f2:	6123      	str	r3, [r4, #16]
 80124f4:	dc02      	bgt.n	80124fc <_printf_float+0x164>
 80124f6:	6822      	ldr	r2, [r4, #0]
 80124f8:	07d2      	lsls	r2, r2, #31
 80124fa:	d501      	bpl.n	8012500 <_printf_float+0x168>
 80124fc:	3301      	adds	r3, #1
 80124fe:	6123      	str	r3, [r4, #16]
 8012500:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012504:	2b00      	cmp	r3, #0
 8012506:	d09c      	beq.n	8012442 <_printf_float+0xaa>
 8012508:	232d      	movs	r3, #45	; 0x2d
 801250a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801250e:	e798      	b.n	8012442 <_printf_float+0xaa>
 8012510:	9a06      	ldr	r2, [sp, #24]
 8012512:	2a47      	cmp	r2, #71	; 0x47
 8012514:	d1be      	bne.n	8012494 <_printf_float+0xfc>
 8012516:	2b00      	cmp	r3, #0
 8012518:	d1bc      	bne.n	8012494 <_printf_float+0xfc>
 801251a:	2301      	movs	r3, #1
 801251c:	e7b9      	b.n	8012492 <_printf_float+0xfa>
 801251e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8012522:	d118      	bne.n	8012556 <_printf_float+0x1be>
 8012524:	2900      	cmp	r1, #0
 8012526:	6863      	ldr	r3, [r4, #4]
 8012528:	dd0b      	ble.n	8012542 <_printf_float+0x1aa>
 801252a:	6121      	str	r1, [r4, #16]
 801252c:	b913      	cbnz	r3, 8012534 <_printf_float+0x19c>
 801252e:	6822      	ldr	r2, [r4, #0]
 8012530:	07d0      	lsls	r0, r2, #31
 8012532:	d502      	bpl.n	801253a <_printf_float+0x1a2>
 8012534:	3301      	adds	r3, #1
 8012536:	440b      	add	r3, r1
 8012538:	6123      	str	r3, [r4, #16]
 801253a:	65a1      	str	r1, [r4, #88]	; 0x58
 801253c:	f04f 0900 	mov.w	r9, #0
 8012540:	e7de      	b.n	8012500 <_printf_float+0x168>
 8012542:	b913      	cbnz	r3, 801254a <_printf_float+0x1b2>
 8012544:	6822      	ldr	r2, [r4, #0]
 8012546:	07d2      	lsls	r2, r2, #31
 8012548:	d501      	bpl.n	801254e <_printf_float+0x1b6>
 801254a:	3302      	adds	r3, #2
 801254c:	e7f4      	b.n	8012538 <_printf_float+0x1a0>
 801254e:	2301      	movs	r3, #1
 8012550:	e7f2      	b.n	8012538 <_printf_float+0x1a0>
 8012552:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8012556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012558:	4299      	cmp	r1, r3
 801255a:	db05      	blt.n	8012568 <_printf_float+0x1d0>
 801255c:	6823      	ldr	r3, [r4, #0]
 801255e:	6121      	str	r1, [r4, #16]
 8012560:	07d8      	lsls	r0, r3, #31
 8012562:	d5ea      	bpl.n	801253a <_printf_float+0x1a2>
 8012564:	1c4b      	adds	r3, r1, #1
 8012566:	e7e7      	b.n	8012538 <_printf_float+0x1a0>
 8012568:	2900      	cmp	r1, #0
 801256a:	bfd4      	ite	le
 801256c:	f1c1 0202 	rsble	r2, r1, #2
 8012570:	2201      	movgt	r2, #1
 8012572:	4413      	add	r3, r2
 8012574:	e7e0      	b.n	8012538 <_printf_float+0x1a0>
 8012576:	6823      	ldr	r3, [r4, #0]
 8012578:	055a      	lsls	r2, r3, #21
 801257a:	d407      	bmi.n	801258c <_printf_float+0x1f4>
 801257c:	6923      	ldr	r3, [r4, #16]
 801257e:	4642      	mov	r2, r8
 8012580:	4631      	mov	r1, r6
 8012582:	4628      	mov	r0, r5
 8012584:	47b8      	blx	r7
 8012586:	3001      	adds	r0, #1
 8012588:	d12c      	bne.n	80125e4 <_printf_float+0x24c>
 801258a:	e764      	b.n	8012456 <_printf_float+0xbe>
 801258c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012590:	f240 80e0 	bls.w	8012754 <_printf_float+0x3bc>
 8012594:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012598:	2200      	movs	r2, #0
 801259a:	2300      	movs	r3, #0
 801259c:	f7ee faa4 	bl	8000ae8 <__aeabi_dcmpeq>
 80125a0:	2800      	cmp	r0, #0
 80125a2:	d034      	beq.n	801260e <_printf_float+0x276>
 80125a4:	4a37      	ldr	r2, [pc, #220]	; (8012684 <_printf_float+0x2ec>)
 80125a6:	2301      	movs	r3, #1
 80125a8:	4631      	mov	r1, r6
 80125aa:	4628      	mov	r0, r5
 80125ac:	47b8      	blx	r7
 80125ae:	3001      	adds	r0, #1
 80125b0:	f43f af51 	beq.w	8012456 <_printf_float+0xbe>
 80125b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80125b8:	429a      	cmp	r2, r3
 80125ba:	db02      	blt.n	80125c2 <_printf_float+0x22a>
 80125bc:	6823      	ldr	r3, [r4, #0]
 80125be:	07d8      	lsls	r0, r3, #31
 80125c0:	d510      	bpl.n	80125e4 <_printf_float+0x24c>
 80125c2:	ee18 3a10 	vmov	r3, s16
 80125c6:	4652      	mov	r2, sl
 80125c8:	4631      	mov	r1, r6
 80125ca:	4628      	mov	r0, r5
 80125cc:	47b8      	blx	r7
 80125ce:	3001      	adds	r0, #1
 80125d0:	f43f af41 	beq.w	8012456 <_printf_float+0xbe>
 80125d4:	f04f 0800 	mov.w	r8, #0
 80125d8:	f104 091a 	add.w	r9, r4, #26
 80125dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125de:	3b01      	subs	r3, #1
 80125e0:	4543      	cmp	r3, r8
 80125e2:	dc09      	bgt.n	80125f8 <_printf_float+0x260>
 80125e4:	6823      	ldr	r3, [r4, #0]
 80125e6:	079b      	lsls	r3, r3, #30
 80125e8:	f100 8107 	bmi.w	80127fa <_printf_float+0x462>
 80125ec:	68e0      	ldr	r0, [r4, #12]
 80125ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80125f0:	4298      	cmp	r0, r3
 80125f2:	bfb8      	it	lt
 80125f4:	4618      	movlt	r0, r3
 80125f6:	e730      	b.n	801245a <_printf_float+0xc2>
 80125f8:	2301      	movs	r3, #1
 80125fa:	464a      	mov	r2, r9
 80125fc:	4631      	mov	r1, r6
 80125fe:	4628      	mov	r0, r5
 8012600:	47b8      	blx	r7
 8012602:	3001      	adds	r0, #1
 8012604:	f43f af27 	beq.w	8012456 <_printf_float+0xbe>
 8012608:	f108 0801 	add.w	r8, r8, #1
 801260c:	e7e6      	b.n	80125dc <_printf_float+0x244>
 801260e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012610:	2b00      	cmp	r3, #0
 8012612:	dc39      	bgt.n	8012688 <_printf_float+0x2f0>
 8012614:	4a1b      	ldr	r2, [pc, #108]	; (8012684 <_printf_float+0x2ec>)
 8012616:	2301      	movs	r3, #1
 8012618:	4631      	mov	r1, r6
 801261a:	4628      	mov	r0, r5
 801261c:	47b8      	blx	r7
 801261e:	3001      	adds	r0, #1
 8012620:	f43f af19 	beq.w	8012456 <_printf_float+0xbe>
 8012624:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012628:	4313      	orrs	r3, r2
 801262a:	d102      	bne.n	8012632 <_printf_float+0x29a>
 801262c:	6823      	ldr	r3, [r4, #0]
 801262e:	07d9      	lsls	r1, r3, #31
 8012630:	d5d8      	bpl.n	80125e4 <_printf_float+0x24c>
 8012632:	ee18 3a10 	vmov	r3, s16
 8012636:	4652      	mov	r2, sl
 8012638:	4631      	mov	r1, r6
 801263a:	4628      	mov	r0, r5
 801263c:	47b8      	blx	r7
 801263e:	3001      	adds	r0, #1
 8012640:	f43f af09 	beq.w	8012456 <_printf_float+0xbe>
 8012644:	f04f 0900 	mov.w	r9, #0
 8012648:	f104 0a1a 	add.w	sl, r4, #26
 801264c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801264e:	425b      	negs	r3, r3
 8012650:	454b      	cmp	r3, r9
 8012652:	dc01      	bgt.n	8012658 <_printf_float+0x2c0>
 8012654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012656:	e792      	b.n	801257e <_printf_float+0x1e6>
 8012658:	2301      	movs	r3, #1
 801265a:	4652      	mov	r2, sl
 801265c:	4631      	mov	r1, r6
 801265e:	4628      	mov	r0, r5
 8012660:	47b8      	blx	r7
 8012662:	3001      	adds	r0, #1
 8012664:	f43f aef7 	beq.w	8012456 <_printf_float+0xbe>
 8012668:	f109 0901 	add.w	r9, r9, #1
 801266c:	e7ee      	b.n	801264c <_printf_float+0x2b4>
 801266e:	bf00      	nop
 8012670:	7fefffff 	.word	0x7fefffff
 8012674:	08015af0 	.word	0x08015af0
 8012678:	08015af4 	.word	0x08015af4
 801267c:	08015af8 	.word	0x08015af8
 8012680:	08015afc 	.word	0x08015afc
 8012684:	08015b00 	.word	0x08015b00
 8012688:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801268a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801268c:	429a      	cmp	r2, r3
 801268e:	bfa8      	it	ge
 8012690:	461a      	movge	r2, r3
 8012692:	2a00      	cmp	r2, #0
 8012694:	4691      	mov	r9, r2
 8012696:	dc37      	bgt.n	8012708 <_printf_float+0x370>
 8012698:	f04f 0b00 	mov.w	fp, #0
 801269c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80126a0:	f104 021a 	add.w	r2, r4, #26
 80126a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80126a6:	9305      	str	r3, [sp, #20]
 80126a8:	eba3 0309 	sub.w	r3, r3, r9
 80126ac:	455b      	cmp	r3, fp
 80126ae:	dc33      	bgt.n	8012718 <_printf_float+0x380>
 80126b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80126b4:	429a      	cmp	r2, r3
 80126b6:	db3b      	blt.n	8012730 <_printf_float+0x398>
 80126b8:	6823      	ldr	r3, [r4, #0]
 80126ba:	07da      	lsls	r2, r3, #31
 80126bc:	d438      	bmi.n	8012730 <_printf_float+0x398>
 80126be:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80126c2:	eba2 0903 	sub.w	r9, r2, r3
 80126c6:	9b05      	ldr	r3, [sp, #20]
 80126c8:	1ad2      	subs	r2, r2, r3
 80126ca:	4591      	cmp	r9, r2
 80126cc:	bfa8      	it	ge
 80126ce:	4691      	movge	r9, r2
 80126d0:	f1b9 0f00 	cmp.w	r9, #0
 80126d4:	dc35      	bgt.n	8012742 <_printf_float+0x3aa>
 80126d6:	f04f 0800 	mov.w	r8, #0
 80126da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80126de:	f104 0a1a 	add.w	sl, r4, #26
 80126e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80126e6:	1a9b      	subs	r3, r3, r2
 80126e8:	eba3 0309 	sub.w	r3, r3, r9
 80126ec:	4543      	cmp	r3, r8
 80126ee:	f77f af79 	ble.w	80125e4 <_printf_float+0x24c>
 80126f2:	2301      	movs	r3, #1
 80126f4:	4652      	mov	r2, sl
 80126f6:	4631      	mov	r1, r6
 80126f8:	4628      	mov	r0, r5
 80126fa:	47b8      	blx	r7
 80126fc:	3001      	adds	r0, #1
 80126fe:	f43f aeaa 	beq.w	8012456 <_printf_float+0xbe>
 8012702:	f108 0801 	add.w	r8, r8, #1
 8012706:	e7ec      	b.n	80126e2 <_printf_float+0x34a>
 8012708:	4613      	mov	r3, r2
 801270a:	4631      	mov	r1, r6
 801270c:	4642      	mov	r2, r8
 801270e:	4628      	mov	r0, r5
 8012710:	47b8      	blx	r7
 8012712:	3001      	adds	r0, #1
 8012714:	d1c0      	bne.n	8012698 <_printf_float+0x300>
 8012716:	e69e      	b.n	8012456 <_printf_float+0xbe>
 8012718:	2301      	movs	r3, #1
 801271a:	4631      	mov	r1, r6
 801271c:	4628      	mov	r0, r5
 801271e:	9205      	str	r2, [sp, #20]
 8012720:	47b8      	blx	r7
 8012722:	3001      	adds	r0, #1
 8012724:	f43f ae97 	beq.w	8012456 <_printf_float+0xbe>
 8012728:	9a05      	ldr	r2, [sp, #20]
 801272a:	f10b 0b01 	add.w	fp, fp, #1
 801272e:	e7b9      	b.n	80126a4 <_printf_float+0x30c>
 8012730:	ee18 3a10 	vmov	r3, s16
 8012734:	4652      	mov	r2, sl
 8012736:	4631      	mov	r1, r6
 8012738:	4628      	mov	r0, r5
 801273a:	47b8      	blx	r7
 801273c:	3001      	adds	r0, #1
 801273e:	d1be      	bne.n	80126be <_printf_float+0x326>
 8012740:	e689      	b.n	8012456 <_printf_float+0xbe>
 8012742:	9a05      	ldr	r2, [sp, #20]
 8012744:	464b      	mov	r3, r9
 8012746:	4442      	add	r2, r8
 8012748:	4631      	mov	r1, r6
 801274a:	4628      	mov	r0, r5
 801274c:	47b8      	blx	r7
 801274e:	3001      	adds	r0, #1
 8012750:	d1c1      	bne.n	80126d6 <_printf_float+0x33e>
 8012752:	e680      	b.n	8012456 <_printf_float+0xbe>
 8012754:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012756:	2a01      	cmp	r2, #1
 8012758:	dc01      	bgt.n	801275e <_printf_float+0x3c6>
 801275a:	07db      	lsls	r3, r3, #31
 801275c:	d53a      	bpl.n	80127d4 <_printf_float+0x43c>
 801275e:	2301      	movs	r3, #1
 8012760:	4642      	mov	r2, r8
 8012762:	4631      	mov	r1, r6
 8012764:	4628      	mov	r0, r5
 8012766:	47b8      	blx	r7
 8012768:	3001      	adds	r0, #1
 801276a:	f43f ae74 	beq.w	8012456 <_printf_float+0xbe>
 801276e:	ee18 3a10 	vmov	r3, s16
 8012772:	4652      	mov	r2, sl
 8012774:	4631      	mov	r1, r6
 8012776:	4628      	mov	r0, r5
 8012778:	47b8      	blx	r7
 801277a:	3001      	adds	r0, #1
 801277c:	f43f ae6b 	beq.w	8012456 <_printf_float+0xbe>
 8012780:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012784:	2200      	movs	r2, #0
 8012786:	2300      	movs	r3, #0
 8012788:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801278c:	f7ee f9ac 	bl	8000ae8 <__aeabi_dcmpeq>
 8012790:	b9d8      	cbnz	r0, 80127ca <_printf_float+0x432>
 8012792:	f10a 33ff 	add.w	r3, sl, #4294967295
 8012796:	f108 0201 	add.w	r2, r8, #1
 801279a:	4631      	mov	r1, r6
 801279c:	4628      	mov	r0, r5
 801279e:	47b8      	blx	r7
 80127a0:	3001      	adds	r0, #1
 80127a2:	d10e      	bne.n	80127c2 <_printf_float+0x42a>
 80127a4:	e657      	b.n	8012456 <_printf_float+0xbe>
 80127a6:	2301      	movs	r3, #1
 80127a8:	4652      	mov	r2, sl
 80127aa:	4631      	mov	r1, r6
 80127ac:	4628      	mov	r0, r5
 80127ae:	47b8      	blx	r7
 80127b0:	3001      	adds	r0, #1
 80127b2:	f43f ae50 	beq.w	8012456 <_printf_float+0xbe>
 80127b6:	f108 0801 	add.w	r8, r8, #1
 80127ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80127bc:	3b01      	subs	r3, #1
 80127be:	4543      	cmp	r3, r8
 80127c0:	dcf1      	bgt.n	80127a6 <_printf_float+0x40e>
 80127c2:	464b      	mov	r3, r9
 80127c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80127c8:	e6da      	b.n	8012580 <_printf_float+0x1e8>
 80127ca:	f04f 0800 	mov.w	r8, #0
 80127ce:	f104 0a1a 	add.w	sl, r4, #26
 80127d2:	e7f2      	b.n	80127ba <_printf_float+0x422>
 80127d4:	2301      	movs	r3, #1
 80127d6:	4642      	mov	r2, r8
 80127d8:	e7df      	b.n	801279a <_printf_float+0x402>
 80127da:	2301      	movs	r3, #1
 80127dc:	464a      	mov	r2, r9
 80127de:	4631      	mov	r1, r6
 80127e0:	4628      	mov	r0, r5
 80127e2:	47b8      	blx	r7
 80127e4:	3001      	adds	r0, #1
 80127e6:	f43f ae36 	beq.w	8012456 <_printf_float+0xbe>
 80127ea:	f108 0801 	add.w	r8, r8, #1
 80127ee:	68e3      	ldr	r3, [r4, #12]
 80127f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80127f2:	1a5b      	subs	r3, r3, r1
 80127f4:	4543      	cmp	r3, r8
 80127f6:	dcf0      	bgt.n	80127da <_printf_float+0x442>
 80127f8:	e6f8      	b.n	80125ec <_printf_float+0x254>
 80127fa:	f04f 0800 	mov.w	r8, #0
 80127fe:	f104 0919 	add.w	r9, r4, #25
 8012802:	e7f4      	b.n	80127ee <_printf_float+0x456>

08012804 <_printf_common>:
 8012804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012808:	4616      	mov	r6, r2
 801280a:	4699      	mov	r9, r3
 801280c:	688a      	ldr	r2, [r1, #8]
 801280e:	690b      	ldr	r3, [r1, #16]
 8012810:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012814:	4293      	cmp	r3, r2
 8012816:	bfb8      	it	lt
 8012818:	4613      	movlt	r3, r2
 801281a:	6033      	str	r3, [r6, #0]
 801281c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012820:	4607      	mov	r7, r0
 8012822:	460c      	mov	r4, r1
 8012824:	b10a      	cbz	r2, 801282a <_printf_common+0x26>
 8012826:	3301      	adds	r3, #1
 8012828:	6033      	str	r3, [r6, #0]
 801282a:	6823      	ldr	r3, [r4, #0]
 801282c:	0699      	lsls	r1, r3, #26
 801282e:	bf42      	ittt	mi
 8012830:	6833      	ldrmi	r3, [r6, #0]
 8012832:	3302      	addmi	r3, #2
 8012834:	6033      	strmi	r3, [r6, #0]
 8012836:	6825      	ldr	r5, [r4, #0]
 8012838:	f015 0506 	ands.w	r5, r5, #6
 801283c:	d106      	bne.n	801284c <_printf_common+0x48>
 801283e:	f104 0a19 	add.w	sl, r4, #25
 8012842:	68e3      	ldr	r3, [r4, #12]
 8012844:	6832      	ldr	r2, [r6, #0]
 8012846:	1a9b      	subs	r3, r3, r2
 8012848:	42ab      	cmp	r3, r5
 801284a:	dc26      	bgt.n	801289a <_printf_common+0x96>
 801284c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012850:	1e13      	subs	r3, r2, #0
 8012852:	6822      	ldr	r2, [r4, #0]
 8012854:	bf18      	it	ne
 8012856:	2301      	movne	r3, #1
 8012858:	0692      	lsls	r2, r2, #26
 801285a:	d42b      	bmi.n	80128b4 <_printf_common+0xb0>
 801285c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012860:	4649      	mov	r1, r9
 8012862:	4638      	mov	r0, r7
 8012864:	47c0      	blx	r8
 8012866:	3001      	adds	r0, #1
 8012868:	d01e      	beq.n	80128a8 <_printf_common+0xa4>
 801286a:	6823      	ldr	r3, [r4, #0]
 801286c:	6922      	ldr	r2, [r4, #16]
 801286e:	f003 0306 	and.w	r3, r3, #6
 8012872:	2b04      	cmp	r3, #4
 8012874:	bf02      	ittt	eq
 8012876:	68e5      	ldreq	r5, [r4, #12]
 8012878:	6833      	ldreq	r3, [r6, #0]
 801287a:	1aed      	subeq	r5, r5, r3
 801287c:	68a3      	ldr	r3, [r4, #8]
 801287e:	bf0c      	ite	eq
 8012880:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012884:	2500      	movne	r5, #0
 8012886:	4293      	cmp	r3, r2
 8012888:	bfc4      	itt	gt
 801288a:	1a9b      	subgt	r3, r3, r2
 801288c:	18ed      	addgt	r5, r5, r3
 801288e:	2600      	movs	r6, #0
 8012890:	341a      	adds	r4, #26
 8012892:	42b5      	cmp	r5, r6
 8012894:	d11a      	bne.n	80128cc <_printf_common+0xc8>
 8012896:	2000      	movs	r0, #0
 8012898:	e008      	b.n	80128ac <_printf_common+0xa8>
 801289a:	2301      	movs	r3, #1
 801289c:	4652      	mov	r2, sl
 801289e:	4649      	mov	r1, r9
 80128a0:	4638      	mov	r0, r7
 80128a2:	47c0      	blx	r8
 80128a4:	3001      	adds	r0, #1
 80128a6:	d103      	bne.n	80128b0 <_printf_common+0xac>
 80128a8:	f04f 30ff 	mov.w	r0, #4294967295
 80128ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128b0:	3501      	adds	r5, #1
 80128b2:	e7c6      	b.n	8012842 <_printf_common+0x3e>
 80128b4:	18e1      	adds	r1, r4, r3
 80128b6:	1c5a      	adds	r2, r3, #1
 80128b8:	2030      	movs	r0, #48	; 0x30
 80128ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80128be:	4422      	add	r2, r4
 80128c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80128c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80128c8:	3302      	adds	r3, #2
 80128ca:	e7c7      	b.n	801285c <_printf_common+0x58>
 80128cc:	2301      	movs	r3, #1
 80128ce:	4622      	mov	r2, r4
 80128d0:	4649      	mov	r1, r9
 80128d2:	4638      	mov	r0, r7
 80128d4:	47c0      	blx	r8
 80128d6:	3001      	adds	r0, #1
 80128d8:	d0e6      	beq.n	80128a8 <_printf_common+0xa4>
 80128da:	3601      	adds	r6, #1
 80128dc:	e7d9      	b.n	8012892 <_printf_common+0x8e>
	...

080128e0 <_printf_i>:
 80128e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80128e4:	7e0f      	ldrb	r7, [r1, #24]
 80128e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80128e8:	2f78      	cmp	r7, #120	; 0x78
 80128ea:	4691      	mov	r9, r2
 80128ec:	4680      	mov	r8, r0
 80128ee:	460c      	mov	r4, r1
 80128f0:	469a      	mov	sl, r3
 80128f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80128f6:	d807      	bhi.n	8012908 <_printf_i+0x28>
 80128f8:	2f62      	cmp	r7, #98	; 0x62
 80128fa:	d80a      	bhi.n	8012912 <_printf_i+0x32>
 80128fc:	2f00      	cmp	r7, #0
 80128fe:	f000 80d4 	beq.w	8012aaa <_printf_i+0x1ca>
 8012902:	2f58      	cmp	r7, #88	; 0x58
 8012904:	f000 80c0 	beq.w	8012a88 <_printf_i+0x1a8>
 8012908:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801290c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012910:	e03a      	b.n	8012988 <_printf_i+0xa8>
 8012912:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012916:	2b15      	cmp	r3, #21
 8012918:	d8f6      	bhi.n	8012908 <_printf_i+0x28>
 801291a:	a101      	add	r1, pc, #4	; (adr r1, 8012920 <_printf_i+0x40>)
 801291c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012920:	08012979 	.word	0x08012979
 8012924:	0801298d 	.word	0x0801298d
 8012928:	08012909 	.word	0x08012909
 801292c:	08012909 	.word	0x08012909
 8012930:	08012909 	.word	0x08012909
 8012934:	08012909 	.word	0x08012909
 8012938:	0801298d 	.word	0x0801298d
 801293c:	08012909 	.word	0x08012909
 8012940:	08012909 	.word	0x08012909
 8012944:	08012909 	.word	0x08012909
 8012948:	08012909 	.word	0x08012909
 801294c:	08012a91 	.word	0x08012a91
 8012950:	080129b9 	.word	0x080129b9
 8012954:	08012a4b 	.word	0x08012a4b
 8012958:	08012909 	.word	0x08012909
 801295c:	08012909 	.word	0x08012909
 8012960:	08012ab3 	.word	0x08012ab3
 8012964:	08012909 	.word	0x08012909
 8012968:	080129b9 	.word	0x080129b9
 801296c:	08012909 	.word	0x08012909
 8012970:	08012909 	.word	0x08012909
 8012974:	08012a53 	.word	0x08012a53
 8012978:	682b      	ldr	r3, [r5, #0]
 801297a:	1d1a      	adds	r2, r3, #4
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	602a      	str	r2, [r5, #0]
 8012980:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012984:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012988:	2301      	movs	r3, #1
 801298a:	e09f      	b.n	8012acc <_printf_i+0x1ec>
 801298c:	6820      	ldr	r0, [r4, #0]
 801298e:	682b      	ldr	r3, [r5, #0]
 8012990:	0607      	lsls	r7, r0, #24
 8012992:	f103 0104 	add.w	r1, r3, #4
 8012996:	6029      	str	r1, [r5, #0]
 8012998:	d501      	bpl.n	801299e <_printf_i+0xbe>
 801299a:	681e      	ldr	r6, [r3, #0]
 801299c:	e003      	b.n	80129a6 <_printf_i+0xc6>
 801299e:	0646      	lsls	r6, r0, #25
 80129a0:	d5fb      	bpl.n	801299a <_printf_i+0xba>
 80129a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80129a6:	2e00      	cmp	r6, #0
 80129a8:	da03      	bge.n	80129b2 <_printf_i+0xd2>
 80129aa:	232d      	movs	r3, #45	; 0x2d
 80129ac:	4276      	negs	r6, r6
 80129ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80129b2:	485a      	ldr	r0, [pc, #360]	; (8012b1c <_printf_i+0x23c>)
 80129b4:	230a      	movs	r3, #10
 80129b6:	e012      	b.n	80129de <_printf_i+0xfe>
 80129b8:	682b      	ldr	r3, [r5, #0]
 80129ba:	6820      	ldr	r0, [r4, #0]
 80129bc:	1d19      	adds	r1, r3, #4
 80129be:	6029      	str	r1, [r5, #0]
 80129c0:	0605      	lsls	r5, r0, #24
 80129c2:	d501      	bpl.n	80129c8 <_printf_i+0xe8>
 80129c4:	681e      	ldr	r6, [r3, #0]
 80129c6:	e002      	b.n	80129ce <_printf_i+0xee>
 80129c8:	0641      	lsls	r1, r0, #25
 80129ca:	d5fb      	bpl.n	80129c4 <_printf_i+0xe4>
 80129cc:	881e      	ldrh	r6, [r3, #0]
 80129ce:	4853      	ldr	r0, [pc, #332]	; (8012b1c <_printf_i+0x23c>)
 80129d0:	2f6f      	cmp	r7, #111	; 0x6f
 80129d2:	bf0c      	ite	eq
 80129d4:	2308      	moveq	r3, #8
 80129d6:	230a      	movne	r3, #10
 80129d8:	2100      	movs	r1, #0
 80129da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80129de:	6865      	ldr	r5, [r4, #4]
 80129e0:	60a5      	str	r5, [r4, #8]
 80129e2:	2d00      	cmp	r5, #0
 80129e4:	bfa2      	ittt	ge
 80129e6:	6821      	ldrge	r1, [r4, #0]
 80129e8:	f021 0104 	bicge.w	r1, r1, #4
 80129ec:	6021      	strge	r1, [r4, #0]
 80129ee:	b90e      	cbnz	r6, 80129f4 <_printf_i+0x114>
 80129f0:	2d00      	cmp	r5, #0
 80129f2:	d04b      	beq.n	8012a8c <_printf_i+0x1ac>
 80129f4:	4615      	mov	r5, r2
 80129f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80129fa:	fb03 6711 	mls	r7, r3, r1, r6
 80129fe:	5dc7      	ldrb	r7, [r0, r7]
 8012a00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012a04:	4637      	mov	r7, r6
 8012a06:	42bb      	cmp	r3, r7
 8012a08:	460e      	mov	r6, r1
 8012a0a:	d9f4      	bls.n	80129f6 <_printf_i+0x116>
 8012a0c:	2b08      	cmp	r3, #8
 8012a0e:	d10b      	bne.n	8012a28 <_printf_i+0x148>
 8012a10:	6823      	ldr	r3, [r4, #0]
 8012a12:	07de      	lsls	r6, r3, #31
 8012a14:	d508      	bpl.n	8012a28 <_printf_i+0x148>
 8012a16:	6923      	ldr	r3, [r4, #16]
 8012a18:	6861      	ldr	r1, [r4, #4]
 8012a1a:	4299      	cmp	r1, r3
 8012a1c:	bfde      	ittt	le
 8012a1e:	2330      	movle	r3, #48	; 0x30
 8012a20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012a24:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012a28:	1b52      	subs	r2, r2, r5
 8012a2a:	6122      	str	r2, [r4, #16]
 8012a2c:	f8cd a000 	str.w	sl, [sp]
 8012a30:	464b      	mov	r3, r9
 8012a32:	aa03      	add	r2, sp, #12
 8012a34:	4621      	mov	r1, r4
 8012a36:	4640      	mov	r0, r8
 8012a38:	f7ff fee4 	bl	8012804 <_printf_common>
 8012a3c:	3001      	adds	r0, #1
 8012a3e:	d14a      	bne.n	8012ad6 <_printf_i+0x1f6>
 8012a40:	f04f 30ff 	mov.w	r0, #4294967295
 8012a44:	b004      	add	sp, #16
 8012a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a4a:	6823      	ldr	r3, [r4, #0]
 8012a4c:	f043 0320 	orr.w	r3, r3, #32
 8012a50:	6023      	str	r3, [r4, #0]
 8012a52:	4833      	ldr	r0, [pc, #204]	; (8012b20 <_printf_i+0x240>)
 8012a54:	2778      	movs	r7, #120	; 0x78
 8012a56:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012a5a:	6823      	ldr	r3, [r4, #0]
 8012a5c:	6829      	ldr	r1, [r5, #0]
 8012a5e:	061f      	lsls	r7, r3, #24
 8012a60:	f851 6b04 	ldr.w	r6, [r1], #4
 8012a64:	d402      	bmi.n	8012a6c <_printf_i+0x18c>
 8012a66:	065f      	lsls	r7, r3, #25
 8012a68:	bf48      	it	mi
 8012a6a:	b2b6      	uxthmi	r6, r6
 8012a6c:	07df      	lsls	r7, r3, #31
 8012a6e:	bf48      	it	mi
 8012a70:	f043 0320 	orrmi.w	r3, r3, #32
 8012a74:	6029      	str	r1, [r5, #0]
 8012a76:	bf48      	it	mi
 8012a78:	6023      	strmi	r3, [r4, #0]
 8012a7a:	b91e      	cbnz	r6, 8012a84 <_printf_i+0x1a4>
 8012a7c:	6823      	ldr	r3, [r4, #0]
 8012a7e:	f023 0320 	bic.w	r3, r3, #32
 8012a82:	6023      	str	r3, [r4, #0]
 8012a84:	2310      	movs	r3, #16
 8012a86:	e7a7      	b.n	80129d8 <_printf_i+0xf8>
 8012a88:	4824      	ldr	r0, [pc, #144]	; (8012b1c <_printf_i+0x23c>)
 8012a8a:	e7e4      	b.n	8012a56 <_printf_i+0x176>
 8012a8c:	4615      	mov	r5, r2
 8012a8e:	e7bd      	b.n	8012a0c <_printf_i+0x12c>
 8012a90:	682b      	ldr	r3, [r5, #0]
 8012a92:	6826      	ldr	r6, [r4, #0]
 8012a94:	6961      	ldr	r1, [r4, #20]
 8012a96:	1d18      	adds	r0, r3, #4
 8012a98:	6028      	str	r0, [r5, #0]
 8012a9a:	0635      	lsls	r5, r6, #24
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	d501      	bpl.n	8012aa4 <_printf_i+0x1c4>
 8012aa0:	6019      	str	r1, [r3, #0]
 8012aa2:	e002      	b.n	8012aaa <_printf_i+0x1ca>
 8012aa4:	0670      	lsls	r0, r6, #25
 8012aa6:	d5fb      	bpl.n	8012aa0 <_printf_i+0x1c0>
 8012aa8:	8019      	strh	r1, [r3, #0]
 8012aaa:	2300      	movs	r3, #0
 8012aac:	6123      	str	r3, [r4, #16]
 8012aae:	4615      	mov	r5, r2
 8012ab0:	e7bc      	b.n	8012a2c <_printf_i+0x14c>
 8012ab2:	682b      	ldr	r3, [r5, #0]
 8012ab4:	1d1a      	adds	r2, r3, #4
 8012ab6:	602a      	str	r2, [r5, #0]
 8012ab8:	681d      	ldr	r5, [r3, #0]
 8012aba:	6862      	ldr	r2, [r4, #4]
 8012abc:	2100      	movs	r1, #0
 8012abe:	4628      	mov	r0, r5
 8012ac0:	f7ed fb96 	bl	80001f0 <memchr>
 8012ac4:	b108      	cbz	r0, 8012aca <_printf_i+0x1ea>
 8012ac6:	1b40      	subs	r0, r0, r5
 8012ac8:	6060      	str	r0, [r4, #4]
 8012aca:	6863      	ldr	r3, [r4, #4]
 8012acc:	6123      	str	r3, [r4, #16]
 8012ace:	2300      	movs	r3, #0
 8012ad0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012ad4:	e7aa      	b.n	8012a2c <_printf_i+0x14c>
 8012ad6:	6923      	ldr	r3, [r4, #16]
 8012ad8:	462a      	mov	r2, r5
 8012ada:	4649      	mov	r1, r9
 8012adc:	4640      	mov	r0, r8
 8012ade:	47d0      	blx	sl
 8012ae0:	3001      	adds	r0, #1
 8012ae2:	d0ad      	beq.n	8012a40 <_printf_i+0x160>
 8012ae4:	6823      	ldr	r3, [r4, #0]
 8012ae6:	079b      	lsls	r3, r3, #30
 8012ae8:	d413      	bmi.n	8012b12 <_printf_i+0x232>
 8012aea:	68e0      	ldr	r0, [r4, #12]
 8012aec:	9b03      	ldr	r3, [sp, #12]
 8012aee:	4298      	cmp	r0, r3
 8012af0:	bfb8      	it	lt
 8012af2:	4618      	movlt	r0, r3
 8012af4:	e7a6      	b.n	8012a44 <_printf_i+0x164>
 8012af6:	2301      	movs	r3, #1
 8012af8:	4632      	mov	r2, r6
 8012afa:	4649      	mov	r1, r9
 8012afc:	4640      	mov	r0, r8
 8012afe:	47d0      	blx	sl
 8012b00:	3001      	adds	r0, #1
 8012b02:	d09d      	beq.n	8012a40 <_printf_i+0x160>
 8012b04:	3501      	adds	r5, #1
 8012b06:	68e3      	ldr	r3, [r4, #12]
 8012b08:	9903      	ldr	r1, [sp, #12]
 8012b0a:	1a5b      	subs	r3, r3, r1
 8012b0c:	42ab      	cmp	r3, r5
 8012b0e:	dcf2      	bgt.n	8012af6 <_printf_i+0x216>
 8012b10:	e7eb      	b.n	8012aea <_printf_i+0x20a>
 8012b12:	2500      	movs	r5, #0
 8012b14:	f104 0619 	add.w	r6, r4, #25
 8012b18:	e7f5      	b.n	8012b06 <_printf_i+0x226>
 8012b1a:	bf00      	nop
 8012b1c:	08015b02 	.word	0x08015b02
 8012b20:	08015b13 	.word	0x08015b13

08012b24 <std>:
 8012b24:	2300      	movs	r3, #0
 8012b26:	b510      	push	{r4, lr}
 8012b28:	4604      	mov	r4, r0
 8012b2a:	e9c0 3300 	strd	r3, r3, [r0]
 8012b2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012b32:	6083      	str	r3, [r0, #8]
 8012b34:	8181      	strh	r1, [r0, #12]
 8012b36:	6643      	str	r3, [r0, #100]	; 0x64
 8012b38:	81c2      	strh	r2, [r0, #14]
 8012b3a:	6183      	str	r3, [r0, #24]
 8012b3c:	4619      	mov	r1, r3
 8012b3e:	2208      	movs	r2, #8
 8012b40:	305c      	adds	r0, #92	; 0x5c
 8012b42:	f000 fa17 	bl	8012f74 <memset>
 8012b46:	4b0d      	ldr	r3, [pc, #52]	; (8012b7c <std+0x58>)
 8012b48:	6263      	str	r3, [r4, #36]	; 0x24
 8012b4a:	4b0d      	ldr	r3, [pc, #52]	; (8012b80 <std+0x5c>)
 8012b4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8012b4e:	4b0d      	ldr	r3, [pc, #52]	; (8012b84 <std+0x60>)
 8012b50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012b52:	4b0d      	ldr	r3, [pc, #52]	; (8012b88 <std+0x64>)
 8012b54:	6323      	str	r3, [r4, #48]	; 0x30
 8012b56:	4b0d      	ldr	r3, [pc, #52]	; (8012b8c <std+0x68>)
 8012b58:	6224      	str	r4, [r4, #32]
 8012b5a:	429c      	cmp	r4, r3
 8012b5c:	d006      	beq.n	8012b6c <std+0x48>
 8012b5e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8012b62:	4294      	cmp	r4, r2
 8012b64:	d002      	beq.n	8012b6c <std+0x48>
 8012b66:	33d0      	adds	r3, #208	; 0xd0
 8012b68:	429c      	cmp	r4, r3
 8012b6a:	d105      	bne.n	8012b78 <std+0x54>
 8012b6c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b74:	f000 bad0 	b.w	8013118 <__retarget_lock_init_recursive>
 8012b78:	bd10      	pop	{r4, pc}
 8012b7a:	bf00      	nop
 8012b7c:	08012dc5 	.word	0x08012dc5
 8012b80:	08012de7 	.word	0x08012de7
 8012b84:	08012e1f 	.word	0x08012e1f
 8012b88:	08012e43 	.word	0x08012e43
 8012b8c:	200080a8 	.word	0x200080a8

08012b90 <stdio_exit_handler>:
 8012b90:	4a02      	ldr	r2, [pc, #8]	; (8012b9c <stdio_exit_handler+0xc>)
 8012b92:	4903      	ldr	r1, [pc, #12]	; (8012ba0 <stdio_exit_handler+0x10>)
 8012b94:	4803      	ldr	r0, [pc, #12]	; (8012ba4 <stdio_exit_handler+0x14>)
 8012b96:	f000 b869 	b.w	8012c6c <_fwalk_sglue>
 8012b9a:	bf00      	nop
 8012b9c:	20000030 	.word	0x20000030
 8012ba0:	08014d81 	.word	0x08014d81
 8012ba4:	2000003c 	.word	0x2000003c

08012ba8 <cleanup_stdio>:
 8012ba8:	6841      	ldr	r1, [r0, #4]
 8012baa:	4b0c      	ldr	r3, [pc, #48]	; (8012bdc <cleanup_stdio+0x34>)
 8012bac:	4299      	cmp	r1, r3
 8012bae:	b510      	push	{r4, lr}
 8012bb0:	4604      	mov	r4, r0
 8012bb2:	d001      	beq.n	8012bb8 <cleanup_stdio+0x10>
 8012bb4:	f002 f8e4 	bl	8014d80 <_fflush_r>
 8012bb8:	68a1      	ldr	r1, [r4, #8]
 8012bba:	4b09      	ldr	r3, [pc, #36]	; (8012be0 <cleanup_stdio+0x38>)
 8012bbc:	4299      	cmp	r1, r3
 8012bbe:	d002      	beq.n	8012bc6 <cleanup_stdio+0x1e>
 8012bc0:	4620      	mov	r0, r4
 8012bc2:	f002 f8dd 	bl	8014d80 <_fflush_r>
 8012bc6:	68e1      	ldr	r1, [r4, #12]
 8012bc8:	4b06      	ldr	r3, [pc, #24]	; (8012be4 <cleanup_stdio+0x3c>)
 8012bca:	4299      	cmp	r1, r3
 8012bcc:	d004      	beq.n	8012bd8 <cleanup_stdio+0x30>
 8012bce:	4620      	mov	r0, r4
 8012bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012bd4:	f002 b8d4 	b.w	8014d80 <_fflush_r>
 8012bd8:	bd10      	pop	{r4, pc}
 8012bda:	bf00      	nop
 8012bdc:	200080a8 	.word	0x200080a8
 8012be0:	20008110 	.word	0x20008110
 8012be4:	20008178 	.word	0x20008178

08012be8 <global_stdio_init.part.0>:
 8012be8:	b510      	push	{r4, lr}
 8012bea:	4b0b      	ldr	r3, [pc, #44]	; (8012c18 <global_stdio_init.part.0+0x30>)
 8012bec:	4c0b      	ldr	r4, [pc, #44]	; (8012c1c <global_stdio_init.part.0+0x34>)
 8012bee:	4a0c      	ldr	r2, [pc, #48]	; (8012c20 <global_stdio_init.part.0+0x38>)
 8012bf0:	601a      	str	r2, [r3, #0]
 8012bf2:	4620      	mov	r0, r4
 8012bf4:	2200      	movs	r2, #0
 8012bf6:	2104      	movs	r1, #4
 8012bf8:	f7ff ff94 	bl	8012b24 <std>
 8012bfc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8012c00:	2201      	movs	r2, #1
 8012c02:	2109      	movs	r1, #9
 8012c04:	f7ff ff8e 	bl	8012b24 <std>
 8012c08:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8012c0c:	2202      	movs	r2, #2
 8012c0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c12:	2112      	movs	r1, #18
 8012c14:	f7ff bf86 	b.w	8012b24 <std>
 8012c18:	200081e0 	.word	0x200081e0
 8012c1c:	200080a8 	.word	0x200080a8
 8012c20:	08012b91 	.word	0x08012b91

08012c24 <__sfp_lock_acquire>:
 8012c24:	4801      	ldr	r0, [pc, #4]	; (8012c2c <__sfp_lock_acquire+0x8>)
 8012c26:	f000 ba78 	b.w	801311a <__retarget_lock_acquire_recursive>
 8012c2a:	bf00      	nop
 8012c2c:	200081e9 	.word	0x200081e9

08012c30 <__sfp_lock_release>:
 8012c30:	4801      	ldr	r0, [pc, #4]	; (8012c38 <__sfp_lock_release+0x8>)
 8012c32:	f000 ba73 	b.w	801311c <__retarget_lock_release_recursive>
 8012c36:	bf00      	nop
 8012c38:	200081e9 	.word	0x200081e9

08012c3c <__sinit>:
 8012c3c:	b510      	push	{r4, lr}
 8012c3e:	4604      	mov	r4, r0
 8012c40:	f7ff fff0 	bl	8012c24 <__sfp_lock_acquire>
 8012c44:	6a23      	ldr	r3, [r4, #32]
 8012c46:	b11b      	cbz	r3, 8012c50 <__sinit+0x14>
 8012c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c4c:	f7ff bff0 	b.w	8012c30 <__sfp_lock_release>
 8012c50:	4b04      	ldr	r3, [pc, #16]	; (8012c64 <__sinit+0x28>)
 8012c52:	6223      	str	r3, [r4, #32]
 8012c54:	4b04      	ldr	r3, [pc, #16]	; (8012c68 <__sinit+0x2c>)
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d1f5      	bne.n	8012c48 <__sinit+0xc>
 8012c5c:	f7ff ffc4 	bl	8012be8 <global_stdio_init.part.0>
 8012c60:	e7f2      	b.n	8012c48 <__sinit+0xc>
 8012c62:	bf00      	nop
 8012c64:	08012ba9 	.word	0x08012ba9
 8012c68:	200081e0 	.word	0x200081e0

08012c6c <_fwalk_sglue>:
 8012c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c70:	4607      	mov	r7, r0
 8012c72:	4688      	mov	r8, r1
 8012c74:	4614      	mov	r4, r2
 8012c76:	2600      	movs	r6, #0
 8012c78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012c7c:	f1b9 0901 	subs.w	r9, r9, #1
 8012c80:	d505      	bpl.n	8012c8e <_fwalk_sglue+0x22>
 8012c82:	6824      	ldr	r4, [r4, #0]
 8012c84:	2c00      	cmp	r4, #0
 8012c86:	d1f7      	bne.n	8012c78 <_fwalk_sglue+0xc>
 8012c88:	4630      	mov	r0, r6
 8012c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c8e:	89ab      	ldrh	r3, [r5, #12]
 8012c90:	2b01      	cmp	r3, #1
 8012c92:	d907      	bls.n	8012ca4 <_fwalk_sglue+0x38>
 8012c94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012c98:	3301      	adds	r3, #1
 8012c9a:	d003      	beq.n	8012ca4 <_fwalk_sglue+0x38>
 8012c9c:	4629      	mov	r1, r5
 8012c9e:	4638      	mov	r0, r7
 8012ca0:	47c0      	blx	r8
 8012ca2:	4306      	orrs	r6, r0
 8012ca4:	3568      	adds	r5, #104	; 0x68
 8012ca6:	e7e9      	b.n	8012c7c <_fwalk_sglue+0x10>

08012ca8 <iprintf>:
 8012ca8:	b40f      	push	{r0, r1, r2, r3}
 8012caa:	b507      	push	{r0, r1, r2, lr}
 8012cac:	4906      	ldr	r1, [pc, #24]	; (8012cc8 <iprintf+0x20>)
 8012cae:	ab04      	add	r3, sp, #16
 8012cb0:	6808      	ldr	r0, [r1, #0]
 8012cb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8012cb6:	6881      	ldr	r1, [r0, #8]
 8012cb8:	9301      	str	r3, [sp, #4]
 8012cba:	f001 fec1 	bl	8014a40 <_vfiprintf_r>
 8012cbe:	b003      	add	sp, #12
 8012cc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8012cc4:	b004      	add	sp, #16
 8012cc6:	4770      	bx	lr
 8012cc8:	20000088 	.word	0x20000088

08012ccc <_puts_r>:
 8012ccc:	6a03      	ldr	r3, [r0, #32]
 8012cce:	b570      	push	{r4, r5, r6, lr}
 8012cd0:	6884      	ldr	r4, [r0, #8]
 8012cd2:	4605      	mov	r5, r0
 8012cd4:	460e      	mov	r6, r1
 8012cd6:	b90b      	cbnz	r3, 8012cdc <_puts_r+0x10>
 8012cd8:	f7ff ffb0 	bl	8012c3c <__sinit>
 8012cdc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012cde:	07db      	lsls	r3, r3, #31
 8012ce0:	d405      	bmi.n	8012cee <_puts_r+0x22>
 8012ce2:	89a3      	ldrh	r3, [r4, #12]
 8012ce4:	0598      	lsls	r0, r3, #22
 8012ce6:	d402      	bmi.n	8012cee <_puts_r+0x22>
 8012ce8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012cea:	f000 fa16 	bl	801311a <__retarget_lock_acquire_recursive>
 8012cee:	89a3      	ldrh	r3, [r4, #12]
 8012cf0:	0719      	lsls	r1, r3, #28
 8012cf2:	d513      	bpl.n	8012d1c <_puts_r+0x50>
 8012cf4:	6923      	ldr	r3, [r4, #16]
 8012cf6:	b18b      	cbz	r3, 8012d1c <_puts_r+0x50>
 8012cf8:	3e01      	subs	r6, #1
 8012cfa:	68a3      	ldr	r3, [r4, #8]
 8012cfc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012d00:	3b01      	subs	r3, #1
 8012d02:	60a3      	str	r3, [r4, #8]
 8012d04:	b9e9      	cbnz	r1, 8012d42 <_puts_r+0x76>
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	da2e      	bge.n	8012d68 <_puts_r+0x9c>
 8012d0a:	4622      	mov	r2, r4
 8012d0c:	210a      	movs	r1, #10
 8012d0e:	4628      	mov	r0, r5
 8012d10:	f000 f89b 	bl	8012e4a <__swbuf_r>
 8012d14:	3001      	adds	r0, #1
 8012d16:	d007      	beq.n	8012d28 <_puts_r+0x5c>
 8012d18:	250a      	movs	r5, #10
 8012d1a:	e007      	b.n	8012d2c <_puts_r+0x60>
 8012d1c:	4621      	mov	r1, r4
 8012d1e:	4628      	mov	r0, r5
 8012d20:	f000 f8d0 	bl	8012ec4 <__swsetup_r>
 8012d24:	2800      	cmp	r0, #0
 8012d26:	d0e7      	beq.n	8012cf8 <_puts_r+0x2c>
 8012d28:	f04f 35ff 	mov.w	r5, #4294967295
 8012d2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012d2e:	07da      	lsls	r2, r3, #31
 8012d30:	d405      	bmi.n	8012d3e <_puts_r+0x72>
 8012d32:	89a3      	ldrh	r3, [r4, #12]
 8012d34:	059b      	lsls	r3, r3, #22
 8012d36:	d402      	bmi.n	8012d3e <_puts_r+0x72>
 8012d38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012d3a:	f000 f9ef 	bl	801311c <__retarget_lock_release_recursive>
 8012d3e:	4628      	mov	r0, r5
 8012d40:	bd70      	pop	{r4, r5, r6, pc}
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	da04      	bge.n	8012d50 <_puts_r+0x84>
 8012d46:	69a2      	ldr	r2, [r4, #24]
 8012d48:	429a      	cmp	r2, r3
 8012d4a:	dc06      	bgt.n	8012d5a <_puts_r+0x8e>
 8012d4c:	290a      	cmp	r1, #10
 8012d4e:	d004      	beq.n	8012d5a <_puts_r+0x8e>
 8012d50:	6823      	ldr	r3, [r4, #0]
 8012d52:	1c5a      	adds	r2, r3, #1
 8012d54:	6022      	str	r2, [r4, #0]
 8012d56:	7019      	strb	r1, [r3, #0]
 8012d58:	e7cf      	b.n	8012cfa <_puts_r+0x2e>
 8012d5a:	4622      	mov	r2, r4
 8012d5c:	4628      	mov	r0, r5
 8012d5e:	f000 f874 	bl	8012e4a <__swbuf_r>
 8012d62:	3001      	adds	r0, #1
 8012d64:	d1c9      	bne.n	8012cfa <_puts_r+0x2e>
 8012d66:	e7df      	b.n	8012d28 <_puts_r+0x5c>
 8012d68:	6823      	ldr	r3, [r4, #0]
 8012d6a:	250a      	movs	r5, #10
 8012d6c:	1c5a      	adds	r2, r3, #1
 8012d6e:	6022      	str	r2, [r4, #0]
 8012d70:	701d      	strb	r5, [r3, #0]
 8012d72:	e7db      	b.n	8012d2c <_puts_r+0x60>

08012d74 <puts>:
 8012d74:	4b02      	ldr	r3, [pc, #8]	; (8012d80 <puts+0xc>)
 8012d76:	4601      	mov	r1, r0
 8012d78:	6818      	ldr	r0, [r3, #0]
 8012d7a:	f7ff bfa7 	b.w	8012ccc <_puts_r>
 8012d7e:	bf00      	nop
 8012d80:	20000088 	.word	0x20000088

08012d84 <siprintf>:
 8012d84:	b40e      	push	{r1, r2, r3}
 8012d86:	b500      	push	{lr}
 8012d88:	b09c      	sub	sp, #112	; 0x70
 8012d8a:	ab1d      	add	r3, sp, #116	; 0x74
 8012d8c:	9002      	str	r0, [sp, #8]
 8012d8e:	9006      	str	r0, [sp, #24]
 8012d90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012d94:	4809      	ldr	r0, [pc, #36]	; (8012dbc <siprintf+0x38>)
 8012d96:	9107      	str	r1, [sp, #28]
 8012d98:	9104      	str	r1, [sp, #16]
 8012d9a:	4909      	ldr	r1, [pc, #36]	; (8012dc0 <siprintf+0x3c>)
 8012d9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012da0:	9105      	str	r1, [sp, #20]
 8012da2:	6800      	ldr	r0, [r0, #0]
 8012da4:	9301      	str	r3, [sp, #4]
 8012da6:	a902      	add	r1, sp, #8
 8012da8:	f001 fd22 	bl	80147f0 <_svfiprintf_r>
 8012dac:	9b02      	ldr	r3, [sp, #8]
 8012dae:	2200      	movs	r2, #0
 8012db0:	701a      	strb	r2, [r3, #0]
 8012db2:	b01c      	add	sp, #112	; 0x70
 8012db4:	f85d eb04 	ldr.w	lr, [sp], #4
 8012db8:	b003      	add	sp, #12
 8012dba:	4770      	bx	lr
 8012dbc:	20000088 	.word	0x20000088
 8012dc0:	ffff0208 	.word	0xffff0208

08012dc4 <__sread>:
 8012dc4:	b510      	push	{r4, lr}
 8012dc6:	460c      	mov	r4, r1
 8012dc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012dcc:	f000 f956 	bl	801307c <_read_r>
 8012dd0:	2800      	cmp	r0, #0
 8012dd2:	bfab      	itete	ge
 8012dd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012dd6:	89a3      	ldrhlt	r3, [r4, #12]
 8012dd8:	181b      	addge	r3, r3, r0
 8012dda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012dde:	bfac      	ite	ge
 8012de0:	6563      	strge	r3, [r4, #84]	; 0x54
 8012de2:	81a3      	strhlt	r3, [r4, #12]
 8012de4:	bd10      	pop	{r4, pc}

08012de6 <__swrite>:
 8012de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012dea:	461f      	mov	r7, r3
 8012dec:	898b      	ldrh	r3, [r1, #12]
 8012dee:	05db      	lsls	r3, r3, #23
 8012df0:	4605      	mov	r5, r0
 8012df2:	460c      	mov	r4, r1
 8012df4:	4616      	mov	r6, r2
 8012df6:	d505      	bpl.n	8012e04 <__swrite+0x1e>
 8012df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012dfc:	2302      	movs	r3, #2
 8012dfe:	2200      	movs	r2, #0
 8012e00:	f000 f92a 	bl	8013058 <_lseek_r>
 8012e04:	89a3      	ldrh	r3, [r4, #12]
 8012e06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012e0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012e0e:	81a3      	strh	r3, [r4, #12]
 8012e10:	4632      	mov	r2, r6
 8012e12:	463b      	mov	r3, r7
 8012e14:	4628      	mov	r0, r5
 8012e16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012e1a:	f000 b941 	b.w	80130a0 <_write_r>

08012e1e <__sseek>:
 8012e1e:	b510      	push	{r4, lr}
 8012e20:	460c      	mov	r4, r1
 8012e22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e26:	f000 f917 	bl	8013058 <_lseek_r>
 8012e2a:	1c43      	adds	r3, r0, #1
 8012e2c:	89a3      	ldrh	r3, [r4, #12]
 8012e2e:	bf15      	itete	ne
 8012e30:	6560      	strne	r0, [r4, #84]	; 0x54
 8012e32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012e36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012e3a:	81a3      	strheq	r3, [r4, #12]
 8012e3c:	bf18      	it	ne
 8012e3e:	81a3      	strhne	r3, [r4, #12]
 8012e40:	bd10      	pop	{r4, pc}

08012e42 <__sclose>:
 8012e42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e46:	f000 b8a1 	b.w	8012f8c <_close_r>

08012e4a <__swbuf_r>:
 8012e4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e4c:	460e      	mov	r6, r1
 8012e4e:	4614      	mov	r4, r2
 8012e50:	4605      	mov	r5, r0
 8012e52:	b118      	cbz	r0, 8012e5c <__swbuf_r+0x12>
 8012e54:	6a03      	ldr	r3, [r0, #32]
 8012e56:	b90b      	cbnz	r3, 8012e5c <__swbuf_r+0x12>
 8012e58:	f7ff fef0 	bl	8012c3c <__sinit>
 8012e5c:	69a3      	ldr	r3, [r4, #24]
 8012e5e:	60a3      	str	r3, [r4, #8]
 8012e60:	89a3      	ldrh	r3, [r4, #12]
 8012e62:	071a      	lsls	r2, r3, #28
 8012e64:	d525      	bpl.n	8012eb2 <__swbuf_r+0x68>
 8012e66:	6923      	ldr	r3, [r4, #16]
 8012e68:	b31b      	cbz	r3, 8012eb2 <__swbuf_r+0x68>
 8012e6a:	6823      	ldr	r3, [r4, #0]
 8012e6c:	6922      	ldr	r2, [r4, #16]
 8012e6e:	1a98      	subs	r0, r3, r2
 8012e70:	6963      	ldr	r3, [r4, #20]
 8012e72:	b2f6      	uxtb	r6, r6
 8012e74:	4283      	cmp	r3, r0
 8012e76:	4637      	mov	r7, r6
 8012e78:	dc04      	bgt.n	8012e84 <__swbuf_r+0x3a>
 8012e7a:	4621      	mov	r1, r4
 8012e7c:	4628      	mov	r0, r5
 8012e7e:	f001 ff7f 	bl	8014d80 <_fflush_r>
 8012e82:	b9e0      	cbnz	r0, 8012ebe <__swbuf_r+0x74>
 8012e84:	68a3      	ldr	r3, [r4, #8]
 8012e86:	3b01      	subs	r3, #1
 8012e88:	60a3      	str	r3, [r4, #8]
 8012e8a:	6823      	ldr	r3, [r4, #0]
 8012e8c:	1c5a      	adds	r2, r3, #1
 8012e8e:	6022      	str	r2, [r4, #0]
 8012e90:	701e      	strb	r6, [r3, #0]
 8012e92:	6962      	ldr	r2, [r4, #20]
 8012e94:	1c43      	adds	r3, r0, #1
 8012e96:	429a      	cmp	r2, r3
 8012e98:	d004      	beq.n	8012ea4 <__swbuf_r+0x5a>
 8012e9a:	89a3      	ldrh	r3, [r4, #12]
 8012e9c:	07db      	lsls	r3, r3, #31
 8012e9e:	d506      	bpl.n	8012eae <__swbuf_r+0x64>
 8012ea0:	2e0a      	cmp	r6, #10
 8012ea2:	d104      	bne.n	8012eae <__swbuf_r+0x64>
 8012ea4:	4621      	mov	r1, r4
 8012ea6:	4628      	mov	r0, r5
 8012ea8:	f001 ff6a 	bl	8014d80 <_fflush_r>
 8012eac:	b938      	cbnz	r0, 8012ebe <__swbuf_r+0x74>
 8012eae:	4638      	mov	r0, r7
 8012eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012eb2:	4621      	mov	r1, r4
 8012eb4:	4628      	mov	r0, r5
 8012eb6:	f000 f805 	bl	8012ec4 <__swsetup_r>
 8012eba:	2800      	cmp	r0, #0
 8012ebc:	d0d5      	beq.n	8012e6a <__swbuf_r+0x20>
 8012ebe:	f04f 37ff 	mov.w	r7, #4294967295
 8012ec2:	e7f4      	b.n	8012eae <__swbuf_r+0x64>

08012ec4 <__swsetup_r>:
 8012ec4:	b538      	push	{r3, r4, r5, lr}
 8012ec6:	4b2a      	ldr	r3, [pc, #168]	; (8012f70 <__swsetup_r+0xac>)
 8012ec8:	4605      	mov	r5, r0
 8012eca:	6818      	ldr	r0, [r3, #0]
 8012ecc:	460c      	mov	r4, r1
 8012ece:	b118      	cbz	r0, 8012ed8 <__swsetup_r+0x14>
 8012ed0:	6a03      	ldr	r3, [r0, #32]
 8012ed2:	b90b      	cbnz	r3, 8012ed8 <__swsetup_r+0x14>
 8012ed4:	f7ff feb2 	bl	8012c3c <__sinit>
 8012ed8:	89a3      	ldrh	r3, [r4, #12]
 8012eda:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012ede:	0718      	lsls	r0, r3, #28
 8012ee0:	d422      	bmi.n	8012f28 <__swsetup_r+0x64>
 8012ee2:	06d9      	lsls	r1, r3, #27
 8012ee4:	d407      	bmi.n	8012ef6 <__swsetup_r+0x32>
 8012ee6:	2309      	movs	r3, #9
 8012ee8:	602b      	str	r3, [r5, #0]
 8012eea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012eee:	81a3      	strh	r3, [r4, #12]
 8012ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8012ef4:	e034      	b.n	8012f60 <__swsetup_r+0x9c>
 8012ef6:	0758      	lsls	r0, r3, #29
 8012ef8:	d512      	bpl.n	8012f20 <__swsetup_r+0x5c>
 8012efa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012efc:	b141      	cbz	r1, 8012f10 <__swsetup_r+0x4c>
 8012efe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012f02:	4299      	cmp	r1, r3
 8012f04:	d002      	beq.n	8012f0c <__swsetup_r+0x48>
 8012f06:	4628      	mov	r0, r5
 8012f08:	f000 ff94 	bl	8013e34 <_free_r>
 8012f0c:	2300      	movs	r3, #0
 8012f0e:	6363      	str	r3, [r4, #52]	; 0x34
 8012f10:	89a3      	ldrh	r3, [r4, #12]
 8012f12:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012f16:	81a3      	strh	r3, [r4, #12]
 8012f18:	2300      	movs	r3, #0
 8012f1a:	6063      	str	r3, [r4, #4]
 8012f1c:	6923      	ldr	r3, [r4, #16]
 8012f1e:	6023      	str	r3, [r4, #0]
 8012f20:	89a3      	ldrh	r3, [r4, #12]
 8012f22:	f043 0308 	orr.w	r3, r3, #8
 8012f26:	81a3      	strh	r3, [r4, #12]
 8012f28:	6923      	ldr	r3, [r4, #16]
 8012f2a:	b94b      	cbnz	r3, 8012f40 <__swsetup_r+0x7c>
 8012f2c:	89a3      	ldrh	r3, [r4, #12]
 8012f2e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012f32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012f36:	d003      	beq.n	8012f40 <__swsetup_r+0x7c>
 8012f38:	4621      	mov	r1, r4
 8012f3a:	4628      	mov	r0, r5
 8012f3c:	f001 ff6e 	bl	8014e1c <__smakebuf_r>
 8012f40:	89a0      	ldrh	r0, [r4, #12]
 8012f42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012f46:	f010 0301 	ands.w	r3, r0, #1
 8012f4a:	d00a      	beq.n	8012f62 <__swsetup_r+0x9e>
 8012f4c:	2300      	movs	r3, #0
 8012f4e:	60a3      	str	r3, [r4, #8]
 8012f50:	6963      	ldr	r3, [r4, #20]
 8012f52:	425b      	negs	r3, r3
 8012f54:	61a3      	str	r3, [r4, #24]
 8012f56:	6923      	ldr	r3, [r4, #16]
 8012f58:	b943      	cbnz	r3, 8012f6c <__swsetup_r+0xa8>
 8012f5a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012f5e:	d1c4      	bne.n	8012eea <__swsetup_r+0x26>
 8012f60:	bd38      	pop	{r3, r4, r5, pc}
 8012f62:	0781      	lsls	r1, r0, #30
 8012f64:	bf58      	it	pl
 8012f66:	6963      	ldrpl	r3, [r4, #20]
 8012f68:	60a3      	str	r3, [r4, #8]
 8012f6a:	e7f4      	b.n	8012f56 <__swsetup_r+0x92>
 8012f6c:	2000      	movs	r0, #0
 8012f6e:	e7f7      	b.n	8012f60 <__swsetup_r+0x9c>
 8012f70:	20000088 	.word	0x20000088

08012f74 <memset>:
 8012f74:	4402      	add	r2, r0
 8012f76:	4603      	mov	r3, r0
 8012f78:	4293      	cmp	r3, r2
 8012f7a:	d100      	bne.n	8012f7e <memset+0xa>
 8012f7c:	4770      	bx	lr
 8012f7e:	f803 1b01 	strb.w	r1, [r3], #1
 8012f82:	e7f9      	b.n	8012f78 <memset+0x4>

08012f84 <_localeconv_r>:
 8012f84:	4800      	ldr	r0, [pc, #0]	; (8012f88 <_localeconv_r+0x4>)
 8012f86:	4770      	bx	lr
 8012f88:	2000017c 	.word	0x2000017c

08012f8c <_close_r>:
 8012f8c:	b538      	push	{r3, r4, r5, lr}
 8012f8e:	4d06      	ldr	r5, [pc, #24]	; (8012fa8 <_close_r+0x1c>)
 8012f90:	2300      	movs	r3, #0
 8012f92:	4604      	mov	r4, r0
 8012f94:	4608      	mov	r0, r1
 8012f96:	602b      	str	r3, [r5, #0]
 8012f98:	f7f5 fc71 	bl	800887e <_close>
 8012f9c:	1c43      	adds	r3, r0, #1
 8012f9e:	d102      	bne.n	8012fa6 <_close_r+0x1a>
 8012fa0:	682b      	ldr	r3, [r5, #0]
 8012fa2:	b103      	cbz	r3, 8012fa6 <_close_r+0x1a>
 8012fa4:	6023      	str	r3, [r4, #0]
 8012fa6:	bd38      	pop	{r3, r4, r5, pc}
 8012fa8:	200081e4 	.word	0x200081e4

08012fac <_reclaim_reent>:
 8012fac:	4b29      	ldr	r3, [pc, #164]	; (8013054 <_reclaim_reent+0xa8>)
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	4283      	cmp	r3, r0
 8012fb2:	b570      	push	{r4, r5, r6, lr}
 8012fb4:	4604      	mov	r4, r0
 8012fb6:	d04b      	beq.n	8013050 <_reclaim_reent+0xa4>
 8012fb8:	69c3      	ldr	r3, [r0, #28]
 8012fba:	b143      	cbz	r3, 8012fce <_reclaim_reent+0x22>
 8012fbc:	68db      	ldr	r3, [r3, #12]
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d144      	bne.n	801304c <_reclaim_reent+0xa0>
 8012fc2:	69e3      	ldr	r3, [r4, #28]
 8012fc4:	6819      	ldr	r1, [r3, #0]
 8012fc6:	b111      	cbz	r1, 8012fce <_reclaim_reent+0x22>
 8012fc8:	4620      	mov	r0, r4
 8012fca:	f000 ff33 	bl	8013e34 <_free_r>
 8012fce:	6961      	ldr	r1, [r4, #20]
 8012fd0:	b111      	cbz	r1, 8012fd8 <_reclaim_reent+0x2c>
 8012fd2:	4620      	mov	r0, r4
 8012fd4:	f000 ff2e 	bl	8013e34 <_free_r>
 8012fd8:	69e1      	ldr	r1, [r4, #28]
 8012fda:	b111      	cbz	r1, 8012fe2 <_reclaim_reent+0x36>
 8012fdc:	4620      	mov	r0, r4
 8012fde:	f000 ff29 	bl	8013e34 <_free_r>
 8012fe2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012fe4:	b111      	cbz	r1, 8012fec <_reclaim_reent+0x40>
 8012fe6:	4620      	mov	r0, r4
 8012fe8:	f000 ff24 	bl	8013e34 <_free_r>
 8012fec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012fee:	b111      	cbz	r1, 8012ff6 <_reclaim_reent+0x4a>
 8012ff0:	4620      	mov	r0, r4
 8012ff2:	f000 ff1f 	bl	8013e34 <_free_r>
 8012ff6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012ff8:	b111      	cbz	r1, 8013000 <_reclaim_reent+0x54>
 8012ffa:	4620      	mov	r0, r4
 8012ffc:	f000 ff1a 	bl	8013e34 <_free_r>
 8013000:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8013002:	b111      	cbz	r1, 801300a <_reclaim_reent+0x5e>
 8013004:	4620      	mov	r0, r4
 8013006:	f000 ff15 	bl	8013e34 <_free_r>
 801300a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801300c:	b111      	cbz	r1, 8013014 <_reclaim_reent+0x68>
 801300e:	4620      	mov	r0, r4
 8013010:	f000 ff10 	bl	8013e34 <_free_r>
 8013014:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8013016:	b111      	cbz	r1, 801301e <_reclaim_reent+0x72>
 8013018:	4620      	mov	r0, r4
 801301a:	f000 ff0b 	bl	8013e34 <_free_r>
 801301e:	6a23      	ldr	r3, [r4, #32]
 8013020:	b1b3      	cbz	r3, 8013050 <_reclaim_reent+0xa4>
 8013022:	4620      	mov	r0, r4
 8013024:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013028:	4718      	bx	r3
 801302a:	5949      	ldr	r1, [r1, r5]
 801302c:	b941      	cbnz	r1, 8013040 <_reclaim_reent+0x94>
 801302e:	3504      	adds	r5, #4
 8013030:	69e3      	ldr	r3, [r4, #28]
 8013032:	2d80      	cmp	r5, #128	; 0x80
 8013034:	68d9      	ldr	r1, [r3, #12]
 8013036:	d1f8      	bne.n	801302a <_reclaim_reent+0x7e>
 8013038:	4620      	mov	r0, r4
 801303a:	f000 fefb 	bl	8013e34 <_free_r>
 801303e:	e7c0      	b.n	8012fc2 <_reclaim_reent+0x16>
 8013040:	680e      	ldr	r6, [r1, #0]
 8013042:	4620      	mov	r0, r4
 8013044:	f000 fef6 	bl	8013e34 <_free_r>
 8013048:	4631      	mov	r1, r6
 801304a:	e7ef      	b.n	801302c <_reclaim_reent+0x80>
 801304c:	2500      	movs	r5, #0
 801304e:	e7ef      	b.n	8013030 <_reclaim_reent+0x84>
 8013050:	bd70      	pop	{r4, r5, r6, pc}
 8013052:	bf00      	nop
 8013054:	20000088 	.word	0x20000088

08013058 <_lseek_r>:
 8013058:	b538      	push	{r3, r4, r5, lr}
 801305a:	4d07      	ldr	r5, [pc, #28]	; (8013078 <_lseek_r+0x20>)
 801305c:	4604      	mov	r4, r0
 801305e:	4608      	mov	r0, r1
 8013060:	4611      	mov	r1, r2
 8013062:	2200      	movs	r2, #0
 8013064:	602a      	str	r2, [r5, #0]
 8013066:	461a      	mov	r2, r3
 8013068:	f7f5 fc30 	bl	80088cc <_lseek>
 801306c:	1c43      	adds	r3, r0, #1
 801306e:	d102      	bne.n	8013076 <_lseek_r+0x1e>
 8013070:	682b      	ldr	r3, [r5, #0]
 8013072:	b103      	cbz	r3, 8013076 <_lseek_r+0x1e>
 8013074:	6023      	str	r3, [r4, #0]
 8013076:	bd38      	pop	{r3, r4, r5, pc}
 8013078:	200081e4 	.word	0x200081e4

0801307c <_read_r>:
 801307c:	b538      	push	{r3, r4, r5, lr}
 801307e:	4d07      	ldr	r5, [pc, #28]	; (801309c <_read_r+0x20>)
 8013080:	4604      	mov	r4, r0
 8013082:	4608      	mov	r0, r1
 8013084:	4611      	mov	r1, r2
 8013086:	2200      	movs	r2, #0
 8013088:	602a      	str	r2, [r5, #0]
 801308a:	461a      	mov	r2, r3
 801308c:	f7f5 fbbe 	bl	800880c <_read>
 8013090:	1c43      	adds	r3, r0, #1
 8013092:	d102      	bne.n	801309a <_read_r+0x1e>
 8013094:	682b      	ldr	r3, [r5, #0]
 8013096:	b103      	cbz	r3, 801309a <_read_r+0x1e>
 8013098:	6023      	str	r3, [r4, #0]
 801309a:	bd38      	pop	{r3, r4, r5, pc}
 801309c:	200081e4 	.word	0x200081e4

080130a0 <_write_r>:
 80130a0:	b538      	push	{r3, r4, r5, lr}
 80130a2:	4d07      	ldr	r5, [pc, #28]	; (80130c0 <_write_r+0x20>)
 80130a4:	4604      	mov	r4, r0
 80130a6:	4608      	mov	r0, r1
 80130a8:	4611      	mov	r1, r2
 80130aa:	2200      	movs	r2, #0
 80130ac:	602a      	str	r2, [r5, #0]
 80130ae:	461a      	mov	r2, r3
 80130b0:	f7f5 fbc9 	bl	8008846 <_write>
 80130b4:	1c43      	adds	r3, r0, #1
 80130b6:	d102      	bne.n	80130be <_write_r+0x1e>
 80130b8:	682b      	ldr	r3, [r5, #0]
 80130ba:	b103      	cbz	r3, 80130be <_write_r+0x1e>
 80130bc:	6023      	str	r3, [r4, #0]
 80130be:	bd38      	pop	{r3, r4, r5, pc}
 80130c0:	200081e4 	.word	0x200081e4

080130c4 <__errno>:
 80130c4:	4b01      	ldr	r3, [pc, #4]	; (80130cc <__errno+0x8>)
 80130c6:	6818      	ldr	r0, [r3, #0]
 80130c8:	4770      	bx	lr
 80130ca:	bf00      	nop
 80130cc:	20000088 	.word	0x20000088

080130d0 <__libc_init_array>:
 80130d0:	b570      	push	{r4, r5, r6, lr}
 80130d2:	4d0d      	ldr	r5, [pc, #52]	; (8013108 <__libc_init_array+0x38>)
 80130d4:	4c0d      	ldr	r4, [pc, #52]	; (801310c <__libc_init_array+0x3c>)
 80130d6:	1b64      	subs	r4, r4, r5
 80130d8:	10a4      	asrs	r4, r4, #2
 80130da:	2600      	movs	r6, #0
 80130dc:	42a6      	cmp	r6, r4
 80130de:	d109      	bne.n	80130f4 <__libc_init_array+0x24>
 80130e0:	4d0b      	ldr	r5, [pc, #44]	; (8013110 <__libc_init_array+0x40>)
 80130e2:	4c0c      	ldr	r4, [pc, #48]	; (8013114 <__libc_init_array+0x44>)
 80130e4:	f001 ffd4 	bl	8015090 <_init>
 80130e8:	1b64      	subs	r4, r4, r5
 80130ea:	10a4      	asrs	r4, r4, #2
 80130ec:	2600      	movs	r6, #0
 80130ee:	42a6      	cmp	r6, r4
 80130f0:	d105      	bne.n	80130fe <__libc_init_array+0x2e>
 80130f2:	bd70      	pop	{r4, r5, r6, pc}
 80130f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80130f8:	4798      	blx	r3
 80130fa:	3601      	adds	r6, #1
 80130fc:	e7ee      	b.n	80130dc <__libc_init_array+0xc>
 80130fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8013102:	4798      	blx	r3
 8013104:	3601      	adds	r6, #1
 8013106:	e7f2      	b.n	80130ee <__libc_init_array+0x1e>
 8013108:	08015e6c 	.word	0x08015e6c
 801310c:	08015e6c 	.word	0x08015e6c
 8013110:	08015e6c 	.word	0x08015e6c
 8013114:	08015e74 	.word	0x08015e74

08013118 <__retarget_lock_init_recursive>:
 8013118:	4770      	bx	lr

0801311a <__retarget_lock_acquire_recursive>:
 801311a:	4770      	bx	lr

0801311c <__retarget_lock_release_recursive>:
 801311c:	4770      	bx	lr

0801311e <memcpy>:
 801311e:	440a      	add	r2, r1
 8013120:	4291      	cmp	r1, r2
 8013122:	f100 33ff 	add.w	r3, r0, #4294967295
 8013126:	d100      	bne.n	801312a <memcpy+0xc>
 8013128:	4770      	bx	lr
 801312a:	b510      	push	{r4, lr}
 801312c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013130:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013134:	4291      	cmp	r1, r2
 8013136:	d1f9      	bne.n	801312c <memcpy+0xe>
 8013138:	bd10      	pop	{r4, pc}

0801313a <quorem>:
 801313a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801313e:	6903      	ldr	r3, [r0, #16]
 8013140:	690c      	ldr	r4, [r1, #16]
 8013142:	42a3      	cmp	r3, r4
 8013144:	4607      	mov	r7, r0
 8013146:	db7e      	blt.n	8013246 <quorem+0x10c>
 8013148:	3c01      	subs	r4, #1
 801314a:	f101 0814 	add.w	r8, r1, #20
 801314e:	f100 0514 	add.w	r5, r0, #20
 8013152:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013156:	9301      	str	r3, [sp, #4]
 8013158:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801315c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013160:	3301      	adds	r3, #1
 8013162:	429a      	cmp	r2, r3
 8013164:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013168:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801316c:	fbb2 f6f3 	udiv	r6, r2, r3
 8013170:	d331      	bcc.n	80131d6 <quorem+0x9c>
 8013172:	f04f 0e00 	mov.w	lr, #0
 8013176:	4640      	mov	r0, r8
 8013178:	46ac      	mov	ip, r5
 801317a:	46f2      	mov	sl, lr
 801317c:	f850 2b04 	ldr.w	r2, [r0], #4
 8013180:	b293      	uxth	r3, r2
 8013182:	fb06 e303 	mla	r3, r6, r3, lr
 8013186:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801318a:	0c1a      	lsrs	r2, r3, #16
 801318c:	b29b      	uxth	r3, r3
 801318e:	ebaa 0303 	sub.w	r3, sl, r3
 8013192:	f8dc a000 	ldr.w	sl, [ip]
 8013196:	fa13 f38a 	uxtah	r3, r3, sl
 801319a:	fb06 220e 	mla	r2, r6, lr, r2
 801319e:	9300      	str	r3, [sp, #0]
 80131a0:	9b00      	ldr	r3, [sp, #0]
 80131a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80131a6:	b292      	uxth	r2, r2
 80131a8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80131ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80131b0:	f8bd 3000 	ldrh.w	r3, [sp]
 80131b4:	4581      	cmp	r9, r0
 80131b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80131ba:	f84c 3b04 	str.w	r3, [ip], #4
 80131be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80131c2:	d2db      	bcs.n	801317c <quorem+0x42>
 80131c4:	f855 300b 	ldr.w	r3, [r5, fp]
 80131c8:	b92b      	cbnz	r3, 80131d6 <quorem+0x9c>
 80131ca:	9b01      	ldr	r3, [sp, #4]
 80131cc:	3b04      	subs	r3, #4
 80131ce:	429d      	cmp	r5, r3
 80131d0:	461a      	mov	r2, r3
 80131d2:	d32c      	bcc.n	801322e <quorem+0xf4>
 80131d4:	613c      	str	r4, [r7, #16]
 80131d6:	4638      	mov	r0, r7
 80131d8:	f001 f9a8 	bl	801452c <__mcmp>
 80131dc:	2800      	cmp	r0, #0
 80131de:	db22      	blt.n	8013226 <quorem+0xec>
 80131e0:	3601      	adds	r6, #1
 80131e2:	4629      	mov	r1, r5
 80131e4:	2000      	movs	r0, #0
 80131e6:	f858 2b04 	ldr.w	r2, [r8], #4
 80131ea:	f8d1 c000 	ldr.w	ip, [r1]
 80131ee:	b293      	uxth	r3, r2
 80131f0:	1ac3      	subs	r3, r0, r3
 80131f2:	0c12      	lsrs	r2, r2, #16
 80131f4:	fa13 f38c 	uxtah	r3, r3, ip
 80131f8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80131fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013200:	b29b      	uxth	r3, r3
 8013202:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013206:	45c1      	cmp	r9, r8
 8013208:	f841 3b04 	str.w	r3, [r1], #4
 801320c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8013210:	d2e9      	bcs.n	80131e6 <quorem+0xac>
 8013212:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013216:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801321a:	b922      	cbnz	r2, 8013226 <quorem+0xec>
 801321c:	3b04      	subs	r3, #4
 801321e:	429d      	cmp	r5, r3
 8013220:	461a      	mov	r2, r3
 8013222:	d30a      	bcc.n	801323a <quorem+0x100>
 8013224:	613c      	str	r4, [r7, #16]
 8013226:	4630      	mov	r0, r6
 8013228:	b003      	add	sp, #12
 801322a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801322e:	6812      	ldr	r2, [r2, #0]
 8013230:	3b04      	subs	r3, #4
 8013232:	2a00      	cmp	r2, #0
 8013234:	d1ce      	bne.n	80131d4 <quorem+0x9a>
 8013236:	3c01      	subs	r4, #1
 8013238:	e7c9      	b.n	80131ce <quorem+0x94>
 801323a:	6812      	ldr	r2, [r2, #0]
 801323c:	3b04      	subs	r3, #4
 801323e:	2a00      	cmp	r2, #0
 8013240:	d1f0      	bne.n	8013224 <quorem+0xea>
 8013242:	3c01      	subs	r4, #1
 8013244:	e7eb      	b.n	801321e <quorem+0xe4>
 8013246:	2000      	movs	r0, #0
 8013248:	e7ee      	b.n	8013228 <quorem+0xee>
 801324a:	0000      	movs	r0, r0
 801324c:	0000      	movs	r0, r0
	...

08013250 <_dtoa_r>:
 8013250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013254:	ed2d 8b04 	vpush	{d8-d9}
 8013258:	69c5      	ldr	r5, [r0, #28]
 801325a:	b093      	sub	sp, #76	; 0x4c
 801325c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013260:	ec57 6b10 	vmov	r6, r7, d0
 8013264:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013268:	9107      	str	r1, [sp, #28]
 801326a:	4604      	mov	r4, r0
 801326c:	920a      	str	r2, [sp, #40]	; 0x28
 801326e:	930d      	str	r3, [sp, #52]	; 0x34
 8013270:	b975      	cbnz	r5, 8013290 <_dtoa_r+0x40>
 8013272:	2010      	movs	r0, #16
 8013274:	f000 fe2a 	bl	8013ecc <malloc>
 8013278:	4602      	mov	r2, r0
 801327a:	61e0      	str	r0, [r4, #28]
 801327c:	b920      	cbnz	r0, 8013288 <_dtoa_r+0x38>
 801327e:	4bae      	ldr	r3, [pc, #696]	; (8013538 <_dtoa_r+0x2e8>)
 8013280:	21ef      	movs	r1, #239	; 0xef
 8013282:	48ae      	ldr	r0, [pc, #696]	; (801353c <_dtoa_r+0x2ec>)
 8013284:	f001 fe52 	bl	8014f2c <__assert_func>
 8013288:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801328c:	6005      	str	r5, [r0, #0]
 801328e:	60c5      	str	r5, [r0, #12]
 8013290:	69e3      	ldr	r3, [r4, #28]
 8013292:	6819      	ldr	r1, [r3, #0]
 8013294:	b151      	cbz	r1, 80132ac <_dtoa_r+0x5c>
 8013296:	685a      	ldr	r2, [r3, #4]
 8013298:	604a      	str	r2, [r1, #4]
 801329a:	2301      	movs	r3, #1
 801329c:	4093      	lsls	r3, r2
 801329e:	608b      	str	r3, [r1, #8]
 80132a0:	4620      	mov	r0, r4
 80132a2:	f000 ff07 	bl	80140b4 <_Bfree>
 80132a6:	69e3      	ldr	r3, [r4, #28]
 80132a8:	2200      	movs	r2, #0
 80132aa:	601a      	str	r2, [r3, #0]
 80132ac:	1e3b      	subs	r3, r7, #0
 80132ae:	bfbb      	ittet	lt
 80132b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80132b4:	9303      	strlt	r3, [sp, #12]
 80132b6:	2300      	movge	r3, #0
 80132b8:	2201      	movlt	r2, #1
 80132ba:	bfac      	ite	ge
 80132bc:	f8c8 3000 	strge.w	r3, [r8]
 80132c0:	f8c8 2000 	strlt.w	r2, [r8]
 80132c4:	4b9e      	ldr	r3, [pc, #632]	; (8013540 <_dtoa_r+0x2f0>)
 80132c6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80132ca:	ea33 0308 	bics.w	r3, r3, r8
 80132ce:	d11b      	bne.n	8013308 <_dtoa_r+0xb8>
 80132d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80132d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80132d6:	6013      	str	r3, [r2, #0]
 80132d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80132dc:	4333      	orrs	r3, r6
 80132de:	f000 8593 	beq.w	8013e08 <_dtoa_r+0xbb8>
 80132e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80132e4:	b963      	cbnz	r3, 8013300 <_dtoa_r+0xb0>
 80132e6:	4b97      	ldr	r3, [pc, #604]	; (8013544 <_dtoa_r+0x2f4>)
 80132e8:	e027      	b.n	801333a <_dtoa_r+0xea>
 80132ea:	4b97      	ldr	r3, [pc, #604]	; (8013548 <_dtoa_r+0x2f8>)
 80132ec:	9300      	str	r3, [sp, #0]
 80132ee:	3308      	adds	r3, #8
 80132f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80132f2:	6013      	str	r3, [r2, #0]
 80132f4:	9800      	ldr	r0, [sp, #0]
 80132f6:	b013      	add	sp, #76	; 0x4c
 80132f8:	ecbd 8b04 	vpop	{d8-d9}
 80132fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013300:	4b90      	ldr	r3, [pc, #576]	; (8013544 <_dtoa_r+0x2f4>)
 8013302:	9300      	str	r3, [sp, #0]
 8013304:	3303      	adds	r3, #3
 8013306:	e7f3      	b.n	80132f0 <_dtoa_r+0xa0>
 8013308:	ed9d 7b02 	vldr	d7, [sp, #8]
 801330c:	2200      	movs	r2, #0
 801330e:	ec51 0b17 	vmov	r0, r1, d7
 8013312:	eeb0 8a47 	vmov.f32	s16, s14
 8013316:	eef0 8a67 	vmov.f32	s17, s15
 801331a:	2300      	movs	r3, #0
 801331c:	f7ed fbe4 	bl	8000ae8 <__aeabi_dcmpeq>
 8013320:	4681      	mov	r9, r0
 8013322:	b160      	cbz	r0, 801333e <_dtoa_r+0xee>
 8013324:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013326:	2301      	movs	r3, #1
 8013328:	6013      	str	r3, [r2, #0]
 801332a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801332c:	2b00      	cmp	r3, #0
 801332e:	f000 8568 	beq.w	8013e02 <_dtoa_r+0xbb2>
 8013332:	4b86      	ldr	r3, [pc, #536]	; (801354c <_dtoa_r+0x2fc>)
 8013334:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013336:	6013      	str	r3, [r2, #0]
 8013338:	3b01      	subs	r3, #1
 801333a:	9300      	str	r3, [sp, #0]
 801333c:	e7da      	b.n	80132f4 <_dtoa_r+0xa4>
 801333e:	aa10      	add	r2, sp, #64	; 0x40
 8013340:	a911      	add	r1, sp, #68	; 0x44
 8013342:	4620      	mov	r0, r4
 8013344:	eeb0 0a48 	vmov.f32	s0, s16
 8013348:	eef0 0a68 	vmov.f32	s1, s17
 801334c:	f001 f994 	bl	8014678 <__d2b>
 8013350:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8013354:	4682      	mov	sl, r0
 8013356:	2d00      	cmp	r5, #0
 8013358:	d07f      	beq.n	801345a <_dtoa_r+0x20a>
 801335a:	ee18 3a90 	vmov	r3, s17
 801335e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013362:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8013366:	ec51 0b18 	vmov	r0, r1, d8
 801336a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801336e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013372:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8013376:	4619      	mov	r1, r3
 8013378:	2200      	movs	r2, #0
 801337a:	4b75      	ldr	r3, [pc, #468]	; (8013550 <_dtoa_r+0x300>)
 801337c:	f7ec ff94 	bl	80002a8 <__aeabi_dsub>
 8013380:	a367      	add	r3, pc, #412	; (adr r3, 8013520 <_dtoa_r+0x2d0>)
 8013382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013386:	f7ed f947 	bl	8000618 <__aeabi_dmul>
 801338a:	a367      	add	r3, pc, #412	; (adr r3, 8013528 <_dtoa_r+0x2d8>)
 801338c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013390:	f7ec ff8c 	bl	80002ac <__adddf3>
 8013394:	4606      	mov	r6, r0
 8013396:	4628      	mov	r0, r5
 8013398:	460f      	mov	r7, r1
 801339a:	f7ed f8d3 	bl	8000544 <__aeabi_i2d>
 801339e:	a364      	add	r3, pc, #400	; (adr r3, 8013530 <_dtoa_r+0x2e0>)
 80133a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133a4:	f7ed f938 	bl	8000618 <__aeabi_dmul>
 80133a8:	4602      	mov	r2, r0
 80133aa:	460b      	mov	r3, r1
 80133ac:	4630      	mov	r0, r6
 80133ae:	4639      	mov	r1, r7
 80133b0:	f7ec ff7c 	bl	80002ac <__adddf3>
 80133b4:	4606      	mov	r6, r0
 80133b6:	460f      	mov	r7, r1
 80133b8:	f7ed fbde 	bl	8000b78 <__aeabi_d2iz>
 80133bc:	2200      	movs	r2, #0
 80133be:	4683      	mov	fp, r0
 80133c0:	2300      	movs	r3, #0
 80133c2:	4630      	mov	r0, r6
 80133c4:	4639      	mov	r1, r7
 80133c6:	f7ed fb99 	bl	8000afc <__aeabi_dcmplt>
 80133ca:	b148      	cbz	r0, 80133e0 <_dtoa_r+0x190>
 80133cc:	4658      	mov	r0, fp
 80133ce:	f7ed f8b9 	bl	8000544 <__aeabi_i2d>
 80133d2:	4632      	mov	r2, r6
 80133d4:	463b      	mov	r3, r7
 80133d6:	f7ed fb87 	bl	8000ae8 <__aeabi_dcmpeq>
 80133da:	b908      	cbnz	r0, 80133e0 <_dtoa_r+0x190>
 80133dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80133e0:	f1bb 0f16 	cmp.w	fp, #22
 80133e4:	d857      	bhi.n	8013496 <_dtoa_r+0x246>
 80133e6:	4b5b      	ldr	r3, [pc, #364]	; (8013554 <_dtoa_r+0x304>)
 80133e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80133ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133f0:	ec51 0b18 	vmov	r0, r1, d8
 80133f4:	f7ed fb82 	bl	8000afc <__aeabi_dcmplt>
 80133f8:	2800      	cmp	r0, #0
 80133fa:	d04e      	beq.n	801349a <_dtoa_r+0x24a>
 80133fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013400:	2300      	movs	r3, #0
 8013402:	930c      	str	r3, [sp, #48]	; 0x30
 8013404:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013406:	1b5b      	subs	r3, r3, r5
 8013408:	1e5a      	subs	r2, r3, #1
 801340a:	bf45      	ittet	mi
 801340c:	f1c3 0301 	rsbmi	r3, r3, #1
 8013410:	9305      	strmi	r3, [sp, #20]
 8013412:	2300      	movpl	r3, #0
 8013414:	2300      	movmi	r3, #0
 8013416:	9206      	str	r2, [sp, #24]
 8013418:	bf54      	ite	pl
 801341a:	9305      	strpl	r3, [sp, #20]
 801341c:	9306      	strmi	r3, [sp, #24]
 801341e:	f1bb 0f00 	cmp.w	fp, #0
 8013422:	db3c      	blt.n	801349e <_dtoa_r+0x24e>
 8013424:	9b06      	ldr	r3, [sp, #24]
 8013426:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801342a:	445b      	add	r3, fp
 801342c:	9306      	str	r3, [sp, #24]
 801342e:	2300      	movs	r3, #0
 8013430:	9308      	str	r3, [sp, #32]
 8013432:	9b07      	ldr	r3, [sp, #28]
 8013434:	2b09      	cmp	r3, #9
 8013436:	d868      	bhi.n	801350a <_dtoa_r+0x2ba>
 8013438:	2b05      	cmp	r3, #5
 801343a:	bfc4      	itt	gt
 801343c:	3b04      	subgt	r3, #4
 801343e:	9307      	strgt	r3, [sp, #28]
 8013440:	9b07      	ldr	r3, [sp, #28]
 8013442:	f1a3 0302 	sub.w	r3, r3, #2
 8013446:	bfcc      	ite	gt
 8013448:	2500      	movgt	r5, #0
 801344a:	2501      	movle	r5, #1
 801344c:	2b03      	cmp	r3, #3
 801344e:	f200 8085 	bhi.w	801355c <_dtoa_r+0x30c>
 8013452:	e8df f003 	tbb	[pc, r3]
 8013456:	3b2e      	.short	0x3b2e
 8013458:	5839      	.short	0x5839
 801345a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801345e:	441d      	add	r5, r3
 8013460:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8013464:	2b20      	cmp	r3, #32
 8013466:	bfc1      	itttt	gt
 8013468:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801346c:	fa08 f803 	lslgt.w	r8, r8, r3
 8013470:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8013474:	fa26 f303 	lsrgt.w	r3, r6, r3
 8013478:	bfd6      	itet	le
 801347a:	f1c3 0320 	rsble	r3, r3, #32
 801347e:	ea48 0003 	orrgt.w	r0, r8, r3
 8013482:	fa06 f003 	lslle.w	r0, r6, r3
 8013486:	f7ed f84d 	bl	8000524 <__aeabi_ui2d>
 801348a:	2201      	movs	r2, #1
 801348c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8013490:	3d01      	subs	r5, #1
 8013492:	920e      	str	r2, [sp, #56]	; 0x38
 8013494:	e76f      	b.n	8013376 <_dtoa_r+0x126>
 8013496:	2301      	movs	r3, #1
 8013498:	e7b3      	b.n	8013402 <_dtoa_r+0x1b2>
 801349a:	900c      	str	r0, [sp, #48]	; 0x30
 801349c:	e7b2      	b.n	8013404 <_dtoa_r+0x1b4>
 801349e:	9b05      	ldr	r3, [sp, #20]
 80134a0:	eba3 030b 	sub.w	r3, r3, fp
 80134a4:	9305      	str	r3, [sp, #20]
 80134a6:	f1cb 0300 	rsb	r3, fp, #0
 80134aa:	9308      	str	r3, [sp, #32]
 80134ac:	2300      	movs	r3, #0
 80134ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80134b0:	e7bf      	b.n	8013432 <_dtoa_r+0x1e2>
 80134b2:	2300      	movs	r3, #0
 80134b4:	9309      	str	r3, [sp, #36]	; 0x24
 80134b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	dc52      	bgt.n	8013562 <_dtoa_r+0x312>
 80134bc:	2301      	movs	r3, #1
 80134be:	9301      	str	r3, [sp, #4]
 80134c0:	9304      	str	r3, [sp, #16]
 80134c2:	461a      	mov	r2, r3
 80134c4:	920a      	str	r2, [sp, #40]	; 0x28
 80134c6:	e00b      	b.n	80134e0 <_dtoa_r+0x290>
 80134c8:	2301      	movs	r3, #1
 80134ca:	e7f3      	b.n	80134b4 <_dtoa_r+0x264>
 80134cc:	2300      	movs	r3, #0
 80134ce:	9309      	str	r3, [sp, #36]	; 0x24
 80134d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80134d2:	445b      	add	r3, fp
 80134d4:	9301      	str	r3, [sp, #4]
 80134d6:	3301      	adds	r3, #1
 80134d8:	2b01      	cmp	r3, #1
 80134da:	9304      	str	r3, [sp, #16]
 80134dc:	bfb8      	it	lt
 80134de:	2301      	movlt	r3, #1
 80134e0:	69e0      	ldr	r0, [r4, #28]
 80134e2:	2100      	movs	r1, #0
 80134e4:	2204      	movs	r2, #4
 80134e6:	f102 0614 	add.w	r6, r2, #20
 80134ea:	429e      	cmp	r6, r3
 80134ec:	d93d      	bls.n	801356a <_dtoa_r+0x31a>
 80134ee:	6041      	str	r1, [r0, #4]
 80134f0:	4620      	mov	r0, r4
 80134f2:	f000 fd9f 	bl	8014034 <_Balloc>
 80134f6:	9000      	str	r0, [sp, #0]
 80134f8:	2800      	cmp	r0, #0
 80134fa:	d139      	bne.n	8013570 <_dtoa_r+0x320>
 80134fc:	4b16      	ldr	r3, [pc, #88]	; (8013558 <_dtoa_r+0x308>)
 80134fe:	4602      	mov	r2, r0
 8013500:	f240 11af 	movw	r1, #431	; 0x1af
 8013504:	e6bd      	b.n	8013282 <_dtoa_r+0x32>
 8013506:	2301      	movs	r3, #1
 8013508:	e7e1      	b.n	80134ce <_dtoa_r+0x27e>
 801350a:	2501      	movs	r5, #1
 801350c:	2300      	movs	r3, #0
 801350e:	9307      	str	r3, [sp, #28]
 8013510:	9509      	str	r5, [sp, #36]	; 0x24
 8013512:	f04f 33ff 	mov.w	r3, #4294967295
 8013516:	9301      	str	r3, [sp, #4]
 8013518:	9304      	str	r3, [sp, #16]
 801351a:	2200      	movs	r2, #0
 801351c:	2312      	movs	r3, #18
 801351e:	e7d1      	b.n	80134c4 <_dtoa_r+0x274>
 8013520:	636f4361 	.word	0x636f4361
 8013524:	3fd287a7 	.word	0x3fd287a7
 8013528:	8b60c8b3 	.word	0x8b60c8b3
 801352c:	3fc68a28 	.word	0x3fc68a28
 8013530:	509f79fb 	.word	0x509f79fb
 8013534:	3fd34413 	.word	0x3fd34413
 8013538:	08015b31 	.word	0x08015b31
 801353c:	08015b48 	.word	0x08015b48
 8013540:	7ff00000 	.word	0x7ff00000
 8013544:	08015b2d 	.word	0x08015b2d
 8013548:	08015b24 	.word	0x08015b24
 801354c:	08015b01 	.word	0x08015b01
 8013550:	3ff80000 	.word	0x3ff80000
 8013554:	08015c38 	.word	0x08015c38
 8013558:	08015ba0 	.word	0x08015ba0
 801355c:	2301      	movs	r3, #1
 801355e:	9309      	str	r3, [sp, #36]	; 0x24
 8013560:	e7d7      	b.n	8013512 <_dtoa_r+0x2c2>
 8013562:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013564:	9301      	str	r3, [sp, #4]
 8013566:	9304      	str	r3, [sp, #16]
 8013568:	e7ba      	b.n	80134e0 <_dtoa_r+0x290>
 801356a:	3101      	adds	r1, #1
 801356c:	0052      	lsls	r2, r2, #1
 801356e:	e7ba      	b.n	80134e6 <_dtoa_r+0x296>
 8013570:	69e3      	ldr	r3, [r4, #28]
 8013572:	9a00      	ldr	r2, [sp, #0]
 8013574:	601a      	str	r2, [r3, #0]
 8013576:	9b04      	ldr	r3, [sp, #16]
 8013578:	2b0e      	cmp	r3, #14
 801357a:	f200 80a8 	bhi.w	80136ce <_dtoa_r+0x47e>
 801357e:	2d00      	cmp	r5, #0
 8013580:	f000 80a5 	beq.w	80136ce <_dtoa_r+0x47e>
 8013584:	f1bb 0f00 	cmp.w	fp, #0
 8013588:	dd38      	ble.n	80135fc <_dtoa_r+0x3ac>
 801358a:	4bc0      	ldr	r3, [pc, #768]	; (801388c <_dtoa_r+0x63c>)
 801358c:	f00b 020f 	and.w	r2, fp, #15
 8013590:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013594:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8013598:	e9d3 6700 	ldrd	r6, r7, [r3]
 801359c:	ea4f 182b 	mov.w	r8, fp, asr #4
 80135a0:	d019      	beq.n	80135d6 <_dtoa_r+0x386>
 80135a2:	4bbb      	ldr	r3, [pc, #748]	; (8013890 <_dtoa_r+0x640>)
 80135a4:	ec51 0b18 	vmov	r0, r1, d8
 80135a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80135ac:	f7ed f95e 	bl	800086c <__aeabi_ddiv>
 80135b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80135b4:	f008 080f 	and.w	r8, r8, #15
 80135b8:	2503      	movs	r5, #3
 80135ba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8013890 <_dtoa_r+0x640>
 80135be:	f1b8 0f00 	cmp.w	r8, #0
 80135c2:	d10a      	bne.n	80135da <_dtoa_r+0x38a>
 80135c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80135c8:	4632      	mov	r2, r6
 80135ca:	463b      	mov	r3, r7
 80135cc:	f7ed f94e 	bl	800086c <__aeabi_ddiv>
 80135d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80135d4:	e02b      	b.n	801362e <_dtoa_r+0x3de>
 80135d6:	2502      	movs	r5, #2
 80135d8:	e7ef      	b.n	80135ba <_dtoa_r+0x36a>
 80135da:	f018 0f01 	tst.w	r8, #1
 80135de:	d008      	beq.n	80135f2 <_dtoa_r+0x3a2>
 80135e0:	4630      	mov	r0, r6
 80135e2:	4639      	mov	r1, r7
 80135e4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80135e8:	f7ed f816 	bl	8000618 <__aeabi_dmul>
 80135ec:	3501      	adds	r5, #1
 80135ee:	4606      	mov	r6, r0
 80135f0:	460f      	mov	r7, r1
 80135f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80135f6:	f109 0908 	add.w	r9, r9, #8
 80135fa:	e7e0      	b.n	80135be <_dtoa_r+0x36e>
 80135fc:	f000 809f 	beq.w	801373e <_dtoa_r+0x4ee>
 8013600:	f1cb 0600 	rsb	r6, fp, #0
 8013604:	4ba1      	ldr	r3, [pc, #644]	; (801388c <_dtoa_r+0x63c>)
 8013606:	4fa2      	ldr	r7, [pc, #648]	; (8013890 <_dtoa_r+0x640>)
 8013608:	f006 020f 	and.w	r2, r6, #15
 801360c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013614:	ec51 0b18 	vmov	r0, r1, d8
 8013618:	f7ec fffe 	bl	8000618 <__aeabi_dmul>
 801361c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013620:	1136      	asrs	r6, r6, #4
 8013622:	2300      	movs	r3, #0
 8013624:	2502      	movs	r5, #2
 8013626:	2e00      	cmp	r6, #0
 8013628:	d17e      	bne.n	8013728 <_dtoa_r+0x4d8>
 801362a:	2b00      	cmp	r3, #0
 801362c:	d1d0      	bne.n	80135d0 <_dtoa_r+0x380>
 801362e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013630:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8013634:	2b00      	cmp	r3, #0
 8013636:	f000 8084 	beq.w	8013742 <_dtoa_r+0x4f2>
 801363a:	4b96      	ldr	r3, [pc, #600]	; (8013894 <_dtoa_r+0x644>)
 801363c:	2200      	movs	r2, #0
 801363e:	4640      	mov	r0, r8
 8013640:	4649      	mov	r1, r9
 8013642:	f7ed fa5b 	bl	8000afc <__aeabi_dcmplt>
 8013646:	2800      	cmp	r0, #0
 8013648:	d07b      	beq.n	8013742 <_dtoa_r+0x4f2>
 801364a:	9b04      	ldr	r3, [sp, #16]
 801364c:	2b00      	cmp	r3, #0
 801364e:	d078      	beq.n	8013742 <_dtoa_r+0x4f2>
 8013650:	9b01      	ldr	r3, [sp, #4]
 8013652:	2b00      	cmp	r3, #0
 8013654:	dd39      	ble.n	80136ca <_dtoa_r+0x47a>
 8013656:	4b90      	ldr	r3, [pc, #576]	; (8013898 <_dtoa_r+0x648>)
 8013658:	2200      	movs	r2, #0
 801365a:	4640      	mov	r0, r8
 801365c:	4649      	mov	r1, r9
 801365e:	f7ec ffdb 	bl	8000618 <__aeabi_dmul>
 8013662:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013666:	9e01      	ldr	r6, [sp, #4]
 8013668:	f10b 37ff 	add.w	r7, fp, #4294967295
 801366c:	3501      	adds	r5, #1
 801366e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8013672:	4628      	mov	r0, r5
 8013674:	f7ec ff66 	bl	8000544 <__aeabi_i2d>
 8013678:	4642      	mov	r2, r8
 801367a:	464b      	mov	r3, r9
 801367c:	f7ec ffcc 	bl	8000618 <__aeabi_dmul>
 8013680:	4b86      	ldr	r3, [pc, #536]	; (801389c <_dtoa_r+0x64c>)
 8013682:	2200      	movs	r2, #0
 8013684:	f7ec fe12 	bl	80002ac <__adddf3>
 8013688:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801368c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013690:	9303      	str	r3, [sp, #12]
 8013692:	2e00      	cmp	r6, #0
 8013694:	d158      	bne.n	8013748 <_dtoa_r+0x4f8>
 8013696:	4b82      	ldr	r3, [pc, #520]	; (80138a0 <_dtoa_r+0x650>)
 8013698:	2200      	movs	r2, #0
 801369a:	4640      	mov	r0, r8
 801369c:	4649      	mov	r1, r9
 801369e:	f7ec fe03 	bl	80002a8 <__aeabi_dsub>
 80136a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80136a6:	4680      	mov	r8, r0
 80136a8:	4689      	mov	r9, r1
 80136aa:	f7ed fa45 	bl	8000b38 <__aeabi_dcmpgt>
 80136ae:	2800      	cmp	r0, #0
 80136b0:	f040 8296 	bne.w	8013be0 <_dtoa_r+0x990>
 80136b4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80136b8:	4640      	mov	r0, r8
 80136ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80136be:	4649      	mov	r1, r9
 80136c0:	f7ed fa1c 	bl	8000afc <__aeabi_dcmplt>
 80136c4:	2800      	cmp	r0, #0
 80136c6:	f040 8289 	bne.w	8013bdc <_dtoa_r+0x98c>
 80136ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 80136ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	f2c0 814e 	blt.w	8013972 <_dtoa_r+0x722>
 80136d6:	f1bb 0f0e 	cmp.w	fp, #14
 80136da:	f300 814a 	bgt.w	8013972 <_dtoa_r+0x722>
 80136de:	4b6b      	ldr	r3, [pc, #428]	; (801388c <_dtoa_r+0x63c>)
 80136e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80136e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80136e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	f280 80dc 	bge.w	80138a8 <_dtoa_r+0x658>
 80136f0:	9b04      	ldr	r3, [sp, #16]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	f300 80d8 	bgt.w	80138a8 <_dtoa_r+0x658>
 80136f8:	f040 826f 	bne.w	8013bda <_dtoa_r+0x98a>
 80136fc:	4b68      	ldr	r3, [pc, #416]	; (80138a0 <_dtoa_r+0x650>)
 80136fe:	2200      	movs	r2, #0
 8013700:	4640      	mov	r0, r8
 8013702:	4649      	mov	r1, r9
 8013704:	f7ec ff88 	bl	8000618 <__aeabi_dmul>
 8013708:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801370c:	f7ed fa0a 	bl	8000b24 <__aeabi_dcmpge>
 8013710:	9e04      	ldr	r6, [sp, #16]
 8013712:	4637      	mov	r7, r6
 8013714:	2800      	cmp	r0, #0
 8013716:	f040 8245 	bne.w	8013ba4 <_dtoa_r+0x954>
 801371a:	9d00      	ldr	r5, [sp, #0]
 801371c:	2331      	movs	r3, #49	; 0x31
 801371e:	f805 3b01 	strb.w	r3, [r5], #1
 8013722:	f10b 0b01 	add.w	fp, fp, #1
 8013726:	e241      	b.n	8013bac <_dtoa_r+0x95c>
 8013728:	07f2      	lsls	r2, r6, #31
 801372a:	d505      	bpl.n	8013738 <_dtoa_r+0x4e8>
 801372c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013730:	f7ec ff72 	bl	8000618 <__aeabi_dmul>
 8013734:	3501      	adds	r5, #1
 8013736:	2301      	movs	r3, #1
 8013738:	1076      	asrs	r6, r6, #1
 801373a:	3708      	adds	r7, #8
 801373c:	e773      	b.n	8013626 <_dtoa_r+0x3d6>
 801373e:	2502      	movs	r5, #2
 8013740:	e775      	b.n	801362e <_dtoa_r+0x3de>
 8013742:	9e04      	ldr	r6, [sp, #16]
 8013744:	465f      	mov	r7, fp
 8013746:	e792      	b.n	801366e <_dtoa_r+0x41e>
 8013748:	9900      	ldr	r1, [sp, #0]
 801374a:	4b50      	ldr	r3, [pc, #320]	; (801388c <_dtoa_r+0x63c>)
 801374c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013750:	4431      	add	r1, r6
 8013752:	9102      	str	r1, [sp, #8]
 8013754:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013756:	eeb0 9a47 	vmov.f32	s18, s14
 801375a:	eef0 9a67 	vmov.f32	s19, s15
 801375e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8013762:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013766:	2900      	cmp	r1, #0
 8013768:	d044      	beq.n	80137f4 <_dtoa_r+0x5a4>
 801376a:	494e      	ldr	r1, [pc, #312]	; (80138a4 <_dtoa_r+0x654>)
 801376c:	2000      	movs	r0, #0
 801376e:	f7ed f87d 	bl	800086c <__aeabi_ddiv>
 8013772:	ec53 2b19 	vmov	r2, r3, d9
 8013776:	f7ec fd97 	bl	80002a8 <__aeabi_dsub>
 801377a:	9d00      	ldr	r5, [sp, #0]
 801377c:	ec41 0b19 	vmov	d9, r0, r1
 8013780:	4649      	mov	r1, r9
 8013782:	4640      	mov	r0, r8
 8013784:	f7ed f9f8 	bl	8000b78 <__aeabi_d2iz>
 8013788:	4606      	mov	r6, r0
 801378a:	f7ec fedb 	bl	8000544 <__aeabi_i2d>
 801378e:	4602      	mov	r2, r0
 8013790:	460b      	mov	r3, r1
 8013792:	4640      	mov	r0, r8
 8013794:	4649      	mov	r1, r9
 8013796:	f7ec fd87 	bl	80002a8 <__aeabi_dsub>
 801379a:	3630      	adds	r6, #48	; 0x30
 801379c:	f805 6b01 	strb.w	r6, [r5], #1
 80137a0:	ec53 2b19 	vmov	r2, r3, d9
 80137a4:	4680      	mov	r8, r0
 80137a6:	4689      	mov	r9, r1
 80137a8:	f7ed f9a8 	bl	8000afc <__aeabi_dcmplt>
 80137ac:	2800      	cmp	r0, #0
 80137ae:	d164      	bne.n	801387a <_dtoa_r+0x62a>
 80137b0:	4642      	mov	r2, r8
 80137b2:	464b      	mov	r3, r9
 80137b4:	4937      	ldr	r1, [pc, #220]	; (8013894 <_dtoa_r+0x644>)
 80137b6:	2000      	movs	r0, #0
 80137b8:	f7ec fd76 	bl	80002a8 <__aeabi_dsub>
 80137bc:	ec53 2b19 	vmov	r2, r3, d9
 80137c0:	f7ed f99c 	bl	8000afc <__aeabi_dcmplt>
 80137c4:	2800      	cmp	r0, #0
 80137c6:	f040 80b6 	bne.w	8013936 <_dtoa_r+0x6e6>
 80137ca:	9b02      	ldr	r3, [sp, #8]
 80137cc:	429d      	cmp	r5, r3
 80137ce:	f43f af7c 	beq.w	80136ca <_dtoa_r+0x47a>
 80137d2:	4b31      	ldr	r3, [pc, #196]	; (8013898 <_dtoa_r+0x648>)
 80137d4:	ec51 0b19 	vmov	r0, r1, d9
 80137d8:	2200      	movs	r2, #0
 80137da:	f7ec ff1d 	bl	8000618 <__aeabi_dmul>
 80137de:	4b2e      	ldr	r3, [pc, #184]	; (8013898 <_dtoa_r+0x648>)
 80137e0:	ec41 0b19 	vmov	d9, r0, r1
 80137e4:	2200      	movs	r2, #0
 80137e6:	4640      	mov	r0, r8
 80137e8:	4649      	mov	r1, r9
 80137ea:	f7ec ff15 	bl	8000618 <__aeabi_dmul>
 80137ee:	4680      	mov	r8, r0
 80137f0:	4689      	mov	r9, r1
 80137f2:	e7c5      	b.n	8013780 <_dtoa_r+0x530>
 80137f4:	ec51 0b17 	vmov	r0, r1, d7
 80137f8:	f7ec ff0e 	bl	8000618 <__aeabi_dmul>
 80137fc:	9b02      	ldr	r3, [sp, #8]
 80137fe:	9d00      	ldr	r5, [sp, #0]
 8013800:	930f      	str	r3, [sp, #60]	; 0x3c
 8013802:	ec41 0b19 	vmov	d9, r0, r1
 8013806:	4649      	mov	r1, r9
 8013808:	4640      	mov	r0, r8
 801380a:	f7ed f9b5 	bl	8000b78 <__aeabi_d2iz>
 801380e:	4606      	mov	r6, r0
 8013810:	f7ec fe98 	bl	8000544 <__aeabi_i2d>
 8013814:	3630      	adds	r6, #48	; 0x30
 8013816:	4602      	mov	r2, r0
 8013818:	460b      	mov	r3, r1
 801381a:	4640      	mov	r0, r8
 801381c:	4649      	mov	r1, r9
 801381e:	f7ec fd43 	bl	80002a8 <__aeabi_dsub>
 8013822:	f805 6b01 	strb.w	r6, [r5], #1
 8013826:	9b02      	ldr	r3, [sp, #8]
 8013828:	429d      	cmp	r5, r3
 801382a:	4680      	mov	r8, r0
 801382c:	4689      	mov	r9, r1
 801382e:	f04f 0200 	mov.w	r2, #0
 8013832:	d124      	bne.n	801387e <_dtoa_r+0x62e>
 8013834:	4b1b      	ldr	r3, [pc, #108]	; (80138a4 <_dtoa_r+0x654>)
 8013836:	ec51 0b19 	vmov	r0, r1, d9
 801383a:	f7ec fd37 	bl	80002ac <__adddf3>
 801383e:	4602      	mov	r2, r0
 8013840:	460b      	mov	r3, r1
 8013842:	4640      	mov	r0, r8
 8013844:	4649      	mov	r1, r9
 8013846:	f7ed f977 	bl	8000b38 <__aeabi_dcmpgt>
 801384a:	2800      	cmp	r0, #0
 801384c:	d173      	bne.n	8013936 <_dtoa_r+0x6e6>
 801384e:	ec53 2b19 	vmov	r2, r3, d9
 8013852:	4914      	ldr	r1, [pc, #80]	; (80138a4 <_dtoa_r+0x654>)
 8013854:	2000      	movs	r0, #0
 8013856:	f7ec fd27 	bl	80002a8 <__aeabi_dsub>
 801385a:	4602      	mov	r2, r0
 801385c:	460b      	mov	r3, r1
 801385e:	4640      	mov	r0, r8
 8013860:	4649      	mov	r1, r9
 8013862:	f7ed f94b 	bl	8000afc <__aeabi_dcmplt>
 8013866:	2800      	cmp	r0, #0
 8013868:	f43f af2f 	beq.w	80136ca <_dtoa_r+0x47a>
 801386c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801386e:	1e6b      	subs	r3, r5, #1
 8013870:	930f      	str	r3, [sp, #60]	; 0x3c
 8013872:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013876:	2b30      	cmp	r3, #48	; 0x30
 8013878:	d0f8      	beq.n	801386c <_dtoa_r+0x61c>
 801387a:	46bb      	mov	fp, r7
 801387c:	e04a      	b.n	8013914 <_dtoa_r+0x6c4>
 801387e:	4b06      	ldr	r3, [pc, #24]	; (8013898 <_dtoa_r+0x648>)
 8013880:	f7ec feca 	bl	8000618 <__aeabi_dmul>
 8013884:	4680      	mov	r8, r0
 8013886:	4689      	mov	r9, r1
 8013888:	e7bd      	b.n	8013806 <_dtoa_r+0x5b6>
 801388a:	bf00      	nop
 801388c:	08015c38 	.word	0x08015c38
 8013890:	08015c10 	.word	0x08015c10
 8013894:	3ff00000 	.word	0x3ff00000
 8013898:	40240000 	.word	0x40240000
 801389c:	401c0000 	.word	0x401c0000
 80138a0:	40140000 	.word	0x40140000
 80138a4:	3fe00000 	.word	0x3fe00000
 80138a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80138ac:	9d00      	ldr	r5, [sp, #0]
 80138ae:	4642      	mov	r2, r8
 80138b0:	464b      	mov	r3, r9
 80138b2:	4630      	mov	r0, r6
 80138b4:	4639      	mov	r1, r7
 80138b6:	f7ec ffd9 	bl	800086c <__aeabi_ddiv>
 80138ba:	f7ed f95d 	bl	8000b78 <__aeabi_d2iz>
 80138be:	9001      	str	r0, [sp, #4]
 80138c0:	f7ec fe40 	bl	8000544 <__aeabi_i2d>
 80138c4:	4642      	mov	r2, r8
 80138c6:	464b      	mov	r3, r9
 80138c8:	f7ec fea6 	bl	8000618 <__aeabi_dmul>
 80138cc:	4602      	mov	r2, r0
 80138ce:	460b      	mov	r3, r1
 80138d0:	4630      	mov	r0, r6
 80138d2:	4639      	mov	r1, r7
 80138d4:	f7ec fce8 	bl	80002a8 <__aeabi_dsub>
 80138d8:	9e01      	ldr	r6, [sp, #4]
 80138da:	9f04      	ldr	r7, [sp, #16]
 80138dc:	3630      	adds	r6, #48	; 0x30
 80138de:	f805 6b01 	strb.w	r6, [r5], #1
 80138e2:	9e00      	ldr	r6, [sp, #0]
 80138e4:	1bae      	subs	r6, r5, r6
 80138e6:	42b7      	cmp	r7, r6
 80138e8:	4602      	mov	r2, r0
 80138ea:	460b      	mov	r3, r1
 80138ec:	d134      	bne.n	8013958 <_dtoa_r+0x708>
 80138ee:	f7ec fcdd 	bl	80002ac <__adddf3>
 80138f2:	4642      	mov	r2, r8
 80138f4:	464b      	mov	r3, r9
 80138f6:	4606      	mov	r6, r0
 80138f8:	460f      	mov	r7, r1
 80138fa:	f7ed f91d 	bl	8000b38 <__aeabi_dcmpgt>
 80138fe:	b9c8      	cbnz	r0, 8013934 <_dtoa_r+0x6e4>
 8013900:	4642      	mov	r2, r8
 8013902:	464b      	mov	r3, r9
 8013904:	4630      	mov	r0, r6
 8013906:	4639      	mov	r1, r7
 8013908:	f7ed f8ee 	bl	8000ae8 <__aeabi_dcmpeq>
 801390c:	b110      	cbz	r0, 8013914 <_dtoa_r+0x6c4>
 801390e:	9b01      	ldr	r3, [sp, #4]
 8013910:	07db      	lsls	r3, r3, #31
 8013912:	d40f      	bmi.n	8013934 <_dtoa_r+0x6e4>
 8013914:	4651      	mov	r1, sl
 8013916:	4620      	mov	r0, r4
 8013918:	f000 fbcc 	bl	80140b4 <_Bfree>
 801391c:	2300      	movs	r3, #0
 801391e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013920:	702b      	strb	r3, [r5, #0]
 8013922:	f10b 0301 	add.w	r3, fp, #1
 8013926:	6013      	str	r3, [r2, #0]
 8013928:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801392a:	2b00      	cmp	r3, #0
 801392c:	f43f ace2 	beq.w	80132f4 <_dtoa_r+0xa4>
 8013930:	601d      	str	r5, [r3, #0]
 8013932:	e4df      	b.n	80132f4 <_dtoa_r+0xa4>
 8013934:	465f      	mov	r7, fp
 8013936:	462b      	mov	r3, r5
 8013938:	461d      	mov	r5, r3
 801393a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801393e:	2a39      	cmp	r2, #57	; 0x39
 8013940:	d106      	bne.n	8013950 <_dtoa_r+0x700>
 8013942:	9a00      	ldr	r2, [sp, #0]
 8013944:	429a      	cmp	r2, r3
 8013946:	d1f7      	bne.n	8013938 <_dtoa_r+0x6e8>
 8013948:	9900      	ldr	r1, [sp, #0]
 801394a:	2230      	movs	r2, #48	; 0x30
 801394c:	3701      	adds	r7, #1
 801394e:	700a      	strb	r2, [r1, #0]
 8013950:	781a      	ldrb	r2, [r3, #0]
 8013952:	3201      	adds	r2, #1
 8013954:	701a      	strb	r2, [r3, #0]
 8013956:	e790      	b.n	801387a <_dtoa_r+0x62a>
 8013958:	4ba3      	ldr	r3, [pc, #652]	; (8013be8 <_dtoa_r+0x998>)
 801395a:	2200      	movs	r2, #0
 801395c:	f7ec fe5c 	bl	8000618 <__aeabi_dmul>
 8013960:	2200      	movs	r2, #0
 8013962:	2300      	movs	r3, #0
 8013964:	4606      	mov	r6, r0
 8013966:	460f      	mov	r7, r1
 8013968:	f7ed f8be 	bl	8000ae8 <__aeabi_dcmpeq>
 801396c:	2800      	cmp	r0, #0
 801396e:	d09e      	beq.n	80138ae <_dtoa_r+0x65e>
 8013970:	e7d0      	b.n	8013914 <_dtoa_r+0x6c4>
 8013972:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013974:	2a00      	cmp	r2, #0
 8013976:	f000 80ca 	beq.w	8013b0e <_dtoa_r+0x8be>
 801397a:	9a07      	ldr	r2, [sp, #28]
 801397c:	2a01      	cmp	r2, #1
 801397e:	f300 80ad 	bgt.w	8013adc <_dtoa_r+0x88c>
 8013982:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013984:	2a00      	cmp	r2, #0
 8013986:	f000 80a5 	beq.w	8013ad4 <_dtoa_r+0x884>
 801398a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801398e:	9e08      	ldr	r6, [sp, #32]
 8013990:	9d05      	ldr	r5, [sp, #20]
 8013992:	9a05      	ldr	r2, [sp, #20]
 8013994:	441a      	add	r2, r3
 8013996:	9205      	str	r2, [sp, #20]
 8013998:	9a06      	ldr	r2, [sp, #24]
 801399a:	2101      	movs	r1, #1
 801399c:	441a      	add	r2, r3
 801399e:	4620      	mov	r0, r4
 80139a0:	9206      	str	r2, [sp, #24]
 80139a2:	f000 fc3d 	bl	8014220 <__i2b>
 80139a6:	4607      	mov	r7, r0
 80139a8:	b165      	cbz	r5, 80139c4 <_dtoa_r+0x774>
 80139aa:	9b06      	ldr	r3, [sp, #24]
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	dd09      	ble.n	80139c4 <_dtoa_r+0x774>
 80139b0:	42ab      	cmp	r3, r5
 80139b2:	9a05      	ldr	r2, [sp, #20]
 80139b4:	bfa8      	it	ge
 80139b6:	462b      	movge	r3, r5
 80139b8:	1ad2      	subs	r2, r2, r3
 80139ba:	9205      	str	r2, [sp, #20]
 80139bc:	9a06      	ldr	r2, [sp, #24]
 80139be:	1aed      	subs	r5, r5, r3
 80139c0:	1ad3      	subs	r3, r2, r3
 80139c2:	9306      	str	r3, [sp, #24]
 80139c4:	9b08      	ldr	r3, [sp, #32]
 80139c6:	b1f3      	cbz	r3, 8013a06 <_dtoa_r+0x7b6>
 80139c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	f000 80a3 	beq.w	8013b16 <_dtoa_r+0x8c6>
 80139d0:	2e00      	cmp	r6, #0
 80139d2:	dd10      	ble.n	80139f6 <_dtoa_r+0x7a6>
 80139d4:	4639      	mov	r1, r7
 80139d6:	4632      	mov	r2, r6
 80139d8:	4620      	mov	r0, r4
 80139da:	f000 fce1 	bl	80143a0 <__pow5mult>
 80139de:	4652      	mov	r2, sl
 80139e0:	4601      	mov	r1, r0
 80139e2:	4607      	mov	r7, r0
 80139e4:	4620      	mov	r0, r4
 80139e6:	f000 fc31 	bl	801424c <__multiply>
 80139ea:	4651      	mov	r1, sl
 80139ec:	4680      	mov	r8, r0
 80139ee:	4620      	mov	r0, r4
 80139f0:	f000 fb60 	bl	80140b4 <_Bfree>
 80139f4:	46c2      	mov	sl, r8
 80139f6:	9b08      	ldr	r3, [sp, #32]
 80139f8:	1b9a      	subs	r2, r3, r6
 80139fa:	d004      	beq.n	8013a06 <_dtoa_r+0x7b6>
 80139fc:	4651      	mov	r1, sl
 80139fe:	4620      	mov	r0, r4
 8013a00:	f000 fcce 	bl	80143a0 <__pow5mult>
 8013a04:	4682      	mov	sl, r0
 8013a06:	2101      	movs	r1, #1
 8013a08:	4620      	mov	r0, r4
 8013a0a:	f000 fc09 	bl	8014220 <__i2b>
 8013a0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	4606      	mov	r6, r0
 8013a14:	f340 8081 	ble.w	8013b1a <_dtoa_r+0x8ca>
 8013a18:	461a      	mov	r2, r3
 8013a1a:	4601      	mov	r1, r0
 8013a1c:	4620      	mov	r0, r4
 8013a1e:	f000 fcbf 	bl	80143a0 <__pow5mult>
 8013a22:	9b07      	ldr	r3, [sp, #28]
 8013a24:	2b01      	cmp	r3, #1
 8013a26:	4606      	mov	r6, r0
 8013a28:	dd7a      	ble.n	8013b20 <_dtoa_r+0x8d0>
 8013a2a:	f04f 0800 	mov.w	r8, #0
 8013a2e:	6933      	ldr	r3, [r6, #16]
 8013a30:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013a34:	6918      	ldr	r0, [r3, #16]
 8013a36:	f000 fba5 	bl	8014184 <__hi0bits>
 8013a3a:	f1c0 0020 	rsb	r0, r0, #32
 8013a3e:	9b06      	ldr	r3, [sp, #24]
 8013a40:	4418      	add	r0, r3
 8013a42:	f010 001f 	ands.w	r0, r0, #31
 8013a46:	f000 8094 	beq.w	8013b72 <_dtoa_r+0x922>
 8013a4a:	f1c0 0320 	rsb	r3, r0, #32
 8013a4e:	2b04      	cmp	r3, #4
 8013a50:	f340 8085 	ble.w	8013b5e <_dtoa_r+0x90e>
 8013a54:	9b05      	ldr	r3, [sp, #20]
 8013a56:	f1c0 001c 	rsb	r0, r0, #28
 8013a5a:	4403      	add	r3, r0
 8013a5c:	9305      	str	r3, [sp, #20]
 8013a5e:	9b06      	ldr	r3, [sp, #24]
 8013a60:	4403      	add	r3, r0
 8013a62:	4405      	add	r5, r0
 8013a64:	9306      	str	r3, [sp, #24]
 8013a66:	9b05      	ldr	r3, [sp, #20]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	dd05      	ble.n	8013a78 <_dtoa_r+0x828>
 8013a6c:	4651      	mov	r1, sl
 8013a6e:	461a      	mov	r2, r3
 8013a70:	4620      	mov	r0, r4
 8013a72:	f000 fcef 	bl	8014454 <__lshift>
 8013a76:	4682      	mov	sl, r0
 8013a78:	9b06      	ldr	r3, [sp, #24]
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	dd05      	ble.n	8013a8a <_dtoa_r+0x83a>
 8013a7e:	4631      	mov	r1, r6
 8013a80:	461a      	mov	r2, r3
 8013a82:	4620      	mov	r0, r4
 8013a84:	f000 fce6 	bl	8014454 <__lshift>
 8013a88:	4606      	mov	r6, r0
 8013a8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d072      	beq.n	8013b76 <_dtoa_r+0x926>
 8013a90:	4631      	mov	r1, r6
 8013a92:	4650      	mov	r0, sl
 8013a94:	f000 fd4a 	bl	801452c <__mcmp>
 8013a98:	2800      	cmp	r0, #0
 8013a9a:	da6c      	bge.n	8013b76 <_dtoa_r+0x926>
 8013a9c:	2300      	movs	r3, #0
 8013a9e:	4651      	mov	r1, sl
 8013aa0:	220a      	movs	r2, #10
 8013aa2:	4620      	mov	r0, r4
 8013aa4:	f000 fb28 	bl	80140f8 <__multadd>
 8013aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013aaa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013aae:	4682      	mov	sl, r0
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	f000 81b0 	beq.w	8013e16 <_dtoa_r+0xbc6>
 8013ab6:	2300      	movs	r3, #0
 8013ab8:	4639      	mov	r1, r7
 8013aba:	220a      	movs	r2, #10
 8013abc:	4620      	mov	r0, r4
 8013abe:	f000 fb1b 	bl	80140f8 <__multadd>
 8013ac2:	9b01      	ldr	r3, [sp, #4]
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	4607      	mov	r7, r0
 8013ac8:	f300 8096 	bgt.w	8013bf8 <_dtoa_r+0x9a8>
 8013acc:	9b07      	ldr	r3, [sp, #28]
 8013ace:	2b02      	cmp	r3, #2
 8013ad0:	dc59      	bgt.n	8013b86 <_dtoa_r+0x936>
 8013ad2:	e091      	b.n	8013bf8 <_dtoa_r+0x9a8>
 8013ad4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013ad6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013ada:	e758      	b.n	801398e <_dtoa_r+0x73e>
 8013adc:	9b04      	ldr	r3, [sp, #16]
 8013ade:	1e5e      	subs	r6, r3, #1
 8013ae0:	9b08      	ldr	r3, [sp, #32]
 8013ae2:	42b3      	cmp	r3, r6
 8013ae4:	bfbf      	itttt	lt
 8013ae6:	9b08      	ldrlt	r3, [sp, #32]
 8013ae8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8013aea:	9608      	strlt	r6, [sp, #32]
 8013aec:	1af3      	sublt	r3, r6, r3
 8013aee:	bfb4      	ite	lt
 8013af0:	18d2      	addlt	r2, r2, r3
 8013af2:	1b9e      	subge	r6, r3, r6
 8013af4:	9b04      	ldr	r3, [sp, #16]
 8013af6:	bfbc      	itt	lt
 8013af8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8013afa:	2600      	movlt	r6, #0
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	bfb7      	itett	lt
 8013b00:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8013b04:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8013b08:	1a9d      	sublt	r5, r3, r2
 8013b0a:	2300      	movlt	r3, #0
 8013b0c:	e741      	b.n	8013992 <_dtoa_r+0x742>
 8013b0e:	9e08      	ldr	r6, [sp, #32]
 8013b10:	9d05      	ldr	r5, [sp, #20]
 8013b12:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8013b14:	e748      	b.n	80139a8 <_dtoa_r+0x758>
 8013b16:	9a08      	ldr	r2, [sp, #32]
 8013b18:	e770      	b.n	80139fc <_dtoa_r+0x7ac>
 8013b1a:	9b07      	ldr	r3, [sp, #28]
 8013b1c:	2b01      	cmp	r3, #1
 8013b1e:	dc19      	bgt.n	8013b54 <_dtoa_r+0x904>
 8013b20:	9b02      	ldr	r3, [sp, #8]
 8013b22:	b9bb      	cbnz	r3, 8013b54 <_dtoa_r+0x904>
 8013b24:	9b03      	ldr	r3, [sp, #12]
 8013b26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013b2a:	b99b      	cbnz	r3, 8013b54 <_dtoa_r+0x904>
 8013b2c:	9b03      	ldr	r3, [sp, #12]
 8013b2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013b32:	0d1b      	lsrs	r3, r3, #20
 8013b34:	051b      	lsls	r3, r3, #20
 8013b36:	b183      	cbz	r3, 8013b5a <_dtoa_r+0x90a>
 8013b38:	9b05      	ldr	r3, [sp, #20]
 8013b3a:	3301      	adds	r3, #1
 8013b3c:	9305      	str	r3, [sp, #20]
 8013b3e:	9b06      	ldr	r3, [sp, #24]
 8013b40:	3301      	adds	r3, #1
 8013b42:	9306      	str	r3, [sp, #24]
 8013b44:	f04f 0801 	mov.w	r8, #1
 8013b48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	f47f af6f 	bne.w	8013a2e <_dtoa_r+0x7de>
 8013b50:	2001      	movs	r0, #1
 8013b52:	e774      	b.n	8013a3e <_dtoa_r+0x7ee>
 8013b54:	f04f 0800 	mov.w	r8, #0
 8013b58:	e7f6      	b.n	8013b48 <_dtoa_r+0x8f8>
 8013b5a:	4698      	mov	r8, r3
 8013b5c:	e7f4      	b.n	8013b48 <_dtoa_r+0x8f8>
 8013b5e:	d082      	beq.n	8013a66 <_dtoa_r+0x816>
 8013b60:	9a05      	ldr	r2, [sp, #20]
 8013b62:	331c      	adds	r3, #28
 8013b64:	441a      	add	r2, r3
 8013b66:	9205      	str	r2, [sp, #20]
 8013b68:	9a06      	ldr	r2, [sp, #24]
 8013b6a:	441a      	add	r2, r3
 8013b6c:	441d      	add	r5, r3
 8013b6e:	9206      	str	r2, [sp, #24]
 8013b70:	e779      	b.n	8013a66 <_dtoa_r+0x816>
 8013b72:	4603      	mov	r3, r0
 8013b74:	e7f4      	b.n	8013b60 <_dtoa_r+0x910>
 8013b76:	9b04      	ldr	r3, [sp, #16]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	dc37      	bgt.n	8013bec <_dtoa_r+0x99c>
 8013b7c:	9b07      	ldr	r3, [sp, #28]
 8013b7e:	2b02      	cmp	r3, #2
 8013b80:	dd34      	ble.n	8013bec <_dtoa_r+0x99c>
 8013b82:	9b04      	ldr	r3, [sp, #16]
 8013b84:	9301      	str	r3, [sp, #4]
 8013b86:	9b01      	ldr	r3, [sp, #4]
 8013b88:	b963      	cbnz	r3, 8013ba4 <_dtoa_r+0x954>
 8013b8a:	4631      	mov	r1, r6
 8013b8c:	2205      	movs	r2, #5
 8013b8e:	4620      	mov	r0, r4
 8013b90:	f000 fab2 	bl	80140f8 <__multadd>
 8013b94:	4601      	mov	r1, r0
 8013b96:	4606      	mov	r6, r0
 8013b98:	4650      	mov	r0, sl
 8013b9a:	f000 fcc7 	bl	801452c <__mcmp>
 8013b9e:	2800      	cmp	r0, #0
 8013ba0:	f73f adbb 	bgt.w	801371a <_dtoa_r+0x4ca>
 8013ba4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ba6:	9d00      	ldr	r5, [sp, #0]
 8013ba8:	ea6f 0b03 	mvn.w	fp, r3
 8013bac:	f04f 0800 	mov.w	r8, #0
 8013bb0:	4631      	mov	r1, r6
 8013bb2:	4620      	mov	r0, r4
 8013bb4:	f000 fa7e 	bl	80140b4 <_Bfree>
 8013bb8:	2f00      	cmp	r7, #0
 8013bba:	f43f aeab 	beq.w	8013914 <_dtoa_r+0x6c4>
 8013bbe:	f1b8 0f00 	cmp.w	r8, #0
 8013bc2:	d005      	beq.n	8013bd0 <_dtoa_r+0x980>
 8013bc4:	45b8      	cmp	r8, r7
 8013bc6:	d003      	beq.n	8013bd0 <_dtoa_r+0x980>
 8013bc8:	4641      	mov	r1, r8
 8013bca:	4620      	mov	r0, r4
 8013bcc:	f000 fa72 	bl	80140b4 <_Bfree>
 8013bd0:	4639      	mov	r1, r7
 8013bd2:	4620      	mov	r0, r4
 8013bd4:	f000 fa6e 	bl	80140b4 <_Bfree>
 8013bd8:	e69c      	b.n	8013914 <_dtoa_r+0x6c4>
 8013bda:	2600      	movs	r6, #0
 8013bdc:	4637      	mov	r7, r6
 8013bde:	e7e1      	b.n	8013ba4 <_dtoa_r+0x954>
 8013be0:	46bb      	mov	fp, r7
 8013be2:	4637      	mov	r7, r6
 8013be4:	e599      	b.n	801371a <_dtoa_r+0x4ca>
 8013be6:	bf00      	nop
 8013be8:	40240000 	.word	0x40240000
 8013bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	f000 80c8 	beq.w	8013d84 <_dtoa_r+0xb34>
 8013bf4:	9b04      	ldr	r3, [sp, #16]
 8013bf6:	9301      	str	r3, [sp, #4]
 8013bf8:	2d00      	cmp	r5, #0
 8013bfa:	dd05      	ble.n	8013c08 <_dtoa_r+0x9b8>
 8013bfc:	4639      	mov	r1, r7
 8013bfe:	462a      	mov	r2, r5
 8013c00:	4620      	mov	r0, r4
 8013c02:	f000 fc27 	bl	8014454 <__lshift>
 8013c06:	4607      	mov	r7, r0
 8013c08:	f1b8 0f00 	cmp.w	r8, #0
 8013c0c:	d05b      	beq.n	8013cc6 <_dtoa_r+0xa76>
 8013c0e:	6879      	ldr	r1, [r7, #4]
 8013c10:	4620      	mov	r0, r4
 8013c12:	f000 fa0f 	bl	8014034 <_Balloc>
 8013c16:	4605      	mov	r5, r0
 8013c18:	b928      	cbnz	r0, 8013c26 <_dtoa_r+0x9d6>
 8013c1a:	4b83      	ldr	r3, [pc, #524]	; (8013e28 <_dtoa_r+0xbd8>)
 8013c1c:	4602      	mov	r2, r0
 8013c1e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8013c22:	f7ff bb2e 	b.w	8013282 <_dtoa_r+0x32>
 8013c26:	693a      	ldr	r2, [r7, #16]
 8013c28:	3202      	adds	r2, #2
 8013c2a:	0092      	lsls	r2, r2, #2
 8013c2c:	f107 010c 	add.w	r1, r7, #12
 8013c30:	300c      	adds	r0, #12
 8013c32:	f7ff fa74 	bl	801311e <memcpy>
 8013c36:	2201      	movs	r2, #1
 8013c38:	4629      	mov	r1, r5
 8013c3a:	4620      	mov	r0, r4
 8013c3c:	f000 fc0a 	bl	8014454 <__lshift>
 8013c40:	9b00      	ldr	r3, [sp, #0]
 8013c42:	3301      	adds	r3, #1
 8013c44:	9304      	str	r3, [sp, #16]
 8013c46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013c4a:	4413      	add	r3, r2
 8013c4c:	9308      	str	r3, [sp, #32]
 8013c4e:	9b02      	ldr	r3, [sp, #8]
 8013c50:	f003 0301 	and.w	r3, r3, #1
 8013c54:	46b8      	mov	r8, r7
 8013c56:	9306      	str	r3, [sp, #24]
 8013c58:	4607      	mov	r7, r0
 8013c5a:	9b04      	ldr	r3, [sp, #16]
 8013c5c:	4631      	mov	r1, r6
 8013c5e:	3b01      	subs	r3, #1
 8013c60:	4650      	mov	r0, sl
 8013c62:	9301      	str	r3, [sp, #4]
 8013c64:	f7ff fa69 	bl	801313a <quorem>
 8013c68:	4641      	mov	r1, r8
 8013c6a:	9002      	str	r0, [sp, #8]
 8013c6c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8013c70:	4650      	mov	r0, sl
 8013c72:	f000 fc5b 	bl	801452c <__mcmp>
 8013c76:	463a      	mov	r2, r7
 8013c78:	9005      	str	r0, [sp, #20]
 8013c7a:	4631      	mov	r1, r6
 8013c7c:	4620      	mov	r0, r4
 8013c7e:	f000 fc71 	bl	8014564 <__mdiff>
 8013c82:	68c2      	ldr	r2, [r0, #12]
 8013c84:	4605      	mov	r5, r0
 8013c86:	bb02      	cbnz	r2, 8013cca <_dtoa_r+0xa7a>
 8013c88:	4601      	mov	r1, r0
 8013c8a:	4650      	mov	r0, sl
 8013c8c:	f000 fc4e 	bl	801452c <__mcmp>
 8013c90:	4602      	mov	r2, r0
 8013c92:	4629      	mov	r1, r5
 8013c94:	4620      	mov	r0, r4
 8013c96:	9209      	str	r2, [sp, #36]	; 0x24
 8013c98:	f000 fa0c 	bl	80140b4 <_Bfree>
 8013c9c:	9b07      	ldr	r3, [sp, #28]
 8013c9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013ca0:	9d04      	ldr	r5, [sp, #16]
 8013ca2:	ea43 0102 	orr.w	r1, r3, r2
 8013ca6:	9b06      	ldr	r3, [sp, #24]
 8013ca8:	4319      	orrs	r1, r3
 8013caa:	d110      	bne.n	8013cce <_dtoa_r+0xa7e>
 8013cac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013cb0:	d029      	beq.n	8013d06 <_dtoa_r+0xab6>
 8013cb2:	9b05      	ldr	r3, [sp, #20]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	dd02      	ble.n	8013cbe <_dtoa_r+0xa6e>
 8013cb8:	9b02      	ldr	r3, [sp, #8]
 8013cba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8013cbe:	9b01      	ldr	r3, [sp, #4]
 8013cc0:	f883 9000 	strb.w	r9, [r3]
 8013cc4:	e774      	b.n	8013bb0 <_dtoa_r+0x960>
 8013cc6:	4638      	mov	r0, r7
 8013cc8:	e7ba      	b.n	8013c40 <_dtoa_r+0x9f0>
 8013cca:	2201      	movs	r2, #1
 8013ccc:	e7e1      	b.n	8013c92 <_dtoa_r+0xa42>
 8013cce:	9b05      	ldr	r3, [sp, #20]
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	db04      	blt.n	8013cde <_dtoa_r+0xa8e>
 8013cd4:	9907      	ldr	r1, [sp, #28]
 8013cd6:	430b      	orrs	r3, r1
 8013cd8:	9906      	ldr	r1, [sp, #24]
 8013cda:	430b      	orrs	r3, r1
 8013cdc:	d120      	bne.n	8013d20 <_dtoa_r+0xad0>
 8013cde:	2a00      	cmp	r2, #0
 8013ce0:	dded      	ble.n	8013cbe <_dtoa_r+0xa6e>
 8013ce2:	4651      	mov	r1, sl
 8013ce4:	2201      	movs	r2, #1
 8013ce6:	4620      	mov	r0, r4
 8013ce8:	f000 fbb4 	bl	8014454 <__lshift>
 8013cec:	4631      	mov	r1, r6
 8013cee:	4682      	mov	sl, r0
 8013cf0:	f000 fc1c 	bl	801452c <__mcmp>
 8013cf4:	2800      	cmp	r0, #0
 8013cf6:	dc03      	bgt.n	8013d00 <_dtoa_r+0xab0>
 8013cf8:	d1e1      	bne.n	8013cbe <_dtoa_r+0xa6e>
 8013cfa:	f019 0f01 	tst.w	r9, #1
 8013cfe:	d0de      	beq.n	8013cbe <_dtoa_r+0xa6e>
 8013d00:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013d04:	d1d8      	bne.n	8013cb8 <_dtoa_r+0xa68>
 8013d06:	9a01      	ldr	r2, [sp, #4]
 8013d08:	2339      	movs	r3, #57	; 0x39
 8013d0a:	7013      	strb	r3, [r2, #0]
 8013d0c:	462b      	mov	r3, r5
 8013d0e:	461d      	mov	r5, r3
 8013d10:	3b01      	subs	r3, #1
 8013d12:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013d16:	2a39      	cmp	r2, #57	; 0x39
 8013d18:	d06c      	beq.n	8013df4 <_dtoa_r+0xba4>
 8013d1a:	3201      	adds	r2, #1
 8013d1c:	701a      	strb	r2, [r3, #0]
 8013d1e:	e747      	b.n	8013bb0 <_dtoa_r+0x960>
 8013d20:	2a00      	cmp	r2, #0
 8013d22:	dd07      	ble.n	8013d34 <_dtoa_r+0xae4>
 8013d24:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013d28:	d0ed      	beq.n	8013d06 <_dtoa_r+0xab6>
 8013d2a:	9a01      	ldr	r2, [sp, #4]
 8013d2c:	f109 0301 	add.w	r3, r9, #1
 8013d30:	7013      	strb	r3, [r2, #0]
 8013d32:	e73d      	b.n	8013bb0 <_dtoa_r+0x960>
 8013d34:	9b04      	ldr	r3, [sp, #16]
 8013d36:	9a08      	ldr	r2, [sp, #32]
 8013d38:	f803 9c01 	strb.w	r9, [r3, #-1]
 8013d3c:	4293      	cmp	r3, r2
 8013d3e:	d043      	beq.n	8013dc8 <_dtoa_r+0xb78>
 8013d40:	4651      	mov	r1, sl
 8013d42:	2300      	movs	r3, #0
 8013d44:	220a      	movs	r2, #10
 8013d46:	4620      	mov	r0, r4
 8013d48:	f000 f9d6 	bl	80140f8 <__multadd>
 8013d4c:	45b8      	cmp	r8, r7
 8013d4e:	4682      	mov	sl, r0
 8013d50:	f04f 0300 	mov.w	r3, #0
 8013d54:	f04f 020a 	mov.w	r2, #10
 8013d58:	4641      	mov	r1, r8
 8013d5a:	4620      	mov	r0, r4
 8013d5c:	d107      	bne.n	8013d6e <_dtoa_r+0xb1e>
 8013d5e:	f000 f9cb 	bl	80140f8 <__multadd>
 8013d62:	4680      	mov	r8, r0
 8013d64:	4607      	mov	r7, r0
 8013d66:	9b04      	ldr	r3, [sp, #16]
 8013d68:	3301      	adds	r3, #1
 8013d6a:	9304      	str	r3, [sp, #16]
 8013d6c:	e775      	b.n	8013c5a <_dtoa_r+0xa0a>
 8013d6e:	f000 f9c3 	bl	80140f8 <__multadd>
 8013d72:	4639      	mov	r1, r7
 8013d74:	4680      	mov	r8, r0
 8013d76:	2300      	movs	r3, #0
 8013d78:	220a      	movs	r2, #10
 8013d7a:	4620      	mov	r0, r4
 8013d7c:	f000 f9bc 	bl	80140f8 <__multadd>
 8013d80:	4607      	mov	r7, r0
 8013d82:	e7f0      	b.n	8013d66 <_dtoa_r+0xb16>
 8013d84:	9b04      	ldr	r3, [sp, #16]
 8013d86:	9301      	str	r3, [sp, #4]
 8013d88:	9d00      	ldr	r5, [sp, #0]
 8013d8a:	4631      	mov	r1, r6
 8013d8c:	4650      	mov	r0, sl
 8013d8e:	f7ff f9d4 	bl	801313a <quorem>
 8013d92:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8013d96:	9b00      	ldr	r3, [sp, #0]
 8013d98:	f805 9b01 	strb.w	r9, [r5], #1
 8013d9c:	1aea      	subs	r2, r5, r3
 8013d9e:	9b01      	ldr	r3, [sp, #4]
 8013da0:	4293      	cmp	r3, r2
 8013da2:	dd07      	ble.n	8013db4 <_dtoa_r+0xb64>
 8013da4:	4651      	mov	r1, sl
 8013da6:	2300      	movs	r3, #0
 8013da8:	220a      	movs	r2, #10
 8013daa:	4620      	mov	r0, r4
 8013dac:	f000 f9a4 	bl	80140f8 <__multadd>
 8013db0:	4682      	mov	sl, r0
 8013db2:	e7ea      	b.n	8013d8a <_dtoa_r+0xb3a>
 8013db4:	9b01      	ldr	r3, [sp, #4]
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	bfc8      	it	gt
 8013dba:	461d      	movgt	r5, r3
 8013dbc:	9b00      	ldr	r3, [sp, #0]
 8013dbe:	bfd8      	it	le
 8013dc0:	2501      	movle	r5, #1
 8013dc2:	441d      	add	r5, r3
 8013dc4:	f04f 0800 	mov.w	r8, #0
 8013dc8:	4651      	mov	r1, sl
 8013dca:	2201      	movs	r2, #1
 8013dcc:	4620      	mov	r0, r4
 8013dce:	f000 fb41 	bl	8014454 <__lshift>
 8013dd2:	4631      	mov	r1, r6
 8013dd4:	4682      	mov	sl, r0
 8013dd6:	f000 fba9 	bl	801452c <__mcmp>
 8013dda:	2800      	cmp	r0, #0
 8013ddc:	dc96      	bgt.n	8013d0c <_dtoa_r+0xabc>
 8013dde:	d102      	bne.n	8013de6 <_dtoa_r+0xb96>
 8013de0:	f019 0f01 	tst.w	r9, #1
 8013de4:	d192      	bne.n	8013d0c <_dtoa_r+0xabc>
 8013de6:	462b      	mov	r3, r5
 8013de8:	461d      	mov	r5, r3
 8013dea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013dee:	2a30      	cmp	r2, #48	; 0x30
 8013df0:	d0fa      	beq.n	8013de8 <_dtoa_r+0xb98>
 8013df2:	e6dd      	b.n	8013bb0 <_dtoa_r+0x960>
 8013df4:	9a00      	ldr	r2, [sp, #0]
 8013df6:	429a      	cmp	r2, r3
 8013df8:	d189      	bne.n	8013d0e <_dtoa_r+0xabe>
 8013dfa:	f10b 0b01 	add.w	fp, fp, #1
 8013dfe:	2331      	movs	r3, #49	; 0x31
 8013e00:	e796      	b.n	8013d30 <_dtoa_r+0xae0>
 8013e02:	4b0a      	ldr	r3, [pc, #40]	; (8013e2c <_dtoa_r+0xbdc>)
 8013e04:	f7ff ba99 	b.w	801333a <_dtoa_r+0xea>
 8013e08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	f47f aa6d 	bne.w	80132ea <_dtoa_r+0x9a>
 8013e10:	4b07      	ldr	r3, [pc, #28]	; (8013e30 <_dtoa_r+0xbe0>)
 8013e12:	f7ff ba92 	b.w	801333a <_dtoa_r+0xea>
 8013e16:	9b01      	ldr	r3, [sp, #4]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	dcb5      	bgt.n	8013d88 <_dtoa_r+0xb38>
 8013e1c:	9b07      	ldr	r3, [sp, #28]
 8013e1e:	2b02      	cmp	r3, #2
 8013e20:	f73f aeb1 	bgt.w	8013b86 <_dtoa_r+0x936>
 8013e24:	e7b0      	b.n	8013d88 <_dtoa_r+0xb38>
 8013e26:	bf00      	nop
 8013e28:	08015ba0 	.word	0x08015ba0
 8013e2c:	08015b00 	.word	0x08015b00
 8013e30:	08015b24 	.word	0x08015b24

08013e34 <_free_r>:
 8013e34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013e36:	2900      	cmp	r1, #0
 8013e38:	d044      	beq.n	8013ec4 <_free_r+0x90>
 8013e3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013e3e:	9001      	str	r0, [sp, #4]
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	f1a1 0404 	sub.w	r4, r1, #4
 8013e46:	bfb8      	it	lt
 8013e48:	18e4      	addlt	r4, r4, r3
 8013e4a:	f000 f8e7 	bl	801401c <__malloc_lock>
 8013e4e:	4a1e      	ldr	r2, [pc, #120]	; (8013ec8 <_free_r+0x94>)
 8013e50:	9801      	ldr	r0, [sp, #4]
 8013e52:	6813      	ldr	r3, [r2, #0]
 8013e54:	b933      	cbnz	r3, 8013e64 <_free_r+0x30>
 8013e56:	6063      	str	r3, [r4, #4]
 8013e58:	6014      	str	r4, [r2, #0]
 8013e5a:	b003      	add	sp, #12
 8013e5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013e60:	f000 b8e2 	b.w	8014028 <__malloc_unlock>
 8013e64:	42a3      	cmp	r3, r4
 8013e66:	d908      	bls.n	8013e7a <_free_r+0x46>
 8013e68:	6825      	ldr	r5, [r4, #0]
 8013e6a:	1961      	adds	r1, r4, r5
 8013e6c:	428b      	cmp	r3, r1
 8013e6e:	bf01      	itttt	eq
 8013e70:	6819      	ldreq	r1, [r3, #0]
 8013e72:	685b      	ldreq	r3, [r3, #4]
 8013e74:	1949      	addeq	r1, r1, r5
 8013e76:	6021      	streq	r1, [r4, #0]
 8013e78:	e7ed      	b.n	8013e56 <_free_r+0x22>
 8013e7a:	461a      	mov	r2, r3
 8013e7c:	685b      	ldr	r3, [r3, #4]
 8013e7e:	b10b      	cbz	r3, 8013e84 <_free_r+0x50>
 8013e80:	42a3      	cmp	r3, r4
 8013e82:	d9fa      	bls.n	8013e7a <_free_r+0x46>
 8013e84:	6811      	ldr	r1, [r2, #0]
 8013e86:	1855      	adds	r5, r2, r1
 8013e88:	42a5      	cmp	r5, r4
 8013e8a:	d10b      	bne.n	8013ea4 <_free_r+0x70>
 8013e8c:	6824      	ldr	r4, [r4, #0]
 8013e8e:	4421      	add	r1, r4
 8013e90:	1854      	adds	r4, r2, r1
 8013e92:	42a3      	cmp	r3, r4
 8013e94:	6011      	str	r1, [r2, #0]
 8013e96:	d1e0      	bne.n	8013e5a <_free_r+0x26>
 8013e98:	681c      	ldr	r4, [r3, #0]
 8013e9a:	685b      	ldr	r3, [r3, #4]
 8013e9c:	6053      	str	r3, [r2, #4]
 8013e9e:	440c      	add	r4, r1
 8013ea0:	6014      	str	r4, [r2, #0]
 8013ea2:	e7da      	b.n	8013e5a <_free_r+0x26>
 8013ea4:	d902      	bls.n	8013eac <_free_r+0x78>
 8013ea6:	230c      	movs	r3, #12
 8013ea8:	6003      	str	r3, [r0, #0]
 8013eaa:	e7d6      	b.n	8013e5a <_free_r+0x26>
 8013eac:	6825      	ldr	r5, [r4, #0]
 8013eae:	1961      	adds	r1, r4, r5
 8013eb0:	428b      	cmp	r3, r1
 8013eb2:	bf04      	itt	eq
 8013eb4:	6819      	ldreq	r1, [r3, #0]
 8013eb6:	685b      	ldreq	r3, [r3, #4]
 8013eb8:	6063      	str	r3, [r4, #4]
 8013eba:	bf04      	itt	eq
 8013ebc:	1949      	addeq	r1, r1, r5
 8013ebe:	6021      	streq	r1, [r4, #0]
 8013ec0:	6054      	str	r4, [r2, #4]
 8013ec2:	e7ca      	b.n	8013e5a <_free_r+0x26>
 8013ec4:	b003      	add	sp, #12
 8013ec6:	bd30      	pop	{r4, r5, pc}
 8013ec8:	200081ec 	.word	0x200081ec

08013ecc <malloc>:
 8013ecc:	4b02      	ldr	r3, [pc, #8]	; (8013ed8 <malloc+0xc>)
 8013ece:	4601      	mov	r1, r0
 8013ed0:	6818      	ldr	r0, [r3, #0]
 8013ed2:	f000 b823 	b.w	8013f1c <_malloc_r>
 8013ed6:	bf00      	nop
 8013ed8:	20000088 	.word	0x20000088

08013edc <sbrk_aligned>:
 8013edc:	b570      	push	{r4, r5, r6, lr}
 8013ede:	4e0e      	ldr	r6, [pc, #56]	; (8013f18 <sbrk_aligned+0x3c>)
 8013ee0:	460c      	mov	r4, r1
 8013ee2:	6831      	ldr	r1, [r6, #0]
 8013ee4:	4605      	mov	r5, r0
 8013ee6:	b911      	cbnz	r1, 8013eee <sbrk_aligned+0x12>
 8013ee8:	f001 f810 	bl	8014f0c <_sbrk_r>
 8013eec:	6030      	str	r0, [r6, #0]
 8013eee:	4621      	mov	r1, r4
 8013ef0:	4628      	mov	r0, r5
 8013ef2:	f001 f80b 	bl	8014f0c <_sbrk_r>
 8013ef6:	1c43      	adds	r3, r0, #1
 8013ef8:	d00a      	beq.n	8013f10 <sbrk_aligned+0x34>
 8013efa:	1cc4      	adds	r4, r0, #3
 8013efc:	f024 0403 	bic.w	r4, r4, #3
 8013f00:	42a0      	cmp	r0, r4
 8013f02:	d007      	beq.n	8013f14 <sbrk_aligned+0x38>
 8013f04:	1a21      	subs	r1, r4, r0
 8013f06:	4628      	mov	r0, r5
 8013f08:	f001 f800 	bl	8014f0c <_sbrk_r>
 8013f0c:	3001      	adds	r0, #1
 8013f0e:	d101      	bne.n	8013f14 <sbrk_aligned+0x38>
 8013f10:	f04f 34ff 	mov.w	r4, #4294967295
 8013f14:	4620      	mov	r0, r4
 8013f16:	bd70      	pop	{r4, r5, r6, pc}
 8013f18:	200081f0 	.word	0x200081f0

08013f1c <_malloc_r>:
 8013f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f20:	1ccd      	adds	r5, r1, #3
 8013f22:	f025 0503 	bic.w	r5, r5, #3
 8013f26:	3508      	adds	r5, #8
 8013f28:	2d0c      	cmp	r5, #12
 8013f2a:	bf38      	it	cc
 8013f2c:	250c      	movcc	r5, #12
 8013f2e:	2d00      	cmp	r5, #0
 8013f30:	4607      	mov	r7, r0
 8013f32:	db01      	blt.n	8013f38 <_malloc_r+0x1c>
 8013f34:	42a9      	cmp	r1, r5
 8013f36:	d905      	bls.n	8013f44 <_malloc_r+0x28>
 8013f38:	230c      	movs	r3, #12
 8013f3a:	603b      	str	r3, [r7, #0]
 8013f3c:	2600      	movs	r6, #0
 8013f3e:	4630      	mov	r0, r6
 8013f40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8014018 <_malloc_r+0xfc>
 8013f48:	f000 f868 	bl	801401c <__malloc_lock>
 8013f4c:	f8d8 3000 	ldr.w	r3, [r8]
 8013f50:	461c      	mov	r4, r3
 8013f52:	bb5c      	cbnz	r4, 8013fac <_malloc_r+0x90>
 8013f54:	4629      	mov	r1, r5
 8013f56:	4638      	mov	r0, r7
 8013f58:	f7ff ffc0 	bl	8013edc <sbrk_aligned>
 8013f5c:	1c43      	adds	r3, r0, #1
 8013f5e:	4604      	mov	r4, r0
 8013f60:	d155      	bne.n	801400e <_malloc_r+0xf2>
 8013f62:	f8d8 4000 	ldr.w	r4, [r8]
 8013f66:	4626      	mov	r6, r4
 8013f68:	2e00      	cmp	r6, #0
 8013f6a:	d145      	bne.n	8013ff8 <_malloc_r+0xdc>
 8013f6c:	2c00      	cmp	r4, #0
 8013f6e:	d048      	beq.n	8014002 <_malloc_r+0xe6>
 8013f70:	6823      	ldr	r3, [r4, #0]
 8013f72:	4631      	mov	r1, r6
 8013f74:	4638      	mov	r0, r7
 8013f76:	eb04 0903 	add.w	r9, r4, r3
 8013f7a:	f000 ffc7 	bl	8014f0c <_sbrk_r>
 8013f7e:	4581      	cmp	r9, r0
 8013f80:	d13f      	bne.n	8014002 <_malloc_r+0xe6>
 8013f82:	6821      	ldr	r1, [r4, #0]
 8013f84:	1a6d      	subs	r5, r5, r1
 8013f86:	4629      	mov	r1, r5
 8013f88:	4638      	mov	r0, r7
 8013f8a:	f7ff ffa7 	bl	8013edc <sbrk_aligned>
 8013f8e:	3001      	adds	r0, #1
 8013f90:	d037      	beq.n	8014002 <_malloc_r+0xe6>
 8013f92:	6823      	ldr	r3, [r4, #0]
 8013f94:	442b      	add	r3, r5
 8013f96:	6023      	str	r3, [r4, #0]
 8013f98:	f8d8 3000 	ldr.w	r3, [r8]
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d038      	beq.n	8014012 <_malloc_r+0xf6>
 8013fa0:	685a      	ldr	r2, [r3, #4]
 8013fa2:	42a2      	cmp	r2, r4
 8013fa4:	d12b      	bne.n	8013ffe <_malloc_r+0xe2>
 8013fa6:	2200      	movs	r2, #0
 8013fa8:	605a      	str	r2, [r3, #4]
 8013faa:	e00f      	b.n	8013fcc <_malloc_r+0xb0>
 8013fac:	6822      	ldr	r2, [r4, #0]
 8013fae:	1b52      	subs	r2, r2, r5
 8013fb0:	d41f      	bmi.n	8013ff2 <_malloc_r+0xd6>
 8013fb2:	2a0b      	cmp	r2, #11
 8013fb4:	d917      	bls.n	8013fe6 <_malloc_r+0xca>
 8013fb6:	1961      	adds	r1, r4, r5
 8013fb8:	42a3      	cmp	r3, r4
 8013fba:	6025      	str	r5, [r4, #0]
 8013fbc:	bf18      	it	ne
 8013fbe:	6059      	strne	r1, [r3, #4]
 8013fc0:	6863      	ldr	r3, [r4, #4]
 8013fc2:	bf08      	it	eq
 8013fc4:	f8c8 1000 	streq.w	r1, [r8]
 8013fc8:	5162      	str	r2, [r4, r5]
 8013fca:	604b      	str	r3, [r1, #4]
 8013fcc:	4638      	mov	r0, r7
 8013fce:	f104 060b 	add.w	r6, r4, #11
 8013fd2:	f000 f829 	bl	8014028 <__malloc_unlock>
 8013fd6:	f026 0607 	bic.w	r6, r6, #7
 8013fda:	1d23      	adds	r3, r4, #4
 8013fdc:	1af2      	subs	r2, r6, r3
 8013fde:	d0ae      	beq.n	8013f3e <_malloc_r+0x22>
 8013fe0:	1b9b      	subs	r3, r3, r6
 8013fe2:	50a3      	str	r3, [r4, r2]
 8013fe4:	e7ab      	b.n	8013f3e <_malloc_r+0x22>
 8013fe6:	42a3      	cmp	r3, r4
 8013fe8:	6862      	ldr	r2, [r4, #4]
 8013fea:	d1dd      	bne.n	8013fa8 <_malloc_r+0x8c>
 8013fec:	f8c8 2000 	str.w	r2, [r8]
 8013ff0:	e7ec      	b.n	8013fcc <_malloc_r+0xb0>
 8013ff2:	4623      	mov	r3, r4
 8013ff4:	6864      	ldr	r4, [r4, #4]
 8013ff6:	e7ac      	b.n	8013f52 <_malloc_r+0x36>
 8013ff8:	4634      	mov	r4, r6
 8013ffa:	6876      	ldr	r6, [r6, #4]
 8013ffc:	e7b4      	b.n	8013f68 <_malloc_r+0x4c>
 8013ffe:	4613      	mov	r3, r2
 8014000:	e7cc      	b.n	8013f9c <_malloc_r+0x80>
 8014002:	230c      	movs	r3, #12
 8014004:	603b      	str	r3, [r7, #0]
 8014006:	4638      	mov	r0, r7
 8014008:	f000 f80e 	bl	8014028 <__malloc_unlock>
 801400c:	e797      	b.n	8013f3e <_malloc_r+0x22>
 801400e:	6025      	str	r5, [r4, #0]
 8014010:	e7dc      	b.n	8013fcc <_malloc_r+0xb0>
 8014012:	605b      	str	r3, [r3, #4]
 8014014:	deff      	udf	#255	; 0xff
 8014016:	bf00      	nop
 8014018:	200081ec 	.word	0x200081ec

0801401c <__malloc_lock>:
 801401c:	4801      	ldr	r0, [pc, #4]	; (8014024 <__malloc_lock+0x8>)
 801401e:	f7ff b87c 	b.w	801311a <__retarget_lock_acquire_recursive>
 8014022:	bf00      	nop
 8014024:	200081e8 	.word	0x200081e8

08014028 <__malloc_unlock>:
 8014028:	4801      	ldr	r0, [pc, #4]	; (8014030 <__malloc_unlock+0x8>)
 801402a:	f7ff b877 	b.w	801311c <__retarget_lock_release_recursive>
 801402e:	bf00      	nop
 8014030:	200081e8 	.word	0x200081e8

08014034 <_Balloc>:
 8014034:	b570      	push	{r4, r5, r6, lr}
 8014036:	69c6      	ldr	r6, [r0, #28]
 8014038:	4604      	mov	r4, r0
 801403a:	460d      	mov	r5, r1
 801403c:	b976      	cbnz	r6, 801405c <_Balloc+0x28>
 801403e:	2010      	movs	r0, #16
 8014040:	f7ff ff44 	bl	8013ecc <malloc>
 8014044:	4602      	mov	r2, r0
 8014046:	61e0      	str	r0, [r4, #28]
 8014048:	b920      	cbnz	r0, 8014054 <_Balloc+0x20>
 801404a:	4b18      	ldr	r3, [pc, #96]	; (80140ac <_Balloc+0x78>)
 801404c:	4818      	ldr	r0, [pc, #96]	; (80140b0 <_Balloc+0x7c>)
 801404e:	216b      	movs	r1, #107	; 0x6b
 8014050:	f000 ff6c 	bl	8014f2c <__assert_func>
 8014054:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014058:	6006      	str	r6, [r0, #0]
 801405a:	60c6      	str	r6, [r0, #12]
 801405c:	69e6      	ldr	r6, [r4, #28]
 801405e:	68f3      	ldr	r3, [r6, #12]
 8014060:	b183      	cbz	r3, 8014084 <_Balloc+0x50>
 8014062:	69e3      	ldr	r3, [r4, #28]
 8014064:	68db      	ldr	r3, [r3, #12]
 8014066:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801406a:	b9b8      	cbnz	r0, 801409c <_Balloc+0x68>
 801406c:	2101      	movs	r1, #1
 801406e:	fa01 f605 	lsl.w	r6, r1, r5
 8014072:	1d72      	adds	r2, r6, #5
 8014074:	0092      	lsls	r2, r2, #2
 8014076:	4620      	mov	r0, r4
 8014078:	f000 ff76 	bl	8014f68 <_calloc_r>
 801407c:	b160      	cbz	r0, 8014098 <_Balloc+0x64>
 801407e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014082:	e00e      	b.n	80140a2 <_Balloc+0x6e>
 8014084:	2221      	movs	r2, #33	; 0x21
 8014086:	2104      	movs	r1, #4
 8014088:	4620      	mov	r0, r4
 801408a:	f000 ff6d 	bl	8014f68 <_calloc_r>
 801408e:	69e3      	ldr	r3, [r4, #28]
 8014090:	60f0      	str	r0, [r6, #12]
 8014092:	68db      	ldr	r3, [r3, #12]
 8014094:	2b00      	cmp	r3, #0
 8014096:	d1e4      	bne.n	8014062 <_Balloc+0x2e>
 8014098:	2000      	movs	r0, #0
 801409a:	bd70      	pop	{r4, r5, r6, pc}
 801409c:	6802      	ldr	r2, [r0, #0]
 801409e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80140a2:	2300      	movs	r3, #0
 80140a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80140a8:	e7f7      	b.n	801409a <_Balloc+0x66>
 80140aa:	bf00      	nop
 80140ac:	08015b31 	.word	0x08015b31
 80140b0:	08015bb1 	.word	0x08015bb1

080140b4 <_Bfree>:
 80140b4:	b570      	push	{r4, r5, r6, lr}
 80140b6:	69c6      	ldr	r6, [r0, #28]
 80140b8:	4605      	mov	r5, r0
 80140ba:	460c      	mov	r4, r1
 80140bc:	b976      	cbnz	r6, 80140dc <_Bfree+0x28>
 80140be:	2010      	movs	r0, #16
 80140c0:	f7ff ff04 	bl	8013ecc <malloc>
 80140c4:	4602      	mov	r2, r0
 80140c6:	61e8      	str	r0, [r5, #28]
 80140c8:	b920      	cbnz	r0, 80140d4 <_Bfree+0x20>
 80140ca:	4b09      	ldr	r3, [pc, #36]	; (80140f0 <_Bfree+0x3c>)
 80140cc:	4809      	ldr	r0, [pc, #36]	; (80140f4 <_Bfree+0x40>)
 80140ce:	218f      	movs	r1, #143	; 0x8f
 80140d0:	f000 ff2c 	bl	8014f2c <__assert_func>
 80140d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80140d8:	6006      	str	r6, [r0, #0]
 80140da:	60c6      	str	r6, [r0, #12]
 80140dc:	b13c      	cbz	r4, 80140ee <_Bfree+0x3a>
 80140de:	69eb      	ldr	r3, [r5, #28]
 80140e0:	6862      	ldr	r2, [r4, #4]
 80140e2:	68db      	ldr	r3, [r3, #12]
 80140e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80140e8:	6021      	str	r1, [r4, #0]
 80140ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80140ee:	bd70      	pop	{r4, r5, r6, pc}
 80140f0:	08015b31 	.word	0x08015b31
 80140f4:	08015bb1 	.word	0x08015bb1

080140f8 <__multadd>:
 80140f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140fc:	690d      	ldr	r5, [r1, #16]
 80140fe:	4607      	mov	r7, r0
 8014100:	460c      	mov	r4, r1
 8014102:	461e      	mov	r6, r3
 8014104:	f101 0c14 	add.w	ip, r1, #20
 8014108:	2000      	movs	r0, #0
 801410a:	f8dc 3000 	ldr.w	r3, [ip]
 801410e:	b299      	uxth	r1, r3
 8014110:	fb02 6101 	mla	r1, r2, r1, r6
 8014114:	0c1e      	lsrs	r6, r3, #16
 8014116:	0c0b      	lsrs	r3, r1, #16
 8014118:	fb02 3306 	mla	r3, r2, r6, r3
 801411c:	b289      	uxth	r1, r1
 801411e:	3001      	adds	r0, #1
 8014120:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014124:	4285      	cmp	r5, r0
 8014126:	f84c 1b04 	str.w	r1, [ip], #4
 801412a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801412e:	dcec      	bgt.n	801410a <__multadd+0x12>
 8014130:	b30e      	cbz	r6, 8014176 <__multadd+0x7e>
 8014132:	68a3      	ldr	r3, [r4, #8]
 8014134:	42ab      	cmp	r3, r5
 8014136:	dc19      	bgt.n	801416c <__multadd+0x74>
 8014138:	6861      	ldr	r1, [r4, #4]
 801413a:	4638      	mov	r0, r7
 801413c:	3101      	adds	r1, #1
 801413e:	f7ff ff79 	bl	8014034 <_Balloc>
 8014142:	4680      	mov	r8, r0
 8014144:	b928      	cbnz	r0, 8014152 <__multadd+0x5a>
 8014146:	4602      	mov	r2, r0
 8014148:	4b0c      	ldr	r3, [pc, #48]	; (801417c <__multadd+0x84>)
 801414a:	480d      	ldr	r0, [pc, #52]	; (8014180 <__multadd+0x88>)
 801414c:	21ba      	movs	r1, #186	; 0xba
 801414e:	f000 feed 	bl	8014f2c <__assert_func>
 8014152:	6922      	ldr	r2, [r4, #16]
 8014154:	3202      	adds	r2, #2
 8014156:	f104 010c 	add.w	r1, r4, #12
 801415a:	0092      	lsls	r2, r2, #2
 801415c:	300c      	adds	r0, #12
 801415e:	f7fe ffde 	bl	801311e <memcpy>
 8014162:	4621      	mov	r1, r4
 8014164:	4638      	mov	r0, r7
 8014166:	f7ff ffa5 	bl	80140b4 <_Bfree>
 801416a:	4644      	mov	r4, r8
 801416c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014170:	3501      	adds	r5, #1
 8014172:	615e      	str	r6, [r3, #20]
 8014174:	6125      	str	r5, [r4, #16]
 8014176:	4620      	mov	r0, r4
 8014178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801417c:	08015ba0 	.word	0x08015ba0
 8014180:	08015bb1 	.word	0x08015bb1

08014184 <__hi0bits>:
 8014184:	0c03      	lsrs	r3, r0, #16
 8014186:	041b      	lsls	r3, r3, #16
 8014188:	b9d3      	cbnz	r3, 80141c0 <__hi0bits+0x3c>
 801418a:	0400      	lsls	r0, r0, #16
 801418c:	2310      	movs	r3, #16
 801418e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8014192:	bf04      	itt	eq
 8014194:	0200      	lsleq	r0, r0, #8
 8014196:	3308      	addeq	r3, #8
 8014198:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801419c:	bf04      	itt	eq
 801419e:	0100      	lsleq	r0, r0, #4
 80141a0:	3304      	addeq	r3, #4
 80141a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80141a6:	bf04      	itt	eq
 80141a8:	0080      	lsleq	r0, r0, #2
 80141aa:	3302      	addeq	r3, #2
 80141ac:	2800      	cmp	r0, #0
 80141ae:	db05      	blt.n	80141bc <__hi0bits+0x38>
 80141b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80141b4:	f103 0301 	add.w	r3, r3, #1
 80141b8:	bf08      	it	eq
 80141ba:	2320      	moveq	r3, #32
 80141bc:	4618      	mov	r0, r3
 80141be:	4770      	bx	lr
 80141c0:	2300      	movs	r3, #0
 80141c2:	e7e4      	b.n	801418e <__hi0bits+0xa>

080141c4 <__lo0bits>:
 80141c4:	6803      	ldr	r3, [r0, #0]
 80141c6:	f013 0207 	ands.w	r2, r3, #7
 80141ca:	d00c      	beq.n	80141e6 <__lo0bits+0x22>
 80141cc:	07d9      	lsls	r1, r3, #31
 80141ce:	d422      	bmi.n	8014216 <__lo0bits+0x52>
 80141d0:	079a      	lsls	r2, r3, #30
 80141d2:	bf49      	itett	mi
 80141d4:	085b      	lsrmi	r3, r3, #1
 80141d6:	089b      	lsrpl	r3, r3, #2
 80141d8:	6003      	strmi	r3, [r0, #0]
 80141da:	2201      	movmi	r2, #1
 80141dc:	bf5c      	itt	pl
 80141de:	6003      	strpl	r3, [r0, #0]
 80141e0:	2202      	movpl	r2, #2
 80141e2:	4610      	mov	r0, r2
 80141e4:	4770      	bx	lr
 80141e6:	b299      	uxth	r1, r3
 80141e8:	b909      	cbnz	r1, 80141ee <__lo0bits+0x2a>
 80141ea:	0c1b      	lsrs	r3, r3, #16
 80141ec:	2210      	movs	r2, #16
 80141ee:	b2d9      	uxtb	r1, r3
 80141f0:	b909      	cbnz	r1, 80141f6 <__lo0bits+0x32>
 80141f2:	3208      	adds	r2, #8
 80141f4:	0a1b      	lsrs	r3, r3, #8
 80141f6:	0719      	lsls	r1, r3, #28
 80141f8:	bf04      	itt	eq
 80141fa:	091b      	lsreq	r3, r3, #4
 80141fc:	3204      	addeq	r2, #4
 80141fe:	0799      	lsls	r1, r3, #30
 8014200:	bf04      	itt	eq
 8014202:	089b      	lsreq	r3, r3, #2
 8014204:	3202      	addeq	r2, #2
 8014206:	07d9      	lsls	r1, r3, #31
 8014208:	d403      	bmi.n	8014212 <__lo0bits+0x4e>
 801420a:	085b      	lsrs	r3, r3, #1
 801420c:	f102 0201 	add.w	r2, r2, #1
 8014210:	d003      	beq.n	801421a <__lo0bits+0x56>
 8014212:	6003      	str	r3, [r0, #0]
 8014214:	e7e5      	b.n	80141e2 <__lo0bits+0x1e>
 8014216:	2200      	movs	r2, #0
 8014218:	e7e3      	b.n	80141e2 <__lo0bits+0x1e>
 801421a:	2220      	movs	r2, #32
 801421c:	e7e1      	b.n	80141e2 <__lo0bits+0x1e>
	...

08014220 <__i2b>:
 8014220:	b510      	push	{r4, lr}
 8014222:	460c      	mov	r4, r1
 8014224:	2101      	movs	r1, #1
 8014226:	f7ff ff05 	bl	8014034 <_Balloc>
 801422a:	4602      	mov	r2, r0
 801422c:	b928      	cbnz	r0, 801423a <__i2b+0x1a>
 801422e:	4b05      	ldr	r3, [pc, #20]	; (8014244 <__i2b+0x24>)
 8014230:	4805      	ldr	r0, [pc, #20]	; (8014248 <__i2b+0x28>)
 8014232:	f240 1145 	movw	r1, #325	; 0x145
 8014236:	f000 fe79 	bl	8014f2c <__assert_func>
 801423a:	2301      	movs	r3, #1
 801423c:	6144      	str	r4, [r0, #20]
 801423e:	6103      	str	r3, [r0, #16]
 8014240:	bd10      	pop	{r4, pc}
 8014242:	bf00      	nop
 8014244:	08015ba0 	.word	0x08015ba0
 8014248:	08015bb1 	.word	0x08015bb1

0801424c <__multiply>:
 801424c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014250:	4691      	mov	r9, r2
 8014252:	690a      	ldr	r2, [r1, #16]
 8014254:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014258:	429a      	cmp	r2, r3
 801425a:	bfb8      	it	lt
 801425c:	460b      	movlt	r3, r1
 801425e:	460c      	mov	r4, r1
 8014260:	bfbc      	itt	lt
 8014262:	464c      	movlt	r4, r9
 8014264:	4699      	movlt	r9, r3
 8014266:	6927      	ldr	r7, [r4, #16]
 8014268:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801426c:	68a3      	ldr	r3, [r4, #8]
 801426e:	6861      	ldr	r1, [r4, #4]
 8014270:	eb07 060a 	add.w	r6, r7, sl
 8014274:	42b3      	cmp	r3, r6
 8014276:	b085      	sub	sp, #20
 8014278:	bfb8      	it	lt
 801427a:	3101      	addlt	r1, #1
 801427c:	f7ff feda 	bl	8014034 <_Balloc>
 8014280:	b930      	cbnz	r0, 8014290 <__multiply+0x44>
 8014282:	4602      	mov	r2, r0
 8014284:	4b44      	ldr	r3, [pc, #272]	; (8014398 <__multiply+0x14c>)
 8014286:	4845      	ldr	r0, [pc, #276]	; (801439c <__multiply+0x150>)
 8014288:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801428c:	f000 fe4e 	bl	8014f2c <__assert_func>
 8014290:	f100 0514 	add.w	r5, r0, #20
 8014294:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014298:	462b      	mov	r3, r5
 801429a:	2200      	movs	r2, #0
 801429c:	4543      	cmp	r3, r8
 801429e:	d321      	bcc.n	80142e4 <__multiply+0x98>
 80142a0:	f104 0314 	add.w	r3, r4, #20
 80142a4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80142a8:	f109 0314 	add.w	r3, r9, #20
 80142ac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80142b0:	9202      	str	r2, [sp, #8]
 80142b2:	1b3a      	subs	r2, r7, r4
 80142b4:	3a15      	subs	r2, #21
 80142b6:	f022 0203 	bic.w	r2, r2, #3
 80142ba:	3204      	adds	r2, #4
 80142bc:	f104 0115 	add.w	r1, r4, #21
 80142c0:	428f      	cmp	r7, r1
 80142c2:	bf38      	it	cc
 80142c4:	2204      	movcc	r2, #4
 80142c6:	9201      	str	r2, [sp, #4]
 80142c8:	9a02      	ldr	r2, [sp, #8]
 80142ca:	9303      	str	r3, [sp, #12]
 80142cc:	429a      	cmp	r2, r3
 80142ce:	d80c      	bhi.n	80142ea <__multiply+0x9e>
 80142d0:	2e00      	cmp	r6, #0
 80142d2:	dd03      	ble.n	80142dc <__multiply+0x90>
 80142d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d05b      	beq.n	8014394 <__multiply+0x148>
 80142dc:	6106      	str	r6, [r0, #16]
 80142de:	b005      	add	sp, #20
 80142e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142e4:	f843 2b04 	str.w	r2, [r3], #4
 80142e8:	e7d8      	b.n	801429c <__multiply+0x50>
 80142ea:	f8b3 a000 	ldrh.w	sl, [r3]
 80142ee:	f1ba 0f00 	cmp.w	sl, #0
 80142f2:	d024      	beq.n	801433e <__multiply+0xf2>
 80142f4:	f104 0e14 	add.w	lr, r4, #20
 80142f8:	46a9      	mov	r9, r5
 80142fa:	f04f 0c00 	mov.w	ip, #0
 80142fe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8014302:	f8d9 1000 	ldr.w	r1, [r9]
 8014306:	fa1f fb82 	uxth.w	fp, r2
 801430a:	b289      	uxth	r1, r1
 801430c:	fb0a 110b 	mla	r1, sl, fp, r1
 8014310:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8014314:	f8d9 2000 	ldr.w	r2, [r9]
 8014318:	4461      	add	r1, ip
 801431a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801431e:	fb0a c20b 	mla	r2, sl, fp, ip
 8014322:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014326:	b289      	uxth	r1, r1
 8014328:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801432c:	4577      	cmp	r7, lr
 801432e:	f849 1b04 	str.w	r1, [r9], #4
 8014332:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014336:	d8e2      	bhi.n	80142fe <__multiply+0xb2>
 8014338:	9a01      	ldr	r2, [sp, #4]
 801433a:	f845 c002 	str.w	ip, [r5, r2]
 801433e:	9a03      	ldr	r2, [sp, #12]
 8014340:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014344:	3304      	adds	r3, #4
 8014346:	f1b9 0f00 	cmp.w	r9, #0
 801434a:	d021      	beq.n	8014390 <__multiply+0x144>
 801434c:	6829      	ldr	r1, [r5, #0]
 801434e:	f104 0c14 	add.w	ip, r4, #20
 8014352:	46ae      	mov	lr, r5
 8014354:	f04f 0a00 	mov.w	sl, #0
 8014358:	f8bc b000 	ldrh.w	fp, [ip]
 801435c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8014360:	fb09 220b 	mla	r2, r9, fp, r2
 8014364:	4452      	add	r2, sl
 8014366:	b289      	uxth	r1, r1
 8014368:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801436c:	f84e 1b04 	str.w	r1, [lr], #4
 8014370:	f85c 1b04 	ldr.w	r1, [ip], #4
 8014374:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014378:	f8be 1000 	ldrh.w	r1, [lr]
 801437c:	fb09 110a 	mla	r1, r9, sl, r1
 8014380:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8014384:	4567      	cmp	r7, ip
 8014386:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801438a:	d8e5      	bhi.n	8014358 <__multiply+0x10c>
 801438c:	9a01      	ldr	r2, [sp, #4]
 801438e:	50a9      	str	r1, [r5, r2]
 8014390:	3504      	adds	r5, #4
 8014392:	e799      	b.n	80142c8 <__multiply+0x7c>
 8014394:	3e01      	subs	r6, #1
 8014396:	e79b      	b.n	80142d0 <__multiply+0x84>
 8014398:	08015ba0 	.word	0x08015ba0
 801439c:	08015bb1 	.word	0x08015bb1

080143a0 <__pow5mult>:
 80143a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80143a4:	4615      	mov	r5, r2
 80143a6:	f012 0203 	ands.w	r2, r2, #3
 80143aa:	4606      	mov	r6, r0
 80143ac:	460f      	mov	r7, r1
 80143ae:	d007      	beq.n	80143c0 <__pow5mult+0x20>
 80143b0:	4c25      	ldr	r4, [pc, #148]	; (8014448 <__pow5mult+0xa8>)
 80143b2:	3a01      	subs	r2, #1
 80143b4:	2300      	movs	r3, #0
 80143b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80143ba:	f7ff fe9d 	bl	80140f8 <__multadd>
 80143be:	4607      	mov	r7, r0
 80143c0:	10ad      	asrs	r5, r5, #2
 80143c2:	d03d      	beq.n	8014440 <__pow5mult+0xa0>
 80143c4:	69f4      	ldr	r4, [r6, #28]
 80143c6:	b97c      	cbnz	r4, 80143e8 <__pow5mult+0x48>
 80143c8:	2010      	movs	r0, #16
 80143ca:	f7ff fd7f 	bl	8013ecc <malloc>
 80143ce:	4602      	mov	r2, r0
 80143d0:	61f0      	str	r0, [r6, #28]
 80143d2:	b928      	cbnz	r0, 80143e0 <__pow5mult+0x40>
 80143d4:	4b1d      	ldr	r3, [pc, #116]	; (801444c <__pow5mult+0xac>)
 80143d6:	481e      	ldr	r0, [pc, #120]	; (8014450 <__pow5mult+0xb0>)
 80143d8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80143dc:	f000 fda6 	bl	8014f2c <__assert_func>
 80143e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80143e4:	6004      	str	r4, [r0, #0]
 80143e6:	60c4      	str	r4, [r0, #12]
 80143e8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80143ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80143f0:	b94c      	cbnz	r4, 8014406 <__pow5mult+0x66>
 80143f2:	f240 2171 	movw	r1, #625	; 0x271
 80143f6:	4630      	mov	r0, r6
 80143f8:	f7ff ff12 	bl	8014220 <__i2b>
 80143fc:	2300      	movs	r3, #0
 80143fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8014402:	4604      	mov	r4, r0
 8014404:	6003      	str	r3, [r0, #0]
 8014406:	f04f 0900 	mov.w	r9, #0
 801440a:	07eb      	lsls	r3, r5, #31
 801440c:	d50a      	bpl.n	8014424 <__pow5mult+0x84>
 801440e:	4639      	mov	r1, r7
 8014410:	4622      	mov	r2, r4
 8014412:	4630      	mov	r0, r6
 8014414:	f7ff ff1a 	bl	801424c <__multiply>
 8014418:	4639      	mov	r1, r7
 801441a:	4680      	mov	r8, r0
 801441c:	4630      	mov	r0, r6
 801441e:	f7ff fe49 	bl	80140b4 <_Bfree>
 8014422:	4647      	mov	r7, r8
 8014424:	106d      	asrs	r5, r5, #1
 8014426:	d00b      	beq.n	8014440 <__pow5mult+0xa0>
 8014428:	6820      	ldr	r0, [r4, #0]
 801442a:	b938      	cbnz	r0, 801443c <__pow5mult+0x9c>
 801442c:	4622      	mov	r2, r4
 801442e:	4621      	mov	r1, r4
 8014430:	4630      	mov	r0, r6
 8014432:	f7ff ff0b 	bl	801424c <__multiply>
 8014436:	6020      	str	r0, [r4, #0]
 8014438:	f8c0 9000 	str.w	r9, [r0]
 801443c:	4604      	mov	r4, r0
 801443e:	e7e4      	b.n	801440a <__pow5mult+0x6a>
 8014440:	4638      	mov	r0, r7
 8014442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014446:	bf00      	nop
 8014448:	08015d00 	.word	0x08015d00
 801444c:	08015b31 	.word	0x08015b31
 8014450:	08015bb1 	.word	0x08015bb1

08014454 <__lshift>:
 8014454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014458:	460c      	mov	r4, r1
 801445a:	6849      	ldr	r1, [r1, #4]
 801445c:	6923      	ldr	r3, [r4, #16]
 801445e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014462:	68a3      	ldr	r3, [r4, #8]
 8014464:	4607      	mov	r7, r0
 8014466:	4691      	mov	r9, r2
 8014468:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801446c:	f108 0601 	add.w	r6, r8, #1
 8014470:	42b3      	cmp	r3, r6
 8014472:	db0b      	blt.n	801448c <__lshift+0x38>
 8014474:	4638      	mov	r0, r7
 8014476:	f7ff fddd 	bl	8014034 <_Balloc>
 801447a:	4605      	mov	r5, r0
 801447c:	b948      	cbnz	r0, 8014492 <__lshift+0x3e>
 801447e:	4602      	mov	r2, r0
 8014480:	4b28      	ldr	r3, [pc, #160]	; (8014524 <__lshift+0xd0>)
 8014482:	4829      	ldr	r0, [pc, #164]	; (8014528 <__lshift+0xd4>)
 8014484:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8014488:	f000 fd50 	bl	8014f2c <__assert_func>
 801448c:	3101      	adds	r1, #1
 801448e:	005b      	lsls	r3, r3, #1
 8014490:	e7ee      	b.n	8014470 <__lshift+0x1c>
 8014492:	2300      	movs	r3, #0
 8014494:	f100 0114 	add.w	r1, r0, #20
 8014498:	f100 0210 	add.w	r2, r0, #16
 801449c:	4618      	mov	r0, r3
 801449e:	4553      	cmp	r3, sl
 80144a0:	db33      	blt.n	801450a <__lshift+0xb6>
 80144a2:	6920      	ldr	r0, [r4, #16]
 80144a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80144a8:	f104 0314 	add.w	r3, r4, #20
 80144ac:	f019 091f 	ands.w	r9, r9, #31
 80144b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80144b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80144b8:	d02b      	beq.n	8014512 <__lshift+0xbe>
 80144ba:	f1c9 0e20 	rsb	lr, r9, #32
 80144be:	468a      	mov	sl, r1
 80144c0:	2200      	movs	r2, #0
 80144c2:	6818      	ldr	r0, [r3, #0]
 80144c4:	fa00 f009 	lsl.w	r0, r0, r9
 80144c8:	4310      	orrs	r0, r2
 80144ca:	f84a 0b04 	str.w	r0, [sl], #4
 80144ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80144d2:	459c      	cmp	ip, r3
 80144d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80144d8:	d8f3      	bhi.n	80144c2 <__lshift+0x6e>
 80144da:	ebac 0304 	sub.w	r3, ip, r4
 80144de:	3b15      	subs	r3, #21
 80144e0:	f023 0303 	bic.w	r3, r3, #3
 80144e4:	3304      	adds	r3, #4
 80144e6:	f104 0015 	add.w	r0, r4, #21
 80144ea:	4584      	cmp	ip, r0
 80144ec:	bf38      	it	cc
 80144ee:	2304      	movcc	r3, #4
 80144f0:	50ca      	str	r2, [r1, r3]
 80144f2:	b10a      	cbz	r2, 80144f8 <__lshift+0xa4>
 80144f4:	f108 0602 	add.w	r6, r8, #2
 80144f8:	3e01      	subs	r6, #1
 80144fa:	4638      	mov	r0, r7
 80144fc:	612e      	str	r6, [r5, #16]
 80144fe:	4621      	mov	r1, r4
 8014500:	f7ff fdd8 	bl	80140b4 <_Bfree>
 8014504:	4628      	mov	r0, r5
 8014506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801450a:	f842 0f04 	str.w	r0, [r2, #4]!
 801450e:	3301      	adds	r3, #1
 8014510:	e7c5      	b.n	801449e <__lshift+0x4a>
 8014512:	3904      	subs	r1, #4
 8014514:	f853 2b04 	ldr.w	r2, [r3], #4
 8014518:	f841 2f04 	str.w	r2, [r1, #4]!
 801451c:	459c      	cmp	ip, r3
 801451e:	d8f9      	bhi.n	8014514 <__lshift+0xc0>
 8014520:	e7ea      	b.n	80144f8 <__lshift+0xa4>
 8014522:	bf00      	nop
 8014524:	08015ba0 	.word	0x08015ba0
 8014528:	08015bb1 	.word	0x08015bb1

0801452c <__mcmp>:
 801452c:	b530      	push	{r4, r5, lr}
 801452e:	6902      	ldr	r2, [r0, #16]
 8014530:	690c      	ldr	r4, [r1, #16]
 8014532:	1b12      	subs	r2, r2, r4
 8014534:	d10e      	bne.n	8014554 <__mcmp+0x28>
 8014536:	f100 0314 	add.w	r3, r0, #20
 801453a:	3114      	adds	r1, #20
 801453c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014540:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014544:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014548:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801454c:	42a5      	cmp	r5, r4
 801454e:	d003      	beq.n	8014558 <__mcmp+0x2c>
 8014550:	d305      	bcc.n	801455e <__mcmp+0x32>
 8014552:	2201      	movs	r2, #1
 8014554:	4610      	mov	r0, r2
 8014556:	bd30      	pop	{r4, r5, pc}
 8014558:	4283      	cmp	r3, r0
 801455a:	d3f3      	bcc.n	8014544 <__mcmp+0x18>
 801455c:	e7fa      	b.n	8014554 <__mcmp+0x28>
 801455e:	f04f 32ff 	mov.w	r2, #4294967295
 8014562:	e7f7      	b.n	8014554 <__mcmp+0x28>

08014564 <__mdiff>:
 8014564:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014568:	460c      	mov	r4, r1
 801456a:	4606      	mov	r6, r0
 801456c:	4611      	mov	r1, r2
 801456e:	4620      	mov	r0, r4
 8014570:	4690      	mov	r8, r2
 8014572:	f7ff ffdb 	bl	801452c <__mcmp>
 8014576:	1e05      	subs	r5, r0, #0
 8014578:	d110      	bne.n	801459c <__mdiff+0x38>
 801457a:	4629      	mov	r1, r5
 801457c:	4630      	mov	r0, r6
 801457e:	f7ff fd59 	bl	8014034 <_Balloc>
 8014582:	b930      	cbnz	r0, 8014592 <__mdiff+0x2e>
 8014584:	4b3a      	ldr	r3, [pc, #232]	; (8014670 <__mdiff+0x10c>)
 8014586:	4602      	mov	r2, r0
 8014588:	f240 2137 	movw	r1, #567	; 0x237
 801458c:	4839      	ldr	r0, [pc, #228]	; (8014674 <__mdiff+0x110>)
 801458e:	f000 fccd 	bl	8014f2c <__assert_func>
 8014592:	2301      	movs	r3, #1
 8014594:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014598:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801459c:	bfa4      	itt	ge
 801459e:	4643      	movge	r3, r8
 80145a0:	46a0      	movge	r8, r4
 80145a2:	4630      	mov	r0, r6
 80145a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80145a8:	bfa6      	itte	ge
 80145aa:	461c      	movge	r4, r3
 80145ac:	2500      	movge	r5, #0
 80145ae:	2501      	movlt	r5, #1
 80145b0:	f7ff fd40 	bl	8014034 <_Balloc>
 80145b4:	b920      	cbnz	r0, 80145c0 <__mdiff+0x5c>
 80145b6:	4b2e      	ldr	r3, [pc, #184]	; (8014670 <__mdiff+0x10c>)
 80145b8:	4602      	mov	r2, r0
 80145ba:	f240 2145 	movw	r1, #581	; 0x245
 80145be:	e7e5      	b.n	801458c <__mdiff+0x28>
 80145c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80145c4:	6926      	ldr	r6, [r4, #16]
 80145c6:	60c5      	str	r5, [r0, #12]
 80145c8:	f104 0914 	add.w	r9, r4, #20
 80145cc:	f108 0514 	add.w	r5, r8, #20
 80145d0:	f100 0e14 	add.w	lr, r0, #20
 80145d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80145d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80145dc:	f108 0210 	add.w	r2, r8, #16
 80145e0:	46f2      	mov	sl, lr
 80145e2:	2100      	movs	r1, #0
 80145e4:	f859 3b04 	ldr.w	r3, [r9], #4
 80145e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80145ec:	fa11 f88b 	uxtah	r8, r1, fp
 80145f0:	b299      	uxth	r1, r3
 80145f2:	0c1b      	lsrs	r3, r3, #16
 80145f4:	eba8 0801 	sub.w	r8, r8, r1
 80145f8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80145fc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8014600:	fa1f f888 	uxth.w	r8, r8
 8014604:	1419      	asrs	r1, r3, #16
 8014606:	454e      	cmp	r6, r9
 8014608:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801460c:	f84a 3b04 	str.w	r3, [sl], #4
 8014610:	d8e8      	bhi.n	80145e4 <__mdiff+0x80>
 8014612:	1b33      	subs	r3, r6, r4
 8014614:	3b15      	subs	r3, #21
 8014616:	f023 0303 	bic.w	r3, r3, #3
 801461a:	3304      	adds	r3, #4
 801461c:	3415      	adds	r4, #21
 801461e:	42a6      	cmp	r6, r4
 8014620:	bf38      	it	cc
 8014622:	2304      	movcc	r3, #4
 8014624:	441d      	add	r5, r3
 8014626:	4473      	add	r3, lr
 8014628:	469e      	mov	lr, r3
 801462a:	462e      	mov	r6, r5
 801462c:	4566      	cmp	r6, ip
 801462e:	d30e      	bcc.n	801464e <__mdiff+0xea>
 8014630:	f10c 0203 	add.w	r2, ip, #3
 8014634:	1b52      	subs	r2, r2, r5
 8014636:	f022 0203 	bic.w	r2, r2, #3
 801463a:	3d03      	subs	r5, #3
 801463c:	45ac      	cmp	ip, r5
 801463e:	bf38      	it	cc
 8014640:	2200      	movcc	r2, #0
 8014642:	4413      	add	r3, r2
 8014644:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8014648:	b17a      	cbz	r2, 801466a <__mdiff+0x106>
 801464a:	6107      	str	r7, [r0, #16]
 801464c:	e7a4      	b.n	8014598 <__mdiff+0x34>
 801464e:	f856 8b04 	ldr.w	r8, [r6], #4
 8014652:	fa11 f288 	uxtah	r2, r1, r8
 8014656:	1414      	asrs	r4, r2, #16
 8014658:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801465c:	b292      	uxth	r2, r2
 801465e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8014662:	f84e 2b04 	str.w	r2, [lr], #4
 8014666:	1421      	asrs	r1, r4, #16
 8014668:	e7e0      	b.n	801462c <__mdiff+0xc8>
 801466a:	3f01      	subs	r7, #1
 801466c:	e7ea      	b.n	8014644 <__mdiff+0xe0>
 801466e:	bf00      	nop
 8014670:	08015ba0 	.word	0x08015ba0
 8014674:	08015bb1 	.word	0x08015bb1

08014678 <__d2b>:
 8014678:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801467c:	460f      	mov	r7, r1
 801467e:	2101      	movs	r1, #1
 8014680:	ec59 8b10 	vmov	r8, r9, d0
 8014684:	4616      	mov	r6, r2
 8014686:	f7ff fcd5 	bl	8014034 <_Balloc>
 801468a:	4604      	mov	r4, r0
 801468c:	b930      	cbnz	r0, 801469c <__d2b+0x24>
 801468e:	4602      	mov	r2, r0
 8014690:	4b24      	ldr	r3, [pc, #144]	; (8014724 <__d2b+0xac>)
 8014692:	4825      	ldr	r0, [pc, #148]	; (8014728 <__d2b+0xb0>)
 8014694:	f240 310f 	movw	r1, #783	; 0x30f
 8014698:	f000 fc48 	bl	8014f2c <__assert_func>
 801469c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80146a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80146a4:	bb2d      	cbnz	r5, 80146f2 <__d2b+0x7a>
 80146a6:	9301      	str	r3, [sp, #4]
 80146a8:	f1b8 0300 	subs.w	r3, r8, #0
 80146ac:	d026      	beq.n	80146fc <__d2b+0x84>
 80146ae:	4668      	mov	r0, sp
 80146b0:	9300      	str	r3, [sp, #0]
 80146b2:	f7ff fd87 	bl	80141c4 <__lo0bits>
 80146b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80146ba:	b1e8      	cbz	r0, 80146f8 <__d2b+0x80>
 80146bc:	f1c0 0320 	rsb	r3, r0, #32
 80146c0:	fa02 f303 	lsl.w	r3, r2, r3
 80146c4:	430b      	orrs	r3, r1
 80146c6:	40c2      	lsrs	r2, r0
 80146c8:	6163      	str	r3, [r4, #20]
 80146ca:	9201      	str	r2, [sp, #4]
 80146cc:	9b01      	ldr	r3, [sp, #4]
 80146ce:	61a3      	str	r3, [r4, #24]
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	bf14      	ite	ne
 80146d4:	2202      	movne	r2, #2
 80146d6:	2201      	moveq	r2, #1
 80146d8:	6122      	str	r2, [r4, #16]
 80146da:	b1bd      	cbz	r5, 801470c <__d2b+0x94>
 80146dc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80146e0:	4405      	add	r5, r0
 80146e2:	603d      	str	r5, [r7, #0]
 80146e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80146e8:	6030      	str	r0, [r6, #0]
 80146ea:	4620      	mov	r0, r4
 80146ec:	b003      	add	sp, #12
 80146ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80146f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80146f6:	e7d6      	b.n	80146a6 <__d2b+0x2e>
 80146f8:	6161      	str	r1, [r4, #20]
 80146fa:	e7e7      	b.n	80146cc <__d2b+0x54>
 80146fc:	a801      	add	r0, sp, #4
 80146fe:	f7ff fd61 	bl	80141c4 <__lo0bits>
 8014702:	9b01      	ldr	r3, [sp, #4]
 8014704:	6163      	str	r3, [r4, #20]
 8014706:	3020      	adds	r0, #32
 8014708:	2201      	movs	r2, #1
 801470a:	e7e5      	b.n	80146d8 <__d2b+0x60>
 801470c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014710:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014714:	6038      	str	r0, [r7, #0]
 8014716:	6918      	ldr	r0, [r3, #16]
 8014718:	f7ff fd34 	bl	8014184 <__hi0bits>
 801471c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014720:	e7e2      	b.n	80146e8 <__d2b+0x70>
 8014722:	bf00      	nop
 8014724:	08015ba0 	.word	0x08015ba0
 8014728:	08015bb1 	.word	0x08015bb1

0801472c <_malloc_usable_size_r>:
 801472c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014730:	1f18      	subs	r0, r3, #4
 8014732:	2b00      	cmp	r3, #0
 8014734:	bfbc      	itt	lt
 8014736:	580b      	ldrlt	r3, [r1, r0]
 8014738:	18c0      	addlt	r0, r0, r3
 801473a:	4770      	bx	lr

0801473c <__ssputs_r>:
 801473c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014740:	688e      	ldr	r6, [r1, #8]
 8014742:	461f      	mov	r7, r3
 8014744:	42be      	cmp	r6, r7
 8014746:	680b      	ldr	r3, [r1, #0]
 8014748:	4682      	mov	sl, r0
 801474a:	460c      	mov	r4, r1
 801474c:	4690      	mov	r8, r2
 801474e:	d82c      	bhi.n	80147aa <__ssputs_r+0x6e>
 8014750:	898a      	ldrh	r2, [r1, #12]
 8014752:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014756:	d026      	beq.n	80147a6 <__ssputs_r+0x6a>
 8014758:	6965      	ldr	r5, [r4, #20]
 801475a:	6909      	ldr	r1, [r1, #16]
 801475c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014760:	eba3 0901 	sub.w	r9, r3, r1
 8014764:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014768:	1c7b      	adds	r3, r7, #1
 801476a:	444b      	add	r3, r9
 801476c:	106d      	asrs	r5, r5, #1
 801476e:	429d      	cmp	r5, r3
 8014770:	bf38      	it	cc
 8014772:	461d      	movcc	r5, r3
 8014774:	0553      	lsls	r3, r2, #21
 8014776:	d527      	bpl.n	80147c8 <__ssputs_r+0x8c>
 8014778:	4629      	mov	r1, r5
 801477a:	f7ff fbcf 	bl	8013f1c <_malloc_r>
 801477e:	4606      	mov	r6, r0
 8014780:	b360      	cbz	r0, 80147dc <__ssputs_r+0xa0>
 8014782:	6921      	ldr	r1, [r4, #16]
 8014784:	464a      	mov	r2, r9
 8014786:	f7fe fcca 	bl	801311e <memcpy>
 801478a:	89a3      	ldrh	r3, [r4, #12]
 801478c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014794:	81a3      	strh	r3, [r4, #12]
 8014796:	6126      	str	r6, [r4, #16]
 8014798:	6165      	str	r5, [r4, #20]
 801479a:	444e      	add	r6, r9
 801479c:	eba5 0509 	sub.w	r5, r5, r9
 80147a0:	6026      	str	r6, [r4, #0]
 80147a2:	60a5      	str	r5, [r4, #8]
 80147a4:	463e      	mov	r6, r7
 80147a6:	42be      	cmp	r6, r7
 80147a8:	d900      	bls.n	80147ac <__ssputs_r+0x70>
 80147aa:	463e      	mov	r6, r7
 80147ac:	6820      	ldr	r0, [r4, #0]
 80147ae:	4632      	mov	r2, r6
 80147b0:	4641      	mov	r1, r8
 80147b2:	f000 fb6f 	bl	8014e94 <memmove>
 80147b6:	68a3      	ldr	r3, [r4, #8]
 80147b8:	1b9b      	subs	r3, r3, r6
 80147ba:	60a3      	str	r3, [r4, #8]
 80147bc:	6823      	ldr	r3, [r4, #0]
 80147be:	4433      	add	r3, r6
 80147c0:	6023      	str	r3, [r4, #0]
 80147c2:	2000      	movs	r0, #0
 80147c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147c8:	462a      	mov	r2, r5
 80147ca:	f7fd fd15 	bl	80121f8 <_realloc_r>
 80147ce:	4606      	mov	r6, r0
 80147d0:	2800      	cmp	r0, #0
 80147d2:	d1e0      	bne.n	8014796 <__ssputs_r+0x5a>
 80147d4:	6921      	ldr	r1, [r4, #16]
 80147d6:	4650      	mov	r0, sl
 80147d8:	f7ff fb2c 	bl	8013e34 <_free_r>
 80147dc:	230c      	movs	r3, #12
 80147de:	f8ca 3000 	str.w	r3, [sl]
 80147e2:	89a3      	ldrh	r3, [r4, #12]
 80147e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80147e8:	81a3      	strh	r3, [r4, #12]
 80147ea:	f04f 30ff 	mov.w	r0, #4294967295
 80147ee:	e7e9      	b.n	80147c4 <__ssputs_r+0x88>

080147f0 <_svfiprintf_r>:
 80147f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147f4:	4698      	mov	r8, r3
 80147f6:	898b      	ldrh	r3, [r1, #12]
 80147f8:	061b      	lsls	r3, r3, #24
 80147fa:	b09d      	sub	sp, #116	; 0x74
 80147fc:	4607      	mov	r7, r0
 80147fe:	460d      	mov	r5, r1
 8014800:	4614      	mov	r4, r2
 8014802:	d50e      	bpl.n	8014822 <_svfiprintf_r+0x32>
 8014804:	690b      	ldr	r3, [r1, #16]
 8014806:	b963      	cbnz	r3, 8014822 <_svfiprintf_r+0x32>
 8014808:	2140      	movs	r1, #64	; 0x40
 801480a:	f7ff fb87 	bl	8013f1c <_malloc_r>
 801480e:	6028      	str	r0, [r5, #0]
 8014810:	6128      	str	r0, [r5, #16]
 8014812:	b920      	cbnz	r0, 801481e <_svfiprintf_r+0x2e>
 8014814:	230c      	movs	r3, #12
 8014816:	603b      	str	r3, [r7, #0]
 8014818:	f04f 30ff 	mov.w	r0, #4294967295
 801481c:	e0d0      	b.n	80149c0 <_svfiprintf_r+0x1d0>
 801481e:	2340      	movs	r3, #64	; 0x40
 8014820:	616b      	str	r3, [r5, #20]
 8014822:	2300      	movs	r3, #0
 8014824:	9309      	str	r3, [sp, #36]	; 0x24
 8014826:	2320      	movs	r3, #32
 8014828:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801482c:	f8cd 800c 	str.w	r8, [sp, #12]
 8014830:	2330      	movs	r3, #48	; 0x30
 8014832:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80149d8 <_svfiprintf_r+0x1e8>
 8014836:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801483a:	f04f 0901 	mov.w	r9, #1
 801483e:	4623      	mov	r3, r4
 8014840:	469a      	mov	sl, r3
 8014842:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014846:	b10a      	cbz	r2, 801484c <_svfiprintf_r+0x5c>
 8014848:	2a25      	cmp	r2, #37	; 0x25
 801484a:	d1f9      	bne.n	8014840 <_svfiprintf_r+0x50>
 801484c:	ebba 0b04 	subs.w	fp, sl, r4
 8014850:	d00b      	beq.n	801486a <_svfiprintf_r+0x7a>
 8014852:	465b      	mov	r3, fp
 8014854:	4622      	mov	r2, r4
 8014856:	4629      	mov	r1, r5
 8014858:	4638      	mov	r0, r7
 801485a:	f7ff ff6f 	bl	801473c <__ssputs_r>
 801485e:	3001      	adds	r0, #1
 8014860:	f000 80a9 	beq.w	80149b6 <_svfiprintf_r+0x1c6>
 8014864:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014866:	445a      	add	r2, fp
 8014868:	9209      	str	r2, [sp, #36]	; 0x24
 801486a:	f89a 3000 	ldrb.w	r3, [sl]
 801486e:	2b00      	cmp	r3, #0
 8014870:	f000 80a1 	beq.w	80149b6 <_svfiprintf_r+0x1c6>
 8014874:	2300      	movs	r3, #0
 8014876:	f04f 32ff 	mov.w	r2, #4294967295
 801487a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801487e:	f10a 0a01 	add.w	sl, sl, #1
 8014882:	9304      	str	r3, [sp, #16]
 8014884:	9307      	str	r3, [sp, #28]
 8014886:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801488a:	931a      	str	r3, [sp, #104]	; 0x68
 801488c:	4654      	mov	r4, sl
 801488e:	2205      	movs	r2, #5
 8014890:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014894:	4850      	ldr	r0, [pc, #320]	; (80149d8 <_svfiprintf_r+0x1e8>)
 8014896:	f7eb fcab 	bl	80001f0 <memchr>
 801489a:	9a04      	ldr	r2, [sp, #16]
 801489c:	b9d8      	cbnz	r0, 80148d6 <_svfiprintf_r+0xe6>
 801489e:	06d0      	lsls	r0, r2, #27
 80148a0:	bf44      	itt	mi
 80148a2:	2320      	movmi	r3, #32
 80148a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80148a8:	0711      	lsls	r1, r2, #28
 80148aa:	bf44      	itt	mi
 80148ac:	232b      	movmi	r3, #43	; 0x2b
 80148ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80148b2:	f89a 3000 	ldrb.w	r3, [sl]
 80148b6:	2b2a      	cmp	r3, #42	; 0x2a
 80148b8:	d015      	beq.n	80148e6 <_svfiprintf_r+0xf6>
 80148ba:	9a07      	ldr	r2, [sp, #28]
 80148bc:	4654      	mov	r4, sl
 80148be:	2000      	movs	r0, #0
 80148c0:	f04f 0c0a 	mov.w	ip, #10
 80148c4:	4621      	mov	r1, r4
 80148c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80148ca:	3b30      	subs	r3, #48	; 0x30
 80148cc:	2b09      	cmp	r3, #9
 80148ce:	d94d      	bls.n	801496c <_svfiprintf_r+0x17c>
 80148d0:	b1b0      	cbz	r0, 8014900 <_svfiprintf_r+0x110>
 80148d2:	9207      	str	r2, [sp, #28]
 80148d4:	e014      	b.n	8014900 <_svfiprintf_r+0x110>
 80148d6:	eba0 0308 	sub.w	r3, r0, r8
 80148da:	fa09 f303 	lsl.w	r3, r9, r3
 80148de:	4313      	orrs	r3, r2
 80148e0:	9304      	str	r3, [sp, #16]
 80148e2:	46a2      	mov	sl, r4
 80148e4:	e7d2      	b.n	801488c <_svfiprintf_r+0x9c>
 80148e6:	9b03      	ldr	r3, [sp, #12]
 80148e8:	1d19      	adds	r1, r3, #4
 80148ea:	681b      	ldr	r3, [r3, #0]
 80148ec:	9103      	str	r1, [sp, #12]
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	bfbb      	ittet	lt
 80148f2:	425b      	neglt	r3, r3
 80148f4:	f042 0202 	orrlt.w	r2, r2, #2
 80148f8:	9307      	strge	r3, [sp, #28]
 80148fa:	9307      	strlt	r3, [sp, #28]
 80148fc:	bfb8      	it	lt
 80148fe:	9204      	strlt	r2, [sp, #16]
 8014900:	7823      	ldrb	r3, [r4, #0]
 8014902:	2b2e      	cmp	r3, #46	; 0x2e
 8014904:	d10c      	bne.n	8014920 <_svfiprintf_r+0x130>
 8014906:	7863      	ldrb	r3, [r4, #1]
 8014908:	2b2a      	cmp	r3, #42	; 0x2a
 801490a:	d134      	bne.n	8014976 <_svfiprintf_r+0x186>
 801490c:	9b03      	ldr	r3, [sp, #12]
 801490e:	1d1a      	adds	r2, r3, #4
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	9203      	str	r2, [sp, #12]
 8014914:	2b00      	cmp	r3, #0
 8014916:	bfb8      	it	lt
 8014918:	f04f 33ff 	movlt.w	r3, #4294967295
 801491c:	3402      	adds	r4, #2
 801491e:	9305      	str	r3, [sp, #20]
 8014920:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80149e8 <_svfiprintf_r+0x1f8>
 8014924:	7821      	ldrb	r1, [r4, #0]
 8014926:	2203      	movs	r2, #3
 8014928:	4650      	mov	r0, sl
 801492a:	f7eb fc61 	bl	80001f0 <memchr>
 801492e:	b138      	cbz	r0, 8014940 <_svfiprintf_r+0x150>
 8014930:	9b04      	ldr	r3, [sp, #16]
 8014932:	eba0 000a 	sub.w	r0, r0, sl
 8014936:	2240      	movs	r2, #64	; 0x40
 8014938:	4082      	lsls	r2, r0
 801493a:	4313      	orrs	r3, r2
 801493c:	3401      	adds	r4, #1
 801493e:	9304      	str	r3, [sp, #16]
 8014940:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014944:	4825      	ldr	r0, [pc, #148]	; (80149dc <_svfiprintf_r+0x1ec>)
 8014946:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801494a:	2206      	movs	r2, #6
 801494c:	f7eb fc50 	bl	80001f0 <memchr>
 8014950:	2800      	cmp	r0, #0
 8014952:	d038      	beq.n	80149c6 <_svfiprintf_r+0x1d6>
 8014954:	4b22      	ldr	r3, [pc, #136]	; (80149e0 <_svfiprintf_r+0x1f0>)
 8014956:	bb1b      	cbnz	r3, 80149a0 <_svfiprintf_r+0x1b0>
 8014958:	9b03      	ldr	r3, [sp, #12]
 801495a:	3307      	adds	r3, #7
 801495c:	f023 0307 	bic.w	r3, r3, #7
 8014960:	3308      	adds	r3, #8
 8014962:	9303      	str	r3, [sp, #12]
 8014964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014966:	4433      	add	r3, r6
 8014968:	9309      	str	r3, [sp, #36]	; 0x24
 801496a:	e768      	b.n	801483e <_svfiprintf_r+0x4e>
 801496c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014970:	460c      	mov	r4, r1
 8014972:	2001      	movs	r0, #1
 8014974:	e7a6      	b.n	80148c4 <_svfiprintf_r+0xd4>
 8014976:	2300      	movs	r3, #0
 8014978:	3401      	adds	r4, #1
 801497a:	9305      	str	r3, [sp, #20]
 801497c:	4619      	mov	r1, r3
 801497e:	f04f 0c0a 	mov.w	ip, #10
 8014982:	4620      	mov	r0, r4
 8014984:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014988:	3a30      	subs	r2, #48	; 0x30
 801498a:	2a09      	cmp	r2, #9
 801498c:	d903      	bls.n	8014996 <_svfiprintf_r+0x1a6>
 801498e:	2b00      	cmp	r3, #0
 8014990:	d0c6      	beq.n	8014920 <_svfiprintf_r+0x130>
 8014992:	9105      	str	r1, [sp, #20]
 8014994:	e7c4      	b.n	8014920 <_svfiprintf_r+0x130>
 8014996:	fb0c 2101 	mla	r1, ip, r1, r2
 801499a:	4604      	mov	r4, r0
 801499c:	2301      	movs	r3, #1
 801499e:	e7f0      	b.n	8014982 <_svfiprintf_r+0x192>
 80149a0:	ab03      	add	r3, sp, #12
 80149a2:	9300      	str	r3, [sp, #0]
 80149a4:	462a      	mov	r2, r5
 80149a6:	4b0f      	ldr	r3, [pc, #60]	; (80149e4 <_svfiprintf_r+0x1f4>)
 80149a8:	a904      	add	r1, sp, #16
 80149aa:	4638      	mov	r0, r7
 80149ac:	f7fd fcf4 	bl	8012398 <_printf_float>
 80149b0:	1c42      	adds	r2, r0, #1
 80149b2:	4606      	mov	r6, r0
 80149b4:	d1d6      	bne.n	8014964 <_svfiprintf_r+0x174>
 80149b6:	89ab      	ldrh	r3, [r5, #12]
 80149b8:	065b      	lsls	r3, r3, #25
 80149ba:	f53f af2d 	bmi.w	8014818 <_svfiprintf_r+0x28>
 80149be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80149c0:	b01d      	add	sp, #116	; 0x74
 80149c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149c6:	ab03      	add	r3, sp, #12
 80149c8:	9300      	str	r3, [sp, #0]
 80149ca:	462a      	mov	r2, r5
 80149cc:	4b05      	ldr	r3, [pc, #20]	; (80149e4 <_svfiprintf_r+0x1f4>)
 80149ce:	a904      	add	r1, sp, #16
 80149d0:	4638      	mov	r0, r7
 80149d2:	f7fd ff85 	bl	80128e0 <_printf_i>
 80149d6:	e7eb      	b.n	80149b0 <_svfiprintf_r+0x1c0>
 80149d8:	08015d0c 	.word	0x08015d0c
 80149dc:	08015d16 	.word	0x08015d16
 80149e0:	08012399 	.word	0x08012399
 80149e4:	0801473d 	.word	0x0801473d
 80149e8:	08015d12 	.word	0x08015d12

080149ec <__sfputc_r>:
 80149ec:	6893      	ldr	r3, [r2, #8]
 80149ee:	3b01      	subs	r3, #1
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	b410      	push	{r4}
 80149f4:	6093      	str	r3, [r2, #8]
 80149f6:	da08      	bge.n	8014a0a <__sfputc_r+0x1e>
 80149f8:	6994      	ldr	r4, [r2, #24]
 80149fa:	42a3      	cmp	r3, r4
 80149fc:	db01      	blt.n	8014a02 <__sfputc_r+0x16>
 80149fe:	290a      	cmp	r1, #10
 8014a00:	d103      	bne.n	8014a0a <__sfputc_r+0x1e>
 8014a02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014a06:	f7fe ba20 	b.w	8012e4a <__swbuf_r>
 8014a0a:	6813      	ldr	r3, [r2, #0]
 8014a0c:	1c58      	adds	r0, r3, #1
 8014a0e:	6010      	str	r0, [r2, #0]
 8014a10:	7019      	strb	r1, [r3, #0]
 8014a12:	4608      	mov	r0, r1
 8014a14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014a18:	4770      	bx	lr

08014a1a <__sfputs_r>:
 8014a1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a1c:	4606      	mov	r6, r0
 8014a1e:	460f      	mov	r7, r1
 8014a20:	4614      	mov	r4, r2
 8014a22:	18d5      	adds	r5, r2, r3
 8014a24:	42ac      	cmp	r4, r5
 8014a26:	d101      	bne.n	8014a2c <__sfputs_r+0x12>
 8014a28:	2000      	movs	r0, #0
 8014a2a:	e007      	b.n	8014a3c <__sfputs_r+0x22>
 8014a2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a30:	463a      	mov	r2, r7
 8014a32:	4630      	mov	r0, r6
 8014a34:	f7ff ffda 	bl	80149ec <__sfputc_r>
 8014a38:	1c43      	adds	r3, r0, #1
 8014a3a:	d1f3      	bne.n	8014a24 <__sfputs_r+0xa>
 8014a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014a40 <_vfiprintf_r>:
 8014a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a44:	460d      	mov	r5, r1
 8014a46:	b09d      	sub	sp, #116	; 0x74
 8014a48:	4614      	mov	r4, r2
 8014a4a:	4698      	mov	r8, r3
 8014a4c:	4606      	mov	r6, r0
 8014a4e:	b118      	cbz	r0, 8014a58 <_vfiprintf_r+0x18>
 8014a50:	6a03      	ldr	r3, [r0, #32]
 8014a52:	b90b      	cbnz	r3, 8014a58 <_vfiprintf_r+0x18>
 8014a54:	f7fe f8f2 	bl	8012c3c <__sinit>
 8014a58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014a5a:	07d9      	lsls	r1, r3, #31
 8014a5c:	d405      	bmi.n	8014a6a <_vfiprintf_r+0x2a>
 8014a5e:	89ab      	ldrh	r3, [r5, #12]
 8014a60:	059a      	lsls	r2, r3, #22
 8014a62:	d402      	bmi.n	8014a6a <_vfiprintf_r+0x2a>
 8014a64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014a66:	f7fe fb58 	bl	801311a <__retarget_lock_acquire_recursive>
 8014a6a:	89ab      	ldrh	r3, [r5, #12]
 8014a6c:	071b      	lsls	r3, r3, #28
 8014a6e:	d501      	bpl.n	8014a74 <_vfiprintf_r+0x34>
 8014a70:	692b      	ldr	r3, [r5, #16]
 8014a72:	b99b      	cbnz	r3, 8014a9c <_vfiprintf_r+0x5c>
 8014a74:	4629      	mov	r1, r5
 8014a76:	4630      	mov	r0, r6
 8014a78:	f7fe fa24 	bl	8012ec4 <__swsetup_r>
 8014a7c:	b170      	cbz	r0, 8014a9c <_vfiprintf_r+0x5c>
 8014a7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014a80:	07dc      	lsls	r4, r3, #31
 8014a82:	d504      	bpl.n	8014a8e <_vfiprintf_r+0x4e>
 8014a84:	f04f 30ff 	mov.w	r0, #4294967295
 8014a88:	b01d      	add	sp, #116	; 0x74
 8014a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a8e:	89ab      	ldrh	r3, [r5, #12]
 8014a90:	0598      	lsls	r0, r3, #22
 8014a92:	d4f7      	bmi.n	8014a84 <_vfiprintf_r+0x44>
 8014a94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014a96:	f7fe fb41 	bl	801311c <__retarget_lock_release_recursive>
 8014a9a:	e7f3      	b.n	8014a84 <_vfiprintf_r+0x44>
 8014a9c:	2300      	movs	r3, #0
 8014a9e:	9309      	str	r3, [sp, #36]	; 0x24
 8014aa0:	2320      	movs	r3, #32
 8014aa2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014aa6:	f8cd 800c 	str.w	r8, [sp, #12]
 8014aaa:	2330      	movs	r3, #48	; 0x30
 8014aac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8014c60 <_vfiprintf_r+0x220>
 8014ab0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014ab4:	f04f 0901 	mov.w	r9, #1
 8014ab8:	4623      	mov	r3, r4
 8014aba:	469a      	mov	sl, r3
 8014abc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014ac0:	b10a      	cbz	r2, 8014ac6 <_vfiprintf_r+0x86>
 8014ac2:	2a25      	cmp	r2, #37	; 0x25
 8014ac4:	d1f9      	bne.n	8014aba <_vfiprintf_r+0x7a>
 8014ac6:	ebba 0b04 	subs.w	fp, sl, r4
 8014aca:	d00b      	beq.n	8014ae4 <_vfiprintf_r+0xa4>
 8014acc:	465b      	mov	r3, fp
 8014ace:	4622      	mov	r2, r4
 8014ad0:	4629      	mov	r1, r5
 8014ad2:	4630      	mov	r0, r6
 8014ad4:	f7ff ffa1 	bl	8014a1a <__sfputs_r>
 8014ad8:	3001      	adds	r0, #1
 8014ada:	f000 80a9 	beq.w	8014c30 <_vfiprintf_r+0x1f0>
 8014ade:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014ae0:	445a      	add	r2, fp
 8014ae2:	9209      	str	r2, [sp, #36]	; 0x24
 8014ae4:	f89a 3000 	ldrb.w	r3, [sl]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	f000 80a1 	beq.w	8014c30 <_vfiprintf_r+0x1f0>
 8014aee:	2300      	movs	r3, #0
 8014af0:	f04f 32ff 	mov.w	r2, #4294967295
 8014af4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014af8:	f10a 0a01 	add.w	sl, sl, #1
 8014afc:	9304      	str	r3, [sp, #16]
 8014afe:	9307      	str	r3, [sp, #28]
 8014b00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014b04:	931a      	str	r3, [sp, #104]	; 0x68
 8014b06:	4654      	mov	r4, sl
 8014b08:	2205      	movs	r2, #5
 8014b0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b0e:	4854      	ldr	r0, [pc, #336]	; (8014c60 <_vfiprintf_r+0x220>)
 8014b10:	f7eb fb6e 	bl	80001f0 <memchr>
 8014b14:	9a04      	ldr	r2, [sp, #16]
 8014b16:	b9d8      	cbnz	r0, 8014b50 <_vfiprintf_r+0x110>
 8014b18:	06d1      	lsls	r1, r2, #27
 8014b1a:	bf44      	itt	mi
 8014b1c:	2320      	movmi	r3, #32
 8014b1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014b22:	0713      	lsls	r3, r2, #28
 8014b24:	bf44      	itt	mi
 8014b26:	232b      	movmi	r3, #43	; 0x2b
 8014b28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014b2c:	f89a 3000 	ldrb.w	r3, [sl]
 8014b30:	2b2a      	cmp	r3, #42	; 0x2a
 8014b32:	d015      	beq.n	8014b60 <_vfiprintf_r+0x120>
 8014b34:	9a07      	ldr	r2, [sp, #28]
 8014b36:	4654      	mov	r4, sl
 8014b38:	2000      	movs	r0, #0
 8014b3a:	f04f 0c0a 	mov.w	ip, #10
 8014b3e:	4621      	mov	r1, r4
 8014b40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014b44:	3b30      	subs	r3, #48	; 0x30
 8014b46:	2b09      	cmp	r3, #9
 8014b48:	d94d      	bls.n	8014be6 <_vfiprintf_r+0x1a6>
 8014b4a:	b1b0      	cbz	r0, 8014b7a <_vfiprintf_r+0x13a>
 8014b4c:	9207      	str	r2, [sp, #28]
 8014b4e:	e014      	b.n	8014b7a <_vfiprintf_r+0x13a>
 8014b50:	eba0 0308 	sub.w	r3, r0, r8
 8014b54:	fa09 f303 	lsl.w	r3, r9, r3
 8014b58:	4313      	orrs	r3, r2
 8014b5a:	9304      	str	r3, [sp, #16]
 8014b5c:	46a2      	mov	sl, r4
 8014b5e:	e7d2      	b.n	8014b06 <_vfiprintf_r+0xc6>
 8014b60:	9b03      	ldr	r3, [sp, #12]
 8014b62:	1d19      	adds	r1, r3, #4
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	9103      	str	r1, [sp, #12]
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	bfbb      	ittet	lt
 8014b6c:	425b      	neglt	r3, r3
 8014b6e:	f042 0202 	orrlt.w	r2, r2, #2
 8014b72:	9307      	strge	r3, [sp, #28]
 8014b74:	9307      	strlt	r3, [sp, #28]
 8014b76:	bfb8      	it	lt
 8014b78:	9204      	strlt	r2, [sp, #16]
 8014b7a:	7823      	ldrb	r3, [r4, #0]
 8014b7c:	2b2e      	cmp	r3, #46	; 0x2e
 8014b7e:	d10c      	bne.n	8014b9a <_vfiprintf_r+0x15a>
 8014b80:	7863      	ldrb	r3, [r4, #1]
 8014b82:	2b2a      	cmp	r3, #42	; 0x2a
 8014b84:	d134      	bne.n	8014bf0 <_vfiprintf_r+0x1b0>
 8014b86:	9b03      	ldr	r3, [sp, #12]
 8014b88:	1d1a      	adds	r2, r3, #4
 8014b8a:	681b      	ldr	r3, [r3, #0]
 8014b8c:	9203      	str	r2, [sp, #12]
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	bfb8      	it	lt
 8014b92:	f04f 33ff 	movlt.w	r3, #4294967295
 8014b96:	3402      	adds	r4, #2
 8014b98:	9305      	str	r3, [sp, #20]
 8014b9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8014c70 <_vfiprintf_r+0x230>
 8014b9e:	7821      	ldrb	r1, [r4, #0]
 8014ba0:	2203      	movs	r2, #3
 8014ba2:	4650      	mov	r0, sl
 8014ba4:	f7eb fb24 	bl	80001f0 <memchr>
 8014ba8:	b138      	cbz	r0, 8014bba <_vfiprintf_r+0x17a>
 8014baa:	9b04      	ldr	r3, [sp, #16]
 8014bac:	eba0 000a 	sub.w	r0, r0, sl
 8014bb0:	2240      	movs	r2, #64	; 0x40
 8014bb2:	4082      	lsls	r2, r0
 8014bb4:	4313      	orrs	r3, r2
 8014bb6:	3401      	adds	r4, #1
 8014bb8:	9304      	str	r3, [sp, #16]
 8014bba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014bbe:	4829      	ldr	r0, [pc, #164]	; (8014c64 <_vfiprintf_r+0x224>)
 8014bc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014bc4:	2206      	movs	r2, #6
 8014bc6:	f7eb fb13 	bl	80001f0 <memchr>
 8014bca:	2800      	cmp	r0, #0
 8014bcc:	d03f      	beq.n	8014c4e <_vfiprintf_r+0x20e>
 8014bce:	4b26      	ldr	r3, [pc, #152]	; (8014c68 <_vfiprintf_r+0x228>)
 8014bd0:	bb1b      	cbnz	r3, 8014c1a <_vfiprintf_r+0x1da>
 8014bd2:	9b03      	ldr	r3, [sp, #12]
 8014bd4:	3307      	adds	r3, #7
 8014bd6:	f023 0307 	bic.w	r3, r3, #7
 8014bda:	3308      	adds	r3, #8
 8014bdc:	9303      	str	r3, [sp, #12]
 8014bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014be0:	443b      	add	r3, r7
 8014be2:	9309      	str	r3, [sp, #36]	; 0x24
 8014be4:	e768      	b.n	8014ab8 <_vfiprintf_r+0x78>
 8014be6:	fb0c 3202 	mla	r2, ip, r2, r3
 8014bea:	460c      	mov	r4, r1
 8014bec:	2001      	movs	r0, #1
 8014bee:	e7a6      	b.n	8014b3e <_vfiprintf_r+0xfe>
 8014bf0:	2300      	movs	r3, #0
 8014bf2:	3401      	adds	r4, #1
 8014bf4:	9305      	str	r3, [sp, #20]
 8014bf6:	4619      	mov	r1, r3
 8014bf8:	f04f 0c0a 	mov.w	ip, #10
 8014bfc:	4620      	mov	r0, r4
 8014bfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014c02:	3a30      	subs	r2, #48	; 0x30
 8014c04:	2a09      	cmp	r2, #9
 8014c06:	d903      	bls.n	8014c10 <_vfiprintf_r+0x1d0>
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d0c6      	beq.n	8014b9a <_vfiprintf_r+0x15a>
 8014c0c:	9105      	str	r1, [sp, #20]
 8014c0e:	e7c4      	b.n	8014b9a <_vfiprintf_r+0x15a>
 8014c10:	fb0c 2101 	mla	r1, ip, r1, r2
 8014c14:	4604      	mov	r4, r0
 8014c16:	2301      	movs	r3, #1
 8014c18:	e7f0      	b.n	8014bfc <_vfiprintf_r+0x1bc>
 8014c1a:	ab03      	add	r3, sp, #12
 8014c1c:	9300      	str	r3, [sp, #0]
 8014c1e:	462a      	mov	r2, r5
 8014c20:	4b12      	ldr	r3, [pc, #72]	; (8014c6c <_vfiprintf_r+0x22c>)
 8014c22:	a904      	add	r1, sp, #16
 8014c24:	4630      	mov	r0, r6
 8014c26:	f7fd fbb7 	bl	8012398 <_printf_float>
 8014c2a:	4607      	mov	r7, r0
 8014c2c:	1c78      	adds	r0, r7, #1
 8014c2e:	d1d6      	bne.n	8014bde <_vfiprintf_r+0x19e>
 8014c30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014c32:	07d9      	lsls	r1, r3, #31
 8014c34:	d405      	bmi.n	8014c42 <_vfiprintf_r+0x202>
 8014c36:	89ab      	ldrh	r3, [r5, #12]
 8014c38:	059a      	lsls	r2, r3, #22
 8014c3a:	d402      	bmi.n	8014c42 <_vfiprintf_r+0x202>
 8014c3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014c3e:	f7fe fa6d 	bl	801311c <__retarget_lock_release_recursive>
 8014c42:	89ab      	ldrh	r3, [r5, #12]
 8014c44:	065b      	lsls	r3, r3, #25
 8014c46:	f53f af1d 	bmi.w	8014a84 <_vfiprintf_r+0x44>
 8014c4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014c4c:	e71c      	b.n	8014a88 <_vfiprintf_r+0x48>
 8014c4e:	ab03      	add	r3, sp, #12
 8014c50:	9300      	str	r3, [sp, #0]
 8014c52:	462a      	mov	r2, r5
 8014c54:	4b05      	ldr	r3, [pc, #20]	; (8014c6c <_vfiprintf_r+0x22c>)
 8014c56:	a904      	add	r1, sp, #16
 8014c58:	4630      	mov	r0, r6
 8014c5a:	f7fd fe41 	bl	80128e0 <_printf_i>
 8014c5e:	e7e4      	b.n	8014c2a <_vfiprintf_r+0x1ea>
 8014c60:	08015d0c 	.word	0x08015d0c
 8014c64:	08015d16 	.word	0x08015d16
 8014c68:	08012399 	.word	0x08012399
 8014c6c:	08014a1b 	.word	0x08014a1b
 8014c70:	08015d12 	.word	0x08015d12

08014c74 <__sflush_r>:
 8014c74:	898a      	ldrh	r2, [r1, #12]
 8014c76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c7a:	4605      	mov	r5, r0
 8014c7c:	0710      	lsls	r0, r2, #28
 8014c7e:	460c      	mov	r4, r1
 8014c80:	d458      	bmi.n	8014d34 <__sflush_r+0xc0>
 8014c82:	684b      	ldr	r3, [r1, #4]
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	dc05      	bgt.n	8014c94 <__sflush_r+0x20>
 8014c88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	dc02      	bgt.n	8014c94 <__sflush_r+0x20>
 8014c8e:	2000      	movs	r0, #0
 8014c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014c96:	2e00      	cmp	r6, #0
 8014c98:	d0f9      	beq.n	8014c8e <__sflush_r+0x1a>
 8014c9a:	2300      	movs	r3, #0
 8014c9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014ca0:	682f      	ldr	r7, [r5, #0]
 8014ca2:	6a21      	ldr	r1, [r4, #32]
 8014ca4:	602b      	str	r3, [r5, #0]
 8014ca6:	d032      	beq.n	8014d0e <__sflush_r+0x9a>
 8014ca8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014caa:	89a3      	ldrh	r3, [r4, #12]
 8014cac:	075a      	lsls	r2, r3, #29
 8014cae:	d505      	bpl.n	8014cbc <__sflush_r+0x48>
 8014cb0:	6863      	ldr	r3, [r4, #4]
 8014cb2:	1ac0      	subs	r0, r0, r3
 8014cb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014cb6:	b10b      	cbz	r3, 8014cbc <__sflush_r+0x48>
 8014cb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014cba:	1ac0      	subs	r0, r0, r3
 8014cbc:	2300      	movs	r3, #0
 8014cbe:	4602      	mov	r2, r0
 8014cc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014cc2:	6a21      	ldr	r1, [r4, #32]
 8014cc4:	4628      	mov	r0, r5
 8014cc6:	47b0      	blx	r6
 8014cc8:	1c43      	adds	r3, r0, #1
 8014cca:	89a3      	ldrh	r3, [r4, #12]
 8014ccc:	d106      	bne.n	8014cdc <__sflush_r+0x68>
 8014cce:	6829      	ldr	r1, [r5, #0]
 8014cd0:	291d      	cmp	r1, #29
 8014cd2:	d82b      	bhi.n	8014d2c <__sflush_r+0xb8>
 8014cd4:	4a29      	ldr	r2, [pc, #164]	; (8014d7c <__sflush_r+0x108>)
 8014cd6:	410a      	asrs	r2, r1
 8014cd8:	07d6      	lsls	r6, r2, #31
 8014cda:	d427      	bmi.n	8014d2c <__sflush_r+0xb8>
 8014cdc:	2200      	movs	r2, #0
 8014cde:	6062      	str	r2, [r4, #4]
 8014ce0:	04d9      	lsls	r1, r3, #19
 8014ce2:	6922      	ldr	r2, [r4, #16]
 8014ce4:	6022      	str	r2, [r4, #0]
 8014ce6:	d504      	bpl.n	8014cf2 <__sflush_r+0x7e>
 8014ce8:	1c42      	adds	r2, r0, #1
 8014cea:	d101      	bne.n	8014cf0 <__sflush_r+0x7c>
 8014cec:	682b      	ldr	r3, [r5, #0]
 8014cee:	b903      	cbnz	r3, 8014cf2 <__sflush_r+0x7e>
 8014cf0:	6560      	str	r0, [r4, #84]	; 0x54
 8014cf2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014cf4:	602f      	str	r7, [r5, #0]
 8014cf6:	2900      	cmp	r1, #0
 8014cf8:	d0c9      	beq.n	8014c8e <__sflush_r+0x1a>
 8014cfa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014cfe:	4299      	cmp	r1, r3
 8014d00:	d002      	beq.n	8014d08 <__sflush_r+0x94>
 8014d02:	4628      	mov	r0, r5
 8014d04:	f7ff f896 	bl	8013e34 <_free_r>
 8014d08:	2000      	movs	r0, #0
 8014d0a:	6360      	str	r0, [r4, #52]	; 0x34
 8014d0c:	e7c0      	b.n	8014c90 <__sflush_r+0x1c>
 8014d0e:	2301      	movs	r3, #1
 8014d10:	4628      	mov	r0, r5
 8014d12:	47b0      	blx	r6
 8014d14:	1c41      	adds	r1, r0, #1
 8014d16:	d1c8      	bne.n	8014caa <__sflush_r+0x36>
 8014d18:	682b      	ldr	r3, [r5, #0]
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d0c5      	beq.n	8014caa <__sflush_r+0x36>
 8014d1e:	2b1d      	cmp	r3, #29
 8014d20:	d001      	beq.n	8014d26 <__sflush_r+0xb2>
 8014d22:	2b16      	cmp	r3, #22
 8014d24:	d101      	bne.n	8014d2a <__sflush_r+0xb6>
 8014d26:	602f      	str	r7, [r5, #0]
 8014d28:	e7b1      	b.n	8014c8e <__sflush_r+0x1a>
 8014d2a:	89a3      	ldrh	r3, [r4, #12]
 8014d2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d30:	81a3      	strh	r3, [r4, #12]
 8014d32:	e7ad      	b.n	8014c90 <__sflush_r+0x1c>
 8014d34:	690f      	ldr	r7, [r1, #16]
 8014d36:	2f00      	cmp	r7, #0
 8014d38:	d0a9      	beq.n	8014c8e <__sflush_r+0x1a>
 8014d3a:	0793      	lsls	r3, r2, #30
 8014d3c:	680e      	ldr	r6, [r1, #0]
 8014d3e:	bf08      	it	eq
 8014d40:	694b      	ldreq	r3, [r1, #20]
 8014d42:	600f      	str	r7, [r1, #0]
 8014d44:	bf18      	it	ne
 8014d46:	2300      	movne	r3, #0
 8014d48:	eba6 0807 	sub.w	r8, r6, r7
 8014d4c:	608b      	str	r3, [r1, #8]
 8014d4e:	f1b8 0f00 	cmp.w	r8, #0
 8014d52:	dd9c      	ble.n	8014c8e <__sflush_r+0x1a>
 8014d54:	6a21      	ldr	r1, [r4, #32]
 8014d56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014d58:	4643      	mov	r3, r8
 8014d5a:	463a      	mov	r2, r7
 8014d5c:	4628      	mov	r0, r5
 8014d5e:	47b0      	blx	r6
 8014d60:	2800      	cmp	r0, #0
 8014d62:	dc06      	bgt.n	8014d72 <__sflush_r+0xfe>
 8014d64:	89a3      	ldrh	r3, [r4, #12]
 8014d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d6a:	81a3      	strh	r3, [r4, #12]
 8014d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8014d70:	e78e      	b.n	8014c90 <__sflush_r+0x1c>
 8014d72:	4407      	add	r7, r0
 8014d74:	eba8 0800 	sub.w	r8, r8, r0
 8014d78:	e7e9      	b.n	8014d4e <__sflush_r+0xda>
 8014d7a:	bf00      	nop
 8014d7c:	dfbffffe 	.word	0xdfbffffe

08014d80 <_fflush_r>:
 8014d80:	b538      	push	{r3, r4, r5, lr}
 8014d82:	690b      	ldr	r3, [r1, #16]
 8014d84:	4605      	mov	r5, r0
 8014d86:	460c      	mov	r4, r1
 8014d88:	b913      	cbnz	r3, 8014d90 <_fflush_r+0x10>
 8014d8a:	2500      	movs	r5, #0
 8014d8c:	4628      	mov	r0, r5
 8014d8e:	bd38      	pop	{r3, r4, r5, pc}
 8014d90:	b118      	cbz	r0, 8014d9a <_fflush_r+0x1a>
 8014d92:	6a03      	ldr	r3, [r0, #32]
 8014d94:	b90b      	cbnz	r3, 8014d9a <_fflush_r+0x1a>
 8014d96:	f7fd ff51 	bl	8012c3c <__sinit>
 8014d9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d0f3      	beq.n	8014d8a <_fflush_r+0xa>
 8014da2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014da4:	07d0      	lsls	r0, r2, #31
 8014da6:	d404      	bmi.n	8014db2 <_fflush_r+0x32>
 8014da8:	0599      	lsls	r1, r3, #22
 8014daa:	d402      	bmi.n	8014db2 <_fflush_r+0x32>
 8014dac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014dae:	f7fe f9b4 	bl	801311a <__retarget_lock_acquire_recursive>
 8014db2:	4628      	mov	r0, r5
 8014db4:	4621      	mov	r1, r4
 8014db6:	f7ff ff5d 	bl	8014c74 <__sflush_r>
 8014dba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014dbc:	07da      	lsls	r2, r3, #31
 8014dbe:	4605      	mov	r5, r0
 8014dc0:	d4e4      	bmi.n	8014d8c <_fflush_r+0xc>
 8014dc2:	89a3      	ldrh	r3, [r4, #12]
 8014dc4:	059b      	lsls	r3, r3, #22
 8014dc6:	d4e1      	bmi.n	8014d8c <_fflush_r+0xc>
 8014dc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014dca:	f7fe f9a7 	bl	801311c <__retarget_lock_release_recursive>
 8014dce:	e7dd      	b.n	8014d8c <_fflush_r+0xc>

08014dd0 <__swhatbuf_r>:
 8014dd0:	b570      	push	{r4, r5, r6, lr}
 8014dd2:	460c      	mov	r4, r1
 8014dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014dd8:	2900      	cmp	r1, #0
 8014dda:	b096      	sub	sp, #88	; 0x58
 8014ddc:	4615      	mov	r5, r2
 8014dde:	461e      	mov	r6, r3
 8014de0:	da0d      	bge.n	8014dfe <__swhatbuf_r+0x2e>
 8014de2:	89a3      	ldrh	r3, [r4, #12]
 8014de4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8014de8:	f04f 0100 	mov.w	r1, #0
 8014dec:	bf0c      	ite	eq
 8014dee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8014df2:	2340      	movne	r3, #64	; 0x40
 8014df4:	2000      	movs	r0, #0
 8014df6:	6031      	str	r1, [r6, #0]
 8014df8:	602b      	str	r3, [r5, #0]
 8014dfa:	b016      	add	sp, #88	; 0x58
 8014dfc:	bd70      	pop	{r4, r5, r6, pc}
 8014dfe:	466a      	mov	r2, sp
 8014e00:	f000 f862 	bl	8014ec8 <_fstat_r>
 8014e04:	2800      	cmp	r0, #0
 8014e06:	dbec      	blt.n	8014de2 <__swhatbuf_r+0x12>
 8014e08:	9901      	ldr	r1, [sp, #4]
 8014e0a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8014e0e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8014e12:	4259      	negs	r1, r3
 8014e14:	4159      	adcs	r1, r3
 8014e16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014e1a:	e7eb      	b.n	8014df4 <__swhatbuf_r+0x24>

08014e1c <__smakebuf_r>:
 8014e1c:	898b      	ldrh	r3, [r1, #12]
 8014e1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014e20:	079d      	lsls	r5, r3, #30
 8014e22:	4606      	mov	r6, r0
 8014e24:	460c      	mov	r4, r1
 8014e26:	d507      	bpl.n	8014e38 <__smakebuf_r+0x1c>
 8014e28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014e2c:	6023      	str	r3, [r4, #0]
 8014e2e:	6123      	str	r3, [r4, #16]
 8014e30:	2301      	movs	r3, #1
 8014e32:	6163      	str	r3, [r4, #20]
 8014e34:	b002      	add	sp, #8
 8014e36:	bd70      	pop	{r4, r5, r6, pc}
 8014e38:	ab01      	add	r3, sp, #4
 8014e3a:	466a      	mov	r2, sp
 8014e3c:	f7ff ffc8 	bl	8014dd0 <__swhatbuf_r>
 8014e40:	9900      	ldr	r1, [sp, #0]
 8014e42:	4605      	mov	r5, r0
 8014e44:	4630      	mov	r0, r6
 8014e46:	f7ff f869 	bl	8013f1c <_malloc_r>
 8014e4a:	b948      	cbnz	r0, 8014e60 <__smakebuf_r+0x44>
 8014e4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e50:	059a      	lsls	r2, r3, #22
 8014e52:	d4ef      	bmi.n	8014e34 <__smakebuf_r+0x18>
 8014e54:	f023 0303 	bic.w	r3, r3, #3
 8014e58:	f043 0302 	orr.w	r3, r3, #2
 8014e5c:	81a3      	strh	r3, [r4, #12]
 8014e5e:	e7e3      	b.n	8014e28 <__smakebuf_r+0xc>
 8014e60:	89a3      	ldrh	r3, [r4, #12]
 8014e62:	6020      	str	r0, [r4, #0]
 8014e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014e68:	81a3      	strh	r3, [r4, #12]
 8014e6a:	9b00      	ldr	r3, [sp, #0]
 8014e6c:	6163      	str	r3, [r4, #20]
 8014e6e:	9b01      	ldr	r3, [sp, #4]
 8014e70:	6120      	str	r0, [r4, #16]
 8014e72:	b15b      	cbz	r3, 8014e8c <__smakebuf_r+0x70>
 8014e74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014e78:	4630      	mov	r0, r6
 8014e7a:	f000 f837 	bl	8014eec <_isatty_r>
 8014e7e:	b128      	cbz	r0, 8014e8c <__smakebuf_r+0x70>
 8014e80:	89a3      	ldrh	r3, [r4, #12]
 8014e82:	f023 0303 	bic.w	r3, r3, #3
 8014e86:	f043 0301 	orr.w	r3, r3, #1
 8014e8a:	81a3      	strh	r3, [r4, #12]
 8014e8c:	89a3      	ldrh	r3, [r4, #12]
 8014e8e:	431d      	orrs	r5, r3
 8014e90:	81a5      	strh	r5, [r4, #12]
 8014e92:	e7cf      	b.n	8014e34 <__smakebuf_r+0x18>

08014e94 <memmove>:
 8014e94:	4288      	cmp	r0, r1
 8014e96:	b510      	push	{r4, lr}
 8014e98:	eb01 0402 	add.w	r4, r1, r2
 8014e9c:	d902      	bls.n	8014ea4 <memmove+0x10>
 8014e9e:	4284      	cmp	r4, r0
 8014ea0:	4623      	mov	r3, r4
 8014ea2:	d807      	bhi.n	8014eb4 <memmove+0x20>
 8014ea4:	1e43      	subs	r3, r0, #1
 8014ea6:	42a1      	cmp	r1, r4
 8014ea8:	d008      	beq.n	8014ebc <memmove+0x28>
 8014eaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014eae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014eb2:	e7f8      	b.n	8014ea6 <memmove+0x12>
 8014eb4:	4402      	add	r2, r0
 8014eb6:	4601      	mov	r1, r0
 8014eb8:	428a      	cmp	r2, r1
 8014eba:	d100      	bne.n	8014ebe <memmove+0x2a>
 8014ebc:	bd10      	pop	{r4, pc}
 8014ebe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014ec2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014ec6:	e7f7      	b.n	8014eb8 <memmove+0x24>

08014ec8 <_fstat_r>:
 8014ec8:	b538      	push	{r3, r4, r5, lr}
 8014eca:	4d07      	ldr	r5, [pc, #28]	; (8014ee8 <_fstat_r+0x20>)
 8014ecc:	2300      	movs	r3, #0
 8014ece:	4604      	mov	r4, r0
 8014ed0:	4608      	mov	r0, r1
 8014ed2:	4611      	mov	r1, r2
 8014ed4:	602b      	str	r3, [r5, #0]
 8014ed6:	f7f3 fcde 	bl	8008896 <_fstat>
 8014eda:	1c43      	adds	r3, r0, #1
 8014edc:	d102      	bne.n	8014ee4 <_fstat_r+0x1c>
 8014ede:	682b      	ldr	r3, [r5, #0]
 8014ee0:	b103      	cbz	r3, 8014ee4 <_fstat_r+0x1c>
 8014ee2:	6023      	str	r3, [r4, #0]
 8014ee4:	bd38      	pop	{r3, r4, r5, pc}
 8014ee6:	bf00      	nop
 8014ee8:	200081e4 	.word	0x200081e4

08014eec <_isatty_r>:
 8014eec:	b538      	push	{r3, r4, r5, lr}
 8014eee:	4d06      	ldr	r5, [pc, #24]	; (8014f08 <_isatty_r+0x1c>)
 8014ef0:	2300      	movs	r3, #0
 8014ef2:	4604      	mov	r4, r0
 8014ef4:	4608      	mov	r0, r1
 8014ef6:	602b      	str	r3, [r5, #0]
 8014ef8:	f7f3 fcdd 	bl	80088b6 <_isatty>
 8014efc:	1c43      	adds	r3, r0, #1
 8014efe:	d102      	bne.n	8014f06 <_isatty_r+0x1a>
 8014f00:	682b      	ldr	r3, [r5, #0]
 8014f02:	b103      	cbz	r3, 8014f06 <_isatty_r+0x1a>
 8014f04:	6023      	str	r3, [r4, #0]
 8014f06:	bd38      	pop	{r3, r4, r5, pc}
 8014f08:	200081e4 	.word	0x200081e4

08014f0c <_sbrk_r>:
 8014f0c:	b538      	push	{r3, r4, r5, lr}
 8014f0e:	4d06      	ldr	r5, [pc, #24]	; (8014f28 <_sbrk_r+0x1c>)
 8014f10:	2300      	movs	r3, #0
 8014f12:	4604      	mov	r4, r0
 8014f14:	4608      	mov	r0, r1
 8014f16:	602b      	str	r3, [r5, #0]
 8014f18:	f7f3 fce6 	bl	80088e8 <_sbrk>
 8014f1c:	1c43      	adds	r3, r0, #1
 8014f1e:	d102      	bne.n	8014f26 <_sbrk_r+0x1a>
 8014f20:	682b      	ldr	r3, [r5, #0]
 8014f22:	b103      	cbz	r3, 8014f26 <_sbrk_r+0x1a>
 8014f24:	6023      	str	r3, [r4, #0]
 8014f26:	bd38      	pop	{r3, r4, r5, pc}
 8014f28:	200081e4 	.word	0x200081e4

08014f2c <__assert_func>:
 8014f2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014f2e:	4614      	mov	r4, r2
 8014f30:	461a      	mov	r2, r3
 8014f32:	4b09      	ldr	r3, [pc, #36]	; (8014f58 <__assert_func+0x2c>)
 8014f34:	681b      	ldr	r3, [r3, #0]
 8014f36:	4605      	mov	r5, r0
 8014f38:	68d8      	ldr	r0, [r3, #12]
 8014f3a:	b14c      	cbz	r4, 8014f50 <__assert_func+0x24>
 8014f3c:	4b07      	ldr	r3, [pc, #28]	; (8014f5c <__assert_func+0x30>)
 8014f3e:	9100      	str	r1, [sp, #0]
 8014f40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014f44:	4906      	ldr	r1, [pc, #24]	; (8014f60 <__assert_func+0x34>)
 8014f46:	462b      	mov	r3, r5
 8014f48:	f000 f844 	bl	8014fd4 <fiprintf>
 8014f4c:	f000 f854 	bl	8014ff8 <abort>
 8014f50:	4b04      	ldr	r3, [pc, #16]	; (8014f64 <__assert_func+0x38>)
 8014f52:	461c      	mov	r4, r3
 8014f54:	e7f3      	b.n	8014f3e <__assert_func+0x12>
 8014f56:	bf00      	nop
 8014f58:	20000088 	.word	0x20000088
 8014f5c:	08015d27 	.word	0x08015d27
 8014f60:	08015d34 	.word	0x08015d34
 8014f64:	08015d62 	.word	0x08015d62

08014f68 <_calloc_r>:
 8014f68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014f6a:	fba1 2402 	umull	r2, r4, r1, r2
 8014f6e:	b94c      	cbnz	r4, 8014f84 <_calloc_r+0x1c>
 8014f70:	4611      	mov	r1, r2
 8014f72:	9201      	str	r2, [sp, #4]
 8014f74:	f7fe ffd2 	bl	8013f1c <_malloc_r>
 8014f78:	9a01      	ldr	r2, [sp, #4]
 8014f7a:	4605      	mov	r5, r0
 8014f7c:	b930      	cbnz	r0, 8014f8c <_calloc_r+0x24>
 8014f7e:	4628      	mov	r0, r5
 8014f80:	b003      	add	sp, #12
 8014f82:	bd30      	pop	{r4, r5, pc}
 8014f84:	220c      	movs	r2, #12
 8014f86:	6002      	str	r2, [r0, #0]
 8014f88:	2500      	movs	r5, #0
 8014f8a:	e7f8      	b.n	8014f7e <_calloc_r+0x16>
 8014f8c:	4621      	mov	r1, r4
 8014f8e:	f7fd fff1 	bl	8012f74 <memset>
 8014f92:	e7f4      	b.n	8014f7e <_calloc_r+0x16>

08014f94 <__ascii_mbtowc>:
 8014f94:	b082      	sub	sp, #8
 8014f96:	b901      	cbnz	r1, 8014f9a <__ascii_mbtowc+0x6>
 8014f98:	a901      	add	r1, sp, #4
 8014f9a:	b142      	cbz	r2, 8014fae <__ascii_mbtowc+0x1a>
 8014f9c:	b14b      	cbz	r3, 8014fb2 <__ascii_mbtowc+0x1e>
 8014f9e:	7813      	ldrb	r3, [r2, #0]
 8014fa0:	600b      	str	r3, [r1, #0]
 8014fa2:	7812      	ldrb	r2, [r2, #0]
 8014fa4:	1e10      	subs	r0, r2, #0
 8014fa6:	bf18      	it	ne
 8014fa8:	2001      	movne	r0, #1
 8014faa:	b002      	add	sp, #8
 8014fac:	4770      	bx	lr
 8014fae:	4610      	mov	r0, r2
 8014fb0:	e7fb      	b.n	8014faa <__ascii_mbtowc+0x16>
 8014fb2:	f06f 0001 	mvn.w	r0, #1
 8014fb6:	e7f8      	b.n	8014faa <__ascii_mbtowc+0x16>

08014fb8 <__ascii_wctomb>:
 8014fb8:	b149      	cbz	r1, 8014fce <__ascii_wctomb+0x16>
 8014fba:	2aff      	cmp	r2, #255	; 0xff
 8014fbc:	bf85      	ittet	hi
 8014fbe:	238a      	movhi	r3, #138	; 0x8a
 8014fc0:	6003      	strhi	r3, [r0, #0]
 8014fc2:	700a      	strbls	r2, [r1, #0]
 8014fc4:	f04f 30ff 	movhi.w	r0, #4294967295
 8014fc8:	bf98      	it	ls
 8014fca:	2001      	movls	r0, #1
 8014fcc:	4770      	bx	lr
 8014fce:	4608      	mov	r0, r1
 8014fd0:	4770      	bx	lr
	...

08014fd4 <fiprintf>:
 8014fd4:	b40e      	push	{r1, r2, r3}
 8014fd6:	b503      	push	{r0, r1, lr}
 8014fd8:	4601      	mov	r1, r0
 8014fda:	ab03      	add	r3, sp, #12
 8014fdc:	4805      	ldr	r0, [pc, #20]	; (8014ff4 <fiprintf+0x20>)
 8014fde:	f853 2b04 	ldr.w	r2, [r3], #4
 8014fe2:	6800      	ldr	r0, [r0, #0]
 8014fe4:	9301      	str	r3, [sp, #4]
 8014fe6:	f7ff fd2b 	bl	8014a40 <_vfiprintf_r>
 8014fea:	b002      	add	sp, #8
 8014fec:	f85d eb04 	ldr.w	lr, [sp], #4
 8014ff0:	b003      	add	sp, #12
 8014ff2:	4770      	bx	lr
 8014ff4:	20000088 	.word	0x20000088

08014ff8 <abort>:
 8014ff8:	b508      	push	{r3, lr}
 8014ffa:	2006      	movs	r0, #6
 8014ffc:	f000 f82c 	bl	8015058 <raise>
 8015000:	2001      	movs	r0, #1
 8015002:	f7f3 fbf9 	bl	80087f8 <_exit>

08015006 <_raise_r>:
 8015006:	291f      	cmp	r1, #31
 8015008:	b538      	push	{r3, r4, r5, lr}
 801500a:	4604      	mov	r4, r0
 801500c:	460d      	mov	r5, r1
 801500e:	d904      	bls.n	801501a <_raise_r+0x14>
 8015010:	2316      	movs	r3, #22
 8015012:	6003      	str	r3, [r0, #0]
 8015014:	f04f 30ff 	mov.w	r0, #4294967295
 8015018:	bd38      	pop	{r3, r4, r5, pc}
 801501a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801501c:	b112      	cbz	r2, 8015024 <_raise_r+0x1e>
 801501e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015022:	b94b      	cbnz	r3, 8015038 <_raise_r+0x32>
 8015024:	4620      	mov	r0, r4
 8015026:	f000 f831 	bl	801508c <_getpid_r>
 801502a:	462a      	mov	r2, r5
 801502c:	4601      	mov	r1, r0
 801502e:	4620      	mov	r0, r4
 8015030:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015034:	f000 b818 	b.w	8015068 <_kill_r>
 8015038:	2b01      	cmp	r3, #1
 801503a:	d00a      	beq.n	8015052 <_raise_r+0x4c>
 801503c:	1c59      	adds	r1, r3, #1
 801503e:	d103      	bne.n	8015048 <_raise_r+0x42>
 8015040:	2316      	movs	r3, #22
 8015042:	6003      	str	r3, [r0, #0]
 8015044:	2001      	movs	r0, #1
 8015046:	e7e7      	b.n	8015018 <_raise_r+0x12>
 8015048:	2400      	movs	r4, #0
 801504a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801504e:	4628      	mov	r0, r5
 8015050:	4798      	blx	r3
 8015052:	2000      	movs	r0, #0
 8015054:	e7e0      	b.n	8015018 <_raise_r+0x12>
	...

08015058 <raise>:
 8015058:	4b02      	ldr	r3, [pc, #8]	; (8015064 <raise+0xc>)
 801505a:	4601      	mov	r1, r0
 801505c:	6818      	ldr	r0, [r3, #0]
 801505e:	f7ff bfd2 	b.w	8015006 <_raise_r>
 8015062:	bf00      	nop
 8015064:	20000088 	.word	0x20000088

08015068 <_kill_r>:
 8015068:	b538      	push	{r3, r4, r5, lr}
 801506a:	4d07      	ldr	r5, [pc, #28]	; (8015088 <_kill_r+0x20>)
 801506c:	2300      	movs	r3, #0
 801506e:	4604      	mov	r4, r0
 8015070:	4608      	mov	r0, r1
 8015072:	4611      	mov	r1, r2
 8015074:	602b      	str	r3, [r5, #0]
 8015076:	f7f3 fbaf 	bl	80087d8 <_kill>
 801507a:	1c43      	adds	r3, r0, #1
 801507c:	d102      	bne.n	8015084 <_kill_r+0x1c>
 801507e:	682b      	ldr	r3, [r5, #0]
 8015080:	b103      	cbz	r3, 8015084 <_kill_r+0x1c>
 8015082:	6023      	str	r3, [r4, #0]
 8015084:	bd38      	pop	{r3, r4, r5, pc}
 8015086:	bf00      	nop
 8015088:	200081e4 	.word	0x200081e4

0801508c <_getpid_r>:
 801508c:	f7f3 bb9c 	b.w	80087c8 <_getpid>

08015090 <_init>:
 8015090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015092:	bf00      	nop
 8015094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015096:	bc08      	pop	{r3}
 8015098:	469e      	mov	lr, r3
 801509a:	4770      	bx	lr

0801509c <_fini>:
 801509c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801509e:	bf00      	nop
 80150a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80150a2:	bc08      	pop	{r3}
 80150a4:	469e      	mov	lr, r3
 80150a6:	4770      	bx	lr
